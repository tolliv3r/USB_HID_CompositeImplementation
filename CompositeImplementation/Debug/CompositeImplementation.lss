
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000198  00802000  00002fea  0000307e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000025a  00802198  00802198  00003218  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003216  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  00003288  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ba4f  00000000  00000000  00003828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005380  00000000  00000000  0000f277  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009df5  00000000  00000000  000145f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d1c  00000000  00000000  0001e3ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036d41  00000000  00000000  0001f108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c2e  00000000  00000000  00055e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000840  00000000  00000000  00059a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd69  00000000  00000000  0005a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop
       4:	34 c1       	rjmp	.+616    	; 0x26e <__bad_interrupt>
       6:	00 00       	nop
       8:	32 c1       	rjmp	.+612    	; 0x26e <__bad_interrupt>
       a:	00 00       	nop
       c:	30 c1       	rjmp	.+608    	; 0x26e <__bad_interrupt>
       e:	00 00       	nop
      10:	2e c1       	rjmp	.+604    	; 0x26e <__bad_interrupt>
      12:	00 00       	nop
      14:	2c c1       	rjmp	.+600    	; 0x26e <__bad_interrupt>
      16:	00 00       	nop
      18:	2a c1       	rjmp	.+596    	; 0x26e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	28 c1       	rjmp	.+592    	; 0x26e <__bad_interrupt>
      1e:	00 00       	nop
      20:	26 c1       	rjmp	.+588    	; 0x26e <__bad_interrupt>
      22:	00 00       	nop
      24:	24 c1       	rjmp	.+584    	; 0x26e <__bad_interrupt>
      26:	00 00       	nop
      28:	22 c1       	rjmp	.+580    	; 0x26e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	20 c1       	rjmp	.+576    	; 0x26e <__bad_interrupt>
      2e:	00 00       	nop
      30:	1e c1       	rjmp	.+572    	; 0x26e <__bad_interrupt>
      32:	00 00       	nop
      34:	1c c1       	rjmp	.+568    	; 0x26e <__bad_interrupt>
      36:	00 00       	nop
      38:	1a c1       	rjmp	.+564    	; 0x26e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	18 c1       	rjmp	.+560    	; 0x26e <__bad_interrupt>
      3e:	00 00       	nop
      40:	16 c1       	rjmp	.+556    	; 0x26e <__bad_interrupt>
      42:	00 00       	nop
      44:	14 c1       	rjmp	.+552    	; 0x26e <__bad_interrupt>
      46:	00 00       	nop
      48:	12 c1       	rjmp	.+548    	; 0x26e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	10 c1       	rjmp	.+544    	; 0x26e <__bad_interrupt>
      4e:	00 00       	nop
      50:	0e c1       	rjmp	.+540    	; 0x26e <__bad_interrupt>
      52:	00 00       	nop
      54:	0c c1       	rjmp	.+536    	; 0x26e <__bad_interrupt>
      56:	00 00       	nop
      58:	0a c1       	rjmp	.+532    	; 0x26e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	08 c1       	rjmp	.+528    	; 0x26e <__bad_interrupt>
      5e:	00 00       	nop
      60:	06 c1       	rjmp	.+524    	; 0x26e <__bad_interrupt>
      62:	00 00       	nop
      64:	04 c1       	rjmp	.+520    	; 0x26e <__bad_interrupt>
      66:	00 00       	nop
      68:	02 c1       	rjmp	.+516    	; 0x26e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	00 c1       	rjmp	.+512    	; 0x26e <__bad_interrupt>
      6e:	00 00       	nop
      70:	fe c0       	rjmp	.+508    	; 0x26e <__bad_interrupt>
      72:	00 00       	nop
      74:	fc c0       	rjmp	.+504    	; 0x26e <__bad_interrupt>
      76:	00 00       	nop
      78:	fa c0       	rjmp	.+500    	; 0x26e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f8 c0       	rjmp	.+496    	; 0x26e <__bad_interrupt>
      7e:	00 00       	nop
      80:	f6 c0       	rjmp	.+492    	; 0x26e <__bad_interrupt>
      82:	00 00       	nop
      84:	f4 c0       	rjmp	.+488    	; 0x26e <__bad_interrupt>
      86:	00 00       	nop
      88:	f2 c0       	rjmp	.+484    	; 0x26e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f0 c0       	rjmp	.+480    	; 0x26e <__bad_interrupt>
      8e:	00 00       	nop
      90:	ee c0       	rjmp	.+476    	; 0x26e <__bad_interrupt>
      92:	00 00       	nop
      94:	ec c0       	rjmp	.+472    	; 0x26e <__bad_interrupt>
      96:	00 00       	nop
      98:	ea c0       	rjmp	.+468    	; 0x26e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e8 c0       	rjmp	.+464    	; 0x26e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e6 c0       	rjmp	.+460    	; 0x26e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e4 c0       	rjmp	.+456    	; 0x26e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e2 c0       	rjmp	.+452    	; 0x26e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e0 c0       	rjmp	.+448    	; 0x26e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	de c0       	rjmp	.+444    	; 0x26e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	dc c0       	rjmp	.+440    	; 0x26e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	da c0       	rjmp	.+436    	; 0x26e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d8 c0       	rjmp	.+432    	; 0x26e <__bad_interrupt>
      be:	00 00       	nop
      c0:	d6 c0       	rjmp	.+428    	; 0x26e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d4 c0       	rjmp	.+424    	; 0x26e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d2 c0       	rjmp	.+420    	; 0x26e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d0 c0       	rjmp	.+416    	; 0x26e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ce c0       	rjmp	.+412    	; 0x26e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cc c0       	rjmp	.+408    	; 0x26e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ca c0       	rjmp	.+404    	; 0x26e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c8 c0       	rjmp	.+400    	; 0x26e <__bad_interrupt>
      de:	00 00       	nop
      e0:	c6 c0       	rjmp	.+396    	; 0x26e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c4 c0       	rjmp	.+392    	; 0x26e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c2 c0       	rjmp	.+388    	; 0x26e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c0 c0       	rjmp	.+384    	; 0x26e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	be c0       	rjmp	.+380    	; 0x26e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	bc c0       	rjmp	.+376    	; 0x26e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ba c0       	rjmp	.+372    	; 0x26e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b8 c0       	rjmp	.+368    	; 0x26e <__bad_interrupt>
      fe:	00 00       	nop
     100:	b6 c0       	rjmp	.+364    	; 0x26e <__bad_interrupt>
     102:	00 00       	nop
     104:	b4 c0       	rjmp	.+360    	; 0x26e <__bad_interrupt>
     106:	00 00       	nop
     108:	b2 c0       	rjmp	.+356    	; 0x26e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b0 c0       	rjmp	.+352    	; 0x26e <__bad_interrupt>
     10e:	00 00       	nop
     110:	ae c0       	rjmp	.+348    	; 0x26e <__bad_interrupt>
     112:	00 00       	nop
     114:	ac c0       	rjmp	.+344    	; 0x26e <__bad_interrupt>
     116:	00 00       	nop
     118:	aa c0       	rjmp	.+340    	; 0x26e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a8 c0       	rjmp	.+336    	; 0x26e <__bad_interrupt>
     11e:	00 00       	nop
     120:	a6 c0       	rjmp	.+332    	; 0x26e <__bad_interrupt>
     122:	00 00       	nop
     124:	a4 c0       	rjmp	.+328    	; 0x26e <__bad_interrupt>
     126:	00 00       	nop
     128:	a2 c0       	rjmp	.+324    	; 0x26e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a0 c0       	rjmp	.+320    	; 0x26e <__bad_interrupt>
     12e:	00 00       	nop
     130:	9e c0       	rjmp	.+316    	; 0x26e <__bad_interrupt>
     132:	00 00       	nop
     134:	9c c0       	rjmp	.+312    	; 0x26e <__bad_interrupt>
     136:	00 00       	nop
     138:	9a c0       	rjmp	.+308    	; 0x26e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	98 c0       	rjmp	.+304    	; 0x26e <__bad_interrupt>
     13e:	00 00       	nop
     140:	96 c0       	rjmp	.+300    	; 0x26e <__bad_interrupt>
     142:	00 00       	nop
     144:	94 c0       	rjmp	.+296    	; 0x26e <__bad_interrupt>
     146:	00 00       	nop
     148:	92 c0       	rjmp	.+292    	; 0x26e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	90 c0       	rjmp	.+288    	; 0x26e <__bad_interrupt>
     14e:	00 00       	nop
     150:	8e c0       	rjmp	.+284    	; 0x26e <__bad_interrupt>
     152:	00 00       	nop
     154:	8c c0       	rjmp	.+280    	; 0x26e <__bad_interrupt>
     156:	00 00       	nop
     158:	8a c0       	rjmp	.+276    	; 0x26e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	88 c0       	rjmp	.+272    	; 0x26e <__bad_interrupt>
     15e:	00 00       	nop
     160:	86 c0       	rjmp	.+268    	; 0x26e <__bad_interrupt>
     162:	00 00       	nop
     164:	84 c0       	rjmp	.+264    	; 0x26e <__bad_interrupt>
     166:	00 00       	nop
     168:	82 c0       	rjmp	.+260    	; 0x26e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	80 c0       	rjmp	.+256    	; 0x26e <__bad_interrupt>
     16e:	00 00       	nop
     170:	7e c0       	rjmp	.+252    	; 0x26e <__bad_interrupt>
     172:	00 00       	nop
     174:	7c c0       	rjmp	.+248    	; 0x26e <__bad_interrupt>
     176:	00 00       	nop
     178:	7a c0       	rjmp	.+244    	; 0x26e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	78 c0       	rjmp	.+240    	; 0x26e <__bad_interrupt>
     17e:	00 00       	nop
     180:	76 c0       	rjmp	.+236    	; 0x26e <__bad_interrupt>
     182:	00 00       	nop
     184:	74 c0       	rjmp	.+232    	; 0x26e <__bad_interrupt>
     186:	00 00       	nop
     188:	72 c0       	rjmp	.+228    	; 0x26e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	70 c0       	rjmp	.+224    	; 0x26e <__bad_interrupt>
     18e:	00 00       	nop
     190:	6e c0       	rjmp	.+220    	; 0x26e <__bad_interrupt>
     192:	00 00       	nop
     194:	6c c0       	rjmp	.+216    	; 0x26e <__bad_interrupt>
     196:	00 00       	nop
     198:	6a c0       	rjmp	.+212    	; 0x26e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	68 c0       	rjmp	.+208    	; 0x26e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	66 c0       	rjmp	.+204    	; 0x26e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	64 c0       	rjmp	.+200    	; 0x26e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	62 c0       	rjmp	.+196    	; 0x26e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	60 c0       	rjmp	.+192    	; 0x26e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	5e c0       	rjmp	.+188    	; 0x26e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	5c c0       	rjmp	.+184    	; 0x26e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	5a c0       	rjmp	.+180    	; 0x26e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	58 c0       	rjmp	.+176    	; 0x26e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	56 c0       	rjmp	.+172    	; 0x26e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	54 c0       	rjmp	.+168    	; 0x26e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	52 c0       	rjmp	.+164    	; 0x26e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	50 c0       	rjmp	.+160    	; 0x26e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	4e c0       	rjmp	.+156    	; 0x26e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4c c0       	rjmp	.+152    	; 0x26e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	4a c0       	rjmp	.+148    	; 0x26e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	48 c0       	rjmp	.+144    	; 0x26e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	46 c0       	rjmp	.+140    	; 0x26e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	44 c0       	rjmp	.+136    	; 0x26e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	42 c0       	rjmp	.+132    	; 0x26e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	40 c0       	rjmp	.+128    	; 0x26e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	3e c0       	rjmp	.+124    	; 0x26e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__vector_125>
     1f8:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__vector_126>
     1fc:	8e 04       	cpc	r8, r14
     1fe:	cd 04       	cpc	r12, r13
     200:	84 04       	cpc	r8, r4
     202:	cf 04       	cpc	r12, r15
     204:	86 04       	cpc	r8, r6
     206:	88 04       	cpc	r8, r8
     208:	8a 04       	cpc	r8, r10
     20a:	8c 04       	cpc	r8, r12
     20c:	8e 04       	cpc	r8, r14
     20e:	fb 05       	cpc	r31, r11
     210:	61 06       	cpc	r6, r17
     212:	c1 06       	cpc	r12, r17
     214:	21 07       	cpc	r18, r17
     216:	7d 07       	cpc	r23, r29
     218:	be 05       	cpc	r27, r14
     21a:	ec 07       	cpc	r30, r28
     21c:	4a 08       	sbc	r4, r10
     21e:	bd 10       	cpse	r11, r13
     220:	c0 10       	cpse	r12, r0
     222:	c3 10       	cpse	r12, r3
     224:	c6 10       	cpse	r12, r6
     226:	c9 10       	cpse	r12, r9
     228:	cc 10       	cpse	r12, r12
     22a:	cf 10       	cpse	r12, r15

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	cd bf       	out	0x3d, r28	; 61
     234:	df e5       	ldi	r29, 0x5F	; 95
     236:	de bf       	out	0x3e, r29	; 62
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	11 e2       	ldi	r17, 0x21	; 33
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e2       	ldi	r27, 0x20	; 32
     242:	ea ee       	ldi	r30, 0xEA	; 234
     244:	ff e2       	ldi	r31, 0x2F	; 47
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a8 39       	cpi	r26, 0x98	; 152
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	23 e2       	ldi	r18, 0x23	; 35
     258:	a8 e9       	ldi	r26, 0x98	; 152
     25a:	b1 e2       	ldi	r27, 0x21	; 33
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a2 3f       	cpi	r26, 0xF2	; 242
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <main>
     26a:	0c 94 f3 17 	jmp	0x2fe6	; 0x2fe6 <_exit>

0000026e <__bad_interrupt>:
     26e:	c8 ce       	rjmp	.-624    	; 0x0 <__vectors>

00000270 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	08 95       	ret

00000274 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     274:	30 91 e4 23 	lds	r19, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
     278:	20 91 e5 23 	lds	r18, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
     27c:	82 2f       	mov	r24, r18
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	02 97       	sbiw	r24, 0x02	; 2
     282:	c1 f4       	brne	.+48     	; 0x2b4 <udi_hid_led_setreport+0x40>
     284:	31 11       	cpse	r19, r1
     286:	18 c0       	rjmp	.+48     	; 0x2b8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     288:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
     28c:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	a1 f4       	brne	.+40     	; 0x2bc <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     294:	e2 ee       	ldi	r30, 0xE2	; 226
     296:	f3 e2       	ldi	r31, 0x23	; 35
     298:	88 e9       	ldi	r24, 0x98	; 152
     29a:	91 e2       	ldi	r25, 0x21	; 33
     29c:	80 87       	std	Z+8, r24	; 0x08
     29e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	82 87       	std	Z+10, r24	; 0x0a
     2a6:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     2a8:	83 e8       	ldi	r24, 0x83	; 131
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	84 87       	std	Z+12, r24	; 0x0c
     2ae:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	08 95       	ret
	}
	return false;
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	08 95       	ret
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	08 95       	ret
     2bc:	80 e0       	ldi	r24, 0x00	; 0
}
     2be:	08 95       	ret

000002c0 <udi_hid_led_report_in_sent>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep) {
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_led_b_report_in_free = true;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <udi_hid_led_b_report_in_free>
     2c6:	08 95       	ret

000002c8 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2cc:	03 e8       	ldi	r16, 0x83	; 131
     2ce:	11 e0       	ldi	r17, 0x01	; 1
     2d0:	21 e0       	ldi	r18, 0x01	; 1
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	48 e9       	ldi	r20, 0x98	; 152
     2d6:	51 e2       	ldi	r21, 0x21	; 33
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	0e 94 7e 14 	call	0x28fc	; 0x28fc <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
}
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	08 95       	ret

000002e6 <udi_hid_led_enable>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep);

/* --------------------------------------------------------------------- */

bool udi_hid_led_enable(void) {
     2e6:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2e8:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2ec:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <udi_hid_led_protocol>
	udi_hid_led_b_report_in_free = true;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <udi_hid_led_b_report_in_free>

	if(!udi_hid_led_report_out_enable())
     2f6:	e8 df       	rcall	.-48     	; 0x2c8 <udi_hid_led_report_out_enable>
     2f8:	c8 2f       	mov	r28, r24
     2fa:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2fc:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <main_led_enable>
	return true;
}
     300:	8c 2f       	mov	r24, r28
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     306:	81 11       	cpse	r24, r1
     308:	06 c0       	rjmp	.+12     	; 0x316 <udi_hid_led_report_out_received+0x10>
     30a:	61 30       	cpi	r22, 0x01	; 1
     30c:	71 05       	cpc	r23, r1
     30e:	19 f4       	brne	.+6      	; 0x316 <udi_hid_led_report_out_received+0x10>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     310:	88 e9       	ldi	r24, 0x98	; 152
     312:	91 e2       	ldi	r25, 0x21	; 33
     314:	5a d7       	rcall	.+3764   	; 0x11ca <led_ui_report>
	}
	udi_hid_led_report_out_enable();
     316:	d8 cf       	rjmp	.-80     	; 0x2c8 <udi_hid_led_report_out_enable>
     318:	08 95       	ret

0000031a <udi_hid_led_disable>:
     31a:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <main_led_disable>
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     31e:	08 95       	ret

00000320 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     320:	2a e3       	ldi	r18, 0x3A	; 58
     322:	31 e0       	ldi	r19, 0x01	; 1
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	50 e2       	ldi	r21, 0x20	; 32
     328:	60 ea       	ldi	r22, 0xA0	; 160
     32a:	71 e2       	ldi	r23, 0x21	; 33
     32c:	82 ea       	ldi	r24, 0xA2	; 162
     32e:	91 e2       	ldi	r25, 0x21	; 33
     330:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     334:	08 95       	ret

00000336 <udi_hid_led_send_report_in>:
		              udi_hid_led_report_out_received);
}


bool udi_hid_led_send_report_in(uint8_t *data)
{
     336:	ff 92       	push	r15
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	1f 92       	push	r1
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	9c 01       	movw	r18, r24
	if (!udi_hid_led_b_report_in_free)
     348:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <udi_hid_led_b_report_in_free>
     34c:	88 23       	and	r24, r24
     34e:	59 f1       	breq	.+86     	; 0x3a6 <udi_hid_led_send_report_in+0x70>
     350:	d9 01       	movw	r26, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     352:	8f b7       	in	r24, 0x3f	; 63
     354:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     356:	f8 94       	cli
	return flags;
     358:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();

	memset(&udi_hid_led_report_in,
     35a:	84 e0       	ldi	r24, 0x04	; 4
     35c:	2a e9       	ldi	r18, 0x9A	; 154
     35e:	31 e2       	ldi	r19, 0x21	; 33
     360:	f9 01       	movw	r30, r18
     362:	11 92       	st	Z+, r1
     364:	8a 95       	dec	r24
     366:	e9 f7       	brne	.-6      	; 0x362 <udi_hid_led_send_report_in+0x2c>
		   0,
		   sizeof(udi_hid_led_report_in));
	memcpy(&udi_hid_led_report_in,
     368:	8d 91       	ld	r24, X+
     36a:	9d 91       	ld	r25, X+
     36c:	0d 90       	ld	r0, X+
     36e:	bc 91       	ld	r27, X
     370:	a0 2d       	mov	r26, r0
     372:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <udi_hid_led_report_in>
     376:	90 93 9b 21 	sts	0x219B, r25	; 0x80219b <udi_hid_led_report_in+0x1>
     37a:	a0 93 9c 21 	sts	0x219C, r26	; 0x80219c <udi_hid_led_report_in+0x2>
     37e:	b0 93 9d 21 	sts	0x219D, r27	; 0x80219d <udi_hid_led_report_in+0x3>
		   data,
		   sizeof(udi_hid_led_report_in));
	udi_hid_led_b_report_in_free = !udd_ep_run(UDI_HID_LED_EP_IN,
     382:	00 e6       	ldi	r16, 0x60	; 96
     384:	11 e0       	ldi	r17, 0x01	; 1
     386:	24 e0       	ldi	r18, 0x04	; 4
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	4a e9       	ldi	r20, 0x9A	; 154
     38c:	51 e2       	ldi	r21, 0x21	; 33
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	84 e8       	ldi	r24, 0x84	; 132
     392:	0e 94 7e 14 	call	0x28fc	; 0x28fc <udd_ep_run>
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	89 27       	eor	r24, r25
     39a:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <udi_hid_led_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     39e:	ff be       	out	0x3f, r15	; 63
		                                       false,
		                                       (uint8_t *) & udi_hid_led_report_in,
		                                       sizeof(udi_hid_led_report_in),
		                                       udi_hid_led_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_led_b_report_in_free;
     3a0:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <udi_hid_led_b_report_in_free>
     3a4:	89 27       	eor	r24, r25
}
     3a6:	0f 90       	pop	r0
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	ff 90       	pop	r15
     3b2:	08 95       	ret

000003b4 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     3b4:	e0 e0       	ldi	r30, 0x00	; 0
     3b6:	f6 e0       	ldi	r31, 0x06	; 6
     3b8:	9f ef       	ldi	r25, 0xFF	; 255
     3ba:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     3bc:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     3be:	e0 e2       	ldi	r30, 0x20	; 32
     3c0:	f6 e0       	ldi	r31, 0x06	; 6
     3c2:	3f e3       	ldi	r19, 0x3F	; 63
     3c4:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3c6:	88 e1       	ldi	r24, 0x18	; 24
     3c8:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3ca:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3cc:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3ce:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3d0:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3d2:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     3d4:	20 ec       	ldi	r18, 0xC0	; 192
     3d6:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     3d8:	40 e4       	ldi	r20, 0x40	; 64
     3da:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     3dc:	40 e8       	ldi	r20, 0x80	; 128
     3de:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     3e0:	e0 e4       	ldi	r30, 0x40	; 64
     3e2:	f6 e0       	ldi	r31, 0x06	; 6
     3e4:	4c ef       	ldi	r20, 0xFC	; 252
     3e6:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e8:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ea:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ec:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ee:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f0:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f2:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     3f4:	43 e0       	ldi	r20, 0x03	; 3
     3f6:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     3f8:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     3fa:	e0 e6       	ldi	r30, 0x60	; 96
     3fc:	f6 e0       	ldi	r31, 0x06	; 6
     3fe:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     400:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     402:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     404:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     406:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     408:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40a:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     40c:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     40e:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     410:	e0 e8       	ldi	r30, 0x80	; 128
     412:	f6 e0       	ldi	r31, 0x06	; 6
     414:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     416:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     418:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41a:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41c:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41e:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     420:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     422:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     424:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     426:	e0 ea       	ldi	r30, 0xA0	; 160
     428:	f6 e0       	ldi	r31, 0x06	; 6
     42a:	90 ef       	ldi	r25, 0xF0	; 240
     42c:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     42e:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     430:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     432:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     434:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     436:	8f e0       	ldi	r24, 0x0F	; 15
     438:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     43a:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     43c:	e4 d2       	rcall	.+1480   	; 0xa06 <led_init>
	keypad_init();
     43e:	f9 c0       	rjmp	.+498    	; 0x632 <keypad_init>
     440:	08 95       	ret

00000442 <jstk_readVertIndex>:
     442:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     446:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	92 2b       	or	r25, r18
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	bc 01       	movw	r22, r24
     458:	7f 70       	andi	r23, 0x0F	; 15
     45a:	80 ff       	sbrs	r24, 0
     45c:	17 c0       	rjmp	.+46     	; 0x48c <jstk_readVertIndex+0x4a>
     45e:	21 e0       	ldi	r18, 0x01	; 1
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	e1 e0       	ldi	r30, 0x01	; 1
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	82 2f       	mov	r24, r18
     468:	af 01       	movw	r20, r30
     46a:	02 2e       	mov	r0, r18
     46c:	02 c0       	rjmp	.+4      	; 0x472 <jstk_readVertIndex+0x30>
     46e:	44 0f       	add	r20, r20
     470:	55 1f       	adc	r21, r21
     472:	0a 94       	dec	r0
     474:	e2 f7       	brpl	.-8      	; 0x46e <jstk_readVertIndex+0x2c>
     476:	46 23       	and	r20, r22
     478:	57 23       	and	r21, r23
     47a:	45 2b       	or	r20, r21
     47c:	41 f0       	breq	.+16     	; 0x48e <jstk_readVertIndex+0x4c>
     47e:	2f 5f       	subi	r18, 0xFF	; 255
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	2c 30       	cpi	r18, 0x0C	; 12
     484:	31 05       	cpc	r19, r1
     486:	79 f7       	brne	.-34     	; 0x466 <jstk_readVertIndex+0x24>
     488:	8f ef       	ldi	r24, 0xFF	; 255
     48a:	08 95       	ret
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	08 95       	ret

00000490 <jstk_readHoriIndex>:
     490:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     494:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	92 2b       	or	r25, r18
     49c:	bc 01       	movw	r22, r24
     49e:	7f 70       	andi	r23, 0x0F	; 15
     4a0:	80 ff       	sbrs	r24, 0
     4a2:	17 c0       	rjmp	.+46     	; 0x4d2 <jstk_readHoriIndex+0x42>
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	e1 e0       	ldi	r30, 0x01	; 1
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	82 2f       	mov	r24, r18
     4ae:	af 01       	movw	r20, r30
     4b0:	02 2e       	mov	r0, r18
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <jstk_readHoriIndex+0x28>
     4b4:	44 0f       	add	r20, r20
     4b6:	55 1f       	adc	r21, r21
     4b8:	0a 94       	dec	r0
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <jstk_readHoriIndex+0x24>
     4bc:	46 23       	and	r20, r22
     4be:	57 23       	and	r21, r23
     4c0:	45 2b       	or	r20, r21
     4c2:	41 f0       	breq	.+16     	; 0x4d4 <jstk_readHoriIndex+0x44>
     4c4:	2f 5f       	subi	r18, 0xFF	; 255
     4c6:	3f 4f       	sbci	r19, 0xFF	; 255
     4c8:	2c 30       	cpi	r18, 0x0C	; 12
     4ca:	31 05       	cpc	r19, r1
     4cc:	79 f7       	brne	.-34     	; 0x4ac <jstk_readHoriIndex+0x1c>
     4ce:	8f ef       	ldi	r24, 0xFF	; 255
     4d0:	08 95       	ret
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	08 95       	ret

000004d6 <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     4d6:	88 23       	and	r24, r24
     4d8:	f4 f1       	brlt	.+124    	; 0x556 <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     4da:	9b ef       	ldi	r25, 0xFB	; 251
     4dc:	98 0f       	add	r25, r24
     4de:	92 30       	cpi	r25, 0x02	; 2
     4e0:	e0 f1       	brcs	.+120    	; 0x55a <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     4e2:	85 30       	cpi	r24, 0x05	; 5
     4e4:	34 f4       	brge	.+12     	; 0x4f2 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4e6:	95 e0       	ldi	r25, 0x05	; 5
     4e8:	98 1b       	sub	r25, r24
     4ea:	92 30       	cpi	r25, 0x02	; 2
     4ec:	08 f0       	brcs	.+2      	; 0x4f0 <jstk_ledMask+0x1a>
     4ee:	42 c0       	rjmp	.+132    	; 0x574 <jstk_ledMask+0x9e>
     4f0:	36 c0       	rjmp	.+108    	; 0x55e <jstk_ledMask+0x88>
     4f2:	9a ef       	ldi	r25, 0xFA	; 250
     4f4:	98 0f       	add	r25, r24
     4f6:	92 30       	cpi	r25, 0x02	; 2
     4f8:	b0 f5       	brcc	.+108    	; 0x566 <jstk_ledMask+0x90>
     4fa:	31 c0       	rjmp	.+98     	; 0x55e <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4fc:	62 e0       	ldi	r22, 0x02	; 2
     4fe:	23 e0       	ldi	r18, 0x03	; 3
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     506:	e1 e0       	ldi	r30, 0x01	; 1
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	af 01       	movw	r20, r30
     50c:	02 2e       	mov	r0, r18
     50e:	02 c0       	rjmp	.+4      	; 0x514 <jstk_ledMask+0x3e>
     510:	44 0f       	add	r20, r20
     512:	55 1f       	adc	r21, r21
     514:	0a 94       	dec	r0
     516:	e2 f7       	brpl	.-8      	; 0x510 <jstk_ledMask+0x3a>
     518:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     51a:	9f 5f       	subi	r25, 0xFF	; 255
     51c:	21 50       	subi	r18, 0x01	; 1
     51e:	31 09       	sbc	r19, r1
     520:	96 17       	cp	r25, r22
     522:	98 f3       	brcs	.-26     	; 0x50a <jstk_ledMask+0x34>
     524:	08 95       	ret
     526:	81 50       	subi	r24, 0x01	; 1
     528:	48 2f       	mov	r20, r24
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	4b 5f       	subi	r20, 0xFB	; 251
     52e:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     530:	24 e0       	ldi	r18, 0x04	; 4
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     536:	e1 e0       	ldi	r30, 0x01	; 1
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	bf 01       	movw	r22, r30
     53c:	02 2e       	mov	r0, r18
     53e:	02 c0       	rjmp	.+4      	; 0x544 <jstk_ledMask+0x6e>
     540:	66 0f       	add	r22, r22
     542:	77 1f       	adc	r23, r23
     544:	0a 94       	dec	r0
     546:	e2 f7       	brpl	.-8      	; 0x540 <jstk_ledMask+0x6a>
     548:	86 2b       	or	r24, r22
     54a:	2f 5f       	subi	r18, 0xFF	; 255
     54c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     54e:	24 17       	cp	r18, r20
     550:	35 07       	cpc	r19, r21
     552:	99 f7       	brne	.-26     	; 0x53a <jstk_ledMask+0x64>
     554:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     55a:	88 e1       	ldi	r24, 0x18	; 24
     55c:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     55e:	85 30       	cpi	r24, 0x05	; 5
     560:	6c f2       	brlt	.-102    	; 0x4fc <jstk_ledMask+0x26>
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	e0 cf       	rjmp	.-64     	; 0x526 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     566:	85 50       	subi	r24, 0x05	; 5
     568:	85 30       	cpi	r24, 0x05	; 5
     56a:	08 f0       	brcs	.+2      	; 0x56e <jstk_ledMask+0x98>
     56c:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     56e:	81 11       	cpse	r24, r1
     570:	da cf       	rjmp	.-76     	; 0x526 <jstk_ledMask+0x50>
     572:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     574:	66 e0       	ldi	r22, 0x06	; 6
     576:	68 1b       	sub	r22, r24
     578:	65 30       	cpi	r22, 0x05	; 5
     57a:	08 f0       	brcs	.+2      	; 0x57e <jstk_ledMask+0xa8>
     57c:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     57e:	61 11       	cpse	r22, r1
     580:	be cf       	rjmp	.-132    	; 0x4fe <jstk_ledMask+0x28>
     582:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     584:	08 95       	ret

00000586 <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     586:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     588:	5c df       	rcall	.-328    	; 0x442 <jstk_readVertIndex>
     58a:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     58c:	81 df       	rcall	.-254    	; 0x490 <jstk_readHoriIndex>
     58e:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     590:	24 f4       	brge	.+8      	; 0x59a <jstk_readMask+0x14>
     592:	88 23       	and	r24, r24
     594:	c4 f0       	brlt	.+48     	; 0x5c6 <jstk_readMask+0x40>
     596:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     598:	09 c0       	rjmp	.+18     	; 0x5ac <jstk_readMask+0x26>
     59a:	c6 30       	cpi	r28, 0x06	; 6
     59c:	1c f0       	brlt	.+6      	; 0x5a4 <jstk_readMask+0x1e>
     59e:	9b ef       	ldi	r25, 0xFB	; 251
     5a0:	9c 0f       	add	r25, r28
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <jstk_readMask+0x22>
     5a4:	95 e0       	ldi	r25, 0x05	; 5
     5a6:	9c 1b       	sub	r25, r28
     5a8:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     5aa:	54 f0       	brlt	.+20     	; 0x5c0 <jstk_readMask+0x3a>
     5ac:	86 30       	cpi	r24, 0x06	; 6
     5ae:	1c f0       	brlt	.+6      	; 0x5b6 <jstk_readMask+0x30>
     5b0:	2b ef       	ldi	r18, 0xFB	; 251
     5b2:	28 0f       	add	r18, r24
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <jstk_readMask+0x34>
     5b6:	25 e0       	ldi	r18, 0x05	; 5
     5b8:	28 1b       	sub	r18, r24
     5ba:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <jstk_readMask+0x3a>
     5be:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     5c0:	8c 2f       	mov	r24, r28
     5c2:	89 df       	rcall	.-238    	; 0x4d6 <jstk_ledMask>
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <jstk_readMask+0x42>
     5c6:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     5c8:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     5ca:	08 95       	ret

000005cc <jstk_usbTask>:
     5cc:	61 df       	rcall	.-318    	; 0x490 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5ce:	88 23       	and	r24, r24
     5d0:	3c f0       	brlt	.+14     	; 0x5e0 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5d2:	e8 2f       	mov	r30, r24
     5d4:	88 0f       	add	r24, r24
     5d6:	ff 0b       	sbc	r31, r31
     5d8:	e8 58       	subi	r30, 0x88	; 136
     5da:	fe 4d       	sbci	r31, 0xDE	; 222
     5dc:	80 81       	ld	r24, Z
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5e0:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     5e2:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5e6:	2d df       	rcall	.-422    	; 0x442 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5e8:	88 23       	and	r24, r24
     5ea:	3c f0       	brlt	.+14     	; 0x5fa <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5ec:	e8 2f       	mov	r30, r24
     5ee:	88 0f       	add	r24, r24
     5f0:	ff 0b       	sbc	r31, r31
     5f2:	e8 58       	subi	r30, 0x88	; 136
     5f4:	fe 4d       	sbci	r31, 0xDE	; 222
     5f6:	80 81       	ld	r24, Z
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5fa:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5fc:	e4 ea       	ldi	r30, 0xA4	; 164
     5fe:	f1 e2       	ldi	r31, 0x21	; 33
     600:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     602:	20 81       	ld	r18, Z
     604:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     608:	29 13       	cpse	r18, r25
     60a:	04 c0       	rjmp	.+8      	; 0x614 <jstk_usbTask+0x48>
     60c:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     610:	98 17       	cp	r25, r24
     612:	71 f0       	breq	.+28     	; 0x630 <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     614:	84 ea       	ldi	r24, 0xA4	; 164
     616:	91 e2       	ldi	r25, 0x21	; 33
     618:	2b d7       	rcall	.+3670   	; 0x1470 <udi_hid_generic_send_report_in>
     61a:	88 23       	and	r24, r24
     61c:	49 f0       	breq	.+18     	; 0x630 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     61e:	e6 e2       	ldi	r30, 0x26	; 38
     620:	f0 e2       	ldi	r31, 0x20	; 32
     622:	a4 ea       	ldi	r26, 0xA4	; 164
     624:	b1 e2       	ldi	r27, 0x21	; 33
     626:	8c 91       	ld	r24, X
     628:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     62a:	11 96       	adiw	r26, 0x01	; 1
     62c:	8c 91       	ld	r24, X
     62e:	81 83       	std	Z+1, r24	; 0x01
     630:	08 95       	ret

00000632 <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     632:	10 92 c1 21 	sts	0x21C1, r1	; 0x8021c1 <kpd_keyPressed>
     636:	10 92 be 21 	sts	0x21BE, r1	; 0x8021be <kpd_currState>
     63a:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <kpd_prevState>
     63e:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <kpd_exitTestMode>
     642:	10 92 c2 21 	sts	0x21C2, r1	; 0x8021c2 <kpd_rowVal>
     646:	10 92 c0 21 	sts	0x21C0, r1	; 0x8021c0 <kpd_code>
     64a:	e8 ec       	ldi	r30, 0xC8	; 200
     64c:	f1 e2       	ldi	r31, 0x21	; 33
     64e:	81 e6       	ldi	r24, 0x61	; 97
     650:	80 83       	st	Z, r24
     652:	80 e6       	ldi	r24, 0x60	; 96
     654:	81 83       	std	Z+1, r24	; 0x01
     656:	12 82       	std	Z+2, r1	; 0x02
     658:	13 82       	std	Z+3, r1	; 0x03
     65a:	8f e5       	ldi	r24, 0x5F	; 95
     65c:	84 83       	std	Z+4, r24	; 0x04
     65e:	8e e5       	ldi	r24, 0x5E	; 94
     660:	85 83       	std	Z+5, r24	; 0x05
     662:	16 82       	std	Z+6, r1	; 0x06
     664:	17 82       	std	Z+7, r1	; 0x07
     666:	8d e5       	ldi	r24, 0x5D	; 93
     668:	80 87       	std	Z+8, r24	; 0x08
     66a:	11 86       	std	Z+9, r1	; 0x09
     66c:	12 86       	std	Z+10, r1	; 0x0a
     66e:	13 86       	std	Z+11, r1	; 0x0b
     670:	14 86       	std	Z+12, r1	; 0x0c
     672:	15 86       	std	Z+13, r1	; 0x0d
     674:	89 e5       	ldi	r24, 0x59	; 89
     676:	86 87       	std	Z+14, r24	; 0x0e
     678:	8b e5       	ldi	r24, 0x5B	; 91
     67a:	87 87       	std	Z+15, r24	; 0x0f
     67c:	10 8a       	std	Z+16, r1	; 0x10
     67e:	11 8a       	std	Z+17, r1	; 0x11
     680:	8a e5       	ldi	r24, 0x5A	; 90
     682:	82 8b       	std	Z+18, r24	; 0x12
     684:	8c e5       	ldi	r24, 0x5C	; 92
     686:	83 8b       	std	Z+19, r24	; 0x13
     688:	e3 ec       	ldi	r30, 0xC3	; 195
     68a:	f1 e2       	ldi	r31, 0x21	; 33
     68c:	8e e0       	ldi	r24, 0x0E	; 14
     68e:	80 83       	st	Z, r24
     690:	8d e0       	ldi	r24, 0x0D	; 13
     692:	81 83       	std	Z+1, r24	; 0x01
     694:	8b e0       	ldi	r24, 0x0B	; 11
     696:	82 83       	std	Z+2, r24	; 0x02
     698:	87 e0       	ldi	r24, 0x07	; 7
     69a:	83 83       	std	Z+3, r24	; 0x03
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	84 83       	std	Z+4, r24	; 0x04
     6a0:	08 95       	ret

000006a2 <keypad_poll>:
     6a2:	4f 92       	push	r4
     6a4:	5f 92       	push	r5
     6a6:	6f 92       	push	r6
     6a8:	7f 92       	push	r7
     6aa:	8f 92       	push	r8
     6ac:	9f 92       	push	r9
     6ae:	af 92       	push	r10
     6b0:	bf 92       	push	r11
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ea ea       	ldi	r30, 0xAA	; 170
     6c4:	f1 e2       	ldi	r31, 0x21	; 33
     6c6:	83 eb       	ldi	r24, 0xB3	; 179
     6c8:	91 e2       	ldi	r25, 0x21	; 33
     6ca:	11 92       	st	Z+, r1
     6cc:	8e 17       	cp	r24, r30
     6ce:	9f 07       	cpc	r25, r31
     6d0:	e1 f7       	brne	.-8      	; 0x6ca <keypad_poll+0x28>
     6d2:	40 90 a9 21 	lds	r4, 0x21A9	; 0x8021a9 <prevRowMask.5334>
     6d6:	04 e8       	ldi	r16, 0x84	; 132
     6d8:	11 e2       	ldi	r17, 0x21	; 33
     6da:	c0 e0       	ldi	r28, 0x00	; 0
     6dc:	d0 e0       	ldi	r29, 0x00	; 0
     6de:	b1 2c       	mov	r11, r1
     6e0:	0f 2e       	mov	r0, r31
     6e2:	f5 e0       	ldi	r31, 0x05	; 5
     6e4:	6f 2e       	mov	r6, r31
     6e6:	f0 2d       	mov	r31, r0
     6e8:	68 94       	set
     6ea:	77 24       	eor	r7, r7
     6ec:	72 f8       	bld	r7, 2
     6ee:	0f 2e       	mov	r0, r31
     6f0:	f0 ea       	ldi	r31, 0xA0	; 160
     6f2:	ef 2e       	mov	r14, r31
     6f4:	f6 e0       	ldi	r31, 0x06	; 6
     6f6:	ff 2e       	mov	r15, r31
     6f8:	f0 2d       	mov	r31, r0
     6fa:	0f 2e       	mov	r0, r31
     6fc:	f0 e2       	ldi	r31, 0x20	; 32
     6fe:	cf 2e       	mov	r12, r31
     700:	f6 e0       	ldi	r31, 0x06	; 6
     702:	df 2e       	mov	r13, r31
     704:	f0 2d       	mov	r31, r0
     706:	68 94       	set
     708:	88 24       	eor	r8, r8
     70a:	87 f8       	bld	r8, 7
     70c:	99 24       	eor	r9, r9
     70e:	93 94       	inc	r9
     710:	ac 2e       	mov	r10, r28
     712:	fe 01       	movw	r30, r28
     714:	ed 53       	subi	r30, 0x3D	; 61
     716:	fe 4d       	sbci	r31, 0xDE	; 222
     718:	80 81       	ld	r24, Z
     71a:	d7 01       	movw	r26, r14
     71c:	14 96       	adiw	r26, 0x04	; 4
     71e:	8c 93       	st	X, r24
     720:	b4 e0       	ldi	r27, 0x04	; 4
     722:	cb 13       	cpse	r28, r27
     724:	03 c0       	rjmp	.+6      	; 0x72c <keypad_poll+0x8a>
     726:	f6 01       	movw	r30, r12
     728:	86 82       	std	Z+6, r8	; 0x06
     72a:	03 c0       	rjmp	.+6      	; 0x732 <keypad_poll+0x90>
     72c:	d6 01       	movw	r26, r12
     72e:	15 96       	adiw	r26, 0x05	; 5
     730:	8c 92       	st	X, r8
     732:	f7 01       	movw	r30, r14
     734:	80 85       	ldd	r24, Z+8	; 0x08
     736:	80 7f       	andi	r24, 0xF0	; 240
     738:	80 95       	com	r24
     73a:	f8 2f       	mov	r31, r24
     73c:	f0 7f       	andi	r31, 0xF0	; 240
     73e:	5f 2e       	mov	r5, r31
     740:	84 fd       	sbrc	r24, 4
     742:	b3 94       	inc	r11
     744:	85 fd       	sbrc	r24, 5
     746:	b3 94       	inc	r11
     748:	86 fd       	sbrc	r24, 6
     74a:	b3 94       	inc	r11
     74c:	55 20       	and	r5, r5
     74e:	0c f4       	brge	.+2      	; 0x752 <keypad_poll+0xb0>
     750:	b3 94       	inc	r11
     752:	f8 01       	movw	r30, r16
     754:	84 e0       	ldi	r24, 0x04	; 4
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	25 2d       	mov	r18, r5
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	a9 01       	movw	r20, r18
     75e:	b9 01       	movw	r22, r18
     760:	08 2e       	mov	r0, r24
     762:	02 c0       	rjmp	.+4      	; 0x768 <keypad_poll+0xc6>
     764:	75 95       	asr	r23
     766:	67 95       	ror	r22
     768:	0a 94       	dec	r0
     76a:	e2 f7       	brpl	.-8      	; 0x764 <keypad_poll+0xc2>
     76c:	60 ff       	sbrs	r22, 0
     76e:	0a c0       	rjmp	.+20     	; 0x784 <keypad_poll+0xe2>
     770:	60 81       	ld	r22, Z
     772:	69 30       	cpi	r22, 0x09	; 9
     774:	38 f4       	brcc	.+14     	; 0x784 <keypad_poll+0xe2>
     776:	06 2e       	mov	r0, r22
     778:	00 0c       	add	r0, r0
     77a:	77 0b       	sbc	r23, r23
     77c:	66 55       	subi	r22, 0x56	; 86
     77e:	7e 4d       	sbci	r23, 0xDE	; 222
     780:	db 01       	movw	r26, r22
     782:	9c 92       	st	X, r9
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	88 30       	cpi	r24, 0x08	; 8
     78a:	91 05       	cpc	r25, r1
     78c:	39 f7       	brne	.-50     	; 0x75c <keypad_poll+0xba>
     78e:	ca 01       	movw	r24, r20
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	48 23       	and	r20, r24
     794:	59 23       	and	r21, r25
     796:	45 2b       	or	r20, r21
     798:	49 f0       	breq	.+18     	; 0x7ac <keypad_poll+0x10a>
     79a:	b4 2d       	mov	r27, r4
     79c:	b0 95       	com	r27
     79e:	b5 21       	and	r27, r5
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <keypad_poll+0x102>
     7a2:	b5 2d       	mov	r27, r5
     7a4:	8b 2f       	mov	r24, r27
     7a6:	81 95       	neg	r24
     7a8:	b8 23       	and	r27, r24
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <keypad_poll+0x10c>
     7ac:	b5 2d       	mov	r27, r5
     7ae:	b0 32       	cpi	r27, 0x20	; 32
     7b0:	79 f0       	breq	.+30     	; 0x7d0 <keypad_poll+0x12e>
     7b2:	20 f4       	brcc	.+8      	; 0x7bc <keypad_poll+0x11a>
     7b4:	b0 31       	cpi	r27, 0x10	; 16
     7b6:	09 f4       	brne	.+2      	; 0x7ba <keypad_poll+0x118>
     7b8:	48 c0       	rjmp	.+144    	; 0x84a <keypad_poll+0x1a8>
     7ba:	0e c0       	rjmp	.+28     	; 0x7d8 <keypad_poll+0x136>
     7bc:	b0 34       	cpi	r27, 0x40	; 64
     7be:	09 f4       	brne	.+2      	; 0x7c2 <keypad_poll+0x120>
     7c0:	46 c0       	rjmp	.+140    	; 0x84e <keypad_poll+0x1ac>
     7c2:	b0 38       	cpi	r27, 0x80	; 128
     7c4:	49 f4       	brne	.+18     	; 0x7d8 <keypad_poll+0x136>
     7c6:	0f 2e       	mov	r0, r31
     7c8:	f3 e0       	ldi	r31, 0x03	; 3
     7ca:	7f 2e       	mov	r7, r31
     7cc:	f0 2d       	mov	r31, r0
     7ce:	42 c0       	rjmp	.+132    	; 0x854 <keypad_poll+0x1b2>
     7d0:	bb 23       	and	r27, r27
     7d2:	11 f0       	breq	.+4      	; 0x7d8 <keypad_poll+0x136>
     7d4:	6a 2c       	mov	r6, r10
     7d6:	79 2c       	mov	r7, r9
     7d8:	21 96       	adiw	r28, 0x01	; 1
     7da:	0c 5f       	subi	r16, 0xFC	; 252
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	45 2c       	mov	r4, r5
     7e0:	c5 30       	cpi	r28, 0x05	; 5
     7e2:	d1 05       	cpc	r29, r1
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <keypad_poll+0x146>
     7e6:	94 cf       	rjmp	.-216    	; 0x710 <keypad_poll+0x6e>
     7e8:	50 92 a9 21 	sts	0x21A9, r5	; 0x8021a9 <prevRowMask.5334>
     7ec:	80 e8       	ldi	r24, 0x80	; 128
     7ee:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     7f2:	b3 e0       	ldi	r27, 0x03	; 3
     7f4:	b7 15       	cp	r27, r7
     7f6:	e0 f0       	brcs	.+56     	; 0x830 <keypad_poll+0x18e>
     7f8:	e6 2d       	mov	r30, r6
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	ee 0f       	add	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	e8 53       	subi	r30, 0x38	; 56
     806:	fe 4d       	sbci	r31, 0xDE	; 222
     808:	e7 0d       	add	r30, r7
     80a:	f1 1d       	adc	r31, r1
     80c:	80 81       	ld	r24, Z
     80e:	90 91 c1 21 	lds	r25, 0x21C1	; 0x8021c1 <kpd_keyPressed>
     812:	91 11       	cpse	r25, r1
     814:	06 c0       	rjmp	.+12     	; 0x822 <keypad_poll+0x180>
     816:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <kpd_code>
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 c1 21 	sts	0x21C1, r24	; 0x8021c1 <kpd_keyPressed>
     820:	0d c0       	rjmp	.+26     	; 0x83c <keypad_poll+0x19a>
     822:	90 91 c0 21 	lds	r25, 0x21C0	; 0x8021c0 <kpd_code>
     826:	89 17       	cp	r24, r25
     828:	49 f0       	breq	.+18     	; 0x83c <keypad_poll+0x19a>
     82a:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <kpd_code>
     82e:	06 c0       	rjmp	.+12     	; 0x83c <keypad_poll+0x19a>
     830:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <kpd_keyPressed>
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	11 f4       	brne	.+4      	; 0x83c <keypad_poll+0x19a>
     838:	10 92 c1 21 	sts	0x21C1, r1	; 0x8021c1 <kpd_keyPressed>
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	8b 15       	cp	r24, r11
     840:	08 f0       	brcs	.+2      	; 0x844 <keypad_poll+0x1a2>
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	80 93 bc 21 	sts	0x21BC, r24	; 0x8021bc <kpd_multiPress>
     848:	07 c0       	rjmp	.+14     	; 0x858 <keypad_poll+0x1b6>
     84a:	71 2c       	mov	r7, r1
     84c:	03 c0       	rjmp	.+6      	; 0x854 <keypad_poll+0x1b2>
     84e:	68 94       	set
     850:	77 24       	eor	r7, r7
     852:	71 f8       	bld	r7, 1
     854:	6a 2c       	mov	r6, r10
     856:	c0 cf       	rjmp	.-128    	; 0x7d8 <keypad_poll+0x136>
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	af 90       	pop	r10
     86c:	9f 90       	pop	r9
     86e:	8f 90       	pop	r8
     870:	7f 90       	pop	r7
     872:	6f 90       	pop	r6
     874:	5f 90       	pop	r5
     876:	4f 90       	pop	r4
     878:	08 95       	ret

0000087a <keypad_getState>:
     87a:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <kpd_keyPressed>
     87e:	08 95       	ret

00000880 <kbd_getMap>:

uint16_t kbd_getMap(void) {
     880:	ea ea       	ldi	r30, 0xAA	; 170
     882:	f1 e2       	ldi	r31, 0x21	; 33
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t bits = 0;
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	50 e0       	ldi	r21, 0x00	; 0

	for (uint8_t i = 0; i < 9; ++i) {
		if (keyMap[i]) {
			bits |= (1 << i);
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	70 e0       	ldi	r23, 0x00	; 0

uint16_t kbd_getMap(void) {
	uint16_t bits = 0;

	for (uint8_t i = 0; i < 9; ++i) {
		if (keyMap[i]) {
     890:	91 91       	ld	r25, Z+
     892:	99 23       	and	r25, r25
     894:	49 f0       	breq	.+18     	; 0x8a8 <kbd_getMap+0x28>
			bits |= (1 << i);
     896:	cb 01       	movw	r24, r22
     898:	02 2e       	mov	r0, r18
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <kbd_getMap+0x20>
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	0a 94       	dec	r0
     8a2:	e2 f7       	brpl	.-8      	; 0x89c <kbd_getMap+0x1c>
     8a4:	48 2b       	or	r20, r24
     8a6:	59 2b       	or	r21, r25
     8a8:	2f 5f       	subi	r18, 0xFF	; 255
     8aa:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint16_t kbd_getMap(void) {
	uint16_t bits = 0;

	for (uint8_t i = 0; i < 9; ++i) {
     8ac:	29 30       	cpi	r18, 0x09	; 9
     8ae:	31 05       	cpc	r19, r1
     8b0:	79 f7       	brne	.-34     	; 0x890 <kbd_getMap+0x10>
			bits |= (1 << i);
		}
	}

	return bits;
}
     8b2:	ca 01       	movw	r24, r20
     8b4:	08 95       	ret

000008b6 <keypad_report>:


// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     8b6:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     8ba:	80 93 ba 21 	sts	0x21BA, r24	; 0x8021ba <kpd_testMode>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     8be:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     8c2:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     8c6:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_currentCode = keypad_getCode();    // current code to be outputed
     8ca:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <kpd_currentCode>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     8ce:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <kpd_testMode>
     8d2:	84 fd       	sbrc	r24, 4
     8d4:	29 c0       	rjmp	.+82     	; 0x928 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     8d6:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <kpd_currState>
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <keypad_report+0x2a>
     8de:	4d c0       	rjmp	.+154    	; 0x97a <keypad_report+0xc4>
     8e0:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <kpd_prevState>
     8e4:	81 11       	cpse	r24, r1
     8e6:	49 c0       	rjmp	.+146    	; 0x97a <keypad_report+0xc4>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
     8e8:	e0 91 bd 21 	lds	r30, 0x21BD	; 0x8021bd <kpd_currentCode>
     8ec:	8e 2f       	mov	r24, r30
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	fc 01       	movw	r30, r24
     8f2:	e9 55       	subi	r30, 0x59	; 89
     8f4:	f1 09       	sbc	r31, r1
     8f6:	e9 30       	cpi	r30, 0x09	; 9
     8f8:	f1 05       	cpc	r31, r1
     8fa:	90 f4       	brcc	.+36     	; 0x920 <keypad_report+0x6a>
     8fc:	88 27       	eor	r24, r24
     8fe:	e2 50       	subi	r30, 0x02	; 2
     900:	ff 4f       	sbci	r31, 0xFF	; 255
     902:	8f 4f       	sbci	r24, 0xFF	; 255
     904:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     908:	84 e0       	ldi	r24, 0x04	; 4
     90a:	09 c0       	rjmp	.+18     	; 0x91e <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     90c:	80 e1       	ldi	r24, 0x10	; 16
     90e:	07 c0       	rjmp	.+14     	; 0x91e <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     910:	80 e2       	ldi	r24, 0x20	; 32
     912:	05 c0       	rjmp	.+10     	; 0x91e <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     914:	80 e4       	ldi	r24, 0x40	; 64
     916:	03 c0       	rjmp	.+6      	; 0x91e <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     918:	80 e8       	ldi	r24, 0x80	; 128
     91a:	01 c0       	rjmp	.+2      	; 0x91e <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     91c:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     91e:	94 d0       	rcall	.+296    	; 0xa48 <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	80 93 bb 21 	sts	0x21BB, r24	; 0x8021bb <kpd_exitTestMode>
     926:	29 c0       	rjmp	.+82     	; 0x97a <keypad_report+0xc4>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     928:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <kpd_keyPressed>

		static bool    kpd_firstKey  = false;
		static uint8_t kpd_firstCode = 0;
		static bool    kpd_block     = false;

		if (!kpd_firstKey) {
     92c:	90 91 a8 21 	lds	r25, 0x21A8	; 0x8021a8 <kpd_firstKey.5390>
     930:	91 11       	cpse	r25, r1
     932:	0b c0       	rjmp	.+22     	; 0x94a <keypad_report+0x94>
			if (kpd_anyPressed) {
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	09 f5       	brne	.+66     	; 0x97a <keypad_report+0xc4>
				kpd_firstKey = true;
     938:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <kpd_firstKey.5390>
				kpd_firstCode = kpd_currentCode;
     93c:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <kpd_currentCode>
     940:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <kpd_firstCode.5391>
				kpd_block = false;
     944:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <kpd_block.5392>
     948:	18 c0       	rjmp	.+48     	; 0x97a <keypad_report+0xc4>
			}
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	51 f5       	brne	.+84     	; 0x9a2 <keypad_report+0xec>
     94e:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_block.5392>
     952:	81 11       	cpse	r24, r1
     954:	12 c0       	rjmp	.+36     	; 0x97a <keypad_report+0xc4>
     956:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <kpd_multiPress>
     95a:	88 23       	and	r24, r24
     95c:	71 f0       	breq	.+28     	; 0x97a <keypad_report+0xc4>
				kpd_block = true;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <kpd_block.5392>
     964:	0a c0       	rjmp	.+20     	; 0x97a <keypad_report+0xc4>
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
					udi_hid_kbd_down(kpd_firstCode);
     966:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <kpd_firstCode.5391>
     96a:	3f d6       	rcall	.+3198   	; 0x15ea <udi_hid_kbd_down>
					udi_hid_kbd_up(kpd_firstCode);
     96c:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <kpd_firstCode.5391>
     970:	00 d6       	rcall	.+3072   	; 0x1572 <udi_hid_kbd_up>
				}
				kpd_firstKey = false;
     972:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <kpd_firstKey.5390>
				kpd_block = false;
     976:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <kpd_block.5392>
			}
		}
	}

	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     97a:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <kpd_testMode>
     97e:	84 ff       	sbrs	r24, 4
     980:	07 c0       	rjmp	.+14     	; 0x990 <keypad_report+0xda>
     982:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <kpd_exitTestMode>
     986:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     988:	19 f4       	brne	.+6      	; 0x990 <keypad_report+0xda>
     98a:	4e d0       	rcall	.+156    	; 0xa28 <led_allOff>
		kpd_exitTestMode = 0;
     98c:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <kpd_exitTestMode>
	}
	kpd_prevState = kpd_currState;
     990:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <kpd_currState>
     994:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <kpd_prevState>
     998:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	c0 cf       	rjmp	.-128    	; 0x91e <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     99e:	88 e0       	ldi	r24, 0x08	; 8
     9a0:	be cf       	rjmp	.-132    	; 0x91e <keypad_report+0x68>
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
				kpd_block = true;
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
     9a2:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_block.5392>
     9a6:	81 11       	cpse	r24, r1
     9a8:	e4 cf       	rjmp	.-56     	; 0x972 <keypad_report+0xbc>
     9aa:	dd cf       	rjmp	.-70     	; 0x966 <keypad_report+0xb0>

000009ac <led_updateState>:
}

void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;

    ledMap[8] = false;
     9ac:	ed ed       	ldi	r30, 0xDD	; 221
     9ae:	f1 e2       	ldi	r31, 0x21	; 33
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	ac 01       	movw	r20, r24
     9b8:	02 2e       	mov	r0, r18
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <led_updateState+0x14>
     9bc:	55 95       	asr	r21
     9be:	47 95       	ror	r20
     9c0:	0a 94       	dec	r0
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <led_updateState+0x10>
     9c4:	40 fd       	sbrc	r20, 0
     9c6:	60 83       	st	Z, r22
     9c8:	2f 5f       	subi	r18, 0xFF	; 255
     9ca:	3f 4f       	sbci	r19, 0xFF	; 255
     9cc:	31 96       	adiw	r30, 0x01	; 1
     9ce:	28 30       	cpi	r18, 0x08	; 8
     9d0:	31 05       	cpc	r19, r1
     9d2:	89 f7       	brne	.-30     	; 0x9b6 <led_updateState+0xa>
     9d4:	08 95       	ret

000009d6 <userActivity>:
     9d6:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     9da:	80 93 ed 21 	sts	0x21ED, r24	; 0x8021ed <testMode>
     9de:	61 de       	rcall	.-830    	; 0x6a2 <keypad_poll>
     9e0:	80 91 ed 21 	lds	r24, 0x21ED	; 0x8021ed <testMode>
     9e4:	84 ff       	sbrs	r24, 4
     9e6:	0a c0       	rjmp	.+20     	; 0x9fc <userActivity+0x26>
     9e8:	48 df       	rcall	.-368    	; 0x87a <keypad_getState>
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	49 f0       	breq	.+18     	; 0xa00 <userActivity+0x2a>
     9ee:	cb dd       	rcall	.-1130   	; 0x586 <jstk_readMask>
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	81 11       	cpse	r24, r1
     9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <userActivity+0x22>
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	89 2f       	mov	r24, r25
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <userActivity+0x2c>
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <userActivity+0x2c>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	81 70       	andi	r24, 0x01	; 1
     a04:	08 95       	ret

00000a06 <led_init>:
     a06:	e0 e0       	ldi	r30, 0x00	; 0
     a08:	f6 e0       	ldi	r31, 0x06	; 6
     a0a:	8f ef       	ldi	r24, 0xFF	; 255
     a0c:	81 83       	std	Z+1, r24	; 0x01
     a0e:	85 83       	std	Z+5, r24	; 0x05
     a10:	e0 e2       	ldi	r30, 0x20	; 32
     a12:	f6 e0       	ldi	r31, 0x06	; 6
     a14:	80 e4       	ldi	r24, 0x40	; 64
     a16:	81 83       	std	Z+1, r24	; 0x01
     a18:	86 83       	std	Z+6, r24	; 0x06
     a1a:	08 95       	ret

00000a1c <led_allOn>:
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     a22:	61 e0       	ldi	r22, 0x01	; 1
     a24:	c3 cf       	rjmp	.-122    	; 0x9ac <led_updateState>
     a26:	08 95       	ret

00000a28 <led_allOff>:
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	bd cf       	rjmp	.-134    	; 0x9ac <led_updateState>
     a32:	08 95       	ret

00000a34 <led_on>:
     a34:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	b8 cf       	rjmp	.-144    	; 0x9ac <led_updateState>
     a3c:	08 95       	ret

00000a3e <led_off>:
     a3e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	b3 cf       	rjmp	.-154    	; 0x9ac <led_updateState>
     a46:	08 95       	ret

00000a48 <led_toggle>:
     a48:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     a4c:	ed ed       	ldi	r30, 0xDD	; 221
     a4e:	f1 e2       	ldi	r31, 0x21	; 33
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	68 2f       	mov	r22, r24
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	ab 01       	movw	r20, r22
     a5c:	02 2e       	mov	r0, r18
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <led_toggle+0x1c>
     a60:	55 95       	asr	r21
     a62:	47 95       	ror	r20
     a64:	0a 94       	dec	r0
     a66:	e2 f7       	brpl	.-8      	; 0xa60 <led_toggle+0x18>
     a68:	40 ff       	sbrs	r20, 0
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <led_toggle+0x2a>
     a6c:	90 81       	ld	r25, Z
     a6e:	98 27       	eor	r25, r24
     a70:	90 83       	st	Z, r25
     a72:	2f 5f       	subi	r18, 0xFF	; 255
     a74:	3f 4f       	sbci	r19, 0xFF	; 255
     a76:	31 96       	adiw	r30, 0x01	; 1
     a78:	28 30       	cpi	r18, 0x08	; 8
     a7a:	31 05       	cpc	r19, r1
     a7c:	71 f7       	brne	.-36     	; 0xa5a <led_toggle+0x12>
     a7e:	08 95       	ret

00000a80 <led_setState>:
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f6 e0       	ldi	r31, 0x06	; 6
     a84:	9f ef       	ldi	r25, 0xFF	; 255
     a86:	95 83       	std	Z+5, r25	; 0x05
     a88:	86 83       	std	Z+6, r24	; 0x06
     a8a:	ed ed       	ldi	r30, 0xDD	; 221
     a8c:	f1 e2       	ldi	r31, 0x21	; 33
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	ac 01       	movw	r20, r24
     a96:	02 2e       	mov	r0, r18
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <led_setState+0x1e>
     a9a:	55 95       	asr	r21
     a9c:	47 95       	ror	r20
     a9e:	0a 94       	dec	r0
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <led_setState+0x1a>
     aa2:	41 70       	andi	r20, 0x01	; 1
     aa4:	41 93       	st	Z+, r20
     aa6:	2f 5f       	subi	r18, 0xFF	; 255
     aa8:	3f 4f       	sbci	r19, 0xFF	; 255
     aaa:	28 30       	cpi	r18, 0x08	; 8
     aac:	31 05       	cpc	r19, r1
     aae:	91 f7       	brne	.-28     	; 0xa94 <led_setState+0x14>
     ab0:	08 95       	ret

00000ab2 <led_getMap>:
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	ad ed       	ldi	r26, 0xDD	; 221
     ab8:	b1 e2       	ldi	r27, 0x21	; 33
     aba:	6d ee       	ldi	r22, 0xED	; 237
     abc:	71 e2       	ldi	r23, 0x21	; 33
     abe:	fd 01       	movw	r30, r26
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	c1 e0       	ldi	r28, 0x01	; 1
     ac6:	d0 e0       	ldi	r29, 0x00	; 0
     ac8:	9f 01       	movw	r18, r30
     aca:	2a 1b       	sub	r18, r26
     acc:	3b 0b       	sbc	r19, r27
     ace:	91 91       	ld	r25, Z+
     ad0:	99 23       	and	r25, r25
     ad2:	41 f0       	breq	.+16     	; 0xae4 <led_getMap+0x32>
     ad4:	ce 01       	movw	r24, r28
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <led_getMap+0x2a>
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	2a 95       	dec	r18
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <led_getMap+0x26>
     ae0:	48 2b       	or	r20, r24
     ae2:	59 2b       	or	r21, r25
     ae4:	e6 17       	cp	r30, r22
     ae6:	f7 07       	cpc	r31, r23
     ae8:	79 f7       	brne	.-34     	; 0xac8 <led_getMap+0x16>
     aea:	ca 01       	movw	r24, r20
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <led_statusOn>:
     af2:	80 e4       	ldi	r24, 0x40	; 64
     af4:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	80 93 e5 21 	sts	0x21E5, r24	; 0x8021e5 <ledMap+0x8>
     afe:	08 95       	ret

00000b00 <led_statusToggle>:
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     b00:	80 e4       	ldi	r24, 0x40	; 64
     b02:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>

    ledMap[8] = !ledMap[8];
     b06:	ed ed       	ldi	r30, 0xDD	; 221
     b08:	f1 e2       	ldi	r31, 0x21	; 33
     b0a:	90 85       	ldd	r25, Z+8	; 0x08
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	89 27       	eor	r24, r25
     b10:	80 87       	std	Z+8, r24	; 0x08
     b12:	08 95       	ret

00000b14 <startupSequence>:

/* ---------------------------------------------------------------------- */
/* -------------------------------- Idle -------------------------------- */
/* ---------------------------------------------------------------------- */
void startupSequence(uint8_t sequence) {
    led_allOn();
     b14:	83 df       	rcall	.-250    	; 0xa1c <led_allOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b16:	2f e7       	ldi	r18, 0x7F	; 127
     b18:	84 e8       	ldi	r24, 0x84	; 132
     b1a:	9e e1       	ldi	r25, 0x1E	; 30
     b1c:	21 50       	subi	r18, 0x01	; 1
     b1e:	80 40       	sbci	r24, 0x00	; 0
     b20:	90 40       	sbci	r25, 0x00	; 0
     b22:	e1 f7       	brne	.-8      	; 0xb1c <startupSequence+0x8>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <startupSequence+0x12>
    _delay_ms(10000);
    led_allOff();
     b26:	00 00       	nop
     b28:	7f cf       	rjmp	.-258    	; 0xa28 <led_allOff>
     b2a:	08 95       	ret

00000b2c <idleSequence>:
            (keypad_getState()   == KEYPAD_PRESSED) ||
            (jstk_readMask()     != 0);
}

void idleSequence(uint8_t sequence) // startup LED animation
{
     b2c:	7f 92       	push	r7
     b2e:	8f 92       	push	r8
     b30:	9f 92       	push	r9
     b32:	af 92       	push	r10
     b34:	bf 92       	push	r11
     b36:	cf 92       	push	r12
     b38:	df 92       	push	r13
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	28 97       	sbiw	r28, 0x08	; 8
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	de bf       	out	0x3e, r29	; 62
    const uint8_t seq[8] = {
     b50:	98 e0       	ldi	r25, 0x08	; 8
     b52:	e0 e7       	ldi	r30, 0x70	; 112
     b54:	f1 e2       	ldi	r31, 0x21	; 33
     b56:	de 01       	movw	r26, r28
     b58:	11 96       	adiw	r26, 0x01	; 1
     b5a:	01 90       	ld	r0, Z+
     b5c:	0d 92       	st	X+, r0
     b5e:	9a 95       	dec	r25
     b60:	e1 f7       	brne	.-8      	; 0xb5a <idleSequence+0x2e>
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	fc 01       	movw	r30, r24
     b66:	31 97       	sbiw	r30, 0x01	; 1
     b68:	e8 30       	cpi	r30, 0x08	; 8
     b6a:	f1 05       	cpc	r31, r1
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <idleSequence+0x44>
     b6e:	03 c3       	rjmp	.+1542   	; 0x1176 <__EEPROM_REGION_LENGTH__+0x176>
     b70:	88 27       	eor	r24, r24
     b72:	e9 5f       	subi	r30, 0xF9	; 249
     b74:	fe 4f       	sbci	r31, 0xFE	; 254
     b76:	8f 4f       	sbci	r24, 0xFF	; 255
     b78:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__tablejump2__>
            }
            led_allOff();
            break;
        case 6:
            /* ---------------- stripes idk ---------------- */
            while (!user_active) {
     b7c:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     b80:	88 23       	and	r24, r24
     b82:	09 f4       	brne	.+2      	; 0xb86 <idleSequence+0x5a>
     b84:	d1 c1       	rjmp	.+930    	; 0xf28 <idleSequence+0x3fc>
     b86:	0b c2       	rjmp	.+1046   	; 0xf9e <idleSequence+0x472>
    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     b88:	f8 01       	movw	r30, r16
     b8a:	f1 90       	ld	r15, Z+
     b8c:	8f 01       	movw	r16, r30
     b8e:	8f 2d       	mov	r24, r15
     b90:	51 df       	rcall	.-350    	; 0xa34 <led_on>
     b92:	ff e0       	ldi	r31, 0x0F	; 15
     b94:	28 e9       	ldi	r18, 0x98	; 152
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	f1 50       	subi	r31, 0x01	; 1
     b9a:	20 40       	sbci	r18, 0x00	; 0
     b9c:	80 40       	sbci	r24, 0x00	; 0
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <idleSequence+0x6c>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <idleSequence+0x76>
     ba2:	00 00       	nop
                    _delay_ms(850);
                    led_off(seq[i]);
     ba4:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     ba6:	4b df       	rcall	.-362    	; 0xa3e <led_off>
     ba8:	16 df       	rcall	.-468    	; 0x9d6 <userActivity>
     baa:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
     bae:	a0 16       	cp	r10, r16
     bb0:	b1 06       	cpc	r11, r17
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <idleSequence+0x8a>
     bb4:	87 c2       	rjmp	.+1294   	; 0x10c4 <__EEPROM_REGION_LENGTH__+0xc4>
     bb6:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     bba:	88 23       	and	r24, r24
     bbc:	29 f3       	breq	.-54     	; 0xb88 <idleSequence+0x5c>
     bbe:	82 c2       	rjmp	.+1284   	; 0x10c4 <__EEPROM_REGION_LENGTH__+0xc4>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     bc0:	f8 01       	movw	r30, r16
     bc2:	f2 90       	ld	r15, -Z
     bc4:	8f 01       	movw	r16, r30
     bc6:	8f 2d       	mov	r24, r15
     bc8:	35 df       	rcall	.-406    	; 0xa34 <led_on>
     bca:	ff e0       	ldi	r31, 0x0F	; 15
     bcc:	28 e9       	ldi	r18, 0x98	; 152
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	f1 50       	subi	r31, 0x01	; 1
     bd2:	20 40       	sbci	r18, 0x00	; 0
     bd4:	80 40       	sbci	r24, 0x00	; 0
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <idleSequence+0xa4>
                    _delay_ms(850);
                    led_off(seq[i]);
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <idleSequence+0xae>
     bda:	00 00       	nop
     bdc:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     bde:	2f df       	rcall	.-418    	; 0xa3e <led_off>
     be0:	fa de       	rcall	.-524    	; 0x9d6 <userActivity>
     be2:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     be6:	c0 16       	cp	r12, r16
     be8:	d1 06       	cpc	r13, r17
     bea:	61 f0       	breq	.+24     	; 0xc04 <idleSequence+0xd8>
     bec:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     bf0:	88 23       	and	r24, r24
     bf2:	31 f3       	breq	.-52     	; 0xbc0 <idleSequence+0x94>
     bf4:	07 c0       	rjmp	.+14     	; 0xc04 <idleSequence+0xd8>
     bf6:	5e 01       	movw	r10, r28
     bf8:	99 e0       	ldi	r25, 0x09	; 9
     bfa:	a9 0e       	add	r10, r25
     bfc:	b1 1c       	adc	r11, r1
     bfe:	fe 01       	movw	r30, r28
     c00:	31 96       	adiw	r30, 0x01	; 1
     c02:	6f 01       	movw	r12, r30
    static volatile bool user_active = false;

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
     c04:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     c08:	81 11       	cpse	r24, r1
     c0a:	06 c0       	rjmp	.+12     	; 0xc18 <idleSequence+0xec>
                for (int i = 0; i < 8 && !user_active; i++) {
     c0c:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     c10:	88 23       	and	r24, r24
     c12:	09 f4       	brne	.+2      	; 0xc16 <idleSequence+0xea>
     c14:	9b c2       	rjmp	.+1334   	; 0x114c <__EEPROM_REGION_LENGTH__+0x14c>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
            }
            led_allOff();
     c16:	56 c2       	rjmp	.+1196   	; 0x10c4 <__EEPROM_REGION_LENGTH__+0xc4>
            break;
     c18:	07 df       	rcall	.-498    	; 0xa28 <led_allOff>
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     c1a:	ad c2       	rjmp	.+1370   	; 0x1176 <__EEPROM_REGION_LENGTH__+0x176>
     c1c:	f8 01       	movw	r30, r16
     c1e:	e2 90       	ld	r14, -Z
     c20:	8f 01       	movw	r16, r30
     c22:	8e 2d       	mov	r24, r14
                    led_on(seq[right]);
     c24:	07 df       	rcall	.-498    	; 0xa34 <led_on>
     c26:	f4 01       	movw	r30, r8
     c28:	f1 90       	ld	r15, Z+
     c2a:	4f 01       	movw	r8, r30
     c2c:	8f 2d       	mov	r24, r15
     c2e:	02 df       	rcall	.-508    	; 0xa34 <led_on>
     c30:	ff e1       	ldi	r31, 0x1F	; 31
     c32:	2f eb       	ldi	r18, 0xBF	; 191
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	f1 50       	subi	r31, 0x01	; 1
     c38:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     c3a:	80 40       	sbci	r24, 0x00	; 0
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <idleSequence+0x10a>
                    led_off(seq[right]);
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <idleSequence+0x114>
     c40:	00 00       	nop
     c42:	8e 2d       	mov	r24, r14

                    keypad_poll();
     c44:	fc de       	rcall	.-520    	; 0xa3e <led_off>
     c46:	8f 2d       	mov	r24, r15
                    if (keypad_getState() == KEYPAD_PRESSED)
     c48:	fa de       	rcall	.-524    	; 0xa3e <led_off>
     c4a:	2b dd       	rcall	.-1450   	; 0x6a2 <keypad_poll>
     c4c:	16 de       	rcall	.-980    	; 0x87a <keypad_getState>
     c4e:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     c50:	11 f4       	brne	.+4      	; 0xc56 <idleSequence+0x12a>
     c52:	70 92 dc 21 	sts	0x21DC, r7	; 0x8021dc <user_active.5522>
                    if (jstk_readMask() != 0)
     c56:	97 dc       	rcall	.-1746   	; 0x586 <jstk_readMask>
     c58:	81 11       	cpse	r24, r1
                        user_active = true;
     c5a:	70 92 dc 21 	sts	0x21DC, r7	; 0x8021dc <user_active.5522>
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     c5e:	0a 15       	cp	r16, r10
     c60:	1b 05       	cpc	r17, r11
     c62:	09 f4       	brne	.+2      	; 0xc66 <idleSequence+0x13a>
     c64:	34 c2       	rjmp	.+1128   	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     c66:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     c6a:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     c6c:	b9 f2       	breq	.-82     	; 0xc1c <idleSequence+0xf0>
     c6e:	2f c2       	rjmp	.+1118   	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     c70:	f4 01       	movw	r30, r8
     c72:	e1 90       	ld	r14, Z+
     c74:	4f 01       	movw	r8, r30
     c76:	8e 2d       	mov	r24, r14
                    led_on(seq[right]);
     c78:	dd de       	rcall	.-582    	; 0xa34 <led_on>
     c7a:	f8 01       	movw	r30, r16
     c7c:	f2 90       	ld	r15, -Z
     c7e:	8f 01       	movw	r16, r30
     c80:	8f 2d       	mov	r24, r15
     c82:	d8 de       	rcall	.-592    	; 0xa34 <led_on>
     c84:	ff e1       	ldi	r31, 0x1F	; 31
     c86:	2f eb       	ldi	r18, 0xBF	; 191
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	f1 50       	subi	r31, 0x01	; 1
     c8c:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     c8e:	80 40       	sbci	r24, 0x00	; 0
     c90:	e1 f7       	brne	.-8      	; 0xc8a <idleSequence+0x15e>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <idleSequence+0x168>
                    led_off(seq[right]);
     c94:	00 00       	nop
     c96:	8e 2d       	mov	r24, r14
     c98:	d2 de       	rcall	.-604    	; 0xa3e <led_off>

                    keypad_poll();
     c9a:	8f 2d       	mov	r24, r15
     c9c:	d0 de       	rcall	.-608    	; 0xa3e <led_off>
                    if (keypad_getState() == KEYPAD_PRESSED)
     c9e:	01 dd       	rcall	.-1534   	; 0x6a2 <keypad_poll>
     ca0:	ec dd       	rcall	.-1064   	; 0x87a <keypad_getState>
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	11 f4       	brne	.+4      	; 0xcaa <idleSequence+0x17e>
                        user_active = true;
     ca6:	70 92 dc 21 	sts	0x21DC, r7	; 0x8021dc <user_active.5522>
                    if (jstk_readMask() != 0)
     caa:	6d dc       	rcall	.-1830   	; 0x586 <jstk_readMask>
     cac:	81 11       	cpse	r24, r1
     cae:	70 92 dc 21 	sts	0x21DC, r7	; 0x8021dc <user_active.5522>
                        user_active = true;
     cb2:	c0 16       	cp	r12, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     cb4:	d1 06       	cpc	r13, r17
     cb6:	71 f0       	breq	.+28     	; 0xcd4 <idleSequence+0x1a8>
     cb8:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     cbc:	88 23       	and	r24, r24
     cbe:	c1 f2       	breq	.-80     	; 0xc70 <idleSequence+0x144>
     cc0:	09 c0       	rjmp	.+18     	; 0xcd4 <idleSequence+0x1a8>
     cc2:	fe 01       	movw	r30, r28
     cc4:	31 96       	adiw	r30, 0x01	; 1
     cc6:	5f 01       	movw	r10, r30

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     cc8:	77 24       	eor	r7, r7
     cca:	73 94       	inc	r7
     ccc:	6e 01       	movw	r12, r28
     cce:	f5 e0       	ldi	r31, 0x05	; 5
     cd0:	cf 0e       	add	r12, r31
            }
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
     cd2:	d1 1c       	adc	r13, r1
     cd4:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                for (int i = 0; i < 4 && !user_active; i++) {
     cd8:	81 11       	cpse	r24, r1
     cda:	0a c0       	rjmp	.+20     	; 0xcf0 <idleSequence+0x1c4>
     cdc:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     ce0:	81 11       	cpse	r24, r1
     ce2:	f5 c1       	rjmp	.+1002   	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     ce4:	4e 01       	movw	r8, r28
     ce6:	25 e0       	ldi	r18, 0x05	; 5
     ce8:	82 0e       	add	r8, r18
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     cea:	91 1c       	adc	r9, r1
     cec:	84 01       	movw	r16, r8
            break;
     cee:	96 cf       	rjmp	.-212    	; 0xc1c <idleSequence+0xf0>
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     cf0:	9b de       	rcall	.-714    	; 0xa28 <led_allOff>
     cf2:	41 c2       	rjmp	.+1154   	; 0x1176 <__EEPROM_REGION_LENGTH__+0x176>
     cf4:	f8 01       	movw	r30, r16
     cf6:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     cf8:	8f 01       	movw	r16, r30
     cfa:	9c de       	rcall	.-712    	; 0xa34 <led_on>
     cfc:	f7 01       	movw	r30, r14
     cfe:	81 91       	ld	r24, Z+
     d00:	7f 01       	movw	r14, r30
     d02:	98 de       	rcall	.-720    	; 0xa34 <led_on>
     d04:	ff e2       	ldi	r31, 0x2F	; 47
     d06:	27 e5       	ldi	r18, 0x57	; 87
     d08:	85 e0       	ldi	r24, 0x05	; 5
     d0a:	f1 50       	subi	r31, 0x01	; 1
     d0c:	20 40       	sbci	r18, 0x00	; 0
     d0e:	80 40       	sbci	r24, 0x00	; 0
     d10:	e1 f7       	brne	.-8      	; 0xd0a <idleSequence+0x1de>
                    _delay_ms(1750);

                    keypad_poll();
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <idleSequence+0x1e8>
     d14:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     d16:	c5 dc       	rcall	.-1654   	; 0x6a2 <keypad_poll>
     d18:	b0 dd       	rcall	.-1184   	; 0x87a <keypad_getState>
     d1a:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     d1c:	11 f4       	brne	.+4      	; 0xd22 <idleSequence+0x1f6>
     d1e:	90 92 dc 21 	sts	0x21DC, r9	; 0x8021dc <user_active.5522>
                    if (jstk_readMask() != 0)
     d22:	31 dc       	rcall	.-1950   	; 0x586 <jstk_readMask>
     d24:	81 11       	cpse	r24, r1
                        user_active = true;
     d26:	90 92 dc 21 	sts	0x21DC, r9	; 0x8021dc <user_active.5522>
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     d2a:	a0 16       	cp	r10, r16
     d2c:	b1 06       	cpc	r11, r17
     d2e:	09 f4       	brne	.+2      	; 0xd32 <idleSequence+0x206>
     d30:	d9 c1       	rjmp	.+946    	; 0x10e4 <__EEPROM_REGION_LENGTH__+0xe4>
     d32:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     d36:	88 23       	and	r24, r24
     d38:	e9 f2       	breq	.-70     	; 0xcf4 <idleSequence+0x1c8>
     d3a:	d4 c1       	rjmp	.+936    	; 0x10e4 <__EEPROM_REGION_LENGTH__+0xe4>
     d3c:	f7 01       	movw	r30, r14
     d3e:	81 91       	ld	r24, Z+
                    led_off(seq[right]);
     d40:	7f 01       	movw	r14, r30
     d42:	7d de       	rcall	.-774    	; 0xa3e <led_off>
     d44:	f8 01       	movw	r30, r16
     d46:	82 91       	ld	r24, -Z
     d48:	8f 01       	movw	r16, r30
     d4a:	79 de       	rcall	.-782    	; 0xa3e <led_off>
     d4c:	ff e2       	ldi	r31, 0x2F	; 47
     d4e:	27 e5       	ldi	r18, 0x57	; 87
     d50:	85 e0       	ldi	r24, 0x05	; 5
     d52:	f1 50       	subi	r31, 0x01	; 1
     d54:	20 40       	sbci	r18, 0x00	; 0
     d56:	80 40       	sbci	r24, 0x00	; 0
     d58:	e1 f7       	brne	.-8      	; 0xd52 <idleSequence+0x226>
     d5a:	00 c0       	rjmp	.+0      	; 0xd5c <idleSequence+0x230>
                    _delay_ms(1750);

                    keypad_poll();
     d5c:	00 00       	nop
     d5e:	a1 dc       	rcall	.-1726   	; 0x6a2 <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     d60:	8c dd       	rcall	.-1256   	; 0x87a <keypad_getState>
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	11 f4       	brne	.+4      	; 0xd6a <idleSequence+0x23e>
     d66:	90 92 dc 21 	sts	0x21DC, r9	; 0x8021dc <user_active.5522>
                        user_active = true;
     d6a:	0d dc       	rcall	.-2022   	; 0x586 <jstk_readMask>
                    if (jstk_readMask() != 0)
     d6c:	81 11       	cpse	r24, r1
     d6e:	90 92 dc 21 	sts	0x21DC, r9	; 0x8021dc <user_active.5522>
                        user_active = true;
     d72:	c0 16       	cp	r12, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     d74:	d1 06       	cpc	r13, r17
     d76:	71 f0       	breq	.+28     	; 0xd94 <idleSequence+0x268>
     d78:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     d7c:	88 23       	and	r24, r24
     d7e:	f1 f2       	breq	.-68     	; 0xd3c <idleSequence+0x210>
     d80:	09 c0       	rjmp	.+18     	; 0xd94 <idleSequence+0x268>
     d82:	fe 01       	movw	r30, r28
     d84:	31 96       	adiw	r30, 0x01	; 1

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     d86:	5f 01       	movw	r10, r30
     d88:	99 24       	eor	r9, r9
     d8a:	93 94       	inc	r9
     d8c:	6e 01       	movw	r12, r28
     d8e:	f5 e0       	ldi	r31, 0x05	; 5
     d90:	cf 0e       	add	r12, r31
            }
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
     d92:	d1 1c       	adc	r13, r1
     d94:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                for (int i = 0; i < 4 && !user_active; i++) {
     d98:	81 11       	cpse	r24, r1
     d9a:	0a c0       	rjmp	.+20     	; 0xdb0 <idleSequence+0x284>
     d9c:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     da0:	81 11       	cpse	r24, r1
     da2:	a0 c1       	rjmp	.+832    	; 0x10e4 <__EEPROM_REGION_LENGTH__+0xe4>
     da4:	7e 01       	movw	r14, r28
     da6:	25 e0       	ldi	r18, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     da8:	e2 0e       	add	r14, r18
     daa:	f1 1c       	adc	r15, r1
            break;
     dac:	87 01       	movw	r16, r14
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     dae:	a2 cf       	rjmp	.-188    	; 0xcf4 <idleSequence+0x1c8>
     db0:	3b de       	rcall	.-906    	; 0xa28 <led_allOff>
     db2:	e1 c1       	rjmp	.+962    	; 0x1176 <__EEPROM_REGION_LENGTH__+0x176>
     db4:	f8 01       	movw	r30, r16
     db6:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     db8:	8f 01       	movw	r16, r30
     dba:	3c de       	rcall	.-904    	; 0xa34 <led_on>
     dbc:	f7 01       	movw	r30, r14
     dbe:	81 91       	ld	r24, Z+
     dc0:	7f 01       	movw	r14, r30
     dc2:	38 de       	rcall	.-912    	; 0xa34 <led_on>
     dc4:	ff e2       	ldi	r31, 0x2F	; 47
     dc6:	27 e5       	ldi	r18, 0x57	; 87
     dc8:	85 e0       	ldi	r24, 0x05	; 5
     dca:	f1 50       	subi	r31, 0x01	; 1
     dcc:	20 40       	sbci	r18, 0x00	; 0
     dce:	80 40       	sbci	r24, 0x00	; 0
                    _delay_ms(1750);

                    keypad_poll();
     dd0:	e1 f7       	brne	.-8      	; 0xdca <idleSequence+0x29e>
                    if (keypad_getState() == KEYPAD_PRESSED)
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <idleSequence+0x2a8>
     dd4:	00 00       	nop
     dd6:	65 dc       	rcall	.-1846   	; 0x6a2 <keypad_poll>
                        user_active = true;
     dd8:	50 dd       	rcall	.-1376   	; 0x87a <keypad_getState>
                    if (jstk_readMask() != 0)
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	11 f4       	brne	.+4      	; 0xde2 <idleSequence+0x2b6>
     dde:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
                        user_active = true;
     de2:	d1 db       	rcall	.-2142   	; 0x586 <jstk_readMask>
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     de4:	81 11       	cpse	r24, r1
     de6:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
     dea:	c0 16       	cp	r12, r16
     dec:	d1 06       	cpc	r13, r17
     dee:	09 f4       	brne	.+2      	; 0xdf2 <idleSequence+0x2c6>
     df0:	84 c1       	rjmp	.+776    	; 0x10fa <__EEPROM_REGION_LENGTH__+0xfa>
     df2:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     df6:	88 23       	and	r24, r24
     df8:	e9 f2       	breq	.-70     	; 0xdb4 <idleSequence+0x288>
     dfa:	7f c1       	rjmp	.+766    	; 0x10fa <__EEPROM_REGION_LENGTH__+0xfa>
     dfc:	f8 01       	movw	r30, r16
     dfe:	82 91       	ld	r24, -Z
                    led_off(seq[right]);
     e00:	8f 01       	movw	r16, r30
     e02:	1d de       	rcall	.-966    	; 0xa3e <led_off>
     e04:	f7 01       	movw	r30, r14
     e06:	81 91       	ld	r24, Z+
     e08:	7f 01       	movw	r14, r30
     e0a:	19 de       	rcall	.-974    	; 0xa3e <led_off>
     e0c:	ff e2       	ldi	r31, 0x2F	; 47
     e0e:	27 e5       	ldi	r18, 0x57	; 87
     e10:	85 e0       	ldi	r24, 0x05	; 5
     e12:	f1 50       	subi	r31, 0x01	; 1
     e14:	20 40       	sbci	r18, 0x00	; 0
     e16:	80 40       	sbci	r24, 0x00	; 0
     e18:	e1 f7       	brne	.-8      	; 0xe12 <idleSequence+0x2e6>
                    _delay_ms(1750);

                    keypad_poll();
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <idleSequence+0x2f0>
     e1c:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     e1e:	41 dc       	rcall	.-1918   	; 0x6a2 <keypad_poll>
     e20:	2c dd       	rcall	.-1448   	; 0x87a <keypad_getState>
     e22:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     e24:	11 f4       	brne	.+4      	; 0xe2a <idleSequence+0x2fe>
                    if (jstk_readMask() != 0)
     e26:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
     e2a:	ad db       	rcall	.-2214   	; 0x586 <jstk_readMask>
                        user_active = true;
     e2c:	81 11       	cpse	r24, r1
     e2e:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     e32:	c0 16       	cp	r12, r16
     e34:	d1 06       	cpc	r13, r17
     e36:	51 f0       	breq	.+20     	; 0xe4c <idleSequence+0x320>
     e38:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     e3c:	88 23       	and	r24, r24
     e3e:	f1 f2       	breq	.-68     	; 0xdfc <idleSequence+0x2d0>
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <idleSequence+0x320>

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     e42:	fe 01       	movw	r30, r28
     e44:	31 96       	adiw	r30, 0x01	; 1
            }
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
     e46:	6f 01       	movw	r12, r30
     e48:	bb 24       	eor	r11, r11
     e4a:	b3 94       	inc	r11
     e4c:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                for (int i = 0; i < 4 && !user_active; i++) {
     e50:	81 11       	cpse	r24, r1
     e52:	0a c0       	rjmp	.+20     	; 0xe68 <idleSequence+0x33c>
     e54:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     e58:	81 11       	cpse	r24, r1
     e5a:	4f c1       	rjmp	.+670    	; 0x10fa <__EEPROM_REGION_LENGTH__+0xfa>
     e5c:	7e 01       	movw	r14, r28
     e5e:	f5 e0       	ldi	r31, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     e60:	ef 0e       	add	r14, r31
     e62:	f1 1c       	adc	r15, r1
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     e64:	87 01       	movw	r16, r14
     e66:	a6 cf       	rjmp	.-180    	; 0xdb4 <idleSequence+0x288>
     e68:	df dd       	rcall	.-1090   	; 0xa28 <led_allOff>
     e6a:	85 c1       	rjmp	.+778    	; 0x1176 <__EEPROM_REGION_LENGTH__+0x176>
     e6c:	f7 01       	movw	r30, r14
                    led_on(seq[right]);
     e6e:	81 91       	ld	r24, Z+
     e70:	7f 01       	movw	r14, r30
     e72:	e0 dd       	rcall	.-1088   	; 0xa34 <led_on>
     e74:	f8 01       	movw	r30, r16
     e76:	82 91       	ld	r24, -Z
     e78:	8f 01       	movw	r16, r30
     e7a:	dc dd       	rcall	.-1096   	; 0xa34 <led_on>
     e7c:	ff e2       	ldi	r31, 0x2F	; 47
     e7e:	27 e5       	ldi	r18, 0x57	; 87
     e80:	85 e0       	ldi	r24, 0x05	; 5
     e82:	f1 50       	subi	r31, 0x01	; 1
                    _delay_ms(1750);

                    keypad_poll();
     e84:	20 40       	sbci	r18, 0x00	; 0
     e86:	80 40       	sbci	r24, 0x00	; 0
                    if (keypad_getState() == KEYPAD_PRESSED)
     e88:	e1 f7       	brne	.-8      	; 0xe82 <idleSequence+0x356>
     e8a:	00 c0       	rjmp	.+0      	; 0xe8c <idleSequence+0x360>
     e8c:	00 00       	nop
     e8e:	09 dc       	rcall	.-2030   	; 0x6a2 <keypad_poll>
                        user_active = true;
     e90:	f4 dc       	rcall	.-1560   	; 0x87a <keypad_getState>
     e92:	81 30       	cpi	r24, 0x01	; 1
                    if (jstk_readMask() != 0)
     e94:	11 f4       	brne	.+4      	; 0xe9a <idleSequence+0x36e>
     e96:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
                        user_active = true;
     e9a:	75 db       	rcall	.-2326   	; 0x586 <jstk_readMask>
     e9c:	81 11       	cpse	r24, r1
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
     e9e:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
     ea2:	0c 15       	cp	r16, r12
     ea4:	1d 05       	cpc	r17, r13
     ea6:	09 f4       	brne	.+2      	; 0xeaa <idleSequence+0x37e>
     ea8:	31 c1       	rjmp	.+610    	; 0x110c <__EEPROM_REGION_LENGTH__+0x10c>
     eaa:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     eae:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     eb0:	e9 f2       	breq	.-70     	; 0xe6c <idleSequence+0x340>
     eb2:	2c c1       	rjmp	.+600    	; 0x110c <__EEPROM_REGION_LENGTH__+0x10c>
     eb4:	f7 01       	movw	r30, r14
     eb6:	81 91       	ld	r24, Z+
     eb8:	7f 01       	movw	r14, r30
                    led_off(seq[right]);
     eba:	c1 dd       	rcall	.-1150   	; 0xa3e <led_off>
     ebc:	f8 01       	movw	r30, r16
     ebe:	82 91       	ld	r24, -Z
     ec0:	8f 01       	movw	r16, r30
     ec2:	bd dd       	rcall	.-1158   	; 0xa3e <led_off>
     ec4:	ff e2       	ldi	r31, 0x2F	; 47
     ec6:	27 e5       	ldi	r18, 0x57	; 87
     ec8:	85 e0       	ldi	r24, 0x05	; 5
     eca:	f1 50       	subi	r31, 0x01	; 1
     ecc:	20 40       	sbci	r18, 0x00	; 0
     ece:	80 40       	sbci	r24, 0x00	; 0
     ed0:	e1 f7       	brne	.-8      	; 0xeca <idleSequence+0x39e>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <idleSequence+0x3a8>
                    _delay_ms(1750);

                    keypad_poll();
     ed4:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     ed6:	e5 db       	rcall	.-2102   	; 0x6a2 <keypad_poll>
     ed8:	d0 dc       	rcall	.-1632   	; 0x87a <keypad_getState>
     eda:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     edc:	11 f4       	brne	.+4      	; 0xee2 <idleSequence+0x3b6>
     ede:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
                    if (jstk_readMask() != 0)
     ee2:	51 db       	rcall	.-2398   	; 0x586 <jstk_readMask>
     ee4:	81 11       	cpse	r24, r1
                        user_active = true;
     ee6:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     eea:	0c 15       	cp	r16, r12
     eec:	1d 05       	cpc	r17, r13
     eee:	59 f0       	breq	.+22     	; 0xf06 <idleSequence+0x3da>
     ef0:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     ef4:	88 23       	and	r24, r24
     ef6:	f1 f2       	breq	.-68     	; 0xeb4 <idleSequence+0x388>
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <idleSequence+0x3da>
     efa:	6e 01       	movw	r12, r28
     efc:	95 e0       	ldi	r25, 0x05	; 5

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     efe:	c9 0e       	add	r12, r25
     f00:	d1 1c       	adc	r13, r1
            }
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
     f02:	bb 24       	eor	r11, r11
     f04:	b3 94       	inc	r11
     f06:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                for (int i = 3; i >= 0 && !user_active; i--) {
     f0a:	81 11       	cpse	r24, r1
     f0c:	0b c0       	rjmp	.+22     	; 0xf24 <idleSequence+0x3f8>
     f0e:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     f12:	81 11       	cpse	r24, r1
     f14:	fb c0       	rjmp	.+502    	; 0x110c <__EEPROM_REGION_LENGTH__+0x10c>
     f16:	fe 01       	movw	r30, r28
     f18:	31 96       	adiw	r30, 0x01	; 1
     f1a:	7f 01       	movw	r14, r30
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     f1c:	8e 01       	movw	r16, r28
     f1e:	07 5f       	subi	r16, 0xF7	; 247
            break;
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
        case 6:
            /* ---------------- stripes idk ---------------- */
            while (!user_active) {
                led_allOn();
     f22:	a4 cf       	rjmp	.-184    	; 0xe6c <idleSequence+0x340>
     f24:	81 dd       	rcall	.-1278   	; 0xa28 <led_allOff>
     f26:	27 c1       	rjmp	.+590    	; 0x1176 <__EEPROM_REGION_LENGTH__+0x176>
     f28:	79 dd       	rcall	.-1294   	; 0xa1c <led_allOn>
     f2a:	ff e7       	ldi	r31, 0x7F	; 127
     f2c:	2a e1       	ldi	r18, 0x1A	; 26
     f2e:	86 e0       	ldi	r24, 0x06	; 6
     f30:	f1 50       	subi	r31, 0x01	; 1
     f32:	20 40       	sbci	r18, 0x00	; 0
     f34:	80 40       	sbci	r24, 0x00	; 0
                _delay_ms(2000);
                user_active = userActivity();
     f36:	e1 f7       	brne	.-8      	; 0xf30 <idleSequence+0x404>
     f38:	00 c0       	rjmp	.+0      	; 0xf3a <idleSequence+0x40e>
     f3a:	00 00       	nop

                led_allOff();
     f3c:	4c dd       	rcall	.-1384   	; 0x9d6 <userActivity>
     f3e:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
     f42:	72 dd       	rcall	.-1308   	; 0xa28 <led_allOff>
     f44:	9f e7       	ldi	r25, 0x7F	; 127
     f46:	ea e1       	ldi	r30, 0x1A	; 26
     f48:	f6 e0       	ldi	r31, 0x06	; 6
     f4a:	91 50       	subi	r25, 0x01	; 1
     f4c:	e0 40       	sbci	r30, 0x00	; 0
     f4e:	f0 40       	sbci	r31, 0x00	; 0
                _delay_ms(2000);
                user_active = userActivity();
     f50:	e1 f7       	brne	.-8      	; 0xf4a <idleSequence+0x41e>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <idleSequence+0x428>
     f54:	00 00       	nop
     f56:	3f dd       	rcall	.-1410   	; 0x9d6 <userActivity>

                led_setState(0x55);
     f58:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
     f5c:	85 e5       	ldi	r24, 0x55	; 85
     f5e:	90 dd       	rcall	.-1248   	; 0xa80 <led_setState>
     f60:	2f e7       	ldi	r18, 0x7F	; 127
     f62:	8a e1       	ldi	r24, 0x1A	; 26
     f64:	96 e0       	ldi	r25, 0x06	; 6
     f66:	21 50       	subi	r18, 0x01	; 1
     f68:	80 40       	sbci	r24, 0x00	; 0
     f6a:	90 40       	sbci	r25, 0x00	; 0
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <idleSequence+0x43a>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <idleSequence+0x444>
                _delay_ms(2000);
                user_active = userActivity();
     f70:	00 00       	nop
     f72:	31 dd       	rcall	.-1438   	; 0x9d6 <userActivity>
     f74:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>

                led_setState(0xAA);
     f78:	8a ea       	ldi	r24, 0xAA	; 170
     f7a:	82 dd       	rcall	.-1276   	; 0xa80 <led_setState>
     f7c:	ef e7       	ldi	r30, 0x7F	; 127
     f7e:	fa e1       	ldi	r31, 0x1A	; 26
     f80:	26 e0       	ldi	r18, 0x06	; 6
     f82:	e1 50       	subi	r30, 0x01	; 1
     f84:	f0 40       	sbci	r31, 0x00	; 0
     f86:	20 40       	sbci	r18, 0x00	; 0
     f88:	e1 f7       	brne	.-8      	; 0xf82 <idleSequence+0x456>
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <idleSequence+0x460>
                _delay_ms(2000);
                user_active = userActivity();
     f8c:	00 00       	nop
     f8e:	23 dd       	rcall	.-1466   	; 0x9d6 <userActivity>
     f90:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
            }
            led_allOff();
            break;
        case 6:
            /* ---------------- stripes idk ---------------- */
            while (!user_active) {
     f94:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     f98:	88 23       	and	r24, r24
     f9a:	09 f4       	brne	.+2      	; 0xf9e <idleSequence+0x472>

                led_setState(0xAA);
                _delay_ms(2000);
                user_active = userActivity();
            }
            led_allOff();
     f9c:	c5 cf       	rjmp	.-118    	; 0xf28 <idleSequence+0x3fc>
     f9e:	44 dd       	rcall	.-1400   	; 0xa28 <led_allOff>
            break;
     fa0:	ea c0       	rjmp	.+468    	; 0x1176 <__EEPROM_REGION_LENGTH__+0x176>
            uint8_t pos = 0;
            int8_t  dir = +1;

            while (!user_active) {
                uint8_t mask = (0x07 << pos);
                led_setState(mask);
     fa2:	8f 2d       	mov	r24, r15
     fa4:	01 2e       	mov	r0, r17
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <idleSequence+0x47e>
     fa8:	88 0f       	add	r24, r24
     faa:	0a 94       	dec	r0
     fac:	ea f7       	brpl	.-6      	; 0xfa8 <idleSequence+0x47c>
     fae:	68 dd       	rcall	.-1328   	; 0xa80 <led_setState>
     fb0:	8f ed       	ldi	r24, 0xDF	; 223
     fb2:	93 e9       	ldi	r25, 0x93	; 147
     fb4:	e4 e0       	ldi	r30, 0x04	; 4
     fb6:	81 50       	subi	r24, 0x01	; 1
     fb8:	90 40       	sbci	r25, 0x00	; 0
     fba:	e0 40       	sbci	r30, 0x00	; 0
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <idleSequence+0x48a>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <idleSequence+0x494>
     fc0:	00 00       	nop
     fc2:	09 dd       	rcall	.-1518   	; 0x9d6 <userActivity>

                _delay_ms(1500);
                user_active = userActivity();
     fc4:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
     fc8:	80 2f       	mov	r24, r16
     fca:	10 0f       	add	r17, r16

                pos += dir;
     fcc:	11 f0       	breq	.+4      	; 0xfd2 <idleSequence+0x4a6>
     fce:	15 30       	cpi	r17, 0x05	; 5
                if (pos == 0 || pos == (8 - 3)) {
     fd0:	49 f4       	brne	.+18     	; 0xfe4 <idleSequence+0x4b8>
     fd2:	08 2f       	mov	r16, r24
     fd4:	01 95       	neg	r16
                    dir = -dir;
     fd6:	06 c0       	rjmp	.+12     	; 0xfe4 <idleSequence+0x4b8>
     fd8:	01 e0       	ldi	r16, 0x01	; 1
     fda:	10 e0       	ldi	r17, 0x00	; 0
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
     fdc:	0f 2e       	mov	r0, r31
     fde:	f7 e0       	ldi	r31, 0x07	; 7
            uint8_t pos = 0;
            int8_t  dir = +1;

            while (!user_active) {
                uint8_t mask = (0x07 << pos);
                led_setState(mask);
     fe0:	ff 2e       	mov	r15, r31
     fe2:	f0 2d       	mov	r31, r0
     fe4:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
        case 7: {
            /* ---------------- 3 led bounce --------------- */
            uint8_t pos = 0;
            int8_t  dir = +1;

            while (!user_active) {
     fe8:	88 23       	and	r24, r24
     fea:	d9 f2       	breq	.-74     	; 0xfa2 <idleSequence+0x476>
     fec:	1d dd       	rcall	.-1478   	; 0xa28 <led_allOff>
                pos += dir;
                if (pos == 0 || pos == (8 - 3)) {
                    dir = -dir;
                }
            }
            led_allOff();
     fee:	c3 c0       	rjmp	.+390    	; 0x1176 <__EEPROM_REGION_LENGTH__+0x176>
     ff0:	8f 2d       	mov	r24, r15
            uint16_t delay_ms = 2500;

            while (!user_active) {
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
                    for (uint8_t i = 0; i < 8; ++i) {
                        led_setState(1 << i);
     ff2:	00 2e       	mov	r0, r16
     ff4:	01 c0       	rjmp	.+2      	; 0xff8 <idleSequence+0x4cc>
     ff6:	88 0f       	add	r24, r24
     ff8:	0a 94       	dec	r0
     ffa:	ea f7       	brpl	.-6      	; 0xff6 <idleSequence+0x4ca>
     ffc:	41 dd       	rcall	.-1406   	; 0xa80 <led_setState>
     ffe:	c1 14       	cp	r12, r1
    1000:	d1 04       	cpc	r13, r1
    }
}


void delay_ms_var(uint16_t ms) {
    while (ms--) {
    1002:	49 f0       	breq	.+18     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    1004:	c6 01       	movw	r24, r12
    1006:	e9 ef       	ldi	r30, 0xF9	; 249
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	31 97       	sbiw	r30, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    1010:	00 00       	nop
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	c1 f7       	brne	.-16     	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
    1016:	df dc       	rcall	.-1602   	; 0x9d6 <userActivity>
    1018:	88 23       	and	r24, r24
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
                    for (uint8_t i = 0; i < 8; ++i) {
                        led_setState(1 << i);
                        delay_ms_var(delay_ms);
                        
                        if (userActivity()) {
    101a:	19 f0       	breq	.+6      	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
    101c:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
    1020:	05 c0       	rjmp	.+10     	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
                            user_active = true;
    1022:	0f 5f       	subi	r16, 0xFF	; 255
    1024:	1f 4f       	sbci	r17, 0xFF	; 255
                            break;
    1026:	08 30       	cpi	r16, 0x08	; 8
    1028:	11 05       	cpc	r17, r1
    102a:	11 f7       	brne	.-60     	; 0xff0 <idleSequence+0x4c4>
            /* ---------- warp-speed acceleration ---------- */
            uint16_t delay_ms = 2500;

            while (!user_active) {
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
                    for (uint8_t i = 0; i < 8; ++i) {
    102c:	f5 ef       	ldi	r31, 0xF5	; 245
    102e:	cf 16       	cp	r12, r31
    1030:	f1 e0       	ldi	r31, 0x01	; 1
                        if (userActivity()) {
                            user_active = true;
                            break;
                        }
                    }
                    if (delay_ms > 500)
    1032:	df 06       	cpc	r13, r31
    1034:	18 f0       	brcs	.+6      	; 0x103c <__EEPROM_REGION_LENGTH__+0x3c>
    1036:	2a ef       	ldi	r18, 0xFA	; 250
    1038:	c2 1a       	sub	r12, r18
    103a:	d1 08       	sbc	r13, r1
                        delay_ms -= 250;
    103c:	ea 94       	dec	r14
    103e:	ee 20       	and	r14, r14
    1040:	21 f1       	breq	.+72     	; 0x108a <__EEPROM_REGION_LENGTH__+0x8a>
        case 8: {
            /* ---------- warp-speed acceleration ---------- */
            uint16_t delay_ms = 2500;

            while (!user_active) {
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
    1042:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
    1046:	81 11       	cpse	r24, r1
    1048:	20 c0       	rjmp	.+64     	; 0x108a <__EEPROM_REGION_LENGTH__+0x8a>
    104a:	00 e0       	ldi	r16, 0x00	; 0
    104c:	10 e0       	ldi	r17, 0x00	; 0
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
    104e:	d0 cf       	rjmp	.-96     	; 0xff0 <idleSequence+0x4c4>
    1050:	00 e0       	ldi	r16, 0x00	; 0
    1052:	10 e0       	ldi	r17, 0x00	; 0
    1054:	8f 2d       	mov	r24, r15
    1056:	00 2e       	mov	r0, r16
                        delay_ms -= 250;
                }

                while (!user_active) {
                    for (uint8_t i = 0; i < 8; ++i) {
                        led_setState(1 << i);
    1058:	01 c0       	rjmp	.+2      	; 0x105c <__EEPROM_REGION_LENGTH__+0x5c>
    105a:	88 0f       	add	r24, r24
    105c:	0a 94       	dec	r0
    105e:	ea f7       	brpl	.-6      	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
    1060:	0f dd       	rcall	.-1506   	; 0xa80 <led_setState>
    1062:	8f e9       	ldi	r24, 0x9F	; 159
    1064:	96 e8       	ldi	r25, 0x86	; 134
    1066:	e1 e0       	ldi	r30, 0x01	; 1
    1068:	81 50       	subi	r24, 0x01	; 1
    106a:	90 40       	sbci	r25, 0x00	; 0
    106c:	e0 40       	sbci	r30, 0x00	; 0
    106e:	e1 f7       	brne	.-8      	; 0x1068 <__EEPROM_REGION_LENGTH__+0x68>
    1070:	00 c0       	rjmp	.+0      	; 0x1072 <__EEPROM_REGION_LENGTH__+0x72>
    1072:	00 00       	nop
    1074:	b0 dc       	rcall	.-1696   	; 0x9d6 <userActivity>
    1076:	88 23       	and	r24, r24
    1078:	19 f0       	breq	.+6      	; 0x1080 <__EEPROM_REGION_LENGTH__+0x80>
                        _delay_ms(500);
                        
                        if (userActivity()) {
    107a:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
    107e:	05 c0       	rjmp	.+10     	; 0x108a <__EEPROM_REGION_LENGTH__+0x8a>
    1080:	0f 5f       	subi	r16, 0xFF	; 255
                            user_active = true;
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	08 30       	cpi	r16, 0x08	; 8
                            break;
    1086:	11 05       	cpc	r17, r1
    1088:	29 f7       	brne	.-54     	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
    108a:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                    if (delay_ms > 500)
                        delay_ms -= 250;
                }

                while (!user_active) {
                    for (uint8_t i = 0; i < 8; ++i) {
    108e:	88 23       	and	r24, r24
    1090:	f9 f2       	breq	.-66     	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
                    }
                    if (delay_ms > 500)
                        delay_ms -= 250;
                }

                while (!user_active) {
    1092:	0a c0       	rjmp	.+20     	; 0x10a8 <__EEPROM_REGION_LENGTH__+0xa8>
    1094:	0f 2e       	mov	r0, r31
    1096:	f4 ec       	ldi	r31, 0xC4	; 196
    1098:	cf 2e       	mov	r12, r31
    109a:	f9 e0       	ldi	r31, 0x09	; 9
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
    109c:	df 2e       	mov	r13, r31
    109e:	f0 2d       	mov	r31, r0
    10a0:	ff 24       	eor	r15, r15
    10a2:	f3 94       	inc	r15
    10a4:	bb 24       	eor	r11, r11
            uint16_t delay_ms = 2500;

            while (!user_active) {
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
                    for (uint8_t i = 0; i < 8; ++i) {
                        led_setState(1 << i);
    10a6:	b3 94       	inc	r11
    10a8:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                        delay_ms_var(delay_ms);
                        
                        if (userActivity()) {
                            user_active = true;
    10ac:	81 11       	cpse	r24, r1
        }
        case 8: {
            /* ---------- warp-speed acceleration ---------- */
            uint16_t delay_ms = 2500;

            while (!user_active) {
    10ae:	08 c0       	rjmp	.+16     	; 0x10c0 <__EEPROM_REGION_LENGTH__+0xc0>
    10b0:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
    10b4:	81 11       	cpse	r24, r1
    10b6:	e9 cf       	rjmp	.-46     	; 0x108a <__EEPROM_REGION_LENGTH__+0x8a>
    10b8:	68 94       	set
    10ba:	ee 24       	eor	r14, r14
    10bc:	e3 f8       	bld	r14, 3
    10be:	c5 cf       	rjmp	.-118    	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    10c0:	b3 dc       	rcall	.-1690   	; 0xa28 <led_allOff>
                            break;
                        }
                    }
                }
            }
            led_allOff();
    10c2:	59 c0       	rjmp	.+178    	; 0x1176 <__EEPROM_REGION_LENGTH__+0x176>
            break;
        }
        default:
            break;
    }
}
    10c4:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
    10c8:	88 23       	and	r24, r24
    10ca:	59 f1       	breq	.+86     	; 0x1122 <__EEPROM_REGION_LENGTH__+0x122>
    10cc:	9b cd       	rjmp	.-1226   	; 0xc04 <idleSequence+0xd8>
    10ce:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
    10d2:	81 11       	cpse	r24, r1
    10d4:	ff cd       	rjmp	.-1026   	; 0xcd4 <idleSequence+0x1a8>
    10d6:	ce 01       	movw	r24, r28
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	4c 01       	movw	r8, r24
    10dc:	8e 01       	movw	r16, r28
    10de:	07 5f       	subi	r16, 0xF7	; 247
    10e0:	1f 4f       	sbci	r17, 0xFF	; 255
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
    10e2:	c6 cd       	rjmp	.-1140   	; 0xc70 <idleSequence+0x144>
    10e4:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
    10e8:	81 11       	cpse	r24, r1
    10ea:	54 ce       	rjmp	.-856    	; 0xd94 <idleSequence+0x268>
    10ec:	fe 01       	movw	r30, r28
    10ee:	31 96       	adiw	r30, 0x01	; 1
    10f0:	7f 01       	movw	r14, r30
    10f2:	8e 01       	movw	r16, r28
    10f4:	07 5f       	subi	r16, 0xF7	; 247
    10f6:	1f 4f       	sbci	r17, 0xFF	; 255
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
    10f8:	21 ce       	rjmp	.-958    	; 0xd3c <idleSequence+0x210>
    10fa:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
    10fe:	81 11       	cpse	r24, r1
    1100:	a5 ce       	rjmp	.-694    	; 0xe4c <idleSequence+0x320>
    1102:	8e 01       	movw	r16, r28
    1104:	0b 5f       	subi	r16, 0xFB	; 251
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	78 01       	movw	r14, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
    110a:	78 ce       	rjmp	.-784    	; 0xdfc <idleSequence+0x2d0>
    110c:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
    1110:	81 11       	cpse	r24, r1
    1112:	f9 ce       	rjmp	.-526    	; 0xf06 <idleSequence+0x3da>
    1114:	ce 01       	movw	r24, r28
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	7c 01       	movw	r14, r24
    111a:	8e 01       	movw	r16, r28
    111c:	07 5f       	subi	r16, 0xF7	; 247
    111e:	1f 4f       	sbci	r17, 0xFF	; 255
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
    1120:	c9 ce       	rjmp	.-622    	; 0xeb4 <idleSequence+0x388>
    1122:	18 85       	ldd	r17, Y+8	; 0x08
    1124:	81 2f       	mov	r24, r17
    1126:	86 dc       	rcall	.-1780   	; 0xa34 <led_on>
    1128:	9f e0       	ldi	r25, 0x0F	; 15
    112a:	e8 e9       	ldi	r30, 0x98	; 152
    112c:	f2 e0       	ldi	r31, 0x02	; 2
    112e:	91 50       	subi	r25, 0x01	; 1
    1130:	e0 40       	sbci	r30, 0x00	; 0
    1132:	f0 40       	sbci	r31, 0x00	; 0
    1134:	e1 f7       	brne	.-8      	; 0x112e <__EEPROM_REGION_LENGTH__+0x12e>
    1136:	00 c0       	rjmp	.+0      	; 0x1138 <__EEPROM_REGION_LENGTH__+0x138>
    1138:	00 00       	nop
                    _delay_ms(850);
                    led_off(seq[i]);
    113a:	81 2f       	mov	r24, r17
    113c:	80 dc       	rcall	.-1792   	; 0xa3e <led_off>
    113e:	4b dc       	rcall	.-1898   	; 0x9d6 <userActivity>

                    user_active = userActivity();
    1140:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
    1144:	8e 01       	movw	r16, r28
    1146:	08 5f       	subi	r16, 0xF8	; 248
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	50 cd       	rjmp	.-1376   	; 0xbec <idleSequence+0xc0>
    114c:	19 81       	ldd	r17, Y+1	; 0x01
    114e:	81 2f       	mov	r24, r17
    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
    1150:	71 dc       	rcall	.-1822   	; 0xa34 <led_on>
    1152:	2f e0       	ldi	r18, 0x0F	; 15
    1154:	88 e9       	ldi	r24, 0x98	; 152
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	21 50       	subi	r18, 0x01	; 1
    115a:	80 40       	sbci	r24, 0x00	; 0
    115c:	90 40       	sbci	r25, 0x00	; 0
    115e:	e1 f7       	brne	.-8      	; 0x1158 <__EEPROM_REGION_LENGTH__+0x158>
    1160:	00 c0       	rjmp	.+0      	; 0x1162 <__EEPROM_REGION_LENGTH__+0x162>
    1162:	00 00       	nop
    1164:	81 2f       	mov	r24, r17
    1166:	6b dc       	rcall	.-1834   	; 0xa3e <led_off>
    1168:	36 dc       	rcall	.-1940   	; 0x9d6 <userActivity>
                    _delay_ms(850);
                    led_off(seq[i]);
    116a:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
    116e:	8e 01       	movw	r16, r28

                    user_active = userActivity();
    1170:	0e 5f       	subi	r16, 0xFE	; 254
    1172:	1f 4f       	sbci	r17, 0xFF	; 255
    1174:	20 cd       	rjmp	.-1472   	; 0xbb6 <idleSequence+0x8a>
    1176:	28 96       	adiw	r28, 0x08	; 8
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
            break;
        }
        default:
            break;
    }
}
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	ff 90       	pop	r15
    1186:	ef 90       	pop	r14
    1188:	df 90       	pop	r13
    118a:	cf 90       	pop	r12
    118c:	bf 90       	pop	r11
    118e:	af 90       	pop	r10
    1190:	9f 90       	pop	r9
    1192:	8f 90       	pop	r8
    1194:	7f 90       	pop	r7
    1196:	08 95       	ret

00001198 <io_ui_process>:

/* -------------------------------------- */
/* ----------------- IO ----------------- */
/* -------------------------------------- */
void io_ui_process(void) {
	io_init();
    1198:	0d c9       	rjmp	.-3558   	; 0x3b4 <io_init>
    119a:	08 95       	ret

0000119c <startup_ui_process>:

/* -------------------------------------- */
/* ----------- Startup & Idle ----------- */
/* -------------------------------------- */
void startup_ui_process(uint8_t startupSeq) {
	startupSequence(startupSeq);
    119c:	bb cc       	rjmp	.-1674   	; 0xb14 <startupSequence>
    119e:	08 95       	ret

000011a0 <idle_ui_process>:
}
// performs startup LED sequence

void idle_ui_process(uint8_t idleSeq) {
	idleSequence(idleSeq);
    11a0:	c5 cc       	rjmp	.-1654   	; 0xb2c <idleSequence>
    11a2:	08 95       	ret

000011a4 <jstk_ui_process>:
// performs idle LED sequence

/* -------------------------------------- */
/* -------------- Joystick -------------- */
/* -------------------------------------- */
void jstk_ui_process(void) {
    11a4:	cf 93       	push	r28
	uint8_t jstk_mask = jstk_readMask();
    11a6:	ef d9       	rcall	.-3106   	; 0x586 <jstk_readMask>
    11a8:	c8 2f       	mov	r28, r24
	uint8_t jstk_testMode = PORTB.IN;
    11aa:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>

	if ((jstk_testMode & PIN4_bm) == 0) {
    11ae:	84 fd       	sbrc	r24, 4
    11b0:	06 c0       	rjmp	.+12     	; 0x11be <jstk_ui_process+0x1a>
		if (jstk_mask) {
    11b2:	cc 23       	and	r28, r28
			led_allOff();
    11b4:	29 f0       	breq	.+10     	; 0x11c0 <jstk_ui_process+0x1c>
			led_on(jstk_mask);
    11b6:	38 dc       	rcall	.-1936   	; 0xa28 <led_allOff>
    11b8:	8c 2f       	mov	r24, r28
    11ba:	3c dc       	rcall	.-1928   	; 0xa34 <led_on>
		}
	} else {
		jstk_usbTask();
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <jstk_ui_process+0x1c>
    11be:	06 da       	rcall	.-3060   	; 0x5cc <jstk_usbTask>
	}
}
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <kbd_ui_process>:

/* -------------------------------------- */
/* -------------- Keyboard -------------- */
/* -------------------------------------- */
void kbd_ui_process(void) {
	keypad_poll();
    11c4:	6e da       	rcall	.-2852   	; 0x6a2 <keypad_poll>
	keypad_report();
    11c6:	77 cb       	rjmp	.-2322   	; 0x8b6 <keypad_report>
    11c8:	08 95       	ret

000011ca <led_ui_report>:
    11ca:	fc 01       	movw	r30, r24

/* -------------------------------------- */
/* ---------------- LEDs ---------------- */
/* -------------------------------------- */
void led_ui_report(uint8_t const *mask) {
	led_setState(mask[0]);
    11cc:	80 81       	ld	r24, Z
    11ce:	58 cc       	rjmp	.-1872   	; 0xa80 <led_setState>
    11d0:	08 95       	ret

000011d2 <gui_ui_process>:
// allows host PC to manually control LEDs

/* -------------------------------------- */
/* ----------------- GUI ---------------- */
/* -------------------------------------- */
void gui_ui_process(void) {
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	00 d0       	rcall	.+0      	; 0x11dc <gui_ui_process+0xa>
    11dc:	1f 92       	push	r1
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	uint16_t ledBits   = led_getMap();
    11e2:	67 dc       	rcall	.-1842   	; 0xab2 <led_getMap>
    11e4:	08 2f       	mov	r16, r24
    11e6:	19 2f       	mov	r17, r25
	uint16_t keyBits   = kbd_getMap();
    11e8:	4b db       	rcall	.-2410   	; 0x880 <kbd_getMap>
    11ea:	09 83       	std	Y+1, r16	; 0x01
	
	uint8_t  report[4] = {
    11ec:	1a 83       	std	Y+2, r17	; 0x02
    11ee:	8b 83       	std	Y+3, r24	; 0x03
    11f0:	9c 83       	std	Y+4, r25	; 0x04
    11f2:	ce 01       	movw	r24, r28
		(uint8_t)( ledBits       & 0xFF),
		(uint8_t)((ledBits >> 8) & 0xFF),
		(uint8_t)( keyBits       & 0xFF),
		(uint8_t)((keyBits >> 8) & 0xFF)
	};
	udi_hid_led_send_report_in(report);
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	9f d8       	rcall	.-3778   	; 0x336 <udi_hid_led_send_report_in>
    11f8:	24 96       	adiw	r28, 0x04	; 4
}
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	08 95       	ret

00001208 <status_ui_process>:
    1208:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <sof_ms>

/* -------------------------------------- */
/* ------------- Status LED ------------- */
/* -------------------------------------- */
void status_ui_process(void) {
    sof_ms++;
    120c:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <sof_ms+0x1>
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <sof_ms>
    1216:	90 93 ef 21 	sts	0x21EF, r25	; 0x8021ef <sof_ms+0x1>

    if ((PORTB.IN & PIN4_bm) == 0) {
    121a:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
    121e:	84 fd       	sbrc	r24, 4
    1220:	0d c0       	rjmp	.+26     	; 0x123c <status_ui_process+0x34>
        if (sof_ms >= 500) {
    1222:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <sof_ms>
    1226:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <sof_ms+0x1>
    122a:	84 3f       	cpi	r24, 0xF4	; 244
    122c:	91 40       	sbci	r25, 0x01	; 1
    122e:	58 f0       	brcs	.+22     	; 0x1246 <status_ui_process+0x3e>
            led_statusToggle();
    1230:	67 dc       	rcall	.-1842   	; 0xb00 <led_statusToggle>
            sof_ms = 0;
    1232:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <sof_ms>
    1236:	10 92 ef 21 	sts	0x21EF, r1	; 0x8021ef <sof_ms+0x1>
        }
    } else {
        led_statusOn();
    123a:	08 95       	ret
    123c:	5a dc       	rcall	.-1868   	; 0xaf2 <led_statusOn>
        sof_ms = 0;
    123e:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <sof_ms>
    1242:	10 92 ef 21 	sts	0x21EF, r1	; 0x8021ef <sof_ms+0x1>
    1246:	08 95       	ret

00001248 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	27 97       	sbiw	r28, 0x07	; 7
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
    1260:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
    1264:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
    1268:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
    126c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
    1270:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
    1274:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
    1278:	65 e0       	ldi	r22, 0x05	; 5
    127a:	81 e4       	ldi	r24, 0x41	; 65
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	7a d6       	rcall	.+3316   	; 0x1f74 <ccp_write_io>
    1280:	6c e1       	ldi	r22, 0x1C	; 28
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	6c d6       	rcall	.+3288   	; 0x1f60 <nvm_read_byte>
    1288:	8a 83       	std	Y+2, r24	; 0x02
    128a:	6d e1       	ldi	r22, 0x1D	; 29
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	82 e0       	ldi	r24, 0x02	; 2
    1290:	67 d6       	rcall	.+3278   	; 0x1f60 <nvm_read_byte>
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	21 f4       	brne	.+8      	; 0x12a4 <sysclk_init+0x5c>
    129c:	80 e4       	ldi	r24, 0x40	; 64
    129e:	93 e2       	ldi	r25, 0x23	; 35
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	9a 83       	std	Y+2, r25	; 0x02
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	e0 e6       	ldi	r30, 0x60	; 96
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	82 83       	std	Z+2, r24	; 0x02
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	83 83       	std	Z+3, r24	; 0x03
    12b6:	8f b7       	in	r24, 0x3f	; 63
    12b8:	8e 83       	std	Y+6, r24	; 0x06
    12ba:	f8 94       	cli
    12bc:	9e 81       	ldd	r25, Y+6	; 0x06
    12be:	e0 e5       	ldi	r30, 0x50	; 80
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	82 60       	ori	r24, 0x02	; 2
    12c6:	80 83       	st	Z, r24
    12c8:	9f bf       	out	0x3f, r25	; 63
    12ca:	81 81       	ldd	r24, Z+1	; 0x01
    12cc:	81 ff       	sbrs	r24, 1
    12ce:	fd cf       	rjmp	.-6      	; 0x12ca <sysclk_init+0x82>
    12d0:	8f b7       	in	r24, 0x3f	; 63
    12d2:	8f 83       	std	Y+7, r24	; 0x07
    12d4:	f8 94       	cli
    12d6:	9f 81       	ldd	r25, Y+7	; 0x07
    12d8:	00 e5       	ldi	r16, 0x50	; 80
    12da:	10 e0       	ldi	r17, 0x00	; 0
    12dc:	d8 01       	movw	r26, r16
    12de:	16 96       	adiw	r26, 0x06	; 6
    12e0:	8c 91       	ld	r24, X
    12e2:	16 97       	sbiw	r26, 0x06	; 6
    12e4:	89 7f       	andi	r24, 0xF9	; 249
    12e6:	16 96       	adiw	r26, 0x06	; 6
    12e8:	8c 93       	st	X, r24
    12ea:	16 97       	sbiw	r26, 0x06	; 6
    12ec:	e0 e6       	ldi	r30, 0x60	; 96
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 e8       	ldi	r24, 0x80	; 128
    12f2:	85 83       	std	Z+5, r24	; 0x05
    12f4:	8b eb       	ldi	r24, 0xBB	; 187
    12f6:	86 83       	std	Z+6, r24	; 0x06
    12f8:	16 96       	adiw	r26, 0x06	; 6
    12fa:	8c 91       	ld	r24, X
    12fc:	16 97       	sbiw	r26, 0x06	; 6
    12fe:	84 60       	ori	r24, 0x04	; 4
    1300:	16 96       	adiw	r26, 0x06	; 6
    1302:	8c 93       	st	X, r24
    1304:	80 81       	ld	r24, Z
    1306:	81 60       	ori	r24, 0x01	; 1
    1308:	80 83       	st	Z, r24
    130a:	9f bf       	out	0x3f, r25	; 63
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	80 e4       	ldi	r24, 0x40	; 64
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	30 d6       	rcall	.+3168   	; 0x1f74 <ccp_write_io>
    1314:	8f b7       	in	r24, 0x3f	; 63
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	f8 94       	cli
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	f8 01       	movw	r30, r16
    131e:	80 81       	ld	r24, Z
    1320:	8e 7f       	andi	r24, 0xFE	; 254
    1322:	80 83       	st	Z, r24
    1324:	9f bf       	out	0x3f, r25	; 63
    1326:	27 96       	adiw	r28, 0x07	; 7
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	08 95       	ret

00001336 <sysclk_enable_module>:
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	1f 92       	push	r1
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	9f b7       	in	r25, 0x3f	; 63
    1342:	99 83       	std	Y+1, r25	; 0x01
    1344:	f8 94       	cli
    1346:	99 81       	ldd	r25, Y+1	; 0x01
    1348:	e8 2f       	mov	r30, r24
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	e0 59       	subi	r30, 0x90	; 144
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	60 95       	com	r22
    1352:	80 81       	ld	r24, Z
    1354:	68 23       	and	r22, r24
    1356:	60 83       	st	Z, r22
    1358:	9f bf       	out	0x3f, r25	; 63
    135a:	0f 90       	pop	r0
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	08 95       	ret

00001362 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	1f 92       	push	r1
    1368:	1f 92       	push	r1
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    136e:	86 30       	cpi	r24, 0x06	; 6
    1370:	11 f0       	breq	.+4      	; 0x1376 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1376:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1378:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    137c:	81 fd       	sbrc	r24, 1
    137e:	2a c0       	rjmp	.+84     	; 0x13d4 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1380:	8f b7       	in	r24, 0x3f	; 63
    1382:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1384:	f8 94       	cli
	return flags;
    1386:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1388:	e0 e5       	ldi	r30, 0x50	; 80
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	82 60       	ori	r24, 0x02	; 2
    1390:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1392:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1394:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1396:	81 ff       	sbrs	r24, 1
    1398:	fd cf       	rjmp	.-6      	; 0x1394 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    139a:	8f b7       	in	r24, 0x3f	; 63
    139c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    139e:	f8 94       	cli
	return flags;
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    13a2:	a0 e5       	ldi	r26, 0x50	; 80
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	16 96       	adiw	r26, 0x06	; 6
    13a8:	8c 91       	ld	r24, X
    13aa:	16 97       	sbiw	r26, 0x06	; 6
    13ac:	89 7f       	andi	r24, 0xF9	; 249
    13ae:	16 96       	adiw	r26, 0x06	; 6
    13b0:	8c 93       	st	X, r24
    13b2:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    13b4:	e0 e6       	ldi	r30, 0x60	; 96
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 e8       	ldi	r24, 0x80	; 128
    13ba:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    13bc:	8b eb       	ldi	r24, 0xBB	; 187
    13be:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    13c0:	16 96       	adiw	r26, 0x06	; 6
    13c2:	8c 91       	ld	r24, X
    13c4:	16 97       	sbiw	r26, 0x06	; 6
    13c6:	84 60       	ori	r24, 0x04	; 4
    13c8:	16 96       	adiw	r26, 0x06	; 6
    13ca:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    13cc:	80 81       	ld	r24, Z
    13ce:	81 60       	ori	r24, 0x01	; 1
    13d0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13d2:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    13d4:	63 60       	ori	r22, 0x03	; 3
    13d6:	84 e4       	ldi	r24, 0x44	; 68
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	cc d5       	rcall	.+2968   	; 0x1f74 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    13dc:	60 e4       	ldi	r22, 0x40	; 64
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	aa df       	rcall	.-172    	; 0x1336 <sysclk_enable_module>
}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	08 95       	ret

000013f0 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    13f0:	30 91 e4 23 	lds	r19, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    13f4:	20 91 e5 23 	lds	r18, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    13f8:	82 2f       	mov	r24, r18
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	03 97       	sbiw	r24, 0x03	; 3
    13fe:	b1 f4       	brne	.+44     	; 0x142c <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    1400:	31 11       	cpse	r19, r1
    1402:	16 c0       	rjmp	.+44     	; 0x1430 <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
    1404:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1408:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    140c:	89 2b       	or	r24, r25
    140e:	91 f4       	brne	.+36     	; 0x1434 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
    1410:	e2 ee       	ldi	r30, 0xE2	; 226
    1412:	f3 e2       	ldi	r31, 0x23	; 35
    1414:	80 ef       	ldi	r24, 0xF0	; 240
    1416:	91 e2       	ldi	r25, 0x21	; 33
    1418:	80 87       	std	Z+8, r24	; 0x08
    141a:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    141c:	8c e1       	ldi	r24, 0x1C	; 28
    141e:	9a e0       	ldi	r25, 0x0A	; 10
    1420:	84 87       	std	Z+12, r24	; 0x0c
    1422:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
    1424:	12 86       	std	Z+10, r1	; 0x0a
    1426:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	08 95       	ret
	}
	return false;
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	08 95       	ret
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	08 95       	ret
    1434:	80 e0       	ldi	r24, 0x00	; 0
}
    1436:	08 95       	ret

00001438 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
    1438:	08 95       	ret

0000143a <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udi_hid_generic_b_report_in_free>
    1440:	08 95       	ret

00001442 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
    1442:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
    1446:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
    1450:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <main_generic_enable>
}
    1454:	08 95       	ret

00001456 <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
    1456:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <main_generic_disable>
    145a:	08 95       	ret

0000145c <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
    145c:	28 ef       	ldi	r18, 0xF8	; 248
    145e:	39 e0       	ldi	r19, 0x09	; 9
    1460:	46 ea       	ldi	r20, 0xA6	; 166
    1462:	50 e2       	ldi	r21, 0x20	; 32
    1464:	64 ef       	ldi	r22, 0xF4	; 244
    1466:	71 e2       	ldi	r23, 0x21	; 33
    1468:	86 ef       	ldi	r24, 0xF6	; 246
    146a:	91 e2       	ldi	r25, 0x21	; 33
    146c:	f2 c0       	rjmp	.+484    	; 0x1652 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
    146e:	08 95       	ret

00001470 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	1f 92       	push	r1
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
    1482:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udi_hid_generic_b_report_in_free>
    1486:	88 23       	and	r24, r24
    1488:	09 f1       	breq	.+66     	; 0x14cc <udi_hid_generic_send_report_in+0x5c>
    148a:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    148c:	8f b7       	in	r24, 0x3f	; 63
    148e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1490:	f8 94       	cli
	return flags;
    1492:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
    1494:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <udi_hid_generic_report_feature>
    1498:	10 92 f1 21 	sts	0x21F1, r1	; 0x8021f1 <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	80 93 f0 21 	sts	0x21F0, r24	; 0x8021f0 <udi_hid_generic_report_feature>
    14a4:	90 93 f1 21 	sts	0x21F1, r25	; 0x8021f1 <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    14a8:	0d e1       	ldi	r16, 0x1D	; 29
    14aa:	1a e0       	ldi	r17, 0x0A	; 10
    14ac:	22 e0       	ldi	r18, 0x02	; 2
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 ef       	ldi	r20, 0xF0	; 240
    14b2:	51 e2       	ldi	r21, 0x21	; 33
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	82 e8       	ldi	r24, 0x82	; 130
    14b8:	0e 94 7e 14 	call	0x28fc	; 0x28fc <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	89 27       	eor	r24, r25
    14c0:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14c4:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
    14c6:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udi_hid_generic_b_report_in_free>
    14ca:	89 27       	eor	r24, r25

}
    14cc:	0f 90       	pop	r0
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	ff 90       	pop	r15
    14d8:	08 95       	ret

000014da <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	08 95       	ret

000014de <udi_hid_kbd_setreport>:
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	08 95       	ret

000014e2 <udi_hid_kbd_enable>:
    14e2:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <udi_hid_kbd_rate>
    14e6:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udi_hid_kbd_protocol>
    14ea:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udi_hid_kbd_b_report_trans_ongoing>
    14ee:	88 e0       	ldi	r24, 0x08	; 8
    14f0:	e1 e0       	ldi	r30, 0x01	; 1
    14f2:	f2 e2       	ldi	r31, 0x22	; 34
    14f4:	df 01       	movw	r26, r30
    14f6:	1d 92       	st	X+, r1
    14f8:	8a 95       	dec	r24
    14fa:	e9 f7       	brne	.-6      	; 0x14f6 <udi_hid_kbd_enable+0x14>
    14fc:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udi_hid_kbd_b_report_valid>
    1500:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <main_kbd_enable>
    1504:	08 95       	ret

00001506 <udi_hid_kbd_disable>:
    1506:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <main_kbd_disable>
    150a:	08 95       	ret

0000150c <udi_hid_kbd_setup>:
    150c:	2f e6       	ldi	r18, 0x6F	; 111
    150e:	3a e0       	ldi	r19, 0x0A	; 10
    1510:	48 ec       	ldi	r20, 0xC8	; 200
    1512:	50 e2       	ldi	r21, 0x20	; 32
    1514:	6a e0       	ldi	r22, 0x0A	; 10
    1516:	72 e2       	ldi	r23, 0x22	; 34
    1518:	8c e0       	ldi	r24, 0x0C	; 12
    151a:	92 e2       	ldi	r25, 0x22	; 34
    151c:	9a c0       	rjmp	.+308    	; 0x1652 <udi_hid_setup>
    151e:	08 95       	ret

00001520 <udi_hid_kbd_send_report>:
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <udi_hid_kbd_b_report_trans_ongoing>
    1528:	81 11       	cpse	r24, r1
    152a:	18 c0       	rjmp	.+48     	; 0x155c <udi_hid_kbd_send_report+0x3c>
    152c:	88 e0       	ldi	r24, 0x08	; 8
    152e:	e1 e0       	ldi	r30, 0x01	; 1
    1530:	f2 e2       	ldi	r31, 0x22	; 34
    1532:	a8 ef       	ldi	r26, 0xF8	; 248
    1534:	b1 e2       	ldi	r27, 0x21	; 33
    1536:	01 90       	ld	r0, Z+
    1538:	0d 92       	st	X+, r0
    153a:	8a 95       	dec	r24
    153c:	e1 f7       	brne	.-8      	; 0x1536 <udi_hid_kbd_send_report+0x16>
    153e:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udi_hid_kbd_b_report_valid>
    1542:	02 eb       	ldi	r16, 0xB2	; 178
    1544:	1a e0       	ldi	r17, 0x0A	; 10
    1546:	28 e0       	ldi	r18, 0x08	; 8
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	48 ef       	ldi	r20, 0xF8	; 248
    154c:	51 e2       	ldi	r21, 0x21	; 33
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	81 e8       	ldi	r24, 0x81	; 129
    1552:	0e 94 7e 14 	call	0x28fc	; 0x28fc <udd_ep_run>
    1556:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <udi_hid_kbd_b_report_trans_ongoing>
    155a:	01 c0       	rjmp	.+2      	; 0x155e <udi_hid_kbd_send_report+0x3e>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	08 95       	ret

00001564 <udi_hid_kbd_report_sent>:
    1564:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udi_hid_kbd_b_report_trans_ongoing>
    1568:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <udi_hid_kbd_b_report_valid>
    156c:	81 11       	cpse	r24, r1
    156e:	d8 cf       	rjmp	.-80     	; 0x1520 <udi_hid_kbd_send_report>
    1570:	08 95       	ret

00001572 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	1f 92       	push	r1
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    157e:	9f b7       	in	r25, 0x3f	; 63
    1580:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1582:	f8 94       	cli
	return flags;
    1584:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    1586:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <udi_hid_kbd_report+0x2>
    158a:	99 23       	and	r25, r25
    158c:	41 f0       	breq	.+16     	; 0x159e <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    158e:	89 17       	cp	r24, r25
    1590:	a9 f0       	breq	.+42     	; 0x15bc <udi_hid_kbd_up+0x4a>
    1592:	e4 e0       	ldi	r30, 0x04	; 4
    1594:	f2 e2       	ldi	r31, 0x22	; 34
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1596:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    1598:	21 91       	ld	r18, Z+
    159a:	21 11       	cpse	r18, r1
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    159e:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    15a0:	1e c0       	rjmp	.+60     	; 0x15de <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    15a2:	28 17       	cp	r18, r24
    15a4:	21 f0       	breq	.+8      	; 0x15ae <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    15a6:	9f 5f       	subi	r25, 0xFF	; 255
    15a8:	98 30       	cpi	r25, 0x08	; 8
    15aa:	b1 f7       	brne	.-20     	; 0x1598 <udi_hid_kbd_up+0x26>
    15ac:	05 c0       	rjmp	.+10     	; 0x15b8 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    15ae:	98 30       	cpi	r25, 0x08	; 8
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    15b2:	97 30       	cpi	r25, 0x07	; 7
    15b4:	20 f0       	brcs	.+8      	; 0x15be <udi_hid_kbd_up+0x4c>
    15b6:	0c c0       	rjmp	.+24     	; 0x15d0 <udi_hid_kbd_up+0x5e>
    15b8:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    15ba:	11 c0       	rjmp	.+34     	; 0x15de <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    15bc:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    15be:	e9 2f       	mov	r30, r25
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	ef 5f       	subi	r30, 0xFF	; 255
    15c4:	fd 4d       	sbci	r31, 0xDD	; 221
    15c6:	81 81       	ldd	r24, Z+1	; 0x01
    15c8:	80 83       	st	Z, r24
		i++;
    15ca:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    15cc:	97 30       	cpi	r25, 0x07	; 7
    15ce:	b9 f7       	brne	.-18     	; 0x15be <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    15d0:	10 92 08 22 	sts	0x2208, r1	; 0x802208 <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    15da:	a2 df       	rcall	.-188    	; 0x1520 <udi_hid_kbd_send_report>
    15dc:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	0f 90       	pop	r0
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	08 95       	ret

000015ea <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	1f 92       	push	r1
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15f6:	9f b7       	in	r25, 0x3f	; 63
    15f8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    15fa:	f8 94       	cli
	return flags;
    15fc:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    15fe:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <udi_hid_kbd_report+0x2>
    1602:	99 23       	and	r25, r25
    1604:	b1 f0       	breq	.+44     	; 0x1632 <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1606:	89 17       	cp	r24, r25
    1608:	41 f0       	breq	.+16     	; 0x161a <udi_hid_kbd_down+0x30>
    160a:	a4 e0       	ldi	r26, 0x04	; 4
    160c:	b2 e2       	ldi	r27, 0x22	; 34
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    160e:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    1610:	9d 91       	ld	r25, X+
    1612:	99 23       	and	r25, r25
    1614:	49 f0       	breq	.+18     	; 0x1628 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1616:	98 13       	cpse	r25, r24
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    161a:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1620:	ef 5f       	subi	r30, 0xFF	; 255
    1622:	e8 30       	cpi	r30, 0x08	; 8
    1624:	a9 f7       	brne	.-22     	; 0x1610 <udi_hid_kbd_down+0x26>
    1626:	02 c0       	rjmp	.+4      	; 0x162c <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    1628:	e8 30       	cpi	r30, 0x08	; 8
    162a:	21 f4       	brne	.+8      	; 0x1634 <udi_hid_kbd_down+0x4a>
    162c:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	0b c0       	rjmp	.+22     	; 0x1648 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1632:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	ef 5f       	subi	r30, 0xFF	; 255
    1638:	fd 4d       	sbci	r31, 0xDD	; 221
    163a:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1642:	6e df       	rcall	.-292    	; 0x1520 <udi_hid_kbd_send_report>
    1644:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    1646:	81 e0       	ldi	r24, 0x01	; 1
}
    1648:	0f 90       	pop	r0
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	08 95       	ret

00001652 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	dc 01       	movw	r26, r24
    1658:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    165a:	90 91 e2 23 	lds	r25, 0x23E2	; 0x8023e2 <udd_g_ctrlreq>
    165e:	99 23       	and	r25, r25
    1660:	0c f0       	brlt	.+2      	; 0x1664 <udi_hid_setup+0x12>
    1662:	68 c0       	rjmp	.+208    	; 0x1734 <udi_hid_setup+0xe2>
    1664:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1666:	09 f0       	breq	.+2      	; 0x166a <udi_hid_setup+0x18>
    1668:	45 c0       	rjmp	.+138    	; 0x16f4 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    166a:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    166e:	86 30       	cpi	r24, 0x06	; 6
    1670:	09 f0       	breq	.+2      	; 0x1674 <udi_hid_setup+0x22>
    1672:	40 c0       	rjmp	.+128    	; 0x16f4 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1674:	76 d1       	rcall	.+748    	; 0x1962 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1676:	dc 01       	movw	r26, r24
    1678:	1a 96       	adiw	r26, 0x0a	; 10
    167a:	2c 91       	ld	r18, X
    167c:	1a 97       	sbiw	r26, 0x0a	; 10
    167e:	21 32       	cpi	r18, 0x21	; 33
    1680:	09 f0       	breq	.+2      	; 0x1684 <udi_hid_setup+0x32>
    1682:	77 c0       	rjmp	.+238    	; 0x1772 <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1684:	20 91 e5 23 	lds	r18, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	21 32       	cpi	r18, 0x21	; 33
    168c:	31 05       	cpc	r19, r1
    168e:	b1 f4       	brne	.+44     	; 0x16bc <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1690:	9c 01       	movw	r18, r24
    1692:	27 5f       	subi	r18, 0xF7	; 247
    1694:	3f 4f       	sbci	r19, 0xFF	; 255
    1696:	20 93 ea 23 	sts	0x23EA, r18	; 0x8023ea <udd_g_ctrlreq+0x8>
    169a:	30 93 eb 23 	sts	0x23EB, r19	; 0x8023eb <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    169e:	e2 ee       	ldi	r30, 0xE2	; 226
    16a0:	f3 e2       	ldi	r31, 0x23	; 35
    16a2:	19 96       	adiw	r26, 0x09	; 9
    16a4:	8c 91       	ld	r24, X
    16a6:	26 81       	ldd	r18, Z+6	; 0x06
    16a8:	37 81       	ldd	r19, Z+7	; 0x07
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	28 17       	cp	r18, r24
    16ae:	39 07       	cpc	r19, r25
    16b0:	08 f4       	brcc	.+2      	; 0x16b4 <udi_hid_setup+0x62>
    16b2:	c9 01       	movw	r24, r18
    16b4:	82 87       	std	Z+10, r24	; 0x0a
    16b6:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	68 c0       	rjmp	.+208    	; 0x178c <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    16bc:	fc 01       	movw	r30, r24
    16be:	47 85       	ldd	r20, Z+15	; 0x0f
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	42 17       	cp	r20, r18
    16c4:	53 07       	cpc	r21, r19
    16c6:	09 f0       	breq	.+2      	; 0x16ca <udi_hid_setup+0x78>
    16c8:	56 c0       	rjmp	.+172    	; 0x1776 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    16ca:	c0 93 ea 23 	sts	0x23EA, r28	; 0x8023ea <udd_g_ctrlreq+0x8>
    16ce:	d0 93 eb 23 	sts	0x23EB, r29	; 0x8023eb <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    16d2:	e2 ee       	ldi	r30, 0xE2	; 226
    16d4:	f3 e2       	ldi	r31, 0x23	; 35
    16d6:	26 81       	ldd	r18, Z+6	; 0x06
    16d8:	37 81       	ldd	r19, Z+7	; 0x07
    16da:	dc 01       	movw	r26, r24
    16dc:	50 96       	adiw	r26, 0x10	; 16
    16de:	8d 91       	ld	r24, X+
    16e0:	9c 91       	ld	r25, X
    16e2:	51 97       	sbiw	r26, 0x11	; 17
    16e4:	28 17       	cp	r18, r24
    16e6:	39 07       	cpc	r19, r25
    16e8:	08 f4       	brcc	.+2      	; 0x16ec <udi_hid_setup+0x9a>
    16ea:	c9 01       	movw	r24, r18
    16ec:	82 87       	std	Z+10, r24	; 0x0a
    16ee:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	4c c0       	rjmp	.+152    	; 0x178c <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    16f4:	90 32       	cpi	r25, 0x20	; 32
    16f6:	09 f0       	breq	.+2      	; 0x16fa <udi_hid_setup+0xa8>
    16f8:	40 c0       	rjmp	.+128    	; 0x177a <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    16fa:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    16fe:	82 30       	cpi	r24, 0x02	; 2
    1700:	39 f0       	breq	.+14     	; 0x1710 <udi_hid_setup+0xbe>
    1702:	83 30       	cpi	r24, 0x03	; 3
    1704:	71 f0       	breq	.+28     	; 0x1722 <udi_hid_setup+0xd0>
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	d1 f5       	brne	.+116    	; 0x177e <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    170a:	f9 01       	movw	r30, r18
    170c:	19 95       	eicall
    170e:	3e c0       	rjmp	.+124    	; 0x178c <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    1710:	e2 ee       	ldi	r30, 0xE2	; 226
    1712:	f3 e2       	ldi	r31, 0x23	; 35
    1714:	a0 87       	std	Z+8, r26	; 0x08
    1716:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	82 87       	std	Z+10, r24	; 0x0a
    171e:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1720:	35 c0       	rjmp	.+106    	; 0x178c <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1722:	e2 ee       	ldi	r30, 0xE2	; 226
    1724:	f3 e2       	ldi	r31, 0x23	; 35
    1726:	60 87       	std	Z+8, r22	; 0x08
    1728:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	82 87       	std	Z+10, r24	; 0x0a
    1730:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1732:	2c c0       	rjmp	.+88     	; 0x178c <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1734:	90 76       	andi	r25, 0x60	; 96
    1736:	90 32       	cpi	r25, 0x20	; 32
    1738:	21 f5       	brne	.+72     	; 0x1782 <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    173a:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    173e:	8a 30       	cpi	r24, 0x0A	; 10
    1740:	39 f0       	breq	.+14     	; 0x1750 <udi_hid_setup+0xfe>
    1742:	8b 30       	cpi	r24, 0x0B	; 11
    1744:	51 f0       	breq	.+20     	; 0x175a <udi_hid_setup+0x108>
    1746:	89 30       	cpi	r24, 0x09	; 9
    1748:	f1 f4       	brne	.+60     	; 0x1786 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    174a:	f9 01       	movw	r30, r18
    174c:	19 95       	eicall
    174e:	1e c0       	rjmp	.+60     	; 0x178c <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1750:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1754:	8c 93       	st	X, r24
				return true;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	19 c0       	rjmp	.+50     	; 0x178c <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    175a:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    175e:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1762:	89 2b       	or	r24, r25
    1764:	91 f4       	brne	.+36     	; 0x178a <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    1766:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    176a:	db 01       	movw	r26, r22
    176c:	8c 93       	st	X, r24
				return true;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	0d c0       	rjmp	.+26     	; 0x178c <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	0b c0       	rjmp	.+22     	; 0x178c <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	09 c0       	rjmp	.+18     	; 0x178c <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	07 c0       	rjmp	.+14     	; 0x178c <udi_hid_setup+0x13a>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	05 c0       	rjmp	.+10     	; 0x178c <udi_hid_setup+0x13a>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	03 c0       	rjmp	.+6      	; 0x178c <udi_hid_setup+0x13a>
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	01 c0       	rjmp	.+2      	; 0x178c <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    178a:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1792:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <udc_ptr_conf>
    1796:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    179a:	01 90       	ld	r0, Z+
    179c:	f0 81       	ld	r31, Z
    179e:	e0 2d       	mov	r30, r0
    17a0:	22 81       	ldd	r18, Z+2	; 0x02
    17a2:	33 81       	ldd	r19, Z+3	; 0x03
    17a4:	2e 0f       	add	r18, r30
    17a6:	3f 1f       	adc	r19, r31
    17a8:	fc 01       	movw	r30, r24
    17aa:	40 81       	ld	r20, Z
    17ac:	e4 0f       	add	r30, r20
    17ae:	f1 1d       	adc	r31, r1
    17b0:	e2 17       	cp	r30, r18
    17b2:	f3 07       	cpc	r31, r19
    17b4:	a0 f4       	brcc	.+40     	; 0x17de <udc_next_desc_in_iface+0x4c>
    17b6:	81 81       	ldd	r24, Z+1	; 0x01
    17b8:	84 30       	cpi	r24, 0x04	; 4
    17ba:	a1 f0       	breq	.+40     	; 0x17e4 <udc_next_desc_in_iface+0x52>
    17bc:	86 13       	cpse	r24, r22
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <udc_next_desc_in_iface+0x3a>
    17c0:	14 c0       	rjmp	.+40     	; 0x17ea <udc_next_desc_in_iface+0x58>
    17c2:	81 81       	ldd	r24, Z+1	; 0x01
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	a1 f0       	breq	.+40     	; 0x17f0 <udc_next_desc_in_iface+0x5e>
    17c8:	86 17       	cp	r24, r22
    17ca:	a9 f0       	breq	.+42     	; 0x17f6 <udc_next_desc_in_iface+0x64>
    17cc:	80 81       	ld	r24, Z
    17ce:	e8 0f       	add	r30, r24
    17d0:	f1 1d       	adc	r31, r1
    17d2:	e2 17       	cp	r30, r18
    17d4:	f3 07       	cpc	r31, r19
    17d6:	a8 f3       	brcs	.-22     	; 0x17c2 <udc_next_desc_in_iface+0x30>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	08 95       	ret
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	08 95       	ret
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	08 95       	ret
    17ea:	8e 2f       	mov	r24, r30
    17ec:	9f 2f       	mov	r25, r31
    17ee:	08 95       	ret
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	08 95       	ret
    17f6:	8e 2f       	mov	r24, r30
    17f8:	9f 2f       	mov	r25, r31
    17fa:	08 95       	ret

000017fc <udc_valid_address>:
    17fc:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1800:	8f 77       	andi	r24, 0x7F	; 127
    1802:	95 c7       	rjmp	.+3882   	; 0x272e <udd_set_address>
    1804:	08 95       	ret

00001806 <udc_update_iface_desc>:
    1806:	90 91 14 22 	lds	r25, 0x2214	; 0x802214 <udc_num_configuration>
    180a:	99 23       	and	r25, r25
    180c:	81 f1       	breq	.+96     	; 0x186e <udc_update_iface_desc+0x68>
    180e:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <udc_ptr_conf>
    1812:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1816:	01 90       	ld	r0, Z+
    1818:	f0 81       	ld	r31, Z
    181a:	e0 2d       	mov	r30, r0
    181c:	94 81       	ldd	r25, Z+4	; 0x04
    181e:	89 17       	cp	r24, r25
    1820:	40 f5       	brcc	.+80     	; 0x1872 <udc_update_iface_desc+0x6c>
    1822:	e0 93 10 22 	sts	0x2210, r30	; 0x802210 <udc_ptr_iface>
    1826:	f0 93 11 22 	sts	0x2211, r31	; 0x802211 <udc_ptr_iface+0x1>
    182a:	22 81       	ldd	r18, Z+2	; 0x02
    182c:	33 81       	ldd	r19, Z+3	; 0x03
    182e:	2e 0f       	add	r18, r30
    1830:	3f 1f       	adc	r19, r31
    1832:	e2 17       	cp	r30, r18
    1834:	f3 07       	cpc	r31, r19
    1836:	f8 f4       	brcc	.+62     	; 0x1876 <udc_update_iface_desc+0x70>
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	94 30       	cpi	r25, 0x04	; 4
    183c:	61 f4       	brne	.+24     	; 0x1856 <udc_update_iface_desc+0x50>
    183e:	92 81       	ldd	r25, Z+2	; 0x02
    1840:	89 13       	cpse	r24, r25
    1842:	09 c0       	rjmp	.+18     	; 0x1856 <udc_update_iface_desc+0x50>
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	96 13       	cpse	r25, r22
    1848:	06 c0       	rjmp	.+12     	; 0x1856 <udc_update_iface_desc+0x50>
    184a:	e0 93 10 22 	sts	0x2210, r30	; 0x802210 <udc_ptr_iface>
    184e:	f0 93 11 22 	sts	0x2211, r31	; 0x802211 <udc_ptr_iface+0x1>
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	08 95       	ret
    1856:	90 81       	ld	r25, Z
    1858:	e9 0f       	add	r30, r25
    185a:	f1 1d       	adc	r31, r1
    185c:	e2 17       	cp	r30, r18
    185e:	f3 07       	cpc	r31, r19
    1860:	58 f3       	brcs	.-42     	; 0x1838 <udc_update_iface_desc+0x32>
    1862:	e0 93 10 22 	sts	0x2210, r30	; 0x802210 <udc_ptr_iface>
    1866:	f0 93 11 22 	sts	0x2211, r31	; 0x802211 <udc_ptr_iface+0x1>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	08 95       	ret
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	08 95       	ret
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	08 95       	ret
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	08 95       	ret

0000187a <udc_iface_disable>:
    187a:	ef 92       	push	r14
    187c:	ff 92       	push	r15
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	c8 2f       	mov	r28, r24
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	be df       	rcall	.-132    	; 0x1806 <udc_update_iface_desc>
    188a:	18 2f       	mov	r17, r24
    188c:	88 23       	and	r24, r24
    188e:	81 f1       	breq	.+96     	; 0x18f0 <udc_iface_disable+0x76>
    1890:	a0 91 12 22 	lds	r26, 0x2212	; 0x802212 <udc_ptr_conf>
    1894:	b0 91 13 22 	lds	r27, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1898:	ec 2f       	mov	r30, r28
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	ee 0f       	add	r30, r30
    189e:	ff 1f       	adc	r31, r31
    18a0:	12 96       	adiw	r26, 0x02	; 2
    18a2:	8d 91       	ld	r24, X+
    18a4:	9c 91       	ld	r25, X
    18a6:	13 97       	sbiw	r26, 0x03	; 3
    18a8:	e8 0f       	add	r30, r24
    18aa:	f9 1f       	adc	r31, r25
    18ac:	e0 80       	ld	r14, Z
    18ae:	f1 80       	ldd	r15, Z+1	; 0x01
    18b0:	d7 01       	movw	r26, r14
    18b2:	16 96       	adiw	r26, 0x06	; 6
    18b4:	ed 91       	ld	r30, X+
    18b6:	fc 91       	ld	r31, X
    18b8:	17 97       	sbiw	r26, 0x07	; 7
    18ba:	19 95       	eicall
    18bc:	68 2f       	mov	r22, r24
    18be:	8c 2f       	mov	r24, r28
    18c0:	a2 df       	rcall	.-188    	; 0x1806 <udc_update_iface_desc>
    18c2:	18 2f       	mov	r17, r24
    18c4:	88 23       	and	r24, r24
    18c6:	a1 f0       	breq	.+40     	; 0x18f0 <udc_iface_disable+0x76>
    18c8:	c0 91 10 22 	lds	r28, 0x2210	; 0x802210 <udc_ptr_iface>
    18cc:	d0 91 11 22 	lds	r29, 0x2211	; 0x802211 <udc_ptr_iface+0x1>
    18d0:	65 e0       	ldi	r22, 0x05	; 5
    18d2:	ce 01       	movw	r24, r28
    18d4:	5e df       	rcall	.-324    	; 0x1792 <udc_next_desc_in_iface>
    18d6:	ec 01       	movw	r28, r24
    18d8:	89 2b       	or	r24, r25
    18da:	21 f0       	breq	.+8      	; 0x18e4 <udc_iface_disable+0x6a>
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <udd_ep_free>
    18e2:	f6 cf       	rjmp	.-20     	; 0x18d0 <udc_iface_disable+0x56>
    18e4:	d7 01       	movw	r26, r14
    18e6:	12 96       	adiw	r26, 0x02	; 2
    18e8:	ed 91       	ld	r30, X+
    18ea:	fc 91       	ld	r31, X
    18ec:	13 97       	sbiw	r26, 0x03	; 3
    18ee:	19 95       	eicall
    18f0:	81 2f       	mov	r24, r17
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	ff 90       	pop	r15
    18fa:	ef 90       	pop	r14
    18fc:	08 95       	ret

000018fe <udc_iface_enable>:
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	18 2f       	mov	r17, r24
    1906:	7f df       	rcall	.-258    	; 0x1806 <udc_update_iface_desc>
    1908:	88 23       	and	r24, r24
    190a:	39 f1       	breq	.+78     	; 0x195a <udc_iface_enable+0x5c>
    190c:	c0 91 10 22 	lds	r28, 0x2210	; 0x802210 <udc_ptr_iface>
    1910:	d0 91 11 22 	lds	r29, 0x2211	; 0x802211 <udc_ptr_iface+0x1>
    1914:	65 e0       	ldi	r22, 0x05	; 5
    1916:	ce 01       	movw	r24, r28
    1918:	3c df       	rcall	.-392    	; 0x1792 <udc_next_desc_in_iface>
    191a:	ec 01       	movw	r28, r24
    191c:	89 2b       	or	r24, r25
    191e:	41 f0       	breq	.+16     	; 0x1930 <udc_iface_enable+0x32>
    1920:	4c 81       	ldd	r20, Y+4	; 0x04
    1922:	5d 81       	ldd	r21, Y+5	; 0x05
    1924:	6b 81       	ldd	r22, Y+3	; 0x03
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	0f d7       	rcall	.+3614   	; 0x2748 <udd_ep_alloc>
    192a:	81 11       	cpse	r24, r1
    192c:	f3 cf       	rjmp	.-26     	; 0x1914 <udc_iface_enable+0x16>
    192e:	15 c0       	rjmp	.+42     	; 0x195a <udc_iface_enable+0x5c>
    1930:	a0 91 12 22 	lds	r26, 0x2212	; 0x802212 <udc_ptr_conf>
    1934:	b0 91 13 22 	lds	r27, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1938:	e1 2f       	mov	r30, r17
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	ee 0f       	add	r30, r30
    193e:	ff 1f       	adc	r31, r31
    1940:	12 96       	adiw	r26, 0x02	; 2
    1942:	8d 91       	ld	r24, X+
    1944:	9c 91       	ld	r25, X
    1946:	13 97       	sbiw	r26, 0x03	; 3
    1948:	e8 0f       	add	r30, r24
    194a:	f9 1f       	adc	r31, r25
    194c:	01 90       	ld	r0, Z+
    194e:	f0 81       	ld	r31, Z
    1950:	e0 2d       	mov	r30, r0
    1952:	01 90       	ld	r0, Z+
    1954:	f0 81       	ld	r31, Z
    1956:	e0 2d       	mov	r30, r0
    1958:	19 95       	eicall
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	08 95       	ret

00001962 <udc_get_interface_desc>:
    1962:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_ptr_iface>
    1966:	90 91 11 22 	lds	r25, 0x2211	; 0x802211 <udc_ptr_iface+0x1>
    196a:	08 95       	ret

0000196c <udc_start>:
    196c:	55 c6       	rjmp	.+3242   	; 0x2618 <udd_enable>
    196e:	08 95       	ret

00001970 <udc_reset>:
    1970:	cf 93       	push	r28
    1972:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_num_configuration>
    1976:	88 23       	and	r24, r24
    1978:	c1 f0       	breq	.+48     	; 0x19aa <udc_reset+0x3a>
    197a:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <udc_ptr_conf>
    197e:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1982:	01 90       	ld	r0, Z+
    1984:	f0 81       	ld	r31, Z
    1986:	e0 2d       	mov	r30, r0
    1988:	84 81       	ldd	r24, Z+4	; 0x04
    198a:	88 23       	and	r24, r24
    198c:	71 f0       	breq	.+28     	; 0x19aa <udc_reset+0x3a>
    198e:	c0 e0       	ldi	r28, 0x00	; 0
    1990:	8c 2f       	mov	r24, r28
    1992:	73 df       	rcall	.-282    	; 0x187a <udc_iface_disable>
    1994:	cf 5f       	subi	r28, 0xFF	; 255
    1996:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <udc_ptr_conf>
    199a:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    199e:	01 90       	ld	r0, Z+
    19a0:	f0 81       	ld	r31, Z
    19a2:	e0 2d       	mov	r30, r0
    19a4:	84 81       	ldd	r24, Z+4	; 0x04
    19a6:	c8 17       	cp	r28, r24
    19a8:	98 f3       	brcs	.-26     	; 0x1990 <udc_reset+0x20>
    19aa:	10 92 14 22 	sts	0x2214, r1	; 0x802214 <udc_num_configuration>
    19ae:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <udc_device_status>
    19b2:	81 fd       	sbrc	r24, 1
    19b4:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <main_remotewakeup_disable>
    19b8:	10 92 18 22 	sts	0x2218, r1	; 0x802218 <udc_device_status>
    19bc:	10 92 19 22 	sts	0x2219, r1	; 0x802219 <udc_device_status+0x1>
    19c0:	cf 91       	pop	r28
    19c2:	08 95       	ret

000019c4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    19c4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    19c6:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_num_configuration>
    19ca:	88 23       	and	r24, r24
    19cc:	49 f1       	breq	.+82     	; 0x1a20 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19ce:	a0 91 12 22 	lds	r26, 0x2212	; 0x802212 <udc_ptr_conf>
    19d2:	b0 91 13 22 	lds	r27, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    19d6:	ed 91       	ld	r30, X+
    19d8:	fc 91       	ld	r31, X
    19da:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    19dc:	84 81       	ldd	r24, Z+4	; 0x04
    19de:	88 23       	and	r24, r24
    19e0:	f9 f0       	breq	.+62     	; 0x1a20 <udc_sof_notify+0x5c>
    19e2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    19e4:	ec 2f       	mov	r30, r28
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	ee 0f       	add	r30, r30
    19ea:	ff 1f       	adc	r31, r31
    19ec:	12 96       	adiw	r26, 0x02	; 2
    19ee:	8d 91       	ld	r24, X+
    19f0:	9c 91       	ld	r25, X
    19f2:	13 97       	sbiw	r26, 0x03	; 3
    19f4:	e8 0f       	add	r30, r24
    19f6:	f9 1f       	adc	r31, r25
    19f8:	01 90       	ld	r0, Z+
    19fa:	f0 81       	ld	r31, Z
    19fc:	e0 2d       	mov	r30, r0
    19fe:	00 84       	ldd	r0, Z+8	; 0x08
    1a00:	f1 85       	ldd	r31, Z+9	; 0x09
    1a02:	e0 2d       	mov	r30, r0
    1a04:	30 97       	sbiw	r30, 0x00	; 0
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1a08:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1a0a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a0c:	a0 91 12 22 	lds	r26, 0x2212	; 0x802212 <udc_ptr_conf>
    1a10:	b0 91 13 22 	lds	r27, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1a14:	ed 91       	ld	r30, X+
    1a16:	fc 91       	ld	r31, X
    1a18:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1a1a:	84 81       	ldd	r24, Z+4	; 0x04
    1a1c:	c8 17       	cp	r28, r24
    1a1e:	10 f3       	brcs	.-60     	; 0x19e4 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1a2c:	e2 ee       	ldi	r30, 0xE2	; 226
    1a2e:	f3 e2       	ldi	r31, 0x23	; 35
    1a30:	12 86       	std	Z+10, r1	; 0x0a
    1a32:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1a34:	14 86       	std	Z+12, r1	; 0x0c
    1a36:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1a38:	16 86       	std	Z+14, r1	; 0x0e
    1a3a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 23       	and	r24, r24
    1a40:	0c f0       	brlt	.+2      	; 0x1a44 <udc_process_setup+0x20>
    1a42:	7e c2       	rjmp	.+1276   	; 0x1f40 <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1a44:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1a48:	30 91 e9 23 	lds	r19, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1a4c:	21 15       	cp	r18, r1
    1a4e:	31 05       	cpc	r19, r1
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <udc_process_setup+0x30>
    1a52:	7b c2       	rjmp	.+1270   	; 0x1f4a <udc_process_setup+0x526>
    1a54:	6d c2       	rjmp	.+1242   	; 0x1f30 <udc_process_setup+0x50c>
    1a56:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <udc_process_setup+0x38>
    1a5a:	a0 c0       	rjmp	.+320    	; 0x1b9c <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a5c:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    1a60:	96 30       	cpi	r25, 0x06	; 6
    1a62:	79 f0       	breq	.+30     	; 0x1a82 <udc_process_setup+0x5e>
    1a64:	98 30       	cpi	r25, 0x08	; 8
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <udc_process_setup+0x46>
    1a68:	8f c0       	rjmp	.+286    	; 0x1b88 <udc_process_setup+0x164>
    1a6a:	91 11       	cpse	r25, r1
    1a6c:	97 c0       	rjmp	.+302    	; 0x1b9c <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1a6e:	22 30       	cpi	r18, 0x02	; 2
    1a70:	31 05       	cpc	r19, r1
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <udc_process_setup+0x52>
    1a74:	19 c2       	rjmp	.+1074   	; 0x1ea8 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1a76:	62 e0       	ldi	r22, 0x02	; 2
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	88 e1       	ldi	r24, 0x18	; 24
    1a7c:	92 e2       	ldi	r25, 0x22	; 34
    1a7e:	5d d6       	rcall	.+3258   	; 0x273a <udd_set_setup_payload>
    1a80:	69 c2       	rjmp	.+1234   	; 0x1f54 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1a82:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1a86:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1a8a:	29 2f       	mov	r18, r25
    1a8c:	33 27       	eor	r19, r19
    1a8e:	22 30       	cpi	r18, 0x02	; 2
    1a90:	31 05       	cpc	r19, r1
    1a92:	a9 f0       	breq	.+42     	; 0x1abe <udc_process_setup+0x9a>
    1a94:	20 f4       	brcc	.+8      	; 0x1a9e <udc_process_setup+0x7a>
    1a96:	21 30       	cpi	r18, 0x01	; 1
    1a98:	31 05       	cpc	r19, r1
    1a9a:	41 f0       	breq	.+16     	; 0x1aac <udc_process_setup+0x88>
    1a9c:	c7 c1       	rjmp	.+910    	; 0x1e2c <udc_process_setup+0x408>
    1a9e:	23 30       	cpi	r18, 0x03	; 3
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	d9 f1       	breq	.+118    	; 0x1b1a <udc_process_setup+0xf6>
    1aa4:	2f 30       	cpi	r18, 0x0F	; 15
    1aa6:	31 05       	cpc	r19, r1
    1aa8:	51 f1       	breq	.+84     	; 0x1afe <udc_process_setup+0xda>
    1aaa:	c0 c1       	rjmp	.+896    	; 0x1e2c <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1aac:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    1ab0:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	6c 91       	ld	r22, X
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	3f d6       	rcall	.+3198   	; 0x273a <udd_set_setup_payload>
    1abc:	56 c0       	rjmp	.+172    	; 0x1b6a <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1abe:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1ac2:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    1ac6:	21 89       	ldd	r18, Z+17	; 0x11
    1ac8:	82 17       	cp	r24, r18
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <udc_process_setup+0xaa>
    1acc:	ed c1       	rjmp	.+986    	; 0x1ea8 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1ace:	99 27       	eor	r25, r25
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1adc:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1ae0:	e8 0f       	add	r30, r24
    1ae2:	f9 1f       	adc	r31, r25
    1ae4:	80 81       	ld	r24, Z
    1ae6:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1ae8:	fc 01       	movw	r30, r24
    1aea:	62 81       	ldd	r22, Z+2	; 0x02
    1aec:	73 81       	ldd	r23, Z+3	; 0x03
    1aee:	25 d6       	rcall	.+3146   	; 0x273a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1af0:	e0 91 ea 23 	lds	r30, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x8>
    1af4:	f0 91 eb 23 	lds	r31, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x9>
    1af8:	82 e0       	ldi	r24, 0x02	; 2
    1afa:	81 83       	std	Z+1, r24	; 0x01
    1afc:	36 c0       	rjmp	.+108    	; 0x1b6a <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1afe:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    1b02:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <udc_process_setup+0xe8>
    1b0a:	ce c1       	rjmp	.+924    	; 0x1ea8 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	12 96       	adiw	r26, 0x02	; 2
    1b10:	6d 91       	ld	r22, X+
    1b12:	7c 91       	ld	r23, X
    1b14:	13 97       	sbiw	r26, 0x03	; 3
    1b16:	11 d6       	rcall	.+3106   	; 0x273a <udd_set_setup_payload>
    1b18:	28 c0       	rjmp	.+80     	; 0x1b6a <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1b1a:	99 27       	eor	r25, r25
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	91 05       	cpc	r25, r1
    1b20:	71 f0       	breq	.+28     	; 0x1b3e <udc_process_setup+0x11a>
    1b22:	38 f0       	brcs	.+14     	; 0x1b32 <udc_process_setup+0x10e>
    1b24:	02 97       	sbiw	r24, 0x02	; 2
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <udc_process_setup+0x106>
    1b28:	8a c1       	rjmp	.+788    	; 0x1e3e <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1b2a:	e6 e4       	ldi	r30, 0x46	; 70
    1b2c:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1b2e:	3b e1       	ldi	r19, 0x1B	; 27
    1b30:	09 c0       	rjmp	.+18     	; 0x1b44 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1b32:	64 e0       	ldi	r22, 0x04	; 4
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	8c e6       	ldi	r24, 0x6C	; 108
    1b38:	91 e2       	ldi	r25, 0x21	; 33
    1b3a:	ff d5       	rcall	.+3070   	; 0x273a <udd_set_setup_payload>
    1b3c:	16 c0       	rjmp	.+44     	; 0x1b6a <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1b3e:	e2 e6       	ldi	r30, 0x62	; 98
    1b40:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1b42:	39 e0       	ldi	r19, 0x09	; 9
    1b44:	a0 e1       	ldi	r26, 0x10	; 16
    1b46:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1b48:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1b4a:	81 91       	ld	r24, Z+
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	8d 93       	st	X+, r24
    1b50:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1b52:	2f 5f       	subi	r18, 0xFF	; 255
    1b54:	23 17       	cp	r18, r19
    1b56:	c8 f3       	brcs	.-14     	; 0x1b4a <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1b58:	63 2f       	mov	r22, r19
    1b5a:	66 0f       	add	r22, r22
    1b5c:	6e 5f       	subi	r22, 0xFE	; 254
    1b5e:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <udc_string_desc>
		udd_set_setup_payload(
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	8e e0       	ldi	r24, 0x0E	; 14
    1b66:	91 e2       	ldi	r25, 0x21	; 33
    1b68:	e8 d5       	rcall	.+3024   	; 0x273a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1b6a:	e2 ee       	ldi	r30, 0xE2	; 226
    1b6c:	f3 e2       	ldi	r31, 0x23	; 35
    1b6e:	86 81       	ldd	r24, Z+6	; 0x06
    1b70:	97 81       	ldd	r25, Z+7	; 0x07
    1b72:	22 85       	ldd	r18, Z+10	; 0x0a
    1b74:	33 85       	ldd	r19, Z+11	; 0x0b
    1b76:	82 17       	cp	r24, r18
    1b78:	93 07       	cpc	r25, r19
    1b7a:	08 f0       	brcs	.+2      	; 0x1b7e <udc_process_setup+0x15a>
    1b7c:	eb c1       	rjmp	.+982    	; 0x1f54 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1b7e:	80 93 ec 23 	sts	0x23EC, r24	; 0x8023ec <udd_g_ctrlreq+0xa>
    1b82:	90 93 ed 23 	sts	0x23ED, r25	; 0x8023ed <udd_g_ctrlreq+0xb>
    1b86:	e6 c1       	rjmp	.+972    	; 0x1f54 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1b88:	21 30       	cpi	r18, 0x01	; 1
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1b8e:	8c c1       	rjmp	.+792    	; 0x1ea8 <udc_process_setup+0x484>
    1b90:	61 e0       	ldi	r22, 0x01	; 1
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	84 e1       	ldi	r24, 0x14	; 20
    1b96:	92 e2       	ldi	r25, 0x22	; 34
    1b98:	d0 d5       	rcall	.+2976   	; 0x273a <udd_set_setup_payload>
    1b9a:	dc c1       	rjmp	.+952    	; 0x1f54 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	e1 f5       	brne	.+120    	; 0x1c18 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ba0:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    1ba4:	9a 30       	cpi	r25, 0x0A	; 10
    1ba6:	c1 f5       	brne	.+112    	; 0x1c18 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1ba8:	21 30       	cpi	r18, 0x01	; 1
    1baa:	31 05       	cpc	r19, r1
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <udc_process_setup+0x18c>
    1bae:	4c c1       	rjmp	.+664    	; 0x1e48 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1bb0:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_num_configuration>
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <udc_process_setup+0x196>
    1bb8:	47 c1       	rjmp	.+654    	; 0x1e48 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1bba:	c0 91 e6 23 	lds	r28, 0x23E6	; 0x8023e6 <udd_g_ctrlreq+0x4>
    1bbe:	d0 91 e7 23 	lds	r29, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1bc2:	00 91 12 22 	lds	r16, 0x2212	; 0x802212 <udc_ptr_conf>
    1bc6:	10 91 13 22 	lds	r17, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1bca:	d8 01       	movw	r26, r16
    1bcc:	ed 91       	ld	r30, X+
    1bce:	fc 91       	ld	r31, X
    1bd0:	84 81       	ldd	r24, Z+4	; 0x04
    1bd2:	c8 17       	cp	r28, r24
    1bd4:	08 f0       	brcs	.+2      	; 0x1bd8 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1bd6:	38 c1       	rjmp	.+624    	; 0x1e48 <udc_process_setup+0x424>
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	8c 2f       	mov	r24, r28
    1bdc:	14 de       	rcall	.-984    	; 0x1806 <udc_update_iface_desc>
    1bde:	88 23       	and	r24, r24
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <udc_process_setup+0x1c0>
    1be2:	2d c1       	rjmp	.+602    	; 0x1e3e <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1be4:	ce 01       	movw	r24, r28
    1be6:	99 27       	eor	r25, r25
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	d8 01       	movw	r26, r16
    1bee:	12 96       	adiw	r26, 0x02	; 2
    1bf0:	ed 91       	ld	r30, X+
    1bf2:	fc 91       	ld	r31, X
    1bf4:	13 97       	sbiw	r26, 0x03	; 3
    1bf6:	e8 0f       	add	r30, r24
    1bf8:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1bfa:	01 90       	ld	r0, Z+
    1bfc:	f0 81       	ld	r31, Z
    1bfe:	e0 2d       	mov	r30, r0
    1c00:	86 81       	ldd	r24, Z+6	; 0x06
    1c02:	97 81       	ldd	r25, Z+7	; 0x07
    1c04:	fc 01       	movw	r30, r24
    1c06:	19 95       	eicall
    1c08:	80 93 16 22 	sts	0x2216, r24	; 0x802216 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1c0c:	61 e0       	ldi	r22, 0x01	; 1
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	86 e1       	ldi	r24, 0x16	; 22
    1c12:	92 e2       	ldi	r25, 0x22	; 34
    1c14:	92 d5       	rcall	.+2852   	; 0x273a <udd_set_setup_payload>
    1c16:	9e c1       	rjmp	.+828    	; 0x1f54 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1c18:	82 30       	cpi	r24, 0x02	; 2
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <udc_process_setup+0x1fa>
    1c1c:	10 c1       	rjmp	.+544    	; 0x1e3e <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c1e:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    1c22:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1c24:	05 c1       	rjmp	.+522    	; 0x1e30 <udc_process_setup+0x40c>
    1c26:	22 30       	cpi	r18, 0x02	; 2
    1c28:	31 05       	cpc	r19, r1
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1c2c:	3d c1       	rjmp	.+634    	; 0x1ea8 <udc_process_setup+0x484>
    1c2e:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <udd_g_ctrlreq+0x4>
    1c32:	12 d6       	rcall	.+3108   	; 0x2858 <udd_ep_is_halted>
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	80 93 0e 22 	sts	0x220E, r24	; 0x80220e <udc_ep_status.4579>
    1c3a:	90 93 0f 22 	sts	0x220F, r25	; 0x80220f <udc_ep_status.4579+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1c3e:	62 e0       	ldi	r22, 0x02	; 2
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	8e e0       	ldi	r24, 0x0E	; 14
    1c44:	92 e2       	ldi	r25, 0x22	; 34
    1c46:	79 d5       	rcall	.+2802   	; 0x273a <udd_set_setup_payload>
    1c48:	85 c1       	rjmp	.+778    	; 0x1f54 <udc_process_setup+0x530>
    1c4a:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <udc_process_setup+0x22c>
    1c4e:	9f c0       	rjmp	.+318    	; 0x1d8e <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c50:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    1c54:	93 30       	cpi	r25, 0x03	; 3
    1c56:	91 f1       	breq	.+100    	; 0x1cbc <udc_process_setup+0x298>
    1c58:	18 f4       	brcc	.+6      	; 0x1c60 <udc_process_setup+0x23c>
    1c5a:	91 30       	cpi	r25, 0x01	; 1
    1c5c:	a9 f0       	breq	.+42     	; 0x1c88 <udc_process_setup+0x264>
    1c5e:	97 c0       	rjmp	.+302    	; 0x1d8e <udc_process_setup+0x36a>
    1c60:	95 30       	cpi	r25, 0x05	; 5
    1c62:	21 f0       	breq	.+8      	; 0x1c6c <udc_process_setup+0x248>
    1c64:	99 30       	cpi	r25, 0x09	; 9
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <udc_process_setup+0x246>
    1c68:	43 c0       	rjmp	.+134    	; 0x1cf0 <udc_process_setup+0x2cc>
    1c6a:	91 c0       	rjmp	.+290    	; 0x1d8e <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c6c:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1c70:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1c74:	89 2b       	or	r24, r25
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <udc_process_setup+0x256>
    1c78:	17 c1       	rjmp	.+558    	; 0x1ea8 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1c7a:	8e ef       	ldi	r24, 0xFE	; 254
    1c7c:	9b e0       	ldi	r25, 0x0B	; 11
    1c7e:	80 93 ee 23 	sts	0x23EE, r24	; 0x8023ee <udd_g_ctrlreq+0xc>
    1c82:	90 93 ef 23 	sts	0x23EF, r25	; 0x8023ef <udd_g_ctrlreq+0xd>
    1c86:	66 c1       	rjmp	.+716    	; 0x1f54 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c88:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1c8c:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1c90:	89 2b       	or	r24, r25
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <udc_process_setup+0x272>
    1c94:	09 c1       	rjmp	.+530    	; 0x1ea8 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1c96:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1c9a:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <udc_process_setup+0x280>
    1ca2:	02 c1       	rjmp	.+516    	; 0x1ea8 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1ca4:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <udc_device_status>
    1ca8:	90 91 19 22 	lds	r25, 0x2219	; 0x802219 <udc_device_status+0x1>
    1cac:	8d 7f       	andi	r24, 0xFD	; 253
    1cae:	80 93 18 22 	sts	0x2218, r24	; 0x802218 <udc_device_status>
    1cb2:	90 93 19 22 	sts	0x2219, r25	; 0x802219 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1cb6:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <main_remotewakeup_disable>
    1cba:	4c c1       	rjmp	.+664    	; 0x1f54 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1cbc:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1cc0:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1cc4:	89 2b       	or	r24, r25
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <udc_process_setup+0x2a6>
    1cc8:	ef c0       	rjmp	.+478    	; 0x1ea8 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1cca:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1cce:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <udc_process_setup+0x2b4>
    1cd6:	ae c0       	rjmp	.+348    	; 0x1e34 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1cd8:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <udc_device_status>
    1cdc:	90 91 19 22 	lds	r25, 0x2219	; 0x802219 <udc_device_status+0x1>
    1ce0:	82 60       	ori	r24, 0x02	; 2
    1ce2:	80 93 18 22 	sts	0x2218, r24	; 0x802218 <udc_device_status>
    1ce6:	90 93 19 22 	sts	0x2219, r25	; 0x802219 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1cea:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1cee:	32 c1       	rjmp	.+612    	; 0x1f54 <udc_process_setup+0x530>
    1cf0:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1cf4:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1cf8:	89 2b       	or	r24, r25
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1cfc:	d5 c0       	rjmp	.+426    	; 0x1ea8 <udc_process_setup+0x484>
    1cfe:	1a d5       	rcall	.+2612   	; 0x2734 <udd_getaddress>
    1d00:	88 23       	and	r24, r24
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <udc_process_setup+0x2e2>
    1d04:	9c c0       	rjmp	.+312    	; 0x1e3e <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1d06:	20 91 e4 23 	lds	r18, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1d0a:	30 91 e5 23 	lds	r19, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1d0e:	33 27       	eor	r19, r19
    1d10:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1d14:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1d18:	81 89       	ldd	r24, Z+17	; 0x11
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	82 17       	cp	r24, r18
    1d1e:	93 07       	cpc	r25, r19
    1d20:	08 f4       	brcc	.+2      	; 0x1d24 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1d22:	8d c0       	rjmp	.+282    	; 0x1e3e <udc_process_setup+0x41a>
    1d24:	25 de       	rcall	.-950    	; 0x1970 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1d26:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1d2a:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1d2e:	80 93 14 22 	sts	0x2214, r24	; 0x802214 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1d32:	88 23       	and	r24, r24
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <udc_process_setup+0x314>
    1d36:	0e c1       	rjmp	.+540    	; 0x1f54 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1d38:	99 27       	eor	r25, r25
    1d3a:	81 50       	subi	r24, 0x01	; 1
    1d3c:	90 4c       	sbci	r25, 0xC0	; 192
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1d4a:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1d4e:	e8 0f       	add	r30, r24
    1d50:	f9 1f       	adc	r31, r25
    1d52:	e0 93 12 22 	sts	0x2212, r30	; 0x802212 <udc_ptr_conf>
    1d56:	f0 93 13 22 	sts	0x2213, r31	; 0x802213 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d5a:	01 90       	ld	r0, Z+
    1d5c:	f0 81       	ld	r31, Z
    1d5e:	e0 2d       	mov	r30, r0
    1d60:	84 81       	ldd	r24, Z+4	; 0x04
    1d62:	88 23       	and	r24, r24
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <udc_process_setup+0x344>
    1d66:	f6 c0       	rjmp	.+492    	; 0x1f54 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1d68:	c0 e0       	ldi	r28, 0x00	; 0
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	8c 2f       	mov	r24, r28
    1d6e:	c7 dd       	rcall	.-1138   	; 0x18fe <udc_iface_enable>
    1d70:	88 23       	and	r24, r24
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <udc_process_setup+0x352>
    1d74:	64 c0       	rjmp	.+200    	; 0x1e3e <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1d76:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d78:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <udc_ptr_conf>
    1d7c:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1d80:	01 90       	ld	r0, Z+
    1d82:	f0 81       	ld	r31, Z
    1d84:	e0 2d       	mov	r30, r0
    1d86:	84 81       	ldd	r24, Z+4	; 0x04
    1d88:	c8 17       	cp	r28, r24
    1d8a:	78 f3       	brcs	.-34     	; 0x1d6a <udc_process_setup+0x346>
    1d8c:	e3 c0       	rjmp	.+454    	; 0x1f54 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	e9 f4       	brne	.+58     	; 0x1dcc <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d92:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    1d96:	9b 30       	cpi	r25, 0x0B	; 11
    1d98:	c9 f4       	brne	.+50     	; 0x1dcc <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1d9a:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1d9e:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1da2:	89 2b       	or	r24, r25
    1da4:	09 f0       	breq	.+2      	; 0x1da8 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1da6:	50 c0       	rjmp	.+160    	; 0x1e48 <udc_process_setup+0x424>
    1da8:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_num_configuration>
    1dac:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <udc_process_setup+0x38e>
    1db0:	4b c0       	rjmp	.+150    	; 0x1e48 <udc_process_setup+0x424>
    1db2:	e2 ee       	ldi	r30, 0xE2	; 226
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1db4:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1db6:	c4 81       	ldd	r28, Z+4	; 0x04
    1db8:	d2 81       	ldd	r29, Z+2	; 0x02
    1dba:	8c 2f       	mov	r24, r28
    1dbc:	5e dd       	rcall	.-1348   	; 0x187a <udc_iface_disable>
    1dbe:	88 23       	and	r24, r24
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1dc2:	3d c0       	rjmp	.+122    	; 0x1e3e <udc_process_setup+0x41a>
    1dc4:	6d 2f       	mov	r22, r29
    1dc6:	8c 2f       	mov	r24, r28
    1dc8:	9a dd       	rcall	.-1228   	; 0x18fe <udc_iface_enable>
    1dca:	37 c0       	rjmp	.+110    	; 0x1e3a <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1dcc:	82 30       	cpi	r24, 0x02	; 2
    1dce:	b9 f5       	brne	.+110    	; 0x1e3e <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1dd0:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	19 f0       	breq	.+6      	; 0x1dde <udc_process_setup+0x3ba>
    1dd8:	83 30       	cpi	r24, 0x03	; 3
    1dda:	99 f0       	breq	.+38     	; 0x1e02 <udc_process_setup+0x3de>
    1ddc:	2d c0       	rjmp	.+90     	; 0x1e38 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1dde:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1de2:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1de6:	89 2b       	or	r24, r25
    1de8:	09 f0       	breq	.+2      	; 0x1dec <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1dea:	5e c0       	rjmp	.+188    	; 0x1ea8 <udc_process_setup+0x484>
    1dec:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1df0:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1df4:	89 2b       	or	r24, r25
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1df8:	57 c0       	rjmp	.+174    	; 0x1ea8 <udc_process_setup+0x484>
    1dfa:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <udd_g_ctrlreq+0x4>
    1dfe:	47 d5       	rcall	.+2702   	; 0x288e <udd_ep_clear_halt>
    1e00:	1c c0       	rjmp	.+56     	; 0x1e3a <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e02:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1e06:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1e0a:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <udc_process_setup+0x3ec>
    1e0e:	4c c0       	rjmp	.+152    	; 0x1ea8 <udc_process_setup+0x484>
    1e10:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1e14:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1e18:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <udc_process_setup+0x3fa>
    1e1c:	45 c0       	rjmp	.+138    	; 0x1ea8 <udc_process_setup+0x484>
    1e1e:	c2 ee       	ldi	r28, 0xE2	; 226
    1e20:	d3 e2       	ldi	r29, 0x23	; 35
    1e22:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e24:	35 d6       	rcall	.+3178   	; 0x2a90 <udd_ep_abort>
    1e26:	8c 81       	ldd	r24, Y+4	; 0x04
    1e28:	9e d6       	rcall	.+3388   	; 0x2b66 <udd_ep_set_halt>
    1e2a:	07 c0       	rjmp	.+14     	; 0x1e3a <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	05 c0       	rjmp	.+10     	; 0x1e3a <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	03 c0       	rjmp	.+6      	; 0x1e3a <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	01 c0       	rjmp	.+2      	; 0x1e3a <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1e38:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1e3a:	81 11       	cpse	r24, r1
    1e3c:	8c c0       	rjmp	.+280    	; 0x1f56 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1e3e:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udd_g_ctrlreq>
    1e42:	8f 71       	andi	r24, 0x1F	; 31
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	81 f5       	brne	.+96     	; 0x1ea8 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1e48:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_num_configuration>
    1e4c:	88 23       	and	r24, r24
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1e50:	71 c0       	rjmp	.+226    	; 0x1f34 <udc_process_setup+0x510>
    1e52:	00 91 e6 23 	lds	r16, 0x23E6	; 0x8023e6 <udd_g_ctrlreq+0x4>
    1e56:	10 91 e7 23 	lds	r17, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1e5a:	c0 91 12 22 	lds	r28, 0x2212	; 0x802212 <udc_ptr_conf>
    1e5e:	d0 91 13 22 	lds	r29, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1e62:	e8 81       	ld	r30, Y
    1e64:	f9 81       	ldd	r31, Y+1	; 0x01
    1e66:	84 81       	ldd	r24, Z+4	; 0x04
    1e68:	08 17       	cp	r16, r24
    1e6a:	08 f0       	brcs	.+2      	; 0x1e6e <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1e6c:	65 c0       	rjmp	.+202    	; 0x1f38 <udc_process_setup+0x514>
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	80 2f       	mov	r24, r16
    1e72:	c9 dc       	rcall	.-1646   	; 0x1806 <udc_update_iface_desc>
    1e74:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1e76:	c1 f0       	breq	.+48     	; 0x1ea8 <udc_process_setup+0x484>
    1e78:	f8 01       	movw	r30, r16
    1e7a:	ff 27       	eor	r31, r31
    1e7c:	cf 01       	movw	r24, r30
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	ea 81       	ldd	r30, Y+2	; 0x02
    1e84:	fb 81       	ldd	r31, Y+3	; 0x03
    1e86:	e8 0f       	add	r30, r24
    1e88:	f9 1f       	adc	r31, r25
    1e8a:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1e8c:	d1 81       	ldd	r29, Z+1	; 0x01
    1e8e:	ee 81       	ldd	r30, Y+6	; 0x06
    1e90:	ff 81       	ldd	r31, Y+7	; 0x07
    1e92:	19 95       	eicall
    1e94:	68 2f       	mov	r22, r24
    1e96:	80 2f       	mov	r24, r16
    1e98:	b6 dc       	rcall	.-1684   	; 0x1806 <udc_update_iface_desc>
    1e9a:	88 23       	and	r24, r24
    1e9c:	29 f0       	breq	.+10     	; 0x1ea8 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1e9e:	ec 81       	ldd	r30, Y+4	; 0x04
    1ea0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ea2:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	57 c0       	rjmp	.+174    	; 0x1f56 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1ea8:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udd_g_ctrlreq>
    1eac:	8f 71       	andi	r24, 0x1F	; 31
    1eae:	82 30       	cpi	r24, 0x02	; 2
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <udc_process_setup+0x490>
    1eb2:	44 c0       	rjmp	.+136    	; 0x1f3c <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1eb4:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_num_configuration>
    1eb8:	88 23       	and	r24, r24
    1eba:	b1 f1       	breq	.+108    	; 0x1f28 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ebc:	a0 91 12 22 	lds	r26, 0x2212	; 0x802212 <udc_ptr_conf>
    1ec0:	b0 91 13 22 	lds	r27, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1ec4:	ed 91       	ld	r30, X+
    1ec6:	fc 91       	ld	r31, X
    1ec8:	11 97       	sbiw	r26, 0x01	; 1
    1eca:	84 81       	ldd	r24, Z+4	; 0x04
    1ecc:	88 23       	and	r24, r24
    1ece:	71 f1       	breq	.+92     	; 0x1f2c <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1ed0:	c0 e0       	ldi	r28, 0x00	; 0
    1ed2:	ec 2f       	mov	r30, r28
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	ee 0f       	add	r30, r30
    1ed8:	ff 1f       	adc	r31, r31
    1eda:	12 96       	adiw	r26, 0x02	; 2
    1edc:	8d 91       	ld	r24, X+
    1ede:	9c 91       	ld	r25, X
    1ee0:	13 97       	sbiw	r26, 0x03	; 3
    1ee2:	e8 0f       	add	r30, r24
    1ee4:	f9 1f       	adc	r31, r25
    1ee6:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1ee8:	11 81       	ldd	r17, Z+1	; 0x01
    1eea:	d8 01       	movw	r26, r16
    1eec:	16 96       	adiw	r26, 0x06	; 6
    1eee:	ed 91       	ld	r30, X+
    1ef0:	fc 91       	ld	r31, X
    1ef2:	17 97       	sbiw	r26, 0x07	; 7
    1ef4:	19 95       	eicall
    1ef6:	68 2f       	mov	r22, r24
    1ef8:	8c 2f       	mov	r24, r28
    1efa:	85 dc       	rcall	.-1782   	; 0x1806 <udc_update_iface_desc>
    1efc:	88 23       	and	r24, r24
    1efe:	59 f1       	breq	.+86     	; 0x1f56 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1f00:	d8 01       	movw	r26, r16
    1f02:	14 96       	adiw	r26, 0x04	; 4
    1f04:	ed 91       	ld	r30, X+
    1f06:	fc 91       	ld	r31, X
    1f08:	15 97       	sbiw	r26, 0x05	; 5
    1f0a:	19 95       	eicall
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	23 c0       	rjmp	.+70     	; 0x1f56 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1f10:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f12:	a0 91 12 22 	lds	r26, 0x2212	; 0x802212 <udc_ptr_conf>
    1f16:	b0 91 13 22 	lds	r27, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1f1a:	ed 91       	ld	r30, X+
    1f1c:	fc 91       	ld	r31, X
    1f1e:	11 97       	sbiw	r26, 0x01	; 1
    1f20:	94 81       	ldd	r25, Z+4	; 0x04
    1f22:	c9 17       	cp	r28, r25
    1f24:	b0 f2       	brcs	.-84     	; 0x1ed2 <udc_process_setup+0x4ae>
    1f26:	17 c0       	rjmp	.+46     	; 0x1f56 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	15 c0       	rjmp	.+42     	; 0x1f56 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	13 c0       	rjmp	.+38     	; 0x1f56 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	11 c0       	rjmp	.+34     	; 0x1f56 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	0f c0       	rjmp	.+30     	; 0x1f56 <udc_process_setup+0x532>
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	0d c0       	rjmp	.+26     	; 0x1f56 <udc_process_setup+0x532>
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	0b c0       	rjmp	.+22     	; 0x1f56 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1f40:	98 2f       	mov	r25, r24
    1f42:	90 76       	andi	r25, 0x60	; 96
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <udc_process_setup+0x524>
    1f46:	7b cf       	rjmp	.-266    	; 0x1e3e <udc_process_setup+0x41a>
    1f48:	80 ce       	rjmp	.-768    	; 0x1c4a <udc_process_setup+0x226>
    1f4a:	98 2f       	mov	r25, r24
    1f4c:	90 76       	andi	r25, 0x60	; 96
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <udc_process_setup+0x52e>
    1f50:	76 cf       	rjmp	.-276    	; 0x1e3e <udc_process_setup+0x41a>
    1f52:	81 cd       	rjmp	.-1278   	; 0x1a56 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	08 95       	ret

00001f60 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1f60:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1f64:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1f66:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1f68:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1f6c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1f6e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1f72:	08 95       	ret

00001f74 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1f74:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1f76:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1f78:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1f7a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1f7c:	60 83       	st	Z, r22
	ret                             // Return to caller
    1f7e:	08 95       	ret

00001f80 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	1f 92       	push	r1
    1f86:	1f 92       	push	r1
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	81 11       	cpse	r24, r1
    1f8e:	26 c0       	rjmp	.+76     	; 0x1fdc <udd_sleep_mode+0x5c>
    1f90:	90 91 d8 23 	lds	r25, 0x23D8	; 0x8023d8 <udd_b_idle>
    1f94:	99 23       	and	r25, r25
    1f96:	f9 f0       	breq	.+62     	; 0x1fd6 <udd_sleep_mode+0x56>
    1f98:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <sleepmgr_locks+0x1>
    1f9c:	91 11       	cpse	r25, r1
    1f9e:	01 c0       	rjmp	.+2      	; 0x1fa2 <udd_sleep_mode+0x22>
    1fa0:	ff cf       	rjmp	.-2      	; 0x1fa0 <udd_sleep_mode+0x20>
    1fa2:	9f b7       	in	r25, 0x3f	; 63
    1fa4:	9a 83       	std	Y+2, r25	; 0x02
    1fa6:	f8 94       	cli
    1fa8:	2a 81       	ldd	r18, Y+2	; 0x02
    1faa:	ec ed       	ldi	r30, 0xDC	; 220
    1fac:	f3 e2       	ldi	r31, 0x23	; 35
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	91 50       	subi	r25, 0x01	; 1
    1fb2:	91 83       	std	Z+1, r25	; 0x01
    1fb4:	2f bf       	out	0x3f, r18	; 63
    1fb6:	0f c0       	rjmp	.+30     	; 0x1fd6 <udd_sleep_mode+0x56>
    1fb8:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <sleepmgr_locks+0x1>
    1fbc:	9f 3f       	cpi	r25, 0xFF	; 255
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <udd_sleep_mode+0x42>
    1fc0:	ff cf       	rjmp	.-2      	; 0x1fc0 <udd_sleep_mode+0x40>
    1fc2:	9f b7       	in	r25, 0x3f	; 63
    1fc4:	99 83       	std	Y+1, r25	; 0x01
    1fc6:	f8 94       	cli
    1fc8:	29 81       	ldd	r18, Y+1	; 0x01
    1fca:	ec ed       	ldi	r30, 0xDC	; 220
    1fcc:	f3 e2       	ldi	r31, 0x23	; 35
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	9f 5f       	subi	r25, 0xFF	; 255
    1fd2:	91 83       	std	Z+1, r25	; 0x01
    1fd4:	2f bf       	out	0x3f, r18	; 63
    1fd6:	80 93 d8 23 	sts	0x23D8, r24	; 0x8023d8 <udd_b_idle>
    1fda:	05 c0       	rjmp	.+10     	; 0x1fe6 <udd_sleep_mode+0x66>
    1fdc:	90 91 d8 23 	lds	r25, 0x23D8	; 0x8023d8 <udd_b_idle>
    1fe0:	99 23       	and	r25, r25
    1fe2:	51 f3       	breq	.-44     	; 0x1fb8 <udd_sleep_mode+0x38>
    1fe4:	f8 cf       	rjmp	.-16     	; 0x1fd6 <udd_sleep_mode+0x56>
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	08 95       	ret

00001ff0 <udd_ctrl_init>:
    1ff0:	0f 93       	push	r16
    1ff2:	e8 ec       	ldi	r30, 0xC8	; 200
    1ff4:	f4 e0       	ldi	r31, 0x04	; 4
    1ff6:	80 81       	ld	r24, Z
    1ff8:	8f 7d       	andi	r24, 0xDF	; 223
    1ffa:	80 83       	st	Z, r24
    1ffc:	80 81       	ld	r24, Z
    1ffe:	8f 7d       	andi	r24, 0xDF	; 223
    2000:	80 83       	st	Z, r24
    2002:	ec e8       	ldi	r30, 0x8C	; 140
    2004:	f3 e2       	ldi	r31, 0x23	; 35
    2006:	02 e0       	ldi	r16, 0x02	; 2
    2008:	05 93       	las	Z, r16
    200a:	10 92 8e 23 	sts	0x238E, r1	; 0x80238e <udd_sram+0x1e>
    200e:	10 92 8f 23 	sts	0x238F, r1	; 0x80238f <udd_sram+0x1f>
    2012:	00 e2       	ldi	r16, 0x20	; 32
    2014:	06 93       	lac	Z, r16
    2016:	00 e4       	ldi	r16, 0x40	; 64
    2018:	06 93       	lac	Z, r16
    201a:	e4 e8       	ldi	r30, 0x84	; 132
    201c:	f3 e2       	ldi	r31, 0x23	; 35
    201e:	00 e4       	ldi	r16, 0x40	; 64
    2020:	06 93       	lac	Z, r16
    2022:	e2 ee       	ldi	r30, 0xE2	; 226
    2024:	f3 e2       	ldi	r31, 0x23	; 35
    2026:	14 86       	std	Z+12, r1	; 0x0c
    2028:	15 86       	std	Z+13, r1	; 0x0d
    202a:	16 86       	std	Z+14, r1	; 0x0e
    202c:	17 86       	std	Z+15, r1	; 0x0f
    202e:	12 86       	std	Z+10, r1	; 0x0a
    2030:	13 86       	std	Z+11, r1	; 0x0b
    2032:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udd_ep_control_state>
    2036:	0f 91       	pop	r16
    2038:	08 95       	ret

0000203a <udd_ctrl_stall_data>:
    203a:	0f 93       	push	r16
    203c:	85 e0       	ldi	r24, 0x05	; 5
    203e:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ep_control_state>
    2042:	ed e8       	ldi	r30, 0x8D	; 141
    2044:	f3 e2       	ldi	r31, 0x23	; 35
    2046:	04 e0       	ldi	r16, 0x04	; 4
    2048:	05 93       	las	Z, r16
    204a:	e5 e8       	ldi	r30, 0x85	; 133
    204c:	f3 e2       	ldi	r31, 0x23	; 35
    204e:	04 e0       	ldi	r16, 0x04	; 4
    2050:	05 93       	las	Z, r16
    2052:	0f 91       	pop	r16
    2054:	08 95       	ret

00002056 <udd_ctrl_send_zlp_in>:
    2056:	0f 93       	push	r16
    2058:	83 e0       	ldi	r24, 0x03	; 3
    205a:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ep_control_state>
    205e:	10 92 8e 23 	sts	0x238E, r1	; 0x80238e <udd_sram+0x1e>
    2062:	10 92 8f 23 	sts	0x238F, r1	; 0x80238f <udd_sram+0x1f>
    2066:	ec e8       	ldi	r30, 0x8C	; 140
    2068:	f3 e2       	ldi	r31, 0x23	; 35
    206a:	02 e0       	ldi	r16, 0x02	; 2
    206c:	06 93       	lac	Z, r16
    206e:	0f 91       	pop	r16
    2070:	08 95       	ret

00002072 <udd_ctrl_endofrequest>:
    2072:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0xc>
    2076:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udd_g_ctrlreq+0xd>
    207a:	30 97       	sbiw	r30, 0x00	; 0
    207c:	09 f0       	breq	.+2      	; 0x2080 <udd_ctrl_endofrequest+0xe>
    207e:	19 95       	eicall
    2080:	08 95       	ret

00002082 <udd_ctrl_in_sent>:
    2082:	0f 93       	push	r16
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <udd_ep_control_state>
    208c:	83 30       	cpi	r24, 0x03	; 3
    208e:	19 f4       	brne	.+6      	; 0x2096 <udd_ctrl_in_sent+0x14>
    2090:	f0 df       	rcall	.-32     	; 0x2072 <udd_ctrl_endofrequest>
    2092:	ae df       	rcall	.-164    	; 0x1ff0 <udd_ctrl_init>
    2094:	5e c0       	rjmp	.+188    	; 0x2152 <udd_ctrl_in_sent+0xd0>
    2096:	80 91 6b 23 	lds	r24, 0x236B	; 0x80236b <udd_ctrl_payload_nb_trans>
    209a:	90 91 6c 23 	lds	r25, 0x236C	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    209e:	c0 91 ec 23 	lds	r28, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0xa>
    20a2:	d0 91 ed 23 	lds	r29, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0xb>
    20a6:	c8 1b       	sub	r28, r24
    20a8:	d9 0b       	sbc	r29, r25
    20aa:	71 f5       	brne	.+92     	; 0x2108 <udd_ctrl_in_sent+0x86>
    20ac:	20 91 6d 23 	lds	r18, 0x236D	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
    20b0:	30 91 6e 23 	lds	r19, 0x236E	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    20b4:	82 0f       	add	r24, r18
    20b6:	93 1f       	adc	r25, r19
    20b8:	80 93 6d 23 	sts	0x236D, r24	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
    20bc:	90 93 6e 23 	sts	0x236E, r25	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    20c0:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    20c4:	30 91 e9 23 	lds	r19, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    20c8:	82 17       	cp	r24, r18
    20ca:	93 07       	cpc	r25, r19
    20cc:	21 f0       	breq	.+8      	; 0x20d6 <udd_ctrl_in_sent+0x54>
    20ce:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <b_shortpacket.5295>
    20d2:	88 23       	and	r24, r24
    20d4:	41 f0       	breq	.+16     	; 0x20e6 <udd_ctrl_in_sent+0x64>
    20d6:	84 e0       	ldi	r24, 0x04	; 4
    20d8:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ep_control_state>
    20dc:	e4 e8       	ldi	r30, 0x84	; 132
    20de:	f3 e2       	ldi	r31, 0x23	; 35
    20e0:	02 e0       	ldi	r16, 0x02	; 2
    20e2:	06 93       	lac	Z, r16
    20e4:	36 c0       	rjmp	.+108    	; 0x2152 <udd_ctrl_in_sent+0xd0>
    20e6:	e0 91 f0 23 	lds	r30, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xe>
    20ea:	f0 91 f1 23 	lds	r31, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xf>
    20ee:	30 97       	sbiw	r30, 0x00	; 0
    20f0:	99 f0       	breq	.+38     	; 0x2118 <udd_ctrl_in_sent+0x96>
    20f2:	19 95       	eicall
    20f4:	88 23       	and	r24, r24
    20f6:	81 f0       	breq	.+32     	; 0x2118 <udd_ctrl_in_sent+0x96>
    20f8:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udd_ctrl_payload_nb_trans>
    20fc:	10 92 6c 23 	sts	0x236C, r1	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    2100:	c0 91 ec 23 	lds	r28, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0xa>
    2104:	d0 91 ed 23 	lds	r29, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0xb>
    2108:	c8 30       	cpi	r28, 0x08	; 8
    210a:	d1 05       	cpc	r29, r1
    210c:	28 f0       	brcs	.+10     	; 0x2118 <udd_ctrl_in_sent+0x96>
    210e:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <b_shortpacket.5295>
    2112:	c8 e0       	ldi	r28, 0x08	; 8
    2114:	d0 e0       	ldi	r29, 0x00	; 0
    2116:	03 c0       	rjmp	.+6      	; 0x211e <udd_ctrl_in_sent+0x9c>
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	80 93 1a 22 	sts	0x221A, r24	; 0x80221a <b_shortpacket.5295>
    211e:	e0 e7       	ldi	r30, 0x70	; 112
    2120:	f3 e2       	ldi	r31, 0x23	; 35
    2122:	c6 8f       	std	Z+30, r28	; 0x1e
    2124:	d7 8f       	std	Z+31, r29	; 0x1f
    2126:	80 91 6b 23 	lds	r24, 0x236B	; 0x80236b <udd_ctrl_payload_nb_trans>
    212a:	90 91 6c 23 	lds	r25, 0x236C	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    212e:	20 91 ea 23 	lds	r18, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x8>
    2132:	30 91 eb 23 	lds	r19, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x9>
    2136:	28 0f       	add	r18, r24
    2138:	39 1f       	adc	r19, r25
    213a:	20 a3       	std	Z+32, r18	; 0x20
    213c:	31 a3       	std	Z+33, r19	; 0x21
    213e:	c8 0f       	add	r28, r24
    2140:	d9 1f       	adc	r29, r25
    2142:	c0 93 6b 23 	sts	0x236B, r28	; 0x80236b <udd_ctrl_payload_nb_trans>
    2146:	d0 93 6c 23 	sts	0x236C, r29	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    214a:	ec e8       	ldi	r30, 0x8C	; 140
    214c:	f3 e2       	ldi	r31, 0x23	; 35
    214e:	02 e0       	ldi	r16, 0x02	; 2
    2150:	06 93       	lac	Z, r16
    2152:	df 91       	pop	r29
    2154:	cf 91       	pop	r28
    2156:	0f 91       	pop	r16
    2158:	08 95       	ret

0000215a <udd_ep_get_size>:
    215a:	fc 01       	movw	r30, r24
    215c:	81 81       	ldd	r24, Z+1	; 0x01
    215e:	e8 2f       	mov	r30, r24
    2160:	e7 70       	andi	r30, 0x07	; 7
    2162:	8e 2f       	mov	r24, r30
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	fc 01       	movw	r30, r24
    2168:	31 97       	sbiw	r30, 0x01	; 1
    216a:	e7 30       	cpi	r30, 0x07	; 7
    216c:	f1 05       	cpc	r31, r1
    216e:	d0 f4       	brcc	.+52     	; 0x21a4 <udd_ep_get_size+0x4a>
    2170:	88 27       	eor	r24, r24
    2172:	e1 5f       	subi	r30, 0xF1	; 241
    2174:	fe 4f       	sbci	r31, 0xFE	; 254
    2176:	8f 4f       	sbci	r24, 0xFF	; 255
    2178:	25 c7       	rjmp	.+3658   	; 0x2fc4 <__tablejump2__>
    217a:	80 e1       	ldi	r24, 0x10	; 16
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	08 95       	ret
    2180:	80 e2       	ldi	r24, 0x20	; 32
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	08 95       	ret
    2186:	80 e4       	ldi	r24, 0x40	; 64
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	08 95       	ret
    218c:	80 e8       	ldi	r24, 0x80	; 128
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	08 95       	ret
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	91 e0       	ldi	r25, 0x01	; 1
    2196:	08 95       	ret
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	92 e0       	ldi	r25, 0x02	; 2
    219c:	08 95       	ret
    219e:	8f ef       	ldi	r24, 0xFF	; 255
    21a0:	93 e0       	ldi	r25, 0x03	; 3
    21a2:	08 95       	ret
    21a4:	88 e0       	ldi	r24, 0x08	; 8
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	08 95       	ret

000021aa <udd_ep_get_job>:
    21aa:	28 2f       	mov	r18, r24
    21ac:	2f 70       	andi	r18, 0x0F	; 15
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	22 0f       	add	r18, r18
    21b2:	33 1f       	adc	r19, r19
    21b4:	08 2e       	mov	r0, r24
    21b6:	00 0c       	add	r0, r0
    21b8:	99 0b       	sbc	r25, r25
    21ba:	88 27       	eor	r24, r24
    21bc:	99 0f       	add	r25, r25
    21be:	88 1f       	adc	r24, r24
    21c0:	99 27       	eor	r25, r25
    21c2:	82 0f       	add	r24, r18
    21c4:	93 1f       	adc	r25, r19
    21c6:	02 97       	sbiw	r24, 0x02	; 2
    21c8:	9c 01       	movw	r18, r24
    21ca:	22 0f       	add	r18, r18
    21cc:	33 1f       	adc	r19, r19
    21ce:	22 0f       	add	r18, r18
    21d0:	33 1f       	adc	r19, r19
    21d2:	22 0f       	add	r18, r18
    21d4:	33 1f       	adc	r19, r19
    21d6:	82 0f       	add	r24, r18
    21d8:	93 1f       	adc	r25, r19
    21da:	85 5e       	subi	r24, 0xE5	; 229
    21dc:	9c 4d       	sbci	r25, 0xDC	; 220
    21de:	08 95       	ret

000021e0 <udd_ctrl_interrupt_tc_setup>:
    21e0:	0f 93       	push	r16
    21e2:	cf 93       	push	r28
    21e4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    21e8:	80 ff       	sbrs	r24, 0
    21ea:	64 c0       	rjmp	.+200    	; 0x22b4 <udd_ctrl_interrupt_tc_setup+0xd4>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    21f2:	e4 e8       	ldi	r30, 0x84	; 132
    21f4:	f3 e2       	ldi	r31, 0x23	; 35
    21f6:	00 e8       	ldi	r16, 0x80	; 128
    21f8:	06 93       	lac	Z, r16
    21fa:	ec e8       	ldi	r30, 0x8C	; 140
    21fc:	f3 e2       	ldi	r31, 0x23	; 35
    21fe:	00 e8       	ldi	r16, 0x80	; 128
    2200:	06 93       	lac	Z, r16
    2202:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2206:	e4 e8       	ldi	r30, 0x84	; 132
    2208:	f3 e2       	ldi	r31, 0x23	; 35
    220a:	00 e1       	ldi	r16, 0x10	; 16
    220c:	06 93       	lac	Z, r16
    220e:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <udd_ep_control_state>
    2212:	88 23       	and	r24, r24
    2214:	29 f0       	breq	.+10     	; 0x2220 <udd_ctrl_interrupt_tc_setup+0x40>
    2216:	83 50       	subi	r24, 0x03	; 3
    2218:	82 30       	cpi	r24, 0x02	; 2
    221a:	08 f4       	brcc	.+2      	; 0x221e <udd_ctrl_interrupt_tc_setup+0x3e>
    221c:	2a df       	rcall	.-428    	; 0x2072 <udd_ctrl_endofrequest>
    221e:	e8 de       	rcall	.-560    	; 0x1ff0 <udd_ctrl_init>
    2220:	80 91 86 23 	lds	r24, 0x2386	; 0x802386 <udd_sram+0x16>
    2224:	90 91 87 23 	lds	r25, 0x2387	; 0x802387 <udd_sram+0x17>
    2228:	08 97       	sbiw	r24, 0x08	; 8
    222a:	09 f0       	breq	.+2      	; 0x222e <udd_ctrl_interrupt_tc_setup+0x4e>
    222c:	45 c0       	rjmp	.+138    	; 0x22b8 <udd_ctrl_interrupt_tc_setup+0xd8>
    222e:	88 e0       	ldi	r24, 0x08	; 8
    2230:	e3 e6       	ldi	r30, 0x63	; 99
    2232:	f3 e2       	ldi	r31, 0x23	; 35
    2234:	a2 ee       	ldi	r26, 0xE2	; 226
    2236:	b3 e2       	ldi	r27, 0x23	; 35
    2238:	01 90       	ld	r0, Z+
    223a:	0d 92       	st	X+, r0
    223c:	8a 95       	dec	r24
    223e:	e1 f7       	brne	.-8      	; 0x2238 <udd_ctrl_interrupt_tc_setup+0x58>
    2240:	e8 ec       	ldi	r30, 0xC8	; 200
    2242:	f4 e0       	ldi	r31, 0x04	; 4
    2244:	80 81       	ld	r24, Z
    2246:	80 62       	ori	r24, 0x20	; 32
    2248:	80 83       	st	Z, r24
    224a:	80 81       	ld	r24, Z
    224c:	80 62       	ori	r24, 0x20	; 32
    224e:	80 83       	st	Z, r24
    2250:	e9 db       	rcall	.-2094   	; 0x1a24 <udc_process_setup>
    2252:	c8 2f       	mov	r28, r24
    2254:	81 11       	cpse	r24, r1
    2256:	03 c0       	rjmp	.+6      	; 0x225e <udd_ctrl_interrupt_tc_setup+0x7e>
    2258:	f0 de       	rcall	.-544    	; 0x203a <udd_ctrl_stall_data>
    225a:	c1 e0       	ldi	r28, 0x01	; 1
    225c:	2e c0       	rjmp	.+92     	; 0x22ba <udd_ctrl_interrupt_tc_setup+0xda>
    225e:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udd_g_ctrlreq>
    2262:	88 23       	and	r24, r24
    2264:	6c f4       	brge	.+26     	; 0x2280 <udd_ctrl_interrupt_tc_setup+0xa0>
    2266:	10 92 6d 23 	sts	0x236D, r1	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
    226a:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    226e:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udd_ctrl_payload_nb_trans>
    2272:	10 92 6c 23 	sts	0x236C, r1	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ep_control_state>
    227c:	02 df       	rcall	.-508    	; 0x2082 <udd_ctrl_in_sent>
    227e:	1d c0       	rjmp	.+58     	; 0x22ba <udd_ctrl_interrupt_tc_setup+0xda>
    2280:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    2284:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    2288:	89 2b       	or	r24, r25
    228a:	11 f4       	brne	.+4      	; 0x2290 <udd_ctrl_interrupt_tc_setup+0xb0>
    228c:	e4 de       	rcall	.-568    	; 0x2056 <udd_ctrl_send_zlp_in>
    228e:	15 c0       	rjmp	.+42     	; 0x22ba <udd_ctrl_interrupt_tc_setup+0xda>
    2290:	10 92 6d 23 	sts	0x236D, r1	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
    2294:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    2298:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udd_ctrl_payload_nb_trans>
    229c:	10 92 6c 23 	sts	0x236C, r1	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ep_control_state>
    22a6:	e4 e8       	ldi	r30, 0x84	; 132
    22a8:	f3 e2       	ldi	r31, 0x23	; 35
    22aa:	02 e0       	ldi	r16, 0x02	; 2
    22ac:	06 93       	lac	Z, r16
    22ae:	00 e2       	ldi	r16, 0x20	; 32
    22b0:	06 93       	lac	Z, r16
    22b2:	03 c0       	rjmp	.+6      	; 0x22ba <udd_ctrl_interrupt_tc_setup+0xda>
    22b4:	c0 e0       	ldi	r28, 0x00	; 0
    22b6:	01 c0       	rjmp	.+2      	; 0x22ba <udd_ctrl_interrupt_tc_setup+0xda>
    22b8:	c1 e0       	ldi	r28, 0x01	; 1
    22ba:	8c 2f       	mov	r24, r28
    22bc:	cf 91       	pop	r28
    22be:	0f 91       	pop	r16
    22c0:	08 95       	ret

000022c2 <udd_ep_trans_complet>:
    22c2:	8f 92       	push	r8
    22c4:	9f 92       	push	r9
    22c6:	af 92       	push	r10
    22c8:	bf 92       	push	r11
    22ca:	df 92       	push	r13
    22cc:	ef 92       	push	r14
    22ce:	ff 92       	push	r15
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	d8 2e       	mov	r13, r24
    22da:	67 df       	rcall	.-306    	; 0x21aa <udd_ep_get_job>
    22dc:	8c 01       	movw	r16, r24
    22de:	cd 2d       	mov	r28, r13
    22e0:	cf 70       	andi	r28, 0x0F	; 15
    22e2:	d0 e0       	ldi	r29, 0x00	; 0
    22e4:	ce 01       	movw	r24, r28
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	cd 2d       	mov	r28, r13
    22ec:	0d 2c       	mov	r0, r13
    22ee:	00 0c       	add	r0, r0
    22f0:	dd 0b       	sbc	r29, r29
    22f2:	cc 27       	eor	r28, r28
    22f4:	dd 0f       	add	r29, r29
    22f6:	cc 1f       	adc	r28, r28
    22f8:	dd 27       	eor	r29, r29
    22fa:	c8 0f       	add	r28, r24
    22fc:	d9 1f       	adc	r29, r25
    22fe:	ce 01       	movw	r24, r28
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	9c 01       	movw	r18, r24
    230e:	2c 57       	subi	r18, 0x7C	; 124
    2310:	3c 4d       	sbci	r19, 0xDC	; 220
    2312:	79 01       	movw	r14, r18
    2314:	c9 01       	movw	r24, r18
    2316:	21 df       	rcall	.-446    	; 0x215a <udd_ep_get_size>
    2318:	4c 01       	movw	r8, r24
    231a:	dd 20       	and	r13, r13
    231c:	0c f0       	brlt	.+2      	; 0x2320 <udd_ep_trans_complet+0x5e>
    231e:	79 c0       	rjmp	.+242    	; 0x2412 <udd_ep_trans_complet+0x150>
    2320:	fe 01       	movw	r30, r28
    2322:	ee 0f       	add	r30, r30
    2324:	ff 1f       	adc	r31, r31
    2326:	ee 0f       	add	r30, r30
    2328:	ff 1f       	adc	r31, r31
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	e0 59       	subi	r30, 0x90	; 144
    2330:	fc 4d       	sbci	r31, 0xDC	; 220
    2332:	22 8d       	ldd	r18, Z+26	; 0x1a
    2334:	33 8d       	ldd	r19, Z+27	; 0x1b
    2336:	d8 01       	movw	r26, r16
    2338:	15 96       	adiw	r26, 0x05	; 5
    233a:	8d 91       	ld	r24, X+
    233c:	9c 91       	ld	r25, X
    233e:	16 97       	sbiw	r26, 0x06	; 6
    2340:	82 0f       	add	r24, r18
    2342:	93 1f       	adc	r25, r19
    2344:	15 96       	adiw	r26, 0x05	; 5
    2346:	8d 93       	st	X+, r24
    2348:	9c 93       	st	X, r25
    234a:	16 97       	sbiw	r26, 0x06	; 6
    234c:	13 96       	adiw	r26, 0x03	; 3
    234e:	2d 91       	ld	r18, X+
    2350:	3c 91       	ld	r19, X
    2352:	14 97       	sbiw	r26, 0x04	; 4
    2354:	82 17       	cp	r24, r18
    2356:	93 07       	cpc	r25, r19
    2358:	09 f4       	brne	.+2      	; 0x235c <udd_ep_trans_complet+0x9a>
    235a:	45 c0       	rjmp	.+138    	; 0x23e6 <udd_ep_trans_complet+0x124>
    235c:	28 1b       	sub	r18, r24
    235e:	39 0b       	sbc	r19, r25
    2360:	21 15       	cp	r18, r1
    2362:	b4 e0       	ldi	r27, 0x04	; 4
    2364:	3b 07       	cpc	r19, r27
    2366:	38 f0       	brcs	.+14     	; 0x2376 <udd_ep_trans_complet+0xb4>
    2368:	2f ef       	ldi	r18, 0xFF	; 255
    236a:	33 e0       	ldi	r19, 0x03	; 3
    236c:	c9 01       	movw	r24, r18
    236e:	b4 01       	movw	r22, r8
    2370:	15 d6       	rcall	.+3114   	; 0x2f9c <__udivmodhi4>
    2372:	28 1b       	sub	r18, r24
    2374:	39 0b       	sbc	r19, r25
    2376:	f8 01       	movw	r30, r16
    2378:	80 81       	ld	r24, Z
    237a:	81 ff       	sbrs	r24, 1
    237c:	09 c0       	rjmp	.+18     	; 0x2390 <udd_ep_trans_complet+0xce>
    237e:	c9 01       	movw	r24, r18
    2380:	b4 01       	movw	r22, r8
    2382:	0c d6       	rcall	.+3096   	; 0x2f9c <__udivmodhi4>
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	89 2b       	or	r24, r25
    2388:	09 f0       	breq	.+2      	; 0x238c <udd_ep_trans_complet+0xca>
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	84 2f       	mov	r24, r20
    238e:	01 c0       	rjmp	.+2      	; 0x2392 <udd_ep_trans_complet+0xd0>
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	d8 01       	movw	r26, r16
    2394:	9c 91       	ld	r25, X
    2396:	80 fb       	bst	r24, 0
    2398:	91 f9       	bld	r25, 1
    239a:	9c 93       	st	X, r25
    239c:	fe 01       	movw	r30, r28
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	ee 0f       	add	r30, r30
    23a4:	ff 1f       	adc	r31, r31
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	e0 59       	subi	r30, 0x90	; 144
    23ac:	fc 4d       	sbci	r31, 0xDC	; 220
    23ae:	12 8e       	std	Z+26, r1	; 0x1a
    23b0:	13 8e       	std	Z+27, r1	; 0x1b
    23b2:	26 8b       	std	Z+22, r18	; 0x16
    23b4:	37 8b       	std	Z+23, r19	; 0x17
    23b6:	11 96       	adiw	r26, 0x01	; 1
    23b8:	2d 91       	ld	r18, X+
    23ba:	3c 91       	ld	r19, X
    23bc:	12 97       	sbiw	r26, 0x02	; 2
    23be:	15 96       	adiw	r26, 0x05	; 5
    23c0:	8d 91       	ld	r24, X+
    23c2:	9c 91       	ld	r25, X
    23c4:	16 97       	sbiw	r26, 0x06	; 6
    23c6:	82 0f       	add	r24, r18
    23c8:	93 1f       	adc	r25, r19
    23ca:	cc 0f       	add	r28, r28
    23cc:	dd 1f       	adc	r29, r29
    23ce:	cc 0f       	add	r28, r28
    23d0:	dd 1f       	adc	r29, r29
    23d2:	cc 0f       	add	r28, r28
    23d4:	dd 1f       	adc	r29, r29
    23d6:	c8 57       	subi	r28, 0x78	; 120
    23d8:	dc 4d       	sbci	r29, 0xDC	; 220
    23da:	88 83       	st	Y, r24
    23dc:	99 83       	std	Y+1, r25	; 0x01
    23de:	f7 01       	movw	r30, r14
    23e0:	02 e0       	ldi	r16, 0x02	; 2
    23e2:	06 93       	lac	Z, r16
    23e4:	e0 c0       	rjmp	.+448    	; 0x25a6 <udd_ep_trans_complet+0x2e4>
    23e6:	d8 01       	movw	r26, r16
    23e8:	8c 91       	ld	r24, X
    23ea:	81 ff       	sbrs	r24, 1
    23ec:	c9 c0       	rjmp	.+402    	; 0x2580 <udd_ep_trans_complet+0x2be>
    23ee:	8d 7f       	andi	r24, 0xFD	; 253
    23f0:	8c 93       	st	X, r24
    23f2:	cc 0f       	add	r28, r28
    23f4:	dd 1f       	adc	r29, r29
    23f6:	cc 0f       	add	r28, r28
    23f8:	dd 1f       	adc	r29, r29
    23fa:	cc 0f       	add	r28, r28
    23fc:	dd 1f       	adc	r29, r29
    23fe:	c0 59       	subi	r28, 0x90	; 144
    2400:	dc 4d       	sbci	r29, 0xDC	; 220
    2402:	1a 8e       	std	Y+26, r1	; 0x1a
    2404:	1b 8e       	std	Y+27, r1	; 0x1b
    2406:	1e 8a       	std	Y+22, r1	; 0x16
    2408:	1f 8a       	std	Y+23, r1	; 0x17
    240a:	f7 01       	movw	r30, r14
    240c:	02 e0       	ldi	r16, 0x02	; 2
    240e:	06 93       	lac	Z, r16
    2410:	ca c0       	rjmp	.+404    	; 0x25a6 <udd_ep_trans_complet+0x2e4>
    2412:	fe 01       	movw	r30, r28
    2414:	ee 0f       	add	r30, r30
    2416:	ff 1f       	adc	r31, r31
    2418:	ee 0f       	add	r30, r30
    241a:	ff 1f       	adc	r31, r31
    241c:	ee 0f       	add	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	e0 59       	subi	r30, 0x90	; 144
    2422:	fc 4d       	sbci	r31, 0xDC	; 220
    2424:	a6 88       	ldd	r10, Z+22	; 0x16
    2426:	b7 88       	ldd	r11, Z+23	; 0x17
    2428:	d8 01       	movw	r26, r16
    242a:	8c 91       	ld	r24, X
    242c:	82 ff       	sbrs	r24, 2
    242e:	19 c0       	rjmp	.+50     	; 0x2462 <udd_ep_trans_complet+0x1a0>
    2430:	11 96       	adiw	r26, 0x01	; 1
    2432:	ed 91       	ld	r30, X+
    2434:	fc 91       	ld	r31, X
    2436:	12 97       	sbiw	r26, 0x02	; 2
    2438:	15 96       	adiw	r26, 0x05	; 5
    243a:	2d 91       	ld	r18, X+
    243c:	3c 91       	ld	r19, X
    243e:	16 97       	sbiw	r26, 0x06	; 6
    2440:	13 96       	adiw	r26, 0x03	; 3
    2442:	8d 91       	ld	r24, X+
    2444:	9c 91       	ld	r25, X
    2446:	14 97       	sbiw	r26, 0x04	; 4
    2448:	b4 01       	movw	r22, r8
    244a:	a8 d5       	rcall	.+2896   	; 0x2f9c <__udivmodhi4>
    244c:	b0 e4       	ldi	r27, 0x40	; 64
    244e:	db 9e       	mul	r13, r27
    2450:	b0 01       	movw	r22, r0
    2452:	11 24       	eor	r1, r1
    2454:	65 52       	subi	r22, 0x25	; 37
    2456:	7e 4d       	sbci	r23, 0xDE	; 222
    2458:	ac 01       	movw	r20, r24
    245a:	cf 01       	movw	r24, r30
    245c:	82 0f       	add	r24, r18
    245e:	93 1f       	adc	r25, r19
    2460:	b9 d5       	rcall	.+2930   	; 0x2fd4 <memcpy>
    2462:	f8 01       	movw	r30, r16
    2464:	25 81       	ldd	r18, Z+5	; 0x05
    2466:	36 81       	ldd	r19, Z+6	; 0x06
    2468:	2a 0d       	add	r18, r10
    246a:	3b 1d       	adc	r19, r11
    246c:	25 83       	std	Z+5, r18	; 0x05
    246e:	36 83       	std	Z+6, r19	; 0x06
    2470:	83 81       	ldd	r24, Z+3	; 0x03
    2472:	94 81       	ldd	r25, Z+4	; 0x04
    2474:	82 17       	cp	r24, r18
    2476:	93 07       	cpc	r25, r19
    2478:	68 f4       	brcc	.+26     	; 0x2494 <udd_ep_trans_complet+0x1d2>
    247a:	85 83       	std	Z+5, r24	; 0x05
    247c:	96 83       	std	Z+6, r25	; 0x06
    247e:	cc 0f       	add	r28, r28
    2480:	dd 1f       	adc	r29, r29
    2482:	cc 0f       	add	r28, r28
    2484:	dd 1f       	adc	r29, r29
    2486:	cc 0f       	add	r28, r28
    2488:	dd 1f       	adc	r29, r29
    248a:	c0 59       	subi	r28, 0x90	; 144
    248c:	dc 4d       	sbci	r29, 0xDC	; 220
    248e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2490:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2492:	76 c0       	rjmp	.+236    	; 0x2580 <udd_ep_trans_complet+0x2be>
    2494:	fe 01       	movw	r30, r28
    2496:	ee 0f       	add	r30, r30
    2498:	ff 1f       	adc	r31, r31
    249a:	ee 0f       	add	r30, r30
    249c:	ff 1f       	adc	r31, r31
    249e:	ee 0f       	add	r30, r30
    24a0:	ff 1f       	adc	r31, r31
    24a2:	e0 59       	subi	r30, 0x90	; 144
    24a4:	fc 4d       	sbci	r31, 0xDC	; 220
    24a6:	42 8d       	ldd	r20, Z+26	; 0x1a
    24a8:	53 8d       	ldd	r21, Z+27	; 0x1b
    24aa:	a4 16       	cp	r10, r20
    24ac:	b5 06       	cpc	r11, r21
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <udd_ep_trans_complet+0x1f0>
    24b0:	67 c0       	rjmp	.+206    	; 0x2580 <udd_ep_trans_complet+0x2be>
    24b2:	28 17       	cp	r18, r24
    24b4:	39 07       	cpc	r19, r25
    24b6:	09 f4       	brne	.+2      	; 0x24ba <udd_ep_trans_complet+0x1f8>
    24b8:	63 c0       	rjmp	.+198    	; 0x2580 <udd_ep_trans_complet+0x2be>
    24ba:	ac 01       	movw	r20, r24
    24bc:	42 1b       	sub	r20, r18
    24be:	53 0b       	sbc	r21, r19
    24c0:	9a 01       	movw	r18, r20
    24c2:	21 15       	cp	r18, r1
    24c4:	54 e0       	ldi	r21, 0x04	; 4
    24c6:	35 07       	cpc	r19, r21
    24c8:	40 f0       	brcs	.+16     	; 0x24da <udd_ep_trans_complet+0x218>
    24ca:	2f ef       	ldi	r18, 0xFF	; 255
    24cc:	33 e0       	ldi	r19, 0x03	; 3
    24ce:	c9 01       	movw	r24, r18
    24d0:	b4 01       	movw	r22, r8
    24d2:	64 d5       	rcall	.+2760   	; 0x2f9c <__udivmodhi4>
    24d4:	28 1b       	sub	r18, r24
    24d6:	39 0b       	sbc	r19, r25
    24d8:	05 c0       	rjmp	.+10     	; 0x24e4 <udd_ep_trans_complet+0x222>
    24da:	c9 01       	movw	r24, r18
    24dc:	b4 01       	movw	r22, r8
    24de:	5e d5       	rcall	.+2748   	; 0x2f9c <__udivmodhi4>
    24e0:	28 1b       	sub	r18, r24
    24e2:	39 0b       	sbc	r19, r25
    24e4:	fe 01       	movw	r30, r28
    24e6:	ee 0f       	add	r30, r30
    24e8:	ff 1f       	adc	r31, r31
    24ea:	ee 0f       	add	r30, r30
    24ec:	ff 1f       	adc	r31, r31
    24ee:	ee 0f       	add	r30, r30
    24f0:	ff 1f       	adc	r31, r31
    24f2:	e0 59       	subi	r30, 0x90	; 144
    24f4:	fc 4d       	sbci	r31, 0xDC	; 220
    24f6:	16 8a       	std	Z+22, r1	; 0x16
    24f8:	17 8a       	std	Z+23, r1	; 0x17
    24fa:	28 15       	cp	r18, r8
    24fc:	39 05       	cpc	r19, r9
    24fe:	00 f5       	brcc	.+64     	; 0x2540 <udd_ep_trans_complet+0x27e>
    2500:	d8 01       	movw	r26, r16
    2502:	8c 91       	ld	r24, X
    2504:	84 60       	ori	r24, 0x04	; 4
    2506:	8c 93       	st	X, r24
    2508:	b0 e4       	ldi	r27, 0x40	; 64
    250a:	db 9e       	mul	r13, r27
    250c:	c0 01       	movw	r24, r0
    250e:	11 24       	eor	r1, r1
    2510:	85 52       	subi	r24, 0x25	; 37
    2512:	9e 4d       	sbci	r25, 0xDE	; 222
    2514:	fe 01       	movw	r30, r28
    2516:	ee 0f       	add	r30, r30
    2518:	ff 1f       	adc	r31, r31
    251a:	ee 0f       	add	r30, r30
    251c:	ff 1f       	adc	r31, r31
    251e:	ee 0f       	add	r30, r30
    2520:	ff 1f       	adc	r31, r31
    2522:	e8 57       	subi	r30, 0x78	; 120
    2524:	fc 4d       	sbci	r31, 0xDC	; 220
    2526:	80 83       	st	Z, r24
    2528:	91 83       	std	Z+1, r25	; 0x01
    252a:	cc 0f       	add	r28, r28
    252c:	dd 1f       	adc	r29, r29
    252e:	cc 0f       	add	r28, r28
    2530:	dd 1f       	adc	r29, r29
    2532:	cc 0f       	add	r28, r28
    2534:	dd 1f       	adc	r29, r29
    2536:	c0 59       	subi	r28, 0x90	; 144
    2538:	dc 4d       	sbci	r29, 0xDC	; 220
    253a:	8a 8e       	std	Y+26, r8	; 0x1a
    253c:	9b 8e       	std	Y+27, r9	; 0x1b
    253e:	1c c0       	rjmp	.+56     	; 0x2578 <udd_ep_trans_complet+0x2b6>
    2540:	f8 01       	movw	r30, r16
    2542:	41 81       	ldd	r20, Z+1	; 0x01
    2544:	52 81       	ldd	r21, Z+2	; 0x02
    2546:	85 81       	ldd	r24, Z+5	; 0x05
    2548:	96 81       	ldd	r25, Z+6	; 0x06
    254a:	84 0f       	add	r24, r20
    254c:	95 1f       	adc	r25, r21
    254e:	fe 01       	movw	r30, r28
    2550:	ee 0f       	add	r30, r30
    2552:	ff 1f       	adc	r31, r31
    2554:	ee 0f       	add	r30, r30
    2556:	ff 1f       	adc	r31, r31
    2558:	ee 0f       	add	r30, r30
    255a:	ff 1f       	adc	r31, r31
    255c:	e8 57       	subi	r30, 0x78	; 120
    255e:	fc 4d       	sbci	r31, 0xDC	; 220
    2560:	80 83       	st	Z, r24
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	cc 0f       	add	r28, r28
    2566:	dd 1f       	adc	r29, r29
    2568:	cc 0f       	add	r28, r28
    256a:	dd 1f       	adc	r29, r29
    256c:	cc 0f       	add	r28, r28
    256e:	dd 1f       	adc	r29, r29
    2570:	c0 59       	subi	r28, 0x90	; 144
    2572:	dc 4d       	sbci	r29, 0xDC	; 220
    2574:	2a 8f       	std	Y+26, r18	; 0x1a
    2576:	3b 8f       	std	Y+27, r19	; 0x1b
    2578:	f7 01       	movw	r30, r14
    257a:	02 e0       	ldi	r16, 0x02	; 2
    257c:	06 93       	lac	Z, r16
    257e:	13 c0       	rjmp	.+38     	; 0x25a6 <udd_ep_trans_complet+0x2e4>
    2580:	d8 01       	movw	r26, r16
    2582:	8c 91       	ld	r24, X
    2584:	80 ff       	sbrs	r24, 0
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <udd_ep_trans_complet+0x2e4>
    2588:	8e 7f       	andi	r24, 0xFE	; 254
    258a:	8c 93       	st	X, r24
    258c:	17 96       	adiw	r26, 0x07	; 7
    258e:	ed 91       	ld	r30, X+
    2590:	fc 91       	ld	r31, X
    2592:	18 97       	sbiw	r26, 0x08	; 8
    2594:	30 97       	sbiw	r30, 0x00	; 0
    2596:	39 f0       	breq	.+14     	; 0x25a6 <udd_ep_trans_complet+0x2e4>
    2598:	15 96       	adiw	r26, 0x05	; 5
    259a:	6d 91       	ld	r22, X+
    259c:	7c 91       	ld	r23, X
    259e:	16 97       	sbiw	r26, 0x06	; 6
    25a0:	4d 2d       	mov	r20, r13
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	19 95       	eicall
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	ff 90       	pop	r15
    25b0:	ef 90       	pop	r14
    25b2:	df 90       	pop	r13
    25b4:	bf 90       	pop	r11
    25b6:	af 90       	pop	r10
    25b8:	9f 90       	pop	r9
    25ba:	8f 90       	pop	r8
    25bc:	08 95       	ret

000025be <udd_attach>:
    25be:	1f 93       	push	r17
    25c0:	cf 93       	push	r28
    25c2:	df 93       	push	r29
    25c4:	1f 92       	push	r1
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	8f b7       	in	r24, 0x3f	; 63
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	f8 94       	cli
    25d0:	19 81       	ldd	r17, Y+1	; 0x01
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	d5 dc       	rcall	.-1622   	; 0x1f80 <udd_sleep_mode>
    25d6:	ea ec       	ldi	r30, 0xCA	; 202
    25d8:	f4 e0       	ldi	r31, 0x04	; 4
    25da:	80 e4       	ldi	r24, 0x40	; 64
    25dc:	80 83       	st	Z, r24
    25de:	80 e2       	ldi	r24, 0x20	; 32
    25e0:	80 83       	st	Z, r24
    25e2:	e1 ec       	ldi	r30, 0xC1	; 193
    25e4:	f4 e0       	ldi	r31, 0x04	; 4
    25e6:	80 81       	ld	r24, Z
    25e8:	81 60       	ori	r24, 0x01	; 1
    25ea:	80 83       	st	Z, r24
    25ec:	a9 ec       	ldi	r26, 0xC9	; 201
    25ee:	b4 e0       	ldi	r27, 0x04	; 4
    25f0:	8c 91       	ld	r24, X
    25f2:	82 60       	ori	r24, 0x02	; 2
    25f4:	8c 93       	st	X, r24
    25f6:	e8 ec       	ldi	r30, 0xC8	; 200
    25f8:	f4 e0       	ldi	r31, 0x04	; 4
    25fa:	80 81       	ld	r24, Z
    25fc:	80 64       	ori	r24, 0x40	; 64
    25fe:	80 83       	st	Z, r24
    2600:	8c 91       	ld	r24, X
    2602:	81 60       	ori	r24, 0x01	; 1
    2604:	8c 93       	st	X, r24
    2606:	80 81       	ld	r24, Z
    2608:	80 68       	ori	r24, 0x80	; 128
    260a:	80 83       	st	Z, r24
    260c:	1f bf       	out	0x3f, r17	; 63
    260e:	0f 90       	pop	r0
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	08 95       	ret

00002618 <udd_enable>:
    2618:	0f 93       	push	r16
    261a:	1f 93       	push	r17
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	1f 92       	push	r1
    2622:	1f 92       	push	r1
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	00 e6       	ldi	r16, 0x60	; 96
    262a:	10 e0       	ldi	r17, 0x00	; 0
    262c:	f8 01       	movw	r30, r16
    262e:	10 82       	st	Z, r1
    2630:	80 e3       	ldi	r24, 0x30	; 48
    2632:	0e 94 b1 09 	call	0x1362	; 0x1362 <sysclk_enable_usb>
    2636:	e0 ec       	ldi	r30, 0xC0	; 192
    2638:	f4 e0       	ldi	r31, 0x04	; 4
    263a:	80 81       	ld	r24, Z
    263c:	80 64       	ori	r24, 0x40	; 64
    263e:	80 83       	st	Z, r24
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	f8 01       	movw	r30, r16
    2644:	80 83       	st	Z, r24
    2646:	8f b7       	in	r24, 0x3f	; 63
    2648:	8a 83       	std	Y+2, r24	; 0x02
    264a:	f8 94       	cli
    264c:	1a 81       	ldd	r17, Y+2	; 0x02
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	fc 01       	movw	r30, r24
    2654:	ee 0f       	add	r30, r30
    2656:	ff 1f       	adc	r31, r31
    2658:	ee 0f       	add	r30, r30
    265a:	ff 1f       	adc	r31, r31
    265c:	ee 0f       	add	r30, r30
    265e:	ff 1f       	adc	r31, r31
    2660:	e0 59       	subi	r30, 0x90	; 144
    2662:	fc 4d       	sbci	r31, 0xDC	; 220
    2664:	15 8a       	std	Z+21, r1	; 0x15
    2666:	01 96       	adiw	r24, 0x01	; 1
    2668:	8a 30       	cpi	r24, 0x0A	; 10
    266a:	91 05       	cpc	r25, r1
    266c:	91 f7       	brne	.-28     	; 0x2652 <udd_enable+0x3a>
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	fc 01       	movw	r30, r24
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	ee 0f       	add	r30, r30
    267e:	ff 1f       	adc	r31, r31
    2680:	e8 0f       	add	r30, r24
    2682:	f9 1f       	adc	r31, r25
    2684:	e5 5e       	subi	r30, 0xE5	; 229
    2686:	fc 4d       	sbci	r31, 0xDC	; 220
    2688:	20 81       	ld	r18, Z
    268a:	2e 7f       	andi	r18, 0xFE	; 254
    268c:	20 83       	st	Z, r18
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	88 30       	cpi	r24, 0x08	; 8
    2692:	91 05       	cpc	r25, r1
    2694:	71 f7       	brne	.-36     	; 0x2672 <udd_enable+0x5a>
    2696:	6a e1       	ldi	r22, 0x1A	; 26
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	82 e0       	ldi	r24, 0x02	; 2
    269c:	61 dc       	rcall	.-1854   	; 0x1f60 <nvm_read_byte>
    269e:	8f 3f       	cpi	r24, 0xFF	; 255
    26a0:	19 f0       	breq	.+6      	; 0x26a8 <udd_enable+0x90>
    26a2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    26a6:	03 c0       	rjmp	.+6      	; 0x26ae <udd_enable+0x96>
    26a8:	8f e1       	ldi	r24, 0x1F	; 31
    26aa:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    26ae:	6b e1       	ldi	r22, 0x1B	; 27
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	82 e0       	ldi	r24, 0x02	; 2
    26b4:	55 dc       	rcall	.-1878   	; 0x1f60 <nvm_read_byte>
    26b6:	8f 3f       	cpi	r24, 0xFF	; 255
    26b8:	19 f0       	breq	.+6      	; 0x26c0 <udd_enable+0xa8>
    26ba:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    26be:	03 c0       	rjmp	.+6      	; 0x26c6 <udd_enable+0xae>
    26c0:	8f e1       	ldi	r24, 0x1F	; 31
    26c2:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    26c6:	e0 ec       	ldi	r30, 0xC0	; 192
    26c8:	f4 e0       	ldi	r31, 0x04	; 4
    26ca:	80 81       	ld	r24, Z
    26cc:	84 60       	ori	r24, 0x04	; 4
    26ce:	80 83       	st	Z, r24
    26d0:	80 81       	ld	r24, Z
    26d2:	80 68       	ori	r24, 0x80	; 128
    26d4:	80 83       	st	Z, r24
    26d6:	80 81       	ld	r24, Z
    26d8:	80 61       	ori	r24, 0x10	; 16
    26da:	80 83       	st	Z, r24
    26dc:	84 e8       	ldi	r24, 0x84	; 132
    26de:	93 e2       	ldi	r25, 0x23	; 35
    26e0:	86 83       	std	Z+6, r24	; 0x06
    26e2:	97 83       	std	Z+7, r25	; 0x07
    26e4:	80 81       	ld	r24, Z
    26e6:	80 62       	ori	r24, 0x20	; 32
    26e8:	80 83       	st	Z, r24
    26ea:	8f ef       	ldi	r24, 0xFF	; 255
    26ec:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    26f0:	e8 ec       	ldi	r30, 0xC8	; 200
    26f2:	f4 e0       	ldi	r31, 0x04	; 4
    26f4:	80 81       	ld	r24, Z
    26f6:	81 60       	ori	r24, 0x01	; 1
    26f8:	80 83       	st	Z, r24
    26fa:	10 92 d8 23 	sts	0x23D8, r1	; 0x8023d8 <udd_b_idle>
    26fe:	80 91 e1 23 	lds	r24, 0x23E1	; 0x8023e1 <sleepmgr_locks+0x5>
    2702:	8f 3f       	cpi	r24, 0xFF	; 255
    2704:	09 f4       	brne	.+2      	; 0x2708 <udd_enable+0xf0>
    2706:	ff cf       	rjmp	.-2      	; 0x2706 <udd_enable+0xee>
    2708:	8f b7       	in	r24, 0x3f	; 63
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	f8 94       	cli
    270e:	99 81       	ldd	r25, Y+1	; 0x01
    2710:	ec ed       	ldi	r30, 0xDC	; 220
    2712:	f3 e2       	ldi	r31, 0x23	; 35
    2714:	85 81       	ldd	r24, Z+5	; 0x05
    2716:	8f 5f       	subi	r24, 0xFF	; 255
    2718:	85 83       	std	Z+5, r24	; 0x05
    271a:	9f bf       	out	0x3f, r25	; 63
    271c:	50 df       	rcall	.-352    	; 0x25be <udd_attach>
    271e:	1f bf       	out	0x3f, r17	; 63
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	1f 91       	pop	r17
    272a:	0f 91       	pop	r16
    272c:	08 95       	ret

0000272e <udd_set_address>:
    272e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2732:	08 95       	ret

00002734 <udd_getaddress>:
    2734:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2738:	08 95       	ret

0000273a <udd_set_setup_payload>:
    273a:	e2 ee       	ldi	r30, 0xE2	; 226
    273c:	f3 e2       	ldi	r31, 0x23	; 35
    273e:	80 87       	std	Z+8, r24	; 0x08
    2740:	91 87       	std	Z+9, r25	; 0x09
    2742:	62 87       	std	Z+10, r22	; 0x0a
    2744:	73 87       	std	Z+11, r23	; 0x0b
    2746:	08 95       	ret

00002748 <udd_ep_alloc>:
    2748:	28 2f       	mov	r18, r24
    274a:	2f 70       	andi	r18, 0x0F	; 15
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	22 0f       	add	r18, r18
    2750:	33 1f       	adc	r19, r19
    2752:	08 2e       	mov	r0, r24
    2754:	00 0c       	add	r0, r0
    2756:	99 0b       	sbc	r25, r25
    2758:	88 27       	eor	r24, r24
    275a:	99 0f       	add	r25, r25
    275c:	88 1f       	adc	r24, r24
    275e:	99 27       	eor	r25, r25
    2760:	82 0f       	add	r24, r18
    2762:	93 1f       	adc	r25, r19
    2764:	fc 01       	movw	r30, r24
    2766:	ee 0f       	add	r30, r30
    2768:	ff 1f       	adc	r31, r31
    276a:	ee 0f       	add	r30, r30
    276c:	ff 1f       	adc	r31, r31
    276e:	ee 0f       	add	r30, r30
    2770:	ff 1f       	adc	r31, r31
    2772:	e0 59       	subi	r30, 0x90	; 144
    2774:	fc 4d       	sbci	r31, 0xDC	; 220
    2776:	25 89       	ldd	r18, Z+21	; 0x15
    2778:	20 7c       	andi	r18, 0xC0	; 192
    277a:	09 f0       	breq	.+2      	; 0x277e <udd_ep_alloc+0x36>
    277c:	69 c0       	rjmp	.+210    	; 0x2850 <udd_ep_alloc+0x108>
    277e:	63 70       	andi	r22, 0x03	; 3
    2780:	61 30       	cpi	r22, 0x01	; 1
    2782:	11 f0       	breq	.+4      	; 0x2788 <udd_ep_alloc+0x40>
    2784:	18 f4       	brcc	.+6      	; 0x278c <udd_ep_alloc+0x44>
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <udd_ep_alloc+0x48>
    2788:	60 ec       	ldi	r22, 0xC0	; 192
    278a:	03 c0       	rjmp	.+6      	; 0x2792 <udd_ep_alloc+0x4a>
    278c:	60 e8       	ldi	r22, 0x80	; 128
    278e:	01 c0       	rjmp	.+2      	; 0x2792 <udd_ep_alloc+0x4a>
    2790:	60 e4       	ldi	r22, 0x40	; 64
    2792:	40 38       	cpi	r20, 0x80	; 128
    2794:	51 05       	cpc	r21, r1
    2796:	e9 f0       	breq	.+58     	; 0x27d2 <udd_ep_alloc+0x8a>
    2798:	50 f4       	brcc	.+20     	; 0x27ae <udd_ep_alloc+0x66>
    279a:	40 32       	cpi	r20, 0x20	; 32
    279c:	51 05       	cpc	r21, r1
    279e:	a9 f0       	breq	.+42     	; 0x27ca <udd_ep_alloc+0x82>
    27a0:	40 34       	cpi	r20, 0x40	; 64
    27a2:	51 05       	cpc	r21, r1
    27a4:	a1 f0       	breq	.+40     	; 0x27ce <udd_ep_alloc+0x86>
    27a6:	40 31       	cpi	r20, 0x10	; 16
    27a8:	51 05       	cpc	r21, r1
    27aa:	d9 f4       	brne	.+54     	; 0x27e2 <udd_ep_alloc+0x9a>
    27ac:	0c c0       	rjmp	.+24     	; 0x27c6 <udd_ep_alloc+0x7e>
    27ae:	41 15       	cp	r20, r1
    27b0:	22 e0       	ldi	r18, 0x02	; 2
    27b2:	52 07       	cpc	r21, r18
    27b4:	91 f0       	breq	.+36     	; 0x27da <udd_ep_alloc+0x92>
    27b6:	4f 3f       	cpi	r20, 0xFF	; 255
    27b8:	23 e0       	ldi	r18, 0x03	; 3
    27ba:	52 07       	cpc	r21, r18
    27bc:	81 f0       	breq	.+32     	; 0x27de <udd_ep_alloc+0x96>
    27be:	41 15       	cp	r20, r1
    27c0:	51 40       	sbci	r21, 0x01	; 1
    27c2:	79 f4       	brne	.+30     	; 0x27e2 <udd_ep_alloc+0x9a>
    27c4:	08 c0       	rjmp	.+16     	; 0x27d6 <udd_ep_alloc+0x8e>
    27c6:	21 e0       	ldi	r18, 0x01	; 1
    27c8:	0d c0       	rjmp	.+26     	; 0x27e4 <udd_ep_alloc+0x9c>
    27ca:	22 e0       	ldi	r18, 0x02	; 2
    27cc:	0b c0       	rjmp	.+22     	; 0x27e4 <udd_ep_alloc+0x9c>
    27ce:	23 e0       	ldi	r18, 0x03	; 3
    27d0:	09 c0       	rjmp	.+18     	; 0x27e4 <udd_ep_alloc+0x9c>
    27d2:	24 e0       	ldi	r18, 0x04	; 4
    27d4:	07 c0       	rjmp	.+14     	; 0x27e4 <udd_ep_alloc+0x9c>
    27d6:	25 e0       	ldi	r18, 0x05	; 5
    27d8:	05 c0       	rjmp	.+10     	; 0x27e4 <udd_ep_alloc+0x9c>
    27da:	26 e0       	ldi	r18, 0x06	; 6
    27dc:	03 c0       	rjmp	.+6      	; 0x27e4 <udd_ep_alloc+0x9c>
    27de:	27 e0       	ldi	r18, 0x07	; 7
    27e0:	01 c0       	rjmp	.+2      	; 0x27e4 <udd_ep_alloc+0x9c>
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	fc 01       	movw	r30, r24
    27e6:	ee 0f       	add	r30, r30
    27e8:	ff 1f       	adc	r31, r31
    27ea:	ee 0f       	add	r30, r30
    27ec:	ff 1f       	adc	r31, r31
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	e0 59       	subi	r30, 0x90	; 144
    27f4:	fc 4d       	sbci	r31, 0xDC	; 220
    27f6:	15 8a       	std	Z+21, r1	; 0x15
    27f8:	36 e0       	ldi	r19, 0x06	; 6
    27fa:	34 8b       	std	Z+20, r19	; 0x14
    27fc:	26 2b       	or	r18, r22
    27fe:	25 8b       	std	Z+21, r18	; 0x15
    2800:	fc 01       	movw	r30, r24
    2802:	ee 0f       	add	r30, r30
    2804:	ff 1f       	adc	r31, r31
    2806:	ee 0f       	add	r30, r30
    2808:	ff 1f       	adc	r31, r31
    280a:	ee 0f       	add	r30, r30
    280c:	ff 1f       	adc	r31, r31
    280e:	e0 59       	subi	r30, 0x90	; 144
    2810:	fc 4d       	sbci	r31, 0xDC	; 220
    2812:	25 89       	ldd	r18, Z+21	; 0x15
    2814:	20 7c       	andi	r18, 0xC0	; 192
    2816:	20 3c       	cpi	r18, 0xC0	; 192
    2818:	69 f4       	brne	.+26     	; 0x2834 <udd_ep_alloc+0xec>
    281a:	fc 01       	movw	r30, r24
    281c:	ee 0f       	add	r30, r30
    281e:	ff 1f       	adc	r31, r31
    2820:	ee 0f       	add	r30, r30
    2822:	ff 1f       	adc	r31, r31
    2824:	ee 0f       	add	r30, r30
    2826:	ff 1f       	adc	r31, r31
    2828:	e0 59       	subi	r30, 0x90	; 144
    282a:	fc 4d       	sbci	r31, 0xDC	; 220
    282c:	25 89       	ldd	r18, Z+21	; 0x15
    282e:	27 70       	andi	r18, 0x07	; 7
    2830:	27 30       	cpi	r18, 0x07	; 7
    2832:	81 f0       	breq	.+32     	; 0x2854 <udd_ep_alloc+0x10c>
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	fc 01       	movw	r30, r24
    2842:	e0 59       	subi	r30, 0x90	; 144
    2844:	fc 4d       	sbci	r31, 0xDC	; 220
    2846:	85 89       	ldd	r24, Z+21	; 0x15
    2848:	80 62       	ori	r24, 0x20	; 32
    284a:	85 8b       	std	Z+21, r24	; 0x15
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	08 95       	ret
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	08 95       	ret
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	08 95       	ret

00002858 <udd_ep_is_halted>:
    2858:	e8 2f       	mov	r30, r24
    285a:	ef 70       	andi	r30, 0x0F	; 15
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	ee 0f       	add	r30, r30
    2860:	ff 1f       	adc	r31, r31
    2862:	08 2e       	mov	r0, r24
    2864:	00 0c       	add	r0, r0
    2866:	99 0b       	sbc	r25, r25
    2868:	88 27       	eor	r24, r24
    286a:	99 0f       	add	r25, r25
    286c:	88 1f       	adc	r24, r24
    286e:	99 27       	eor	r25, r25
    2870:	e8 0f       	add	r30, r24
    2872:	f9 1f       	adc	r31, r25
    2874:	ee 0f       	add	r30, r30
    2876:	ff 1f       	adc	r31, r31
    2878:	ee 0f       	add	r30, r30
    287a:	ff 1f       	adc	r31, r31
    287c:	ee 0f       	add	r30, r30
    287e:	ff 1f       	adc	r31, r31
    2880:	e0 59       	subi	r30, 0x90	; 144
    2882:	fc 4d       	sbci	r31, 0xDC	; 220
    2884:	85 89       	ldd	r24, Z+21	; 0x15
    2886:	82 fb       	bst	r24, 2
    2888:	88 27       	eor	r24, r24
    288a:	80 f9       	bld	r24, 0
    288c:	08 95       	ret

0000288e <udd_ep_clear_halt>:
    288e:	0f 93       	push	r16
    2890:	28 2f       	mov	r18, r24
    2892:	2f 70       	andi	r18, 0x0F	; 15
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	a9 01       	movw	r20, r18
    2898:	44 0f       	add	r20, r20
    289a:	55 1f       	adc	r21, r21
    289c:	28 2f       	mov	r18, r24
    289e:	08 2e       	mov	r0, r24
    28a0:	00 0c       	add	r0, r0
    28a2:	33 0b       	sbc	r19, r19
    28a4:	22 27       	eor	r18, r18
    28a6:	33 0f       	add	r19, r19
    28a8:	22 1f       	adc	r18, r18
    28aa:	33 27       	eor	r19, r19
    28ac:	24 0f       	add	r18, r20
    28ae:	35 1f       	adc	r19, r21
    28b0:	a9 01       	movw	r20, r18
    28b2:	44 0f       	add	r20, r20
    28b4:	55 1f       	adc	r21, r21
    28b6:	44 0f       	add	r20, r20
    28b8:	55 1f       	adc	r21, r21
    28ba:	44 0f       	add	r20, r20
    28bc:	55 1f       	adc	r21, r21
    28be:	fa 01       	movw	r30, r20
    28c0:	ec 57       	subi	r30, 0x7C	; 124
    28c2:	fc 4d       	sbci	r31, 0xDC	; 220
    28c4:	01 e0       	ldi	r16, 0x01	; 1
    28c6:	06 93       	lac	Z, r16
    28c8:	fa 01       	movw	r30, r20
    28ca:	e0 59       	subi	r30, 0x90	; 144
    28cc:	fc 4d       	sbci	r31, 0xDC	; 220
    28ce:	95 89       	ldd	r25, Z+21	; 0x15
    28d0:	92 ff       	sbrs	r25, 2
    28d2:	11 c0       	rjmp	.+34     	; 0x28f6 <udd_ep_clear_halt+0x68>
    28d4:	fa 01       	movw	r30, r20
    28d6:	e0 59       	subi	r30, 0x90	; 144
    28d8:	fc 4d       	sbci	r31, 0xDC	; 220
    28da:	95 89       	ldd	r25, Z+21	; 0x15
    28dc:	9b 7f       	andi	r25, 0xFB	; 251
    28de:	95 8b       	std	Z+21, r25	; 0x15
    28e0:	64 dc       	rcall	.-1848   	; 0x21aa <udd_ep_get_job>
    28e2:	fc 01       	movw	r30, r24
    28e4:	80 81       	ld	r24, Z
    28e6:	80 ff       	sbrs	r24, 0
    28e8:	06 c0       	rjmp	.+12     	; 0x28f6 <udd_ep_clear_halt+0x68>
    28ea:	8e 7f       	andi	r24, 0xFE	; 254
    28ec:	80 83       	st	Z, r24
    28ee:	07 80       	ldd	r0, Z+7	; 0x07
    28f0:	f0 85       	ldd	r31, Z+8	; 0x08
    28f2:	e0 2d       	mov	r30, r0
    28f4:	19 95       	eicall
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	0f 91       	pop	r16
    28fa:	08 95       	ret

000028fc <udd_ep_run>:
    28fc:	6f 92       	push	r6
    28fe:	7f 92       	push	r7
    2900:	8f 92       	push	r8
    2902:	9f 92       	push	r9
    2904:	af 92       	push	r10
    2906:	bf 92       	push	r11
    2908:	cf 92       	push	r12
    290a:	df 92       	push	r13
    290c:	ef 92       	push	r14
    290e:	ff 92       	push	r15
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
    2918:	1f 92       	push	r1
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	78 2e       	mov	r7, r24
    2920:	66 2e       	mov	r6, r22
    2922:	4a 01       	movw	r8, r20
    2924:	59 01       	movw	r10, r18
    2926:	41 dc       	rcall	.-1918   	; 0x21aa <udd_ep_get_job>
    2928:	6c 01       	movw	r12, r24
    292a:	27 2d       	mov	r18, r7
    292c:	87 2d       	mov	r24, r7
    292e:	8f 70       	andi	r24, 0x0F	; 15
    2930:	e8 2e       	mov	r14, r24
    2932:	f1 2c       	mov	r15, r1
    2934:	c7 01       	movw	r24, r14
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	e7 2c       	mov	r14, r7
    293c:	07 2c       	mov	r0, r7
    293e:	00 0c       	add	r0, r0
    2940:	ff 08       	sbc	r15, r15
    2942:	ee 24       	eor	r14, r14
    2944:	ff 0c       	add	r15, r15
    2946:	ee 1c       	adc	r14, r14
    2948:	ff 24       	eor	r15, r15
    294a:	e8 0e       	add	r14, r24
    294c:	f9 1e       	adc	r15, r25
    294e:	f7 01       	movw	r30, r14
    2950:	ee 0f       	add	r30, r30
    2952:	ff 1f       	adc	r31, r31
    2954:	ee 0f       	add	r30, r30
    2956:	ff 1f       	adc	r31, r31
    2958:	ee 0f       	add	r30, r30
    295a:	ff 1f       	adc	r31, r31
    295c:	e0 59       	subi	r30, 0x90	; 144
    295e:	fc 4d       	sbci	r31, 0xDC	; 220
    2960:	85 89       	ldd	r24, Z+21	; 0x15
    2962:	80 7c       	andi	r24, 0xC0	; 192
    2964:	09 f4       	brne	.+2      	; 0x2968 <udd_ep_run+0x6c>
    2966:	81 c0       	rjmp	.+258    	; 0x2a6a <udd_ep_run+0x16e>
    2968:	f7 01       	movw	r30, r14
    296a:	ee 0f       	add	r30, r30
    296c:	ff 1f       	adc	r31, r31
    296e:	ee 0f       	add	r30, r30
    2970:	ff 1f       	adc	r31, r31
    2972:	ee 0f       	add	r30, r30
    2974:	ff 1f       	adc	r31, r31
    2976:	e0 59       	subi	r30, 0x90	; 144
    2978:	fc 4d       	sbci	r31, 0xDC	; 220
    297a:	85 89       	ldd	r24, Z+21	; 0x15
    297c:	80 7c       	andi	r24, 0xC0	; 192
    297e:	80 3c       	cpi	r24, 0xC0	; 192
    2980:	61 f0       	breq	.+24     	; 0x299a <udd_ep_run+0x9e>
    2982:	f7 01       	movw	r30, r14
    2984:	ee 0f       	add	r30, r30
    2986:	ff 1f       	adc	r31, r31
    2988:	ee 0f       	add	r30, r30
    298a:	ff 1f       	adc	r31, r31
    298c:	ee 0f       	add	r30, r30
    298e:	ff 1f       	adc	r31, r31
    2990:	e0 59       	subi	r30, 0x90	; 144
    2992:	fc 4d       	sbci	r31, 0xDC	; 220
    2994:	85 89       	ldd	r24, Z+21	; 0x15
    2996:	82 fd       	sbrc	r24, 2
    2998:	6a c0       	rjmp	.+212    	; 0x2a6e <udd_ep_run+0x172>
    299a:	8f b7       	in	r24, 0x3f	; 63
    299c:	89 83       	std	Y+1, r24	; 0x01
    299e:	f8 94       	cli
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	f6 01       	movw	r30, r12
    29a4:	90 81       	ld	r25, Z
    29a6:	90 ff       	sbrs	r25, 0
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <udd_ep_run+0xb4>
    29aa:	8f bf       	out	0x3f, r24	; 63
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	60 c0       	rjmp	.+192    	; 0x2a70 <udd_ep_run+0x174>
    29b0:	f6 01       	movw	r30, r12
    29b2:	90 81       	ld	r25, Z
    29b4:	91 60       	ori	r25, 0x01	; 1
    29b6:	90 83       	st	Z, r25
    29b8:	8f bf       	out	0x3f, r24	; 63
    29ba:	81 82       	std	Z+1, r8	; 0x01
    29bc:	92 82       	std	Z+2, r9	; 0x02
    29be:	a3 82       	std	Z+3, r10	; 0x03
    29c0:	b4 82       	std	Z+4, r11	; 0x04
    29c2:	15 82       	std	Z+5, r1	; 0x05
    29c4:	16 82       	std	Z+6, r1	; 0x06
    29c6:	07 83       	std	Z+7, r16	; 0x07
    29c8:	10 87       	std	Z+8, r17	; 0x08
    29ca:	61 10       	cpse	r6, r1
    29cc:	06 c0       	rjmp	.+12     	; 0x29da <udd_ep_run+0xde>
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	a1 14       	cp	r10, r1
    29d2:	b1 04       	cpc	r11, r1
    29d4:	19 f0       	breq	.+6      	; 0x29dc <udd_ep_run+0xe0>
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	01 c0       	rjmp	.+2      	; 0x29dc <udd_ep_run+0xe0>
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	f6 01       	movw	r30, r12
    29de:	80 81       	ld	r24, Z
    29e0:	90 fb       	bst	r25, 0
    29e2:	81 f9       	bld	r24, 1
    29e4:	8b 7f       	andi	r24, 0xFB	; 251
    29e6:	80 83       	st	Z, r24
    29e8:	22 23       	and	r18, r18
    29ea:	64 f4       	brge	.+24     	; 0x2a04 <udd_ep_run+0x108>
    29ec:	f7 01       	movw	r30, r14
    29ee:	ee 0f       	add	r30, r30
    29f0:	ff 1f       	adc	r31, r31
    29f2:	ee 0f       	add	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	ee 0f       	add	r30, r30
    29f8:	ff 1f       	adc	r31, r31
    29fa:	e0 59       	subi	r30, 0x90	; 144
    29fc:	fc 4d       	sbci	r31, 0xDC	; 220
    29fe:	12 8e       	std	Z+26, r1	; 0x1a
    2a00:	13 8e       	std	Z+27, r1	; 0x1b
    2a02:	2f c0       	rjmp	.+94     	; 0x2a62 <udd_ep_run+0x166>
    2a04:	f7 01       	movw	r30, r14
    2a06:	ee 0f       	add	r30, r30
    2a08:	ff 1f       	adc	r31, r31
    2a0a:	ee 0f       	add	r30, r30
    2a0c:	ff 1f       	adc	r31, r31
    2a0e:	ee 0f       	add	r30, r30
    2a10:	ff 1f       	adc	r31, r31
    2a12:	e0 59       	subi	r30, 0x90	; 144
    2a14:	fc 4d       	sbci	r31, 0xDC	; 220
    2a16:	85 89       	ldd	r24, Z+21	; 0x15
    2a18:	80 7c       	andi	r24, 0xC0	; 192
    2a1a:	80 3c       	cpi	r24, 0xC0	; 192
    2a1c:	a9 f4       	brne	.+42     	; 0x2a48 <udd_ep_run+0x14c>
    2a1e:	c7 01       	movw	r24, r14
    2a20:	88 0f       	add	r24, r24
    2a22:	99 1f       	adc	r25, r25
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	8c 57       	subi	r24, 0x7C	; 124
    2a2e:	9c 4d       	sbci	r25, 0xDC	; 220
    2a30:	94 db       	rcall	.-2264   	; 0x215a <udd_ep_get_size>
    2a32:	bc 01       	movw	r22, r24
    2a34:	c5 01       	movw	r24, r10
    2a36:	b2 d2       	rcall	.+1380   	; 0x2f9c <__udivmodhi4>
    2a38:	89 2b       	or	r24, r25
    2a3a:	31 f0       	breq	.+12     	; 0x2a48 <udd_ep_run+0x14c>
    2a3c:	f6 01       	movw	r30, r12
    2a3e:	80 81       	ld	r24, Z
    2a40:	8e 7f       	andi	r24, 0xFE	; 254
    2a42:	80 83       	st	Z, r24
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	14 c0       	rjmp	.+40     	; 0x2a70 <udd_ep_run+0x174>
    2a48:	f7 01       	movw	r30, r14
    2a4a:	ee 0f       	add	r30, r30
    2a4c:	ff 1f       	adc	r31, r31
    2a4e:	ee 0f       	add	r30, r30
    2a50:	ff 1f       	adc	r31, r31
    2a52:	ee 0f       	add	r30, r30
    2a54:	ff 1f       	adc	r31, r31
    2a56:	e0 59       	subi	r30, 0x90	; 144
    2a58:	fc 4d       	sbci	r31, 0xDC	; 220
    2a5a:	16 8a       	std	Z+22, r1	; 0x16
    2a5c:	17 8a       	std	Z+23, r1	; 0x17
    2a5e:	12 8e       	std	Z+26, r1	; 0x1a
    2a60:	13 8e       	std	Z+27, r1	; 0x1b
    2a62:	87 2d       	mov	r24, r7
    2a64:	2e dc       	rcall	.-1956   	; 0x22c2 <udd_ep_trans_complet>
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	03 c0       	rjmp	.+6      	; 0x2a70 <udd_ep_run+0x174>
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	01 c0       	rjmp	.+2      	; 0x2a70 <udd_ep_run+0x174>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	0f 90       	pop	r0
    2a72:	df 91       	pop	r29
    2a74:	cf 91       	pop	r28
    2a76:	1f 91       	pop	r17
    2a78:	0f 91       	pop	r16
    2a7a:	ff 90       	pop	r15
    2a7c:	ef 90       	pop	r14
    2a7e:	df 90       	pop	r13
    2a80:	cf 90       	pop	r12
    2a82:	bf 90       	pop	r11
    2a84:	af 90       	pop	r10
    2a86:	9f 90       	pop	r9
    2a88:	8f 90       	pop	r8
    2a8a:	7f 90       	pop	r7
    2a8c:	6f 90       	pop	r6
    2a8e:	08 95       	ret

00002a90 <udd_ep_abort>:
    2a90:	ff 92       	push	r15
    2a92:	0f 93       	push	r16
    2a94:	1f 93       	push	r17
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	18 2f       	mov	r17, r24
    2a9c:	c8 2f       	mov	r28, r24
    2a9e:	cf 70       	andi	r28, 0x0F	; 15
    2aa0:	d0 e0       	ldi	r29, 0x00	; 0
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	88 0f       	add	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	c1 2f       	mov	r28, r17
    2aaa:	01 2e       	mov	r0, r17
    2aac:	00 0c       	add	r0, r0
    2aae:	dd 0b       	sbc	r29, r29
    2ab0:	cc 27       	eor	r28, r28
    2ab2:	dd 0f       	add	r29, r29
    2ab4:	cc 1f       	adc	r28, r28
    2ab6:	dd 27       	eor	r29, r29
    2ab8:	c8 0f       	add	r28, r24
    2aba:	d9 1f       	adc	r29, r25
    2abc:	81 2f       	mov	r24, r17
    2abe:	75 db       	rcall	.-2326   	; 0x21aa <udd_ep_get_job>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	ee 0f       	add	r30, r30
    2ac6:	ff 1f       	adc	r31, r31
    2ac8:	ee 0f       	add	r30, r30
    2aca:	ff 1f       	adc	r31, r31
    2acc:	ee 0f       	add	r30, r30
    2ace:	ff 1f       	adc	r31, r31
    2ad0:	ec 57       	subi	r30, 0x7C	; 124
    2ad2:	fc 4d       	sbci	r31, 0xDC	; 220
    2ad4:	02 e0       	ldi	r16, 0x02	; 2
    2ad6:	05 93       	las	Z, r16
    2ad8:	8c 91       	ld	r24, X
    2ada:	80 ff       	sbrs	r24, 0
    2adc:	22 c0       	rjmp	.+68     	; 0x2b22 <udd_ep_abort+0x92>
    2ade:	8e 7f       	andi	r24, 0xFE	; 254
    2ae0:	8c 93       	st	X, r24
    2ae2:	17 96       	adiw	r26, 0x07	; 7
    2ae4:	ed 91       	ld	r30, X+
    2ae6:	fc 91       	ld	r31, X
    2ae8:	18 97       	sbiw	r26, 0x08	; 8
    2aea:	30 97       	sbiw	r30, 0x00	; 0
    2aec:	d1 f0       	breq	.+52     	; 0x2b22 <udd_ep_abort+0x92>
    2aee:	11 23       	and	r17, r17
    2af0:	5c f4       	brge	.+22     	; 0x2b08 <udd_ep_abort+0x78>
    2af2:	cc 0f       	add	r28, r28
    2af4:	dd 1f       	adc	r29, r29
    2af6:	cc 0f       	add	r28, r28
    2af8:	dd 1f       	adc	r29, r29
    2afa:	cc 0f       	add	r28, r28
    2afc:	dd 1f       	adc	r29, r29
    2afe:	c0 59       	subi	r28, 0x90	; 144
    2b00:	dc 4d       	sbci	r29, 0xDC	; 220
    2b02:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b04:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b06:	0a c0       	rjmp	.+20     	; 0x2b1c <udd_ep_abort+0x8c>
    2b08:	cc 0f       	add	r28, r28
    2b0a:	dd 1f       	adc	r29, r29
    2b0c:	cc 0f       	add	r28, r28
    2b0e:	dd 1f       	adc	r29, r29
    2b10:	cc 0f       	add	r28, r28
    2b12:	dd 1f       	adc	r29, r29
    2b14:	c0 59       	subi	r28, 0x90	; 144
    2b16:	dc 4d       	sbci	r29, 0xDC	; 220
    2b18:	6e 89       	ldd	r22, Y+22	; 0x16
    2b1a:	7f 89       	ldd	r23, Y+23	; 0x17
    2b1c:	41 2f       	mov	r20, r17
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	19 95       	eicall
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	ff 90       	pop	r15
    2b2c:	08 95       	ret

00002b2e <udd_ep_free>:
    2b2e:	cf 93       	push	r28
    2b30:	c8 2f       	mov	r28, r24
    2b32:	ae df       	rcall	.-164    	; 0x2a90 <udd_ep_abort>
    2b34:	ec 2f       	mov	r30, r28
    2b36:	ef 70       	andi	r30, 0x0F	; 15
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	ee 0f       	add	r30, r30
    2b3c:	ff 1f       	adc	r31, r31
    2b3e:	8c 2f       	mov	r24, r28
    2b40:	cc 0f       	add	r28, r28
    2b42:	99 0b       	sbc	r25, r25
    2b44:	88 27       	eor	r24, r24
    2b46:	99 0f       	add	r25, r25
    2b48:	88 1f       	adc	r24, r24
    2b4a:	99 27       	eor	r25, r25
    2b4c:	e8 0f       	add	r30, r24
    2b4e:	f9 1f       	adc	r31, r25
    2b50:	ee 0f       	add	r30, r30
    2b52:	ff 1f       	adc	r31, r31
    2b54:	ee 0f       	add	r30, r30
    2b56:	ff 1f       	adc	r31, r31
    2b58:	ee 0f       	add	r30, r30
    2b5a:	ff 1f       	adc	r31, r31
    2b5c:	e0 59       	subi	r30, 0x90	; 144
    2b5e:	fc 4d       	sbci	r31, 0xDC	; 220
    2b60:	15 8a       	std	Z+21, r1	; 0x15
    2b62:	cf 91       	pop	r28
    2b64:	08 95       	ret

00002b66 <udd_ep_set_halt>:
    2b66:	e8 2f       	mov	r30, r24
    2b68:	ef 70       	andi	r30, 0x0F	; 15
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	ee 0f       	add	r30, r30
    2b6e:	ff 1f       	adc	r31, r31
    2b70:	28 2f       	mov	r18, r24
    2b72:	08 2e       	mov	r0, r24
    2b74:	00 0c       	add	r0, r0
    2b76:	33 0b       	sbc	r19, r19
    2b78:	22 27       	eor	r18, r18
    2b7a:	33 0f       	add	r19, r19
    2b7c:	22 1f       	adc	r18, r18
    2b7e:	33 27       	eor	r19, r19
    2b80:	e2 0f       	add	r30, r18
    2b82:	f3 1f       	adc	r31, r19
    2b84:	ee 0f       	add	r30, r30
    2b86:	ff 1f       	adc	r31, r31
    2b88:	ee 0f       	add	r30, r30
    2b8a:	ff 1f       	adc	r31, r31
    2b8c:	ee 0f       	add	r30, r30
    2b8e:	ff 1f       	adc	r31, r31
    2b90:	e0 59       	subi	r30, 0x90	; 144
    2b92:	fc 4d       	sbci	r31, 0xDC	; 220
    2b94:	95 89       	ldd	r25, Z+21	; 0x15
    2b96:	94 60       	ori	r25, 0x04	; 4
    2b98:	95 8b       	std	Z+21, r25	; 0x15
    2b9a:	7a df       	rcall	.-268    	; 0x2a90 <udd_ep_abort>
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	08 95       	ret

00002ba0 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2ba0:	1f 92       	push	r1
    2ba2:	0f 92       	push	r0
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	0f 92       	push	r0
    2ba8:	11 24       	eor	r1, r1
    2baa:	0b b6       	in	r0, 0x3b	; 59
    2bac:	0f 92       	push	r0
    2bae:	0f 93       	push	r16
    2bb0:	2f 93       	push	r18
    2bb2:	3f 93       	push	r19
    2bb4:	4f 93       	push	r20
    2bb6:	5f 93       	push	r21
    2bb8:	6f 93       	push	r22
    2bba:	7f 93       	push	r23
    2bbc:	8f 93       	push	r24
    2bbe:	9f 93       	push	r25
    2bc0:	af 93       	push	r26
    2bc2:	bf 93       	push	r27
    2bc4:	cf 93       	push	r28
    2bc6:	ef 93       	push	r30
    2bc8:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2bca:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2bce:	88 23       	and	r24, r24
    2bd0:	3c f4       	brge	.+14     	; 0x2be0 <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    2bd2:	80 e8       	ldi	r24, 0x80	; 128
    2bd4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    2bd8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2bdc:	b3 d1       	rcall	.+870    	; 0x2f44 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2bde:	89 c0       	rjmp	.+274    	; 0x2cf2 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2be0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2be4:	82 ff       	sbrs	r24, 2
    2be6:	20 c0       	rjmp	.+64     	; 0x2c28 <__vector_125+0x88>
		udd_ack_underflow_event();
    2be8:	84 e0       	ldi	r24, 0x04	; 4
    2bea:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    2bee:	80 91 8c 23 	lds	r24, 0x238C	; 0x80238c <udd_sram+0x1c>
    2bf2:	86 ff       	sbrs	r24, 6
    2bf4:	7e c0       	rjmp	.+252    	; 0x2cf2 <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2bf6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2bfa:	81 fd       	sbrc	r24, 1
    2bfc:	7a c0       	rjmp	.+244    	; 0x2cf2 <__vector_125+0x152>
    2bfe:	f0 da       	rcall	.-2592   	; 0x21e0 <udd_ctrl_interrupt_tc_setup>
    2c00:	81 11       	cpse	r24, r1
    2c02:	77 c0       	rjmp	.+238    	; 0x2cf2 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2c04:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <udd_ep_control_state>
    2c08:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2c0a:	11 f4       	brne	.+4      	; 0x2c10 <__vector_125+0x70>
    2c0c:	24 da       	rcall	.-3000   	; 0x2056 <udd_ctrl_send_zlp_in>
    2c0e:	71 c0       	rjmp	.+226    	; 0x2cf2 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c10:	84 30       	cpi	r24, 0x04	; 4
    2c12:	09 f0       	breq	.+2      	; 0x2c16 <__vector_125+0x76>
    2c14:	6e c0       	rjmp	.+220    	; 0x2cf2 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2c16:	ed e8       	ldi	r30, 0x8D	; 141
    2c18:	f3 e2       	ldi	r31, 0x23	; 35
    2c1a:	04 e0       	ldi	r16, 0x04	; 4
    2c1c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c1e:	e5 e8       	ldi	r30, 0x85	; 133
    2c20:	f3 e2       	ldi	r31, 0x23	; 35
    2c22:	04 e0       	ldi	r16, 0x04	; 4
    2c24:	05 93       	las	Z, r16
    2c26:	65 c0       	rjmp	.+202    	; 0x2cf2 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2c28:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2c2c:	81 ff       	sbrs	r24, 1
    2c2e:	5c c0       	rjmp	.+184    	; 0x2ce8 <__vector_125+0x148>
		udd_ack_overflow_event();
    2c30:	82 e0       	ldi	r24, 0x02	; 2
    2c32:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    2c36:	80 91 84 23 	lds	r24, 0x2384	; 0x802384 <udd_sram+0x14>
    2c3a:	86 ff       	sbrs	r24, 6
    2c3c:	5a c0       	rjmp	.+180    	; 0x2cf2 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2c3e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2c42:	81 fd       	sbrc	r24, 1
    2c44:	56 c0       	rjmp	.+172    	; 0x2cf2 <__vector_125+0x152>
    2c46:	cc da       	rcall	.-2664   	; 0x21e0 <udd_ctrl_interrupt_tc_setup>
    2c48:	81 11       	cpse	r24, r1
    2c4a:	53 c0       	rjmp	.+166    	; 0x2cf2 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2c4c:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <udd_ep_control_state>
    2c50:	82 30       	cpi	r24, 0x02	; 2
    2c52:	41 f4       	brne	.+16     	; 0x2c64 <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2c54:	84 e0       	ldi	r24, 0x04	; 4
    2c56:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2c5a:	e4 e8       	ldi	r30, 0x84	; 132
    2c5c:	f3 e2       	ldi	r31, 0x23	; 35
    2c5e:	02 e0       	ldi	r16, 0x02	; 2
    2c60:	06 93       	lac	Z, r16
    2c62:	47 c0       	rjmp	.+142    	; 0x2cf2 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2c64:	83 30       	cpi	r24, 0x03	; 3
    2c66:	09 f0       	breq	.+2      	; 0x2c6a <__vector_125+0xca>
    2c68:	44 c0       	rjmp	.+136    	; 0x2cf2 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2c6a:	ed e8       	ldi	r30, 0x8D	; 141
    2c6c:	f3 e2       	ldi	r31, 0x23	; 35
    2c6e:	04 e0       	ldi	r16, 0x04	; 4
    2c70:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c72:	e5 e8       	ldi	r30, 0x85	; 133
    2c74:	f3 e2       	ldi	r31, 0x23	; 35
    2c76:	04 e0       	ldi	r16, 0x04	; 4
    2c78:	05 93       	las	Z, r16
    2c7a:	3b c0       	rjmp	.+118    	; 0x2cf2 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2c7c:	80 e1       	ldi	r24, 0x10	; 16
    2c7e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2c82:	c1 e0       	ldi	r28, 0x01	; 1
    2c84:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    2c86:	04 df       	rcall	.-504    	; 0x2a90 <udd_ep_abort>
    2c88:	8c 2f       	mov	r24, r28
    2c8a:	80 68       	ori	r24, 0x80	; 128
    2c8c:	01 df       	rcall	.-510    	; 0x2a90 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    2c8e:	cf 5f       	subi	r28, 0xFF	; 255
    2c90:	c5 30       	cpi	r28, 0x05	; 5
    2c92:	c1 f7       	brne	.-16     	; 0x2c84 <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2c94:	0e 94 b8 0c 	call	0x1970	; 0x1970 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2c98:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2c9c:	e0 e7       	ldi	r30, 0x70	; 112
    2c9e:	f3 e2       	ldi	r31, 0x23	; 35
    2ca0:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2ca2:	96 e0       	ldi	r25, 0x06	; 6
    2ca4:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2ca6:	80 e4       	ldi	r24, 0x40	; 64
    2ca8:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2caa:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2cac:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2cae:	85 8f       	std	Z+29, r24	; 0x1d
    2cb0:	83 e6       	ldi	r24, 0x63	; 99
    2cb2:	93 e2       	ldi	r25, 0x23	; 35
    2cb4:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    2cb6:	91 8f       	std	Z+25, r25	; 0x19
    2cb8:	9b d9       	rcall	.-3274   	; 0x1ff0 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2cba:	1b c0       	rjmp	.+54     	; 0x2cf2 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    2cbc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    2cc0:	86 ff       	sbrs	r24, 6
    2cc2:	07 c0       	rjmp	.+14     	; 0x2cd2 <__vector_125+0x132>
    2cc4:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2cc6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2cca:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2ccc:	59 d9       	rcall	.-3406   	; 0x1f80 <udd_sleep_mode>
    2cce:	38 d1       	rcall	.+624    	; 0x2f40 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2cd0:	10 c0       	rjmp	.+32     	; 0x2cf2 <__vector_125+0x152>
    2cd2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    2cd6:	85 ff       	sbrs	r24, 5
    2cd8:	0c c0       	rjmp	.+24     	; 0x2cf2 <__vector_125+0x152>
    2cda:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    2cdc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2ce2:	4e d9       	rcall	.-3428   	; 0x1f80 <udd_sleep_mode>
    2ce4:	2e d1       	rcall	.+604    	; 0x2f42 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2ce6:	05 c0       	rjmp	.+10     	; 0x2cf2 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2ce8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2cec:	84 fd       	sbrc	r24, 4
    2cee:	c6 cf       	rjmp	.-116    	; 0x2c7c <__vector_125+0xdc>
    2cf0:	e5 cf       	rjmp	.-54     	; 0x2cbc <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2cf2:	ff 91       	pop	r31
    2cf4:	ef 91       	pop	r30
    2cf6:	cf 91       	pop	r28
    2cf8:	bf 91       	pop	r27
    2cfa:	af 91       	pop	r26
    2cfc:	9f 91       	pop	r25
    2cfe:	8f 91       	pop	r24
    2d00:	7f 91       	pop	r23
    2d02:	6f 91       	pop	r22
    2d04:	5f 91       	pop	r21
    2d06:	4f 91       	pop	r20
    2d08:	3f 91       	pop	r19
    2d0a:	2f 91       	pop	r18
    2d0c:	0f 91       	pop	r16
    2d0e:	0f 90       	pop	r0
    2d10:	0b be       	out	0x3b, r0	; 59
    2d12:	0f 90       	pop	r0
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	0f 90       	pop	r0
    2d18:	1f 90       	pop	r1
    2d1a:	18 95       	reti

00002d1c <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2d1c:	1f 92       	push	r1
    2d1e:	0f 92       	push	r0
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	0f 92       	push	r0
    2d24:	11 24       	eor	r1, r1
    2d26:	0b b6       	in	r0, 0x3b	; 59
    2d28:	0f 92       	push	r0
    2d2a:	0f 93       	push	r16
    2d2c:	1f 93       	push	r17
    2d2e:	2f 93       	push	r18
    2d30:	3f 93       	push	r19
    2d32:	4f 93       	push	r20
    2d34:	5f 93       	push	r21
    2d36:	6f 93       	push	r22
    2d38:	7f 93       	push	r23
    2d3a:	8f 93       	push	r24
    2d3c:	9f 93       	push	r25
    2d3e:	af 93       	push	r26
    2d40:	bf 93       	push	r27
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	ef 93       	push	r30
    2d48:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2d4a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2d4e:	81 fd       	sbrc	r24, 1
    2d50:	03 c0       	rjmp	.+6      	; 0x2d58 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2d52:	46 da       	rcall	.-2932   	; 0x21e0 <udd_ctrl_interrupt_tc_setup>
    2d54:	81 11       	cpse	r24, r1
    2d56:	c3 c0       	rjmp	.+390    	; 0x2ede <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2d58:	82 e0       	ldi	r24, 0x02	; 2
    2d5a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2d5e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2d62:	81 95       	neg	r24
    2d64:	88 0f       	add	r24, r24
    2d66:	e4 e8       	ldi	r30, 0x84	; 132
    2d68:	f3 e2       	ldi	r31, 0x23	; 35
    2d6a:	e8 1b       	sub	r30, r24
    2d6c:	f1 09       	sbc	r31, r1
    2d6e:	20 81       	ld	r18, Z
    2d70:	31 81       	ldd	r19, Z+1	; 0x01
    2d72:	24 58       	subi	r18, 0x84	; 132
    2d74:	33 42       	sbci	r19, 0x23	; 35
    2d76:	36 95       	lsr	r19
    2d78:	27 95       	ror	r18
    2d7a:	36 95       	lsr	r19
    2d7c:	27 95       	ror	r18
    2d7e:	36 95       	lsr	r19
    2d80:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2d82:	82 2f       	mov	r24, r18
    2d84:	86 95       	lsr	r24
    2d86:	20 fd       	sbrc	r18, 0
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <__vector_126+0x72>
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	01 c0       	rjmp	.+2      	; 0x2d90 <__vector_126+0x74>
    2d8e:	90 e8       	ldi	r25, 0x80	; 128
    2d90:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2d92:	e8 2f       	mov	r30, r24
    2d94:	ef 70       	andi	r30, 0x0F	; 15
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	ee 0f       	add	r30, r30
    2d9a:	ff 1f       	adc	r31, r31
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	08 2e       	mov	r0, r24
    2da0:	00 0c       	add	r0, r0
    2da2:	33 0b       	sbc	r19, r19
    2da4:	22 27       	eor	r18, r18
    2da6:	33 0f       	add	r19, r19
    2da8:	22 1f       	adc	r18, r18
    2daa:	33 27       	eor	r19, r19
    2dac:	e2 0f       	add	r30, r18
    2dae:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2db0:	df 01       	movw	r26, r30
    2db2:	aa 0f       	add	r26, r26
    2db4:	bb 1f       	adc	r27, r27
    2db6:	aa 0f       	add	r26, r26
    2db8:	bb 1f       	adc	r27, r27
    2dba:	aa 0f       	add	r26, r26
    2dbc:	bb 1f       	adc	r27, r27
    2dbe:	a0 59       	subi	r26, 0x90	; 144
    2dc0:	bc 4d       	sbci	r27, 0xDC	; 220
    2dc2:	54 96       	adiw	r26, 0x14	; 20
    2dc4:	9c 91       	ld	r25, X
    2dc6:	95 ff       	sbrs	r25, 5
    2dc8:	8a c0       	rjmp	.+276    	; 0x2ede <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2dca:	ee 0f       	add	r30, r30
    2dcc:	ff 1f       	adc	r31, r31
    2dce:	ee 0f       	add	r30, r30
    2dd0:	ff 1f       	adc	r31, r31
    2dd2:	ee 0f       	add	r30, r30
    2dd4:	ff 1f       	adc	r31, r31
    2dd6:	ec 57       	subi	r30, 0x7C	; 124
    2dd8:	fc 4d       	sbci	r31, 0xDC	; 220
    2dda:	00 e2       	ldi	r16, 0x20	; 32
    2ddc:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2dde:	81 11       	cpse	r24, r1
    2de0:	79 c0       	rjmp	.+242    	; 0x2ed4 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2de2:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <udd_ep_control_state>
    2de6:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2de8:	19 f4       	brne	.+6      	; 0x2df0 <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2dea:	43 d9       	rcall	.-3450   	; 0x2072 <udd_ctrl_endofrequest>
    2dec:	01 d9       	rcall	.-3582   	; 0x1ff0 <udd_ctrl_init>
    2dee:	77 c0       	rjmp	.+238    	; 0x2ede <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2df0:	00 91 86 23 	lds	r16, 0x2386	; 0x802386 <udd_sram+0x16>
    2df4:	10 91 87 23 	lds	r17, 0x2387	; 0x802387 <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2df8:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0xa>
    2dfc:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0xb>
    2e00:	c0 91 6b 23 	lds	r28, 0x236B	; 0x80236b <udd_ctrl_payload_nb_trans>
    2e04:	d0 91 6c 23 	lds	r29, 0x236C	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    2e08:	98 01       	movw	r18, r16
    2e0a:	2c 0f       	add	r18, r28
    2e0c:	3d 1f       	adc	r19, r29
    2e0e:	82 17       	cp	r24, r18
    2e10:	93 07       	cpc	r25, r19
    2e12:	18 f4       	brcc	.+6      	; 0x2e1a <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2e14:	8c 01       	movw	r16, r24
    2e16:	0c 1b       	sub	r16, r28
    2e18:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2e1a:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x8>
    2e1e:	90 91 eb 23 	lds	r25, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x9>
    2e22:	a8 01       	movw	r20, r16
    2e24:	63 e6       	ldi	r22, 0x63	; 99
    2e26:	73 e2       	ldi	r23, 0x23	; 35
    2e28:	8c 0f       	add	r24, r28
    2e2a:	9d 1f       	adc	r25, r29
    2e2c:	d3 d0       	rcall	.+422    	; 0x2fd4 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2e2e:	c0 0f       	add	r28, r16
    2e30:	d1 1f       	adc	r29, r17
    2e32:	c0 93 6b 23 	sts	0x236B, r28	; 0x80236b <udd_ctrl_payload_nb_trans>
    2e36:	d0 93 6c 23 	sts	0x236C, r29	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2e3a:	08 30       	cpi	r16, 0x08	; 8
    2e3c:	11 05       	cpc	r17, r1
    2e3e:	69 f4       	brne	.+26     	; 0x2e5a <__vector_126+0x13e>
    2e40:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
    2e44:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    2e48:	8c 0f       	add	r24, r28
    2e4a:	9d 1f       	adc	r25, r29
    2e4c:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    2e50:	30 91 e9 23 	lds	r19, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    2e54:	82 17       	cp	r24, r18
    2e56:	93 07       	cpc	r25, r19
    2e58:	80 f0       	brcs	.+32     	; 0x2e7a <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2e5a:	e2 ee       	ldi	r30, 0xE2	; 226
    2e5c:	f3 e2       	ldi	r31, 0x23	; 35
    2e5e:	c2 87       	std	Z+10, r28	; 0x0a
    2e60:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2e62:	06 84       	ldd	r0, Z+14	; 0x0e
    2e64:	f7 85       	ldd	r31, Z+15	; 0x0f
    2e66:	e0 2d       	mov	r30, r0
    2e68:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2e6a:	29 f0       	breq	.+10     	; 0x2e76 <__vector_126+0x15a>
    2e6c:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2e6e:	81 11       	cpse	r24, r1
    2e70:	02 c0       	rjmp	.+4      	; 0x2e76 <__vector_126+0x15a>
    2e72:	e3 d8       	rcall	.-3642   	; 0x203a <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2e74:	34 c0       	rjmp	.+104    	; 0x2ede <__vector_126+0x1c2>
    2e76:	ef d8       	rcall	.-3618   	; 0x2056 <udd_ctrl_send_zlp_in>
    2e78:	32 c0       	rjmp	.+100    	; 0x2ede <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2e7a:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0xa>
    2e7e:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0xb>
    2e82:	c8 17       	cp	r28, r24
    2e84:	d9 07       	cpc	r29, r25
    2e86:	f9 f4       	brne	.+62     	; 0x2ec6 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2e88:	e0 91 f0 23 	lds	r30, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xe>
    2e8c:	f0 91 f1 23 	lds	r31, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xf>
    2e90:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2e92:	11 f4       	brne	.+4      	; 0x2e98 <__vector_126+0x17c>
    2e94:	d2 d8       	rcall	.-3676   	; 0x203a <udd_ctrl_stall_data>
    2e96:	23 c0       	rjmp	.+70     	; 0x2ede <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2e98:	19 95       	eicall
    2e9a:	81 11       	cpse	r24, r1
    2e9c:	02 c0       	rjmp	.+4      	; 0x2ea2 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2e9e:	cd d8       	rcall	.-3686   	; 0x203a <udd_ctrl_stall_data>
    2ea0:	1e c0       	rjmp	.+60     	; 0x2ede <__vector_126+0x1c2>
    2ea2:	20 91 6d 23 	lds	r18, 0x236D	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2ea6:	30 91 6e 23 	lds	r19, 0x236E	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    2eaa:	80 91 6b 23 	lds	r24, 0x236B	; 0x80236b <udd_ctrl_payload_nb_trans>
    2eae:	90 91 6c 23 	lds	r25, 0x236C	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    2eb2:	82 0f       	add	r24, r18
    2eb4:	93 1f       	adc	r25, r19
    2eb6:	80 93 6d 23 	sts	0x236D, r24	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
    2eba:	90 93 6e 23 	sts	0x236E, r25	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    2ebe:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2ec2:	10 92 6c 23 	sts	0x236C, r1	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    2ec6:	e4 e8       	ldi	r30, 0x84	; 132
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2ec8:	f3 e2       	ldi	r31, 0x23	; 35
    2eca:	02 e0       	ldi	r16, 0x02	; 2
    2ecc:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2ece:	00 e2       	ldi	r16, 0x20	; 32
    2ed0:	06 93       	lac	Z, r16
    2ed2:	05 c0       	rjmp	.+10     	; 0x2ede <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2ed4:	80 38       	cpi	r24, 0x80	; 128
    2ed6:	11 f4       	brne	.+4      	; 0x2edc <__vector_126+0x1c0>
		udd_ctrl_in_sent();
    2ed8:	d4 d8       	rcall	.-3672   	; 0x2082 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2eda:	01 c0       	rjmp	.+2      	; 0x2ede <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2edc:	f2 d9       	rcall	.-3100   	; 0x22c2 <udd_ep_trans_complet>
    2ede:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2ee0:	ef 91       	pop	r30
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	bf 91       	pop	r27
    2ee8:	af 91       	pop	r26
    2eea:	9f 91       	pop	r25
    2eec:	8f 91       	pop	r24
    2eee:	7f 91       	pop	r23
    2ef0:	6f 91       	pop	r22
    2ef2:	5f 91       	pop	r21
    2ef4:	4f 91       	pop	r20
    2ef6:	3f 91       	pop	r19
    2ef8:	2f 91       	pop	r18
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	0f 90       	pop	r0
    2f00:	0b be       	out	0x3b, r0	; 59
    2f02:	0f 90       	pop	r0
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	0f 90       	pop	r0
    2f08:	1f 90       	pop	r1
    2f0a:	18 95       	reti

00002f0c <main>:
static const uint8_t startupSequence = 1;
static const uint8_t idleSequence    = 8;

int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    2f0c:	87 e0       	ldi	r24, 0x07	; 7
    2f0e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    2f12:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2f14:	ec ed       	ldi	r30, 0xDC	; 220
    2f16:	f3 e2       	ldi	r31, 0x23	; 35
    2f18:	10 82       	st	Z, r1
    2f1a:	11 82       	std	Z+1, r1	; 0x01
    2f1c:	12 82       	std	Z+2, r1	; 0x02
    2f1e:	13 82       	std	Z+3, r1	; 0x03
    2f20:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    2f26:	0e 94 24 09 	call	0x1248	; 0x1248 <sysclk_init>

	io_ui_process(); // initializes board i/o pins
    2f2a:	0e 94 cc 08 	call	0x1198	; 0x1198 <io_ui_process>

	udc_start();               // starts USB device controller
    2f2e:	0e 94 b6 0c 	call	0x196c	; 0x196c <udc_start>

	startup_ui_process(startupSequence);
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	0e 94 ce 08 	call	0x119c	; 0x119c <startup_ui_process>
	idle_ui_process(idleSequence);
    2f38:	88 e0       	ldi	r24, 0x08	; 8
    2f3a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <idle_ui_process>
    2f3e:	ff cf       	rjmp	.-2      	; 0x2f3e <main+0x32>

00002f40 <main_suspend_action>:
}

/* --------------------------------------------------------------------- */
/* -------------------------------- USB -------------------------------- */
/* --------------------------------------------------------------------- */
void main_suspend_action(void) { }
    2f40:	08 95       	ret

00002f42 <main_resume_action>:
void main_resume_action(void) { }
    2f42:	08 95       	ret

00002f44 <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    2f44:	80 91 db 23 	lds	r24, 0x23DB	; 0x8023db <main_b_kbd_enable>
    2f48:	88 23       	and	r24, r24
    2f4a:	81 f0       	breq	.+32     	; 0x2f6c <main_sof_action+0x28>
	return;
	kbd_ui_process();
    2f4c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <kbd_ui_process>

	if (!main_b_generic_enable)
    2f50:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <main_b_generic_enable>
    2f54:	88 23       	and	r24, r24
    2f56:	51 f0       	breq	.+20     	; 0x2f6c <main_sof_action+0x28>
		return;
	jstk_ui_process();
    2f58:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <jstk_ui_process>

	if (!main_b_led_enable)
    2f5c:	80 91 d9 23 	lds	r24, 0x23D9	; 0x8023d9 <main_b_led_enable>
    2f60:	88 23       	and	r24, r24
    2f62:	21 f0       	breq	.+8      	; 0x2f6c <main_sof_action+0x28>
		return;

	gui_ui_process();
    2f64:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <gui_ui_process>
	status_ui_process();
    2f68:	0c 94 04 09 	jmp	0x1208	; 0x1208 <status_ui_process>
    2f6c:	08 95       	ret

00002f6e <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2f6e:	08 95       	ret

00002f70 <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2f70:	08 95       	ret

00002f72 <main_kbd_enable>:

/* --------------------------------------------------------------------- */
/* ----------------------------- keyboard ------------------------------ */
/* --------------------------------------------------------------------- */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	80 93 db 23 	sts	0x23DB, r24	; 0x8023db <main_b_kbd_enable>
	return true;
}
    2f78:	08 95       	ret

00002f7a <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2f7a:	10 92 db 23 	sts	0x23DB, r1	; 0x8023db <main_b_kbd_enable>
    2f7e:	08 95       	ret

00002f80 <main_generic_enable>:

/* --------------------------------------------------------------------- */
/* ----------------------------- joystick ------------------------------ */
/* --------------------------------------------------------------------- */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	80 93 da 23 	sts	0x23DA, r24	; 0x8023da <main_b_generic_enable>
	return true;
}
    2f86:	08 95       	ret

00002f88 <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2f88:	10 92 da 23 	sts	0x23DA, r1	; 0x8023da <main_b_generic_enable>
    2f8c:	08 95       	ret

00002f8e <main_led_enable>:

/* --------------------------------------------------------------------- */
/* ------------------------------- LEDs -------------------------------- */
/* --------------------------------------------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	80 93 d9 23 	sts	0x23D9, r24	; 0x8023d9 <main_b_led_enable>
	return true;
}
    2f94:	08 95       	ret

00002f96 <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2f96:	10 92 d9 23 	sts	0x23D9, r1	; 0x8023d9 <main_b_led_enable>
    2f9a:	08 95       	ret

00002f9c <__udivmodhi4>:
    2f9c:	aa 1b       	sub	r26, r26
    2f9e:	bb 1b       	sub	r27, r27
    2fa0:	51 e1       	ldi	r21, 0x11	; 17
    2fa2:	07 c0       	rjmp	.+14     	; 0x2fb2 <__udivmodhi4_ep>

00002fa4 <__udivmodhi4_loop>:
    2fa4:	aa 1f       	adc	r26, r26
    2fa6:	bb 1f       	adc	r27, r27
    2fa8:	a6 17       	cp	r26, r22
    2faa:	b7 07       	cpc	r27, r23
    2fac:	10 f0       	brcs	.+4      	; 0x2fb2 <__udivmodhi4_ep>
    2fae:	a6 1b       	sub	r26, r22
    2fb0:	b7 0b       	sbc	r27, r23

00002fb2 <__udivmodhi4_ep>:
    2fb2:	88 1f       	adc	r24, r24
    2fb4:	99 1f       	adc	r25, r25
    2fb6:	5a 95       	dec	r21
    2fb8:	a9 f7       	brne	.-22     	; 0x2fa4 <__udivmodhi4_loop>
    2fba:	80 95       	com	r24
    2fbc:	90 95       	com	r25
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	08 95       	ret

00002fc4 <__tablejump2__>:
    2fc4:	ee 0f       	add	r30, r30
    2fc6:	ff 1f       	adc	r31, r31
    2fc8:	88 1f       	adc	r24, r24
    2fca:	8b bf       	out	0x3b, r24	; 59
    2fcc:	07 90       	elpm	r0, Z+
    2fce:	f6 91       	elpm	r31, Z
    2fd0:	e0 2d       	mov	r30, r0
    2fd2:	19 94       	eijmp

00002fd4 <memcpy>:
    2fd4:	fb 01       	movw	r30, r22
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	02 c0       	rjmp	.+4      	; 0x2fde <memcpy+0xa>
    2fda:	01 90       	ld	r0, Z+
    2fdc:	0d 92       	st	X+, r0
    2fde:	41 50       	subi	r20, 0x01	; 1
    2fe0:	50 40       	sbci	r21, 0x00	; 0
    2fe2:	d8 f7       	brcc	.-10     	; 0x2fda <memcpy+0x6>
    2fe4:	08 95       	ret

00002fe6 <_exit>:
    2fe6:	f8 94       	cli

00002fe8 <__stop_program>:
    2fe8:	ff cf       	rjmp	.-2      	; 0x2fe8 <__stop_program>
