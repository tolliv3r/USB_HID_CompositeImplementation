
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000198  00802000  00002fd0  00003064  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000025a  00802198  00802198  000031fc  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000031fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000322c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  00003270  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b95f  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000538d  00000000  00000000  0000f16f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009de1  00000000  00000000  000144fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d1c  00000000  00000000  0001e2e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036d26  00000000  00000000  0001effc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ba4  00000000  00000000  00055d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000840  00000000  00000000  000598c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd69  00000000  00000000  0005a108  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop
       4:	34 c1       	rjmp	.+616    	; 0x26e <__bad_interrupt>
       6:	00 00       	nop
       8:	32 c1       	rjmp	.+612    	; 0x26e <__bad_interrupt>
       a:	00 00       	nop
       c:	30 c1       	rjmp	.+608    	; 0x26e <__bad_interrupt>
       e:	00 00       	nop
      10:	2e c1       	rjmp	.+604    	; 0x26e <__bad_interrupt>
      12:	00 00       	nop
      14:	2c c1       	rjmp	.+600    	; 0x26e <__bad_interrupt>
      16:	00 00       	nop
      18:	2a c1       	rjmp	.+596    	; 0x26e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	28 c1       	rjmp	.+592    	; 0x26e <__bad_interrupt>
      1e:	00 00       	nop
      20:	26 c1       	rjmp	.+588    	; 0x26e <__bad_interrupt>
      22:	00 00       	nop
      24:	24 c1       	rjmp	.+584    	; 0x26e <__bad_interrupt>
      26:	00 00       	nop
      28:	22 c1       	rjmp	.+580    	; 0x26e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	20 c1       	rjmp	.+576    	; 0x26e <__bad_interrupt>
      2e:	00 00       	nop
      30:	1e c1       	rjmp	.+572    	; 0x26e <__bad_interrupt>
      32:	00 00       	nop
      34:	1c c1       	rjmp	.+568    	; 0x26e <__bad_interrupt>
      36:	00 00       	nop
      38:	1a c1       	rjmp	.+564    	; 0x26e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	18 c1       	rjmp	.+560    	; 0x26e <__bad_interrupt>
      3e:	00 00       	nop
      40:	16 c1       	rjmp	.+556    	; 0x26e <__bad_interrupt>
      42:	00 00       	nop
      44:	14 c1       	rjmp	.+552    	; 0x26e <__bad_interrupt>
      46:	00 00       	nop
      48:	12 c1       	rjmp	.+548    	; 0x26e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	10 c1       	rjmp	.+544    	; 0x26e <__bad_interrupt>
      4e:	00 00       	nop
      50:	0e c1       	rjmp	.+540    	; 0x26e <__bad_interrupt>
      52:	00 00       	nop
      54:	0c c1       	rjmp	.+536    	; 0x26e <__bad_interrupt>
      56:	00 00       	nop
      58:	0a c1       	rjmp	.+532    	; 0x26e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	08 c1       	rjmp	.+528    	; 0x26e <__bad_interrupt>
      5e:	00 00       	nop
      60:	06 c1       	rjmp	.+524    	; 0x26e <__bad_interrupt>
      62:	00 00       	nop
      64:	04 c1       	rjmp	.+520    	; 0x26e <__bad_interrupt>
      66:	00 00       	nop
      68:	02 c1       	rjmp	.+516    	; 0x26e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	00 c1       	rjmp	.+512    	; 0x26e <__bad_interrupt>
      6e:	00 00       	nop
      70:	fe c0       	rjmp	.+508    	; 0x26e <__bad_interrupt>
      72:	00 00       	nop
      74:	fc c0       	rjmp	.+504    	; 0x26e <__bad_interrupt>
      76:	00 00       	nop
      78:	fa c0       	rjmp	.+500    	; 0x26e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f8 c0       	rjmp	.+496    	; 0x26e <__bad_interrupt>
      7e:	00 00       	nop
      80:	f6 c0       	rjmp	.+492    	; 0x26e <__bad_interrupt>
      82:	00 00       	nop
      84:	f4 c0       	rjmp	.+488    	; 0x26e <__bad_interrupt>
      86:	00 00       	nop
      88:	f2 c0       	rjmp	.+484    	; 0x26e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f0 c0       	rjmp	.+480    	; 0x26e <__bad_interrupt>
      8e:	00 00       	nop
      90:	ee c0       	rjmp	.+476    	; 0x26e <__bad_interrupt>
      92:	00 00       	nop
      94:	ec c0       	rjmp	.+472    	; 0x26e <__bad_interrupt>
      96:	00 00       	nop
      98:	ea c0       	rjmp	.+468    	; 0x26e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e8 c0       	rjmp	.+464    	; 0x26e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e6 c0       	rjmp	.+460    	; 0x26e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e4 c0       	rjmp	.+456    	; 0x26e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e2 c0       	rjmp	.+452    	; 0x26e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e0 c0       	rjmp	.+448    	; 0x26e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	de c0       	rjmp	.+444    	; 0x26e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	dc c0       	rjmp	.+440    	; 0x26e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	da c0       	rjmp	.+436    	; 0x26e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d8 c0       	rjmp	.+432    	; 0x26e <__bad_interrupt>
      be:	00 00       	nop
      c0:	d6 c0       	rjmp	.+428    	; 0x26e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d4 c0       	rjmp	.+424    	; 0x26e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d2 c0       	rjmp	.+420    	; 0x26e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d0 c0       	rjmp	.+416    	; 0x26e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ce c0       	rjmp	.+412    	; 0x26e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cc c0       	rjmp	.+408    	; 0x26e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ca c0       	rjmp	.+404    	; 0x26e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c8 c0       	rjmp	.+400    	; 0x26e <__bad_interrupt>
      de:	00 00       	nop
      e0:	c6 c0       	rjmp	.+396    	; 0x26e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c4 c0       	rjmp	.+392    	; 0x26e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c2 c0       	rjmp	.+388    	; 0x26e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c0 c0       	rjmp	.+384    	; 0x26e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	be c0       	rjmp	.+380    	; 0x26e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	bc c0       	rjmp	.+376    	; 0x26e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ba c0       	rjmp	.+372    	; 0x26e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b8 c0       	rjmp	.+368    	; 0x26e <__bad_interrupt>
      fe:	00 00       	nop
     100:	b6 c0       	rjmp	.+364    	; 0x26e <__bad_interrupt>
     102:	00 00       	nop
     104:	b4 c0       	rjmp	.+360    	; 0x26e <__bad_interrupt>
     106:	00 00       	nop
     108:	b2 c0       	rjmp	.+356    	; 0x26e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b0 c0       	rjmp	.+352    	; 0x26e <__bad_interrupt>
     10e:	00 00       	nop
     110:	ae c0       	rjmp	.+348    	; 0x26e <__bad_interrupt>
     112:	00 00       	nop
     114:	ac c0       	rjmp	.+344    	; 0x26e <__bad_interrupt>
     116:	00 00       	nop
     118:	aa c0       	rjmp	.+340    	; 0x26e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a8 c0       	rjmp	.+336    	; 0x26e <__bad_interrupt>
     11e:	00 00       	nop
     120:	a6 c0       	rjmp	.+332    	; 0x26e <__bad_interrupt>
     122:	00 00       	nop
     124:	a4 c0       	rjmp	.+328    	; 0x26e <__bad_interrupt>
     126:	00 00       	nop
     128:	a2 c0       	rjmp	.+324    	; 0x26e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a0 c0       	rjmp	.+320    	; 0x26e <__bad_interrupt>
     12e:	00 00       	nop
     130:	9e c0       	rjmp	.+316    	; 0x26e <__bad_interrupt>
     132:	00 00       	nop
     134:	9c c0       	rjmp	.+312    	; 0x26e <__bad_interrupt>
     136:	00 00       	nop
     138:	9a c0       	rjmp	.+308    	; 0x26e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	98 c0       	rjmp	.+304    	; 0x26e <__bad_interrupt>
     13e:	00 00       	nop
     140:	96 c0       	rjmp	.+300    	; 0x26e <__bad_interrupt>
     142:	00 00       	nop
     144:	94 c0       	rjmp	.+296    	; 0x26e <__bad_interrupt>
     146:	00 00       	nop
     148:	92 c0       	rjmp	.+292    	; 0x26e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	90 c0       	rjmp	.+288    	; 0x26e <__bad_interrupt>
     14e:	00 00       	nop
     150:	8e c0       	rjmp	.+284    	; 0x26e <__bad_interrupt>
     152:	00 00       	nop
     154:	8c c0       	rjmp	.+280    	; 0x26e <__bad_interrupt>
     156:	00 00       	nop
     158:	8a c0       	rjmp	.+276    	; 0x26e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	88 c0       	rjmp	.+272    	; 0x26e <__bad_interrupt>
     15e:	00 00       	nop
     160:	86 c0       	rjmp	.+268    	; 0x26e <__bad_interrupt>
     162:	00 00       	nop
     164:	84 c0       	rjmp	.+264    	; 0x26e <__bad_interrupt>
     166:	00 00       	nop
     168:	82 c0       	rjmp	.+260    	; 0x26e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	80 c0       	rjmp	.+256    	; 0x26e <__bad_interrupt>
     16e:	00 00       	nop
     170:	7e c0       	rjmp	.+252    	; 0x26e <__bad_interrupt>
     172:	00 00       	nop
     174:	7c c0       	rjmp	.+248    	; 0x26e <__bad_interrupt>
     176:	00 00       	nop
     178:	7a c0       	rjmp	.+244    	; 0x26e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	78 c0       	rjmp	.+240    	; 0x26e <__bad_interrupt>
     17e:	00 00       	nop
     180:	76 c0       	rjmp	.+236    	; 0x26e <__bad_interrupt>
     182:	00 00       	nop
     184:	74 c0       	rjmp	.+232    	; 0x26e <__bad_interrupt>
     186:	00 00       	nop
     188:	72 c0       	rjmp	.+228    	; 0x26e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	70 c0       	rjmp	.+224    	; 0x26e <__bad_interrupt>
     18e:	00 00       	nop
     190:	6e c0       	rjmp	.+220    	; 0x26e <__bad_interrupt>
     192:	00 00       	nop
     194:	6c c0       	rjmp	.+216    	; 0x26e <__bad_interrupt>
     196:	00 00       	nop
     198:	6a c0       	rjmp	.+212    	; 0x26e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	68 c0       	rjmp	.+208    	; 0x26e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	66 c0       	rjmp	.+204    	; 0x26e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	64 c0       	rjmp	.+200    	; 0x26e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	62 c0       	rjmp	.+196    	; 0x26e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	60 c0       	rjmp	.+192    	; 0x26e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	5e c0       	rjmp	.+188    	; 0x26e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	5c c0       	rjmp	.+184    	; 0x26e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	5a c0       	rjmp	.+180    	; 0x26e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	58 c0       	rjmp	.+176    	; 0x26e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	56 c0       	rjmp	.+172    	; 0x26e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	54 c0       	rjmp	.+168    	; 0x26e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	52 c0       	rjmp	.+164    	; 0x26e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	50 c0       	rjmp	.+160    	; 0x26e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	4e c0       	rjmp	.+156    	; 0x26e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4c c0       	rjmp	.+152    	; 0x26e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	4a c0       	rjmp	.+148    	; 0x26e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	48 c0       	rjmp	.+144    	; 0x26e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	46 c0       	rjmp	.+140    	; 0x26e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	44 c0       	rjmp	.+136    	; 0x26e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	42 c0       	rjmp	.+132    	; 0x26e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	40 c0       	rjmp	.+128    	; 0x26e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	3e c0       	rjmp	.+124    	; 0x26e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__vector_125>
     1f8:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__vector_126>
     1fc:	8e 04       	cpc	r8, r14
     1fe:	cd 04       	cpc	r12, r13
     200:	84 04       	cpc	r8, r4
     202:	cf 04       	cpc	r12, r15
     204:	86 04       	cpc	r8, r6
     206:	88 04       	cpc	r8, r8
     208:	8a 04       	cpc	r8, r10
     20a:	8c 04       	cpc	r8, r12
     20c:	8e 04       	cpc	r8, r14
     20e:	12 06       	cpc	r1, r18
     210:	78 06       	cpc	r7, r24
     212:	d8 06       	cpc	r13, r24
     214:	38 07       	cpc	r19, r24
     216:	94 07       	cpc	r25, r20
     218:	d5 05       	cpc	r29, r5
     21a:	03 08       	sbc	r0, r3
     21c:	61 08       	sbc	r6, r1
     21e:	b3 10       	cpse	r11, r3
     220:	b6 10       	cpse	r11, r6
     222:	b9 10       	cpse	r11, r9
     224:	bc 10       	cpse	r11, r12
     226:	bf 10       	cpse	r11, r15
     228:	c2 10       	cpse	r12, r2
     22a:	c5 10       	cpse	r12, r5

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	cd bf       	out	0x3d, r28	; 61
     234:	df e5       	ldi	r29, 0x5F	; 95
     236:	de bf       	out	0x3e, r29	; 62
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	11 e2       	ldi	r17, 0x21	; 33
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e2       	ldi	r27, 0x20	; 32
     242:	e0 ed       	ldi	r30, 0xD0	; 208
     244:	ff e2       	ldi	r31, 0x2F	; 47
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a8 39       	cpi	r26, 0x98	; 152
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	23 e2       	ldi	r18, 0x23	; 35
     258:	a8 e9       	ldi	r26, 0x98	; 152
     25a:	b1 e2       	ldi	r27, 0x21	; 33
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a2 3f       	cpi	r26, 0xF2	; 242
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <main>
     26a:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <_exit>

0000026e <__bad_interrupt>:
     26e:	c8 ce       	rjmp	.-624    	; 0x0 <__vectors>

00000270 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	08 95       	ret

00000274 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     274:	30 91 e4 23 	lds	r19, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
     278:	20 91 e5 23 	lds	r18, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
     27c:	82 2f       	mov	r24, r18
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	02 97       	sbiw	r24, 0x02	; 2
     282:	c1 f4       	brne	.+48     	; 0x2b4 <udi_hid_led_setreport+0x40>
     284:	31 11       	cpse	r19, r1
     286:	18 c0       	rjmp	.+48     	; 0x2b8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     288:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
     28c:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	a1 f4       	brne	.+40     	; 0x2bc <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     294:	e2 ee       	ldi	r30, 0xE2	; 226
     296:	f3 e2       	ldi	r31, 0x23	; 35
     298:	88 e9       	ldi	r24, 0x98	; 152
     29a:	91 e2       	ldi	r25, 0x21	; 33
     29c:	80 87       	std	Z+8, r24	; 0x08
     29e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	82 87       	std	Z+10, r24	; 0x0a
     2a6:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     2a8:	83 e8       	ldi	r24, 0x83	; 131
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	84 87       	std	Z+12, r24	; 0x0c
     2ae:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	08 95       	ret
	}
	return false;
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	08 95       	ret
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	08 95       	ret
     2bc:	80 e0       	ldi	r24, 0x00	; 0
}
     2be:	08 95       	ret

000002c0 <udi_hid_led_report_in_sent>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep) {
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_led_b_report_in_free = true;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <udi_hid_led_b_report_in_free>
     2c6:	08 95       	ret

000002c8 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2cc:	03 e8       	ldi	r16, 0x83	; 131
     2ce:	11 e0       	ldi	r17, 0x01	; 1
     2d0:	21 e0       	ldi	r18, 0x01	; 1
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	48 e9       	ldi	r20, 0x98	; 152
     2d6:	51 e2       	ldi	r21, 0x21	; 33
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	0e 94 74 14 	call	0x28e8	; 0x28e8 <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
}
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	08 95       	ret

000002e6 <udi_hid_led_enable>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep);

/* --------------------------------------------------------------------- */

bool udi_hid_led_enable(void) {
     2e6:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2e8:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2ec:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <udi_hid_led_protocol>
	udi_hid_led_b_report_in_free = true;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <udi_hid_led_b_report_in_free>

	if(!udi_hid_led_report_out_enable())
     2f6:	e8 df       	rcall	.-48     	; 0x2c8 <udi_hid_led_report_out_enable>
     2f8:	c8 2f       	mov	r28, r24
     2fa:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2fc:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <main_led_enable>
	return true;
}
     300:	8c 2f       	mov	r24, r28
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     306:	81 11       	cpse	r24, r1
     308:	06 c0       	rjmp	.+12     	; 0x316 <udi_hid_led_report_out_received+0x10>
     30a:	61 30       	cpi	r22, 0x01	; 1
     30c:	71 05       	cpc	r23, r1
     30e:	19 f4       	brne	.+6      	; 0x316 <udi_hid_led_report_out_received+0x10>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     310:	88 e9       	ldi	r24, 0x98	; 152
     312:	91 e2       	ldi	r25, 0x21	; 33
     314:	6e d7       	rcall	.+3804   	; 0x11f2 <ui_led_report>
	}
	udi_hid_led_report_out_enable();
     316:	d8 cf       	rjmp	.-80     	; 0x2c8 <udi_hid_led_report_out_enable>
     318:	08 95       	ret

0000031a <udi_hid_led_disable>:
     31a:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <main_led_disable>
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     31e:	08 95       	ret

00000320 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     320:	2a e3       	ldi	r18, 0x3A	; 58
     322:	31 e0       	ldi	r19, 0x01	; 1
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	50 e2       	ldi	r21, 0x20	; 32
     328:	60 ea       	ldi	r22, 0xA0	; 160
     32a:	71 e2       	ldi	r23, 0x21	; 33
     32c:	82 ea       	ldi	r24, 0xA2	; 162
     32e:	91 e2       	ldi	r25, 0x21	; 33
     330:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     334:	08 95       	ret

00000336 <udi_hid_led_send_report_in>:
		              udi_hid_led_report_out_received);
}


bool udi_hid_led_send_report_in(uint8_t *data)
{
     336:	ff 92       	push	r15
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	1f 92       	push	r1
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	9c 01       	movw	r18, r24
	if (!udi_hid_led_b_report_in_free)
     348:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <udi_hid_led_b_report_in_free>
     34c:	88 23       	and	r24, r24
     34e:	59 f1       	breq	.+86     	; 0x3a6 <udi_hid_led_send_report_in+0x70>
     350:	d9 01       	movw	r26, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     352:	8f b7       	in	r24, 0x3f	; 63
     354:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     356:	f8 94       	cli
	return flags;
     358:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();

	memset(&udi_hid_led_report_in,
     35a:	84 e0       	ldi	r24, 0x04	; 4
     35c:	2a e9       	ldi	r18, 0x9A	; 154
     35e:	31 e2       	ldi	r19, 0x21	; 33
     360:	f9 01       	movw	r30, r18
     362:	11 92       	st	Z+, r1
     364:	8a 95       	dec	r24
     366:	e9 f7       	brne	.-6      	; 0x362 <udi_hid_led_send_report_in+0x2c>
		   0,
		   sizeof(udi_hid_led_report_in));
	memcpy(&udi_hid_led_report_in,
     368:	8d 91       	ld	r24, X+
     36a:	9d 91       	ld	r25, X+
     36c:	0d 90       	ld	r0, X+
     36e:	bc 91       	ld	r27, X
     370:	a0 2d       	mov	r26, r0
     372:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <udi_hid_led_report_in>
     376:	90 93 9b 21 	sts	0x219B, r25	; 0x80219b <udi_hid_led_report_in+0x1>
     37a:	a0 93 9c 21 	sts	0x219C, r26	; 0x80219c <udi_hid_led_report_in+0x2>
     37e:	b0 93 9d 21 	sts	0x219D, r27	; 0x80219d <udi_hid_led_report_in+0x3>
		   data,
		   sizeof(udi_hid_led_report_in));
	udi_hid_led_b_report_in_free = !udd_ep_run(UDI_HID_LED_EP_IN,
     382:	00 e6       	ldi	r16, 0x60	; 96
     384:	11 e0       	ldi	r17, 0x01	; 1
     386:	24 e0       	ldi	r18, 0x04	; 4
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	4a e9       	ldi	r20, 0x9A	; 154
     38c:	51 e2       	ldi	r21, 0x21	; 33
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	84 e8       	ldi	r24, 0x84	; 132
     392:	0e 94 74 14 	call	0x28e8	; 0x28e8 <udd_ep_run>
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	89 27       	eor	r24, r25
     39a:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <udi_hid_led_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     39e:	ff be       	out	0x3f, r15	; 63
		                                       false,
		                                       (uint8_t *) & udi_hid_led_report_in,
		                                       sizeof(udi_hid_led_report_in),
		                                       udi_hid_led_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_led_b_report_in_free;
     3a0:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <udi_hid_led_b_report_in_free>
     3a4:	89 27       	eor	r24, r25
}
     3a6:	0f 90       	pop	r0
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	ff 90       	pop	r15
     3b2:	08 95       	ret

000003b4 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     3b4:	e0 e0       	ldi	r30, 0x00	; 0
     3b6:	f6 e0       	ldi	r31, 0x06	; 6
     3b8:	9f ef       	ldi	r25, 0xFF	; 255
     3ba:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     3bc:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     3be:	e0 e2       	ldi	r30, 0x20	; 32
     3c0:	f6 e0       	ldi	r31, 0x06	; 6
     3c2:	3f e3       	ldi	r19, 0x3F	; 63
     3c4:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3c6:	88 e1       	ldi	r24, 0x18	; 24
     3c8:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3ca:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3cc:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3ce:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3d0:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3d2:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     3d4:	20 ec       	ldi	r18, 0xC0	; 192
     3d6:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     3d8:	40 e4       	ldi	r20, 0x40	; 64
     3da:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     3dc:	40 e8       	ldi	r20, 0x80	; 128
     3de:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     3e0:	e0 e4       	ldi	r30, 0x40	; 64
     3e2:	f6 e0       	ldi	r31, 0x06	; 6
     3e4:	4c ef       	ldi	r20, 0xFC	; 252
     3e6:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e8:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ea:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ec:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ee:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f0:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f2:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     3f4:	43 e0       	ldi	r20, 0x03	; 3
     3f6:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     3f8:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     3fa:	e0 e6       	ldi	r30, 0x60	; 96
     3fc:	f6 e0       	ldi	r31, 0x06	; 6
     3fe:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     400:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     402:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     404:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     406:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     408:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40a:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     40c:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     40e:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     410:	e0 e8       	ldi	r30, 0x80	; 128
     412:	f6 e0       	ldi	r31, 0x06	; 6
     414:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     416:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     418:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41a:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41c:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41e:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     420:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     422:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     424:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     426:	e0 ea       	ldi	r30, 0xA0	; 160
     428:	f6 e0       	ldi	r31, 0x06	; 6
     42a:	90 ef       	ldi	r25, 0xF0	; 240
     42c:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     42e:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     430:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     432:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     434:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     436:	8f e0       	ldi	r24, 0x0F	; 15
     438:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     43a:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     43c:	e7 d2       	rcall	.+1486   	; 0xa0c <led_init>
	keypad_init();
     43e:	f9 c0       	rjmp	.+498    	; 0x632 <keypad_init>
     440:	08 95       	ret

00000442 <jstk_readVertIndex>:
     442:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     446:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	92 2b       	or	r25, r18
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	bc 01       	movw	r22, r24
     458:	7f 70       	andi	r23, 0x0F	; 15
     45a:	80 ff       	sbrs	r24, 0
     45c:	17 c0       	rjmp	.+46     	; 0x48c <jstk_readVertIndex+0x4a>
     45e:	21 e0       	ldi	r18, 0x01	; 1
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	e1 e0       	ldi	r30, 0x01	; 1
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	82 2f       	mov	r24, r18
     468:	af 01       	movw	r20, r30
     46a:	02 2e       	mov	r0, r18
     46c:	02 c0       	rjmp	.+4      	; 0x472 <jstk_readVertIndex+0x30>
     46e:	44 0f       	add	r20, r20
     470:	55 1f       	adc	r21, r21
     472:	0a 94       	dec	r0
     474:	e2 f7       	brpl	.-8      	; 0x46e <jstk_readVertIndex+0x2c>
     476:	46 23       	and	r20, r22
     478:	57 23       	and	r21, r23
     47a:	45 2b       	or	r20, r21
     47c:	41 f0       	breq	.+16     	; 0x48e <jstk_readVertIndex+0x4c>
     47e:	2f 5f       	subi	r18, 0xFF	; 255
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	2c 30       	cpi	r18, 0x0C	; 12
     484:	31 05       	cpc	r19, r1
     486:	79 f7       	brne	.-34     	; 0x466 <jstk_readVertIndex+0x24>
     488:	8f ef       	ldi	r24, 0xFF	; 255
     48a:	08 95       	ret
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	08 95       	ret

00000490 <jstk_readHoriIndex>:
     490:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     494:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	92 2b       	or	r25, r18
     49c:	bc 01       	movw	r22, r24
     49e:	7f 70       	andi	r23, 0x0F	; 15
     4a0:	80 ff       	sbrs	r24, 0
     4a2:	17 c0       	rjmp	.+46     	; 0x4d2 <jstk_readHoriIndex+0x42>
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	e1 e0       	ldi	r30, 0x01	; 1
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	82 2f       	mov	r24, r18
     4ae:	af 01       	movw	r20, r30
     4b0:	02 2e       	mov	r0, r18
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <jstk_readHoriIndex+0x28>
     4b4:	44 0f       	add	r20, r20
     4b6:	55 1f       	adc	r21, r21
     4b8:	0a 94       	dec	r0
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <jstk_readHoriIndex+0x24>
     4bc:	46 23       	and	r20, r22
     4be:	57 23       	and	r21, r23
     4c0:	45 2b       	or	r20, r21
     4c2:	41 f0       	breq	.+16     	; 0x4d4 <jstk_readHoriIndex+0x44>
     4c4:	2f 5f       	subi	r18, 0xFF	; 255
     4c6:	3f 4f       	sbci	r19, 0xFF	; 255
     4c8:	2c 30       	cpi	r18, 0x0C	; 12
     4ca:	31 05       	cpc	r19, r1
     4cc:	79 f7       	brne	.-34     	; 0x4ac <jstk_readHoriIndex+0x1c>
     4ce:	8f ef       	ldi	r24, 0xFF	; 255
     4d0:	08 95       	ret
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	08 95       	ret

000004d6 <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     4d6:	88 23       	and	r24, r24
     4d8:	f4 f1       	brlt	.+124    	; 0x556 <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     4da:	9b ef       	ldi	r25, 0xFB	; 251
     4dc:	98 0f       	add	r25, r24
     4de:	92 30       	cpi	r25, 0x02	; 2
     4e0:	e0 f1       	brcs	.+120    	; 0x55a <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     4e2:	85 30       	cpi	r24, 0x05	; 5
     4e4:	34 f4       	brge	.+12     	; 0x4f2 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4e6:	95 e0       	ldi	r25, 0x05	; 5
     4e8:	98 1b       	sub	r25, r24
     4ea:	92 30       	cpi	r25, 0x02	; 2
     4ec:	08 f0       	brcs	.+2      	; 0x4f0 <jstk_ledMask+0x1a>
     4ee:	42 c0       	rjmp	.+132    	; 0x574 <jstk_ledMask+0x9e>
     4f0:	36 c0       	rjmp	.+108    	; 0x55e <jstk_ledMask+0x88>
     4f2:	9a ef       	ldi	r25, 0xFA	; 250
     4f4:	98 0f       	add	r25, r24
     4f6:	92 30       	cpi	r25, 0x02	; 2
     4f8:	b0 f5       	brcc	.+108    	; 0x566 <jstk_ledMask+0x90>
     4fa:	31 c0       	rjmp	.+98     	; 0x55e <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4fc:	62 e0       	ldi	r22, 0x02	; 2
     4fe:	23 e0       	ldi	r18, 0x03	; 3
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     506:	e1 e0       	ldi	r30, 0x01	; 1
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	af 01       	movw	r20, r30
     50c:	02 2e       	mov	r0, r18
     50e:	02 c0       	rjmp	.+4      	; 0x514 <jstk_ledMask+0x3e>
     510:	44 0f       	add	r20, r20
     512:	55 1f       	adc	r21, r21
     514:	0a 94       	dec	r0
     516:	e2 f7       	brpl	.-8      	; 0x510 <jstk_ledMask+0x3a>
     518:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     51a:	9f 5f       	subi	r25, 0xFF	; 255
     51c:	21 50       	subi	r18, 0x01	; 1
     51e:	31 09       	sbc	r19, r1
     520:	96 17       	cp	r25, r22
     522:	98 f3       	brcs	.-26     	; 0x50a <jstk_ledMask+0x34>
     524:	08 95       	ret
     526:	81 50       	subi	r24, 0x01	; 1
     528:	48 2f       	mov	r20, r24
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	4b 5f       	subi	r20, 0xFB	; 251
     52e:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     530:	24 e0       	ldi	r18, 0x04	; 4
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     536:	e1 e0       	ldi	r30, 0x01	; 1
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	bf 01       	movw	r22, r30
     53c:	02 2e       	mov	r0, r18
     53e:	02 c0       	rjmp	.+4      	; 0x544 <jstk_ledMask+0x6e>
     540:	66 0f       	add	r22, r22
     542:	77 1f       	adc	r23, r23
     544:	0a 94       	dec	r0
     546:	e2 f7       	brpl	.-8      	; 0x540 <jstk_ledMask+0x6a>
     548:	86 2b       	or	r24, r22
     54a:	2f 5f       	subi	r18, 0xFF	; 255
     54c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     54e:	24 17       	cp	r18, r20
     550:	35 07       	cpc	r19, r21
     552:	99 f7       	brne	.-26     	; 0x53a <jstk_ledMask+0x64>
     554:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     55a:	88 e1       	ldi	r24, 0x18	; 24
     55c:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     55e:	85 30       	cpi	r24, 0x05	; 5
     560:	6c f2       	brlt	.-102    	; 0x4fc <jstk_ledMask+0x26>
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	e0 cf       	rjmp	.-64     	; 0x526 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     566:	85 50       	subi	r24, 0x05	; 5
     568:	85 30       	cpi	r24, 0x05	; 5
     56a:	08 f0       	brcs	.+2      	; 0x56e <jstk_ledMask+0x98>
     56c:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     56e:	81 11       	cpse	r24, r1
     570:	da cf       	rjmp	.-76     	; 0x526 <jstk_ledMask+0x50>
     572:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     574:	66 e0       	ldi	r22, 0x06	; 6
     576:	68 1b       	sub	r22, r24
     578:	65 30       	cpi	r22, 0x05	; 5
     57a:	08 f0       	brcs	.+2      	; 0x57e <jstk_ledMask+0xa8>
     57c:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     57e:	61 11       	cpse	r22, r1
     580:	be cf       	rjmp	.-132    	; 0x4fe <jstk_ledMask+0x28>
     582:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     584:	08 95       	ret

00000586 <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     586:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     588:	5c df       	rcall	.-328    	; 0x442 <jstk_readVertIndex>
     58a:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     58c:	81 df       	rcall	.-254    	; 0x490 <jstk_readHoriIndex>
     58e:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     590:	24 f4       	brge	.+8      	; 0x59a <jstk_readMask+0x14>
     592:	88 23       	and	r24, r24
     594:	c4 f0       	brlt	.+48     	; 0x5c6 <jstk_readMask+0x40>
     596:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     598:	09 c0       	rjmp	.+18     	; 0x5ac <jstk_readMask+0x26>
     59a:	c6 30       	cpi	r28, 0x06	; 6
     59c:	1c f0       	brlt	.+6      	; 0x5a4 <jstk_readMask+0x1e>
     59e:	9b ef       	ldi	r25, 0xFB	; 251
     5a0:	9c 0f       	add	r25, r28
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <jstk_readMask+0x22>
     5a4:	95 e0       	ldi	r25, 0x05	; 5
     5a6:	9c 1b       	sub	r25, r28
     5a8:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     5aa:	54 f0       	brlt	.+20     	; 0x5c0 <jstk_readMask+0x3a>
     5ac:	86 30       	cpi	r24, 0x06	; 6
     5ae:	1c f0       	brlt	.+6      	; 0x5b6 <jstk_readMask+0x30>
     5b0:	2b ef       	ldi	r18, 0xFB	; 251
     5b2:	28 0f       	add	r18, r24
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <jstk_readMask+0x34>
     5b6:	25 e0       	ldi	r18, 0x05	; 5
     5b8:	28 1b       	sub	r18, r24
     5ba:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <jstk_readMask+0x3a>
     5be:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     5c0:	8c 2f       	mov	r24, r28
     5c2:	89 df       	rcall	.-238    	; 0x4d6 <jstk_ledMask>
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <jstk_readMask+0x42>
     5c6:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     5c8:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     5ca:	08 95       	ret

000005cc <jstk_usbTask>:
     5cc:	61 df       	rcall	.-318    	; 0x490 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5ce:	88 23       	and	r24, r24
     5d0:	3c f0       	brlt	.+14     	; 0x5e0 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5d2:	e8 2f       	mov	r30, r24
     5d4:	88 0f       	add	r24, r24
     5d6:	ff 0b       	sbc	r31, r31
     5d8:	e8 58       	subi	r30, 0x88	; 136
     5da:	fe 4d       	sbci	r31, 0xDE	; 222
     5dc:	80 81       	ld	r24, Z
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5e0:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     5e2:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5e6:	2d df       	rcall	.-422    	; 0x442 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5e8:	88 23       	and	r24, r24
     5ea:	3c f0       	brlt	.+14     	; 0x5fa <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5ec:	e8 2f       	mov	r30, r24
     5ee:	88 0f       	add	r24, r24
     5f0:	ff 0b       	sbc	r31, r31
     5f2:	e8 58       	subi	r30, 0x88	; 136
     5f4:	fe 4d       	sbci	r31, 0xDE	; 222
     5f6:	80 81       	ld	r24, Z
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5fa:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5fc:	e4 ea       	ldi	r30, 0xA4	; 164
     5fe:	f1 e2       	ldi	r31, 0x21	; 33
     600:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     602:	20 81       	ld	r18, Z
     604:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     608:	29 13       	cpse	r18, r25
     60a:	04 c0       	rjmp	.+8      	; 0x614 <jstk_usbTask+0x48>
     60c:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     610:	98 17       	cp	r25, r24
     612:	71 f0       	breq	.+28     	; 0x630 <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     614:	84 ea       	ldi	r24, 0xA4	; 164
     616:	91 e2       	ldi	r25, 0x21	; 33
     618:	21 d7       	rcall	.+3650   	; 0x145c <udi_hid_generic_send_report_in>
     61a:	88 23       	and	r24, r24
     61c:	49 f0       	breq	.+18     	; 0x630 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     61e:	e6 e2       	ldi	r30, 0x26	; 38
     620:	f0 e2       	ldi	r31, 0x20	; 32
     622:	a4 ea       	ldi	r26, 0xA4	; 164
     624:	b1 e2       	ldi	r27, 0x21	; 33
     626:	8c 91       	ld	r24, X
     628:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     62a:	11 96       	adiw	r26, 0x01	; 1
     62c:	8c 91       	ld	r24, X
     62e:	81 83       	std	Z+1, r24	; 0x01
     630:	08 95       	ret

00000632 <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     632:	10 92 c1 21 	sts	0x21C1, r1	; 0x8021c1 <kpd_keyPressed>
     636:	10 92 be 21 	sts	0x21BE, r1	; 0x8021be <kpd_currState>
     63a:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <kpd_prevState>
     63e:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <kpd_exitTestMode>
     642:	10 92 c2 21 	sts	0x21C2, r1	; 0x8021c2 <kpd_rowVal>
     646:	10 92 c0 21 	sts	0x21C0, r1	; 0x8021c0 <kpd_code>
     64a:	e8 ec       	ldi	r30, 0xC8	; 200
     64c:	f1 e2       	ldi	r31, 0x21	; 33
     64e:	81 e6       	ldi	r24, 0x61	; 97
     650:	80 83       	st	Z, r24
     652:	80 e6       	ldi	r24, 0x60	; 96
     654:	81 83       	std	Z+1, r24	; 0x01
     656:	12 82       	std	Z+2, r1	; 0x02
     658:	13 82       	std	Z+3, r1	; 0x03
     65a:	8f e5       	ldi	r24, 0x5F	; 95
     65c:	84 83       	std	Z+4, r24	; 0x04
     65e:	8e e5       	ldi	r24, 0x5E	; 94
     660:	85 83       	std	Z+5, r24	; 0x05
     662:	16 82       	std	Z+6, r1	; 0x06
     664:	17 82       	std	Z+7, r1	; 0x07
     666:	8d e5       	ldi	r24, 0x5D	; 93
     668:	80 87       	std	Z+8, r24	; 0x08
     66a:	11 86       	std	Z+9, r1	; 0x09
     66c:	12 86       	std	Z+10, r1	; 0x0a
     66e:	13 86       	std	Z+11, r1	; 0x0b
     670:	14 86       	std	Z+12, r1	; 0x0c
     672:	15 86       	std	Z+13, r1	; 0x0d
     674:	89 e5       	ldi	r24, 0x59	; 89
     676:	86 87       	std	Z+14, r24	; 0x0e
     678:	8b e5       	ldi	r24, 0x5B	; 91
     67a:	87 87       	std	Z+15, r24	; 0x0f
     67c:	10 8a       	std	Z+16, r1	; 0x10
     67e:	11 8a       	std	Z+17, r1	; 0x11
     680:	8a e5       	ldi	r24, 0x5A	; 90
     682:	82 8b       	std	Z+18, r24	; 0x12
     684:	8c e5       	ldi	r24, 0x5C	; 92
     686:	83 8b       	std	Z+19, r24	; 0x13
     688:	e3 ec       	ldi	r30, 0xC3	; 195
     68a:	f1 e2       	ldi	r31, 0x21	; 33
     68c:	8e e0       	ldi	r24, 0x0E	; 14
     68e:	80 83       	st	Z, r24
     690:	8d e0       	ldi	r24, 0x0D	; 13
     692:	81 83       	std	Z+1, r24	; 0x01
     694:	8b e0       	ldi	r24, 0x0B	; 11
     696:	82 83       	std	Z+2, r24	; 0x02
     698:	87 e0       	ldi	r24, 0x07	; 7
     69a:	83 83       	std	Z+3, r24	; 0x03
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	84 83       	std	Z+4, r24	; 0x04
     6a0:	08 95       	ret

000006a2 <keypad_poll>:
     6a2:	4f 92       	push	r4
     6a4:	5f 92       	push	r5
     6a6:	6f 92       	push	r6
     6a8:	7f 92       	push	r7
     6aa:	8f 92       	push	r8
     6ac:	9f 92       	push	r9
     6ae:	af 92       	push	r10
     6b0:	bf 92       	push	r11
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ea ea       	ldi	r30, 0xAA	; 170
     6c4:	f1 e2       	ldi	r31, 0x21	; 33
     6c6:	83 eb       	ldi	r24, 0xB3	; 179
     6c8:	91 e2       	ldi	r25, 0x21	; 33
     6ca:	11 92       	st	Z+, r1
     6cc:	8e 17       	cp	r24, r30
     6ce:	9f 07       	cpc	r25, r31
     6d0:	e1 f7       	brne	.-8      	; 0x6ca <keypad_poll+0x28>
     6d2:	40 90 a9 21 	lds	r4, 0x21A9	; 0x8021a9 <prevRowMask.5334>
     6d6:	04 e8       	ldi	r16, 0x84	; 132
     6d8:	11 e2       	ldi	r17, 0x21	; 33
     6da:	c0 e0       	ldi	r28, 0x00	; 0
     6dc:	d0 e0       	ldi	r29, 0x00	; 0
     6de:	b1 2c       	mov	r11, r1
     6e0:	0f 2e       	mov	r0, r31
     6e2:	f5 e0       	ldi	r31, 0x05	; 5
     6e4:	6f 2e       	mov	r6, r31
     6e6:	f0 2d       	mov	r31, r0
     6e8:	68 94       	set
     6ea:	77 24       	eor	r7, r7
     6ec:	72 f8       	bld	r7, 2
     6ee:	0f 2e       	mov	r0, r31
     6f0:	f0 ea       	ldi	r31, 0xA0	; 160
     6f2:	ef 2e       	mov	r14, r31
     6f4:	f6 e0       	ldi	r31, 0x06	; 6
     6f6:	ff 2e       	mov	r15, r31
     6f8:	f0 2d       	mov	r31, r0
     6fa:	0f 2e       	mov	r0, r31
     6fc:	f0 e2       	ldi	r31, 0x20	; 32
     6fe:	cf 2e       	mov	r12, r31
     700:	f6 e0       	ldi	r31, 0x06	; 6
     702:	df 2e       	mov	r13, r31
     704:	f0 2d       	mov	r31, r0
     706:	68 94       	set
     708:	88 24       	eor	r8, r8
     70a:	87 f8       	bld	r8, 7
     70c:	99 24       	eor	r9, r9
     70e:	93 94       	inc	r9
     710:	ac 2e       	mov	r10, r28
     712:	fe 01       	movw	r30, r28
     714:	ed 53       	subi	r30, 0x3D	; 61
     716:	fe 4d       	sbci	r31, 0xDE	; 222
     718:	80 81       	ld	r24, Z
     71a:	d7 01       	movw	r26, r14
     71c:	14 96       	adiw	r26, 0x04	; 4
     71e:	8c 93       	st	X, r24
     720:	b4 e0       	ldi	r27, 0x04	; 4
     722:	cb 13       	cpse	r28, r27
     724:	03 c0       	rjmp	.+6      	; 0x72c <keypad_poll+0x8a>
     726:	f6 01       	movw	r30, r12
     728:	86 82       	std	Z+6, r8	; 0x06
     72a:	03 c0       	rjmp	.+6      	; 0x732 <keypad_poll+0x90>
     72c:	d6 01       	movw	r26, r12
     72e:	15 96       	adiw	r26, 0x05	; 5
     730:	8c 92       	st	X, r8
     732:	f7 01       	movw	r30, r14
     734:	80 85       	ldd	r24, Z+8	; 0x08
     736:	80 7f       	andi	r24, 0xF0	; 240
     738:	80 95       	com	r24
     73a:	f8 2f       	mov	r31, r24
     73c:	f0 7f       	andi	r31, 0xF0	; 240
     73e:	5f 2e       	mov	r5, r31
     740:	84 fd       	sbrc	r24, 4
     742:	b3 94       	inc	r11
     744:	85 fd       	sbrc	r24, 5
     746:	b3 94       	inc	r11
     748:	86 fd       	sbrc	r24, 6
     74a:	b3 94       	inc	r11
     74c:	55 20       	and	r5, r5
     74e:	0c f4       	brge	.+2      	; 0x752 <keypad_poll+0xb0>
     750:	b3 94       	inc	r11
     752:	f8 01       	movw	r30, r16
     754:	84 e0       	ldi	r24, 0x04	; 4
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	25 2d       	mov	r18, r5
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	a9 01       	movw	r20, r18
     75e:	b9 01       	movw	r22, r18
     760:	08 2e       	mov	r0, r24
     762:	02 c0       	rjmp	.+4      	; 0x768 <keypad_poll+0xc6>
     764:	75 95       	asr	r23
     766:	67 95       	ror	r22
     768:	0a 94       	dec	r0
     76a:	e2 f7       	brpl	.-8      	; 0x764 <keypad_poll+0xc2>
     76c:	60 ff       	sbrs	r22, 0
     76e:	0a c0       	rjmp	.+20     	; 0x784 <keypad_poll+0xe2>
     770:	60 81       	ld	r22, Z
     772:	69 30       	cpi	r22, 0x09	; 9
     774:	38 f4       	brcc	.+14     	; 0x784 <keypad_poll+0xe2>
     776:	06 2e       	mov	r0, r22
     778:	00 0c       	add	r0, r0
     77a:	77 0b       	sbc	r23, r23
     77c:	66 55       	subi	r22, 0x56	; 86
     77e:	7e 4d       	sbci	r23, 0xDE	; 222
     780:	db 01       	movw	r26, r22
     782:	9c 92       	st	X, r9
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	88 30       	cpi	r24, 0x08	; 8
     78a:	91 05       	cpc	r25, r1
     78c:	39 f7       	brne	.-50     	; 0x75c <keypad_poll+0xba>
     78e:	ca 01       	movw	r24, r20
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	48 23       	and	r20, r24
     794:	59 23       	and	r21, r25
     796:	45 2b       	or	r20, r21
     798:	49 f0       	breq	.+18     	; 0x7ac <keypad_poll+0x10a>
     79a:	b4 2d       	mov	r27, r4
     79c:	b0 95       	com	r27
     79e:	b5 21       	and	r27, r5
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <keypad_poll+0x102>
     7a2:	b5 2d       	mov	r27, r5
     7a4:	8b 2f       	mov	r24, r27
     7a6:	81 95       	neg	r24
     7a8:	b8 23       	and	r27, r24
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <keypad_poll+0x10c>
     7ac:	b5 2d       	mov	r27, r5
     7ae:	b0 32       	cpi	r27, 0x20	; 32
     7b0:	79 f0       	breq	.+30     	; 0x7d0 <keypad_poll+0x12e>
     7b2:	20 f4       	brcc	.+8      	; 0x7bc <keypad_poll+0x11a>
     7b4:	b0 31       	cpi	r27, 0x10	; 16
     7b6:	09 f4       	brne	.+2      	; 0x7ba <keypad_poll+0x118>
     7b8:	48 c0       	rjmp	.+144    	; 0x84a <keypad_poll+0x1a8>
     7ba:	0e c0       	rjmp	.+28     	; 0x7d8 <keypad_poll+0x136>
     7bc:	b0 34       	cpi	r27, 0x40	; 64
     7be:	09 f4       	brne	.+2      	; 0x7c2 <keypad_poll+0x120>
     7c0:	46 c0       	rjmp	.+140    	; 0x84e <keypad_poll+0x1ac>
     7c2:	b0 38       	cpi	r27, 0x80	; 128
     7c4:	49 f4       	brne	.+18     	; 0x7d8 <keypad_poll+0x136>
     7c6:	0f 2e       	mov	r0, r31
     7c8:	f3 e0       	ldi	r31, 0x03	; 3
     7ca:	7f 2e       	mov	r7, r31
     7cc:	f0 2d       	mov	r31, r0
     7ce:	42 c0       	rjmp	.+132    	; 0x854 <keypad_poll+0x1b2>
     7d0:	bb 23       	and	r27, r27
     7d2:	11 f0       	breq	.+4      	; 0x7d8 <keypad_poll+0x136>
     7d4:	6a 2c       	mov	r6, r10
     7d6:	79 2c       	mov	r7, r9
     7d8:	21 96       	adiw	r28, 0x01	; 1
     7da:	0c 5f       	subi	r16, 0xFC	; 252
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	45 2c       	mov	r4, r5
     7e0:	c5 30       	cpi	r28, 0x05	; 5
     7e2:	d1 05       	cpc	r29, r1
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <keypad_poll+0x146>
     7e6:	94 cf       	rjmp	.-216    	; 0x710 <keypad_poll+0x6e>
     7e8:	50 92 a9 21 	sts	0x21A9, r5	; 0x8021a9 <prevRowMask.5334>
     7ec:	80 e8       	ldi	r24, 0x80	; 128
     7ee:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     7f2:	b3 e0       	ldi	r27, 0x03	; 3
     7f4:	b7 15       	cp	r27, r7
     7f6:	e0 f0       	brcs	.+56     	; 0x830 <keypad_poll+0x18e>
     7f8:	e6 2d       	mov	r30, r6
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	ee 0f       	add	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	e8 53       	subi	r30, 0x38	; 56
     806:	fe 4d       	sbci	r31, 0xDE	; 222
     808:	e7 0d       	add	r30, r7
     80a:	f1 1d       	adc	r31, r1
     80c:	80 81       	ld	r24, Z
     80e:	90 91 c1 21 	lds	r25, 0x21C1	; 0x8021c1 <kpd_keyPressed>
     812:	91 11       	cpse	r25, r1
     814:	06 c0       	rjmp	.+12     	; 0x822 <keypad_poll+0x180>
     816:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <kpd_code>
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 c1 21 	sts	0x21C1, r24	; 0x8021c1 <kpd_keyPressed>
     820:	0d c0       	rjmp	.+26     	; 0x83c <keypad_poll+0x19a>
     822:	90 91 c0 21 	lds	r25, 0x21C0	; 0x8021c0 <kpd_code>
     826:	89 17       	cp	r24, r25
     828:	49 f0       	breq	.+18     	; 0x83c <keypad_poll+0x19a>
     82a:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <kpd_code>
     82e:	06 c0       	rjmp	.+12     	; 0x83c <keypad_poll+0x19a>
     830:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <kpd_keyPressed>
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	11 f4       	brne	.+4      	; 0x83c <keypad_poll+0x19a>
     838:	10 92 c1 21 	sts	0x21C1, r1	; 0x8021c1 <kpd_keyPressed>
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	8b 15       	cp	r24, r11
     840:	08 f0       	brcs	.+2      	; 0x844 <keypad_poll+0x1a2>
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	80 93 bc 21 	sts	0x21BC, r24	; 0x8021bc <kpd_multiPress>
     848:	07 c0       	rjmp	.+14     	; 0x858 <keypad_poll+0x1b6>
     84a:	71 2c       	mov	r7, r1
     84c:	03 c0       	rjmp	.+6      	; 0x854 <keypad_poll+0x1b2>
     84e:	68 94       	set
     850:	77 24       	eor	r7, r7
     852:	71 f8       	bld	r7, 1
     854:	6a 2c       	mov	r6, r10
     856:	c0 cf       	rjmp	.-128    	; 0x7d8 <keypad_poll+0x136>
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	af 90       	pop	r10
     86c:	9f 90       	pop	r9
     86e:	8f 90       	pop	r8
     870:	7f 90       	pop	r7
     872:	6f 90       	pop	r6
     874:	5f 90       	pop	r5
     876:	4f 90       	pop	r4
     878:	08 95       	ret

0000087a <keypad_getState>:
     87a:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <kpd_keyPressed>
     87e:	08 95       	ret

00000880 <kbd_getMap>:

uint16_t kbd_getMap(void) {
     880:	ea ea       	ldi	r30, 0xAA	; 170
     882:	f1 e2       	ldi	r31, 0x21	; 33
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t bits = 0;
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	50 e0       	ldi	r21, 0x00	; 0

	for (uint8_t i = 0; i < 9; ++i) {
		if (keyMap[i]) {
			bits |= (1 << i);
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	70 e0       	ldi	r23, 0x00	; 0

uint16_t kbd_getMap(void) {
	uint16_t bits = 0;

	for (uint8_t i = 0; i < 9; ++i) {
		if (keyMap[i]) {
     890:	91 91       	ld	r25, Z+
     892:	99 23       	and	r25, r25
     894:	49 f0       	breq	.+18     	; 0x8a8 <kbd_getMap+0x28>
			bits |= (1 << i);
     896:	cb 01       	movw	r24, r22
     898:	02 2e       	mov	r0, r18
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <kbd_getMap+0x20>
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	0a 94       	dec	r0
     8a2:	e2 f7       	brpl	.-8      	; 0x89c <kbd_getMap+0x1c>
     8a4:	48 2b       	or	r20, r24
     8a6:	59 2b       	or	r21, r25
     8a8:	2f 5f       	subi	r18, 0xFF	; 255
     8aa:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint16_t kbd_getMap(void) {
	uint16_t bits = 0;

	for (uint8_t i = 0; i < 9; ++i) {
     8ac:	29 30       	cpi	r18, 0x09	; 9
     8ae:	31 05       	cpc	r19, r1
     8b0:	79 f7       	brne	.-34     	; 0x890 <kbd_getMap+0x10>
			bits |= (1 << i);
		}
	}

	return bits;
}
     8b2:	ca 01       	movw	r24, r20
     8b4:	08 95       	ret

000008b6 <keypad_report>:


// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     8b6:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     8ba:	80 93 ba 21 	sts	0x21BA, r24	; 0x8021ba <kpd_testMode>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     8be:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     8c2:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     8c6:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_currentCode = keypad_getCode();    // current code to be outputed
     8ca:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <kpd_currentCode>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     8ce:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <kpd_testMode>
     8d2:	84 fd       	sbrc	r24, 4
     8d4:	29 c0       	rjmp	.+82     	; 0x928 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     8d6:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <kpd_currState>
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <keypad_report+0x2a>
     8de:	4d c0       	rjmp	.+154    	; 0x97a <keypad_report+0xc4>
     8e0:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <kpd_prevState>
     8e4:	81 11       	cpse	r24, r1
     8e6:	49 c0       	rjmp	.+146    	; 0x97a <keypad_report+0xc4>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
     8e8:	e0 91 bd 21 	lds	r30, 0x21BD	; 0x8021bd <kpd_currentCode>
     8ec:	8e 2f       	mov	r24, r30
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	fc 01       	movw	r30, r24
     8f2:	e9 55       	subi	r30, 0x59	; 89
     8f4:	f1 09       	sbc	r31, r1
     8f6:	e9 30       	cpi	r30, 0x09	; 9
     8f8:	f1 05       	cpc	r31, r1
     8fa:	90 f4       	brcc	.+36     	; 0x920 <keypad_report+0x6a>
     8fc:	88 27       	eor	r24, r24
     8fe:	e2 50       	subi	r30, 0x02	; 2
     900:	ff 4f       	sbci	r31, 0xFF	; 255
     902:	8f 4f       	sbci	r24, 0xFF	; 255
     904:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     908:	84 e0       	ldi	r24, 0x04	; 4
     90a:	09 c0       	rjmp	.+18     	; 0x91e <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     90c:	80 e1       	ldi	r24, 0x10	; 16
     90e:	07 c0       	rjmp	.+14     	; 0x91e <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     910:	80 e2       	ldi	r24, 0x20	; 32
     912:	05 c0       	rjmp	.+10     	; 0x91e <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     914:	80 e4       	ldi	r24, 0x40	; 64
     916:	03 c0       	rjmp	.+6      	; 0x91e <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     918:	80 e8       	ldi	r24, 0x80	; 128
     91a:	01 c0       	rjmp	.+2      	; 0x91e <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     91c:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     91e:	97 d0       	rcall	.+302    	; 0xa4e <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	80 93 bb 21 	sts	0x21BB, r24	; 0x8021bb <kpd_exitTestMode>
     926:	29 c0       	rjmp	.+82     	; 0x97a <keypad_report+0xc4>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     928:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <kpd_keyPressed>

		static bool    kpd_firstKey  = false;
		static uint8_t kpd_firstCode = 0;
		static bool    kpd_block     = false;

		if (!kpd_firstKey) {
     92c:	90 91 a8 21 	lds	r25, 0x21A8	; 0x8021a8 <kpd_firstKey.5390>
     930:	91 11       	cpse	r25, r1
     932:	0b c0       	rjmp	.+22     	; 0x94a <keypad_report+0x94>
			if (kpd_anyPressed) {
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	09 f5       	brne	.+66     	; 0x97a <keypad_report+0xc4>
				kpd_firstKey = true;
     938:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <kpd_firstKey.5390>
				kpd_firstCode = kpd_currentCode;
     93c:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <kpd_currentCode>
     940:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <kpd_firstCode.5391>
				kpd_block = false;
     944:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <kpd_block.5392>
     948:	18 c0       	rjmp	.+48     	; 0x97a <keypad_report+0xc4>
			}
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	51 f5       	brne	.+84     	; 0x9a2 <keypad_report+0xec>
     94e:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_block.5392>
     952:	81 11       	cpse	r24, r1
     954:	12 c0       	rjmp	.+36     	; 0x97a <keypad_report+0xc4>
     956:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <kpd_multiPress>
     95a:	88 23       	and	r24, r24
     95c:	71 f0       	breq	.+28     	; 0x97a <keypad_report+0xc4>
				kpd_block = true;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <kpd_block.5392>
     964:	0a c0       	rjmp	.+20     	; 0x97a <keypad_report+0xc4>
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
					udi_hid_kbd_down(kpd_firstCode);
     966:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <kpd_firstCode.5391>
     96a:	35 d6       	rcall	.+3178   	; 0x15d6 <udi_hid_kbd_down>
					udi_hid_kbd_up(kpd_firstCode);
     96c:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <kpd_firstCode.5391>
     970:	f6 d5       	rcall	.+3052   	; 0x155e <udi_hid_kbd_up>
				}
				kpd_firstKey = false;
     972:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <kpd_firstKey.5390>
				kpd_block = false;
     976:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <kpd_block.5392>
			}
		}
	}

	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     97a:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <kpd_testMode>
     97e:	84 ff       	sbrs	r24, 4
     980:	07 c0       	rjmp	.+14     	; 0x990 <keypad_report+0xda>
     982:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <kpd_exitTestMode>
     986:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     988:	19 f4       	brne	.+6      	; 0x990 <keypad_report+0xda>
     98a:	51 d0       	rcall	.+162    	; 0xa2e <led_allOff>
		kpd_exitTestMode = 0;
     98c:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <kpd_exitTestMode>
	}
	kpd_prevState = kpd_currState;
     990:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <kpd_currState>
     994:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <kpd_prevState>
}
     998:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	c0 cf       	rjmp	.-128    	; 0x91e <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     99e:	88 e0       	ldi	r24, 0x08	; 8
     9a0:	be cf       	rjmp	.-132    	; 0x91e <keypad_report+0x68>
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
				kpd_block = true;
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
     9a2:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_block.5392>
     9a6:	81 11       	cpse	r24, r1
     9a8:	e4 cf       	rjmp	.-56     	; 0x972 <keypad_report+0xbc>
     9aa:	dd cf       	rjmp	.-70     	; 0x966 <keypad_report+0xb0>

000009ac <keypad>:
	kpd_prevState = kpd_currState;
}

void keypad(void)
{
	keypad_poll();
     9ac:	7a de       	rcall	.-780    	; 0x6a2 <keypad_poll>
	keypad_report();
     9ae:	83 cf       	rjmp	.-250    	; 0x8b6 <keypad_report>
     9b0:	08 95       	ret

000009b2 <led_updateState>:
     9b2:	ed ed       	ldi	r30, 0xDD	; 221
}

void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;

    ledMap[8] = false;
     9b4:	f1 e2       	ldi	r31, 0x21	; 33
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	ac 01       	movw	r20, r24
     9be:	02 2e       	mov	r0, r18
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <led_updateState+0x14>
     9c2:	55 95       	asr	r21
     9c4:	47 95       	ror	r20
     9c6:	0a 94       	dec	r0
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <led_updateState+0x10>
     9ca:	40 fd       	sbrc	r20, 0
     9cc:	60 83       	st	Z, r22
     9ce:	2f 5f       	subi	r18, 0xFF	; 255
     9d0:	3f 4f       	sbci	r19, 0xFF	; 255
     9d2:	31 96       	adiw	r30, 0x01	; 1
     9d4:	28 30       	cpi	r18, 0x08	; 8
     9d6:	31 05       	cpc	r19, r1
     9d8:	89 f7       	brne	.-30     	; 0x9bc <led_updateState+0xa>
     9da:	08 95       	ret

000009dc <userActivity>:
     9dc:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     9e0:	80 93 ed 21 	sts	0x21ED, r24	; 0x8021ed <testMode>
     9e4:	5e de       	rcall	.-836    	; 0x6a2 <keypad_poll>
     9e6:	80 91 ed 21 	lds	r24, 0x21ED	; 0x8021ed <testMode>
     9ea:	84 ff       	sbrs	r24, 4
     9ec:	0a c0       	rjmp	.+20     	; 0xa02 <userActivity+0x26>
     9ee:	45 df       	rcall	.-374    	; 0x87a <keypad_getState>
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	49 f0       	breq	.+18     	; 0xa06 <userActivity+0x2a>
     9f4:	c8 dd       	rcall	.-1136   	; 0x586 <jstk_readMask>
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	81 11       	cpse	r24, r1
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <userActivity+0x22>
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	89 2f       	mov	r24, r25
     a00:	03 c0       	rjmp	.+6      	; 0xa08 <userActivity+0x2c>
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <userActivity+0x2c>
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	81 70       	andi	r24, 0x01	; 1
     a0a:	08 95       	ret

00000a0c <led_init>:
     a0c:	e0 e0       	ldi	r30, 0x00	; 0
     a0e:	f6 e0       	ldi	r31, 0x06	; 6
     a10:	8f ef       	ldi	r24, 0xFF	; 255
     a12:	81 83       	std	Z+1, r24	; 0x01
     a14:	85 83       	std	Z+5, r24	; 0x05
     a16:	e0 e2       	ldi	r30, 0x20	; 32
     a18:	f6 e0       	ldi	r31, 0x06	; 6
     a1a:	80 e4       	ldi	r24, 0x40	; 64
     a1c:	81 83       	std	Z+1, r24	; 0x01
     a1e:	86 83       	std	Z+6, r24	; 0x06
     a20:	08 95       	ret

00000a22 <led_allOn>:
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	c3 cf       	rjmp	.-122    	; 0x9b2 <led_updateState>
     a2c:	08 95       	ret

00000a2e <led_allOff>:
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	bd cf       	rjmp	.-134    	; 0x9b2 <led_updateState>
     a38:	08 95       	ret

00000a3a <led_on>:
     a3a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	b8 cf       	rjmp	.-144    	; 0x9b2 <led_updateState>
     a42:	08 95       	ret

00000a44 <led_off>:
     a44:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	b3 cf       	rjmp	.-154    	; 0x9b2 <led_updateState>
     a4c:	08 95       	ret

00000a4e <led_toggle>:
     a4e:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     a52:	ed ed       	ldi	r30, 0xDD	; 221
     a54:	f1 e2       	ldi	r31, 0x21	; 33
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	68 2f       	mov	r22, r24
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	ab 01       	movw	r20, r22
     a62:	02 2e       	mov	r0, r18
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <led_toggle+0x1c>
     a66:	55 95       	asr	r21
     a68:	47 95       	ror	r20
     a6a:	0a 94       	dec	r0
     a6c:	e2 f7       	brpl	.-8      	; 0xa66 <led_toggle+0x18>
     a6e:	40 ff       	sbrs	r20, 0
     a70:	03 c0       	rjmp	.+6      	; 0xa78 <led_toggle+0x2a>
     a72:	90 81       	ld	r25, Z
     a74:	98 27       	eor	r25, r24
     a76:	90 83       	st	Z, r25
     a78:	2f 5f       	subi	r18, 0xFF	; 255
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	31 96       	adiw	r30, 0x01	; 1
     a7e:	28 30       	cpi	r18, 0x08	; 8
     a80:	31 05       	cpc	r19, r1
     a82:	71 f7       	brne	.-36     	; 0xa60 <led_toggle+0x12>
     a84:	08 95       	ret

00000a86 <led_setState>:
     a86:	e0 e0       	ldi	r30, 0x00	; 0
     a88:	f6 e0       	ldi	r31, 0x06	; 6
     a8a:	9f ef       	ldi	r25, 0xFF	; 255
     a8c:	95 83       	std	Z+5, r25	; 0x05
     a8e:	86 83       	std	Z+6, r24	; 0x06
     a90:	ed ed       	ldi	r30, 0xDD	; 221
     a92:	f1 e2       	ldi	r31, 0x21	; 33
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	ac 01       	movw	r20, r24
     a9c:	02 2e       	mov	r0, r18
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <led_setState+0x1e>
     aa0:	55 95       	asr	r21
     aa2:	47 95       	ror	r20
     aa4:	0a 94       	dec	r0
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <led_setState+0x1a>
     aa8:	41 70       	andi	r20, 0x01	; 1
     aaa:	41 93       	st	Z+, r20
     aac:	2f 5f       	subi	r18, 0xFF	; 255
     aae:	3f 4f       	sbci	r19, 0xFF	; 255
     ab0:	28 30       	cpi	r18, 0x08	; 8
     ab2:	31 05       	cpc	r19, r1
     ab4:	91 f7       	brne	.-28     	; 0xa9a <led_setState+0x14>
     ab6:	08 95       	ret

00000ab8 <led_getMap>:
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ad ed       	ldi	r26, 0xDD	; 221
     abe:	b1 e2       	ldi	r27, 0x21	; 33
     ac0:	6d ee       	ldi	r22, 0xED	; 237
     ac2:	71 e2       	ldi	r23, 0x21	; 33
     ac4:	fd 01       	movw	r30, r26
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	c1 e0       	ldi	r28, 0x01	; 1
     acc:	d0 e0       	ldi	r29, 0x00	; 0
     ace:	9f 01       	movw	r18, r30
     ad0:	2a 1b       	sub	r18, r26
     ad2:	3b 0b       	sbc	r19, r27
     ad4:	91 91       	ld	r25, Z+
     ad6:	99 23       	and	r25, r25
     ad8:	41 f0       	breq	.+16     	; 0xaea <led_getMap+0x32>
     ada:	ce 01       	movw	r24, r28
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <led_getMap+0x2a>
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	2a 95       	dec	r18
     ae4:	e2 f7       	brpl	.-8      	; 0xade <led_getMap+0x26>
     ae6:	48 2b       	or	r20, r24
     ae8:	59 2b       	or	r21, r25
     aea:	e6 17       	cp	r30, r22
     aec:	f7 07       	cpc	r31, r23
     aee:	79 f7       	brne	.-34     	; 0xace <led_getMap+0x16>
     af0:	ca 01       	movw	r24, r20
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <led_statusOn>:
     af8:	80 e4       	ldi	r24, 0x40	; 64
     afa:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	80 93 e5 21 	sts	0x21E5, r24	; 0x8021e5 <ledMap+0x8>
     b04:	08 95       	ret

00000b06 <led_statusToggle>:
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     b06:	80 e4       	ldi	r24, 0x40	; 64
     b08:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>

    ledMap[8] = !ledMap[8];
     b0c:	ed ed       	ldi	r30, 0xDD	; 221
     b0e:	f1 e2       	ldi	r31, 0x21	; 33
     b10:	90 85       	ldd	r25, Z+8	; 0x08
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	89 27       	eor	r24, r25
     b16:	80 87       	std	Z+8, r24	; 0x08
     b18:	08 95       	ret

00000b1a <testIndicator>:
}

void testIndicator(void) { // blink status LED when in test mode
    sof_ms++;
     b1a:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <sof_ms>
     b1e:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <sof_ms+0x1>
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <sof_ms>
     b28:	90 93 ef 21 	sts	0x21EF, r25	; 0x8021ef <sof_ms+0x1>

    if ((PORTB.IN & PIN4_bm) == 0) {
     b2c:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     b30:	84 fd       	sbrc	r24, 4
     b32:	0d c0       	rjmp	.+26     	; 0xb4e <testIndicator+0x34>
        if (sof_ms >= 500) {
     b34:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <sof_ms>
     b38:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <sof_ms+0x1>
     b3c:	84 3f       	cpi	r24, 0xF4	; 244
     b3e:	91 40       	sbci	r25, 0x01	; 1
     b40:	58 f0       	brcs	.+22     	; 0xb58 <testIndicator+0x3e>
            led_statusToggle();
     b42:	e1 df       	rcall	.-62     	; 0xb06 <led_statusToggle>
            sof_ms = 0;
     b44:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <sof_ms>
     b48:	10 92 ef 21 	sts	0x21EF, r1	; 0x8021ef <sof_ms+0x1>
        }
    } else {
        led_statusOn();
     b4c:	08 95       	ret
     b4e:	d4 df       	rcall	.-88     	; 0xaf8 <led_statusOn>
        sof_ms = 0;
     b50:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <sof_ms>
     b54:	10 92 ef 21 	sts	0x21EF, r1	; 0x8021ef <sof_ms+0x1>
     b58:	08 95       	ret

00000b5a <startupSequence>:
            (keypad_getState()   == KEYPAD_PRESSED) ||
            (jstk_readMask()     != 0);
}

void startupSequence(uint8_t sequence) // startup LED animation
{
     b5a:	7f 92       	push	r7
     b5c:	8f 92       	push	r8
     b5e:	9f 92       	push	r9
     b60:	af 92       	push	r10
     b62:	bf 92       	push	r11
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	28 97       	sbiw	r28, 0x08	; 8
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	de bf       	out	0x3e, r29	; 62
    const uint8_t seq[8] = {
     b7e:	98 e0       	ldi	r25, 0x08	; 8
     b80:	e0 e7       	ldi	r30, 0x70	; 112
     b82:	f1 e2       	ldi	r31, 0x21	; 33
     b84:	de 01       	movw	r26, r28
     b86:	11 96       	adiw	r26, 0x01	; 1
     b88:	01 90       	ld	r0, Z+
     b8a:	0d 92       	st	X+, r0
     b8c:	9a 95       	dec	r25
     b8e:	e1 f7       	brne	.-8      	; 0xb88 <startupSequence+0x2e>
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	fc 01       	movw	r30, r24
     b94:	31 97       	sbiw	r30, 0x01	; 1
     b96:	e8 30       	cpi	r30, 0x08	; 8
     b98:	f1 05       	cpc	r31, r1
     b9a:	08 f0       	brcs	.+2      	; 0xb9e <startupSequence+0x44>
     b9c:	03 c3       	rjmp	.+1542   	; 0x11a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     b9e:	88 27       	eor	r24, r24
     ba0:	e9 5f       	subi	r30, 0xF9	; 249
     ba2:	fe 4f       	sbci	r31, 0xFE	; 254
     ba4:	8f 4f       	sbci	r24, 0xFF	; 255
     ba6:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__tablejump2__>
            }
            led_allOff();
            break;
        case 6:
            /* ---------------- stripes idk ---------------- */
            while (!user_active) {
     baa:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     bae:	88 23       	and	r24, r24
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <startupSequence+0x5a>
     bb2:	d1 c1       	rjmp	.+930    	; 0xf56 <startupSequence+0x3fc>
     bb4:	0b c2       	rjmp	.+1046   	; 0xfcc <startupSequence+0x472>
    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     bb6:	f8 01       	movw	r30, r16
     bb8:	f1 90       	ld	r15, Z+
     bba:	8f 01       	movw	r16, r30
     bbc:	8f 2d       	mov	r24, r15
     bbe:	3d df       	rcall	.-390    	; 0xa3a <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bc0:	ff e0       	ldi	r31, 0x0F	; 15
     bc2:	28 e9       	ldi	r18, 0x98	; 152
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	f1 50       	subi	r31, 0x01	; 1
     bc8:	20 40       	sbci	r18, 0x00	; 0
     bca:	80 40       	sbci	r24, 0x00	; 0
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <startupSequence+0x6c>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <startupSequence+0x76>
     bd0:	00 00       	nop
                    _delay_ms(850);
                    led_off(seq[i]);
     bd2:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     bd4:	37 df       	rcall	.-402    	; 0xa44 <led_off>
     bd6:	02 df       	rcall	.-508    	; 0x9dc <userActivity>
     bd8:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
     bdc:	a0 16       	cp	r10, r16
     bde:	b1 06       	cpc	r11, r17
     be0:	09 f4       	brne	.+2      	; 0xbe4 <startupSequence+0x8a>
     be2:	87 c2       	rjmp	.+1294   	; 0x10f2 <__EEPROM_REGION_LENGTH__+0xf2>
     be4:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     be8:	88 23       	and	r24, r24
     bea:	29 f3       	breq	.-54     	; 0xbb6 <startupSequence+0x5c>
     bec:	82 c2       	rjmp	.+1284   	; 0x10f2 <__EEPROM_REGION_LENGTH__+0xf2>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     bee:	f8 01       	movw	r30, r16
     bf0:	f2 90       	ld	r15, -Z
     bf2:	8f 01       	movw	r16, r30
     bf4:	8f 2d       	mov	r24, r15
     bf6:	21 df       	rcall	.-446    	; 0xa3a <led_on>
     bf8:	ff e0       	ldi	r31, 0x0F	; 15
     bfa:	28 e9       	ldi	r18, 0x98	; 152
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	f1 50       	subi	r31, 0x01	; 1
     c00:	20 40       	sbci	r18, 0x00	; 0
     c02:	80 40       	sbci	r24, 0x00	; 0
     c04:	e1 f7       	brne	.-8      	; 0xbfe <startupSequence+0xa4>
                    _delay_ms(850);
                    led_off(seq[i]);
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <startupSequence+0xae>
     c08:	00 00       	nop
     c0a:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     c0c:	1b df       	rcall	.-458    	; 0xa44 <led_off>
     c0e:	e6 de       	rcall	.-564    	; 0x9dc <userActivity>
     c10:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     c14:	c0 16       	cp	r12, r16
     c16:	d1 06       	cpc	r13, r17
     c18:	61 f0       	breq	.+24     	; 0xc32 <startupSequence+0xd8>
     c1a:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     c1e:	88 23       	and	r24, r24
     c20:	31 f3       	breq	.-52     	; 0xbee <startupSequence+0x94>
     c22:	07 c0       	rjmp	.+14     	; 0xc32 <startupSequence+0xd8>
     c24:	5e 01       	movw	r10, r28
     c26:	99 e0       	ldi	r25, 0x09	; 9
     c28:	a9 0e       	add	r10, r25
     c2a:	b1 1c       	adc	r11, r1
     c2c:	fe 01       	movw	r30, r28
     c2e:	31 96       	adiw	r30, 0x01	; 1
     c30:	6f 01       	movw	r12, r30
    static volatile bool user_active = false;

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
     c32:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     c36:	81 11       	cpse	r24, r1
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <startupSequence+0xec>
                for (int i = 0; i < 8 && !user_active; i++) {
     c3a:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     c3e:	88 23       	and	r24, r24
     c40:	09 f4       	brne	.+2      	; 0xc44 <startupSequence+0xea>
     c42:	9b c2       	rjmp	.+1334   	; 0x117a <__EEPROM_REGION_LENGTH__+0x17a>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
            }
            led_allOff();
     c44:	56 c2       	rjmp	.+1196   	; 0x10f2 <__EEPROM_REGION_LENGTH__+0xf2>
            break;
     c46:	f3 de       	rcall	.-538    	; 0xa2e <led_allOff>
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     c48:	ad c2       	rjmp	.+1370   	; 0x11a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     c4a:	f8 01       	movw	r30, r16
     c4c:	e2 90       	ld	r14, -Z
     c4e:	8f 01       	movw	r16, r30
     c50:	8e 2d       	mov	r24, r14
                    led_on(seq[right]);
     c52:	f3 de       	rcall	.-538    	; 0xa3a <led_on>
     c54:	f4 01       	movw	r30, r8
     c56:	f1 90       	ld	r15, Z+
     c58:	4f 01       	movw	r8, r30
     c5a:	8f 2d       	mov	r24, r15
     c5c:	ee de       	rcall	.-548    	; 0xa3a <led_on>
     c5e:	ff e1       	ldi	r31, 0x1F	; 31
     c60:	2f eb       	ldi	r18, 0xBF	; 191
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	f1 50       	subi	r31, 0x01	; 1
     c66:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     c68:	80 40       	sbci	r24, 0x00	; 0
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <startupSequence+0x10a>
                    led_off(seq[right]);
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <startupSequence+0x114>
     c6e:	00 00       	nop
     c70:	8e 2d       	mov	r24, r14

                    keypad_poll();
     c72:	e8 de       	rcall	.-560    	; 0xa44 <led_off>
     c74:	8f 2d       	mov	r24, r15
                    if (keypad_getState() == KEYPAD_PRESSED)
     c76:	e6 de       	rcall	.-564    	; 0xa44 <led_off>
     c78:	14 dd       	rcall	.-1496   	; 0x6a2 <keypad_poll>
     c7a:	ff dd       	rcall	.-1026   	; 0x87a <keypad_getState>
     c7c:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     c7e:	11 f4       	brne	.+4      	; 0xc84 <startupSequence+0x12a>
     c80:	70 92 dc 21 	sts	0x21DC, r7	; 0x8021dc <user_active.5522>
                    if (jstk_readMask() != 0)
     c84:	80 dc       	rcall	.-1792   	; 0x586 <jstk_readMask>
     c86:	81 11       	cpse	r24, r1
                        user_active = true;
     c88:	70 92 dc 21 	sts	0x21DC, r7	; 0x8021dc <user_active.5522>
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     c8c:	0a 15       	cp	r16, r10
     c8e:	1b 05       	cpc	r17, r11
     c90:	09 f4       	brne	.+2      	; 0xc94 <startupSequence+0x13a>
     c92:	34 c2       	rjmp	.+1128   	; 0x10fc <__EEPROM_REGION_LENGTH__+0xfc>
     c94:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     c98:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     c9a:	b9 f2       	breq	.-82     	; 0xc4a <startupSequence+0xf0>
     c9c:	2f c2       	rjmp	.+1118   	; 0x10fc <__EEPROM_REGION_LENGTH__+0xfc>
     c9e:	f4 01       	movw	r30, r8
     ca0:	e1 90       	ld	r14, Z+
     ca2:	4f 01       	movw	r8, r30
     ca4:	8e 2d       	mov	r24, r14
                    led_on(seq[right]);
     ca6:	c9 de       	rcall	.-622    	; 0xa3a <led_on>
     ca8:	f8 01       	movw	r30, r16
     caa:	f2 90       	ld	r15, -Z
     cac:	8f 01       	movw	r16, r30
     cae:	8f 2d       	mov	r24, r15
     cb0:	c4 de       	rcall	.-632    	; 0xa3a <led_on>
     cb2:	ff e1       	ldi	r31, 0x1F	; 31
     cb4:	2f eb       	ldi	r18, 0xBF	; 191
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	f1 50       	subi	r31, 0x01	; 1
     cba:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     cbc:	80 40       	sbci	r24, 0x00	; 0
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <startupSequence+0x15e>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <startupSequence+0x168>
                    led_off(seq[right]);
     cc2:	00 00       	nop
     cc4:	8e 2d       	mov	r24, r14
     cc6:	be de       	rcall	.-644    	; 0xa44 <led_off>

                    keypad_poll();
     cc8:	8f 2d       	mov	r24, r15
     cca:	bc de       	rcall	.-648    	; 0xa44 <led_off>
                    if (keypad_getState() == KEYPAD_PRESSED)
     ccc:	ea dc       	rcall	.-1580   	; 0x6a2 <keypad_poll>
     cce:	d5 dd       	rcall	.-1110   	; 0x87a <keypad_getState>
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <startupSequence+0x17e>
                        user_active = true;
     cd4:	70 92 dc 21 	sts	0x21DC, r7	; 0x8021dc <user_active.5522>
                    if (jstk_readMask() != 0)
     cd8:	56 dc       	rcall	.-1876   	; 0x586 <jstk_readMask>
     cda:	81 11       	cpse	r24, r1
     cdc:	70 92 dc 21 	sts	0x21DC, r7	; 0x8021dc <user_active.5522>
                        user_active = true;
     ce0:	c0 16       	cp	r12, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     ce2:	d1 06       	cpc	r13, r17
     ce4:	71 f0       	breq	.+28     	; 0xd02 <startupSequence+0x1a8>
     ce6:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     cea:	88 23       	and	r24, r24
     cec:	c1 f2       	breq	.-80     	; 0xc9e <startupSequence+0x144>
     cee:	09 c0       	rjmp	.+18     	; 0xd02 <startupSequence+0x1a8>
     cf0:	fe 01       	movw	r30, r28
     cf2:	31 96       	adiw	r30, 0x01	; 1
     cf4:	5f 01       	movw	r10, r30

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     cf6:	77 24       	eor	r7, r7
     cf8:	73 94       	inc	r7
     cfa:	6e 01       	movw	r12, r28
     cfc:	f5 e0       	ldi	r31, 0x05	; 5
     cfe:	cf 0e       	add	r12, r31
            }
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
     d00:	d1 1c       	adc	r13, r1
     d02:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                for (int i = 0; i < 4 && !user_active; i++) {
     d06:	81 11       	cpse	r24, r1
     d08:	0a c0       	rjmp	.+20     	; 0xd1e <startupSequence+0x1c4>
     d0a:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     d0e:	81 11       	cpse	r24, r1
     d10:	f5 c1       	rjmp	.+1002   	; 0x10fc <__EEPROM_REGION_LENGTH__+0xfc>
     d12:	4e 01       	movw	r8, r28
     d14:	25 e0       	ldi	r18, 0x05	; 5
     d16:	82 0e       	add	r8, r18
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     d18:	91 1c       	adc	r9, r1
     d1a:	84 01       	movw	r16, r8
            break;
     d1c:	96 cf       	rjmp	.-212    	; 0xc4a <startupSequence+0xf0>
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     d1e:	87 de       	rcall	.-754    	; 0xa2e <led_allOff>
     d20:	41 c2       	rjmp	.+1154   	; 0x11a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     d22:	f8 01       	movw	r30, r16
     d24:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     d26:	8f 01       	movw	r16, r30
     d28:	88 de       	rcall	.-752    	; 0xa3a <led_on>
     d2a:	f7 01       	movw	r30, r14
     d2c:	81 91       	ld	r24, Z+
     d2e:	7f 01       	movw	r14, r30
     d30:	84 de       	rcall	.-760    	; 0xa3a <led_on>
     d32:	ff e2       	ldi	r31, 0x2F	; 47
     d34:	27 e5       	ldi	r18, 0x57	; 87
     d36:	85 e0       	ldi	r24, 0x05	; 5
     d38:	f1 50       	subi	r31, 0x01	; 1
     d3a:	20 40       	sbci	r18, 0x00	; 0
     d3c:	80 40       	sbci	r24, 0x00	; 0
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <startupSequence+0x1de>
                    _delay_ms(1750);

                    keypad_poll();
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <startupSequence+0x1e8>
     d42:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     d44:	ae dc       	rcall	.-1700   	; 0x6a2 <keypad_poll>
     d46:	99 dd       	rcall	.-1230   	; 0x87a <keypad_getState>
     d48:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     d4a:	11 f4       	brne	.+4      	; 0xd50 <startupSequence+0x1f6>
     d4c:	90 92 dc 21 	sts	0x21DC, r9	; 0x8021dc <user_active.5522>
                    if (jstk_readMask() != 0)
     d50:	1a dc       	rcall	.-1996   	; 0x586 <jstk_readMask>
     d52:	81 11       	cpse	r24, r1
                        user_active = true;
     d54:	90 92 dc 21 	sts	0x21DC, r9	; 0x8021dc <user_active.5522>
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     d58:	a0 16       	cp	r10, r16
     d5a:	b1 06       	cpc	r11, r17
     d5c:	09 f4       	brne	.+2      	; 0xd60 <startupSequence+0x206>
     d5e:	d9 c1       	rjmp	.+946    	; 0x1112 <__EEPROM_REGION_LENGTH__+0x112>
     d60:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     d64:	88 23       	and	r24, r24
     d66:	e9 f2       	breq	.-70     	; 0xd22 <startupSequence+0x1c8>
     d68:	d4 c1       	rjmp	.+936    	; 0x1112 <__EEPROM_REGION_LENGTH__+0x112>
     d6a:	f7 01       	movw	r30, r14
     d6c:	81 91       	ld	r24, Z+
                    led_off(seq[right]);
     d6e:	7f 01       	movw	r14, r30
     d70:	69 de       	rcall	.-814    	; 0xa44 <led_off>
     d72:	f8 01       	movw	r30, r16
     d74:	82 91       	ld	r24, -Z
     d76:	8f 01       	movw	r16, r30
     d78:	65 de       	rcall	.-822    	; 0xa44 <led_off>
     d7a:	ff e2       	ldi	r31, 0x2F	; 47
     d7c:	27 e5       	ldi	r18, 0x57	; 87
     d7e:	85 e0       	ldi	r24, 0x05	; 5
     d80:	f1 50       	subi	r31, 0x01	; 1
     d82:	20 40       	sbci	r18, 0x00	; 0
     d84:	80 40       	sbci	r24, 0x00	; 0
     d86:	e1 f7       	brne	.-8      	; 0xd80 <startupSequence+0x226>
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <startupSequence+0x230>
                    _delay_ms(1750);

                    keypad_poll();
     d8a:	00 00       	nop
     d8c:	8a dc       	rcall	.-1772   	; 0x6a2 <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     d8e:	75 dd       	rcall	.-1302   	; 0x87a <keypad_getState>
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	11 f4       	brne	.+4      	; 0xd98 <startupSequence+0x23e>
     d94:	90 92 dc 21 	sts	0x21DC, r9	; 0x8021dc <user_active.5522>
                        user_active = true;
     d98:	f6 db       	rcall	.-2068   	; 0x586 <jstk_readMask>
                    if (jstk_readMask() != 0)
     d9a:	81 11       	cpse	r24, r1
     d9c:	90 92 dc 21 	sts	0x21DC, r9	; 0x8021dc <user_active.5522>
                        user_active = true;
     da0:	c0 16       	cp	r12, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     da2:	d1 06       	cpc	r13, r17
     da4:	71 f0       	breq	.+28     	; 0xdc2 <startupSequence+0x268>
     da6:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     daa:	88 23       	and	r24, r24
     dac:	f1 f2       	breq	.-68     	; 0xd6a <startupSequence+0x210>
     dae:	09 c0       	rjmp	.+18     	; 0xdc2 <startupSequence+0x268>
     db0:	fe 01       	movw	r30, r28
     db2:	31 96       	adiw	r30, 0x01	; 1

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     db4:	5f 01       	movw	r10, r30
     db6:	99 24       	eor	r9, r9
     db8:	93 94       	inc	r9
     dba:	6e 01       	movw	r12, r28
     dbc:	f5 e0       	ldi	r31, 0x05	; 5
     dbe:	cf 0e       	add	r12, r31
            }
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
     dc0:	d1 1c       	adc	r13, r1
     dc2:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                for (int i = 0; i < 4 && !user_active; i++) {
     dc6:	81 11       	cpse	r24, r1
     dc8:	0a c0       	rjmp	.+20     	; 0xdde <startupSequence+0x284>
     dca:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     dce:	81 11       	cpse	r24, r1
     dd0:	a0 c1       	rjmp	.+832    	; 0x1112 <__EEPROM_REGION_LENGTH__+0x112>
     dd2:	7e 01       	movw	r14, r28
     dd4:	25 e0       	ldi	r18, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     dd6:	e2 0e       	add	r14, r18
     dd8:	f1 1c       	adc	r15, r1
            break;
     dda:	87 01       	movw	r16, r14
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     ddc:	a2 cf       	rjmp	.-188    	; 0xd22 <startupSequence+0x1c8>
     dde:	27 de       	rcall	.-946    	; 0xa2e <led_allOff>
     de0:	e1 c1       	rjmp	.+962    	; 0x11a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     de2:	f8 01       	movw	r30, r16
     de4:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     de6:	8f 01       	movw	r16, r30
     de8:	28 de       	rcall	.-944    	; 0xa3a <led_on>
     dea:	f7 01       	movw	r30, r14
     dec:	81 91       	ld	r24, Z+
     dee:	7f 01       	movw	r14, r30
     df0:	24 de       	rcall	.-952    	; 0xa3a <led_on>
     df2:	ff e2       	ldi	r31, 0x2F	; 47
     df4:	27 e5       	ldi	r18, 0x57	; 87
     df6:	85 e0       	ldi	r24, 0x05	; 5
     df8:	f1 50       	subi	r31, 0x01	; 1
     dfa:	20 40       	sbci	r18, 0x00	; 0
     dfc:	80 40       	sbci	r24, 0x00	; 0
                    _delay_ms(1750);

                    keypad_poll();
     dfe:	e1 f7       	brne	.-8      	; 0xdf8 <startupSequence+0x29e>
                    if (keypad_getState() == KEYPAD_PRESSED)
     e00:	00 c0       	rjmp	.+0      	; 0xe02 <startupSequence+0x2a8>
     e02:	00 00       	nop
     e04:	4e dc       	rcall	.-1892   	; 0x6a2 <keypad_poll>
                        user_active = true;
     e06:	39 dd       	rcall	.-1422   	; 0x87a <keypad_getState>
                    if (jstk_readMask() != 0)
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	11 f4       	brne	.+4      	; 0xe10 <startupSequence+0x2b6>
     e0c:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
                        user_active = true;
     e10:	ba db       	rcall	.-2188   	; 0x586 <jstk_readMask>
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     e12:	81 11       	cpse	r24, r1
     e14:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
     e18:	c0 16       	cp	r12, r16
     e1a:	d1 06       	cpc	r13, r17
     e1c:	09 f4       	brne	.+2      	; 0xe20 <startupSequence+0x2c6>
     e1e:	84 c1       	rjmp	.+776    	; 0x1128 <__EEPROM_REGION_LENGTH__+0x128>
     e20:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     e24:	88 23       	and	r24, r24
     e26:	e9 f2       	breq	.-70     	; 0xde2 <startupSequence+0x288>
     e28:	7f c1       	rjmp	.+766    	; 0x1128 <__EEPROM_REGION_LENGTH__+0x128>
     e2a:	f8 01       	movw	r30, r16
     e2c:	82 91       	ld	r24, -Z
                    led_off(seq[right]);
     e2e:	8f 01       	movw	r16, r30
     e30:	09 de       	rcall	.-1006   	; 0xa44 <led_off>
     e32:	f7 01       	movw	r30, r14
     e34:	81 91       	ld	r24, Z+
     e36:	7f 01       	movw	r14, r30
     e38:	05 de       	rcall	.-1014   	; 0xa44 <led_off>
     e3a:	ff e2       	ldi	r31, 0x2F	; 47
     e3c:	27 e5       	ldi	r18, 0x57	; 87
     e3e:	85 e0       	ldi	r24, 0x05	; 5
     e40:	f1 50       	subi	r31, 0x01	; 1
     e42:	20 40       	sbci	r18, 0x00	; 0
     e44:	80 40       	sbci	r24, 0x00	; 0
     e46:	e1 f7       	brne	.-8      	; 0xe40 <startupSequence+0x2e6>
                    _delay_ms(1750);

                    keypad_poll();
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <startupSequence+0x2f0>
     e4a:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     e4c:	2a dc       	rcall	.-1964   	; 0x6a2 <keypad_poll>
     e4e:	15 dd       	rcall	.-1494   	; 0x87a <keypad_getState>
     e50:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     e52:	11 f4       	brne	.+4      	; 0xe58 <startupSequence+0x2fe>
                    if (jstk_readMask() != 0)
     e54:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
     e58:	96 db       	rcall	.-2260   	; 0x586 <jstk_readMask>
                        user_active = true;
     e5a:	81 11       	cpse	r24, r1
     e5c:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     e60:	c0 16       	cp	r12, r16
     e62:	d1 06       	cpc	r13, r17
     e64:	51 f0       	breq	.+20     	; 0xe7a <startupSequence+0x320>
     e66:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     e6a:	88 23       	and	r24, r24
     e6c:	f1 f2       	breq	.-68     	; 0xe2a <startupSequence+0x2d0>
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <startupSequence+0x320>

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     e70:	fe 01       	movw	r30, r28
     e72:	31 96       	adiw	r30, 0x01	; 1
            }
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
     e74:	6f 01       	movw	r12, r30
     e76:	bb 24       	eor	r11, r11
     e78:	b3 94       	inc	r11
     e7a:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                for (int i = 0; i < 4 && !user_active; i++) {
     e7e:	81 11       	cpse	r24, r1
     e80:	0a c0       	rjmp	.+20     	; 0xe96 <startupSequence+0x33c>
     e82:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     e86:	81 11       	cpse	r24, r1
     e88:	4f c1       	rjmp	.+670    	; 0x1128 <__EEPROM_REGION_LENGTH__+0x128>
     e8a:	7e 01       	movw	r14, r28
     e8c:	f5 e0       	ldi	r31, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     e8e:	ef 0e       	add	r14, r31
     e90:	f1 1c       	adc	r15, r1
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     e92:	87 01       	movw	r16, r14
     e94:	a6 cf       	rjmp	.-180    	; 0xde2 <startupSequence+0x288>
     e96:	cb dd       	rcall	.-1130   	; 0xa2e <led_allOff>
     e98:	85 c1       	rjmp	.+778    	; 0x11a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     e9a:	f7 01       	movw	r30, r14
                    led_on(seq[right]);
     e9c:	81 91       	ld	r24, Z+
     e9e:	7f 01       	movw	r14, r30
     ea0:	cc dd       	rcall	.-1128   	; 0xa3a <led_on>
     ea2:	f8 01       	movw	r30, r16
     ea4:	82 91       	ld	r24, -Z
     ea6:	8f 01       	movw	r16, r30
     ea8:	c8 dd       	rcall	.-1136   	; 0xa3a <led_on>
     eaa:	ff e2       	ldi	r31, 0x2F	; 47
     eac:	27 e5       	ldi	r18, 0x57	; 87
     eae:	85 e0       	ldi	r24, 0x05	; 5
     eb0:	f1 50       	subi	r31, 0x01	; 1
                    _delay_ms(1750);

                    keypad_poll();
     eb2:	20 40       	sbci	r18, 0x00	; 0
     eb4:	80 40       	sbci	r24, 0x00	; 0
                    if (keypad_getState() == KEYPAD_PRESSED)
     eb6:	e1 f7       	brne	.-8      	; 0xeb0 <startupSequence+0x356>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <startupSequence+0x360>
     eba:	00 00       	nop
     ebc:	f2 db       	rcall	.-2076   	; 0x6a2 <keypad_poll>
                        user_active = true;
     ebe:	dd dc       	rcall	.-1606   	; 0x87a <keypad_getState>
     ec0:	81 30       	cpi	r24, 0x01	; 1
                    if (jstk_readMask() != 0)
     ec2:	11 f4       	brne	.+4      	; 0xec8 <startupSequence+0x36e>
     ec4:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
                        user_active = true;
     ec8:	5e db       	rcall	.-2372   	; 0x586 <jstk_readMask>
     eca:	81 11       	cpse	r24, r1
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
     ecc:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
     ed0:	0c 15       	cp	r16, r12
     ed2:	1d 05       	cpc	r17, r13
     ed4:	09 f4       	brne	.+2      	; 0xed8 <startupSequence+0x37e>
     ed6:	31 c1       	rjmp	.+610    	; 0x113a <__EEPROM_REGION_LENGTH__+0x13a>
     ed8:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     edc:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     ede:	e9 f2       	breq	.-70     	; 0xe9a <startupSequence+0x340>
     ee0:	2c c1       	rjmp	.+600    	; 0x113a <__EEPROM_REGION_LENGTH__+0x13a>
     ee2:	f7 01       	movw	r30, r14
     ee4:	81 91       	ld	r24, Z+
     ee6:	7f 01       	movw	r14, r30
                    led_off(seq[right]);
     ee8:	ad dd       	rcall	.-1190   	; 0xa44 <led_off>
     eea:	f8 01       	movw	r30, r16
     eec:	82 91       	ld	r24, -Z
     eee:	8f 01       	movw	r16, r30
     ef0:	a9 dd       	rcall	.-1198   	; 0xa44 <led_off>
     ef2:	ff e2       	ldi	r31, 0x2F	; 47
     ef4:	27 e5       	ldi	r18, 0x57	; 87
     ef6:	85 e0       	ldi	r24, 0x05	; 5
     ef8:	f1 50       	subi	r31, 0x01	; 1
     efa:	20 40       	sbci	r18, 0x00	; 0
     efc:	80 40       	sbci	r24, 0x00	; 0
     efe:	e1 f7       	brne	.-8      	; 0xef8 <startupSequence+0x39e>
     f00:	00 c0       	rjmp	.+0      	; 0xf02 <startupSequence+0x3a8>
                    _delay_ms(1750);

                    keypad_poll();
     f02:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     f04:	ce db       	rcall	.-2148   	; 0x6a2 <keypad_poll>
     f06:	b9 dc       	rcall	.-1678   	; 0x87a <keypad_getState>
     f08:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     f0a:	11 f4       	brne	.+4      	; 0xf10 <startupSequence+0x3b6>
     f0c:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
                    if (jstk_readMask() != 0)
     f10:	3a db       	rcall	.-2444   	; 0x586 <jstk_readMask>
     f12:	81 11       	cpse	r24, r1
                        user_active = true;
     f14:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     f18:	0c 15       	cp	r16, r12
     f1a:	1d 05       	cpc	r17, r13
     f1c:	59 f0       	breq	.+22     	; 0xf34 <startupSequence+0x3da>
     f1e:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     f22:	88 23       	and	r24, r24
     f24:	f1 f2       	breq	.-68     	; 0xee2 <startupSequence+0x388>
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <startupSequence+0x3da>
     f28:	6e 01       	movw	r12, r28
     f2a:	95 e0       	ldi	r25, 0x05	; 5

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     f2c:	c9 0e       	add	r12, r25
     f2e:	d1 1c       	adc	r13, r1
            }
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
     f30:	bb 24       	eor	r11, r11
     f32:	b3 94       	inc	r11
     f34:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                for (int i = 3; i >= 0 && !user_active; i--) {
     f38:	81 11       	cpse	r24, r1
     f3a:	0b c0       	rjmp	.+22     	; 0xf52 <startupSequence+0x3f8>
     f3c:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     f40:	81 11       	cpse	r24, r1
     f42:	fb c0       	rjmp	.+502    	; 0x113a <__EEPROM_REGION_LENGTH__+0x13a>
     f44:	fe 01       	movw	r30, r28
     f46:	31 96       	adiw	r30, 0x01	; 1
     f48:	7f 01       	movw	r14, r30
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     f4a:	8e 01       	movw	r16, r28
     f4c:	07 5f       	subi	r16, 0xF7	; 247
            break;
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
        case 6:
            /* ---------------- stripes idk ---------------- */
            while (!user_active) {
                led_allOn();
     f50:	a4 cf       	rjmp	.-184    	; 0xe9a <startupSequence+0x340>
     f52:	6d dd       	rcall	.-1318   	; 0xa2e <led_allOff>
     f54:	27 c1       	rjmp	.+590    	; 0x11a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     f56:	65 dd       	rcall	.-1334   	; 0xa22 <led_allOn>
     f58:	ff e7       	ldi	r31, 0x7F	; 127
     f5a:	2a e1       	ldi	r18, 0x1A	; 26
     f5c:	86 e0       	ldi	r24, 0x06	; 6
     f5e:	f1 50       	subi	r31, 0x01	; 1
     f60:	20 40       	sbci	r18, 0x00	; 0
     f62:	80 40       	sbci	r24, 0x00	; 0
                _delay_ms(2000);
                user_active = userActivity();
     f64:	e1 f7       	brne	.-8      	; 0xf5e <startupSequence+0x404>
     f66:	00 c0       	rjmp	.+0      	; 0xf68 <startupSequence+0x40e>
     f68:	00 00       	nop

                led_allOff();
     f6a:	38 dd       	rcall	.-1424   	; 0x9dc <userActivity>
     f6c:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
     f70:	5e dd       	rcall	.-1348   	; 0xa2e <led_allOff>
     f72:	9f e7       	ldi	r25, 0x7F	; 127
     f74:	ea e1       	ldi	r30, 0x1A	; 26
     f76:	f6 e0       	ldi	r31, 0x06	; 6
     f78:	91 50       	subi	r25, 0x01	; 1
     f7a:	e0 40       	sbci	r30, 0x00	; 0
     f7c:	f0 40       	sbci	r31, 0x00	; 0
                _delay_ms(2000);
                user_active = userActivity();
     f7e:	e1 f7       	brne	.-8      	; 0xf78 <startupSequence+0x41e>
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <startupSequence+0x428>
     f82:	00 00       	nop
     f84:	2b dd       	rcall	.-1450   	; 0x9dc <userActivity>

                led_setState(0x55);
     f86:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
     f8a:	85 e5       	ldi	r24, 0x55	; 85
     f8c:	7c dd       	rcall	.-1288   	; 0xa86 <led_setState>
     f8e:	2f e7       	ldi	r18, 0x7F	; 127
     f90:	8a e1       	ldi	r24, 0x1A	; 26
     f92:	96 e0       	ldi	r25, 0x06	; 6
     f94:	21 50       	subi	r18, 0x01	; 1
     f96:	80 40       	sbci	r24, 0x00	; 0
     f98:	90 40       	sbci	r25, 0x00	; 0
     f9a:	e1 f7       	brne	.-8      	; 0xf94 <startupSequence+0x43a>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <startupSequence+0x444>
                _delay_ms(2000);
                user_active = userActivity();
     f9e:	00 00       	nop
     fa0:	1d dd       	rcall	.-1478   	; 0x9dc <userActivity>
     fa2:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>

                led_setState(0xAA);
     fa6:	8a ea       	ldi	r24, 0xAA	; 170
     fa8:	6e dd       	rcall	.-1316   	; 0xa86 <led_setState>
     faa:	ef e7       	ldi	r30, 0x7F	; 127
     fac:	fa e1       	ldi	r31, 0x1A	; 26
     fae:	26 e0       	ldi	r18, 0x06	; 6
     fb0:	e1 50       	subi	r30, 0x01	; 1
     fb2:	f0 40       	sbci	r31, 0x00	; 0
     fb4:	20 40       	sbci	r18, 0x00	; 0
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <startupSequence+0x456>
     fb8:	00 c0       	rjmp	.+0      	; 0xfba <startupSequence+0x460>
                _delay_ms(2000);
                user_active = userActivity();
     fba:	00 00       	nop
     fbc:	0f dd       	rcall	.-1506   	; 0x9dc <userActivity>
     fbe:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
            }
            led_allOff();
            break;
        case 6:
            /* ---------------- stripes idk ---------------- */
            while (!user_active) {
     fc2:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
     fc6:	88 23       	and	r24, r24
     fc8:	09 f4       	brne	.+2      	; 0xfcc <startupSequence+0x472>

                led_setState(0xAA);
                _delay_ms(2000);
                user_active = userActivity();
            }
            led_allOff();
     fca:	c5 cf       	rjmp	.-118    	; 0xf56 <startupSequence+0x3fc>
     fcc:	30 dd       	rcall	.-1440   	; 0xa2e <led_allOff>
            break;
     fce:	ea c0       	rjmp	.+468    	; 0x11a4 <__EEPROM_REGION_LENGTH__+0x1a4>
            uint8_t pos = 0;
            int8_t  dir = +1;

            while (!user_active) {
                uint8_t mask = (0x07 << pos);
                led_setState(mask);
     fd0:	8f 2d       	mov	r24, r15
     fd2:	01 2e       	mov	r0, r17
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <startupSequence+0x47e>
     fd6:	88 0f       	add	r24, r24
     fd8:	0a 94       	dec	r0
     fda:	ea f7       	brpl	.-6      	; 0xfd6 <startupSequence+0x47c>
     fdc:	54 dd       	rcall	.-1368   	; 0xa86 <led_setState>
     fde:	8f ed       	ldi	r24, 0xDF	; 223
     fe0:	93 e9       	ldi	r25, 0x93	; 147
     fe2:	e4 e0       	ldi	r30, 0x04	; 4
     fe4:	81 50       	subi	r24, 0x01	; 1
     fe6:	90 40       	sbci	r25, 0x00	; 0
     fe8:	e0 40       	sbci	r30, 0x00	; 0
     fea:	e1 f7       	brne	.-8      	; 0xfe4 <startupSequence+0x48a>
     fec:	00 c0       	rjmp	.+0      	; 0xfee <startupSequence+0x494>
     fee:	00 00       	nop
     ff0:	f5 dc       	rcall	.-1558   	; 0x9dc <userActivity>

                _delay_ms(1500);
                user_active = userActivity();
     ff2:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
     ff6:	80 2f       	mov	r24, r16
     ff8:	10 0f       	add	r17, r16

                pos += dir;
     ffa:	11 f0       	breq	.+4      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffc:	15 30       	cpi	r17, 0x05	; 5
                if (pos == 0 || pos == (8 - 3)) {
     ffe:	49 f4       	brne	.+18     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    1000:	08 2f       	mov	r16, r24
    1002:	01 95       	neg	r16
                    dir = -dir;
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    1006:	01 e0       	ldi	r16, 0x01	; 1
    1008:	10 e0       	ldi	r17, 0x00	; 0
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
    100a:	0f 2e       	mov	r0, r31
    100c:	f7 e0       	ldi	r31, 0x07	; 7
            uint8_t pos = 0;
            int8_t  dir = +1;

            while (!user_active) {
                uint8_t mask = (0x07 << pos);
                led_setState(mask);
    100e:	ff 2e       	mov	r15, r31
    1010:	f0 2d       	mov	r31, r0
    1012:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
        case 7: {
            /* ---------------- 3 led bounce --------------- */
            uint8_t pos = 0;
            int8_t  dir = +1;

            while (!user_active) {
    1016:	88 23       	and	r24, r24
    1018:	d9 f2       	breq	.-74     	; 0xfd0 <startupSequence+0x476>
    101a:	09 dd       	rcall	.-1518   	; 0xa2e <led_allOff>
                pos += dir;
                if (pos == 0 || pos == (8 - 3)) {
                    dir = -dir;
                }
            }
            led_allOff();
    101c:	c3 c0       	rjmp	.+390    	; 0x11a4 <__EEPROM_REGION_LENGTH__+0x1a4>
    101e:	8f 2d       	mov	r24, r15
            uint16_t delay_ms = 2500;

            while (!user_active) {
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
                    for (uint8_t i = 0; i < 8; ++i) {
                        led_setState(1 << i);
    1020:	00 2e       	mov	r0, r16
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
    1024:	88 0f       	add	r24, r24
    1026:	0a 94       	dec	r0
    1028:	ea f7       	brpl	.-6      	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
    102a:	2d dd       	rcall	.-1446   	; 0xa86 <led_setState>
    102c:	c1 14       	cp	r12, r1
    102e:	d1 04       	cpc	r13, r1
    }
}


void delay_ms_var(uint16_t ms) {
    while (ms--) {
    1030:	49 f0       	breq	.+18     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1032:	c6 01       	movw	r24, r12
    1034:	e9 ef       	ldi	r30, 0xF9	; 249
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	31 97       	sbiw	r30, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <__EEPROM_REGION_LENGTH__+0x38>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    103e:	00 00       	nop
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	c1 f7       	brne	.-16     	; 0x1034 <__EEPROM_REGION_LENGTH__+0x34>
    1044:	cb dc       	rcall	.-1642   	; 0x9dc <userActivity>
    1046:	88 23       	and	r24, r24
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
                    for (uint8_t i = 0; i < 8; ++i) {
                        led_setState(1 << i);
                        delay_ms_var(delay_ms);
                        
                        if (userActivity()) {
    1048:	19 f0       	breq	.+6      	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
    104a:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
    104e:	05 c0       	rjmp	.+10     	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
                            user_active = true;
    1050:	0f 5f       	subi	r16, 0xFF	; 255
    1052:	1f 4f       	sbci	r17, 0xFF	; 255
                            break;
    1054:	08 30       	cpi	r16, 0x08	; 8
    1056:	11 05       	cpc	r17, r1
    1058:	11 f7       	brne	.-60     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
            /* ---------- warp-speed acceleration ---------- */
            uint16_t delay_ms = 2500;

            while (!user_active) {
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
                    for (uint8_t i = 0; i < 8; ++i) {
    105a:	f5 ef       	ldi	r31, 0xF5	; 245
    105c:	cf 16       	cp	r12, r31
    105e:	f1 e0       	ldi	r31, 0x01	; 1
                        if (userActivity()) {
                            user_active = true;
                            break;
                        }
                    }
                    if (delay_ms > 500)
    1060:	df 06       	cpc	r13, r31
    1062:	18 f0       	brcs	.+6      	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
    1064:	2a ef       	ldi	r18, 0xFA	; 250
    1066:	c2 1a       	sub	r12, r18
    1068:	d1 08       	sbc	r13, r1
                        delay_ms -= 250;
    106a:	ea 94       	dec	r14
    106c:	ee 20       	and	r14, r14
    106e:	21 f1       	breq	.+72     	; 0x10b8 <__EEPROM_REGION_LENGTH__+0xb8>
        case 8: {
            /* ---------- warp-speed acceleration ---------- */
            uint16_t delay_ms = 2500;

            while (!user_active) {
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
    1070:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
    1074:	81 11       	cpse	r24, r1
    1076:	20 c0       	rjmp	.+64     	; 0x10b8 <__EEPROM_REGION_LENGTH__+0xb8>
    1078:	00 e0       	ldi	r16, 0x00	; 0
    107a:	10 e0       	ldi	r17, 0x00	; 0
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
    107c:	d0 cf       	rjmp	.-96     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    107e:	00 e0       	ldi	r16, 0x00	; 0
    1080:	10 e0       	ldi	r17, 0x00	; 0
    1082:	8f 2d       	mov	r24, r15
    1084:	00 2e       	mov	r0, r16
                        delay_ms -= 250;
                }

                while (!user_active) {
                    for (uint8_t i = 0; i < 8; ++i) {
                        led_setState(1 << i);
    1086:	01 c0       	rjmp	.+2      	; 0x108a <__EEPROM_REGION_LENGTH__+0x8a>
    1088:	88 0f       	add	r24, r24
    108a:	0a 94       	dec	r0
    108c:	ea f7       	brpl	.-6      	; 0x1088 <__EEPROM_REGION_LENGTH__+0x88>
    108e:	fb dc       	rcall	.-1546   	; 0xa86 <led_setState>
    1090:	8f e9       	ldi	r24, 0x9F	; 159
    1092:	96 e8       	ldi	r25, 0x86	; 134
    1094:	e1 e0       	ldi	r30, 0x01	; 1
    1096:	81 50       	subi	r24, 0x01	; 1
    1098:	90 40       	sbci	r25, 0x00	; 0
    109a:	e0 40       	sbci	r30, 0x00	; 0
    109c:	e1 f7       	brne	.-8      	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <__EEPROM_REGION_LENGTH__+0xa0>
    10a0:	00 00       	nop
    10a2:	9c dc       	rcall	.-1736   	; 0x9dc <userActivity>
    10a4:	88 23       	and	r24, r24
    10a6:	19 f0       	breq	.+6      	; 0x10ae <__EEPROM_REGION_LENGTH__+0xae>
                        _delay_ms(500);
                        
                        if (userActivity()) {
    10a8:	b0 92 dc 21 	sts	0x21DC, r11	; 0x8021dc <user_active.5522>
    10ac:	05 c0       	rjmp	.+10     	; 0x10b8 <__EEPROM_REGION_LENGTH__+0xb8>
    10ae:	0f 5f       	subi	r16, 0xFF	; 255
                            user_active = true;
    10b0:	1f 4f       	sbci	r17, 0xFF	; 255
    10b2:	08 30       	cpi	r16, 0x08	; 8
                            break;
    10b4:	11 05       	cpc	r17, r1
    10b6:	29 f7       	brne	.-54     	; 0x1082 <__EEPROM_REGION_LENGTH__+0x82>
    10b8:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                    if (delay_ms > 500)
                        delay_ms -= 250;
                }

                while (!user_active) {
                    for (uint8_t i = 0; i < 8; ++i) {
    10bc:	88 23       	and	r24, r24
    10be:	f9 f2       	breq	.-66     	; 0x107e <__EEPROM_REGION_LENGTH__+0x7e>
                    }
                    if (delay_ms > 500)
                        delay_ms -= 250;
                }

                while (!user_active) {
    10c0:	0a c0       	rjmp	.+20     	; 0x10d6 <__EEPROM_REGION_LENGTH__+0xd6>
    10c2:	0f 2e       	mov	r0, r31
    10c4:	f4 ec       	ldi	r31, 0xC4	; 196
    10c6:	cf 2e       	mov	r12, r31
    10c8:	f9 e0       	ldi	r31, 0x09	; 9
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
    10ca:	df 2e       	mov	r13, r31
    10cc:	f0 2d       	mov	r31, r0
    10ce:	ff 24       	eor	r15, r15
    10d0:	f3 94       	inc	r15
    10d2:	bb 24       	eor	r11, r11
            uint16_t delay_ms = 2500;

            while (!user_active) {
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
                    for (uint8_t i = 0; i < 8; ++i) {
                        led_setState(1 << i);
    10d4:	b3 94       	inc	r11
    10d6:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                        delay_ms_var(delay_ms);
                        
                        if (userActivity()) {
                            user_active = true;
    10da:	81 11       	cpse	r24, r1
        }
        case 8: {
            /* ---------- warp-speed acceleration ---------- */
            uint16_t delay_ms = 2500;

            while (!user_active) {
    10dc:	08 c0       	rjmp	.+16     	; 0x10ee <__EEPROM_REGION_LENGTH__+0xee>
    10de:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
    10e2:	81 11       	cpse	r24, r1
    10e4:	e9 cf       	rjmp	.-46     	; 0x10b8 <__EEPROM_REGION_LENGTH__+0xb8>
    10e6:	68 94       	set
    10e8:	ee 24       	eor	r14, r14
    10ea:	e3 f8       	bld	r14, 3
    10ec:	c5 cf       	rjmp	.-118    	; 0x1078 <__EEPROM_REGION_LENGTH__+0x78>
    10ee:	9f dc       	rcall	.-1730   	; 0xa2e <led_allOff>
                            break;
                        }
                    }
                }
            }
            led_allOff();
    10f0:	59 c0       	rjmp	.+178    	; 0x11a4 <__EEPROM_REGION_LENGTH__+0x1a4>
            break;
        }
        default:
            break;
    }
}
    10f2:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
    10f6:	88 23       	and	r24, r24
    10f8:	59 f1       	breq	.+86     	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
    10fa:	9b cd       	rjmp	.-1226   	; 0xc32 <startupSequence+0xd8>
    10fc:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
    1100:	81 11       	cpse	r24, r1
    1102:	ff cd       	rjmp	.-1026   	; 0xd02 <startupSequence+0x1a8>
    1104:	ce 01       	movw	r24, r28
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	4c 01       	movw	r8, r24
    110a:	8e 01       	movw	r16, r28
    110c:	07 5f       	subi	r16, 0xF7	; 247
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
    1110:	c6 cd       	rjmp	.-1140   	; 0xc9e <startupSequence+0x144>
    1112:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
    1116:	81 11       	cpse	r24, r1
    1118:	54 ce       	rjmp	.-856    	; 0xdc2 <startupSequence+0x268>
    111a:	fe 01       	movw	r30, r28
    111c:	31 96       	adiw	r30, 0x01	; 1
    111e:	7f 01       	movw	r14, r30
    1120:	8e 01       	movw	r16, r28
    1122:	07 5f       	subi	r16, 0xF7	; 247
    1124:	1f 4f       	sbci	r17, 0xFF	; 255
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
    1126:	21 ce       	rjmp	.-958    	; 0xd6a <startupSequence+0x210>
    1128:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
    112c:	81 11       	cpse	r24, r1
    112e:	a5 ce       	rjmp	.-694    	; 0xe7a <startupSequence+0x320>
    1130:	8e 01       	movw	r16, r28
    1132:	0b 5f       	subi	r16, 0xFB	; 251
    1134:	1f 4f       	sbci	r17, 0xFF	; 255
    1136:	78 01       	movw	r14, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
    1138:	78 ce       	rjmp	.-784    	; 0xe2a <startupSequence+0x2d0>
    113a:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <user_active.5522>
    113e:	81 11       	cpse	r24, r1
    1140:	f9 ce       	rjmp	.-526    	; 0xf34 <startupSequence+0x3da>
    1142:	ce 01       	movw	r24, r28
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	7c 01       	movw	r14, r24
    1148:	8e 01       	movw	r16, r28
    114a:	07 5f       	subi	r16, 0xF7	; 247
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
    114e:	c9 ce       	rjmp	.-622    	; 0xee2 <startupSequence+0x388>
    1150:	18 85       	ldd	r17, Y+8	; 0x08
    1152:	81 2f       	mov	r24, r17
    1154:	72 dc       	rcall	.-1820   	; 0xa3a <led_on>
    1156:	9f e0       	ldi	r25, 0x0F	; 15
    1158:	e8 e9       	ldi	r30, 0x98	; 152
    115a:	f2 e0       	ldi	r31, 0x02	; 2
    115c:	91 50       	subi	r25, 0x01	; 1
    115e:	e0 40       	sbci	r30, 0x00	; 0
    1160:	f0 40       	sbci	r31, 0x00	; 0
    1162:	e1 f7       	brne	.-8      	; 0x115c <__EEPROM_REGION_LENGTH__+0x15c>
    1164:	00 c0       	rjmp	.+0      	; 0x1166 <__EEPROM_REGION_LENGTH__+0x166>
    1166:	00 00       	nop
                    _delay_ms(850);
                    led_off(seq[i]);
    1168:	81 2f       	mov	r24, r17
    116a:	6c dc       	rcall	.-1832   	; 0xa44 <led_off>
    116c:	37 dc       	rcall	.-1938   	; 0x9dc <userActivity>

                    user_active = userActivity();
    116e:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
    1172:	8e 01       	movw	r16, r28
    1174:	08 5f       	subi	r16, 0xF8	; 248
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	50 cd       	rjmp	.-1376   	; 0xc1a <startupSequence+0xc0>
    117a:	19 81       	ldd	r17, Y+1	; 0x01
    117c:	81 2f       	mov	r24, r17
    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
    117e:	5d dc       	rcall	.-1862   	; 0xa3a <led_on>
    1180:	2f e0       	ldi	r18, 0x0F	; 15
    1182:	88 e9       	ldi	r24, 0x98	; 152
    1184:	92 e0       	ldi	r25, 0x02	; 2
    1186:	21 50       	subi	r18, 0x01	; 1
    1188:	80 40       	sbci	r24, 0x00	; 0
    118a:	90 40       	sbci	r25, 0x00	; 0
    118c:	e1 f7       	brne	.-8      	; 0x1186 <__EEPROM_REGION_LENGTH__+0x186>
    118e:	00 c0       	rjmp	.+0      	; 0x1190 <__EEPROM_REGION_LENGTH__+0x190>
    1190:	00 00       	nop
    1192:	81 2f       	mov	r24, r17
    1194:	57 dc       	rcall	.-1874   	; 0xa44 <led_off>
    1196:	22 dc       	rcall	.-1980   	; 0x9dc <userActivity>
                    _delay_ms(850);
                    led_off(seq[i]);
    1198:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <user_active.5522>
    119c:	8e 01       	movw	r16, r28

                    user_active = userActivity();
    119e:	0e 5f       	subi	r16, 0xFE	; 254
    11a0:	1f 4f       	sbci	r17, 0xFF	; 255
    11a2:	20 cd       	rjmp	.-1472   	; 0xbe4 <startupSequence+0x8a>
    11a4:	28 96       	adiw	r28, 0x08	; 8
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
            break;
        }
        default:
            break;
    }
}
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	ff 90       	pop	r15
    11b4:	ef 90       	pop	r14
    11b6:	df 90       	pop	r13
    11b8:	cf 90       	pop	r12
    11ba:	bf 90       	pop	r11
    11bc:	af 90       	pop	r10
    11be:	9f 90       	pop	r9
    11c0:	8f 90       	pop	r8
    11c2:	7f 90       	pop	r7
    11c4:	08 95       	ret

000011c6 <io_ui_process>:

/* -------------------------------------- */
/* -------- UI process callbacks -------- */
/* -------------------------------------- */
void io_ui_process(void) {
	io_init();
    11c6:	f6 c8       	rjmp	.-3604   	; 0x3b4 <io_init>
    11c8:	08 95       	ret

000011ca <startup_ui_process>:
}

void startup_ui_process(uint8_t sequence) {
	startupSequence(sequence);
    11ca:	c7 cc       	rjmp	.-1650   	; 0xb5a <startupSequence>
    11cc:	08 95       	ret

000011ce <jstk_ui_process>:
}

void jstk_ui_process(void) {
    11ce:	cf 93       	push	r28
	uint8_t jstk_mask = jstk_readMask();
    11d0:	da d9       	rcall	.-3148   	; 0x586 <jstk_readMask>
    11d2:	c8 2f       	mov	r28, r24
	uint8_t jstk_testMode = PORTB.IN;
    11d4:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>

	if ((jstk_testMode & PIN4_bm) == 0) {
    11d8:	84 fd       	sbrc	r24, 4
    11da:	06 c0       	rjmp	.+12     	; 0x11e8 <jstk_ui_process+0x1a>
		if (jstk_mask) {
    11dc:	cc 23       	and	r28, r28
			led_allOff();
    11de:	29 f0       	breq	.+10     	; 0x11ea <jstk_ui_process+0x1c>
			led_on(jstk_mask);
    11e0:	26 dc       	rcall	.-1972   	; 0xa2e <led_allOff>
    11e2:	8c 2f       	mov	r24, r28
    11e4:	2a dc       	rcall	.-1964   	; 0xa3a <led_on>
		}
	} else {
		jstk_usbTask();
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <jstk_ui_process+0x1c>
    11e8:	f1 d9       	rcall	.-3102   	; 0x5cc <jstk_usbTask>
	}
}
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <kbd_ui_process>:

void kbd_ui_process(void) {
	keypad();
    11ee:	de cb       	rjmp	.-2116   	; 0x9ac <keypad>
    11f0:	08 95       	ret

000011f2 <ui_led_report>:
}

void ui_led_report(uint8_t const *mask) {
	led_setState(mask[0]);
    11f2:	fc 01       	movw	r30, r24
    11f4:	80 81       	ld	r24, Z
    11f6:	47 cc       	rjmp	.-1906   	; 0xa86 <led_setState>
    11f8:	08 95       	ret

000011fa <led_ui_process>:
}

void led_ui_process(void) {
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	00 d0       	rcall	.+0      	; 0x1204 <led_ui_process+0xa>
    1204:	1f 92       	push	r1
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
	uint16_t ledBits   = led_getMap();
    120a:	56 dc       	rcall	.-1876   	; 0xab8 <led_getMap>
    120c:	08 2f       	mov	r16, r24
    120e:	19 2f       	mov	r17, r25
	uint16_t keyBits   = kbd_getMap();
    1210:	37 db       	rcall	.-2450   	; 0x880 <kbd_getMap>
    1212:	09 83       	std	Y+1, r16	; 0x01
	
	uint8_t  report[4] = {
    1214:	1a 83       	std	Y+2, r17	; 0x02
    1216:	8b 83       	std	Y+3, r24	; 0x03
    1218:	9c 83       	std	Y+4, r25	; 0x04
    121a:	ce 01       	movw	r24, r28
		(uint8_t)( ledBits       & 0xFF),
		(uint8_t)((ledBits >> 8) & 0xFF),
		(uint8_t)( keyBits       & 0xFF),
		(uint8_t)((keyBits >> 8) & 0xFF)
	};
	udi_hid_led_send_report_in(report);
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	8b d8       	rcall	.-3818   	; 0x336 <udi_hid_led_send_report_in>
    1220:	24 96       	adiw	r28, 0x04	; 4
}
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	08 95       	ret

00001230 <status_ui_process>:
    1230:	74 cc       	rjmp	.-1816   	; 0xb1a <testIndicator>

void status_ui_process(void) {
	testIndicator();
    1232:	08 95       	ret

00001234 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	27 97       	sbiw	r28, 0x07	; 7
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	8f ef       	ldi	r24, 0xFF	; 255
    1248:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
    124c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
    1250:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
    1254:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
    1258:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
    125c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
    1260:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
    1264:	65 e0       	ldi	r22, 0x05	; 5
    1266:	81 e4       	ldi	r24, 0x41	; 65
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	7a d6       	rcall	.+3316   	; 0x1f60 <ccp_write_io>
    126c:	6c e1       	ldi	r22, 0x1C	; 28
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	6c d6       	rcall	.+3288   	; 0x1f4c <nvm_read_byte>
    1274:	8a 83       	std	Y+2, r24	; 0x02
    1276:	6d e1       	ldi	r22, 0x1D	; 29
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	67 d6       	rcall	.+3278   	; 0x1f4c <nvm_read_byte>
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	21 f4       	brne	.+8      	; 0x1290 <sysclk_init+0x5c>
    1288:	80 e4       	ldi	r24, 0x40	; 64
    128a:	93 e2       	ldi	r25, 0x23	; 35
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	8b 83       	std	Y+3, r24	; 0x03
    1296:	9c 83       	std	Y+4, r25	; 0x04
    1298:	e0 e6       	ldi	r30, 0x60	; 96
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	82 83       	std	Z+2, r24	; 0x02
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	83 83       	std	Z+3, r24	; 0x03
    12a2:	8f b7       	in	r24, 0x3f	; 63
    12a4:	8e 83       	std	Y+6, r24	; 0x06
    12a6:	f8 94       	cli
    12a8:	9e 81       	ldd	r25, Y+6	; 0x06
    12aa:	e0 e5       	ldi	r30, 0x50	; 80
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	82 60       	ori	r24, 0x02	; 2
    12b2:	80 83       	st	Z, r24
    12b4:	9f bf       	out	0x3f, r25	; 63
    12b6:	81 81       	ldd	r24, Z+1	; 0x01
    12b8:	81 ff       	sbrs	r24, 1
    12ba:	fd cf       	rjmp	.-6      	; 0x12b6 <sysclk_init+0x82>
    12bc:	8f b7       	in	r24, 0x3f	; 63
    12be:	8f 83       	std	Y+7, r24	; 0x07
    12c0:	f8 94       	cli
    12c2:	9f 81       	ldd	r25, Y+7	; 0x07
    12c4:	00 e5       	ldi	r16, 0x50	; 80
    12c6:	10 e0       	ldi	r17, 0x00	; 0
    12c8:	d8 01       	movw	r26, r16
    12ca:	16 96       	adiw	r26, 0x06	; 6
    12cc:	8c 91       	ld	r24, X
    12ce:	16 97       	sbiw	r26, 0x06	; 6
    12d0:	89 7f       	andi	r24, 0xF9	; 249
    12d2:	16 96       	adiw	r26, 0x06	; 6
    12d4:	8c 93       	st	X, r24
    12d6:	16 97       	sbiw	r26, 0x06	; 6
    12d8:	e0 e6       	ldi	r30, 0x60	; 96
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 e8       	ldi	r24, 0x80	; 128
    12de:	85 83       	std	Z+5, r24	; 0x05
    12e0:	8b eb       	ldi	r24, 0xBB	; 187
    12e2:	86 83       	std	Z+6, r24	; 0x06
    12e4:	16 96       	adiw	r26, 0x06	; 6
    12e6:	8c 91       	ld	r24, X
    12e8:	16 97       	sbiw	r26, 0x06	; 6
    12ea:	84 60       	ori	r24, 0x04	; 4
    12ec:	16 96       	adiw	r26, 0x06	; 6
    12ee:	8c 93       	st	X, r24
    12f0:	80 81       	ld	r24, Z
    12f2:	81 60       	ori	r24, 0x01	; 1
    12f4:	80 83       	st	Z, r24
    12f6:	9f bf       	out	0x3f, r25	; 63
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	80 e4       	ldi	r24, 0x40	; 64
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	30 d6       	rcall	.+3168   	; 0x1f60 <ccp_write_io>
    1300:	8f b7       	in	r24, 0x3f	; 63
    1302:	8d 83       	std	Y+5, r24	; 0x05
    1304:	f8 94       	cli
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	f8 01       	movw	r30, r16
    130a:	80 81       	ld	r24, Z
    130c:	8e 7f       	andi	r24, 0xFE	; 254
    130e:	80 83       	st	Z, r24
    1310:	9f bf       	out	0x3f, r25	; 63
    1312:	27 96       	adiw	r28, 0x07	; 7
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	08 95       	ret

00001322 <sysclk_enable_module>:
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	1f 92       	push	r1
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	9f b7       	in	r25, 0x3f	; 63
    132e:	99 83       	std	Y+1, r25	; 0x01
    1330:	f8 94       	cli
    1332:	99 81       	ldd	r25, Y+1	; 0x01
    1334:	e8 2f       	mov	r30, r24
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	e0 59       	subi	r30, 0x90	; 144
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	60 95       	com	r22
    133e:	80 81       	ld	r24, Z
    1340:	68 23       	and	r22, r24
    1342:	60 83       	st	Z, r22
    1344:	9f bf       	out	0x3f, r25	; 63
    1346:	0f 90       	pop	r0
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	1f 92       	push	r1
    1354:	1f 92       	push	r1
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    135a:	86 30       	cpi	r24, 0x06	; 6
    135c:	11 f0       	breq	.+4      	; 0x1362 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1362:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1364:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1368:	81 fd       	sbrc	r24, 1
    136a:	2a c0       	rjmp	.+84     	; 0x13c0 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    136c:	8f b7       	in	r24, 0x3f	; 63
    136e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1370:	f8 94       	cli
	return flags;
    1372:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1374:	e0 e5       	ldi	r30, 0x50	; 80
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	82 60       	ori	r24, 0x02	; 2
    137c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    137e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1380:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1382:	81 ff       	sbrs	r24, 1
    1384:	fd cf       	rjmp	.-6      	; 0x1380 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1386:	8f b7       	in	r24, 0x3f	; 63
    1388:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    138a:	f8 94       	cli
	return flags;
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    138e:	a0 e5       	ldi	r26, 0x50	; 80
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	16 96       	adiw	r26, 0x06	; 6
    1394:	8c 91       	ld	r24, X
    1396:	16 97       	sbiw	r26, 0x06	; 6
    1398:	89 7f       	andi	r24, 0xF9	; 249
    139a:	16 96       	adiw	r26, 0x06	; 6
    139c:	8c 93       	st	X, r24
    139e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    13a0:	e0 e6       	ldi	r30, 0x60	; 96
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 e8       	ldi	r24, 0x80	; 128
    13a6:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    13a8:	8b eb       	ldi	r24, 0xBB	; 187
    13aa:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    13ac:	16 96       	adiw	r26, 0x06	; 6
    13ae:	8c 91       	ld	r24, X
    13b0:	16 97       	sbiw	r26, 0x06	; 6
    13b2:	84 60       	ori	r24, 0x04	; 4
    13b4:	16 96       	adiw	r26, 0x06	; 6
    13b6:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    13b8:	80 81       	ld	r24, Z
    13ba:	81 60       	ori	r24, 0x01	; 1
    13bc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13be:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    13c0:	63 60       	ori	r22, 0x03	; 3
    13c2:	84 e4       	ldi	r24, 0x44	; 68
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	cc d5       	rcall	.+2968   	; 0x1f60 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    13c8:	60 e4       	ldi	r22, 0x40	; 64
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	aa df       	rcall	.-172    	; 0x1322 <sysclk_enable_module>
}
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

000013d8 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	08 95       	ret

000013dc <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    13dc:	30 91 e4 23 	lds	r19, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    13e0:	20 91 e5 23 	lds	r18, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    13e4:	82 2f       	mov	r24, r18
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	03 97       	sbiw	r24, 0x03	; 3
    13ea:	b1 f4       	brne	.+44     	; 0x1418 <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    13ec:	31 11       	cpse	r19, r1
    13ee:	16 c0       	rjmp	.+44     	; 0x141c <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
    13f0:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    13f4:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    13f8:	89 2b       	or	r24, r25
    13fa:	91 f4       	brne	.+36     	; 0x1420 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
    13fc:	e2 ee       	ldi	r30, 0xE2	; 226
    13fe:	f3 e2       	ldi	r31, 0x23	; 35
    1400:	80 ef       	ldi	r24, 0xF0	; 240
    1402:	91 e2       	ldi	r25, 0x21	; 33
    1404:	80 87       	std	Z+8, r24	; 0x08
    1406:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    1408:	82 e1       	ldi	r24, 0x12	; 18
    140a:	9a e0       	ldi	r25, 0x0A	; 10
    140c:	84 87       	std	Z+12, r24	; 0x0c
    140e:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
    1410:	12 86       	std	Z+10, r1	; 0x0a
    1412:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	08 95       	ret
	}
	return false;
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	08 95       	ret
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	08 95       	ret
    1420:	80 e0       	ldi	r24, 0x00	; 0
}
    1422:	08 95       	ret

00001424 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
    1424:	08 95       	ret

00001426 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udi_hid_generic_b_report_in_free>
    142c:	08 95       	ret

0000142e <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
    142e:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
    1432:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
    143c:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <main_generic_enable>
}
    1440:	08 95       	ret

00001442 <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
    1442:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <main_generic_disable>
    1446:	08 95       	ret

00001448 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
    1448:	2e ee       	ldi	r18, 0xEE	; 238
    144a:	39 e0       	ldi	r19, 0x09	; 9
    144c:	46 ea       	ldi	r20, 0xA6	; 166
    144e:	50 e2       	ldi	r21, 0x20	; 32
    1450:	64 ef       	ldi	r22, 0xF4	; 244
    1452:	71 e2       	ldi	r23, 0x21	; 33
    1454:	86 ef       	ldi	r24, 0xF6	; 246
    1456:	91 e2       	ldi	r25, 0x21	; 33
    1458:	f2 c0       	rjmp	.+484    	; 0x163e <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
    145a:	08 95       	ret

0000145c <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	1f 92       	push	r1
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
    146e:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udi_hid_generic_b_report_in_free>
    1472:	88 23       	and	r24, r24
    1474:	09 f1       	breq	.+66     	; 0x14b8 <udi_hid_generic_send_report_in+0x5c>
    1476:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1478:	8f b7       	in	r24, 0x3f	; 63
    147a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    147c:	f8 94       	cli
	return flags;
    147e:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
    1480:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <udi_hid_generic_report_feature>
    1484:	10 92 f1 21 	sts	0x21F1, r1	; 0x8021f1 <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
    1488:	80 81       	ld	r24, Z
    148a:	91 81       	ldd	r25, Z+1	; 0x01
    148c:	80 93 f0 21 	sts	0x21F0, r24	; 0x8021f0 <udi_hid_generic_report_feature>
    1490:	90 93 f1 21 	sts	0x21F1, r25	; 0x8021f1 <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    1494:	03 e1       	ldi	r16, 0x13	; 19
    1496:	1a e0       	ldi	r17, 0x0A	; 10
    1498:	22 e0       	ldi	r18, 0x02	; 2
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 ef       	ldi	r20, 0xF0	; 240
    149e:	51 e2       	ldi	r21, 0x21	; 33
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	82 e8       	ldi	r24, 0x82	; 130
    14a4:	0e 94 74 14 	call	0x28e8	; 0x28e8 <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	89 27       	eor	r24, r25
    14ac:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14b0:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
    14b2:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udi_hid_generic_b_report_in_free>
    14b6:	89 27       	eor	r24, r25

}
    14b8:	0f 90       	pop	r0
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	08 95       	ret

000014c6 <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	08 95       	ret

000014ca <udi_hid_kbd_setreport>:
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	08 95       	ret

000014ce <udi_hid_kbd_enable>:
    14ce:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <udi_hid_kbd_rate>
    14d2:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udi_hid_kbd_protocol>
    14d6:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udi_hid_kbd_b_report_trans_ongoing>
    14da:	88 e0       	ldi	r24, 0x08	; 8
    14dc:	e1 e0       	ldi	r30, 0x01	; 1
    14de:	f2 e2       	ldi	r31, 0x22	; 34
    14e0:	df 01       	movw	r26, r30
    14e2:	1d 92       	st	X+, r1
    14e4:	8a 95       	dec	r24
    14e6:	e9 f7       	brne	.-6      	; 0x14e2 <udi_hid_kbd_enable+0x14>
    14e8:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udi_hid_kbd_b_report_valid>
    14ec:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <main_kbd_enable>
    14f0:	08 95       	ret

000014f2 <udi_hid_kbd_disable>:
    14f2:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <main_kbd_disable>
    14f6:	08 95       	ret

000014f8 <udi_hid_kbd_setup>:
    14f8:	25 e6       	ldi	r18, 0x65	; 101
    14fa:	3a e0       	ldi	r19, 0x0A	; 10
    14fc:	48 ec       	ldi	r20, 0xC8	; 200
    14fe:	50 e2       	ldi	r21, 0x20	; 32
    1500:	6a e0       	ldi	r22, 0x0A	; 10
    1502:	72 e2       	ldi	r23, 0x22	; 34
    1504:	8c e0       	ldi	r24, 0x0C	; 12
    1506:	92 e2       	ldi	r25, 0x22	; 34
    1508:	9a c0       	rjmp	.+308    	; 0x163e <udi_hid_setup>
    150a:	08 95       	ret

0000150c <udi_hid_kbd_send_report>:
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <udi_hid_kbd_b_report_trans_ongoing>
    1514:	81 11       	cpse	r24, r1
    1516:	18 c0       	rjmp	.+48     	; 0x1548 <udi_hid_kbd_send_report+0x3c>
    1518:	88 e0       	ldi	r24, 0x08	; 8
    151a:	e1 e0       	ldi	r30, 0x01	; 1
    151c:	f2 e2       	ldi	r31, 0x22	; 34
    151e:	a8 ef       	ldi	r26, 0xF8	; 248
    1520:	b1 e2       	ldi	r27, 0x21	; 33
    1522:	01 90       	ld	r0, Z+
    1524:	0d 92       	st	X+, r0
    1526:	8a 95       	dec	r24
    1528:	e1 f7       	brne	.-8      	; 0x1522 <udi_hid_kbd_send_report+0x16>
    152a:	10 92 09 22 	sts	0x2209, r1	; 0x802209 <udi_hid_kbd_b_report_valid>
    152e:	08 ea       	ldi	r16, 0xA8	; 168
    1530:	1a e0       	ldi	r17, 0x0A	; 10
    1532:	28 e0       	ldi	r18, 0x08	; 8
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	48 ef       	ldi	r20, 0xF8	; 248
    1538:	51 e2       	ldi	r21, 0x21	; 33
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	81 e8       	ldi	r24, 0x81	; 129
    153e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <udd_ep_run>
    1542:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <udi_hid_kbd_b_report_trans_ongoing>
    1546:	01 c0       	rjmp	.+2      	; 0x154a <udi_hid_kbd_send_report+0x3e>
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	08 95       	ret

00001550 <udi_hid_kbd_report_sent>:
    1550:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udi_hid_kbd_b_report_trans_ongoing>
    1554:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <udi_hid_kbd_b_report_valid>
    1558:	81 11       	cpse	r24, r1
    155a:	d8 cf       	rjmp	.-80     	; 0x150c <udi_hid_kbd_send_report>
    155c:	08 95       	ret

0000155e <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	1f 92       	push	r1
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    156a:	9f b7       	in	r25, 0x3f	; 63
    156c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    156e:	f8 94       	cli
	return flags;
    1570:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    1572:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <udi_hid_kbd_report+0x2>
    1576:	99 23       	and	r25, r25
    1578:	41 f0       	breq	.+16     	; 0x158a <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    157a:	89 17       	cp	r24, r25
    157c:	a9 f0       	breq	.+42     	; 0x15a8 <udi_hid_kbd_up+0x4a>
    157e:	e4 e0       	ldi	r30, 0x04	; 4
    1580:	f2 e2       	ldi	r31, 0x22	; 34
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1582:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    1584:	21 91       	ld	r18, Z+
    1586:	21 11       	cpse	r18, r1
    1588:	02 c0       	rjmp	.+4      	; 0x158e <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    158a:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    158c:	1e c0       	rjmp	.+60     	; 0x15ca <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    158e:	28 17       	cp	r18, r24
    1590:	21 f0       	breq	.+8      	; 0x159a <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1592:	9f 5f       	subi	r25, 0xFF	; 255
    1594:	98 30       	cpi	r25, 0x08	; 8
    1596:	b1 f7       	brne	.-20     	; 0x1584 <udi_hid_kbd_up+0x26>
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    159a:	98 30       	cpi	r25, 0x08	; 8
    159c:	19 f0       	breq	.+6      	; 0x15a4 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    159e:	97 30       	cpi	r25, 0x07	; 7
    15a0:	20 f0       	brcs	.+8      	; 0x15aa <udi_hid_kbd_up+0x4c>
    15a2:	0c c0       	rjmp	.+24     	; 0x15bc <udi_hid_kbd_up+0x5e>
    15a4:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    15a6:	11 c0       	rjmp	.+34     	; 0x15ca <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    15a8:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    15aa:	e9 2f       	mov	r30, r25
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	ef 5f       	subi	r30, 0xFF	; 255
    15b0:	fd 4d       	sbci	r31, 0xDD	; 221
    15b2:	81 81       	ldd	r24, Z+1	; 0x01
    15b4:	80 83       	st	Z, r24
		i++;
    15b6:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    15b8:	97 30       	cpi	r25, 0x07	; 7
    15ba:	b9 f7       	brne	.-18     	; 0x15aa <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    15bc:	10 92 08 22 	sts	0x2208, r1	; 0x802208 <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    15c6:	a2 df       	rcall	.-188    	; 0x150c <udi_hid_kbd_send_report>
    15c8:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	0f 90       	pop	r0
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	08 95       	ret

000015d6 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	1f 92       	push	r1
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15e2:	9f b7       	in	r25, 0x3f	; 63
    15e4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    15e6:	f8 94       	cli
	return flags;
    15e8:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    15ea:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <udi_hid_kbd_report+0x2>
    15ee:	99 23       	and	r25, r25
    15f0:	b1 f0       	breq	.+44     	; 0x161e <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    15f2:	89 17       	cp	r24, r25
    15f4:	41 f0       	breq	.+16     	; 0x1606 <udi_hid_kbd_down+0x30>
    15f6:	a4 e0       	ldi	r26, 0x04	; 4
    15f8:	b2 e2       	ldi	r27, 0x22	; 34
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    15fa:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    15fc:	9d 91       	ld	r25, X+
    15fe:	99 23       	and	r25, r25
    1600:	49 f0       	breq	.+18     	; 0x1614 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1602:	98 13       	cpse	r25, r24
    1604:	03 c0       	rjmp	.+6      	; 0x160c <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1606:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    160c:	ef 5f       	subi	r30, 0xFF	; 255
    160e:	e8 30       	cpi	r30, 0x08	; 8
    1610:	a9 f7       	brne	.-22     	; 0x15fc <udi_hid_kbd_down+0x26>
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    1614:	e8 30       	cpi	r30, 0x08	; 8
    1616:	21 f4       	brne	.+8      	; 0x1620 <udi_hid_kbd_down+0x4a>
    1618:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	0b c0       	rjmp	.+22     	; 0x1634 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    161e:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	ef 5f       	subi	r30, 0xFF	; 255
    1624:	fd 4d       	sbci	r31, 0xDD	; 221
    1626:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    162e:	6e df       	rcall	.-292    	; 0x150c <udi_hid_kbd_send_report>
    1630:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    1632:	81 e0       	ldi	r24, 0x01	; 1
}
    1634:	0f 90       	pop	r0
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	08 95       	ret

0000163e <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	dc 01       	movw	r26, r24
    1644:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    1646:	90 91 e2 23 	lds	r25, 0x23E2	; 0x8023e2 <udd_g_ctrlreq>
    164a:	99 23       	and	r25, r25
    164c:	0c f0       	brlt	.+2      	; 0x1650 <udi_hid_setup+0x12>
    164e:	68 c0       	rjmp	.+208    	; 0x1720 <udi_hid_setup+0xe2>
    1650:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1652:	09 f0       	breq	.+2      	; 0x1656 <udi_hid_setup+0x18>
    1654:	45 c0       	rjmp	.+138    	; 0x16e0 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1656:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    165a:	86 30       	cpi	r24, 0x06	; 6
    165c:	09 f0       	breq	.+2      	; 0x1660 <udi_hid_setup+0x22>
    165e:	40 c0       	rjmp	.+128    	; 0x16e0 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1660:	76 d1       	rcall	.+748    	; 0x194e <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1662:	dc 01       	movw	r26, r24
    1664:	1a 96       	adiw	r26, 0x0a	; 10
    1666:	2c 91       	ld	r18, X
    1668:	1a 97       	sbiw	r26, 0x0a	; 10
    166a:	21 32       	cpi	r18, 0x21	; 33
    166c:	09 f0       	breq	.+2      	; 0x1670 <udi_hid_setup+0x32>
    166e:	77 c0       	rjmp	.+238    	; 0x175e <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1670:	20 91 e5 23 	lds	r18, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	21 32       	cpi	r18, 0x21	; 33
    1678:	31 05       	cpc	r19, r1
    167a:	b1 f4       	brne	.+44     	; 0x16a8 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    167c:	9c 01       	movw	r18, r24
    167e:	27 5f       	subi	r18, 0xF7	; 247
    1680:	3f 4f       	sbci	r19, 0xFF	; 255
    1682:	20 93 ea 23 	sts	0x23EA, r18	; 0x8023ea <udd_g_ctrlreq+0x8>
    1686:	30 93 eb 23 	sts	0x23EB, r19	; 0x8023eb <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    168a:	e2 ee       	ldi	r30, 0xE2	; 226
    168c:	f3 e2       	ldi	r31, 0x23	; 35
    168e:	19 96       	adiw	r26, 0x09	; 9
    1690:	8c 91       	ld	r24, X
    1692:	26 81       	ldd	r18, Z+6	; 0x06
    1694:	37 81       	ldd	r19, Z+7	; 0x07
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	28 17       	cp	r18, r24
    169a:	39 07       	cpc	r19, r25
    169c:	08 f4       	brcc	.+2      	; 0x16a0 <udi_hid_setup+0x62>
    169e:	c9 01       	movw	r24, r18
    16a0:	82 87       	std	Z+10, r24	; 0x0a
    16a2:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	68 c0       	rjmp	.+208    	; 0x1778 <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    16a8:	fc 01       	movw	r30, r24
    16aa:	47 85       	ldd	r20, Z+15	; 0x0f
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	42 17       	cp	r20, r18
    16b0:	53 07       	cpc	r21, r19
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <udi_hid_setup+0x78>
    16b4:	56 c0       	rjmp	.+172    	; 0x1762 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    16b6:	c0 93 ea 23 	sts	0x23EA, r28	; 0x8023ea <udd_g_ctrlreq+0x8>
    16ba:	d0 93 eb 23 	sts	0x23EB, r29	; 0x8023eb <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    16be:	e2 ee       	ldi	r30, 0xE2	; 226
    16c0:	f3 e2       	ldi	r31, 0x23	; 35
    16c2:	26 81       	ldd	r18, Z+6	; 0x06
    16c4:	37 81       	ldd	r19, Z+7	; 0x07
    16c6:	dc 01       	movw	r26, r24
    16c8:	50 96       	adiw	r26, 0x10	; 16
    16ca:	8d 91       	ld	r24, X+
    16cc:	9c 91       	ld	r25, X
    16ce:	51 97       	sbiw	r26, 0x11	; 17
    16d0:	28 17       	cp	r18, r24
    16d2:	39 07       	cpc	r19, r25
    16d4:	08 f4       	brcc	.+2      	; 0x16d8 <udi_hid_setup+0x9a>
    16d6:	c9 01       	movw	r24, r18
    16d8:	82 87       	std	Z+10, r24	; 0x0a
    16da:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	4c c0       	rjmp	.+152    	; 0x1778 <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    16e0:	90 32       	cpi	r25, 0x20	; 32
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <udi_hid_setup+0xa8>
    16e4:	40 c0       	rjmp	.+128    	; 0x1766 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    16e6:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	39 f0       	breq	.+14     	; 0x16fc <udi_hid_setup+0xbe>
    16ee:	83 30       	cpi	r24, 0x03	; 3
    16f0:	71 f0       	breq	.+28     	; 0x170e <udi_hid_setup+0xd0>
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	d1 f5       	brne	.+116    	; 0x176a <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    16f6:	f9 01       	movw	r30, r18
    16f8:	19 95       	eicall
    16fa:	3e c0       	rjmp	.+124    	; 0x1778 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    16fc:	e2 ee       	ldi	r30, 0xE2	; 226
    16fe:	f3 e2       	ldi	r31, 0x23	; 35
    1700:	a0 87       	std	Z+8, r26	; 0x08
    1702:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	82 87       	std	Z+10, r24	; 0x0a
    170a:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    170c:	35 c0       	rjmp	.+106    	; 0x1778 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    170e:	e2 ee       	ldi	r30, 0xE2	; 226
    1710:	f3 e2       	ldi	r31, 0x23	; 35
    1712:	60 87       	std	Z+8, r22	; 0x08
    1714:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	82 87       	std	Z+10, r24	; 0x0a
    171c:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    171e:	2c c0       	rjmp	.+88     	; 0x1778 <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1720:	90 76       	andi	r25, 0x60	; 96
    1722:	90 32       	cpi	r25, 0x20	; 32
    1724:	21 f5       	brne	.+72     	; 0x176e <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1726:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    172a:	8a 30       	cpi	r24, 0x0A	; 10
    172c:	39 f0       	breq	.+14     	; 0x173c <udi_hid_setup+0xfe>
    172e:	8b 30       	cpi	r24, 0x0B	; 11
    1730:	51 f0       	breq	.+20     	; 0x1746 <udi_hid_setup+0x108>
    1732:	89 30       	cpi	r24, 0x09	; 9
    1734:	f1 f4       	brne	.+60     	; 0x1772 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    1736:	f9 01       	movw	r30, r18
    1738:	19 95       	eicall
    173a:	1e c0       	rjmp	.+60     	; 0x1778 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    173c:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1740:	8c 93       	st	X, r24
				return true;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	19 c0       	rjmp	.+50     	; 0x1778 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    1746:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    174a:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    174e:	89 2b       	or	r24, r25
    1750:	91 f4       	brne	.+36     	; 0x1776 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    1752:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1756:	db 01       	movw	r26, r22
    1758:	8c 93       	st	X, r24
				return true;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	0d c0       	rjmp	.+26     	; 0x1778 <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	0b c0       	rjmp	.+22     	; 0x1778 <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	09 c0       	rjmp	.+18     	; 0x1778 <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	07 c0       	rjmp	.+14     	; 0x1778 <udi_hid_setup+0x13a>
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	05 c0       	rjmp	.+10     	; 0x1778 <udi_hid_setup+0x13a>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	03 c0       	rjmp	.+6      	; 0x1778 <udi_hid_setup+0x13a>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    1776:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	08 95       	ret

0000177e <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    177e:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <udc_ptr_conf>
    1782:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1786:	01 90       	ld	r0, Z+
    1788:	f0 81       	ld	r31, Z
    178a:	e0 2d       	mov	r30, r0
    178c:	22 81       	ldd	r18, Z+2	; 0x02
    178e:	33 81       	ldd	r19, Z+3	; 0x03
    1790:	2e 0f       	add	r18, r30
    1792:	3f 1f       	adc	r19, r31
    1794:	fc 01       	movw	r30, r24
    1796:	40 81       	ld	r20, Z
    1798:	e4 0f       	add	r30, r20
    179a:	f1 1d       	adc	r31, r1
    179c:	e2 17       	cp	r30, r18
    179e:	f3 07       	cpc	r31, r19
    17a0:	a0 f4       	brcc	.+40     	; 0x17ca <udc_next_desc_in_iface+0x4c>
    17a2:	81 81       	ldd	r24, Z+1	; 0x01
    17a4:	84 30       	cpi	r24, 0x04	; 4
    17a6:	a1 f0       	breq	.+40     	; 0x17d0 <udc_next_desc_in_iface+0x52>
    17a8:	86 13       	cpse	r24, r22
    17aa:	06 c0       	rjmp	.+12     	; 0x17b8 <udc_next_desc_in_iface+0x3a>
    17ac:	14 c0       	rjmp	.+40     	; 0x17d6 <udc_next_desc_in_iface+0x58>
    17ae:	81 81       	ldd	r24, Z+1	; 0x01
    17b0:	84 30       	cpi	r24, 0x04	; 4
    17b2:	a1 f0       	breq	.+40     	; 0x17dc <udc_next_desc_in_iface+0x5e>
    17b4:	86 17       	cp	r24, r22
    17b6:	a9 f0       	breq	.+42     	; 0x17e2 <udc_next_desc_in_iface+0x64>
    17b8:	80 81       	ld	r24, Z
    17ba:	e8 0f       	add	r30, r24
    17bc:	f1 1d       	adc	r31, r1
    17be:	e2 17       	cp	r30, r18
    17c0:	f3 07       	cpc	r31, r19
    17c2:	a8 f3       	brcs	.-22     	; 0x17ae <udc_next_desc_in_iface+0x30>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	08 95       	ret
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	08 95       	ret
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	08 95       	ret
    17d6:	8e 2f       	mov	r24, r30
    17d8:	9f 2f       	mov	r25, r31
    17da:	08 95       	ret
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	08 95       	ret
    17e2:	8e 2f       	mov	r24, r30
    17e4:	9f 2f       	mov	r25, r31
    17e6:	08 95       	ret

000017e8 <udc_valid_address>:
    17e8:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    17ec:	8f 77       	andi	r24, 0x7F	; 127
    17ee:	95 c7       	rjmp	.+3882   	; 0x271a <udd_set_address>
    17f0:	08 95       	ret

000017f2 <udc_update_iface_desc>:
    17f2:	90 91 14 22 	lds	r25, 0x2214	; 0x802214 <udc_num_configuration>
    17f6:	99 23       	and	r25, r25
    17f8:	81 f1       	breq	.+96     	; 0x185a <udc_update_iface_desc+0x68>
    17fa:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <udc_ptr_conf>
    17fe:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1802:	01 90       	ld	r0, Z+
    1804:	f0 81       	ld	r31, Z
    1806:	e0 2d       	mov	r30, r0
    1808:	94 81       	ldd	r25, Z+4	; 0x04
    180a:	89 17       	cp	r24, r25
    180c:	40 f5       	brcc	.+80     	; 0x185e <udc_update_iface_desc+0x6c>
    180e:	e0 93 10 22 	sts	0x2210, r30	; 0x802210 <udc_ptr_iface>
    1812:	f0 93 11 22 	sts	0x2211, r31	; 0x802211 <udc_ptr_iface+0x1>
    1816:	22 81       	ldd	r18, Z+2	; 0x02
    1818:	33 81       	ldd	r19, Z+3	; 0x03
    181a:	2e 0f       	add	r18, r30
    181c:	3f 1f       	adc	r19, r31
    181e:	e2 17       	cp	r30, r18
    1820:	f3 07       	cpc	r31, r19
    1822:	f8 f4       	brcc	.+62     	; 0x1862 <udc_update_iface_desc+0x70>
    1824:	91 81       	ldd	r25, Z+1	; 0x01
    1826:	94 30       	cpi	r25, 0x04	; 4
    1828:	61 f4       	brne	.+24     	; 0x1842 <udc_update_iface_desc+0x50>
    182a:	92 81       	ldd	r25, Z+2	; 0x02
    182c:	89 13       	cpse	r24, r25
    182e:	09 c0       	rjmp	.+18     	; 0x1842 <udc_update_iface_desc+0x50>
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	96 13       	cpse	r25, r22
    1834:	06 c0       	rjmp	.+12     	; 0x1842 <udc_update_iface_desc+0x50>
    1836:	e0 93 10 22 	sts	0x2210, r30	; 0x802210 <udc_ptr_iface>
    183a:	f0 93 11 22 	sts	0x2211, r31	; 0x802211 <udc_ptr_iface+0x1>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	08 95       	ret
    1842:	90 81       	ld	r25, Z
    1844:	e9 0f       	add	r30, r25
    1846:	f1 1d       	adc	r31, r1
    1848:	e2 17       	cp	r30, r18
    184a:	f3 07       	cpc	r31, r19
    184c:	58 f3       	brcs	.-42     	; 0x1824 <udc_update_iface_desc+0x32>
    184e:	e0 93 10 22 	sts	0x2210, r30	; 0x802210 <udc_ptr_iface>
    1852:	f0 93 11 22 	sts	0x2211, r31	; 0x802211 <udc_ptr_iface+0x1>
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	08 95       	ret
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	08 95       	ret
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	08 95       	ret
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	08 95       	ret

00001866 <udc_iface_disable>:
    1866:	ef 92       	push	r14
    1868:	ff 92       	push	r15
    186a:	1f 93       	push	r17
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	c8 2f       	mov	r28, r24
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	be df       	rcall	.-132    	; 0x17f2 <udc_update_iface_desc>
    1876:	18 2f       	mov	r17, r24
    1878:	88 23       	and	r24, r24
    187a:	81 f1       	breq	.+96     	; 0x18dc <udc_iface_disable+0x76>
    187c:	a0 91 12 22 	lds	r26, 0x2212	; 0x802212 <udc_ptr_conf>
    1880:	b0 91 13 22 	lds	r27, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1884:	ec 2f       	mov	r30, r28
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	ee 0f       	add	r30, r30
    188a:	ff 1f       	adc	r31, r31
    188c:	12 96       	adiw	r26, 0x02	; 2
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	13 97       	sbiw	r26, 0x03	; 3
    1894:	e8 0f       	add	r30, r24
    1896:	f9 1f       	adc	r31, r25
    1898:	e0 80       	ld	r14, Z
    189a:	f1 80       	ldd	r15, Z+1	; 0x01
    189c:	d7 01       	movw	r26, r14
    189e:	16 96       	adiw	r26, 0x06	; 6
    18a0:	ed 91       	ld	r30, X+
    18a2:	fc 91       	ld	r31, X
    18a4:	17 97       	sbiw	r26, 0x07	; 7
    18a6:	19 95       	eicall
    18a8:	68 2f       	mov	r22, r24
    18aa:	8c 2f       	mov	r24, r28
    18ac:	a2 df       	rcall	.-188    	; 0x17f2 <udc_update_iface_desc>
    18ae:	18 2f       	mov	r17, r24
    18b0:	88 23       	and	r24, r24
    18b2:	a1 f0       	breq	.+40     	; 0x18dc <udc_iface_disable+0x76>
    18b4:	c0 91 10 22 	lds	r28, 0x2210	; 0x802210 <udc_ptr_iface>
    18b8:	d0 91 11 22 	lds	r29, 0x2211	; 0x802211 <udc_ptr_iface+0x1>
    18bc:	65 e0       	ldi	r22, 0x05	; 5
    18be:	ce 01       	movw	r24, r28
    18c0:	5e df       	rcall	.-324    	; 0x177e <udc_next_desc_in_iface>
    18c2:	ec 01       	movw	r28, r24
    18c4:	89 2b       	or	r24, r25
    18c6:	21 f0       	breq	.+8      	; 0x18d0 <udc_iface_disable+0x6a>
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <udd_ep_free>
    18ce:	f6 cf       	rjmp	.-20     	; 0x18bc <udc_iface_disable+0x56>
    18d0:	d7 01       	movw	r26, r14
    18d2:	12 96       	adiw	r26, 0x02	; 2
    18d4:	ed 91       	ld	r30, X+
    18d6:	fc 91       	ld	r31, X
    18d8:	13 97       	sbiw	r26, 0x03	; 3
    18da:	19 95       	eicall
    18dc:	81 2f       	mov	r24, r17
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	08 95       	ret

000018ea <udc_iface_enable>:
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	18 2f       	mov	r17, r24
    18f2:	7f df       	rcall	.-258    	; 0x17f2 <udc_update_iface_desc>
    18f4:	88 23       	and	r24, r24
    18f6:	39 f1       	breq	.+78     	; 0x1946 <udc_iface_enable+0x5c>
    18f8:	c0 91 10 22 	lds	r28, 0x2210	; 0x802210 <udc_ptr_iface>
    18fc:	d0 91 11 22 	lds	r29, 0x2211	; 0x802211 <udc_ptr_iface+0x1>
    1900:	65 e0       	ldi	r22, 0x05	; 5
    1902:	ce 01       	movw	r24, r28
    1904:	3c df       	rcall	.-392    	; 0x177e <udc_next_desc_in_iface>
    1906:	ec 01       	movw	r28, r24
    1908:	89 2b       	or	r24, r25
    190a:	41 f0       	breq	.+16     	; 0x191c <udc_iface_enable+0x32>
    190c:	4c 81       	ldd	r20, Y+4	; 0x04
    190e:	5d 81       	ldd	r21, Y+5	; 0x05
    1910:	6b 81       	ldd	r22, Y+3	; 0x03
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	0f d7       	rcall	.+3614   	; 0x2734 <udd_ep_alloc>
    1916:	81 11       	cpse	r24, r1
    1918:	f3 cf       	rjmp	.-26     	; 0x1900 <udc_iface_enable+0x16>
    191a:	15 c0       	rjmp	.+42     	; 0x1946 <udc_iface_enable+0x5c>
    191c:	a0 91 12 22 	lds	r26, 0x2212	; 0x802212 <udc_ptr_conf>
    1920:	b0 91 13 22 	lds	r27, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1924:	e1 2f       	mov	r30, r17
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	ee 0f       	add	r30, r30
    192a:	ff 1f       	adc	r31, r31
    192c:	12 96       	adiw	r26, 0x02	; 2
    192e:	8d 91       	ld	r24, X+
    1930:	9c 91       	ld	r25, X
    1932:	13 97       	sbiw	r26, 0x03	; 3
    1934:	e8 0f       	add	r30, r24
    1936:	f9 1f       	adc	r31, r25
    1938:	01 90       	ld	r0, Z+
    193a:	f0 81       	ld	r31, Z
    193c:	e0 2d       	mov	r30, r0
    193e:	01 90       	ld	r0, Z+
    1940:	f0 81       	ld	r31, Z
    1942:	e0 2d       	mov	r30, r0
    1944:	19 95       	eicall
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	1f 91       	pop	r17
    194c:	08 95       	ret

0000194e <udc_get_interface_desc>:
    194e:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_ptr_iface>
    1952:	90 91 11 22 	lds	r25, 0x2211	; 0x802211 <udc_ptr_iface+0x1>
    1956:	08 95       	ret

00001958 <udc_start>:
    1958:	55 c6       	rjmp	.+3242   	; 0x2604 <udd_enable>
    195a:	08 95       	ret

0000195c <udc_reset>:
    195c:	cf 93       	push	r28
    195e:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_num_configuration>
    1962:	88 23       	and	r24, r24
    1964:	c1 f0       	breq	.+48     	; 0x1996 <udc_reset+0x3a>
    1966:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <udc_ptr_conf>
    196a:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    196e:	01 90       	ld	r0, Z+
    1970:	f0 81       	ld	r31, Z
    1972:	e0 2d       	mov	r30, r0
    1974:	84 81       	ldd	r24, Z+4	; 0x04
    1976:	88 23       	and	r24, r24
    1978:	71 f0       	breq	.+28     	; 0x1996 <udc_reset+0x3a>
    197a:	c0 e0       	ldi	r28, 0x00	; 0
    197c:	8c 2f       	mov	r24, r28
    197e:	73 df       	rcall	.-282    	; 0x1866 <udc_iface_disable>
    1980:	cf 5f       	subi	r28, 0xFF	; 255
    1982:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <udc_ptr_conf>
    1986:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    198a:	01 90       	ld	r0, Z+
    198c:	f0 81       	ld	r31, Z
    198e:	e0 2d       	mov	r30, r0
    1990:	84 81       	ldd	r24, Z+4	; 0x04
    1992:	c8 17       	cp	r28, r24
    1994:	98 f3       	brcs	.-26     	; 0x197c <udc_reset+0x20>
    1996:	10 92 14 22 	sts	0x2214, r1	; 0x802214 <udc_num_configuration>
    199a:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <udc_device_status>
    199e:	81 fd       	sbrc	r24, 1
    19a0:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <main_remotewakeup_disable>
    19a4:	10 92 18 22 	sts	0x2218, r1	; 0x802218 <udc_device_status>
    19a8:	10 92 19 22 	sts	0x2219, r1	; 0x802219 <udc_device_status+0x1>
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    19b0:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    19b2:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_num_configuration>
    19b6:	88 23       	and	r24, r24
    19b8:	49 f1       	breq	.+82     	; 0x1a0c <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19ba:	a0 91 12 22 	lds	r26, 0x2212	; 0x802212 <udc_ptr_conf>
    19be:	b0 91 13 22 	lds	r27, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    19c2:	ed 91       	ld	r30, X+
    19c4:	fc 91       	ld	r31, X
    19c6:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    19c8:	84 81       	ldd	r24, Z+4	; 0x04
    19ca:	88 23       	and	r24, r24
    19cc:	f9 f0       	breq	.+62     	; 0x1a0c <udc_sof_notify+0x5c>
    19ce:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    19d0:	ec 2f       	mov	r30, r28
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	ee 0f       	add	r30, r30
    19d6:	ff 1f       	adc	r31, r31
    19d8:	12 96       	adiw	r26, 0x02	; 2
    19da:	8d 91       	ld	r24, X+
    19dc:	9c 91       	ld	r25, X
    19de:	13 97       	sbiw	r26, 0x03	; 3
    19e0:	e8 0f       	add	r30, r24
    19e2:	f9 1f       	adc	r31, r25
    19e4:	01 90       	ld	r0, Z+
    19e6:	f0 81       	ld	r31, Z
    19e8:	e0 2d       	mov	r30, r0
    19ea:	00 84       	ldd	r0, Z+8	; 0x08
    19ec:	f1 85       	ldd	r31, Z+9	; 0x09
    19ee:	e0 2d       	mov	r30, r0
    19f0:	30 97       	sbiw	r30, 0x00	; 0
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    19f4:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    19f6:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19f8:	a0 91 12 22 	lds	r26, 0x2212	; 0x802212 <udc_ptr_conf>
    19fc:	b0 91 13 22 	lds	r27, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1a00:	ed 91       	ld	r30, X+
    1a02:	fc 91       	ld	r31, X
    1a04:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1a06:	84 81       	ldd	r24, Z+4	; 0x04
    1a08:	c8 17       	cp	r28, r24
    1a0a:	10 f3       	brcs	.-60     	; 0x19d0 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1a0c:	cf 91       	pop	r28
    1a0e:	08 95       	ret

00001a10 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1a18:	e2 ee       	ldi	r30, 0xE2	; 226
    1a1a:	f3 e2       	ldi	r31, 0x23	; 35
    1a1c:	12 86       	std	Z+10, r1	; 0x0a
    1a1e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1a20:	14 86       	std	Z+12, r1	; 0x0c
    1a22:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1a24:	16 86       	std	Z+14, r1	; 0x0e
    1a26:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1a28:	80 81       	ld	r24, Z
    1a2a:	88 23       	and	r24, r24
    1a2c:	0c f0       	brlt	.+2      	; 0x1a30 <udc_process_setup+0x20>
    1a2e:	7e c2       	rjmp	.+1276   	; 0x1f2c <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1a30:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1a34:	30 91 e9 23 	lds	r19, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1a38:	21 15       	cp	r18, r1
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <udc_process_setup+0x30>
    1a3e:	7b c2       	rjmp	.+1270   	; 0x1f36 <udc_process_setup+0x526>
    1a40:	6d c2       	rjmp	.+1242   	; 0x1f1c <udc_process_setup+0x50c>
    1a42:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <udc_process_setup+0x38>
    1a46:	a0 c0       	rjmp	.+320    	; 0x1b88 <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a48:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    1a4c:	96 30       	cpi	r25, 0x06	; 6
    1a4e:	79 f0       	breq	.+30     	; 0x1a6e <udc_process_setup+0x5e>
    1a50:	98 30       	cpi	r25, 0x08	; 8
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <udc_process_setup+0x46>
    1a54:	8f c0       	rjmp	.+286    	; 0x1b74 <udc_process_setup+0x164>
    1a56:	91 11       	cpse	r25, r1
    1a58:	97 c0       	rjmp	.+302    	; 0x1b88 <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1a5a:	22 30       	cpi	r18, 0x02	; 2
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <udc_process_setup+0x52>
    1a60:	19 c2       	rjmp	.+1074   	; 0x1e94 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1a62:	62 e0       	ldi	r22, 0x02	; 2
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	88 e1       	ldi	r24, 0x18	; 24
    1a68:	92 e2       	ldi	r25, 0x22	; 34
    1a6a:	5d d6       	rcall	.+3258   	; 0x2726 <udd_set_setup_payload>
    1a6c:	69 c2       	rjmp	.+1234   	; 0x1f40 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1a6e:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1a72:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1a76:	29 2f       	mov	r18, r25
    1a78:	33 27       	eor	r19, r19
    1a7a:	22 30       	cpi	r18, 0x02	; 2
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	a9 f0       	breq	.+42     	; 0x1aaa <udc_process_setup+0x9a>
    1a80:	20 f4       	brcc	.+8      	; 0x1a8a <udc_process_setup+0x7a>
    1a82:	21 30       	cpi	r18, 0x01	; 1
    1a84:	31 05       	cpc	r19, r1
    1a86:	41 f0       	breq	.+16     	; 0x1a98 <udc_process_setup+0x88>
    1a88:	c7 c1       	rjmp	.+910    	; 0x1e18 <udc_process_setup+0x408>
    1a8a:	23 30       	cpi	r18, 0x03	; 3
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	d9 f1       	breq	.+118    	; 0x1b06 <udc_process_setup+0xf6>
    1a90:	2f 30       	cpi	r18, 0x0F	; 15
    1a92:	31 05       	cpc	r19, r1
    1a94:	51 f1       	breq	.+84     	; 0x1aea <udc_process_setup+0xda>
    1a96:	c0 c1       	rjmp	.+896    	; 0x1e18 <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1a98:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    1a9c:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	6c 91       	ld	r22, X
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	3f d6       	rcall	.+3198   	; 0x2726 <udd_set_setup_payload>
    1aa8:	56 c0       	rjmp	.+172    	; 0x1b56 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1aaa:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1aae:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    1ab2:	21 89       	ldd	r18, Z+17	; 0x11
    1ab4:	82 17       	cp	r24, r18
    1ab6:	08 f0       	brcs	.+2      	; 0x1aba <udc_process_setup+0xaa>
    1ab8:	ed c1       	rjmp	.+986    	; 0x1e94 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1aba:	99 27       	eor	r25, r25
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1ac8:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1acc:	e8 0f       	add	r30, r24
    1ace:	f9 1f       	adc	r31, r25
    1ad0:	80 81       	ld	r24, Z
    1ad2:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	62 81       	ldd	r22, Z+2	; 0x02
    1ad8:	73 81       	ldd	r23, Z+3	; 0x03
    1ada:	25 d6       	rcall	.+3146   	; 0x2726 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1adc:	e0 91 ea 23 	lds	r30, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x8>
    1ae0:	f0 91 eb 23 	lds	r31, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x9>
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	81 83       	std	Z+1, r24	; 0x01
    1ae8:	36 c0       	rjmp	.+108    	; 0x1b56 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1aea:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    1aee:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <udc_process_setup+0xe8>
    1af6:	ce c1       	rjmp	.+924    	; 0x1e94 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1af8:	dc 01       	movw	r26, r24
    1afa:	12 96       	adiw	r26, 0x02	; 2
    1afc:	6d 91       	ld	r22, X+
    1afe:	7c 91       	ld	r23, X
    1b00:	13 97       	sbiw	r26, 0x03	; 3
    1b02:	11 d6       	rcall	.+3106   	; 0x2726 <udd_set_setup_payload>
    1b04:	28 c0       	rjmp	.+80     	; 0x1b56 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1b06:	99 27       	eor	r25, r25
    1b08:	81 30       	cpi	r24, 0x01	; 1
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	71 f0       	breq	.+28     	; 0x1b2a <udc_process_setup+0x11a>
    1b0e:	38 f0       	brcs	.+14     	; 0x1b1e <udc_process_setup+0x10e>
    1b10:	02 97       	sbiw	r24, 0x02	; 2
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <udc_process_setup+0x106>
    1b14:	8a c1       	rjmp	.+788    	; 0x1e2a <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1b16:	e6 e4       	ldi	r30, 0x46	; 70
    1b18:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1b1a:	3b e1       	ldi	r19, 0x1B	; 27
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1b1e:	64 e0       	ldi	r22, 0x04	; 4
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	8c e6       	ldi	r24, 0x6C	; 108
    1b24:	91 e2       	ldi	r25, 0x21	; 33
    1b26:	ff d5       	rcall	.+3070   	; 0x2726 <udd_set_setup_payload>
    1b28:	16 c0       	rjmp	.+44     	; 0x1b56 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1b2a:	e2 e6       	ldi	r30, 0x62	; 98
    1b2c:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1b2e:	39 e0       	ldi	r19, 0x09	; 9
    1b30:	a0 e1       	ldi	r26, 0x10	; 16
    1b32:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1b34:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1b36:	81 91       	ld	r24, Z+
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	8d 93       	st	X+, r24
    1b3c:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1b3e:	2f 5f       	subi	r18, 0xFF	; 255
    1b40:	23 17       	cp	r18, r19
    1b42:	c8 f3       	brcs	.-14     	; 0x1b36 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1b44:	63 2f       	mov	r22, r19
    1b46:	66 0f       	add	r22, r22
    1b48:	6e 5f       	subi	r22, 0xFE	; 254
    1b4a:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <udc_string_desc>
		udd_set_setup_payload(
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	8e e0       	ldi	r24, 0x0E	; 14
    1b52:	91 e2       	ldi	r25, 0x21	; 33
    1b54:	e8 d5       	rcall	.+3024   	; 0x2726 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1b56:	e2 ee       	ldi	r30, 0xE2	; 226
    1b58:	f3 e2       	ldi	r31, 0x23	; 35
    1b5a:	86 81       	ldd	r24, Z+6	; 0x06
    1b5c:	97 81       	ldd	r25, Z+7	; 0x07
    1b5e:	22 85       	ldd	r18, Z+10	; 0x0a
    1b60:	33 85       	ldd	r19, Z+11	; 0x0b
    1b62:	82 17       	cp	r24, r18
    1b64:	93 07       	cpc	r25, r19
    1b66:	08 f0       	brcs	.+2      	; 0x1b6a <udc_process_setup+0x15a>
    1b68:	eb c1       	rjmp	.+982    	; 0x1f40 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1b6a:	80 93 ec 23 	sts	0x23EC, r24	; 0x8023ec <udd_g_ctrlreq+0xa>
    1b6e:	90 93 ed 23 	sts	0x23ED, r25	; 0x8023ed <udd_g_ctrlreq+0xb>
    1b72:	e6 c1       	rjmp	.+972    	; 0x1f40 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1b74:	21 30       	cpi	r18, 0x01	; 1
    1b76:	31 05       	cpc	r19, r1
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1b7a:	8c c1       	rjmp	.+792    	; 0x1e94 <udc_process_setup+0x484>
    1b7c:	61 e0       	ldi	r22, 0x01	; 1
    1b7e:	70 e0       	ldi	r23, 0x00	; 0
    1b80:	84 e1       	ldi	r24, 0x14	; 20
    1b82:	92 e2       	ldi	r25, 0x22	; 34
    1b84:	d0 d5       	rcall	.+2976   	; 0x2726 <udd_set_setup_payload>
    1b86:	dc c1       	rjmp	.+952    	; 0x1f40 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	e1 f5       	brne	.+120    	; 0x1c04 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b8c:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    1b90:	9a 30       	cpi	r25, 0x0A	; 10
    1b92:	c1 f5       	brne	.+112    	; 0x1c04 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1b94:	21 30       	cpi	r18, 0x01	; 1
    1b96:	31 05       	cpc	r19, r1
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <udc_process_setup+0x18c>
    1b9a:	4c c1       	rjmp	.+664    	; 0x1e34 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1b9c:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_num_configuration>
    1ba0:	88 23       	and	r24, r24
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <udc_process_setup+0x196>
    1ba4:	47 c1       	rjmp	.+654    	; 0x1e34 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ba6:	c0 91 e6 23 	lds	r28, 0x23E6	; 0x8023e6 <udd_g_ctrlreq+0x4>
    1baa:	d0 91 e7 23 	lds	r29, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1bae:	00 91 12 22 	lds	r16, 0x2212	; 0x802212 <udc_ptr_conf>
    1bb2:	10 91 13 22 	lds	r17, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1bb6:	d8 01       	movw	r26, r16
    1bb8:	ed 91       	ld	r30, X+
    1bba:	fc 91       	ld	r31, X
    1bbc:	84 81       	ldd	r24, Z+4	; 0x04
    1bbe:	c8 17       	cp	r28, r24
    1bc0:	08 f0       	brcs	.+2      	; 0x1bc4 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1bc2:	38 c1       	rjmp	.+624    	; 0x1e34 <udc_process_setup+0x424>
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	8c 2f       	mov	r24, r28
    1bc8:	14 de       	rcall	.-984    	; 0x17f2 <udc_update_iface_desc>
    1bca:	88 23       	and	r24, r24
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <udc_process_setup+0x1c0>
    1bce:	2d c1       	rjmp	.+602    	; 0x1e2a <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	99 27       	eor	r25, r25
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	d8 01       	movw	r26, r16
    1bda:	12 96       	adiw	r26, 0x02	; 2
    1bdc:	ed 91       	ld	r30, X+
    1bde:	fc 91       	ld	r31, X
    1be0:	13 97       	sbiw	r26, 0x03	; 3
    1be2:	e8 0f       	add	r30, r24
    1be4:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1be6:	01 90       	ld	r0, Z+
    1be8:	f0 81       	ld	r31, Z
    1bea:	e0 2d       	mov	r30, r0
    1bec:	86 81       	ldd	r24, Z+6	; 0x06
    1bee:	97 81       	ldd	r25, Z+7	; 0x07
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	19 95       	eicall
    1bf4:	80 93 16 22 	sts	0x2216, r24	; 0x802216 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	70 e0       	ldi	r23, 0x00	; 0
    1bfc:	86 e1       	ldi	r24, 0x16	; 22
    1bfe:	92 e2       	ldi	r25, 0x22	; 34
    1c00:	92 d5       	rcall	.+2852   	; 0x2726 <udd_set_setup_payload>
    1c02:	9e c1       	rjmp	.+828    	; 0x1f40 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1c04:	82 30       	cpi	r24, 0x02	; 2
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <udc_process_setup+0x1fa>
    1c08:	10 c1       	rjmp	.+544    	; 0x1e2a <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c0a:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    1c0e:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1c10:	05 c1       	rjmp	.+522    	; 0x1e1c <udc_process_setup+0x40c>
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	31 05       	cpc	r19, r1
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1c18:	3d c1       	rjmp	.+634    	; 0x1e94 <udc_process_setup+0x484>
    1c1a:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <udd_g_ctrlreq+0x4>
    1c1e:	12 d6       	rcall	.+3108   	; 0x2844 <udd_ep_is_halted>
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	80 93 0e 22 	sts	0x220E, r24	; 0x80220e <udc_ep_status.4577>
    1c26:	90 93 0f 22 	sts	0x220F, r25	; 0x80220f <udc_ep_status.4577+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1c2a:	62 e0       	ldi	r22, 0x02	; 2
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	8e e0       	ldi	r24, 0x0E	; 14
    1c30:	92 e2       	ldi	r25, 0x22	; 34
    1c32:	79 d5       	rcall	.+2802   	; 0x2726 <udd_set_setup_payload>
    1c34:	85 c1       	rjmp	.+778    	; 0x1f40 <udc_process_setup+0x530>
    1c36:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <udc_process_setup+0x22c>
    1c3a:	9f c0       	rjmp	.+318    	; 0x1d7a <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c3c:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    1c40:	93 30       	cpi	r25, 0x03	; 3
    1c42:	91 f1       	breq	.+100    	; 0x1ca8 <udc_process_setup+0x298>
    1c44:	18 f4       	brcc	.+6      	; 0x1c4c <udc_process_setup+0x23c>
    1c46:	91 30       	cpi	r25, 0x01	; 1
    1c48:	a9 f0       	breq	.+42     	; 0x1c74 <udc_process_setup+0x264>
    1c4a:	97 c0       	rjmp	.+302    	; 0x1d7a <udc_process_setup+0x36a>
    1c4c:	95 30       	cpi	r25, 0x05	; 5
    1c4e:	21 f0       	breq	.+8      	; 0x1c58 <udc_process_setup+0x248>
    1c50:	99 30       	cpi	r25, 0x09	; 9
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <udc_process_setup+0x246>
    1c54:	43 c0       	rjmp	.+134    	; 0x1cdc <udc_process_setup+0x2cc>
    1c56:	91 c0       	rjmp	.+290    	; 0x1d7a <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c58:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1c5c:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1c60:	89 2b       	or	r24, r25
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <udc_process_setup+0x256>
    1c64:	17 c1       	rjmp	.+558    	; 0x1e94 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1c66:	84 ef       	ldi	r24, 0xF4	; 244
    1c68:	9b e0       	ldi	r25, 0x0B	; 11
    1c6a:	80 93 ee 23 	sts	0x23EE, r24	; 0x8023ee <udd_g_ctrlreq+0xc>
    1c6e:	90 93 ef 23 	sts	0x23EF, r25	; 0x8023ef <udd_g_ctrlreq+0xd>
    1c72:	66 c1       	rjmp	.+716    	; 0x1f40 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c74:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1c78:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1c7c:	89 2b       	or	r24, r25
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <udc_process_setup+0x272>
    1c80:	09 c1       	rjmp	.+530    	; 0x1e94 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1c82:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1c86:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <udc_process_setup+0x280>
    1c8e:	02 c1       	rjmp	.+516    	; 0x1e94 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1c90:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <udc_device_status>
    1c94:	90 91 19 22 	lds	r25, 0x2219	; 0x802219 <udc_device_status+0x1>
    1c98:	8d 7f       	andi	r24, 0xFD	; 253
    1c9a:	80 93 18 22 	sts	0x2218, r24	; 0x802218 <udc_device_status>
    1c9e:	90 93 19 22 	sts	0x2219, r25	; 0x802219 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1ca2:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <main_remotewakeup_disable>
    1ca6:	4c c1       	rjmp	.+664    	; 0x1f40 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1ca8:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1cac:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1cb0:	89 2b       	or	r24, r25
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <udc_process_setup+0x2a6>
    1cb4:	ef c0       	rjmp	.+478    	; 0x1e94 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1cb6:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1cba:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	09 f0       	breq	.+2      	; 0x1cc4 <udc_process_setup+0x2b4>
    1cc2:	ae c0       	rjmp	.+348    	; 0x1e20 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1cc4:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <udc_device_status>
    1cc8:	90 91 19 22 	lds	r25, 0x2219	; 0x802219 <udc_device_status+0x1>
    1ccc:	82 60       	ori	r24, 0x02	; 2
    1cce:	80 93 18 22 	sts	0x2218, r24	; 0x802218 <udc_device_status>
    1cd2:	90 93 19 22 	sts	0x2219, r25	; 0x802219 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1cd6:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1cda:	32 c1       	rjmp	.+612    	; 0x1f40 <udc_process_setup+0x530>
    1cdc:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1ce0:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1ce4:	89 2b       	or	r24, r25
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1ce8:	d5 c0       	rjmp	.+426    	; 0x1e94 <udc_process_setup+0x484>
    1cea:	1a d5       	rcall	.+2612   	; 0x2720 <udd_getaddress>
    1cec:	88 23       	and	r24, r24
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <udc_process_setup+0x2e2>
    1cf0:	9c c0       	rjmp	.+312    	; 0x1e2a <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1cf2:	20 91 e4 23 	lds	r18, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1cf6:	30 91 e5 23 	lds	r19, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1cfa:	33 27       	eor	r19, r19
    1cfc:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1d00:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1d04:	81 89       	ldd	r24, Z+17	; 0x11
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	82 17       	cp	r24, r18
    1d0a:	93 07       	cpc	r25, r19
    1d0c:	08 f4       	brcc	.+2      	; 0x1d10 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1d0e:	8d c0       	rjmp	.+282    	; 0x1e2a <udc_process_setup+0x41a>
    1d10:	25 de       	rcall	.-950    	; 0x195c <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1d12:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1d16:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1d1a:	80 93 14 22 	sts	0x2214, r24	; 0x802214 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1d1e:	88 23       	and	r24, r24
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <udc_process_setup+0x314>
    1d22:	0e c1       	rjmp	.+540    	; 0x1f40 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1d24:	99 27       	eor	r25, r25
    1d26:	81 50       	subi	r24, 0x01	; 1
    1d28:	90 4c       	sbci	r25, 0xC0	; 192
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1d36:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1d3a:	e8 0f       	add	r30, r24
    1d3c:	f9 1f       	adc	r31, r25
    1d3e:	e0 93 12 22 	sts	0x2212, r30	; 0x802212 <udc_ptr_conf>
    1d42:	f0 93 13 22 	sts	0x2213, r31	; 0x802213 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d46:	01 90       	ld	r0, Z+
    1d48:	f0 81       	ld	r31, Z
    1d4a:	e0 2d       	mov	r30, r0
    1d4c:	84 81       	ldd	r24, Z+4	; 0x04
    1d4e:	88 23       	and	r24, r24
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <udc_process_setup+0x344>
    1d52:	f6 c0       	rjmp	.+492    	; 0x1f40 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1d54:	c0 e0       	ldi	r28, 0x00	; 0
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	8c 2f       	mov	r24, r28
    1d5a:	c7 dd       	rcall	.-1138   	; 0x18ea <udc_iface_enable>
    1d5c:	88 23       	and	r24, r24
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <udc_process_setup+0x352>
    1d60:	64 c0       	rjmp	.+200    	; 0x1e2a <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1d62:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d64:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <udc_ptr_conf>
    1d68:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1d6c:	01 90       	ld	r0, Z+
    1d6e:	f0 81       	ld	r31, Z
    1d70:	e0 2d       	mov	r30, r0
    1d72:	84 81       	ldd	r24, Z+4	; 0x04
    1d74:	c8 17       	cp	r28, r24
    1d76:	78 f3       	brcs	.-34     	; 0x1d56 <udc_process_setup+0x346>
    1d78:	e3 c0       	rjmp	.+454    	; 0x1f40 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1d7a:	81 30       	cpi	r24, 0x01	; 1
    1d7c:	e9 f4       	brne	.+58     	; 0x1db8 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d7e:	90 91 e3 23 	lds	r25, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    1d82:	9b 30       	cpi	r25, 0x0B	; 11
    1d84:	c9 f4       	brne	.+50     	; 0x1db8 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1d86:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1d8a:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1d8e:	89 2b       	or	r24, r25
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1d92:	50 c0       	rjmp	.+160    	; 0x1e34 <udc_process_setup+0x424>
    1d94:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_num_configuration>
    1d98:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <udc_process_setup+0x38e>
    1d9c:	4b c0       	rjmp	.+150    	; 0x1e34 <udc_process_setup+0x424>
    1d9e:	e2 ee       	ldi	r30, 0xE2	; 226
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1da0:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1da2:	c4 81       	ldd	r28, Z+4	; 0x04
    1da4:	d2 81       	ldd	r29, Z+2	; 0x02
    1da6:	8c 2f       	mov	r24, r28
    1da8:	5e dd       	rcall	.-1348   	; 0x1866 <udc_iface_disable>
    1daa:	88 23       	and	r24, r24
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1dae:	3d c0       	rjmp	.+122    	; 0x1e2a <udc_process_setup+0x41a>
    1db0:	6d 2f       	mov	r22, r29
    1db2:	8c 2f       	mov	r24, r28
    1db4:	9a dd       	rcall	.-1228   	; 0x18ea <udc_iface_enable>
    1db6:	37 c0       	rjmp	.+110    	; 0x1e26 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1db8:	82 30       	cpi	r24, 0x02	; 2
    1dba:	b9 f5       	brne	.+110    	; 0x1e2a <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1dbc:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udd_g_ctrlreq+0x1>
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	19 f0       	breq	.+6      	; 0x1dca <udc_process_setup+0x3ba>
    1dc4:	83 30       	cpi	r24, 0x03	; 3
    1dc6:	99 f0       	breq	.+38     	; 0x1dee <udc_process_setup+0x3de>
    1dc8:	2d c0       	rjmp	.+90     	; 0x1e24 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1dca:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1dce:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1dd2:	89 2b       	or	r24, r25
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1dd6:	5e c0       	rjmp	.+188    	; 0x1e94 <udc_process_setup+0x484>
    1dd8:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1ddc:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1de0:	89 2b       	or	r24, r25
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1de4:	57 c0       	rjmp	.+174    	; 0x1e94 <udc_process_setup+0x484>
    1de6:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <udd_g_ctrlreq+0x4>
    1dea:	47 d5       	rcall	.+2702   	; 0x287a <udd_ep_clear_halt>
    1dec:	1c c0       	rjmp	.+56     	; 0x1e26 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1dee:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    1df2:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    1df6:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <udc_process_setup+0x3ec>
    1dfa:	4c c0       	rjmp	.+152    	; 0x1e94 <udc_process_setup+0x484>
    1dfc:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_g_ctrlreq+0x2>
    1e00:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <udd_g_ctrlreq+0x3>
    1e04:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <udc_process_setup+0x3fa>
    1e08:	45 c0       	rjmp	.+138    	; 0x1e94 <udc_process_setup+0x484>
    1e0a:	c2 ee       	ldi	r28, 0xE2	; 226
    1e0c:	d3 e2       	ldi	r29, 0x23	; 35
    1e0e:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e10:	35 d6       	rcall	.+3178   	; 0x2a7c <udd_ep_abort>
    1e12:	8c 81       	ldd	r24, Y+4	; 0x04
    1e14:	9e d6       	rcall	.+3388   	; 0x2b52 <udd_ep_set_halt>
    1e16:	07 c0       	rjmp	.+14     	; 0x1e26 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	05 c0       	rjmp	.+10     	; 0x1e26 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	03 c0       	rjmp	.+6      	; 0x1e26 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1e24:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1e26:	81 11       	cpse	r24, r1
    1e28:	8c c0       	rjmp	.+280    	; 0x1f42 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1e2a:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udd_g_ctrlreq>
    1e2e:	8f 71       	andi	r24, 0x1F	; 31
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	81 f5       	brne	.+96     	; 0x1e94 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1e34:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_num_configuration>
    1e38:	88 23       	and	r24, r24
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1e3c:	71 c0       	rjmp	.+226    	; 0x1f20 <udc_process_setup+0x510>
    1e3e:	00 91 e6 23 	lds	r16, 0x23E6	; 0x8023e6 <udd_g_ctrlreq+0x4>
    1e42:	10 91 e7 23 	lds	r17, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1e46:	c0 91 12 22 	lds	r28, 0x2212	; 0x802212 <udc_ptr_conf>
    1e4a:	d0 91 13 22 	lds	r29, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1e4e:	e8 81       	ld	r30, Y
    1e50:	f9 81       	ldd	r31, Y+1	; 0x01
    1e52:	84 81       	ldd	r24, Z+4	; 0x04
    1e54:	08 17       	cp	r16, r24
    1e56:	08 f0       	brcs	.+2      	; 0x1e5a <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1e58:	65 c0       	rjmp	.+202    	; 0x1f24 <udc_process_setup+0x514>
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	80 2f       	mov	r24, r16
    1e5e:	c9 dc       	rcall	.-1646   	; 0x17f2 <udc_update_iface_desc>
    1e60:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1e62:	c1 f0       	breq	.+48     	; 0x1e94 <udc_process_setup+0x484>
    1e64:	f8 01       	movw	r30, r16
    1e66:	ff 27       	eor	r31, r31
    1e68:	cf 01       	movw	r24, r30
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e70:	fb 81       	ldd	r31, Y+3	; 0x03
    1e72:	e8 0f       	add	r30, r24
    1e74:	f9 1f       	adc	r31, r25
    1e76:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1e78:	d1 81       	ldd	r29, Z+1	; 0x01
    1e7a:	ee 81       	ldd	r30, Y+6	; 0x06
    1e7c:	ff 81       	ldd	r31, Y+7	; 0x07
    1e7e:	19 95       	eicall
    1e80:	68 2f       	mov	r22, r24
    1e82:	80 2f       	mov	r24, r16
    1e84:	b6 dc       	rcall	.-1684   	; 0x17f2 <udc_update_iface_desc>
    1e86:	88 23       	and	r24, r24
    1e88:	29 f0       	breq	.+10     	; 0x1e94 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1e8a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e8c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e8e:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1e90:	81 11       	cpse	r24, r1
    1e92:	57 c0       	rjmp	.+174    	; 0x1f42 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1e94:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udd_g_ctrlreq>
    1e98:	8f 71       	andi	r24, 0x1F	; 31
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <udc_process_setup+0x490>
    1e9e:	44 c0       	rjmp	.+136    	; 0x1f28 <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1ea0:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_num_configuration>
    1ea4:	88 23       	and	r24, r24
    1ea6:	b1 f1       	breq	.+108    	; 0x1f14 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ea8:	a0 91 12 22 	lds	r26, 0x2212	; 0x802212 <udc_ptr_conf>
    1eac:	b0 91 13 22 	lds	r27, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1eb0:	ed 91       	ld	r30, X+
    1eb2:	fc 91       	ld	r31, X
    1eb4:	11 97       	sbiw	r26, 0x01	; 1
    1eb6:	84 81       	ldd	r24, Z+4	; 0x04
    1eb8:	88 23       	and	r24, r24
    1eba:	71 f1       	breq	.+92     	; 0x1f18 <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1ebc:	c0 e0       	ldi	r28, 0x00	; 0
    1ebe:	ec 2f       	mov	r30, r28
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	ee 0f       	add	r30, r30
    1ec4:	ff 1f       	adc	r31, r31
    1ec6:	12 96       	adiw	r26, 0x02	; 2
    1ec8:	8d 91       	ld	r24, X+
    1eca:	9c 91       	ld	r25, X
    1ecc:	13 97       	sbiw	r26, 0x03	; 3
    1ece:	e8 0f       	add	r30, r24
    1ed0:	f9 1f       	adc	r31, r25
    1ed2:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1ed4:	11 81       	ldd	r17, Z+1	; 0x01
    1ed6:	d8 01       	movw	r26, r16
    1ed8:	16 96       	adiw	r26, 0x06	; 6
    1eda:	ed 91       	ld	r30, X+
    1edc:	fc 91       	ld	r31, X
    1ede:	17 97       	sbiw	r26, 0x07	; 7
    1ee0:	19 95       	eicall
    1ee2:	68 2f       	mov	r22, r24
    1ee4:	8c 2f       	mov	r24, r28
    1ee6:	85 dc       	rcall	.-1782   	; 0x17f2 <udc_update_iface_desc>
    1ee8:	88 23       	and	r24, r24
    1eea:	59 f1       	breq	.+86     	; 0x1f42 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1eec:	d8 01       	movw	r26, r16
    1eee:	14 96       	adiw	r26, 0x04	; 4
    1ef0:	ed 91       	ld	r30, X+
    1ef2:	fc 91       	ld	r31, X
    1ef4:	15 97       	sbiw	r26, 0x05	; 5
    1ef6:	19 95       	eicall
    1ef8:	81 11       	cpse	r24, r1
    1efa:	23 c0       	rjmp	.+70     	; 0x1f42 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1efc:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1efe:	a0 91 12 22 	lds	r26, 0x2212	; 0x802212 <udc_ptr_conf>
    1f02:	b0 91 13 22 	lds	r27, 0x2213	; 0x802213 <udc_ptr_conf+0x1>
    1f06:	ed 91       	ld	r30, X+
    1f08:	fc 91       	ld	r31, X
    1f0a:	11 97       	sbiw	r26, 0x01	; 1
    1f0c:	94 81       	ldd	r25, Z+4	; 0x04
    1f0e:	c9 17       	cp	r28, r25
    1f10:	b0 f2       	brcs	.-84     	; 0x1ebe <udc_process_setup+0x4ae>
    1f12:	17 c0       	rjmp	.+46     	; 0x1f42 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	15 c0       	rjmp	.+42     	; 0x1f42 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	13 c0       	rjmp	.+38     	; 0x1f42 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	11 c0       	rjmp	.+34     	; 0x1f42 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	0f c0       	rjmp	.+30     	; 0x1f42 <udc_process_setup+0x532>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	0d c0       	rjmp	.+26     	; 0x1f42 <udc_process_setup+0x532>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	0b c0       	rjmp	.+22     	; 0x1f42 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1f2c:	98 2f       	mov	r25, r24
    1f2e:	90 76       	andi	r25, 0x60	; 96
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <udc_process_setup+0x524>
    1f32:	7b cf       	rjmp	.-266    	; 0x1e2a <udc_process_setup+0x41a>
    1f34:	80 ce       	rjmp	.-768    	; 0x1c36 <udc_process_setup+0x226>
    1f36:	98 2f       	mov	r25, r24
    1f38:	90 76       	andi	r25, 0x60	; 96
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <udc_process_setup+0x52e>
    1f3c:	76 cf       	rjmp	.-276    	; 0x1e2a <udc_process_setup+0x41a>
    1f3e:	81 cd       	rjmp	.-1278   	; 0x1a42 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	1f 91       	pop	r17
    1f48:	0f 91       	pop	r16
    1f4a:	08 95       	ret

00001f4c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1f4c:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1f50:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1f52:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1f54:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1f58:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1f5a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1f5e:	08 95       	ret

00001f60 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1f60:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1f62:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1f64:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1f66:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1f68:	60 83       	st	Z, r22
	ret                             // Return to caller
    1f6a:	08 95       	ret

00001f6c <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	1f 92       	push	r1
    1f72:	1f 92       	push	r1
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	81 11       	cpse	r24, r1
    1f7a:	26 c0       	rjmp	.+76     	; 0x1fc8 <udd_sleep_mode+0x5c>
    1f7c:	90 91 d8 23 	lds	r25, 0x23D8	; 0x8023d8 <udd_b_idle>
    1f80:	99 23       	and	r25, r25
    1f82:	f9 f0       	breq	.+62     	; 0x1fc2 <udd_sleep_mode+0x56>
    1f84:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <sleepmgr_locks+0x1>
    1f88:	91 11       	cpse	r25, r1
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <udd_sleep_mode+0x22>
    1f8c:	ff cf       	rjmp	.-2      	; 0x1f8c <udd_sleep_mode+0x20>
    1f8e:	9f b7       	in	r25, 0x3f	; 63
    1f90:	9a 83       	std	Y+2, r25	; 0x02
    1f92:	f8 94       	cli
    1f94:	2a 81       	ldd	r18, Y+2	; 0x02
    1f96:	ec ed       	ldi	r30, 0xDC	; 220
    1f98:	f3 e2       	ldi	r31, 0x23	; 35
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	91 50       	subi	r25, 0x01	; 1
    1f9e:	91 83       	std	Z+1, r25	; 0x01
    1fa0:	2f bf       	out	0x3f, r18	; 63
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <udd_sleep_mode+0x56>
    1fa4:	90 91 dd 23 	lds	r25, 0x23DD	; 0x8023dd <sleepmgr_locks+0x1>
    1fa8:	9f 3f       	cpi	r25, 0xFF	; 255
    1faa:	09 f4       	brne	.+2      	; 0x1fae <udd_sleep_mode+0x42>
    1fac:	ff cf       	rjmp	.-2      	; 0x1fac <udd_sleep_mode+0x40>
    1fae:	9f b7       	in	r25, 0x3f	; 63
    1fb0:	99 83       	std	Y+1, r25	; 0x01
    1fb2:	f8 94       	cli
    1fb4:	29 81       	ldd	r18, Y+1	; 0x01
    1fb6:	ec ed       	ldi	r30, 0xDC	; 220
    1fb8:	f3 e2       	ldi	r31, 0x23	; 35
    1fba:	91 81       	ldd	r25, Z+1	; 0x01
    1fbc:	9f 5f       	subi	r25, 0xFF	; 255
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	2f bf       	out	0x3f, r18	; 63
    1fc2:	80 93 d8 23 	sts	0x23D8, r24	; 0x8023d8 <udd_b_idle>
    1fc6:	05 c0       	rjmp	.+10     	; 0x1fd2 <udd_sleep_mode+0x66>
    1fc8:	90 91 d8 23 	lds	r25, 0x23D8	; 0x8023d8 <udd_b_idle>
    1fcc:	99 23       	and	r25, r25
    1fce:	51 f3       	breq	.-44     	; 0x1fa4 <udd_sleep_mode+0x38>
    1fd0:	f8 cf       	rjmp	.-16     	; 0x1fc2 <udd_sleep_mode+0x56>
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	df 91       	pop	r29
    1fd8:	cf 91       	pop	r28
    1fda:	08 95       	ret

00001fdc <udd_ctrl_init>:
    1fdc:	0f 93       	push	r16
    1fde:	e8 ec       	ldi	r30, 0xC8	; 200
    1fe0:	f4 e0       	ldi	r31, 0x04	; 4
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8f 7d       	andi	r24, 0xDF	; 223
    1fe6:	80 83       	st	Z, r24
    1fe8:	80 81       	ld	r24, Z
    1fea:	8f 7d       	andi	r24, 0xDF	; 223
    1fec:	80 83       	st	Z, r24
    1fee:	ec e8       	ldi	r30, 0x8C	; 140
    1ff0:	f3 e2       	ldi	r31, 0x23	; 35
    1ff2:	02 e0       	ldi	r16, 0x02	; 2
    1ff4:	05 93       	las	Z, r16
    1ff6:	10 92 8e 23 	sts	0x238E, r1	; 0x80238e <udd_sram+0x1e>
    1ffa:	10 92 8f 23 	sts	0x238F, r1	; 0x80238f <udd_sram+0x1f>
    1ffe:	00 e2       	ldi	r16, 0x20	; 32
    2000:	06 93       	lac	Z, r16
    2002:	00 e4       	ldi	r16, 0x40	; 64
    2004:	06 93       	lac	Z, r16
    2006:	e4 e8       	ldi	r30, 0x84	; 132
    2008:	f3 e2       	ldi	r31, 0x23	; 35
    200a:	00 e4       	ldi	r16, 0x40	; 64
    200c:	06 93       	lac	Z, r16
    200e:	e2 ee       	ldi	r30, 0xE2	; 226
    2010:	f3 e2       	ldi	r31, 0x23	; 35
    2012:	14 86       	std	Z+12, r1	; 0x0c
    2014:	15 86       	std	Z+13, r1	; 0x0d
    2016:	16 86       	std	Z+14, r1	; 0x0e
    2018:	17 86       	std	Z+15, r1	; 0x0f
    201a:	12 86       	std	Z+10, r1	; 0x0a
    201c:	13 86       	std	Z+11, r1	; 0x0b
    201e:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udd_ep_control_state>
    2022:	0f 91       	pop	r16
    2024:	08 95       	ret

00002026 <udd_ctrl_stall_data>:
    2026:	0f 93       	push	r16
    2028:	85 e0       	ldi	r24, 0x05	; 5
    202a:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ep_control_state>
    202e:	ed e8       	ldi	r30, 0x8D	; 141
    2030:	f3 e2       	ldi	r31, 0x23	; 35
    2032:	04 e0       	ldi	r16, 0x04	; 4
    2034:	05 93       	las	Z, r16
    2036:	e5 e8       	ldi	r30, 0x85	; 133
    2038:	f3 e2       	ldi	r31, 0x23	; 35
    203a:	04 e0       	ldi	r16, 0x04	; 4
    203c:	05 93       	las	Z, r16
    203e:	0f 91       	pop	r16
    2040:	08 95       	ret

00002042 <udd_ctrl_send_zlp_in>:
    2042:	0f 93       	push	r16
    2044:	83 e0       	ldi	r24, 0x03	; 3
    2046:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ep_control_state>
    204a:	10 92 8e 23 	sts	0x238E, r1	; 0x80238e <udd_sram+0x1e>
    204e:	10 92 8f 23 	sts	0x238F, r1	; 0x80238f <udd_sram+0x1f>
    2052:	ec e8       	ldi	r30, 0x8C	; 140
    2054:	f3 e2       	ldi	r31, 0x23	; 35
    2056:	02 e0       	ldi	r16, 0x02	; 2
    2058:	06 93       	lac	Z, r16
    205a:	0f 91       	pop	r16
    205c:	08 95       	ret

0000205e <udd_ctrl_endofrequest>:
    205e:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0xc>
    2062:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udd_g_ctrlreq+0xd>
    2066:	30 97       	sbiw	r30, 0x00	; 0
    2068:	09 f0       	breq	.+2      	; 0x206c <udd_ctrl_endofrequest+0xe>
    206a:	19 95       	eicall
    206c:	08 95       	ret

0000206e <udd_ctrl_in_sent>:
    206e:	0f 93       	push	r16
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <udd_ep_control_state>
    2078:	83 30       	cpi	r24, 0x03	; 3
    207a:	19 f4       	brne	.+6      	; 0x2082 <udd_ctrl_in_sent+0x14>
    207c:	f0 df       	rcall	.-32     	; 0x205e <udd_ctrl_endofrequest>
    207e:	ae df       	rcall	.-164    	; 0x1fdc <udd_ctrl_init>
    2080:	5e c0       	rjmp	.+188    	; 0x213e <udd_ctrl_in_sent+0xd0>
    2082:	80 91 6b 23 	lds	r24, 0x236B	; 0x80236b <udd_ctrl_payload_nb_trans>
    2086:	90 91 6c 23 	lds	r25, 0x236C	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    208a:	c0 91 ec 23 	lds	r28, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0xa>
    208e:	d0 91 ed 23 	lds	r29, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0xb>
    2092:	c8 1b       	sub	r28, r24
    2094:	d9 0b       	sbc	r29, r25
    2096:	71 f5       	brne	.+92     	; 0x20f4 <udd_ctrl_in_sent+0x86>
    2098:	20 91 6d 23 	lds	r18, 0x236D	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
    209c:	30 91 6e 23 	lds	r19, 0x236E	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    20a0:	82 0f       	add	r24, r18
    20a2:	93 1f       	adc	r25, r19
    20a4:	80 93 6d 23 	sts	0x236D, r24	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
    20a8:	90 93 6e 23 	sts	0x236E, r25	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    20ac:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    20b0:	30 91 e9 23 	lds	r19, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    20b4:	82 17       	cp	r24, r18
    20b6:	93 07       	cpc	r25, r19
    20b8:	21 f0       	breq	.+8      	; 0x20c2 <udd_ctrl_in_sent+0x54>
    20ba:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <b_shortpacket.5293>
    20be:	88 23       	and	r24, r24
    20c0:	41 f0       	breq	.+16     	; 0x20d2 <udd_ctrl_in_sent+0x64>
    20c2:	84 e0       	ldi	r24, 0x04	; 4
    20c4:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ep_control_state>
    20c8:	e4 e8       	ldi	r30, 0x84	; 132
    20ca:	f3 e2       	ldi	r31, 0x23	; 35
    20cc:	02 e0       	ldi	r16, 0x02	; 2
    20ce:	06 93       	lac	Z, r16
    20d0:	36 c0       	rjmp	.+108    	; 0x213e <udd_ctrl_in_sent+0xd0>
    20d2:	e0 91 f0 23 	lds	r30, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xe>
    20d6:	f0 91 f1 23 	lds	r31, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xf>
    20da:	30 97       	sbiw	r30, 0x00	; 0
    20dc:	99 f0       	breq	.+38     	; 0x2104 <udd_ctrl_in_sent+0x96>
    20de:	19 95       	eicall
    20e0:	88 23       	and	r24, r24
    20e2:	81 f0       	breq	.+32     	; 0x2104 <udd_ctrl_in_sent+0x96>
    20e4:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udd_ctrl_payload_nb_trans>
    20e8:	10 92 6c 23 	sts	0x236C, r1	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    20ec:	c0 91 ec 23 	lds	r28, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0xa>
    20f0:	d0 91 ed 23 	lds	r29, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0xb>
    20f4:	c8 30       	cpi	r28, 0x08	; 8
    20f6:	d1 05       	cpc	r29, r1
    20f8:	28 f0       	brcs	.+10     	; 0x2104 <udd_ctrl_in_sent+0x96>
    20fa:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <b_shortpacket.5293>
    20fe:	c8 e0       	ldi	r28, 0x08	; 8
    2100:	d0 e0       	ldi	r29, 0x00	; 0
    2102:	03 c0       	rjmp	.+6      	; 0x210a <udd_ctrl_in_sent+0x9c>
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	80 93 1a 22 	sts	0x221A, r24	; 0x80221a <b_shortpacket.5293>
    210a:	e0 e7       	ldi	r30, 0x70	; 112
    210c:	f3 e2       	ldi	r31, 0x23	; 35
    210e:	c6 8f       	std	Z+30, r28	; 0x1e
    2110:	d7 8f       	std	Z+31, r29	; 0x1f
    2112:	80 91 6b 23 	lds	r24, 0x236B	; 0x80236b <udd_ctrl_payload_nb_trans>
    2116:	90 91 6c 23 	lds	r25, 0x236C	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    211a:	20 91 ea 23 	lds	r18, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x8>
    211e:	30 91 eb 23 	lds	r19, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x9>
    2122:	28 0f       	add	r18, r24
    2124:	39 1f       	adc	r19, r25
    2126:	20 a3       	std	Z+32, r18	; 0x20
    2128:	31 a3       	std	Z+33, r19	; 0x21
    212a:	c8 0f       	add	r28, r24
    212c:	d9 1f       	adc	r29, r25
    212e:	c0 93 6b 23 	sts	0x236B, r28	; 0x80236b <udd_ctrl_payload_nb_trans>
    2132:	d0 93 6c 23 	sts	0x236C, r29	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    2136:	ec e8       	ldi	r30, 0x8C	; 140
    2138:	f3 e2       	ldi	r31, 0x23	; 35
    213a:	02 e0       	ldi	r16, 0x02	; 2
    213c:	06 93       	lac	Z, r16
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	0f 91       	pop	r16
    2144:	08 95       	ret

00002146 <udd_ep_get_size>:
    2146:	fc 01       	movw	r30, r24
    2148:	81 81       	ldd	r24, Z+1	; 0x01
    214a:	e8 2f       	mov	r30, r24
    214c:	e7 70       	andi	r30, 0x07	; 7
    214e:	8e 2f       	mov	r24, r30
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	fc 01       	movw	r30, r24
    2154:	31 97       	sbiw	r30, 0x01	; 1
    2156:	e7 30       	cpi	r30, 0x07	; 7
    2158:	f1 05       	cpc	r31, r1
    215a:	d0 f4       	brcc	.+52     	; 0x2190 <udd_ep_get_size+0x4a>
    215c:	88 27       	eor	r24, r24
    215e:	e1 5f       	subi	r30, 0xF1	; 241
    2160:	fe 4f       	sbci	r31, 0xFE	; 254
    2162:	8f 4f       	sbci	r24, 0xFF	; 255
    2164:	22 c7       	rjmp	.+3652   	; 0x2faa <__tablejump2__>
    2166:	80 e1       	ldi	r24, 0x10	; 16
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	08 95       	ret
    216c:	80 e2       	ldi	r24, 0x20	; 32
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	08 95       	ret
    2172:	80 e4       	ldi	r24, 0x40	; 64
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	08 95       	ret
    2178:	80 e8       	ldi	r24, 0x80	; 128
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	08 95       	ret
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	91 e0       	ldi	r25, 0x01	; 1
    2182:	08 95       	ret
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	92 e0       	ldi	r25, 0x02	; 2
    2188:	08 95       	ret
    218a:	8f ef       	ldi	r24, 0xFF	; 255
    218c:	93 e0       	ldi	r25, 0x03	; 3
    218e:	08 95       	ret
    2190:	88 e0       	ldi	r24, 0x08	; 8
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	08 95       	ret

00002196 <udd_ep_get_job>:
    2196:	28 2f       	mov	r18, r24
    2198:	2f 70       	andi	r18, 0x0F	; 15
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	22 0f       	add	r18, r18
    219e:	33 1f       	adc	r19, r19
    21a0:	08 2e       	mov	r0, r24
    21a2:	00 0c       	add	r0, r0
    21a4:	99 0b       	sbc	r25, r25
    21a6:	88 27       	eor	r24, r24
    21a8:	99 0f       	add	r25, r25
    21aa:	88 1f       	adc	r24, r24
    21ac:	99 27       	eor	r25, r25
    21ae:	82 0f       	add	r24, r18
    21b0:	93 1f       	adc	r25, r19
    21b2:	02 97       	sbiw	r24, 0x02	; 2
    21b4:	9c 01       	movw	r18, r24
    21b6:	22 0f       	add	r18, r18
    21b8:	33 1f       	adc	r19, r19
    21ba:	22 0f       	add	r18, r18
    21bc:	33 1f       	adc	r19, r19
    21be:	22 0f       	add	r18, r18
    21c0:	33 1f       	adc	r19, r19
    21c2:	82 0f       	add	r24, r18
    21c4:	93 1f       	adc	r25, r19
    21c6:	85 5e       	subi	r24, 0xE5	; 229
    21c8:	9c 4d       	sbci	r25, 0xDC	; 220
    21ca:	08 95       	ret

000021cc <udd_ctrl_interrupt_tc_setup>:
    21cc:	0f 93       	push	r16
    21ce:	cf 93       	push	r28
    21d0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    21d4:	80 ff       	sbrs	r24, 0
    21d6:	64 c0       	rjmp	.+200    	; 0x22a0 <udd_ctrl_interrupt_tc_setup+0xd4>
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    21de:	e4 e8       	ldi	r30, 0x84	; 132
    21e0:	f3 e2       	ldi	r31, 0x23	; 35
    21e2:	00 e8       	ldi	r16, 0x80	; 128
    21e4:	06 93       	lac	Z, r16
    21e6:	ec e8       	ldi	r30, 0x8C	; 140
    21e8:	f3 e2       	ldi	r31, 0x23	; 35
    21ea:	00 e8       	ldi	r16, 0x80	; 128
    21ec:	06 93       	lac	Z, r16
    21ee:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    21f2:	e4 e8       	ldi	r30, 0x84	; 132
    21f4:	f3 e2       	ldi	r31, 0x23	; 35
    21f6:	00 e1       	ldi	r16, 0x10	; 16
    21f8:	06 93       	lac	Z, r16
    21fa:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <udd_ep_control_state>
    21fe:	88 23       	and	r24, r24
    2200:	29 f0       	breq	.+10     	; 0x220c <udd_ctrl_interrupt_tc_setup+0x40>
    2202:	83 50       	subi	r24, 0x03	; 3
    2204:	82 30       	cpi	r24, 0x02	; 2
    2206:	08 f4       	brcc	.+2      	; 0x220a <udd_ctrl_interrupt_tc_setup+0x3e>
    2208:	2a df       	rcall	.-428    	; 0x205e <udd_ctrl_endofrequest>
    220a:	e8 de       	rcall	.-560    	; 0x1fdc <udd_ctrl_init>
    220c:	80 91 86 23 	lds	r24, 0x2386	; 0x802386 <udd_sram+0x16>
    2210:	90 91 87 23 	lds	r25, 0x2387	; 0x802387 <udd_sram+0x17>
    2214:	08 97       	sbiw	r24, 0x08	; 8
    2216:	09 f0       	breq	.+2      	; 0x221a <udd_ctrl_interrupt_tc_setup+0x4e>
    2218:	45 c0       	rjmp	.+138    	; 0x22a4 <udd_ctrl_interrupt_tc_setup+0xd8>
    221a:	88 e0       	ldi	r24, 0x08	; 8
    221c:	e3 e6       	ldi	r30, 0x63	; 99
    221e:	f3 e2       	ldi	r31, 0x23	; 35
    2220:	a2 ee       	ldi	r26, 0xE2	; 226
    2222:	b3 e2       	ldi	r27, 0x23	; 35
    2224:	01 90       	ld	r0, Z+
    2226:	0d 92       	st	X+, r0
    2228:	8a 95       	dec	r24
    222a:	e1 f7       	brne	.-8      	; 0x2224 <udd_ctrl_interrupt_tc_setup+0x58>
    222c:	e8 ec       	ldi	r30, 0xC8	; 200
    222e:	f4 e0       	ldi	r31, 0x04	; 4
    2230:	80 81       	ld	r24, Z
    2232:	80 62       	ori	r24, 0x20	; 32
    2234:	80 83       	st	Z, r24
    2236:	80 81       	ld	r24, Z
    2238:	80 62       	ori	r24, 0x20	; 32
    223a:	80 83       	st	Z, r24
    223c:	e9 db       	rcall	.-2094   	; 0x1a10 <udc_process_setup>
    223e:	c8 2f       	mov	r28, r24
    2240:	81 11       	cpse	r24, r1
    2242:	03 c0       	rjmp	.+6      	; 0x224a <udd_ctrl_interrupt_tc_setup+0x7e>
    2244:	f0 de       	rcall	.-544    	; 0x2026 <udd_ctrl_stall_data>
    2246:	c1 e0       	ldi	r28, 0x01	; 1
    2248:	2e c0       	rjmp	.+92     	; 0x22a6 <udd_ctrl_interrupt_tc_setup+0xda>
    224a:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udd_g_ctrlreq>
    224e:	88 23       	and	r24, r24
    2250:	6c f4       	brge	.+26     	; 0x226c <udd_ctrl_interrupt_tc_setup+0xa0>
    2252:	10 92 6d 23 	sts	0x236D, r1	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
    2256:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    225a:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udd_ctrl_payload_nb_trans>
    225e:	10 92 6c 23 	sts	0x236C, r1	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    2262:	82 e0       	ldi	r24, 0x02	; 2
    2264:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ep_control_state>
    2268:	02 df       	rcall	.-508    	; 0x206e <udd_ctrl_in_sent>
    226a:	1d c0       	rjmp	.+58     	; 0x22a6 <udd_ctrl_interrupt_tc_setup+0xda>
    226c:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    2270:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    2274:	89 2b       	or	r24, r25
    2276:	11 f4       	brne	.+4      	; 0x227c <udd_ctrl_interrupt_tc_setup+0xb0>
    2278:	e4 de       	rcall	.-568    	; 0x2042 <udd_ctrl_send_zlp_in>
    227a:	15 c0       	rjmp	.+42     	; 0x22a6 <udd_ctrl_interrupt_tc_setup+0xda>
    227c:	10 92 6d 23 	sts	0x236D, r1	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
    2280:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    2284:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udd_ctrl_payload_nb_trans>
    2288:	10 92 6c 23 	sts	0x236C, r1	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ep_control_state>
    2292:	e4 e8       	ldi	r30, 0x84	; 132
    2294:	f3 e2       	ldi	r31, 0x23	; 35
    2296:	02 e0       	ldi	r16, 0x02	; 2
    2298:	06 93       	lac	Z, r16
    229a:	00 e2       	ldi	r16, 0x20	; 32
    229c:	06 93       	lac	Z, r16
    229e:	03 c0       	rjmp	.+6      	; 0x22a6 <udd_ctrl_interrupt_tc_setup+0xda>
    22a0:	c0 e0       	ldi	r28, 0x00	; 0
    22a2:	01 c0       	rjmp	.+2      	; 0x22a6 <udd_ctrl_interrupt_tc_setup+0xda>
    22a4:	c1 e0       	ldi	r28, 0x01	; 1
    22a6:	8c 2f       	mov	r24, r28
    22a8:	cf 91       	pop	r28
    22aa:	0f 91       	pop	r16
    22ac:	08 95       	ret

000022ae <udd_ep_trans_complet>:
    22ae:	8f 92       	push	r8
    22b0:	9f 92       	push	r9
    22b2:	af 92       	push	r10
    22b4:	bf 92       	push	r11
    22b6:	df 92       	push	r13
    22b8:	ef 92       	push	r14
    22ba:	ff 92       	push	r15
    22bc:	0f 93       	push	r16
    22be:	1f 93       	push	r17
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	d8 2e       	mov	r13, r24
    22c6:	67 df       	rcall	.-306    	; 0x2196 <udd_ep_get_job>
    22c8:	8c 01       	movw	r16, r24
    22ca:	cd 2d       	mov	r28, r13
    22cc:	cf 70       	andi	r28, 0x0F	; 15
    22ce:	d0 e0       	ldi	r29, 0x00	; 0
    22d0:	ce 01       	movw	r24, r28
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	cd 2d       	mov	r28, r13
    22d8:	0d 2c       	mov	r0, r13
    22da:	00 0c       	add	r0, r0
    22dc:	dd 0b       	sbc	r29, r29
    22de:	cc 27       	eor	r28, r28
    22e0:	dd 0f       	add	r29, r29
    22e2:	cc 1f       	adc	r28, r28
    22e4:	dd 27       	eor	r29, r29
    22e6:	c8 0f       	add	r28, r24
    22e8:	d9 1f       	adc	r29, r25
    22ea:	ce 01       	movw	r24, r28
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	9c 01       	movw	r18, r24
    22fa:	2c 57       	subi	r18, 0x7C	; 124
    22fc:	3c 4d       	sbci	r19, 0xDC	; 220
    22fe:	79 01       	movw	r14, r18
    2300:	c9 01       	movw	r24, r18
    2302:	21 df       	rcall	.-446    	; 0x2146 <udd_ep_get_size>
    2304:	4c 01       	movw	r8, r24
    2306:	dd 20       	and	r13, r13
    2308:	0c f0       	brlt	.+2      	; 0x230c <udd_ep_trans_complet+0x5e>
    230a:	79 c0       	rjmp	.+242    	; 0x23fe <udd_ep_trans_complet+0x150>
    230c:	fe 01       	movw	r30, r28
    230e:	ee 0f       	add	r30, r30
    2310:	ff 1f       	adc	r31, r31
    2312:	ee 0f       	add	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	ee 0f       	add	r30, r30
    2318:	ff 1f       	adc	r31, r31
    231a:	e0 59       	subi	r30, 0x90	; 144
    231c:	fc 4d       	sbci	r31, 0xDC	; 220
    231e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2320:	33 8d       	ldd	r19, Z+27	; 0x1b
    2322:	d8 01       	movw	r26, r16
    2324:	15 96       	adiw	r26, 0x05	; 5
    2326:	8d 91       	ld	r24, X+
    2328:	9c 91       	ld	r25, X
    232a:	16 97       	sbiw	r26, 0x06	; 6
    232c:	82 0f       	add	r24, r18
    232e:	93 1f       	adc	r25, r19
    2330:	15 96       	adiw	r26, 0x05	; 5
    2332:	8d 93       	st	X+, r24
    2334:	9c 93       	st	X, r25
    2336:	16 97       	sbiw	r26, 0x06	; 6
    2338:	13 96       	adiw	r26, 0x03	; 3
    233a:	2d 91       	ld	r18, X+
    233c:	3c 91       	ld	r19, X
    233e:	14 97       	sbiw	r26, 0x04	; 4
    2340:	82 17       	cp	r24, r18
    2342:	93 07       	cpc	r25, r19
    2344:	09 f4       	brne	.+2      	; 0x2348 <udd_ep_trans_complet+0x9a>
    2346:	45 c0       	rjmp	.+138    	; 0x23d2 <udd_ep_trans_complet+0x124>
    2348:	28 1b       	sub	r18, r24
    234a:	39 0b       	sbc	r19, r25
    234c:	21 15       	cp	r18, r1
    234e:	b4 e0       	ldi	r27, 0x04	; 4
    2350:	3b 07       	cpc	r19, r27
    2352:	38 f0       	brcs	.+14     	; 0x2362 <udd_ep_trans_complet+0xb4>
    2354:	2f ef       	ldi	r18, 0xFF	; 255
    2356:	33 e0       	ldi	r19, 0x03	; 3
    2358:	c9 01       	movw	r24, r18
    235a:	b4 01       	movw	r22, r8
    235c:	12 d6       	rcall	.+3108   	; 0x2f82 <__udivmodhi4>
    235e:	28 1b       	sub	r18, r24
    2360:	39 0b       	sbc	r19, r25
    2362:	f8 01       	movw	r30, r16
    2364:	80 81       	ld	r24, Z
    2366:	81 ff       	sbrs	r24, 1
    2368:	09 c0       	rjmp	.+18     	; 0x237c <udd_ep_trans_complet+0xce>
    236a:	c9 01       	movw	r24, r18
    236c:	b4 01       	movw	r22, r8
    236e:	09 d6       	rcall	.+3090   	; 0x2f82 <__udivmodhi4>
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	89 2b       	or	r24, r25
    2374:	09 f0       	breq	.+2      	; 0x2378 <udd_ep_trans_complet+0xca>
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	84 2f       	mov	r24, r20
    237a:	01 c0       	rjmp	.+2      	; 0x237e <udd_ep_trans_complet+0xd0>
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	d8 01       	movw	r26, r16
    2380:	9c 91       	ld	r25, X
    2382:	80 fb       	bst	r24, 0
    2384:	91 f9       	bld	r25, 1
    2386:	9c 93       	st	X, r25
    2388:	fe 01       	movw	r30, r28
    238a:	ee 0f       	add	r30, r30
    238c:	ff 1f       	adc	r31, r31
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31
    2392:	ee 0f       	add	r30, r30
    2394:	ff 1f       	adc	r31, r31
    2396:	e0 59       	subi	r30, 0x90	; 144
    2398:	fc 4d       	sbci	r31, 0xDC	; 220
    239a:	12 8e       	std	Z+26, r1	; 0x1a
    239c:	13 8e       	std	Z+27, r1	; 0x1b
    239e:	26 8b       	std	Z+22, r18	; 0x16
    23a0:	37 8b       	std	Z+23, r19	; 0x17
    23a2:	11 96       	adiw	r26, 0x01	; 1
    23a4:	2d 91       	ld	r18, X+
    23a6:	3c 91       	ld	r19, X
    23a8:	12 97       	sbiw	r26, 0x02	; 2
    23aa:	15 96       	adiw	r26, 0x05	; 5
    23ac:	8d 91       	ld	r24, X+
    23ae:	9c 91       	ld	r25, X
    23b0:	16 97       	sbiw	r26, 0x06	; 6
    23b2:	82 0f       	add	r24, r18
    23b4:	93 1f       	adc	r25, r19
    23b6:	cc 0f       	add	r28, r28
    23b8:	dd 1f       	adc	r29, r29
    23ba:	cc 0f       	add	r28, r28
    23bc:	dd 1f       	adc	r29, r29
    23be:	cc 0f       	add	r28, r28
    23c0:	dd 1f       	adc	r29, r29
    23c2:	c8 57       	subi	r28, 0x78	; 120
    23c4:	dc 4d       	sbci	r29, 0xDC	; 220
    23c6:	88 83       	st	Y, r24
    23c8:	99 83       	std	Y+1, r25	; 0x01
    23ca:	f7 01       	movw	r30, r14
    23cc:	02 e0       	ldi	r16, 0x02	; 2
    23ce:	06 93       	lac	Z, r16
    23d0:	e0 c0       	rjmp	.+448    	; 0x2592 <udd_ep_trans_complet+0x2e4>
    23d2:	d8 01       	movw	r26, r16
    23d4:	8c 91       	ld	r24, X
    23d6:	81 ff       	sbrs	r24, 1
    23d8:	c9 c0       	rjmp	.+402    	; 0x256c <udd_ep_trans_complet+0x2be>
    23da:	8d 7f       	andi	r24, 0xFD	; 253
    23dc:	8c 93       	st	X, r24
    23de:	cc 0f       	add	r28, r28
    23e0:	dd 1f       	adc	r29, r29
    23e2:	cc 0f       	add	r28, r28
    23e4:	dd 1f       	adc	r29, r29
    23e6:	cc 0f       	add	r28, r28
    23e8:	dd 1f       	adc	r29, r29
    23ea:	c0 59       	subi	r28, 0x90	; 144
    23ec:	dc 4d       	sbci	r29, 0xDC	; 220
    23ee:	1a 8e       	std	Y+26, r1	; 0x1a
    23f0:	1b 8e       	std	Y+27, r1	; 0x1b
    23f2:	1e 8a       	std	Y+22, r1	; 0x16
    23f4:	1f 8a       	std	Y+23, r1	; 0x17
    23f6:	f7 01       	movw	r30, r14
    23f8:	02 e0       	ldi	r16, 0x02	; 2
    23fa:	06 93       	lac	Z, r16
    23fc:	ca c0       	rjmp	.+404    	; 0x2592 <udd_ep_trans_complet+0x2e4>
    23fe:	fe 01       	movw	r30, r28
    2400:	ee 0f       	add	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	ee 0f       	add	r30, r30
    2406:	ff 1f       	adc	r31, r31
    2408:	ee 0f       	add	r30, r30
    240a:	ff 1f       	adc	r31, r31
    240c:	e0 59       	subi	r30, 0x90	; 144
    240e:	fc 4d       	sbci	r31, 0xDC	; 220
    2410:	a6 88       	ldd	r10, Z+22	; 0x16
    2412:	b7 88       	ldd	r11, Z+23	; 0x17
    2414:	d8 01       	movw	r26, r16
    2416:	8c 91       	ld	r24, X
    2418:	82 ff       	sbrs	r24, 2
    241a:	19 c0       	rjmp	.+50     	; 0x244e <udd_ep_trans_complet+0x1a0>
    241c:	11 96       	adiw	r26, 0x01	; 1
    241e:	ed 91       	ld	r30, X+
    2420:	fc 91       	ld	r31, X
    2422:	12 97       	sbiw	r26, 0x02	; 2
    2424:	15 96       	adiw	r26, 0x05	; 5
    2426:	2d 91       	ld	r18, X+
    2428:	3c 91       	ld	r19, X
    242a:	16 97       	sbiw	r26, 0x06	; 6
    242c:	13 96       	adiw	r26, 0x03	; 3
    242e:	8d 91       	ld	r24, X+
    2430:	9c 91       	ld	r25, X
    2432:	14 97       	sbiw	r26, 0x04	; 4
    2434:	b4 01       	movw	r22, r8
    2436:	a5 d5       	rcall	.+2890   	; 0x2f82 <__udivmodhi4>
    2438:	b0 e4       	ldi	r27, 0x40	; 64
    243a:	db 9e       	mul	r13, r27
    243c:	b0 01       	movw	r22, r0
    243e:	11 24       	eor	r1, r1
    2440:	65 52       	subi	r22, 0x25	; 37
    2442:	7e 4d       	sbci	r23, 0xDE	; 222
    2444:	ac 01       	movw	r20, r24
    2446:	cf 01       	movw	r24, r30
    2448:	82 0f       	add	r24, r18
    244a:	93 1f       	adc	r25, r19
    244c:	b6 d5       	rcall	.+2924   	; 0x2fba <memcpy>
    244e:	f8 01       	movw	r30, r16
    2450:	25 81       	ldd	r18, Z+5	; 0x05
    2452:	36 81       	ldd	r19, Z+6	; 0x06
    2454:	2a 0d       	add	r18, r10
    2456:	3b 1d       	adc	r19, r11
    2458:	25 83       	std	Z+5, r18	; 0x05
    245a:	36 83       	std	Z+6, r19	; 0x06
    245c:	83 81       	ldd	r24, Z+3	; 0x03
    245e:	94 81       	ldd	r25, Z+4	; 0x04
    2460:	82 17       	cp	r24, r18
    2462:	93 07       	cpc	r25, r19
    2464:	68 f4       	brcc	.+26     	; 0x2480 <udd_ep_trans_complet+0x1d2>
    2466:	85 83       	std	Z+5, r24	; 0x05
    2468:	96 83       	std	Z+6, r25	; 0x06
    246a:	cc 0f       	add	r28, r28
    246c:	dd 1f       	adc	r29, r29
    246e:	cc 0f       	add	r28, r28
    2470:	dd 1f       	adc	r29, r29
    2472:	cc 0f       	add	r28, r28
    2474:	dd 1f       	adc	r29, r29
    2476:	c0 59       	subi	r28, 0x90	; 144
    2478:	dc 4d       	sbci	r29, 0xDC	; 220
    247a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    247c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    247e:	76 c0       	rjmp	.+236    	; 0x256c <udd_ep_trans_complet+0x2be>
    2480:	fe 01       	movw	r30, r28
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	ee 0f       	add	r30, r30
    2488:	ff 1f       	adc	r31, r31
    248a:	ee 0f       	add	r30, r30
    248c:	ff 1f       	adc	r31, r31
    248e:	e0 59       	subi	r30, 0x90	; 144
    2490:	fc 4d       	sbci	r31, 0xDC	; 220
    2492:	42 8d       	ldd	r20, Z+26	; 0x1a
    2494:	53 8d       	ldd	r21, Z+27	; 0x1b
    2496:	a4 16       	cp	r10, r20
    2498:	b5 06       	cpc	r11, r21
    249a:	09 f0       	breq	.+2      	; 0x249e <udd_ep_trans_complet+0x1f0>
    249c:	67 c0       	rjmp	.+206    	; 0x256c <udd_ep_trans_complet+0x2be>
    249e:	28 17       	cp	r18, r24
    24a0:	39 07       	cpc	r19, r25
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <udd_ep_trans_complet+0x1f8>
    24a4:	63 c0       	rjmp	.+198    	; 0x256c <udd_ep_trans_complet+0x2be>
    24a6:	ac 01       	movw	r20, r24
    24a8:	42 1b       	sub	r20, r18
    24aa:	53 0b       	sbc	r21, r19
    24ac:	9a 01       	movw	r18, r20
    24ae:	21 15       	cp	r18, r1
    24b0:	54 e0       	ldi	r21, 0x04	; 4
    24b2:	35 07       	cpc	r19, r21
    24b4:	40 f0       	brcs	.+16     	; 0x24c6 <udd_ep_trans_complet+0x218>
    24b6:	2f ef       	ldi	r18, 0xFF	; 255
    24b8:	33 e0       	ldi	r19, 0x03	; 3
    24ba:	c9 01       	movw	r24, r18
    24bc:	b4 01       	movw	r22, r8
    24be:	61 d5       	rcall	.+2754   	; 0x2f82 <__udivmodhi4>
    24c0:	28 1b       	sub	r18, r24
    24c2:	39 0b       	sbc	r19, r25
    24c4:	05 c0       	rjmp	.+10     	; 0x24d0 <udd_ep_trans_complet+0x222>
    24c6:	c9 01       	movw	r24, r18
    24c8:	b4 01       	movw	r22, r8
    24ca:	5b d5       	rcall	.+2742   	; 0x2f82 <__udivmodhi4>
    24cc:	28 1b       	sub	r18, r24
    24ce:	39 0b       	sbc	r19, r25
    24d0:	fe 01       	movw	r30, r28
    24d2:	ee 0f       	add	r30, r30
    24d4:	ff 1f       	adc	r31, r31
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	ee 0f       	add	r30, r30
    24dc:	ff 1f       	adc	r31, r31
    24de:	e0 59       	subi	r30, 0x90	; 144
    24e0:	fc 4d       	sbci	r31, 0xDC	; 220
    24e2:	16 8a       	std	Z+22, r1	; 0x16
    24e4:	17 8a       	std	Z+23, r1	; 0x17
    24e6:	28 15       	cp	r18, r8
    24e8:	39 05       	cpc	r19, r9
    24ea:	00 f5       	brcc	.+64     	; 0x252c <udd_ep_trans_complet+0x27e>
    24ec:	d8 01       	movw	r26, r16
    24ee:	8c 91       	ld	r24, X
    24f0:	84 60       	ori	r24, 0x04	; 4
    24f2:	8c 93       	st	X, r24
    24f4:	b0 e4       	ldi	r27, 0x40	; 64
    24f6:	db 9e       	mul	r13, r27
    24f8:	c0 01       	movw	r24, r0
    24fa:	11 24       	eor	r1, r1
    24fc:	85 52       	subi	r24, 0x25	; 37
    24fe:	9e 4d       	sbci	r25, 0xDE	; 222
    2500:	fe 01       	movw	r30, r28
    2502:	ee 0f       	add	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	ee 0f       	add	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	ee 0f       	add	r30, r30
    250c:	ff 1f       	adc	r31, r31
    250e:	e8 57       	subi	r30, 0x78	; 120
    2510:	fc 4d       	sbci	r31, 0xDC	; 220
    2512:	80 83       	st	Z, r24
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	cc 0f       	add	r28, r28
    2518:	dd 1f       	adc	r29, r29
    251a:	cc 0f       	add	r28, r28
    251c:	dd 1f       	adc	r29, r29
    251e:	cc 0f       	add	r28, r28
    2520:	dd 1f       	adc	r29, r29
    2522:	c0 59       	subi	r28, 0x90	; 144
    2524:	dc 4d       	sbci	r29, 0xDC	; 220
    2526:	8a 8e       	std	Y+26, r8	; 0x1a
    2528:	9b 8e       	std	Y+27, r9	; 0x1b
    252a:	1c c0       	rjmp	.+56     	; 0x2564 <udd_ep_trans_complet+0x2b6>
    252c:	f8 01       	movw	r30, r16
    252e:	41 81       	ldd	r20, Z+1	; 0x01
    2530:	52 81       	ldd	r21, Z+2	; 0x02
    2532:	85 81       	ldd	r24, Z+5	; 0x05
    2534:	96 81       	ldd	r25, Z+6	; 0x06
    2536:	84 0f       	add	r24, r20
    2538:	95 1f       	adc	r25, r21
    253a:	fe 01       	movw	r30, r28
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	ee 0f       	add	r30, r30
    2542:	ff 1f       	adc	r31, r31
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	e8 57       	subi	r30, 0x78	; 120
    254a:	fc 4d       	sbci	r31, 0xDC	; 220
    254c:	80 83       	st	Z, r24
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	cc 0f       	add	r28, r28
    2552:	dd 1f       	adc	r29, r29
    2554:	cc 0f       	add	r28, r28
    2556:	dd 1f       	adc	r29, r29
    2558:	cc 0f       	add	r28, r28
    255a:	dd 1f       	adc	r29, r29
    255c:	c0 59       	subi	r28, 0x90	; 144
    255e:	dc 4d       	sbci	r29, 0xDC	; 220
    2560:	2a 8f       	std	Y+26, r18	; 0x1a
    2562:	3b 8f       	std	Y+27, r19	; 0x1b
    2564:	f7 01       	movw	r30, r14
    2566:	02 e0       	ldi	r16, 0x02	; 2
    2568:	06 93       	lac	Z, r16
    256a:	13 c0       	rjmp	.+38     	; 0x2592 <udd_ep_trans_complet+0x2e4>
    256c:	d8 01       	movw	r26, r16
    256e:	8c 91       	ld	r24, X
    2570:	80 ff       	sbrs	r24, 0
    2572:	0f c0       	rjmp	.+30     	; 0x2592 <udd_ep_trans_complet+0x2e4>
    2574:	8e 7f       	andi	r24, 0xFE	; 254
    2576:	8c 93       	st	X, r24
    2578:	17 96       	adiw	r26, 0x07	; 7
    257a:	ed 91       	ld	r30, X+
    257c:	fc 91       	ld	r31, X
    257e:	18 97       	sbiw	r26, 0x08	; 8
    2580:	30 97       	sbiw	r30, 0x00	; 0
    2582:	39 f0       	breq	.+14     	; 0x2592 <udd_ep_trans_complet+0x2e4>
    2584:	15 96       	adiw	r26, 0x05	; 5
    2586:	6d 91       	ld	r22, X+
    2588:	7c 91       	ld	r23, X
    258a:	16 97       	sbiw	r26, 0x06	; 6
    258c:	4d 2d       	mov	r20, r13
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	19 95       	eicall
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	1f 91       	pop	r17
    2598:	0f 91       	pop	r16
    259a:	ff 90       	pop	r15
    259c:	ef 90       	pop	r14
    259e:	df 90       	pop	r13
    25a0:	bf 90       	pop	r11
    25a2:	af 90       	pop	r10
    25a4:	9f 90       	pop	r9
    25a6:	8f 90       	pop	r8
    25a8:	08 95       	ret

000025aa <udd_attach>:
    25aa:	1f 93       	push	r17
    25ac:	cf 93       	push	r28
    25ae:	df 93       	push	r29
    25b0:	1f 92       	push	r1
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	8f b7       	in	r24, 0x3f	; 63
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	f8 94       	cli
    25bc:	19 81       	ldd	r17, Y+1	; 0x01
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	d5 dc       	rcall	.-1622   	; 0x1f6c <udd_sleep_mode>
    25c2:	ea ec       	ldi	r30, 0xCA	; 202
    25c4:	f4 e0       	ldi	r31, 0x04	; 4
    25c6:	80 e4       	ldi	r24, 0x40	; 64
    25c8:	80 83       	st	Z, r24
    25ca:	80 e2       	ldi	r24, 0x20	; 32
    25cc:	80 83       	st	Z, r24
    25ce:	e1 ec       	ldi	r30, 0xC1	; 193
    25d0:	f4 e0       	ldi	r31, 0x04	; 4
    25d2:	80 81       	ld	r24, Z
    25d4:	81 60       	ori	r24, 0x01	; 1
    25d6:	80 83       	st	Z, r24
    25d8:	a9 ec       	ldi	r26, 0xC9	; 201
    25da:	b4 e0       	ldi	r27, 0x04	; 4
    25dc:	8c 91       	ld	r24, X
    25de:	82 60       	ori	r24, 0x02	; 2
    25e0:	8c 93       	st	X, r24
    25e2:	e8 ec       	ldi	r30, 0xC8	; 200
    25e4:	f4 e0       	ldi	r31, 0x04	; 4
    25e6:	80 81       	ld	r24, Z
    25e8:	80 64       	ori	r24, 0x40	; 64
    25ea:	80 83       	st	Z, r24
    25ec:	8c 91       	ld	r24, X
    25ee:	81 60       	ori	r24, 0x01	; 1
    25f0:	8c 93       	st	X, r24
    25f2:	80 81       	ld	r24, Z
    25f4:	80 68       	ori	r24, 0x80	; 128
    25f6:	80 83       	st	Z, r24
    25f8:	1f bf       	out	0x3f, r17	; 63
    25fa:	0f 90       	pop	r0
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	1f 91       	pop	r17
    2602:	08 95       	ret

00002604 <udd_enable>:
    2604:	0f 93       	push	r16
    2606:	1f 93       	push	r17
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	1f 92       	push	r1
    260e:	1f 92       	push	r1
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	00 e6       	ldi	r16, 0x60	; 96
    2616:	10 e0       	ldi	r17, 0x00	; 0
    2618:	f8 01       	movw	r30, r16
    261a:	10 82       	st	Z, r1
    261c:	80 e3       	ldi	r24, 0x30	; 48
    261e:	0e 94 a7 09 	call	0x134e	; 0x134e <sysclk_enable_usb>
    2622:	e0 ec       	ldi	r30, 0xC0	; 192
    2624:	f4 e0       	ldi	r31, 0x04	; 4
    2626:	80 81       	ld	r24, Z
    2628:	80 64       	ori	r24, 0x40	; 64
    262a:	80 83       	st	Z, r24
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	f8 01       	movw	r30, r16
    2630:	80 83       	st	Z, r24
    2632:	8f b7       	in	r24, 0x3f	; 63
    2634:	8a 83       	std	Y+2, r24	; 0x02
    2636:	f8 94       	cli
    2638:	1a 81       	ldd	r17, Y+2	; 0x02
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	fc 01       	movw	r30, r24
    2640:	ee 0f       	add	r30, r30
    2642:	ff 1f       	adc	r31, r31
    2644:	ee 0f       	add	r30, r30
    2646:	ff 1f       	adc	r31, r31
    2648:	ee 0f       	add	r30, r30
    264a:	ff 1f       	adc	r31, r31
    264c:	e0 59       	subi	r30, 0x90	; 144
    264e:	fc 4d       	sbci	r31, 0xDC	; 220
    2650:	15 8a       	std	Z+21, r1	; 0x15
    2652:	01 96       	adiw	r24, 0x01	; 1
    2654:	8a 30       	cpi	r24, 0x0A	; 10
    2656:	91 05       	cpc	r25, r1
    2658:	91 f7       	brne	.-28     	; 0x263e <udd_enable+0x3a>
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	fc 01       	movw	r30, r24
    2660:	ee 0f       	add	r30, r30
    2662:	ff 1f       	adc	r31, r31
    2664:	ee 0f       	add	r30, r30
    2666:	ff 1f       	adc	r31, r31
    2668:	ee 0f       	add	r30, r30
    266a:	ff 1f       	adc	r31, r31
    266c:	e8 0f       	add	r30, r24
    266e:	f9 1f       	adc	r31, r25
    2670:	e5 5e       	subi	r30, 0xE5	; 229
    2672:	fc 4d       	sbci	r31, 0xDC	; 220
    2674:	20 81       	ld	r18, Z
    2676:	2e 7f       	andi	r18, 0xFE	; 254
    2678:	20 83       	st	Z, r18
    267a:	01 96       	adiw	r24, 0x01	; 1
    267c:	88 30       	cpi	r24, 0x08	; 8
    267e:	91 05       	cpc	r25, r1
    2680:	71 f7       	brne	.-36     	; 0x265e <udd_enable+0x5a>
    2682:	6a e1       	ldi	r22, 0x1A	; 26
    2684:	70 e0       	ldi	r23, 0x00	; 0
    2686:	82 e0       	ldi	r24, 0x02	; 2
    2688:	61 dc       	rcall	.-1854   	; 0x1f4c <nvm_read_byte>
    268a:	8f 3f       	cpi	r24, 0xFF	; 255
    268c:	19 f0       	breq	.+6      	; 0x2694 <udd_enable+0x90>
    268e:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    2692:	03 c0       	rjmp	.+6      	; 0x269a <udd_enable+0x96>
    2694:	8f e1       	ldi	r24, 0x1F	; 31
    2696:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    269a:	6b e1       	ldi	r22, 0x1B	; 27
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	82 e0       	ldi	r24, 0x02	; 2
    26a0:	55 dc       	rcall	.-1878   	; 0x1f4c <nvm_read_byte>
    26a2:	8f 3f       	cpi	r24, 0xFF	; 255
    26a4:	19 f0       	breq	.+6      	; 0x26ac <udd_enable+0xa8>
    26a6:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    26aa:	03 c0       	rjmp	.+6      	; 0x26b2 <udd_enable+0xae>
    26ac:	8f e1       	ldi	r24, 0x1F	; 31
    26ae:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    26b2:	e0 ec       	ldi	r30, 0xC0	; 192
    26b4:	f4 e0       	ldi	r31, 0x04	; 4
    26b6:	80 81       	ld	r24, Z
    26b8:	84 60       	ori	r24, 0x04	; 4
    26ba:	80 83       	st	Z, r24
    26bc:	80 81       	ld	r24, Z
    26be:	80 68       	ori	r24, 0x80	; 128
    26c0:	80 83       	st	Z, r24
    26c2:	80 81       	ld	r24, Z
    26c4:	80 61       	ori	r24, 0x10	; 16
    26c6:	80 83       	st	Z, r24
    26c8:	84 e8       	ldi	r24, 0x84	; 132
    26ca:	93 e2       	ldi	r25, 0x23	; 35
    26cc:	86 83       	std	Z+6, r24	; 0x06
    26ce:	97 83       	std	Z+7, r25	; 0x07
    26d0:	80 81       	ld	r24, Z
    26d2:	80 62       	ori	r24, 0x20	; 32
    26d4:	80 83       	st	Z, r24
    26d6:	8f ef       	ldi	r24, 0xFF	; 255
    26d8:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    26dc:	e8 ec       	ldi	r30, 0xC8	; 200
    26de:	f4 e0       	ldi	r31, 0x04	; 4
    26e0:	80 81       	ld	r24, Z
    26e2:	81 60       	ori	r24, 0x01	; 1
    26e4:	80 83       	st	Z, r24
    26e6:	10 92 d8 23 	sts	0x23D8, r1	; 0x8023d8 <udd_b_idle>
    26ea:	80 91 e1 23 	lds	r24, 0x23E1	; 0x8023e1 <sleepmgr_locks+0x5>
    26ee:	8f 3f       	cpi	r24, 0xFF	; 255
    26f0:	09 f4       	brne	.+2      	; 0x26f4 <udd_enable+0xf0>
    26f2:	ff cf       	rjmp	.-2      	; 0x26f2 <udd_enable+0xee>
    26f4:	8f b7       	in	r24, 0x3f	; 63
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	f8 94       	cli
    26fa:	99 81       	ldd	r25, Y+1	; 0x01
    26fc:	ec ed       	ldi	r30, 0xDC	; 220
    26fe:	f3 e2       	ldi	r31, 0x23	; 35
    2700:	85 81       	ldd	r24, Z+5	; 0x05
    2702:	8f 5f       	subi	r24, 0xFF	; 255
    2704:	85 83       	std	Z+5, r24	; 0x05
    2706:	9f bf       	out	0x3f, r25	; 63
    2708:	50 df       	rcall	.-352    	; 0x25aa <udd_attach>
    270a:	1f bf       	out	0x3f, r17	; 63
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	08 95       	ret

0000271a <udd_set_address>:
    271a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    271e:	08 95       	ret

00002720 <udd_getaddress>:
    2720:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2724:	08 95       	ret

00002726 <udd_set_setup_payload>:
    2726:	e2 ee       	ldi	r30, 0xE2	; 226
    2728:	f3 e2       	ldi	r31, 0x23	; 35
    272a:	80 87       	std	Z+8, r24	; 0x08
    272c:	91 87       	std	Z+9, r25	; 0x09
    272e:	62 87       	std	Z+10, r22	; 0x0a
    2730:	73 87       	std	Z+11, r23	; 0x0b
    2732:	08 95       	ret

00002734 <udd_ep_alloc>:
    2734:	28 2f       	mov	r18, r24
    2736:	2f 70       	andi	r18, 0x0F	; 15
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	22 0f       	add	r18, r18
    273c:	33 1f       	adc	r19, r19
    273e:	08 2e       	mov	r0, r24
    2740:	00 0c       	add	r0, r0
    2742:	99 0b       	sbc	r25, r25
    2744:	88 27       	eor	r24, r24
    2746:	99 0f       	add	r25, r25
    2748:	88 1f       	adc	r24, r24
    274a:	99 27       	eor	r25, r25
    274c:	82 0f       	add	r24, r18
    274e:	93 1f       	adc	r25, r19
    2750:	fc 01       	movw	r30, r24
    2752:	ee 0f       	add	r30, r30
    2754:	ff 1f       	adc	r31, r31
    2756:	ee 0f       	add	r30, r30
    2758:	ff 1f       	adc	r31, r31
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	e0 59       	subi	r30, 0x90	; 144
    2760:	fc 4d       	sbci	r31, 0xDC	; 220
    2762:	25 89       	ldd	r18, Z+21	; 0x15
    2764:	20 7c       	andi	r18, 0xC0	; 192
    2766:	09 f0       	breq	.+2      	; 0x276a <udd_ep_alloc+0x36>
    2768:	69 c0       	rjmp	.+210    	; 0x283c <udd_ep_alloc+0x108>
    276a:	63 70       	andi	r22, 0x03	; 3
    276c:	61 30       	cpi	r22, 0x01	; 1
    276e:	11 f0       	breq	.+4      	; 0x2774 <udd_ep_alloc+0x40>
    2770:	18 f4       	brcc	.+6      	; 0x2778 <udd_ep_alloc+0x44>
    2772:	04 c0       	rjmp	.+8      	; 0x277c <udd_ep_alloc+0x48>
    2774:	60 ec       	ldi	r22, 0xC0	; 192
    2776:	03 c0       	rjmp	.+6      	; 0x277e <udd_ep_alloc+0x4a>
    2778:	60 e8       	ldi	r22, 0x80	; 128
    277a:	01 c0       	rjmp	.+2      	; 0x277e <udd_ep_alloc+0x4a>
    277c:	60 e4       	ldi	r22, 0x40	; 64
    277e:	40 38       	cpi	r20, 0x80	; 128
    2780:	51 05       	cpc	r21, r1
    2782:	e9 f0       	breq	.+58     	; 0x27be <udd_ep_alloc+0x8a>
    2784:	50 f4       	brcc	.+20     	; 0x279a <udd_ep_alloc+0x66>
    2786:	40 32       	cpi	r20, 0x20	; 32
    2788:	51 05       	cpc	r21, r1
    278a:	a9 f0       	breq	.+42     	; 0x27b6 <udd_ep_alloc+0x82>
    278c:	40 34       	cpi	r20, 0x40	; 64
    278e:	51 05       	cpc	r21, r1
    2790:	a1 f0       	breq	.+40     	; 0x27ba <udd_ep_alloc+0x86>
    2792:	40 31       	cpi	r20, 0x10	; 16
    2794:	51 05       	cpc	r21, r1
    2796:	d9 f4       	brne	.+54     	; 0x27ce <udd_ep_alloc+0x9a>
    2798:	0c c0       	rjmp	.+24     	; 0x27b2 <udd_ep_alloc+0x7e>
    279a:	41 15       	cp	r20, r1
    279c:	22 e0       	ldi	r18, 0x02	; 2
    279e:	52 07       	cpc	r21, r18
    27a0:	91 f0       	breq	.+36     	; 0x27c6 <udd_ep_alloc+0x92>
    27a2:	4f 3f       	cpi	r20, 0xFF	; 255
    27a4:	23 e0       	ldi	r18, 0x03	; 3
    27a6:	52 07       	cpc	r21, r18
    27a8:	81 f0       	breq	.+32     	; 0x27ca <udd_ep_alloc+0x96>
    27aa:	41 15       	cp	r20, r1
    27ac:	51 40       	sbci	r21, 0x01	; 1
    27ae:	79 f4       	brne	.+30     	; 0x27ce <udd_ep_alloc+0x9a>
    27b0:	08 c0       	rjmp	.+16     	; 0x27c2 <udd_ep_alloc+0x8e>
    27b2:	21 e0       	ldi	r18, 0x01	; 1
    27b4:	0d c0       	rjmp	.+26     	; 0x27d0 <udd_ep_alloc+0x9c>
    27b6:	22 e0       	ldi	r18, 0x02	; 2
    27b8:	0b c0       	rjmp	.+22     	; 0x27d0 <udd_ep_alloc+0x9c>
    27ba:	23 e0       	ldi	r18, 0x03	; 3
    27bc:	09 c0       	rjmp	.+18     	; 0x27d0 <udd_ep_alloc+0x9c>
    27be:	24 e0       	ldi	r18, 0x04	; 4
    27c0:	07 c0       	rjmp	.+14     	; 0x27d0 <udd_ep_alloc+0x9c>
    27c2:	25 e0       	ldi	r18, 0x05	; 5
    27c4:	05 c0       	rjmp	.+10     	; 0x27d0 <udd_ep_alloc+0x9c>
    27c6:	26 e0       	ldi	r18, 0x06	; 6
    27c8:	03 c0       	rjmp	.+6      	; 0x27d0 <udd_ep_alloc+0x9c>
    27ca:	27 e0       	ldi	r18, 0x07	; 7
    27cc:	01 c0       	rjmp	.+2      	; 0x27d0 <udd_ep_alloc+0x9c>
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	fc 01       	movw	r30, r24
    27d2:	ee 0f       	add	r30, r30
    27d4:	ff 1f       	adc	r31, r31
    27d6:	ee 0f       	add	r30, r30
    27d8:	ff 1f       	adc	r31, r31
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	e0 59       	subi	r30, 0x90	; 144
    27e0:	fc 4d       	sbci	r31, 0xDC	; 220
    27e2:	15 8a       	std	Z+21, r1	; 0x15
    27e4:	36 e0       	ldi	r19, 0x06	; 6
    27e6:	34 8b       	std	Z+20, r19	; 0x14
    27e8:	26 2b       	or	r18, r22
    27ea:	25 8b       	std	Z+21, r18	; 0x15
    27ec:	fc 01       	movw	r30, r24
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	ee 0f       	add	r30, r30
    27f4:	ff 1f       	adc	r31, r31
    27f6:	ee 0f       	add	r30, r30
    27f8:	ff 1f       	adc	r31, r31
    27fa:	e0 59       	subi	r30, 0x90	; 144
    27fc:	fc 4d       	sbci	r31, 0xDC	; 220
    27fe:	25 89       	ldd	r18, Z+21	; 0x15
    2800:	20 7c       	andi	r18, 0xC0	; 192
    2802:	20 3c       	cpi	r18, 0xC0	; 192
    2804:	69 f4       	brne	.+26     	; 0x2820 <udd_ep_alloc+0xec>
    2806:	fc 01       	movw	r30, r24
    2808:	ee 0f       	add	r30, r30
    280a:	ff 1f       	adc	r31, r31
    280c:	ee 0f       	add	r30, r30
    280e:	ff 1f       	adc	r31, r31
    2810:	ee 0f       	add	r30, r30
    2812:	ff 1f       	adc	r31, r31
    2814:	e0 59       	subi	r30, 0x90	; 144
    2816:	fc 4d       	sbci	r31, 0xDC	; 220
    2818:	25 89       	ldd	r18, Z+21	; 0x15
    281a:	27 70       	andi	r18, 0x07	; 7
    281c:	27 30       	cpi	r18, 0x07	; 7
    281e:	81 f0       	breq	.+32     	; 0x2840 <udd_ep_alloc+0x10c>
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	88 0f       	add	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	fc 01       	movw	r30, r24
    282e:	e0 59       	subi	r30, 0x90	; 144
    2830:	fc 4d       	sbci	r31, 0xDC	; 220
    2832:	85 89       	ldd	r24, Z+21	; 0x15
    2834:	80 62       	ori	r24, 0x20	; 32
    2836:	85 8b       	std	Z+21, r24	; 0x15
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	08 95       	ret
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	08 95       	ret
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	08 95       	ret

00002844 <udd_ep_is_halted>:
    2844:	e8 2f       	mov	r30, r24
    2846:	ef 70       	andi	r30, 0x0F	; 15
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	ee 0f       	add	r30, r30
    284c:	ff 1f       	adc	r31, r31
    284e:	08 2e       	mov	r0, r24
    2850:	00 0c       	add	r0, r0
    2852:	99 0b       	sbc	r25, r25
    2854:	88 27       	eor	r24, r24
    2856:	99 0f       	add	r25, r25
    2858:	88 1f       	adc	r24, r24
    285a:	99 27       	eor	r25, r25
    285c:	e8 0f       	add	r30, r24
    285e:	f9 1f       	adc	r31, r25
    2860:	ee 0f       	add	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	ee 0f       	add	r30, r30
    2866:	ff 1f       	adc	r31, r31
    2868:	ee 0f       	add	r30, r30
    286a:	ff 1f       	adc	r31, r31
    286c:	e0 59       	subi	r30, 0x90	; 144
    286e:	fc 4d       	sbci	r31, 0xDC	; 220
    2870:	85 89       	ldd	r24, Z+21	; 0x15
    2872:	82 fb       	bst	r24, 2
    2874:	88 27       	eor	r24, r24
    2876:	80 f9       	bld	r24, 0
    2878:	08 95       	ret

0000287a <udd_ep_clear_halt>:
    287a:	0f 93       	push	r16
    287c:	28 2f       	mov	r18, r24
    287e:	2f 70       	andi	r18, 0x0F	; 15
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	a9 01       	movw	r20, r18
    2884:	44 0f       	add	r20, r20
    2886:	55 1f       	adc	r21, r21
    2888:	28 2f       	mov	r18, r24
    288a:	08 2e       	mov	r0, r24
    288c:	00 0c       	add	r0, r0
    288e:	33 0b       	sbc	r19, r19
    2890:	22 27       	eor	r18, r18
    2892:	33 0f       	add	r19, r19
    2894:	22 1f       	adc	r18, r18
    2896:	33 27       	eor	r19, r19
    2898:	24 0f       	add	r18, r20
    289a:	35 1f       	adc	r19, r21
    289c:	a9 01       	movw	r20, r18
    289e:	44 0f       	add	r20, r20
    28a0:	55 1f       	adc	r21, r21
    28a2:	44 0f       	add	r20, r20
    28a4:	55 1f       	adc	r21, r21
    28a6:	44 0f       	add	r20, r20
    28a8:	55 1f       	adc	r21, r21
    28aa:	fa 01       	movw	r30, r20
    28ac:	ec 57       	subi	r30, 0x7C	; 124
    28ae:	fc 4d       	sbci	r31, 0xDC	; 220
    28b0:	01 e0       	ldi	r16, 0x01	; 1
    28b2:	06 93       	lac	Z, r16
    28b4:	fa 01       	movw	r30, r20
    28b6:	e0 59       	subi	r30, 0x90	; 144
    28b8:	fc 4d       	sbci	r31, 0xDC	; 220
    28ba:	95 89       	ldd	r25, Z+21	; 0x15
    28bc:	92 ff       	sbrs	r25, 2
    28be:	11 c0       	rjmp	.+34     	; 0x28e2 <udd_ep_clear_halt+0x68>
    28c0:	fa 01       	movw	r30, r20
    28c2:	e0 59       	subi	r30, 0x90	; 144
    28c4:	fc 4d       	sbci	r31, 0xDC	; 220
    28c6:	95 89       	ldd	r25, Z+21	; 0x15
    28c8:	9b 7f       	andi	r25, 0xFB	; 251
    28ca:	95 8b       	std	Z+21, r25	; 0x15
    28cc:	64 dc       	rcall	.-1848   	; 0x2196 <udd_ep_get_job>
    28ce:	fc 01       	movw	r30, r24
    28d0:	80 81       	ld	r24, Z
    28d2:	80 ff       	sbrs	r24, 0
    28d4:	06 c0       	rjmp	.+12     	; 0x28e2 <udd_ep_clear_halt+0x68>
    28d6:	8e 7f       	andi	r24, 0xFE	; 254
    28d8:	80 83       	st	Z, r24
    28da:	07 80       	ldd	r0, Z+7	; 0x07
    28dc:	f0 85       	ldd	r31, Z+8	; 0x08
    28de:	e0 2d       	mov	r30, r0
    28e0:	19 95       	eicall
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	0f 91       	pop	r16
    28e6:	08 95       	ret

000028e8 <udd_ep_run>:
    28e8:	6f 92       	push	r6
    28ea:	7f 92       	push	r7
    28ec:	8f 92       	push	r8
    28ee:	9f 92       	push	r9
    28f0:	af 92       	push	r10
    28f2:	bf 92       	push	r11
    28f4:	cf 92       	push	r12
    28f6:	df 92       	push	r13
    28f8:	ef 92       	push	r14
    28fa:	ff 92       	push	r15
    28fc:	0f 93       	push	r16
    28fe:	1f 93       	push	r17
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	1f 92       	push	r1
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	78 2e       	mov	r7, r24
    290c:	66 2e       	mov	r6, r22
    290e:	4a 01       	movw	r8, r20
    2910:	59 01       	movw	r10, r18
    2912:	41 dc       	rcall	.-1918   	; 0x2196 <udd_ep_get_job>
    2914:	6c 01       	movw	r12, r24
    2916:	27 2d       	mov	r18, r7
    2918:	87 2d       	mov	r24, r7
    291a:	8f 70       	andi	r24, 0x0F	; 15
    291c:	e8 2e       	mov	r14, r24
    291e:	f1 2c       	mov	r15, r1
    2920:	c7 01       	movw	r24, r14
    2922:	88 0f       	add	r24, r24
    2924:	99 1f       	adc	r25, r25
    2926:	e7 2c       	mov	r14, r7
    2928:	07 2c       	mov	r0, r7
    292a:	00 0c       	add	r0, r0
    292c:	ff 08       	sbc	r15, r15
    292e:	ee 24       	eor	r14, r14
    2930:	ff 0c       	add	r15, r15
    2932:	ee 1c       	adc	r14, r14
    2934:	ff 24       	eor	r15, r15
    2936:	e8 0e       	add	r14, r24
    2938:	f9 1e       	adc	r15, r25
    293a:	f7 01       	movw	r30, r14
    293c:	ee 0f       	add	r30, r30
    293e:	ff 1f       	adc	r31, r31
    2940:	ee 0f       	add	r30, r30
    2942:	ff 1f       	adc	r31, r31
    2944:	ee 0f       	add	r30, r30
    2946:	ff 1f       	adc	r31, r31
    2948:	e0 59       	subi	r30, 0x90	; 144
    294a:	fc 4d       	sbci	r31, 0xDC	; 220
    294c:	85 89       	ldd	r24, Z+21	; 0x15
    294e:	80 7c       	andi	r24, 0xC0	; 192
    2950:	09 f4       	brne	.+2      	; 0x2954 <udd_ep_run+0x6c>
    2952:	81 c0       	rjmp	.+258    	; 0x2a56 <udd_ep_run+0x16e>
    2954:	f7 01       	movw	r30, r14
    2956:	ee 0f       	add	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	e0 59       	subi	r30, 0x90	; 144
    2964:	fc 4d       	sbci	r31, 0xDC	; 220
    2966:	85 89       	ldd	r24, Z+21	; 0x15
    2968:	80 7c       	andi	r24, 0xC0	; 192
    296a:	80 3c       	cpi	r24, 0xC0	; 192
    296c:	61 f0       	breq	.+24     	; 0x2986 <udd_ep_run+0x9e>
    296e:	f7 01       	movw	r30, r14
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	ee 0f       	add	r30, r30
    297a:	ff 1f       	adc	r31, r31
    297c:	e0 59       	subi	r30, 0x90	; 144
    297e:	fc 4d       	sbci	r31, 0xDC	; 220
    2980:	85 89       	ldd	r24, Z+21	; 0x15
    2982:	82 fd       	sbrc	r24, 2
    2984:	6a c0       	rjmp	.+212    	; 0x2a5a <udd_ep_run+0x172>
    2986:	8f b7       	in	r24, 0x3f	; 63
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	f8 94       	cli
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	f6 01       	movw	r30, r12
    2990:	90 81       	ld	r25, Z
    2992:	90 ff       	sbrs	r25, 0
    2994:	03 c0       	rjmp	.+6      	; 0x299c <udd_ep_run+0xb4>
    2996:	8f bf       	out	0x3f, r24	; 63
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	60 c0       	rjmp	.+192    	; 0x2a5c <udd_ep_run+0x174>
    299c:	f6 01       	movw	r30, r12
    299e:	90 81       	ld	r25, Z
    29a0:	91 60       	ori	r25, 0x01	; 1
    29a2:	90 83       	st	Z, r25
    29a4:	8f bf       	out	0x3f, r24	; 63
    29a6:	81 82       	std	Z+1, r8	; 0x01
    29a8:	92 82       	std	Z+2, r9	; 0x02
    29aa:	a3 82       	std	Z+3, r10	; 0x03
    29ac:	b4 82       	std	Z+4, r11	; 0x04
    29ae:	15 82       	std	Z+5, r1	; 0x05
    29b0:	16 82       	std	Z+6, r1	; 0x06
    29b2:	07 83       	std	Z+7, r16	; 0x07
    29b4:	10 87       	std	Z+8, r17	; 0x08
    29b6:	61 10       	cpse	r6, r1
    29b8:	06 c0       	rjmp	.+12     	; 0x29c6 <udd_ep_run+0xde>
    29ba:	91 e0       	ldi	r25, 0x01	; 1
    29bc:	a1 14       	cp	r10, r1
    29be:	b1 04       	cpc	r11, r1
    29c0:	19 f0       	breq	.+6      	; 0x29c8 <udd_ep_run+0xe0>
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	01 c0       	rjmp	.+2      	; 0x29c8 <udd_ep_run+0xe0>
    29c6:	91 e0       	ldi	r25, 0x01	; 1
    29c8:	f6 01       	movw	r30, r12
    29ca:	80 81       	ld	r24, Z
    29cc:	90 fb       	bst	r25, 0
    29ce:	81 f9       	bld	r24, 1
    29d0:	8b 7f       	andi	r24, 0xFB	; 251
    29d2:	80 83       	st	Z, r24
    29d4:	22 23       	and	r18, r18
    29d6:	64 f4       	brge	.+24     	; 0x29f0 <udd_ep_run+0x108>
    29d8:	f7 01       	movw	r30, r14
    29da:	ee 0f       	add	r30, r30
    29dc:	ff 1f       	adc	r31, r31
    29de:	ee 0f       	add	r30, r30
    29e0:	ff 1f       	adc	r31, r31
    29e2:	ee 0f       	add	r30, r30
    29e4:	ff 1f       	adc	r31, r31
    29e6:	e0 59       	subi	r30, 0x90	; 144
    29e8:	fc 4d       	sbci	r31, 0xDC	; 220
    29ea:	12 8e       	std	Z+26, r1	; 0x1a
    29ec:	13 8e       	std	Z+27, r1	; 0x1b
    29ee:	2f c0       	rjmp	.+94     	; 0x2a4e <udd_ep_run+0x166>
    29f0:	f7 01       	movw	r30, r14
    29f2:	ee 0f       	add	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	ee 0f       	add	r30, r30
    29f8:	ff 1f       	adc	r31, r31
    29fa:	ee 0f       	add	r30, r30
    29fc:	ff 1f       	adc	r31, r31
    29fe:	e0 59       	subi	r30, 0x90	; 144
    2a00:	fc 4d       	sbci	r31, 0xDC	; 220
    2a02:	85 89       	ldd	r24, Z+21	; 0x15
    2a04:	80 7c       	andi	r24, 0xC0	; 192
    2a06:	80 3c       	cpi	r24, 0xC0	; 192
    2a08:	a9 f4       	brne	.+42     	; 0x2a34 <udd_ep_run+0x14c>
    2a0a:	c7 01       	movw	r24, r14
    2a0c:	88 0f       	add	r24, r24
    2a0e:	99 1f       	adc	r25, r25
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	88 0f       	add	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	8c 57       	subi	r24, 0x7C	; 124
    2a1a:	9c 4d       	sbci	r25, 0xDC	; 220
    2a1c:	94 db       	rcall	.-2264   	; 0x2146 <udd_ep_get_size>
    2a1e:	bc 01       	movw	r22, r24
    2a20:	c5 01       	movw	r24, r10
    2a22:	af d2       	rcall	.+1374   	; 0x2f82 <__udivmodhi4>
    2a24:	89 2b       	or	r24, r25
    2a26:	31 f0       	breq	.+12     	; 0x2a34 <udd_ep_run+0x14c>
    2a28:	f6 01       	movw	r30, r12
    2a2a:	80 81       	ld	r24, Z
    2a2c:	8e 7f       	andi	r24, 0xFE	; 254
    2a2e:	80 83       	st	Z, r24
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	14 c0       	rjmp	.+40     	; 0x2a5c <udd_ep_run+0x174>
    2a34:	f7 01       	movw	r30, r14
    2a36:	ee 0f       	add	r30, r30
    2a38:	ff 1f       	adc	r31, r31
    2a3a:	ee 0f       	add	r30, r30
    2a3c:	ff 1f       	adc	r31, r31
    2a3e:	ee 0f       	add	r30, r30
    2a40:	ff 1f       	adc	r31, r31
    2a42:	e0 59       	subi	r30, 0x90	; 144
    2a44:	fc 4d       	sbci	r31, 0xDC	; 220
    2a46:	16 8a       	std	Z+22, r1	; 0x16
    2a48:	17 8a       	std	Z+23, r1	; 0x17
    2a4a:	12 8e       	std	Z+26, r1	; 0x1a
    2a4c:	13 8e       	std	Z+27, r1	; 0x1b
    2a4e:	87 2d       	mov	r24, r7
    2a50:	2e dc       	rcall	.-1956   	; 0x22ae <udd_ep_trans_complet>
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	03 c0       	rjmp	.+6      	; 0x2a5c <udd_ep_run+0x174>
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	01 c0       	rjmp	.+2      	; 0x2a5c <udd_ep_run+0x174>
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	0f 90       	pop	r0
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	df 90       	pop	r13
    2a6c:	cf 90       	pop	r12
    2a6e:	bf 90       	pop	r11
    2a70:	af 90       	pop	r10
    2a72:	9f 90       	pop	r9
    2a74:	8f 90       	pop	r8
    2a76:	7f 90       	pop	r7
    2a78:	6f 90       	pop	r6
    2a7a:	08 95       	ret

00002a7c <udd_ep_abort>:
    2a7c:	ff 92       	push	r15
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	18 2f       	mov	r17, r24
    2a88:	c8 2f       	mov	r28, r24
    2a8a:	cf 70       	andi	r28, 0x0F	; 15
    2a8c:	d0 e0       	ldi	r29, 0x00	; 0
    2a8e:	ce 01       	movw	r24, r28
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	c1 2f       	mov	r28, r17
    2a96:	01 2e       	mov	r0, r17
    2a98:	00 0c       	add	r0, r0
    2a9a:	dd 0b       	sbc	r29, r29
    2a9c:	cc 27       	eor	r28, r28
    2a9e:	dd 0f       	add	r29, r29
    2aa0:	cc 1f       	adc	r28, r28
    2aa2:	dd 27       	eor	r29, r29
    2aa4:	c8 0f       	add	r28, r24
    2aa6:	d9 1f       	adc	r29, r25
    2aa8:	81 2f       	mov	r24, r17
    2aaa:	75 db       	rcall	.-2326   	; 0x2196 <udd_ep_get_job>
    2aac:	dc 01       	movw	r26, r24
    2aae:	fe 01       	movw	r30, r28
    2ab0:	ee 0f       	add	r30, r30
    2ab2:	ff 1f       	adc	r31, r31
    2ab4:	ee 0f       	add	r30, r30
    2ab6:	ff 1f       	adc	r31, r31
    2ab8:	ee 0f       	add	r30, r30
    2aba:	ff 1f       	adc	r31, r31
    2abc:	ec 57       	subi	r30, 0x7C	; 124
    2abe:	fc 4d       	sbci	r31, 0xDC	; 220
    2ac0:	02 e0       	ldi	r16, 0x02	; 2
    2ac2:	05 93       	las	Z, r16
    2ac4:	8c 91       	ld	r24, X
    2ac6:	80 ff       	sbrs	r24, 0
    2ac8:	22 c0       	rjmp	.+68     	; 0x2b0e <udd_ep_abort+0x92>
    2aca:	8e 7f       	andi	r24, 0xFE	; 254
    2acc:	8c 93       	st	X, r24
    2ace:	17 96       	adiw	r26, 0x07	; 7
    2ad0:	ed 91       	ld	r30, X+
    2ad2:	fc 91       	ld	r31, X
    2ad4:	18 97       	sbiw	r26, 0x08	; 8
    2ad6:	30 97       	sbiw	r30, 0x00	; 0
    2ad8:	d1 f0       	breq	.+52     	; 0x2b0e <udd_ep_abort+0x92>
    2ada:	11 23       	and	r17, r17
    2adc:	5c f4       	brge	.+22     	; 0x2af4 <udd_ep_abort+0x78>
    2ade:	cc 0f       	add	r28, r28
    2ae0:	dd 1f       	adc	r29, r29
    2ae2:	cc 0f       	add	r28, r28
    2ae4:	dd 1f       	adc	r29, r29
    2ae6:	cc 0f       	add	r28, r28
    2ae8:	dd 1f       	adc	r29, r29
    2aea:	c0 59       	subi	r28, 0x90	; 144
    2aec:	dc 4d       	sbci	r29, 0xDC	; 220
    2aee:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2af0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2af2:	0a c0       	rjmp	.+20     	; 0x2b08 <udd_ep_abort+0x8c>
    2af4:	cc 0f       	add	r28, r28
    2af6:	dd 1f       	adc	r29, r29
    2af8:	cc 0f       	add	r28, r28
    2afa:	dd 1f       	adc	r29, r29
    2afc:	cc 0f       	add	r28, r28
    2afe:	dd 1f       	adc	r29, r29
    2b00:	c0 59       	subi	r28, 0x90	; 144
    2b02:	dc 4d       	sbci	r29, 0xDC	; 220
    2b04:	6e 89       	ldd	r22, Y+22	; 0x16
    2b06:	7f 89       	ldd	r23, Y+23	; 0x17
    2b08:	41 2f       	mov	r20, r17
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	19 95       	eicall
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	1f 91       	pop	r17
    2b14:	0f 91       	pop	r16
    2b16:	ff 90       	pop	r15
    2b18:	08 95       	ret

00002b1a <udd_ep_free>:
    2b1a:	cf 93       	push	r28
    2b1c:	c8 2f       	mov	r28, r24
    2b1e:	ae df       	rcall	.-164    	; 0x2a7c <udd_ep_abort>
    2b20:	ec 2f       	mov	r30, r28
    2b22:	ef 70       	andi	r30, 0x0F	; 15
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	ee 0f       	add	r30, r30
    2b28:	ff 1f       	adc	r31, r31
    2b2a:	8c 2f       	mov	r24, r28
    2b2c:	cc 0f       	add	r28, r28
    2b2e:	99 0b       	sbc	r25, r25
    2b30:	88 27       	eor	r24, r24
    2b32:	99 0f       	add	r25, r25
    2b34:	88 1f       	adc	r24, r24
    2b36:	99 27       	eor	r25, r25
    2b38:	e8 0f       	add	r30, r24
    2b3a:	f9 1f       	adc	r31, r25
    2b3c:	ee 0f       	add	r30, r30
    2b3e:	ff 1f       	adc	r31, r31
    2b40:	ee 0f       	add	r30, r30
    2b42:	ff 1f       	adc	r31, r31
    2b44:	ee 0f       	add	r30, r30
    2b46:	ff 1f       	adc	r31, r31
    2b48:	e0 59       	subi	r30, 0x90	; 144
    2b4a:	fc 4d       	sbci	r31, 0xDC	; 220
    2b4c:	15 8a       	std	Z+21, r1	; 0x15
    2b4e:	cf 91       	pop	r28
    2b50:	08 95       	ret

00002b52 <udd_ep_set_halt>:
    2b52:	e8 2f       	mov	r30, r24
    2b54:	ef 70       	andi	r30, 0x0F	; 15
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	ee 0f       	add	r30, r30
    2b5a:	ff 1f       	adc	r31, r31
    2b5c:	28 2f       	mov	r18, r24
    2b5e:	08 2e       	mov	r0, r24
    2b60:	00 0c       	add	r0, r0
    2b62:	33 0b       	sbc	r19, r19
    2b64:	22 27       	eor	r18, r18
    2b66:	33 0f       	add	r19, r19
    2b68:	22 1f       	adc	r18, r18
    2b6a:	33 27       	eor	r19, r19
    2b6c:	e2 0f       	add	r30, r18
    2b6e:	f3 1f       	adc	r31, r19
    2b70:	ee 0f       	add	r30, r30
    2b72:	ff 1f       	adc	r31, r31
    2b74:	ee 0f       	add	r30, r30
    2b76:	ff 1f       	adc	r31, r31
    2b78:	ee 0f       	add	r30, r30
    2b7a:	ff 1f       	adc	r31, r31
    2b7c:	e0 59       	subi	r30, 0x90	; 144
    2b7e:	fc 4d       	sbci	r31, 0xDC	; 220
    2b80:	95 89       	ldd	r25, Z+21	; 0x15
    2b82:	94 60       	ori	r25, 0x04	; 4
    2b84:	95 8b       	std	Z+21, r25	; 0x15
    2b86:	7a df       	rcall	.-268    	; 0x2a7c <udd_ep_abort>
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	08 95       	ret

00002b8c <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2b8c:	1f 92       	push	r1
    2b8e:	0f 92       	push	r0
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	0f 92       	push	r0
    2b94:	11 24       	eor	r1, r1
    2b96:	0b b6       	in	r0, 0x3b	; 59
    2b98:	0f 92       	push	r0
    2b9a:	0f 93       	push	r16
    2b9c:	2f 93       	push	r18
    2b9e:	3f 93       	push	r19
    2ba0:	4f 93       	push	r20
    2ba2:	5f 93       	push	r21
    2ba4:	6f 93       	push	r22
    2ba6:	7f 93       	push	r23
    2ba8:	8f 93       	push	r24
    2baa:	9f 93       	push	r25
    2bac:	af 93       	push	r26
    2bae:	bf 93       	push	r27
    2bb0:	cf 93       	push	r28
    2bb2:	ef 93       	push	r30
    2bb4:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2bb6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2bba:	88 23       	and	r24, r24
    2bbc:	3c f4       	brge	.+14     	; 0x2bcc <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    2bbe:	80 e8       	ldi	r24, 0x80	; 128
    2bc0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    2bc4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2bc8:	b0 d1       	rcall	.+864    	; 0x2f2a <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2bca:	89 c0       	rjmp	.+274    	; 0x2cde <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2bcc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2bd0:	82 ff       	sbrs	r24, 2
    2bd2:	20 c0       	rjmp	.+64     	; 0x2c14 <__vector_125+0x88>
		udd_ack_underflow_event();
    2bd4:	84 e0       	ldi	r24, 0x04	; 4
    2bd6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    2bda:	80 91 8c 23 	lds	r24, 0x238C	; 0x80238c <udd_sram+0x1c>
    2bde:	86 ff       	sbrs	r24, 6
    2be0:	7e c0       	rjmp	.+252    	; 0x2cde <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2be2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2be6:	81 fd       	sbrc	r24, 1
    2be8:	7a c0       	rjmp	.+244    	; 0x2cde <__vector_125+0x152>
    2bea:	f0 da       	rcall	.-2592   	; 0x21cc <udd_ctrl_interrupt_tc_setup>
    2bec:	81 11       	cpse	r24, r1
    2bee:	77 c0       	rjmp	.+238    	; 0x2cde <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2bf0:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <udd_ep_control_state>
    2bf4:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2bf6:	11 f4       	brne	.+4      	; 0x2bfc <__vector_125+0x70>
    2bf8:	24 da       	rcall	.-3000   	; 0x2042 <udd_ctrl_send_zlp_in>
    2bfa:	71 c0       	rjmp	.+226    	; 0x2cde <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2bfc:	84 30       	cpi	r24, 0x04	; 4
    2bfe:	09 f0       	breq	.+2      	; 0x2c02 <__vector_125+0x76>
    2c00:	6e c0       	rjmp	.+220    	; 0x2cde <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2c02:	ed e8       	ldi	r30, 0x8D	; 141
    2c04:	f3 e2       	ldi	r31, 0x23	; 35
    2c06:	04 e0       	ldi	r16, 0x04	; 4
    2c08:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c0a:	e5 e8       	ldi	r30, 0x85	; 133
    2c0c:	f3 e2       	ldi	r31, 0x23	; 35
    2c0e:	04 e0       	ldi	r16, 0x04	; 4
    2c10:	05 93       	las	Z, r16
    2c12:	65 c0       	rjmp	.+202    	; 0x2cde <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2c14:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2c18:	81 ff       	sbrs	r24, 1
    2c1a:	5c c0       	rjmp	.+184    	; 0x2cd4 <__vector_125+0x148>
		udd_ack_overflow_event();
    2c1c:	82 e0       	ldi	r24, 0x02	; 2
    2c1e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    2c22:	80 91 84 23 	lds	r24, 0x2384	; 0x802384 <udd_sram+0x14>
    2c26:	86 ff       	sbrs	r24, 6
    2c28:	5a c0       	rjmp	.+180    	; 0x2cde <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2c2a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2c2e:	81 fd       	sbrc	r24, 1
    2c30:	56 c0       	rjmp	.+172    	; 0x2cde <__vector_125+0x152>
    2c32:	cc da       	rcall	.-2664   	; 0x21cc <udd_ctrl_interrupt_tc_setup>
    2c34:	81 11       	cpse	r24, r1
    2c36:	53 c0       	rjmp	.+166    	; 0x2cde <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2c38:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <udd_ep_control_state>
    2c3c:	82 30       	cpi	r24, 0x02	; 2
    2c3e:	41 f4       	brne	.+16     	; 0x2c50 <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2c40:	84 e0       	ldi	r24, 0x04	; 4
    2c42:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2c46:	e4 e8       	ldi	r30, 0x84	; 132
    2c48:	f3 e2       	ldi	r31, 0x23	; 35
    2c4a:	02 e0       	ldi	r16, 0x02	; 2
    2c4c:	06 93       	lac	Z, r16
    2c4e:	47 c0       	rjmp	.+142    	; 0x2cde <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2c50:	83 30       	cpi	r24, 0x03	; 3
    2c52:	09 f0       	breq	.+2      	; 0x2c56 <__vector_125+0xca>
    2c54:	44 c0       	rjmp	.+136    	; 0x2cde <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2c56:	ed e8       	ldi	r30, 0x8D	; 141
    2c58:	f3 e2       	ldi	r31, 0x23	; 35
    2c5a:	04 e0       	ldi	r16, 0x04	; 4
    2c5c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c5e:	e5 e8       	ldi	r30, 0x85	; 133
    2c60:	f3 e2       	ldi	r31, 0x23	; 35
    2c62:	04 e0       	ldi	r16, 0x04	; 4
    2c64:	05 93       	las	Z, r16
    2c66:	3b c0       	rjmp	.+118    	; 0x2cde <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2c68:	80 e1       	ldi	r24, 0x10	; 16
    2c6a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2c6e:	c1 e0       	ldi	r28, 0x01	; 1
    2c70:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    2c72:	04 df       	rcall	.-504    	; 0x2a7c <udd_ep_abort>
    2c74:	8c 2f       	mov	r24, r28
    2c76:	80 68       	ori	r24, 0x80	; 128
    2c78:	01 df       	rcall	.-510    	; 0x2a7c <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    2c7a:	cf 5f       	subi	r28, 0xFF	; 255
    2c7c:	c5 30       	cpi	r28, 0x05	; 5
    2c7e:	c1 f7       	brne	.-16     	; 0x2c70 <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2c80:	0e 94 ae 0c 	call	0x195c	; 0x195c <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2c84:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2c88:	e0 e7       	ldi	r30, 0x70	; 112
    2c8a:	f3 e2       	ldi	r31, 0x23	; 35
    2c8c:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2c8e:	96 e0       	ldi	r25, 0x06	; 6
    2c90:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2c92:	80 e4       	ldi	r24, 0x40	; 64
    2c94:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2c96:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2c98:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2c9a:	85 8f       	std	Z+29, r24	; 0x1d
    2c9c:	83 e6       	ldi	r24, 0x63	; 99
    2c9e:	93 e2       	ldi	r25, 0x23	; 35
    2ca0:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    2ca2:	91 8f       	std	Z+25, r25	; 0x19
    2ca4:	9b d9       	rcall	.-3274   	; 0x1fdc <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2ca6:	1b c0       	rjmp	.+54     	; 0x2cde <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    2ca8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    2cac:	86 ff       	sbrs	r24, 6
    2cae:	07 c0       	rjmp	.+14     	; 0x2cbe <__vector_125+0x132>
    2cb0:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2cb2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2cb8:	59 d9       	rcall	.-3406   	; 0x1f6c <udd_sleep_mode>
    2cba:	35 d1       	rcall	.+618    	; 0x2f26 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2cbc:	10 c0       	rjmp	.+32     	; 0x2cde <__vector_125+0x152>
    2cbe:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    2cc2:	85 ff       	sbrs	r24, 5
    2cc4:	0c c0       	rjmp	.+24     	; 0x2cde <__vector_125+0x152>
    2cc6:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    2cc8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2cce:	4e d9       	rcall	.-3428   	; 0x1f6c <udd_sleep_mode>
    2cd0:	2b d1       	rcall	.+598    	; 0x2f28 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2cd2:	05 c0       	rjmp	.+10     	; 0x2cde <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2cd4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2cd8:	84 fd       	sbrc	r24, 4
    2cda:	c6 cf       	rjmp	.-116    	; 0x2c68 <__vector_125+0xdc>
    2cdc:	e5 cf       	rjmp	.-54     	; 0x2ca8 <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2cde:	ff 91       	pop	r31
    2ce0:	ef 91       	pop	r30
    2ce2:	cf 91       	pop	r28
    2ce4:	bf 91       	pop	r27
    2ce6:	af 91       	pop	r26
    2ce8:	9f 91       	pop	r25
    2cea:	8f 91       	pop	r24
    2cec:	7f 91       	pop	r23
    2cee:	6f 91       	pop	r22
    2cf0:	5f 91       	pop	r21
    2cf2:	4f 91       	pop	r20
    2cf4:	3f 91       	pop	r19
    2cf6:	2f 91       	pop	r18
    2cf8:	0f 91       	pop	r16
    2cfa:	0f 90       	pop	r0
    2cfc:	0b be       	out	0x3b, r0	; 59
    2cfe:	0f 90       	pop	r0
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	0f 90       	pop	r0
    2d04:	1f 90       	pop	r1
    2d06:	18 95       	reti

00002d08 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2d08:	1f 92       	push	r1
    2d0a:	0f 92       	push	r0
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	0f 92       	push	r0
    2d10:	11 24       	eor	r1, r1
    2d12:	0b b6       	in	r0, 0x3b	; 59
    2d14:	0f 92       	push	r0
    2d16:	0f 93       	push	r16
    2d18:	1f 93       	push	r17
    2d1a:	2f 93       	push	r18
    2d1c:	3f 93       	push	r19
    2d1e:	4f 93       	push	r20
    2d20:	5f 93       	push	r21
    2d22:	6f 93       	push	r22
    2d24:	7f 93       	push	r23
    2d26:	8f 93       	push	r24
    2d28:	9f 93       	push	r25
    2d2a:	af 93       	push	r26
    2d2c:	bf 93       	push	r27
    2d2e:	cf 93       	push	r28
    2d30:	df 93       	push	r29
    2d32:	ef 93       	push	r30
    2d34:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2d36:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2d3a:	81 fd       	sbrc	r24, 1
    2d3c:	03 c0       	rjmp	.+6      	; 0x2d44 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2d3e:	46 da       	rcall	.-2932   	; 0x21cc <udd_ctrl_interrupt_tc_setup>
    2d40:	81 11       	cpse	r24, r1
    2d42:	c3 c0       	rjmp	.+390    	; 0x2eca <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2d44:	82 e0       	ldi	r24, 0x02	; 2
    2d46:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2d4a:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2d4e:	81 95       	neg	r24
    2d50:	88 0f       	add	r24, r24
    2d52:	e4 e8       	ldi	r30, 0x84	; 132
    2d54:	f3 e2       	ldi	r31, 0x23	; 35
    2d56:	e8 1b       	sub	r30, r24
    2d58:	f1 09       	sbc	r31, r1
    2d5a:	20 81       	ld	r18, Z
    2d5c:	31 81       	ldd	r19, Z+1	; 0x01
    2d5e:	24 58       	subi	r18, 0x84	; 132
    2d60:	33 42       	sbci	r19, 0x23	; 35
    2d62:	36 95       	lsr	r19
    2d64:	27 95       	ror	r18
    2d66:	36 95       	lsr	r19
    2d68:	27 95       	ror	r18
    2d6a:	36 95       	lsr	r19
    2d6c:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2d6e:	82 2f       	mov	r24, r18
    2d70:	86 95       	lsr	r24
    2d72:	20 fd       	sbrc	r18, 0
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <__vector_126+0x72>
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	01 c0       	rjmp	.+2      	; 0x2d7c <__vector_126+0x74>
    2d7a:	90 e8       	ldi	r25, 0x80	; 128
    2d7c:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2d7e:	e8 2f       	mov	r30, r24
    2d80:	ef 70       	andi	r30, 0x0F	; 15
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	ee 0f       	add	r30, r30
    2d86:	ff 1f       	adc	r31, r31
    2d88:	28 2f       	mov	r18, r24
    2d8a:	08 2e       	mov	r0, r24
    2d8c:	00 0c       	add	r0, r0
    2d8e:	33 0b       	sbc	r19, r19
    2d90:	22 27       	eor	r18, r18
    2d92:	33 0f       	add	r19, r19
    2d94:	22 1f       	adc	r18, r18
    2d96:	33 27       	eor	r19, r19
    2d98:	e2 0f       	add	r30, r18
    2d9a:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2d9c:	df 01       	movw	r26, r30
    2d9e:	aa 0f       	add	r26, r26
    2da0:	bb 1f       	adc	r27, r27
    2da2:	aa 0f       	add	r26, r26
    2da4:	bb 1f       	adc	r27, r27
    2da6:	aa 0f       	add	r26, r26
    2da8:	bb 1f       	adc	r27, r27
    2daa:	a0 59       	subi	r26, 0x90	; 144
    2dac:	bc 4d       	sbci	r27, 0xDC	; 220
    2dae:	54 96       	adiw	r26, 0x14	; 20
    2db0:	9c 91       	ld	r25, X
    2db2:	95 ff       	sbrs	r25, 5
    2db4:	8a c0       	rjmp	.+276    	; 0x2eca <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2db6:	ee 0f       	add	r30, r30
    2db8:	ff 1f       	adc	r31, r31
    2dba:	ee 0f       	add	r30, r30
    2dbc:	ff 1f       	adc	r31, r31
    2dbe:	ee 0f       	add	r30, r30
    2dc0:	ff 1f       	adc	r31, r31
    2dc2:	ec 57       	subi	r30, 0x7C	; 124
    2dc4:	fc 4d       	sbci	r31, 0xDC	; 220
    2dc6:	00 e2       	ldi	r16, 0x20	; 32
    2dc8:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2dca:	81 11       	cpse	r24, r1
    2dcc:	79 c0       	rjmp	.+242    	; 0x2ec0 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2dce:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <udd_ep_control_state>
    2dd2:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2dd4:	19 f4       	brne	.+6      	; 0x2ddc <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2dd6:	43 d9       	rcall	.-3450   	; 0x205e <udd_ctrl_endofrequest>
    2dd8:	01 d9       	rcall	.-3582   	; 0x1fdc <udd_ctrl_init>
    2dda:	77 c0       	rjmp	.+238    	; 0x2eca <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2ddc:	00 91 86 23 	lds	r16, 0x2386	; 0x802386 <udd_sram+0x16>
    2de0:	10 91 87 23 	lds	r17, 0x2387	; 0x802387 <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2de4:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0xa>
    2de8:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0xb>
    2dec:	c0 91 6b 23 	lds	r28, 0x236B	; 0x80236b <udd_ctrl_payload_nb_trans>
    2df0:	d0 91 6c 23 	lds	r29, 0x236C	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    2df4:	98 01       	movw	r18, r16
    2df6:	2c 0f       	add	r18, r28
    2df8:	3d 1f       	adc	r19, r29
    2dfa:	82 17       	cp	r24, r18
    2dfc:	93 07       	cpc	r25, r19
    2dfe:	18 f4       	brcc	.+6      	; 0x2e06 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2e00:	8c 01       	movw	r16, r24
    2e02:	0c 1b       	sub	r16, r28
    2e04:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2e06:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x8>
    2e0a:	90 91 eb 23 	lds	r25, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x9>
    2e0e:	a8 01       	movw	r20, r16
    2e10:	63 e6       	ldi	r22, 0x63	; 99
    2e12:	73 e2       	ldi	r23, 0x23	; 35
    2e14:	8c 0f       	add	r24, r28
    2e16:	9d 1f       	adc	r25, r29
    2e18:	d0 d0       	rcall	.+416    	; 0x2fba <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2e1a:	c0 0f       	add	r28, r16
    2e1c:	d1 1f       	adc	r29, r17
    2e1e:	c0 93 6b 23 	sts	0x236B, r28	; 0x80236b <udd_ctrl_payload_nb_trans>
    2e22:	d0 93 6c 23 	sts	0x236C, r29	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2e26:	08 30       	cpi	r16, 0x08	; 8
    2e28:	11 05       	cpc	r17, r1
    2e2a:	69 f4       	brne	.+26     	; 0x2e46 <__vector_126+0x13e>
    2e2c:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
    2e30:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    2e34:	8c 0f       	add	r24, r28
    2e36:	9d 1f       	adc	r25, r29
    2e38:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x6>
    2e3c:	30 91 e9 23 	lds	r19, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x7>
    2e40:	82 17       	cp	r24, r18
    2e42:	93 07       	cpc	r25, r19
    2e44:	80 f0       	brcs	.+32     	; 0x2e66 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2e46:	e2 ee       	ldi	r30, 0xE2	; 226
    2e48:	f3 e2       	ldi	r31, 0x23	; 35
    2e4a:	c2 87       	std	Z+10, r28	; 0x0a
    2e4c:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2e4e:	06 84       	ldd	r0, Z+14	; 0x0e
    2e50:	f7 85       	ldd	r31, Z+15	; 0x0f
    2e52:	e0 2d       	mov	r30, r0
    2e54:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2e56:	29 f0       	breq	.+10     	; 0x2e62 <__vector_126+0x15a>
    2e58:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2e5a:	81 11       	cpse	r24, r1
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <__vector_126+0x15a>
    2e5e:	e3 d8       	rcall	.-3642   	; 0x2026 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2e60:	34 c0       	rjmp	.+104    	; 0x2eca <__vector_126+0x1c2>
    2e62:	ef d8       	rcall	.-3618   	; 0x2042 <udd_ctrl_send_zlp_in>
    2e64:	32 c0       	rjmp	.+100    	; 0x2eca <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2e66:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0xa>
    2e6a:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0xb>
    2e6e:	c8 17       	cp	r28, r24
    2e70:	d9 07       	cpc	r29, r25
    2e72:	f9 f4       	brne	.+62     	; 0x2eb2 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2e74:	e0 91 f0 23 	lds	r30, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xe>
    2e78:	f0 91 f1 23 	lds	r31, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xf>
    2e7c:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2e7e:	11 f4       	brne	.+4      	; 0x2e84 <__vector_126+0x17c>
    2e80:	d2 d8       	rcall	.-3676   	; 0x2026 <udd_ctrl_stall_data>
    2e82:	23 c0       	rjmp	.+70     	; 0x2eca <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2e84:	19 95       	eicall
    2e86:	81 11       	cpse	r24, r1
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2e8a:	cd d8       	rcall	.-3686   	; 0x2026 <udd_ctrl_stall_data>
    2e8c:	1e c0       	rjmp	.+60     	; 0x2eca <__vector_126+0x1c2>
    2e8e:	20 91 6d 23 	lds	r18, 0x236D	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2e92:	30 91 6e 23 	lds	r19, 0x236E	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    2e96:	80 91 6b 23 	lds	r24, 0x236B	; 0x80236b <udd_ctrl_payload_nb_trans>
    2e9a:	90 91 6c 23 	lds	r25, 0x236C	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    2e9e:	82 0f       	add	r24, r18
    2ea0:	93 1f       	adc	r25, r19
    2ea2:	80 93 6d 23 	sts	0x236D, r24	; 0x80236d <udd_ctrl_prev_payload_nb_trans>
    2ea6:	90 93 6e 23 	sts	0x236E, r25	; 0x80236e <udd_ctrl_prev_payload_nb_trans+0x1>
    2eaa:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2eae:	10 92 6c 23 	sts	0x236C, r1	; 0x80236c <udd_ctrl_payload_nb_trans+0x1>
    2eb2:	e4 e8       	ldi	r30, 0x84	; 132
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2eb4:	f3 e2       	ldi	r31, 0x23	; 35
    2eb6:	02 e0       	ldi	r16, 0x02	; 2
    2eb8:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2eba:	00 e2       	ldi	r16, 0x20	; 32
    2ebc:	06 93       	lac	Z, r16
    2ebe:	05 c0       	rjmp	.+10     	; 0x2eca <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2ec0:	80 38       	cpi	r24, 0x80	; 128
    2ec2:	11 f4       	brne	.+4      	; 0x2ec8 <__vector_126+0x1c0>
		udd_ctrl_in_sent();
    2ec4:	d4 d8       	rcall	.-3672   	; 0x206e <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2ec6:	01 c0       	rjmp	.+2      	; 0x2eca <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2ec8:	f2 d9       	rcall	.-3100   	; 0x22ae <udd_ep_trans_complet>
    2eca:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2ecc:	ef 91       	pop	r30
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	bf 91       	pop	r27
    2ed4:	af 91       	pop	r26
    2ed6:	9f 91       	pop	r25
    2ed8:	8f 91       	pop	r24
    2eda:	7f 91       	pop	r23
    2edc:	6f 91       	pop	r22
    2ede:	5f 91       	pop	r21
    2ee0:	4f 91       	pop	r20
    2ee2:	3f 91       	pop	r19
    2ee4:	2f 91       	pop	r18
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	0f 90       	pop	r0
    2eec:	0b be       	out	0x3b, r0	; 59
    2eee:	0f 90       	pop	r0
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	0f 90       	pop	r0
    2ef4:	1f 90       	pop	r1
    2ef6:	18 95       	reti

00002ef8 <main>:

static const uint8_t sequence = 8;

int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    2ef8:	87 e0       	ldi	r24, 0x07	; 7
    2efa:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    2efe:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2f00:	ec ed       	ldi	r30, 0xDC	; 220
    2f02:	f3 e2       	ldi	r31, 0x23	; 35
    2f04:	10 82       	st	Z, r1
    2f06:	11 82       	std	Z+1, r1	; 0x01
    2f08:	12 82       	std	Z+2, r1	; 0x02
    2f0a:	13 82       	std	Z+3, r1	; 0x03
    2f0c:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    2f12:	0e 94 1a 09 	call	0x1234	; 0x1234 <sysclk_init>

	io_ui_process(); // initializes board i/o pins
    2f16:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <io_ui_process>

	udc_start();               // starts USB device controller
    2f1a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <udc_start>

	startup_ui_process(sequence); // pick preferred sequence (1-5)
    2f1e:	88 e0       	ldi	r24, 0x08	; 8
    2f20:	0e 94 e5 08 	call	0x11ca	; 0x11ca <startup_ui_process>
    2f24:	ff cf       	rjmp	.-2      	; 0x2f24 <main+0x2c>

00002f26 <main_suspend_action>:
}

/* --------------------------------------------------------------------- */
/* -------------------------------- USB -------------------------------- */
/* --------------------------------------------------------------------- */
void main_suspend_action(void) { }
    2f26:	08 95       	ret

00002f28 <main_resume_action>:
void main_resume_action(void) { }
    2f28:	08 95       	ret

00002f2a <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    2f2a:	80 91 db 23 	lds	r24, 0x23DB	; 0x8023db <main_b_kbd_enable>
    2f2e:	88 23       	and	r24, r24
    2f30:	81 f0       	breq	.+32     	; 0x2f52 <main_sof_action+0x28>
	return;
	kbd_ui_process();
    2f32:	0e 94 f7 08 	call	0x11ee	; 0x11ee <kbd_ui_process>

	if (!main_b_generic_enable)
    2f36:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <main_b_generic_enable>
    2f3a:	88 23       	and	r24, r24
    2f3c:	51 f0       	breq	.+20     	; 0x2f52 <main_sof_action+0x28>
		return;
	jstk_ui_process();
    2f3e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <jstk_ui_process>

	if (!main_b_led_enable)
    2f42:	80 91 d9 23 	lds	r24, 0x23D9	; 0x8023d9 <main_b_led_enable>
    2f46:	88 23       	and	r24, r24
    2f48:	21 f0       	breq	.+8      	; 0x2f52 <main_sof_action+0x28>
		return;
	led_ui_process();
    2f4a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <led_ui_process>

	status_ui_process();
    2f4e:	0c 94 18 09 	jmp	0x1230	; 0x1230 <status_ui_process>
    2f52:	08 95       	ret

00002f54 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2f54:	08 95       	ret

00002f56 <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2f56:	08 95       	ret

00002f58 <main_kbd_enable>:

/* --------------------------------------------------------------------- */
/* ----------------------------- keyboard ------------------------------ */
/* --------------------------------------------------------------------- */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	80 93 db 23 	sts	0x23DB, r24	; 0x8023db <main_b_kbd_enable>
	return true;
}
    2f5e:	08 95       	ret

00002f60 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2f60:	10 92 db 23 	sts	0x23DB, r1	; 0x8023db <main_b_kbd_enable>
    2f64:	08 95       	ret

00002f66 <main_generic_enable>:

/* --------------------------------------------------------------------- */
/* ----------------------------- joystick ------------------------------ */
/* --------------------------------------------------------------------- */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	80 93 da 23 	sts	0x23DA, r24	; 0x8023da <main_b_generic_enable>
	return true;
}
    2f6c:	08 95       	ret

00002f6e <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2f6e:	10 92 da 23 	sts	0x23DA, r1	; 0x8023da <main_b_generic_enable>
    2f72:	08 95       	ret

00002f74 <main_led_enable>:

/* --------------------------------------------------------------------- */
/* ------------------------------- LEDs -------------------------------- */
/* --------------------------------------------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	80 93 d9 23 	sts	0x23D9, r24	; 0x8023d9 <main_b_led_enable>
	return true;
}
    2f7a:	08 95       	ret

00002f7c <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2f7c:	10 92 d9 23 	sts	0x23D9, r1	; 0x8023d9 <main_b_led_enable>
    2f80:	08 95       	ret

00002f82 <__udivmodhi4>:
    2f82:	aa 1b       	sub	r26, r26
    2f84:	bb 1b       	sub	r27, r27
    2f86:	51 e1       	ldi	r21, 0x11	; 17
    2f88:	07 c0       	rjmp	.+14     	; 0x2f98 <__udivmodhi4_ep>

00002f8a <__udivmodhi4_loop>:
    2f8a:	aa 1f       	adc	r26, r26
    2f8c:	bb 1f       	adc	r27, r27
    2f8e:	a6 17       	cp	r26, r22
    2f90:	b7 07       	cpc	r27, r23
    2f92:	10 f0       	brcs	.+4      	; 0x2f98 <__udivmodhi4_ep>
    2f94:	a6 1b       	sub	r26, r22
    2f96:	b7 0b       	sbc	r27, r23

00002f98 <__udivmodhi4_ep>:
    2f98:	88 1f       	adc	r24, r24
    2f9a:	99 1f       	adc	r25, r25
    2f9c:	5a 95       	dec	r21
    2f9e:	a9 f7       	brne	.-22     	; 0x2f8a <__udivmodhi4_loop>
    2fa0:	80 95       	com	r24
    2fa2:	90 95       	com	r25
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	08 95       	ret

00002faa <__tablejump2__>:
    2faa:	ee 0f       	add	r30, r30
    2fac:	ff 1f       	adc	r31, r31
    2fae:	88 1f       	adc	r24, r24
    2fb0:	8b bf       	out	0x3b, r24	; 59
    2fb2:	07 90       	elpm	r0, Z+
    2fb4:	f6 91       	elpm	r31, Z
    2fb6:	e0 2d       	mov	r30, r0
    2fb8:	19 94       	eijmp

00002fba <memcpy>:
    2fba:	fb 01       	movw	r30, r22
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	02 c0       	rjmp	.+4      	; 0x2fc4 <memcpy+0xa>
    2fc0:	01 90       	ld	r0, Z+
    2fc2:	0d 92       	st	X+, r0
    2fc4:	41 50       	subi	r20, 0x01	; 1
    2fc6:	50 40       	sbci	r21, 0x00	; 0
    2fc8:	d8 f7       	brcc	.-10     	; 0x2fc0 <memcpy+0x6>
    2fca:	08 95       	ret

00002fcc <_exit>:
    2fcc:	f8 94       	cli

00002fce <__stop_program>:
    2fce:	ff cf       	rjmp	.-2      	; 0x2fce <__stop_program>
