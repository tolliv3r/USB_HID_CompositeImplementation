
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000184  00802000  00002d0a  00002d9e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000245  00802184  00802184  00002f24  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a8  00000000  00000000  00002f98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b351  00000000  00000000  00003540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052b5  00000000  00000000  0000e891  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009bdb  00000000  00000000  00013b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cdc  00000000  00000000  0001d724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036d0a  00000000  00000000  0001e400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036bf  00000000  00000000  0005510a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000750  00000000  00000000  000587d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd69  00000000  00000000  00058f20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__vector_125>
     1f8:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__vector_126>
     1fc:	ff 03       	fmulsu	r23, r23
     1fe:	45 04       	cpc	r4, r5
     200:	f5 03       	fmuls	r23, r21
     202:	47 04       	cpc	r4, r7
     204:	f7 03       	fmuls	r23, r23
     206:	f9 03       	fmulsu	r23, r17
     208:	fb 03       	fmulsu	r23, r19
     20a:	fd 03       	fmulsu	r23, r21
     20c:	ff 03       	fmulsu	r23, r23
     20e:	50 0f       	add	r21, r16
     210:	53 0f       	add	r21, r19
     212:	56 0f       	add	r21, r22
     214:	59 0f       	add	r21, r25
     216:	5c 0f       	add	r21, r28
     218:	5f 0f       	add	r21, r31
     21a:	62 0f       	add	r22, r18

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	ea e0       	ldi	r30, 0x0A	; 10
     234:	fd e2       	ldi	r31, 0x2D	; 45
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a4 38       	cpi	r26, 0x84	; 132
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a4 e8       	ldi	r26, 0x84	; 132
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a9 3c       	cpi	r26, 0xC9	; 201
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 19 16 	call	0x2c32	; 0x2c32 <main>
     25a:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     264:	30 91 bb 23 	lds	r19, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
     268:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     278:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
     27c:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     284:	e9 eb       	ldi	r30, 0xB9	; 185
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	84 e8       	ldi	r24, 0x84	; 132
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     298:	8b e7       	ldi	r24, 0x7B	; 123
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
	}
	return false;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_in_sent>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep) {
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_led_b_report_in_free = true;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <udi_hid_led_b_report_in_free>
     2b6:	08 95       	ret

000002b8 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2bc:	0b e7       	ldi	r16, 0x7B	; 123
     2be:	11 e0       	ldi	r17, 0x01	; 1
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	44 e8       	ldi	r20, 0x84	; 132
     2c6:	51 e2       	ldi	r21, 0x21	; 33
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	0e 94 11 13 	call	0x2622	; 0x2622 <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
}
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	08 95       	ret

000002d6 <udi_hid_led_enable>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep);

/* --------------------------------------------------------------------- */

bool udi_hid_led_enable(void) {
     2d6:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d8:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2dc:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <udi_hid_led_protocol>
	udi_hid_led_b_report_in_free = true;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <udi_hid_led_b_report_in_free>

	if(!udi_hid_led_report_out_enable())
     2e6:	e8 df       	rcall	.-48     	; 0x2b8 <udi_hid_led_report_out_enable>
     2e8:	c8 2f       	mov	r28, r24
     2ea:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2ec:	0e 94 57 16 	call	0x2cae	; 0x2cae <main_led_enable>
	return true;
}
     2f0:	8c 2f       	mov	r24, r28
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2f6:	81 11       	cpse	r24, r1
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <udi_hid_led_report_out_received+0x10>
     2fa:	61 30       	cpi	r22, 0x01	; 1
     2fc:	71 05       	cpc	r23, r1
     2fe:	19 f4       	brne	.+6      	; 0x306 <udi_hid_led_report_out_received+0x10>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     300:	84 e8       	ldi	r24, 0x84	; 132
     302:	91 e2       	ldi	r25, 0x21	; 33
     304:	2c d6       	rcall	.+3160   	; 0xf5e <ui_led_report>
	}
	udi_hid_led_report_out_enable();
     306:	d8 cf       	rjmp	.-80     	; 0x2b8 <udi_hid_led_report_out_enable>
     308:	08 95       	ret

0000030a <udi_hid_led_disable>:
     30a:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <main_led_disable>
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     30e:	08 95       	ret

00000310 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     310:	22 e3       	ldi	r18, 0x32	; 50
     312:	31 e0       	ldi	r19, 0x01	; 1
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e2       	ldi	r21, 0x20	; 32
     318:	6a e8       	ldi	r22, 0x8A	; 138
     31a:	71 e2       	ldi	r23, 0x21	; 33
     31c:	8c e8       	ldi	r24, 0x8C	; 140
     31e:	91 e2       	ldi	r25, 0x21	; 33
     320:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     324:	08 95       	ret

00000326 <udi_hid_led_send_report_in>:
		              udi_hid_led_report_out_received);
}


bool udi_hid_led_send_report_in(uint8_t *data)
{
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	1f 92       	push	r1
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	9c 01       	movw	r18, r24
	if (!udi_hid_led_b_report_in_free)
     338:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <udi_hid_led_b_report_in_free>
     33c:	88 23       	and	r24, r24
     33e:	d9 f0       	breq	.+54     	; 0x376 <udi_hid_led_send_report_in+0x50>
     340:	d9 01       	movw	r26, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     342:	8f b7       	in	r24, 0x3f	; 63
     344:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     346:	f8 94       	cli
	return flags;
     348:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();

	memset(&udi_hid_led_report_in,
     34a:	e6 e8       	ldi	r30, 0x86	; 134
     34c:	f1 e2       	ldi	r31, 0x21	; 33
     34e:	10 82       	st	Z, r1
		   0,
		   sizeof(udi_hid_led_report_in));
	memcpy(&udi_hid_led_report_in,
     350:	8c 91       	ld	r24, X
     352:	80 83       	st	Z, r24
		   data,
		   sizeof(udi_hid_led_report_in));
	udi_hid_led_b_report_in_free = !udd_ep_run(UDI_HID_LED_EP_IN,
     354:	08 e5       	ldi	r16, 0x58	; 88
     356:	11 e0       	ldi	r17, 0x01	; 1
     358:	21 e0       	ldi	r18, 0x01	; 1
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	af 01       	movw	r20, r30
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	84 e8       	ldi	r24, 0x84	; 132
     362:	0e 94 11 13 	call	0x2622	; 0x2622 <udd_ep_run>
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	89 27       	eor	r24, r25
     36a:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <udi_hid_led_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     36e:	ff be       	out	0x3f, r15	; 63
		                                       false,
		                                       (uint8_t *) & udi_hid_led_report_in,
		                                       sizeof(udi_hid_led_report_in),
		                                       udi_hid_led_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_led_b_report_in_free;
     370:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <udi_hid_led_b_report_in_free>
     374:	89 27       	eor	r24, r25
}
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	08 95       	ret

00000384 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     384:	e0 e0       	ldi	r30, 0x00	; 0
     386:	f6 e0       	ldi	r31, 0x06	; 6
     388:	9f ef       	ldi	r25, 0xFF	; 255
     38a:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     38c:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     38e:	e0 e2       	ldi	r30, 0x20	; 32
     390:	f6 e0       	ldi	r31, 0x06	; 6
     392:	3f e3       	ldi	r19, 0x3F	; 63
     394:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     396:	88 e1       	ldi	r24, 0x18	; 24
     398:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     39a:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     39c:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     39e:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3a0:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3a2:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     3a4:	20 ec       	ldi	r18, 0xC0	; 192
     3a6:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     3a8:	40 e4       	ldi	r20, 0x40	; 64
     3aa:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     3ac:	40 e8       	ldi	r20, 0x80	; 128
     3ae:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     3b0:	e0 e4       	ldi	r30, 0x40	; 64
     3b2:	f6 e0       	ldi	r31, 0x06	; 6
     3b4:	4c ef       	ldi	r20, 0xFC	; 252
     3b6:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3b8:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ba:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3bc:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3be:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3c0:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3c2:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     3c4:	43 e0       	ldi	r20, 0x03	; 3
     3c6:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     3c8:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     3ca:	e0 e6       	ldi	r30, 0x60	; 96
     3cc:	f6 e0       	ldi	r31, 0x06	; 6
     3ce:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d0:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d2:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d4:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d6:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d8:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3da:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     3dc:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     3de:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     3e0:	e0 e8       	ldi	r30, 0x80	; 128
     3e2:	f6 e0       	ldi	r31, 0x06	; 6
     3e4:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e6:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e8:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ea:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ec:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ee:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f0:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f2:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f4:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     3f6:	e0 ea       	ldi	r30, 0xA0	; 160
     3f8:	f6 e0       	ldi	r31, 0x06	; 6
     3fa:	90 ef       	ldi	r25, 0xF0	; 240
     3fc:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3fe:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     400:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     402:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     404:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     406:	8f e0       	ldi	r24, 0x0F	; 15
     408:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     40a:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     40c:	9c d2       	rcall	.+1336   	; 0x946 <led_init>
	keypad_init();
     40e:	0d c1       	rjmp	.+538    	; 0x62a <keypad_init>
     410:	08 95       	ret

00000412 <jstk_readVertIndex>:
     412:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     416:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	92 2b       	or	r25, r18
     41e:	96 95       	lsr	r25
     420:	87 95       	ror	r24
     422:	96 95       	lsr	r25
     424:	87 95       	ror	r24
     426:	bc 01       	movw	r22, r24
     428:	7f 70       	andi	r23, 0x0F	; 15
     42a:	80 ff       	sbrs	r24, 0
     42c:	17 c0       	rjmp	.+46     	; 0x45c <jstk_readVertIndex+0x4a>
     42e:	21 e0       	ldi	r18, 0x01	; 1
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	e1 e0       	ldi	r30, 0x01	; 1
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	82 2f       	mov	r24, r18
     438:	af 01       	movw	r20, r30
     43a:	02 2e       	mov	r0, r18
     43c:	02 c0       	rjmp	.+4      	; 0x442 <jstk_readVertIndex+0x30>
     43e:	44 0f       	add	r20, r20
     440:	55 1f       	adc	r21, r21
     442:	0a 94       	dec	r0
     444:	e2 f7       	brpl	.-8      	; 0x43e <jstk_readVertIndex+0x2c>
     446:	46 23       	and	r20, r22
     448:	57 23       	and	r21, r23
     44a:	45 2b       	or	r20, r21
     44c:	41 f0       	breq	.+16     	; 0x45e <jstk_readVertIndex+0x4c>
     44e:	2f 5f       	subi	r18, 0xFF	; 255
     450:	3f 4f       	sbci	r19, 0xFF	; 255
     452:	2c 30       	cpi	r18, 0x0C	; 12
     454:	31 05       	cpc	r19, r1
     456:	79 f7       	brne	.-34     	; 0x436 <jstk_readVertIndex+0x24>
     458:	8f ef       	ldi	r24, 0xFF	; 255
     45a:	08 95       	ret
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	08 95       	ret

00000460 <jstk_readHoriIndex>:
     460:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     464:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	92 2b       	or	r25, r18
     46c:	bc 01       	movw	r22, r24
     46e:	7f 70       	andi	r23, 0x0F	; 15
     470:	80 ff       	sbrs	r24, 0
     472:	17 c0       	rjmp	.+46     	; 0x4a2 <jstk_readHoriIndex+0x42>
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	e1 e0       	ldi	r30, 0x01	; 1
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	82 2f       	mov	r24, r18
     47e:	af 01       	movw	r20, r30
     480:	02 2e       	mov	r0, r18
     482:	02 c0       	rjmp	.+4      	; 0x488 <jstk_readHoriIndex+0x28>
     484:	44 0f       	add	r20, r20
     486:	55 1f       	adc	r21, r21
     488:	0a 94       	dec	r0
     48a:	e2 f7       	brpl	.-8      	; 0x484 <jstk_readHoriIndex+0x24>
     48c:	46 23       	and	r20, r22
     48e:	57 23       	and	r21, r23
     490:	45 2b       	or	r20, r21
     492:	41 f0       	breq	.+16     	; 0x4a4 <jstk_readHoriIndex+0x44>
     494:	2f 5f       	subi	r18, 0xFF	; 255
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	2c 30       	cpi	r18, 0x0C	; 12
     49a:	31 05       	cpc	r19, r1
     49c:	79 f7       	brne	.-34     	; 0x47c <jstk_readHoriIndex+0x1c>
     49e:	8f ef       	ldi	r24, 0xFF	; 255
     4a0:	08 95       	ret
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	08 95       	ret

000004a6 <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     4a6:	88 23       	and	r24, r24
     4a8:	f4 f1       	brlt	.+124    	; 0x526 <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     4aa:	9b ef       	ldi	r25, 0xFB	; 251
     4ac:	98 0f       	add	r25, r24
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	e0 f1       	brcs	.+120    	; 0x52a <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     4b2:	85 30       	cpi	r24, 0x05	; 5
     4b4:	34 f4       	brge	.+12     	; 0x4c2 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4b6:	95 e0       	ldi	r25, 0x05	; 5
     4b8:	98 1b       	sub	r25, r24
     4ba:	92 30       	cpi	r25, 0x02	; 2
     4bc:	08 f0       	brcs	.+2      	; 0x4c0 <jstk_ledMask+0x1a>
     4be:	42 c0       	rjmp	.+132    	; 0x544 <jstk_ledMask+0x9e>
     4c0:	36 c0       	rjmp	.+108    	; 0x52e <jstk_ledMask+0x88>
     4c2:	9a ef       	ldi	r25, 0xFA	; 250
     4c4:	98 0f       	add	r25, r24
     4c6:	92 30       	cpi	r25, 0x02	; 2
     4c8:	b0 f5       	brcc	.+108    	; 0x536 <jstk_ledMask+0x90>
     4ca:	31 c0       	rjmp	.+98     	; 0x52e <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4cc:	62 e0       	ldi	r22, 0x02	; 2
     4ce:	23 e0       	ldi	r18, 0x03	; 3
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     4d6:	e1 e0       	ldi	r30, 0x01	; 1
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	af 01       	movw	r20, r30
     4dc:	02 2e       	mov	r0, r18
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <jstk_ledMask+0x3e>
     4e0:	44 0f       	add	r20, r20
     4e2:	55 1f       	adc	r21, r21
     4e4:	0a 94       	dec	r0
     4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <jstk_ledMask+0x3a>
     4e8:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     4ea:	9f 5f       	subi	r25, 0xFF	; 255
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	31 09       	sbc	r19, r1
     4f0:	96 17       	cp	r25, r22
     4f2:	98 f3       	brcs	.-26     	; 0x4da <jstk_ledMask+0x34>
     4f4:	08 95       	ret
     4f6:	81 50       	subi	r24, 0x01	; 1
     4f8:	48 2f       	mov	r20, r24
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	4b 5f       	subi	r20, 0xFB	; 251
     4fe:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     500:	24 e0       	ldi	r18, 0x04	; 4
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     506:	e1 e0       	ldi	r30, 0x01	; 1
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	bf 01       	movw	r22, r30
     50c:	02 2e       	mov	r0, r18
     50e:	02 c0       	rjmp	.+4      	; 0x514 <jstk_ledMask+0x6e>
     510:	66 0f       	add	r22, r22
     512:	77 1f       	adc	r23, r23
     514:	0a 94       	dec	r0
     516:	e2 f7       	brpl	.-8      	; 0x510 <jstk_ledMask+0x6a>
     518:	86 2b       	or	r24, r22
     51a:	2f 5f       	subi	r18, 0xFF	; 255
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     51e:	24 17       	cp	r18, r20
     520:	35 07       	cpc	r19, r21
     522:	99 f7       	brne	.-26     	; 0x50a <jstk_ledMask+0x64>
     524:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     52a:	88 e1       	ldi	r24, 0x18	; 24
     52c:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     52e:	85 30       	cpi	r24, 0x05	; 5
     530:	6c f2       	brlt	.-102    	; 0x4cc <jstk_ledMask+0x26>
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	e0 cf       	rjmp	.-64     	; 0x4f6 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     536:	85 50       	subi	r24, 0x05	; 5
     538:	85 30       	cpi	r24, 0x05	; 5
     53a:	08 f0       	brcs	.+2      	; 0x53e <jstk_ledMask+0x98>
     53c:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     53e:	81 11       	cpse	r24, r1
     540:	da cf       	rjmp	.-76     	; 0x4f6 <jstk_ledMask+0x50>
     542:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     544:	66 e0       	ldi	r22, 0x06	; 6
     546:	68 1b       	sub	r22, r24
     548:	65 30       	cpi	r22, 0x05	; 5
     54a:	08 f0       	brcs	.+2      	; 0x54e <jstk_ledMask+0xa8>
     54c:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     54e:	61 11       	cpse	r22, r1
     550:	be cf       	rjmp	.-132    	; 0x4ce <jstk_ledMask+0x28>
     552:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     554:	08 95       	ret

00000556 <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     556:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     558:	5c df       	rcall	.-328    	; 0x412 <jstk_readVertIndex>
     55a:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     55c:	81 df       	rcall	.-254    	; 0x460 <jstk_readHoriIndex>
     55e:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     560:	24 f4       	brge	.+8      	; 0x56a <jstk_readMask+0x14>
     562:	88 23       	and	r24, r24
     564:	c4 f0       	brlt	.+48     	; 0x596 <jstk_readMask+0x40>
     566:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     568:	09 c0       	rjmp	.+18     	; 0x57c <jstk_readMask+0x26>
     56a:	c6 30       	cpi	r28, 0x06	; 6
     56c:	1c f0       	brlt	.+6      	; 0x574 <jstk_readMask+0x1e>
     56e:	9b ef       	ldi	r25, 0xFB	; 251
     570:	9c 0f       	add	r25, r28
     572:	02 c0       	rjmp	.+4      	; 0x578 <jstk_readMask+0x22>
     574:	95 e0       	ldi	r25, 0x05	; 5
     576:	9c 1b       	sub	r25, r28
     578:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     57a:	54 f0       	brlt	.+20     	; 0x590 <jstk_readMask+0x3a>
     57c:	86 30       	cpi	r24, 0x06	; 6
     57e:	1c f0       	brlt	.+6      	; 0x586 <jstk_readMask+0x30>
     580:	2b ef       	ldi	r18, 0xFB	; 251
     582:	28 0f       	add	r18, r24
     584:	02 c0       	rjmp	.+4      	; 0x58a <jstk_readMask+0x34>
     586:	25 e0       	ldi	r18, 0x05	; 5
     588:	28 1b       	sub	r18, r24
     58a:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     58c:	08 f4       	brcc	.+2      	; 0x590 <jstk_readMask+0x3a>
     58e:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     590:	8c 2f       	mov	r24, r28
     592:	89 df       	rcall	.-238    	; 0x4a6 <jstk_ledMask>
     594:	01 c0       	rjmp	.+2      	; 0x598 <jstk_readMask+0x42>
     596:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     598:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     59a:	08 95       	ret

0000059c <jstk_usbTask>:
     59c:	61 df       	rcall	.-318    	; 0x460 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     59e:	88 23       	and	r24, r24
     5a0:	3c f0       	brlt	.+14     	; 0x5b0 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5a2:	e8 2f       	mov	r30, r24
     5a4:	88 0f       	add	r24, r24
     5a6:	ff 0b       	sbc	r31, r31
     5a8:	e8 58       	subi	r30, 0x88	; 136
     5aa:	fe 4d       	sbci	r31, 0xDE	; 222
     5ac:	80 81       	ld	r24, Z
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5b0:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     5b2:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5b6:	2d df       	rcall	.-422    	; 0x412 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5b8:	88 23       	and	r24, r24
     5ba:	3c f0       	brlt	.+14     	; 0x5ca <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5bc:	e8 2f       	mov	r30, r24
     5be:	88 0f       	add	r24, r24
     5c0:	ff 0b       	sbc	r31, r31
     5c2:	e8 58       	subi	r30, 0x88	; 136
     5c4:	fe 4d       	sbci	r31, 0xDE	; 222
     5c6:	80 81       	ld	r24, Z
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5ca:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5cc:	ee e8       	ldi	r30, 0x8E	; 142
     5ce:	f1 e2       	ldi	r31, 0x21	; 33
     5d0:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     5d2:	20 81       	ld	r18, Z
     5d4:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     5d8:	29 13       	cpse	r18, r25
     5da:	04 c0       	rjmp	.+8      	; 0x5e4 <jstk_usbTask+0x48>
     5dc:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     5e0:	98 17       	cp	r25, r24
     5e2:	71 f0       	breq	.+28     	; 0x600 <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     5e4:	8e e8       	ldi	r24, 0x8E	; 142
     5e6:	91 e2       	ldi	r25, 0x21	; 33
     5e8:	d6 d5       	rcall	.+2988   	; 0x1196 <udi_hid_generic_send_report_in>
     5ea:	88 23       	and	r24, r24
     5ec:	49 f0       	breq	.+18     	; 0x600 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     5ee:	e6 e2       	ldi	r30, 0x26	; 38
     5f0:	f0 e2       	ldi	r31, 0x20	; 32
     5f2:	ae e8       	ldi	r26, 0x8E	; 142
     5f4:	b1 e2       	ldi	r27, 0x21	; 33
     5f6:	8c 91       	ld	r24, X
     5f8:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     5fa:	11 96       	adiw	r26, 0x01	; 1
     5fc:	8c 91       	ld	r24, X
     5fe:	81 83       	std	Z+1, r24	; 0x01
     600:	08 95       	ret

00000602 <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     602:	a9 df       	rcall	.-174    	; 0x556 <jstk_readMask>
     604:	80 93 b0 23 	sts	0x23B0, r24	; 0x8023b0 <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     608:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     60c:	90 93 b1 23 	sts	0x23B1, r25	; 0x8023b1 <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     610:	90 91 b1 23 	lds	r25, 0x23B1	; 0x8023b1 <jstk_testMode>
     614:	94 fd       	sbrc	r25, 4
     616:	07 c0       	rjmp	.+14     	; 0x626 <joystick+0x24>
        if (jstk_mask) {
     618:	88 23       	and	r24, r24
            led_allOff();
     61a:	31 f0       	breq	.+12     	; 0x628 <joystick+0x26>
     61c:	9f d1       	rcall	.+830    	; 0x95c <led_allOff>
            led_on(jstk_mask);
     61e:	80 91 b0 23 	lds	r24, 0x23B0	; 0x8023b0 <jstk_mask>
     622:	a2 c1       	rjmp	.+836    	; 0x968 <led_on>
        }
    } else {                                // normal mode
        // led_allOff();                       // for testing
        jstk_usbTask();                     // send to USB
     624:	08 95       	ret
     626:	ba cf       	rjmp	.-140    	; 0x59c <jstk_usbTask>
     628:	08 95       	ret

0000062a <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     62a:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <kpd_keyPressed>
     62e:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <kpd_currState>
     632:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <kpd_prevState>
     636:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <kpd_exitTestMode>
     63a:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <kpd_rowVal>
     63e:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <kpd_code>
     642:	e2 ea       	ldi	r30, 0xA2	; 162
     644:	f1 e2       	ldi	r31, 0x21	; 33
     646:	81 e6       	ldi	r24, 0x61	; 97
     648:	80 83       	st	Z, r24
     64a:	80 e6       	ldi	r24, 0x60	; 96
     64c:	81 83       	std	Z+1, r24	; 0x01
     64e:	12 82       	std	Z+2, r1	; 0x02
     650:	13 82       	std	Z+3, r1	; 0x03
     652:	8f e5       	ldi	r24, 0x5F	; 95
     654:	84 83       	std	Z+4, r24	; 0x04
     656:	8e e5       	ldi	r24, 0x5E	; 94
     658:	85 83       	std	Z+5, r24	; 0x05
     65a:	16 82       	std	Z+6, r1	; 0x06
     65c:	17 82       	std	Z+7, r1	; 0x07
     65e:	8d e5       	ldi	r24, 0x5D	; 93
     660:	80 87       	std	Z+8, r24	; 0x08
     662:	11 86       	std	Z+9, r1	; 0x09
     664:	12 86       	std	Z+10, r1	; 0x0a
     666:	13 86       	std	Z+11, r1	; 0x0b
     668:	14 86       	std	Z+12, r1	; 0x0c
     66a:	15 86       	std	Z+13, r1	; 0x0d
     66c:	89 e5       	ldi	r24, 0x59	; 89
     66e:	86 87       	std	Z+14, r24	; 0x0e
     670:	8b e5       	ldi	r24, 0x5B	; 91
     672:	87 87       	std	Z+15, r24	; 0x0f
     674:	10 8a       	std	Z+16, r1	; 0x10
     676:	11 8a       	std	Z+17, r1	; 0x11
     678:	8a e5       	ldi	r24, 0x5A	; 90
     67a:	82 8b       	std	Z+18, r24	; 0x12
     67c:	8c e5       	ldi	r24, 0x5C	; 92
     67e:	83 8b       	std	Z+19, r24	; 0x13
     680:	ed e9       	ldi	r30, 0x9D	; 157
     682:	f1 e2       	ldi	r31, 0x21	; 33
     684:	8e e0       	ldi	r24, 0x0E	; 14
     686:	80 83       	st	Z, r24
     688:	8d e0       	ldi	r24, 0x0D	; 13
     68a:	81 83       	std	Z+1, r24	; 0x01
     68c:	8b e0       	ldi	r24, 0x0B	; 11
     68e:	82 83       	std	Z+2, r24	; 0x02
     690:	87 e0       	ldi	r24, 0x07	; 7
     692:	83 83       	std	Z+3, r24	; 0x03
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	84 83       	std	Z+4, r24	; 0x04
     698:	08 95       	ret

0000069a <keypad_poll>:
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	90 91 93 21 	lds	r25, 0x2193	; 0x802193 <prevRowMask.5329>
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	15 e0       	ldi	r17, 0x05	; 5
     6ac:	74 e0       	ldi	r23, 0x04	; 4
     6ae:	e0 ea       	ldi	r30, 0xA0	; 160
     6b0:	f6 e0       	ldi	r31, 0x06	; 6
     6b2:	a0 e2       	ldi	r26, 0x20	; 32
     6b4:	b6 e0       	ldi	r27, 0x06	; 6
     6b6:	00 e8       	ldi	r16, 0x80	; 128
     6b8:	62 2f       	mov	r22, r18
     6ba:	e9 01       	movw	r28, r18
     6bc:	c3 56       	subi	r28, 0x63	; 99
     6be:	de 4d       	sbci	r29, 0xDE	; 222
     6c0:	88 81       	ld	r24, Y
     6c2:	84 83       	std	Z+4, r24	; 0x04
     6c4:	24 30       	cpi	r18, 0x04	; 4
     6c6:	21 f4       	brne	.+8      	; 0x6d0 <keypad_poll+0x36>
     6c8:	16 96       	adiw	r26, 0x06	; 6
     6ca:	0c 93       	st	X, r16
     6cc:	16 97       	sbiw	r26, 0x06	; 6
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <keypad_poll+0x3c>
     6d0:	15 96       	adiw	r26, 0x05	; 5
     6d2:	0c 93       	st	X, r16
     6d4:	15 97       	sbiw	r26, 0x05	; 5
     6d6:	80 85       	ldd	r24, Z+8	; 0x08
     6d8:	80 95       	com	r24
     6da:	80 7f       	andi	r24, 0xF0	; 240
     6dc:	48 2f       	mov	r20, r24
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	ea 01       	movw	r28, r20
     6e2:	21 97       	sbiw	r28, 0x01	; 1
     6e4:	4c 23       	and	r20, r28
     6e6:	5d 23       	and	r21, r29
     6e8:	45 2b       	or	r20, r21
     6ea:	41 f0       	breq	.+16     	; 0x6fc <keypad_poll+0x62>
     6ec:	90 95       	com	r25
     6ee:	98 23       	and	r25, r24
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <keypad_poll+0x5a>
     6f2:	98 2f       	mov	r25, r24
     6f4:	49 2f       	mov	r20, r25
     6f6:	41 95       	neg	r20
     6f8:	94 23       	and	r25, r20
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <keypad_poll+0x64>
     6fc:	98 2f       	mov	r25, r24
     6fe:	90 32       	cpi	r25, 0x20	; 32
     700:	51 f0       	breq	.+20     	; 0x716 <keypad_poll+0x7c>
     702:	18 f4       	brcc	.+6      	; 0x70a <keypad_poll+0x70>
     704:	90 31       	cpi	r25, 0x10	; 16
     706:	d9 f1       	breq	.+118    	; 0x77e <keypad_poll+0xe4>
     708:	0a c0       	rjmp	.+20     	; 0x71e <keypad_poll+0x84>
     70a:	90 34       	cpi	r25, 0x40	; 64
     70c:	d1 f1       	breq	.+116    	; 0x782 <keypad_poll+0xe8>
     70e:	90 38       	cpi	r25, 0x80	; 128
     710:	31 f4       	brne	.+12     	; 0x71e <keypad_poll+0x84>
     712:	73 e0       	ldi	r23, 0x03	; 3
     714:	37 c0       	rjmp	.+110    	; 0x784 <keypad_poll+0xea>
     716:	99 23       	and	r25, r25
     718:	11 f0       	breq	.+4      	; 0x71e <keypad_poll+0x84>
     71a:	16 2f       	mov	r17, r22
     71c:	71 e0       	ldi	r23, 0x01	; 1
     71e:	2f 5f       	subi	r18, 0xFF	; 255
     720:	3f 4f       	sbci	r19, 0xFF	; 255
     722:	98 2f       	mov	r25, r24
     724:	25 30       	cpi	r18, 0x05	; 5
     726:	31 05       	cpc	r19, r1
     728:	39 f6       	brne	.-114    	; 0x6b8 <keypad_poll+0x1e>
     72a:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <prevRowMask.5329>
     72e:	80 e8       	ldi	r24, 0x80	; 128
     730:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     734:	74 30       	cpi	r23, 0x04	; 4
     736:	e0 f4       	brcc	.+56     	; 0x770 <keypad_poll+0xd6>
     738:	e1 2f       	mov	r30, r17
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	ee 0f       	add	r30, r30
     73e:	ff 1f       	adc	r31, r31
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	ee 55       	subi	r30, 0x5E	; 94
     746:	fe 4d       	sbci	r31, 0xDE	; 222
     748:	e7 0f       	add	r30, r23
     74a:	f1 1d       	adc	r31, r1
     74c:	80 81       	ld	r24, Z
     74e:	90 91 9b 21 	lds	r25, 0x219B	; 0x80219b <kpd_keyPressed>
     752:	91 11       	cpse	r25, r1
     754:	06 c0       	rjmp	.+12     	; 0x762 <keypad_poll+0xc8>
     756:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <kpd_code>
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 9b 21 	sts	0x219B, r24	; 0x80219b <kpd_keyPressed>
     760:	13 c0       	rjmp	.+38     	; 0x788 <keypad_poll+0xee>
     762:	90 91 9a 21 	lds	r25, 0x219A	; 0x80219a <kpd_code>
     766:	89 17       	cp	r24, r25
     768:	79 f0       	breq	.+30     	; 0x788 <keypad_poll+0xee>
     76a:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <kpd_code>
     76e:	0c c0       	rjmp	.+24     	; 0x788 <keypad_poll+0xee>
     770:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <kpd_keyPressed>
     774:	81 30       	cpi	r24, 0x01	; 1
     776:	41 f4       	brne	.+16     	; 0x788 <keypad_poll+0xee>
     778:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <kpd_keyPressed>
     77c:	05 c0       	rjmp	.+10     	; 0x788 <keypad_poll+0xee>
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	01 c0       	rjmp	.+2      	; 0x784 <keypad_poll+0xea>
     782:	72 e0       	ldi	r23, 0x02	; 2
     784:	16 2f       	mov	r17, r22
     786:	cb cf       	rjmp	.-106    	; 0x71e <keypad_poll+0x84>
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	08 95       	ret

00000792 <keypad_getState>:
     792:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <kpd_keyPressed>
     796:	08 95       	ret

00000798 <keypad_report>:

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     798:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     79c:	80 93 b2 23 	sts	0x23B2, r24	; 0x8023b2 <kpd_testMode>
	}
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     7a0:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     7a4:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     7a8:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_codeOut = keypad_getCode();    // current code to be outputed
     7ac:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <kpd_codeOut>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     7b0:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <kpd_testMode>
     7b4:	84 fd       	sbrc	r24, 4
     7b6:	29 c0       	rjmp	.+82     	; 0x80a <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     7b8:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <kpd_currState>
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	09 f0       	breq	.+2      	; 0x7c2 <keypad_report+0x2a>
     7c0:	54 c0       	rjmp	.+168    	; 0x86a <keypad_report+0xd2>
     7c2:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <kpd_prevState>
     7c6:	81 11       	cpse	r24, r1
     7c8:	50 c0       	rjmp	.+160    	; 0x86a <keypad_report+0xd2>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
     7ca:	e0 91 97 21 	lds	r30, 0x2197	; 0x802197 <kpd_codeOut>
     7ce:	8e 2f       	mov	r24, r30
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	fc 01       	movw	r30, r24
     7d4:	e9 55       	subi	r30, 0x59	; 89
     7d6:	f1 09       	sbc	r31, r1
     7d8:	e9 30       	cpi	r30, 0x09	; 9
     7da:	f1 05       	cpc	r31, r1
     7dc:	90 f4       	brcc	.+36     	; 0x802 <keypad_report+0x6a>
     7de:	88 27       	eor	r24, r24
     7e0:	e2 50       	subi	r30, 0x02	; 2
     7e2:	ff 4f       	sbci	r31, 0xFF	; 255
     7e4:	8f 4f       	sbci	r24, 0xFF	; 255
     7e6:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     7ea:	84 e0       	ldi	r24, 0x04	; 4
     7ec:	09 c0       	rjmp	.+18     	; 0x800 <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     7ee:	80 e1       	ldi	r24, 0x10	; 16
     7f0:	07 c0       	rjmp	.+14     	; 0x800 <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     7f2:	80 e2       	ldi	r24, 0x20	; 32
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     7f6:	80 e4       	ldi	r24, 0x40	; 64
     7f8:	03 c0       	rjmp	.+6      	; 0x800 <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     7fa:	80 e8       	ldi	r24, 0x80	; 128
     7fc:	01 c0       	rjmp	.+2      	; 0x800 <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     7fe:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     800:	bd d0       	rcall	.+378    	; 0x97c <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <kpd_exitTestMode>
     808:	30 c0       	rjmp	.+96     	; 0x86a <keypad_report+0xd2>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     80a:	90 91 9a 21 	lds	r25, 0x219A	; 0x80219a <kpd_code>
	else // normal mode
	{
		static uint8_t kpd_prevCode = 0;
		uint8_t currCode = keypad_getCode();

		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     80e:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <kpd_currState>
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	61 f4       	brne	.+24     	; 0x82e <keypad_report+0x96>
     816:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <kpd_prevState>
     81a:	81 11       	cpse	r24, r1
     81c:	08 c0       	rjmp	.+16     	; 0x82e <keypad_report+0x96>
			kpd_prevCode = currCode;
     81e:	90 93 92 21 	sts	0x2192, r25	; 0x802192 <kpd_prevCode.5370>

			keyStatus2Report = KEYPAD_PRESSED;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <keyStatus2Report>
			key2Report = currCode;
     828:	90 93 94 21 	sts	0x2194, r25	; 0x802194 <key2Report>
     82c:	1e c0       	rjmp	.+60     	; 0x86a <keypad_report+0xd2>
		} else if (kpd_currState == KEYPAD_PRESSED &&
     82e:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <kpd_currState>
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	61 f4       	brne	.+24     	; 0x84e <keypad_report+0xb6>
     836:	80 91 92 21 	lds	r24, 0x2192	; 0x802192 <kpd_prevCode.5370>
     83a:	98 17       	cp	r25, r24
     83c:	41 f0       	breq	.+16     	; 0x84e <keypad_report+0xb6>
			       currCode != kpd_prevCode) {
			kpd_prevCode = currCode;
     83e:	90 93 92 21 	sts	0x2192, r25	; 0x802192 <kpd_prevCode.5370>
			
			keyStatus2Report = KEYPAD_PRESSED;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <keyStatus2Report>
			key2Report = currCode;
     848:	90 93 94 21 	sts	0x2194, r25	; 0x802194 <key2Report>
     84c:	0e c0       	rjmp	.+28     	; 0x86a <keypad_report+0xd2>
		} else if (kpd_currState == KEYPAD_RELEASED &&
     84e:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <kpd_currState>
     852:	81 11       	cpse	r24, r1
     854:	0a c0       	rjmp	.+20     	; 0x86a <keypad_report+0xd2>
			       kpd_prevState == KEYPAD_PRESSED) {
     856:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <kpd_prevState>
			       currCode != kpd_prevCode) {
			kpd_prevCode = currCode;
			
			keyStatus2Report = KEYPAD_PRESSED;
			key2Report = currCode;
		} else if (kpd_currState == KEYPAD_RELEASED &&
     85a:	81 30       	cpi	r24, 0x01	; 1
     85c:	31 f4       	brne	.+12     	; 0x86a <keypad_report+0xd2>
			       kpd_prevState == KEYPAD_PRESSED) {
			keyStatus2Report = KEYPAD_RELEASED;
     85e:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <keyStatus2Report>
			key2Report = kpd_prevCode;
     862:	80 91 92 21 	lds	r24, 0x2192	; 0x802192 <kpd_prevCode.5370>
     866:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <key2Report>
		}
	}
	
	// clears LEDs when exiting test mode
	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     86a:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <kpd_testMode>
     86e:	84 ff       	sbrs	r24, 4
     870:	07 c0       	rjmp	.+14     	; 0x880 <keypad_report+0xe8>
     872:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <kpd_exitTestMode>
     876:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     878:	19 f4       	brne	.+6      	; 0x880 <keypad_report+0xe8>
     87a:	70 d0       	rcall	.+224    	; 0x95c <led_allOff>
		kpd_exitTestMode = 0;
     87c:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <kpd_exitTestMode>
	}
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
     880:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <kpd_currState>
     884:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <kpd_prevState>
}
     888:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	b9 cf       	rjmp	.-142    	; 0x800 <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     88e:	88 e0       	ldi	r24, 0x08	; 8
     890:	b7 cf       	rjmp	.-146    	; 0x800 <keypad_report+0x68>

00000892 <keypad>:
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
}


void keypad(void) {
     892:	cf 93       	push	r28
	keypad_poll();
     894:	02 df       	rcall	.-508    	; 0x69a <keypad_poll>
	keypad_report();
     896:	80 df       	rcall	.-256    	; 0x798 <keypad_report>
     898:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <keyStatus2Report>

	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = keyStatus2Report;
     89c:	c1 e0       	ldi	r28, 0x01	; 1
     89e:	81 11       	cpse	r24, r1
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <keypad+0x12>
     8a2:	c0 e0       	ldi	r28, 0x00	; 0
     8a4:	88 23       	and	r24, r24
	uint8_t key_val = key2Report;

	if (key_down) {
     8a6:	81 f0       	breq	.+32     	; 0x8c8 <keypad+0x36>
     8a8:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <key2Report>

	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = keyStatus2Report;
	uint8_t key_val = key2Report;
     8ac:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <key_was_down.5375>

	if (key_down) {
		if (!key_was_down)
     8b0:	91 11       	cpse	r25, r1
     8b2:	03 c0       	rjmp	.+6      	; 0x8ba <keypad+0x28>
     8b4:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <active_key.5376>
			active_key = key_val;
     8b8:	15 c0       	rjmp	.+42     	; 0x8e4 <keypad+0x52>
     8ba:	90 91 90 21 	lds	r25, 0x2190	; 0x802190 <active_key.5376>
		else if (key_val != active_key)
     8be:	89 17       	cp	r24, r25
     8c0:	89 f0       	breq	.+34     	; 0x8e4 <keypad+0x52>
     8c2:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <active_key.5376>
			active_key = key_val;
     8c6:	0e c0       	rjmp	.+28     	; 0x8e4 <keypad+0x52>
     8c8:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <key_was_down.5375>
	} else if (key_was_down) {
     8cc:	88 23       	and	r24, r24
     8ce:	51 f0       	breq	.+20     	; 0x8e4 <keypad+0x52>
     8d0:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <active_key.5376>
		if (active_key) {
     8d4:	88 23       	and	r24, r24
     8d6:	21 f0       	breq	.+8      	; 0x8e0 <keypad+0x4e>
			udi_hid_kbd_down(active_key);
     8d8:	1b d5       	rcall	.+2614   	; 0x1310 <udi_hid_kbd_down>
			udi_hid_kbd_up(active_key);
     8da:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <active_key.5376>
     8de:	dc d4       	rcall	.+2488   	; 0x1298 <udi_hid_kbd_up>
     8e0:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <active_key.5376>
		}
		active_key = 0;
     8e4:	c0 93 91 21 	sts	0x2191, r28	; 0x802191 <key_was_down.5375>
	}
	key_was_down = key_down;
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <led_updateState>:
     8ec:	e7 eb       	ldi	r30, 0xB7	; 183
void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     8ee:	f1 e2       	ldi	r31, 0x21	; 33
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	ac 01       	movw	r20, r24
     8f8:	02 2e       	mov	r0, r18
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <led_updateState+0x14>
     8fc:	55 95       	asr	r21
     8fe:	47 95       	ror	r20
     900:	0a 94       	dec	r0
     902:	e2 f7       	brpl	.-8      	; 0x8fc <led_updateState+0x10>
     904:	40 fd       	sbrc	r20, 0
     906:	60 83       	st	Z, r22
     908:	2f 5f       	subi	r18, 0xFF	; 255
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
     90c:	31 96       	adiw	r30, 0x01	; 1
     90e:	28 30       	cpi	r18, 0x08	; 8
     910:	31 05       	cpc	r19, r1
     912:	89 f7       	brne	.-30     	; 0x8f6 <led_updateState+0xa>
     914:	08 95       	ret

00000916 <userActivity>:
     916:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     91a:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <testMode>
     91e:	bd de       	rcall	.-646    	; 0x69a <keypad_poll>
     920:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <testMode>
     924:	84 ff       	sbrs	r24, 4
     926:	0a c0       	rjmp	.+20     	; 0x93c <userActivity+0x26>
     928:	34 df       	rcall	.-408    	; 0x792 <keypad_getState>
     92a:	81 30       	cpi	r24, 0x01	; 1
     92c:	49 f0       	breq	.+18     	; 0x940 <userActivity+0x2a>
     92e:	13 de       	rcall	.-986    	; 0x556 <jstk_readMask>
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	81 11       	cpse	r24, r1
     934:	01 c0       	rjmp	.+2      	; 0x938 <userActivity+0x22>
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	89 2f       	mov	r24, r25
     93a:	03 c0       	rjmp	.+6      	; 0x942 <userActivity+0x2c>
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	01 c0       	rjmp	.+2      	; 0x942 <userActivity+0x2c>
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	81 70       	andi	r24, 0x01	; 1
     944:	08 95       	ret

00000946 <led_init>:
     946:	e0 e0       	ldi	r30, 0x00	; 0
     948:	f6 e0       	ldi	r31, 0x06	; 6
     94a:	8f ef       	ldi	r24, 0xFF	; 255
     94c:	81 83       	std	Z+1, r24	; 0x01
     94e:	85 83       	std	Z+5, r24	; 0x05
     950:	e0 e2       	ldi	r30, 0x20	; 32
     952:	f6 e0       	ldi	r31, 0x06	; 6
     954:	80 e4       	ldi	r24, 0x40	; 64
     956:	81 83       	std	Z+1, r24	; 0x01
     958:	86 83       	std	Z+6, r24	; 0x06
     95a:	08 95       	ret

0000095c <led_allOff>:
     95c:	8f ef       	ldi	r24, 0xFF	; 255
     95e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	c3 cf       	rjmp	.-122    	; 0x8ec <led_updateState>
     966:	08 95       	ret

00000968 <led_on>:
     968:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	be cf       	rjmp	.-132    	; 0x8ec <led_updateState>
     970:	08 95       	ret

00000972 <led_off>:
     972:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	b9 cf       	rjmp	.-142    	; 0x8ec <led_updateState>
     97a:	08 95       	ret

0000097c <led_toggle>:
     97c:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     980:	e7 eb       	ldi	r30, 0xB7	; 183
     982:	f1 e2       	ldi	r31, 0x21	; 33
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	68 2f       	mov	r22, r24
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	ab 01       	movw	r20, r22
     990:	02 2e       	mov	r0, r18
     992:	02 c0       	rjmp	.+4      	; 0x998 <led_toggle+0x1c>
     994:	55 95       	asr	r21
     996:	47 95       	ror	r20
     998:	0a 94       	dec	r0
     99a:	e2 f7       	brpl	.-8      	; 0x994 <led_toggle+0x18>
     99c:	40 ff       	sbrs	r20, 0
     99e:	03 c0       	rjmp	.+6      	; 0x9a6 <led_toggle+0x2a>
     9a0:	90 81       	ld	r25, Z
     9a2:	98 27       	eor	r25, r24
     9a4:	90 83       	st	Z, r25
     9a6:	2f 5f       	subi	r18, 0xFF	; 255
     9a8:	3f 4f       	sbci	r19, 0xFF	; 255
     9aa:	31 96       	adiw	r30, 0x01	; 1
     9ac:	28 30       	cpi	r18, 0x08	; 8
     9ae:	31 05       	cpc	r19, r1
     9b0:	71 f7       	brne	.-36     	; 0x98e <led_toggle+0x12>
     9b2:	08 95       	ret

000009b4 <led_setState>:
     9b4:	e0 e0       	ldi	r30, 0x00	; 0
     9b6:	f6 e0       	ldi	r31, 0x06	; 6
     9b8:	9f ef       	ldi	r25, 0xFF	; 255
     9ba:	95 83       	std	Z+5, r25	; 0x05
     9bc:	86 83       	std	Z+6, r24	; 0x06
     9be:	e7 eb       	ldi	r30, 0xB7	; 183
     9c0:	f1 e2       	ldi	r31, 0x21	; 33
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	ac 01       	movw	r20, r24
     9ca:	02 2e       	mov	r0, r18
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <led_setState+0x1e>
     9ce:	55 95       	asr	r21
     9d0:	47 95       	ror	r20
     9d2:	0a 94       	dec	r0
     9d4:	e2 f7       	brpl	.-8      	; 0x9ce <led_setState+0x1a>
     9d6:	41 70       	andi	r20, 0x01	; 1
     9d8:	41 93       	st	Z+, r20
     9da:	2f 5f       	subi	r18, 0xFF	; 255
     9dc:	3f 4f       	sbci	r19, 0xFF	; 255
     9de:	28 30       	cpi	r18, 0x08	; 8
     9e0:	31 05       	cpc	r19, r1
     9e2:	91 f7       	brne	.-28     	; 0x9c8 <led_setState+0x14>
     9e4:	08 95       	ret

000009e6 <led_getMap>:
     9e6:	e7 eb       	ldi	r30, 0xB7	; 183
     9e8:	f1 e2       	ldi	r31, 0x21	; 33
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	91 91       	ld	r25, Z+
     9f6:	99 23       	and	r25, r25
     9f8:	41 f0       	breq	.+16     	; 0xa0a <led_getMap+0x24>
     9fa:	ab 01       	movw	r20, r22
     9fc:	02 2e       	mov	r0, r18
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <led_getMap+0x1e>
     a00:	44 0f       	add	r20, r20
     a02:	55 1f       	adc	r21, r21
     a04:	0a 94       	dec	r0
     a06:	e2 f7       	brpl	.-8      	; 0xa00 <led_getMap+0x1a>
     a08:	84 2b       	or	r24, r20
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	28 30       	cpi	r18, 0x08	; 8
     a10:	31 05       	cpc	r19, r1
     a12:	81 f7       	brne	.-32     	; 0x9f4 <led_getMap+0xe>
     a14:	08 95       	ret

00000a16 <led_usbTask>:
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	1f 92       	push	r1
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
     a20:	e2 df       	rcall	.-60     	; 0x9e6 <led_getMap>
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	7e dc       	rcall	.-1796   	; 0x326 <udi_hid_led_send_report_in>
     a2a:	0f 90       	pop	r0
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <testIndicator>:
}

void testIndicator(void) { // blink status LED when in test mode
    sof_ms++;
     a32:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <sof_ms>
     a36:	90 91 c1 21 	lds	r25, 0x21C1	; 0x8021c1 <sof_ms+0x1>
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <sof_ms>
     a40:	90 93 c1 21 	sts	0x21C1, r25	; 0x8021c1 <sof_ms+0x1>

    if ((PORTB.IN & PIN4_bm) == 0) {
     a44:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     a48:	84 fd       	sbrc	r24, 4
     a4a:	0f c0       	rjmp	.+30     	; 0xa6a <testIndicator+0x38>
        if (sof_ms >= 500) {
     a4c:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <sof_ms>
     a50:	90 91 c1 21 	lds	r25, 0x21C1	; 0x8021c1 <sof_ms+0x1>
     a54:	84 3f       	cpi	r24, 0xF4	; 244
     a56:	91 40       	sbci	r25, 0x01	; 1
     a58:	78 f0       	brcs	.+30     	; 0xa78 <testIndicator+0x46>
void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     a5a:	80 e4       	ldi	r24, 0x40	; 64
     a5c:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>
    sof_ms++;

    if ((PORTB.IN & PIN4_bm) == 0) {
        if (sof_ms >= 500) {
            led_statusToggle();
            sof_ms = 0;
     a60:	10 92 c0 21 	sts	0x21C0, r1	; 0x8021c0 <sof_ms>
     a64:	10 92 c1 21 	sts	0x21C1, r1	; 0x8021c1 <sof_ms+0x1>
     a68:	08 95       	ret

/* ---------------------------------------------------------------------- */
/* ----------------------------- Status LED ----------------------------- */
/* ---------------------------------------------------------------------- */
void led_statusOn(void) { // status LED on
    STATUS_LED_PORT.OUTCLR = LEDS_PIN;
     a6a:	80 e4       	ldi	r24, 0x40	; 64
     a6c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
            led_statusToggle();
            sof_ms = 0;
        }
    } else {
        led_statusOn();
        sof_ms = 0;
     a70:	10 92 c0 21 	sts	0x21C0, r1	; 0x8021c0 <sof_ms>
     a74:	10 92 c1 21 	sts	0x21C1, r1	; 0x8021c1 <sof_ms+0x1>
     a78:	08 95       	ret

00000a7a <startupSequence>:
            (keypad_getState()   == KEYPAD_PRESSED) ||
            (jstk_readMask()     != 0);
}

void startupSequence(uint8_t sequence) // startup LED animation
{
     a7a:	6f 92       	push	r6
     a7c:	7f 92       	push	r7
     a7e:	8f 92       	push	r8
     a80:	9f 92       	push	r9
     a82:	af 92       	push	r10
     a84:	bf 92       	push	r11
     a86:	cf 92       	push	r12
     a88:	df 92       	push	r13
     a8a:	ef 92       	push	r14
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	28 97       	sbiw	r28, 0x08	; 8
     a9c:	cd bf       	out	0x3d, r28	; 61
     a9e:	de bf       	out	0x3e, r29	; 62
    const uint8_t seq[8] = {
     aa0:	98 e0       	ldi	r25, 0x08	; 8
     aa2:	e0 e7       	ldi	r30, 0x70	; 112
     aa4:	f1 e2       	ldi	r31, 0x21	; 33
     aa6:	de 01       	movw	r26, r28
     aa8:	11 96       	adiw	r26, 0x01	; 1
     aaa:	01 90       	ld	r0, Z+
     aac:	0d 92       	st	X+, r0
     aae:	9a 95       	dec	r25
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <startupSequence+0x30>
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
     ab2:	83 30       	cpi	r24, 0x03	; 3
     ab4:	09 f4       	brne	.+2      	; 0xab8 <startupSequence+0x3e>
     ab6:	0c c1       	rjmp	.+536    	; 0xcd0 <startupSequence+0x256>
     ab8:	38 f4       	brcc	.+14     	; 0xac8 <startupSequence+0x4e>
     aba:	81 30       	cpi	r24, 0x01	; 1
     abc:	09 f4       	brne	.+2      	; 0xac0 <startupSequence+0x46>
     abe:	42 c0       	rjmp	.+132    	; 0xb44 <startupSequence+0xca>
     ac0:	82 30       	cpi	r24, 0x02	; 2
     ac2:	09 f4       	brne	.+2      	; 0xac6 <startupSequence+0x4c>
     ac4:	a5 c0       	rjmp	.+330    	; 0xc10 <startupSequence+0x196>
     ac6:	31 c2       	rjmp	.+1122   	; 0xf2a <startupSequence+0x4b0>
     ac8:	84 30       	cpi	r24, 0x04	; 4
     aca:	09 f4       	brne	.+2      	; 0xace <startupSequence+0x54>
     acc:	61 c1       	rjmp	.+706    	; 0xd90 <startupSequence+0x316>
     ace:	85 30       	cpi	r24, 0x05	; 5
     ad0:	09 f4       	brne	.+2      	; 0xad4 <startupSequence+0x5a>
     ad2:	ba c1       	rjmp	.+884    	; 0xe48 <startupSequence+0x3ce>
     ad4:	2a c2       	rjmp	.+1108   	; 0xf2a <startupSequence+0x4b0>
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     ad6:	f8 01       	movw	r30, r16
     ad8:	f1 90       	ld	r15, Z+
     ada:	8f 01       	movw	r16, r30
     adc:	8f 2d       	mov	r24, r15
     ade:	44 df       	rcall	.-376    	; 0x968 <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae0:	ff e0       	ldi	r31, 0x0F	; 15
     ae2:	28 e9       	ldi	r18, 0x98	; 152
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	f1 50       	subi	r31, 0x01	; 1
     ae8:	20 40       	sbci	r18, 0x00	; 0
     aea:	80 40       	sbci	r24, 0x00	; 0
     aec:	e1 f7       	brne	.-8      	; 0xae6 <startupSequence+0x6c>
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <startupSequence+0x76>
     af0:	00 00       	nop
                    _delay_ms(850);
                    led_off(seq[i]);
     af2:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     af4:	3e df       	rcall	.-388    	; 0x972 <led_off>
     af6:	0f df       	rcall	.-482    	; 0x916 <userActivity>
     af8:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <user_active.5526>

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
     afc:	a0 16       	cp	r10, r16
     afe:	b1 06       	cpc	r11, r17
     b00:	09 f4       	brne	.+2      	; 0xb04 <startupSequence+0x8a>
     b02:	b9 c1       	rjmp	.+882    	; 0xe76 <startupSequence+0x3fc>
     b04:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     b08:	88 23       	and	r24, r24
     b0a:	29 f3       	breq	.-54     	; 0xad6 <startupSequence+0x5c>
     b0c:	b4 c1       	rjmp	.+872    	; 0xe76 <startupSequence+0x3fc>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     b0e:	f8 01       	movw	r30, r16
     b10:	f2 90       	ld	r15, -Z
     b12:	8f 01       	movw	r16, r30
     b14:	8f 2d       	mov	r24, r15
     b16:	28 df       	rcall	.-432    	; 0x968 <led_on>
     b18:	ff e0       	ldi	r31, 0x0F	; 15
     b1a:	28 e9       	ldi	r18, 0x98	; 152
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	f1 50       	subi	r31, 0x01	; 1
     b20:	20 40       	sbci	r18, 0x00	; 0
     b22:	80 40       	sbci	r24, 0x00	; 0
     b24:	e1 f7       	brne	.-8      	; 0xb1e <startupSequence+0xa4>
                    _delay_ms(850);
                    led_off(seq[i]);
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <startupSequence+0xae>
     b28:	00 00       	nop
     b2a:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     b2c:	22 df       	rcall	.-444    	; 0x972 <led_off>
     b2e:	f3 de       	rcall	.-538    	; 0x916 <userActivity>
     b30:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <user_active.5526>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     b34:	0c 15       	cp	r16, r12
     b36:	1d 05       	cpc	r17, r13
     b38:	61 f0       	breq	.+24     	; 0xb52 <startupSequence+0xd8>
     b3a:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     b3e:	88 23       	and	r24, r24
     b40:	31 f3       	breq	.-52     	; 0xb0e <startupSequence+0x94>
     b42:	07 c0       	rjmp	.+14     	; 0xb52 <startupSequence+0xd8>
     b44:	5e 01       	movw	r10, r28
     b46:	99 e0       	ldi	r25, 0x09	; 9
     b48:	a9 0e       	add	r10, r25
     b4a:	b1 1c       	adc	r11, r1
     b4c:	fe 01       	movw	r30, r28
     b4e:	31 96       	adiw	r30, 0x01	; 1
     b50:	6f 01       	movw	r12, r30
    static volatile bool user_active = false;

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
     b52:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     b56:	81 11       	cpse	r24, r1
     b58:	06 c0       	rjmp	.+12     	; 0xb66 <startupSequence+0xec>
                for (int i = 0; i < 8 && !user_active; i++) {
     b5a:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     b5e:	88 23       	and	r24, r24
     b60:	09 f4       	brne	.+2      	; 0xb64 <startupSequence+0xea>
     b62:	ce c1       	rjmp	.+924    	; 0xf00 <startupSequence+0x486>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
            }
            led_allOff();
     b64:	88 c1       	rjmp	.+784    	; 0xe76 <startupSequence+0x3fc>
            break;
     b66:	fa de       	rcall	.-524    	; 0x95c <led_allOff>
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     b68:	e0 c1       	rjmp	.+960    	; 0xf2a <startupSequence+0x4b0>
     b6a:	f8 01       	movw	r30, r16
     b6c:	72 90       	ld	r7, -Z
     b6e:	8f 01       	movw	r16, r30
     b70:	87 2d       	mov	r24, r7
                    led_on(seq[right]);
     b72:	fa de       	rcall	.-524    	; 0x968 <led_on>
     b74:	f6 01       	movw	r30, r12
     b76:	f1 90       	ld	r15, Z+
     b78:	6f 01       	movw	r12, r30
     b7a:	8f 2d       	mov	r24, r15
     b7c:	f5 de       	rcall	.-534    	; 0x968 <led_on>
     b7e:	ff e1       	ldi	r31, 0x1F	; 31
     b80:	2f eb       	ldi	r18, 0xBF	; 191
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	f1 50       	subi	r31, 0x01	; 1
     b86:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     b88:	80 40       	sbci	r24, 0x00	; 0
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <startupSequence+0x10a>
                    led_off(seq[right]);
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <startupSequence+0x114>
     b8e:	00 00       	nop
     b90:	87 2d       	mov	r24, r7

                    keypad_poll();
     b92:	ef de       	rcall	.-546    	; 0x972 <led_off>
     b94:	8f 2d       	mov	r24, r15
                    if (keypad_getState() == KEYPAD_PRESSED)
     b96:	ed de       	rcall	.-550    	; 0x972 <led_off>
     b98:	80 dd       	rcall	.-1280   	; 0x69a <keypad_poll>
     b9a:	fb dd       	rcall	.-1034   	; 0x792 <keypad_getState>
     b9c:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     b9e:	11 f4       	brne	.+4      	; 0xba4 <startupSequence+0x12a>
     ba0:	e0 92 b6 21 	sts	0x21B6, r14	; 0x8021b6 <user_active.5526>
                    if (jstk_readMask() != 0)
     ba4:	d8 dc       	rcall	.-1616   	; 0x556 <jstk_readMask>
     ba6:	81 11       	cpse	r24, r1
                        user_active = true;
     ba8:	e0 92 b6 21 	sts	0x21B6, r14	; 0x8021b6 <user_active.5526>
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     bac:	08 15       	cp	r16, r8
     bae:	19 05       	cpc	r17, r9
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <startupSequence+0x13a>
     bb2:	66 c1       	rjmp	.+716    	; 0xe80 <startupSequence+0x406>
     bb4:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     bb8:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     bba:	b9 f2       	breq	.-82     	; 0xb6a <startupSequence+0xf0>
     bbc:	61 c1       	rjmp	.+706    	; 0xe80 <startupSequence+0x406>
     bbe:	f3 01       	movw	r30, r6
     bc0:	d1 90       	ld	r13, Z+
     bc2:	3f 01       	movw	r6, r30
     bc4:	8d 2d       	mov	r24, r13
                    led_on(seq[right]);
     bc6:	d0 de       	rcall	.-608    	; 0x968 <led_on>
     bc8:	f8 01       	movw	r30, r16
     bca:	f2 90       	ld	r15, -Z
     bcc:	8f 01       	movw	r16, r30
     bce:	8f 2d       	mov	r24, r15
     bd0:	cb de       	rcall	.-618    	; 0x968 <led_on>
     bd2:	ff e1       	ldi	r31, 0x1F	; 31
     bd4:	2f eb       	ldi	r18, 0xBF	; 191
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	f1 50       	subi	r31, 0x01	; 1
     bda:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     bdc:	80 40       	sbci	r24, 0x00	; 0
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <startupSequence+0x15e>
     be0:	00 c0       	rjmp	.+0      	; 0xbe2 <startupSequence+0x168>
                    led_off(seq[right]);
     be2:	00 00       	nop
     be4:	8d 2d       	mov	r24, r13
     be6:	c5 de       	rcall	.-630    	; 0x972 <led_off>

                    keypad_poll();
     be8:	8f 2d       	mov	r24, r15
     bea:	c3 de       	rcall	.-634    	; 0x972 <led_off>
                    if (keypad_getState() == KEYPAD_PRESSED)
     bec:	56 dd       	rcall	.-1364   	; 0x69a <keypad_poll>
     bee:	d1 dd       	rcall	.-1118   	; 0x792 <keypad_getState>
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	11 f4       	brne	.+4      	; 0xbf8 <startupSequence+0x17e>
                        user_active = true;
     bf4:	e0 92 b6 21 	sts	0x21B6, r14	; 0x8021b6 <user_active.5526>
                    if (jstk_readMask() != 0)
     bf8:	ae dc       	rcall	.-1700   	; 0x556 <jstk_readMask>
     bfa:	81 11       	cpse	r24, r1
     bfc:	e0 92 b6 21 	sts	0x21B6, r14	; 0x8021b6 <user_active.5526>
                        user_active = true;
     c00:	0a 15       	cp	r16, r10
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     c02:	1b 05       	cpc	r17, r11
     c04:	71 f0       	breq	.+28     	; 0xc22 <startupSequence+0x1a8>
     c06:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     c0a:	88 23       	and	r24, r24
     c0c:	c1 f2       	breq	.-80     	; 0xbbe <startupSequence+0x144>
     c0e:	09 c0       	rjmp	.+18     	; 0xc22 <startupSequence+0x1a8>
     c10:	fe 01       	movw	r30, r28
     c12:	31 96       	adiw	r30, 0x01	; 1
     c14:	4f 01       	movw	r8, r30

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     c16:	ee 24       	eor	r14, r14
     c18:	e3 94       	inc	r14
     c1a:	5e 01       	movw	r10, r28
     c1c:	f5 e0       	ldi	r31, 0x05	; 5
     c1e:	af 0e       	add	r10, r31
            }
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
     c20:	b1 1c       	adc	r11, r1
     c22:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
                for (int i = 0; i < 4 && !user_active; i++) {
     c26:	81 11       	cpse	r24, r1
     c28:	0a c0       	rjmp	.+20     	; 0xc3e <startupSequence+0x1c4>
     c2a:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     c2e:	81 11       	cpse	r24, r1
     c30:	27 c1       	rjmp	.+590    	; 0xe80 <startupSequence+0x406>
     c32:	6e 01       	movw	r12, r28
     c34:	25 e0       	ldi	r18, 0x05	; 5
     c36:	c2 0e       	add	r12, r18
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     c38:	d1 1c       	adc	r13, r1
     c3a:	86 01       	movw	r16, r12
            break;
     c3c:	96 cf       	rjmp	.-212    	; 0xb6a <startupSequence+0xf0>
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     c3e:	8e de       	rcall	.-740    	; 0x95c <led_allOff>
     c40:	74 c1       	rjmp	.+744    	; 0xf2a <startupSequence+0x4b0>
     c42:	f8 01       	movw	r30, r16
     c44:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     c46:	8f 01       	movw	r16, r30
     c48:	8f de       	rcall	.-738    	; 0x968 <led_on>
     c4a:	f7 01       	movw	r30, r14
     c4c:	81 91       	ld	r24, Z+
     c4e:	7f 01       	movw	r14, r30
     c50:	8b de       	rcall	.-746    	; 0x968 <led_on>
     c52:	ff e2       	ldi	r31, 0x2F	; 47
     c54:	27 e5       	ldi	r18, 0x57	; 87
     c56:	85 e0       	ldi	r24, 0x05	; 5
     c58:	f1 50       	subi	r31, 0x01	; 1
     c5a:	20 40       	sbci	r18, 0x00	; 0
     c5c:	80 40       	sbci	r24, 0x00	; 0
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <startupSequence+0x1de>
                    _delay_ms(1750);

                    keypad_poll();
     c60:	00 c0       	rjmp	.+0      	; 0xc62 <startupSequence+0x1e8>
     c62:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     c64:	1a dd       	rcall	.-1484   	; 0x69a <keypad_poll>
     c66:	95 dd       	rcall	.-1238   	; 0x792 <keypad_getState>
     c68:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     c6a:	11 f4       	brne	.+4      	; 0xc70 <startupSequence+0x1f6>
     c6c:	90 92 b6 21 	sts	0x21B6, r9	; 0x8021b6 <user_active.5526>
                    if (jstk_readMask() != 0)
     c70:	72 dc       	rcall	.-1820   	; 0x556 <jstk_readMask>
     c72:	81 11       	cpse	r24, r1
                        user_active = true;
     c74:	90 92 b6 21 	sts	0x21B6, r9	; 0x8021b6 <user_active.5526>
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     c78:	a0 16       	cp	r10, r16
     c7a:	b1 06       	cpc	r11, r17
     c7c:	09 f4       	brne	.+2      	; 0xc80 <startupSequence+0x206>
     c7e:	0b c1       	rjmp	.+534    	; 0xe96 <startupSequence+0x41c>
     c80:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     c84:	88 23       	and	r24, r24
     c86:	e9 f2       	breq	.-70     	; 0xc42 <startupSequence+0x1c8>
     c88:	06 c1       	rjmp	.+524    	; 0xe96 <startupSequence+0x41c>
     c8a:	f7 01       	movw	r30, r14
     c8c:	81 91       	ld	r24, Z+
                    led_off(seq[right]);
     c8e:	7f 01       	movw	r14, r30
     c90:	70 de       	rcall	.-800    	; 0x972 <led_off>
     c92:	f8 01       	movw	r30, r16
     c94:	82 91       	ld	r24, -Z
     c96:	8f 01       	movw	r16, r30
     c98:	6c de       	rcall	.-808    	; 0x972 <led_off>
     c9a:	ff e2       	ldi	r31, 0x2F	; 47
     c9c:	27 e5       	ldi	r18, 0x57	; 87
     c9e:	85 e0       	ldi	r24, 0x05	; 5
     ca0:	f1 50       	subi	r31, 0x01	; 1
     ca2:	20 40       	sbci	r18, 0x00	; 0
     ca4:	80 40       	sbci	r24, 0x00	; 0
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <startupSequence+0x226>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <startupSequence+0x230>
                    _delay_ms(1750);

                    keypad_poll();
     caa:	00 00       	nop
     cac:	f6 dc       	rcall	.-1556   	; 0x69a <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     cae:	71 dd       	rcall	.-1310   	; 0x792 <keypad_getState>
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	11 f4       	brne	.+4      	; 0xcb8 <startupSequence+0x23e>
     cb4:	90 92 b6 21 	sts	0x21B6, r9	; 0x8021b6 <user_active.5526>
                        user_active = true;
     cb8:	4e dc       	rcall	.-1892   	; 0x556 <jstk_readMask>
                    if (jstk_readMask() != 0)
     cba:	81 11       	cpse	r24, r1
     cbc:	90 92 b6 21 	sts	0x21B6, r9	; 0x8021b6 <user_active.5526>
                        user_active = true;
     cc0:	c0 16       	cp	r12, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     cc2:	d1 06       	cpc	r13, r17
     cc4:	71 f0       	breq	.+28     	; 0xce2 <startupSequence+0x268>
     cc6:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     cca:	88 23       	and	r24, r24
     ccc:	f1 f2       	breq	.-68     	; 0xc8a <startupSequence+0x210>
     cce:	09 c0       	rjmp	.+18     	; 0xce2 <startupSequence+0x268>
     cd0:	fe 01       	movw	r30, r28
     cd2:	31 96       	adiw	r30, 0x01	; 1

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     cd4:	5f 01       	movw	r10, r30
     cd6:	99 24       	eor	r9, r9
     cd8:	93 94       	inc	r9
     cda:	6e 01       	movw	r12, r28
     cdc:	f5 e0       	ldi	r31, 0x05	; 5
     cde:	cf 0e       	add	r12, r31
            }
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
     ce0:	d1 1c       	adc	r13, r1
     ce2:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
                for (int i = 0; i < 4 && !user_active; i++) {
     ce6:	81 11       	cpse	r24, r1
     ce8:	0a c0       	rjmp	.+20     	; 0xcfe <startupSequence+0x284>
     cea:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     cee:	81 11       	cpse	r24, r1
     cf0:	d2 c0       	rjmp	.+420    	; 0xe96 <startupSequence+0x41c>
     cf2:	7e 01       	movw	r14, r28
     cf4:	25 e0       	ldi	r18, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     cf6:	e2 0e       	add	r14, r18
     cf8:	f1 1c       	adc	r15, r1
            break;
     cfa:	87 01       	movw	r16, r14
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     cfc:	a2 cf       	rjmp	.-188    	; 0xc42 <startupSequence+0x1c8>
     cfe:	2e de       	rcall	.-932    	; 0x95c <led_allOff>
     d00:	14 c1       	rjmp	.+552    	; 0xf2a <startupSequence+0x4b0>
     d02:	f8 01       	movw	r30, r16
     d04:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     d06:	8f 01       	movw	r16, r30
     d08:	2f de       	rcall	.-930    	; 0x968 <led_on>
     d0a:	f7 01       	movw	r30, r14
     d0c:	81 91       	ld	r24, Z+
     d0e:	7f 01       	movw	r14, r30
     d10:	2b de       	rcall	.-938    	; 0x968 <led_on>
     d12:	ff e2       	ldi	r31, 0x2F	; 47
     d14:	27 e5       	ldi	r18, 0x57	; 87
     d16:	85 e0       	ldi	r24, 0x05	; 5
     d18:	f1 50       	subi	r31, 0x01	; 1
     d1a:	20 40       	sbci	r18, 0x00	; 0
     d1c:	80 40       	sbci	r24, 0x00	; 0
                    _delay_ms(1750);

                    keypad_poll();
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <startupSequence+0x29e>
                    if (keypad_getState() == KEYPAD_PRESSED)
     d20:	00 c0       	rjmp	.+0      	; 0xd22 <startupSequence+0x2a8>
     d22:	00 00       	nop
     d24:	ba dc       	rcall	.-1676   	; 0x69a <keypad_poll>
                        user_active = true;
     d26:	35 dd       	rcall	.-1430   	; 0x792 <keypad_getState>
                    if (jstk_readMask() != 0)
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	11 f4       	brne	.+4      	; 0xd30 <startupSequence+0x2b6>
     d2c:	b0 92 b6 21 	sts	0x21B6, r11	; 0x8021b6 <user_active.5526>
                        user_active = true;
     d30:	12 dc       	rcall	.-2012   	; 0x556 <jstk_readMask>
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     d32:	81 11       	cpse	r24, r1
     d34:	b0 92 b6 21 	sts	0x21B6, r11	; 0x8021b6 <user_active.5526>
     d38:	0c 15       	cp	r16, r12
     d3a:	1d 05       	cpc	r17, r13
     d3c:	09 f4       	brne	.+2      	; 0xd40 <startupSequence+0x2c6>
     d3e:	b6 c0       	rjmp	.+364    	; 0xeac <startupSequence+0x432>
     d40:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     d44:	88 23       	and	r24, r24
     d46:	e9 f2       	breq	.-70     	; 0xd02 <startupSequence+0x288>
     d48:	b1 c0       	rjmp	.+354    	; 0xeac <startupSequence+0x432>
     d4a:	f8 01       	movw	r30, r16
     d4c:	82 91       	ld	r24, -Z
                    led_off(seq[right]);
     d4e:	8f 01       	movw	r16, r30
     d50:	10 de       	rcall	.-992    	; 0x972 <led_off>
     d52:	f7 01       	movw	r30, r14
     d54:	81 91       	ld	r24, Z+
     d56:	7f 01       	movw	r14, r30
     d58:	0c de       	rcall	.-1000   	; 0x972 <led_off>
     d5a:	ff e2       	ldi	r31, 0x2F	; 47
     d5c:	27 e5       	ldi	r18, 0x57	; 87
     d5e:	85 e0       	ldi	r24, 0x05	; 5
     d60:	f1 50       	subi	r31, 0x01	; 1
     d62:	20 40       	sbci	r18, 0x00	; 0
     d64:	80 40       	sbci	r24, 0x00	; 0
     d66:	e1 f7       	brne	.-8      	; 0xd60 <startupSequence+0x2e6>
                    _delay_ms(1750);

                    keypad_poll();
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <startupSequence+0x2f0>
     d6a:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     d6c:	96 dc       	rcall	.-1748   	; 0x69a <keypad_poll>
     d6e:	11 dd       	rcall	.-1502   	; 0x792 <keypad_getState>
     d70:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     d72:	11 f4       	brne	.+4      	; 0xd78 <startupSequence+0x2fe>
                    if (jstk_readMask() != 0)
     d74:	b0 92 b6 21 	sts	0x21B6, r11	; 0x8021b6 <user_active.5526>
     d78:	ee db       	rcall	.-2084   	; 0x556 <jstk_readMask>
                        user_active = true;
     d7a:	81 11       	cpse	r24, r1
     d7c:	b0 92 b6 21 	sts	0x21B6, r11	; 0x8021b6 <user_active.5526>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     d80:	c0 16       	cp	r12, r16
     d82:	d1 06       	cpc	r13, r17
     d84:	51 f0       	breq	.+20     	; 0xd9a <startupSequence+0x320>
     d86:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     d8a:	88 23       	and	r24, r24
     d8c:	f1 f2       	breq	.-68     	; 0xd4a <startupSequence+0x2d0>
     d8e:	05 c0       	rjmp	.+10     	; 0xd9a <startupSequence+0x320>

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     d90:	fe 01       	movw	r30, r28
     d92:	31 96       	adiw	r30, 0x01	; 1
            }
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
     d94:	6f 01       	movw	r12, r30
     d96:	bb 24       	eor	r11, r11
     d98:	b3 94       	inc	r11
     d9a:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
                for (int i = 0; i < 4 && !user_active; i++) {
     d9e:	81 11       	cpse	r24, r1
     da0:	0a c0       	rjmp	.+20     	; 0xdb6 <startupSequence+0x33c>
     da2:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     da6:	81 11       	cpse	r24, r1
     da8:	81 c0       	rjmp	.+258    	; 0xeac <startupSequence+0x432>
     daa:	7e 01       	movw	r14, r28
     dac:	f5 e0       	ldi	r31, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     dae:	ef 0e       	add	r14, r31
     db0:	f1 1c       	adc	r15, r1
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     db2:	87 01       	movw	r16, r14
     db4:	a6 cf       	rjmp	.-180    	; 0xd02 <startupSequence+0x288>
     db6:	d2 dd       	rcall	.-1116   	; 0x95c <led_allOff>
     db8:	b8 c0       	rjmp	.+368    	; 0xf2a <startupSequence+0x4b0>
     dba:	f7 01       	movw	r30, r14
                    led_on(seq[right]);
     dbc:	81 91       	ld	r24, Z+
     dbe:	7f 01       	movw	r14, r30
     dc0:	d3 dd       	rcall	.-1114   	; 0x968 <led_on>
     dc2:	f8 01       	movw	r30, r16
     dc4:	82 91       	ld	r24, -Z
     dc6:	8f 01       	movw	r16, r30
     dc8:	cf dd       	rcall	.-1122   	; 0x968 <led_on>
     dca:	ff e2       	ldi	r31, 0x2F	; 47
     dcc:	27 e5       	ldi	r18, 0x57	; 87
     dce:	85 e0       	ldi	r24, 0x05	; 5
     dd0:	f1 50       	subi	r31, 0x01	; 1
                    _delay_ms(1750);

                    keypad_poll();
     dd2:	20 40       	sbci	r18, 0x00	; 0
     dd4:	80 40       	sbci	r24, 0x00	; 0
                    if (keypad_getState() == KEYPAD_PRESSED)
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <startupSequence+0x356>
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <startupSequence+0x360>
     dda:	00 00       	nop
     ddc:	5e dc       	rcall	.-1860   	; 0x69a <keypad_poll>
                        user_active = true;
     dde:	d9 dc       	rcall	.-1614   	; 0x792 <keypad_getState>
     de0:	81 30       	cpi	r24, 0x01	; 1
                    if (jstk_readMask() != 0)
     de2:	11 f4       	brne	.+4      	; 0xde8 <startupSequence+0x36e>
     de4:	b0 92 b6 21 	sts	0x21B6, r11	; 0x8021b6 <user_active.5526>
                        user_active = true;
     de8:	b6 db       	rcall	.-2196   	; 0x556 <jstk_readMask>
     dea:	81 11       	cpse	r24, r1
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
     dec:	b0 92 b6 21 	sts	0x21B6, r11	; 0x8021b6 <user_active.5526>
     df0:	0c 15       	cp	r16, r12
     df2:	1d 05       	cpc	r17, r13
     df4:	09 f4       	brne	.+2      	; 0xdf8 <startupSequence+0x37e>
     df6:	64 c0       	rjmp	.+200    	; 0xec0 <startupSequence+0x446>
     df8:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     dfc:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     dfe:	e9 f2       	breq	.-70     	; 0xdba <startupSequence+0x340>
     e00:	5f c0       	rjmp	.+190    	; 0xec0 <startupSequence+0x446>
     e02:	f7 01       	movw	r30, r14
     e04:	81 91       	ld	r24, Z+
     e06:	7f 01       	movw	r14, r30
                    led_off(seq[right]);
     e08:	b4 dd       	rcall	.-1176   	; 0x972 <led_off>
     e0a:	f8 01       	movw	r30, r16
     e0c:	82 91       	ld	r24, -Z
     e0e:	8f 01       	movw	r16, r30
     e10:	b0 dd       	rcall	.-1184   	; 0x972 <led_off>
     e12:	ff e2       	ldi	r31, 0x2F	; 47
     e14:	27 e5       	ldi	r18, 0x57	; 87
     e16:	85 e0       	ldi	r24, 0x05	; 5
     e18:	f1 50       	subi	r31, 0x01	; 1
     e1a:	20 40       	sbci	r18, 0x00	; 0
     e1c:	80 40       	sbci	r24, 0x00	; 0
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <startupSequence+0x39e>
     e20:	00 c0       	rjmp	.+0      	; 0xe22 <startupSequence+0x3a8>
                    _delay_ms(1750);

                    keypad_poll();
     e22:	00 00       	nop
     e24:	3a dc       	rcall	.-1932   	; 0x69a <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     e26:	b5 dc       	rcall	.-1686   	; 0x792 <keypad_getState>
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	11 f4       	brne	.+4      	; 0xe30 <startupSequence+0x3b6>
     e2c:	b0 92 b6 21 	sts	0x21B6, r11	; 0x8021b6 <user_active.5526>
                        user_active = true;
     e30:	92 db       	rcall	.-2268   	; 0x556 <jstk_readMask>
                    if (jstk_readMask() != 0)
     e32:	81 11       	cpse	r24, r1
     e34:	b0 92 b6 21 	sts	0x21B6, r11	; 0x8021b6 <user_active.5526>
                        user_active = true;
     e38:	0c 15       	cp	r16, r12
     e3a:	1d 05       	cpc	r17, r13
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e3c:	59 f0       	breq	.+22     	; 0xe54 <startupSequence+0x3da>
     e3e:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     e42:	88 23       	and	r24, r24
     e44:	f1 f2       	breq	.-68     	; 0xe02 <startupSequence+0x388>
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <startupSequence+0x3da>
     e48:	6e 01       	movw	r12, r28
     e4a:	95 e0       	ldi	r25, 0x05	; 5
     e4c:	c9 0e       	add	r12, r25
     e4e:	d1 1c       	adc	r13, r1
     e50:	bb 24       	eor	r11, r11
     e52:	b3 94       	inc	r11

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     e54:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
            }
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
     e58:	81 11       	cpse	r24, r1
     e5a:	0b c0       	rjmp	.+22     	; 0xe72 <startupSequence+0x3f8>
     e5c:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
                for (int i = 3; i >= 0 && !user_active; i--) {
     e60:	81 11       	cpse	r24, r1
     e62:	2e c0       	rjmp	.+92     	; 0xec0 <startupSequence+0x446>
     e64:	fe 01       	movw	r30, r28
     e66:	31 96       	adiw	r30, 0x01	; 1
     e68:	7f 01       	movw	r14, r30
     e6a:	8e 01       	movw	r16, r28
     e6c:	07 5f       	subi	r16, 0xF7	; 247
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	a4 cf       	rjmp	.-184    	; 0xdba <startupSequence+0x340>
     e72:	74 dd       	rcall	.-1304   	; 0x95c <led_allOff>
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     e74:	5a c0       	rjmp	.+180    	; 0xf2a <startupSequence+0x4b0>
     e76:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     e7a:	88 23       	and	r24, r24
     e7c:	61 f1       	breq	.+88     	; 0xed6 <startupSequence+0x45c>
     e7e:	69 ce       	rjmp	.-814    	; 0xb52 <startupSequence+0xd8>
     e80:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e84:	81 11       	cpse	r24, r1
     e86:	cd ce       	rjmp	.-614    	; 0xc22 <startupSequence+0x1a8>
     e88:	ce 01       	movw	r24, r28
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	3c 01       	movw	r6, r24
     e8e:	8e 01       	movw	r16, r28
     e90:	07 5f       	subi	r16, 0xF7	; 247
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	94 ce       	rjmp	.-728    	; 0xbbe <startupSequence+0x144>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e96:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     e9a:	81 11       	cpse	r24, r1
     e9c:	22 cf       	rjmp	.-444    	; 0xce2 <startupSequence+0x268>
     e9e:	fe 01       	movw	r30, r28
     ea0:	31 96       	adiw	r30, 0x01	; 1
     ea2:	7f 01       	movw	r14, r30
     ea4:	8e 01       	movw	r16, r28
     ea6:	07 5f       	subi	r16, 0xF7	; 247
     ea8:	1f 4f       	sbci	r17, 0xFF	; 255
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     eaa:	ef ce       	rjmp	.-546    	; 0xc8a <startupSequence+0x210>
     eac:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     eb0:	81 11       	cpse	r24, r1
     eb2:	73 cf       	rjmp	.-282    	; 0xd9a <startupSequence+0x320>
     eb4:	7e 01       	movw	r14, r28
     eb6:	f5 e0       	ldi	r31, 0x05	; 5
     eb8:	ef 0e       	add	r14, r31
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     eba:	f1 1c       	adc	r15, r1
     ebc:	87 01       	movw	r16, r14
     ebe:	45 cf       	rjmp	.-374    	; 0xd4a <startupSequence+0x2d0>
     ec0:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <user_active.5526>
     ec4:	81 11       	cpse	r24, r1
     ec6:	c6 cf       	rjmp	.-116    	; 0xe54 <startupSequence+0x3da>
     ec8:	ce 01       	movw	r24, r28
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	7c 01       	movw	r14, r24
     ece:	8e 01       	movw	r16, r28
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     ed0:	07 5f       	subi	r16, 0xF7	; 247
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	96 cf       	rjmp	.-212    	; 0xe02 <startupSequence+0x388>
     ed6:	18 85       	ldd	r17, Y+8	; 0x08
     ed8:	81 2f       	mov	r24, r17
     eda:	46 dd       	rcall	.-1396   	; 0x968 <led_on>
     edc:	9f e0       	ldi	r25, 0x0F	; 15
     ede:	e8 e9       	ldi	r30, 0x98	; 152
     ee0:	f2 e0       	ldi	r31, 0x02	; 2
     ee2:	91 50       	subi	r25, 0x01	; 1
     ee4:	e0 40       	sbci	r30, 0x00	; 0
     ee6:	f0 40       	sbci	r31, 0x00	; 0
     ee8:	e1 f7       	brne	.-8      	; 0xee2 <startupSequence+0x468>
                    _delay_ms(850);
                    led_off(seq[i]);
     eea:	00 c0       	rjmp	.+0      	; 0xeec <startupSequence+0x472>
     eec:	00 00       	nop
     eee:	81 2f       	mov	r24, r17

                    user_active = userActivity();
     ef0:	40 dd       	rcall	.-1408   	; 0x972 <led_off>
     ef2:	11 dd       	rcall	.-1502   	; 0x916 <userActivity>
     ef4:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <user_active.5526>
     ef8:	8e 01       	movw	r16, r28
     efa:	08 5f       	subi	r16, 0xF8	; 248
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	1d ce       	rjmp	.-966    	; 0xb3a <startupSequence+0xc0>
    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     f00:	19 81       	ldd	r17, Y+1	; 0x01
     f02:	81 2f       	mov	r24, r17
     f04:	31 dd       	rcall	.-1438   	; 0x968 <led_on>
     f06:	2f e0       	ldi	r18, 0x0F	; 15
     f08:	88 e9       	ldi	r24, 0x98	; 152
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	21 50       	subi	r18, 0x01	; 1
     f0e:	80 40       	sbci	r24, 0x00	; 0
     f10:	90 40       	sbci	r25, 0x00	; 0
     f12:	e1 f7       	brne	.-8      	; 0xf0c <startupSequence+0x492>
     f14:	00 c0       	rjmp	.+0      	; 0xf16 <startupSequence+0x49c>
     f16:	00 00       	nop
     f18:	81 2f       	mov	r24, r17
                    _delay_ms(850);
                    led_off(seq[i]);
     f1a:	2b dd       	rcall	.-1450   	; 0x972 <led_off>
     f1c:	fc dc       	rcall	.-1544   	; 0x916 <userActivity>
     f1e:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <user_active.5526>

                    user_active = userActivity();
     f22:	8e 01       	movw	r16, r28
     f24:	0e 5f       	subi	r16, 0xFE	; 254
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
     f28:	ed cd       	rjmp	.-1062   	; 0xb04 <startupSequence+0x8a>
     f2a:	28 96       	adiw	r28, 0x08	; 8
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	de bf       	out	0x3e, r29	; 62
            led_allOff();
            break;
        default:
            break;
    }
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	df 90       	pop	r13
     f3e:	cf 90       	pop	r12
     f40:	bf 90       	pop	r11
     f42:	af 90       	pop	r10
     f44:	9f 90       	pop	r9
     f46:	8f 90       	pop	r8
     f48:	7f 90       	pop	r7
     f4a:	6f 90       	pop	r6
     f4c:	08 95       	ret

00000f4e <io_ui_process>:
#include "keypad.h"
#include "joystick.h"


void io_ui_process(void) {
	io_init();
     f4e:	1a ca       	rjmp	.-3020   	; 0x384 <io_init>
     f50:	08 95       	ret

00000f52 <startup_ui_process>:
}

void startup_ui_process(uint8_t sequence) {
	startupSequence(sequence);
     f52:	93 cd       	rjmp	.-1242   	; 0xa7a <startupSequence>
     f54:	08 95       	ret

00000f56 <jstk_ui_process>:
}

void jstk_ui_process(void) {
	joystick();
     f56:	55 cb       	rjmp	.-2390   	; 0x602 <joystick>
     f58:	08 95       	ret

00000f5a <kbd_ui_process>:
}

void kbd_ui_process(void) {
	keypad();
     f5a:	9b cc       	rjmp	.-1738   	; 0x892 <keypad>
     f5c:	08 95       	ret

00000f5e <ui_led_report>:
}

void ui_led_report(uint8_t const *mask) {
	led_setState(mask[0]);
     f5e:	fc 01       	movw	r30, r24
     f60:	80 81       	ld	r24, Z
     f62:	28 cd       	rjmp	.-1456   	; 0x9b4 <led_setState>
     f64:	08 95       	ret

00000f66 <led_ui_process>:
}

void led_ui_process(void) {
	led_usbTask();
     f66:	57 cd       	rjmp	.-1362   	; 0xa16 <led_usbTask>
     f68:	08 95       	ret

00000f6a <status_ui_process>:
}

void status_ui_process(void) {
	testIndicator();
     f6a:	63 cd       	rjmp	.-1338   	; 0xa32 <testIndicator>
     f6c:	08 95       	ret

00000f6e <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	27 97       	sbiw	r28, 0x07	; 7
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     f86:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     f8a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     f8e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     f92:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     f96:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     f9a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     f9e:	65 e0       	ldi	r22, 0x05	; 5
     fa0:	81 e4       	ldi	r24, 0x41	; 65
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	7a d6       	rcall	.+3316   	; 0x1c9a <ccp_write_io>
     fa6:	6c e1       	ldi	r22, 0x1C	; 28
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	6c d6       	rcall	.+3288   	; 0x1c86 <nvm_read_byte>
     fae:	8a 83       	std	Y+2, r24	; 0x02
     fb0:	6d e1       	ldi	r22, 0x1D	; 29
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	67 d6       	rcall	.+3278   	; 0x1c86 <nvm_read_byte>
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	21 f4       	brne	.+8      	; 0xfca <sysclk_init+0x5c>
     fc2:	80 e4       	ldi	r24, 0x40	; 64
     fc4:	93 e2       	ldi	r25, 0x23	; 35
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	8b 83       	std	Y+3, r24	; 0x03
     fd0:	9c 83       	std	Y+4, r25	; 0x04
     fd2:	e0 e6       	ldi	r30, 0x60	; 96
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	82 83       	std	Z+2, r24	; 0x02
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	83 83       	std	Z+3, r24	; 0x03
     fdc:	8f b7       	in	r24, 0x3f	; 63
     fde:	8e 83       	std	Y+6, r24	; 0x06
     fe0:	f8 94       	cli
     fe2:	9e 81       	ldd	r25, Y+6	; 0x06
     fe4:	e0 e5       	ldi	r30, 0x50	; 80
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	82 60       	ori	r24, 0x02	; 2
     fec:	80 83       	st	Z, r24
     fee:	9f bf       	out	0x3f, r25	; 63
     ff0:	81 81       	ldd	r24, Z+1	; 0x01
     ff2:	81 ff       	sbrs	r24, 1
     ff4:	fd cf       	rjmp	.-6      	; 0xff0 <sysclk_init+0x82>
     ff6:	8f b7       	in	r24, 0x3f	; 63
     ff8:	8f 83       	std	Y+7, r24	; 0x07
     ffa:	f8 94       	cli
     ffc:	9f 81       	ldd	r25, Y+7	; 0x07
     ffe:	00 e5       	ldi	r16, 0x50	; 80
    1000:	10 e0       	ldi	r17, 0x00	; 0
    1002:	d8 01       	movw	r26, r16
    1004:	16 96       	adiw	r26, 0x06	; 6
    1006:	8c 91       	ld	r24, X
    1008:	16 97       	sbiw	r26, 0x06	; 6
    100a:	89 7f       	andi	r24, 0xF9	; 249
    100c:	16 96       	adiw	r26, 0x06	; 6
    100e:	8c 93       	st	X, r24
    1010:	16 97       	sbiw	r26, 0x06	; 6
    1012:	e0 e6       	ldi	r30, 0x60	; 96
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 e8       	ldi	r24, 0x80	; 128
    1018:	85 83       	std	Z+5, r24	; 0x05
    101a:	8b eb       	ldi	r24, 0xBB	; 187
    101c:	86 83       	std	Z+6, r24	; 0x06
    101e:	16 96       	adiw	r26, 0x06	; 6
    1020:	8c 91       	ld	r24, X
    1022:	16 97       	sbiw	r26, 0x06	; 6
    1024:	84 60       	ori	r24, 0x04	; 4
    1026:	16 96       	adiw	r26, 0x06	; 6
    1028:	8c 93       	st	X, r24
    102a:	80 81       	ld	r24, Z
    102c:	81 60       	ori	r24, 0x01	; 1
    102e:	80 83       	st	Z, r24
    1030:	9f bf       	out	0x3f, r25	; 63
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	80 e4       	ldi	r24, 0x40	; 64
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	30 d6       	rcall	.+3168   	; 0x1c9a <ccp_write_io>
    103a:	8f b7       	in	r24, 0x3f	; 63
    103c:	8d 83       	std	Y+5, r24	; 0x05
    103e:	f8 94       	cli
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	f8 01       	movw	r30, r16
    1044:	80 81       	ld	r24, Z
    1046:	8e 7f       	andi	r24, 0xFE	; 254
    1048:	80 83       	st	Z, r24
    104a:	9f bf       	out	0x3f, r25	; 63
    104c:	27 96       	adiw	r28, 0x07	; 7
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	08 95       	ret

0000105c <sysclk_enable_module>:
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	1f 92       	push	r1
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9f b7       	in	r25, 0x3f	; 63
    1068:	99 83       	std	Y+1, r25	; 0x01
    106a:	f8 94       	cli
    106c:	99 81       	ldd	r25, Y+1	; 0x01
    106e:	e8 2f       	mov	r30, r24
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	e0 59       	subi	r30, 0x90	; 144
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	60 95       	com	r22
    1078:	80 81       	ld	r24, Z
    107a:	68 23       	and	r22, r24
    107c:	60 83       	st	Z, r22
    107e:	9f bf       	out	0x3f, r25	; 63
    1080:	0f 90       	pop	r0
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	1f 92       	push	r1
    108e:	1f 92       	push	r1
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1094:	86 30       	cpi	r24, 0x06	; 6
    1096:	11 f0       	breq	.+4      	; 0x109c <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	01 c0       	rjmp	.+2      	; 0x109e <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    109c:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    109e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    10a2:	81 fd       	sbrc	r24, 1
    10a4:	2a c0       	rjmp	.+84     	; 0x10fa <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10a6:	8f b7       	in	r24, 0x3f	; 63
    10a8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    10aa:	f8 94       	cli
	return flags;
    10ac:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    10ae:	e0 e5       	ldi	r30, 0x50	; 80
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	82 60       	ori	r24, 0x02	; 2
    10b6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10b8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    10ba:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    10bc:	81 ff       	sbrs	r24, 1
    10be:	fd cf       	rjmp	.-6      	; 0x10ba <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10c0:	8f b7       	in	r24, 0x3f	; 63
    10c2:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    10c4:	f8 94       	cli
	return flags;
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    10c8:	a0 e5       	ldi	r26, 0x50	; 80
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	16 96       	adiw	r26, 0x06	; 6
    10ce:	8c 91       	ld	r24, X
    10d0:	16 97       	sbiw	r26, 0x06	; 6
    10d2:	89 7f       	andi	r24, 0xF9	; 249
    10d4:	16 96       	adiw	r26, 0x06	; 6
    10d6:	8c 93       	st	X, r24
    10d8:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    10da:	e0 e6       	ldi	r30, 0x60	; 96
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 e8       	ldi	r24, 0x80	; 128
    10e0:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    10e2:	8b eb       	ldi	r24, 0xBB	; 187
    10e4:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    10e6:	16 96       	adiw	r26, 0x06	; 6
    10e8:	8c 91       	ld	r24, X
    10ea:	16 97       	sbiw	r26, 0x06	; 6
    10ec:	84 60       	ori	r24, 0x04	; 4
    10ee:	16 96       	adiw	r26, 0x06	; 6
    10f0:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    10f2:	80 81       	ld	r24, Z
    10f4:	81 60       	ori	r24, 0x01	; 1
    10f6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10f8:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    10fa:	63 60       	ori	r22, 0x03	; 3
    10fc:	84 e4       	ldi	r24, 0x44	; 68
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	cc d5       	rcall	.+2968   	; 0x1c9a <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1102:	60 e4       	ldi	r22, 0x40	; 64
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	aa df       	rcall	.-172    	; 0x105c <sysclk_enable_module>
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	08 95       	ret

00001116 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    1116:	30 91 bb 23 	lds	r19, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    111a:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    111e:	82 2f       	mov	r24, r18
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	03 97       	sbiw	r24, 0x03	; 3
    1124:	b1 f4       	brne	.+44     	; 0x1152 <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    1126:	31 11       	cpse	r19, r1
    1128:	16 c0       	rjmp	.+44     	; 0x1156 <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
    112a:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    112e:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1132:	89 2b       	or	r24, r25
    1134:	91 f4       	brne	.+36     	; 0x115a <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
    1136:	e9 eb       	ldi	r30, 0xB9	; 185
    1138:	f3 e2       	ldi	r31, 0x23	; 35
    113a:	82 ec       	ldi	r24, 0xC2	; 194
    113c:	91 e2       	ldi	r25, 0x21	; 33
    113e:	80 87       	std	Z+8, r24	; 0x08
    1140:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    1142:	8f ea       	ldi	r24, 0xAF	; 175
    1144:	98 e0       	ldi	r25, 0x08	; 8
    1146:	84 87       	std	Z+12, r24	; 0x0c
    1148:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
    114a:	12 86       	std	Z+10, r1	; 0x0a
    114c:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	08 95       	ret
	}
	return false;
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	08 95       	ret
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	08 95       	ret
    115a:	80 e0       	ldi	r24, 0x00	; 0
}
    115c:	08 95       	ret

0000115e <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
    115e:	08 95       	ret

00001160 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <udi_hid_generic_b_report_in_free>
    1166:	08 95       	ret

00001168 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
    1168:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
    116c:	10 92 c6 21 	sts	0x21C6, r1	; 0x8021c6 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
    1176:	0c 94 50 16 	jmp	0x2ca0	; 0x2ca0 <main_generic_enable>
}
    117a:	08 95       	ret

0000117c <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
    117c:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <main_generic_disable>
    1180:	08 95       	ret

00001182 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
    1182:	2b e8       	ldi	r18, 0x8B	; 139
    1184:	38 e0       	ldi	r19, 0x08	; 8
    1186:	46 ea       	ldi	r20, 0xA6	; 166
    1188:	50 e2       	ldi	r21, 0x20	; 32
    118a:	66 ec       	ldi	r22, 0xC6	; 198
    118c:	71 e2       	ldi	r23, 0x21	; 33
    118e:	88 ec       	ldi	r24, 0xC8	; 200
    1190:	91 e2       	ldi	r25, 0x21	; 33
    1192:	f2 c0       	rjmp	.+484    	; 0x1378 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
    1194:	08 95       	ret

00001196 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	1f 92       	push	r1
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
    11a8:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <udi_hid_generic_b_report_in_free>
    11ac:	88 23       	and	r24, r24
    11ae:	09 f1       	breq	.+66     	; 0x11f2 <udi_hid_generic_send_report_in+0x5c>
    11b0:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11b2:	8f b7       	in	r24, 0x3f	; 63
    11b4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    11b6:	f8 94       	cli
	return flags;
    11b8:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
    11ba:	10 92 c2 21 	sts	0x21C2, r1	; 0x8021c2 <udi_hid_generic_report_feature>
    11be:	10 92 c3 21 	sts	0x21C3, r1	; 0x8021c3 <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	80 93 c2 21 	sts	0x21C2, r24	; 0x8021c2 <udi_hid_generic_report_feature>
    11ca:	90 93 c3 21 	sts	0x21C3, r25	; 0x8021c3 <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    11ce:	00 eb       	ldi	r16, 0xB0	; 176
    11d0:	18 e0       	ldi	r17, 0x08	; 8
    11d2:	22 e0       	ldi	r18, 0x02	; 2
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	42 ec       	ldi	r20, 0xC2	; 194
    11d8:	51 e2       	ldi	r21, 0x21	; 33
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	82 e8       	ldi	r24, 0x82	; 130
    11de:	0e 94 11 13 	call	0x2622	; 0x2622 <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	89 27       	eor	r24, r25
    11e6:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11ea:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
    11ec:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <udi_hid_generic_b_report_in_free>
    11f0:	89 27       	eor	r24, r25

}
    11f2:	0f 90       	pop	r0
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	08 95       	ret

00001200 <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	08 95       	ret

00001204 <udi_hid_kbd_setreport>:
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	08 95       	ret

00001208 <udi_hid_kbd_enable>:
    1208:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <udi_hid_kbd_rate>
    120c:	10 92 dc 21 	sts	0x21DC, r1	; 0x8021dc <udi_hid_kbd_protocol>
    1210:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <udi_hid_kbd_b_report_trans_ongoing>
    1214:	88 e0       	ldi	r24, 0x08	; 8
    1216:	e3 ed       	ldi	r30, 0xD3	; 211
    1218:	f1 e2       	ldi	r31, 0x21	; 33
    121a:	df 01       	movw	r26, r30
    121c:	1d 92       	st	X+, r1
    121e:	8a 95       	dec	r24
    1220:	e9 f7       	brne	.-6      	; 0x121c <udi_hid_kbd_enable+0x14>
    1222:	10 92 db 21 	sts	0x21DB, r1	; 0x8021db <udi_hid_kbd_b_report_valid>
    1226:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <main_kbd_enable>
    122a:	08 95       	ret

0000122c <udi_hid_kbd_disable>:
    122c:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <main_kbd_disable>
    1230:	08 95       	ret

00001232 <udi_hid_kbd_setup>:
    1232:	22 e0       	ldi	r18, 0x02	; 2
    1234:	39 e0       	ldi	r19, 0x09	; 9
    1236:	48 ec       	ldi	r20, 0xC8	; 200
    1238:	50 e2       	ldi	r21, 0x20	; 32
    123a:	6c ed       	ldi	r22, 0xDC	; 220
    123c:	71 e2       	ldi	r23, 0x21	; 33
    123e:	8e ed       	ldi	r24, 0xDE	; 222
    1240:	91 e2       	ldi	r25, 0x21	; 33
    1242:	9a c0       	rjmp	.+308    	; 0x1378 <udi_hid_setup>
    1244:	08 95       	ret

00001246 <udi_hid_kbd_send_report>:
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <udi_hid_kbd_b_report_trans_ongoing>
    124e:	81 11       	cpse	r24, r1
    1250:	18 c0       	rjmp	.+48     	; 0x1282 <udi_hid_kbd_send_report+0x3c>
    1252:	88 e0       	ldi	r24, 0x08	; 8
    1254:	e3 ed       	ldi	r30, 0xD3	; 211
    1256:	f1 e2       	ldi	r31, 0x21	; 33
    1258:	aa ec       	ldi	r26, 0xCA	; 202
    125a:	b1 e2       	ldi	r27, 0x21	; 33
    125c:	01 90       	ld	r0, Z+
    125e:	0d 92       	st	X+, r0
    1260:	8a 95       	dec	r24
    1262:	e1 f7       	brne	.-8      	; 0x125c <udi_hid_kbd_send_report+0x16>
    1264:	10 92 db 21 	sts	0x21DB, r1	; 0x8021db <udi_hid_kbd_b_report_valid>
    1268:	05 e4       	ldi	r16, 0x45	; 69
    126a:	19 e0       	ldi	r17, 0x09	; 9
    126c:	28 e0       	ldi	r18, 0x08	; 8
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	4a ec       	ldi	r20, 0xCA	; 202
    1272:	51 e2       	ldi	r21, 0x21	; 33
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	81 e8       	ldi	r24, 0x81	; 129
    1278:	0e 94 11 13 	call	0x2622	; 0x2622 <udd_ep_run>
    127c:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <udi_hid_kbd_b_report_trans_ongoing>
    1280:	01 c0       	rjmp	.+2      	; 0x1284 <udi_hid_kbd_send_report+0x3e>
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	08 95       	ret

0000128a <udi_hid_kbd_report_sent>:
    128a:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <udi_hid_kbd_b_report_trans_ongoing>
    128e:	80 91 db 21 	lds	r24, 0x21DB	; 0x8021db <udi_hid_kbd_b_report_valid>
    1292:	81 11       	cpse	r24, r1
    1294:	d8 cf       	rjmp	.-80     	; 0x1246 <udi_hid_kbd_send_report>
    1296:	08 95       	ret

00001298 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	1f 92       	push	r1
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    12a4:	9f b7       	in	r25, 0x3f	; 63
    12a6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    12a8:	f8 94       	cli
	return flags;
    12aa:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    12ac:	90 91 d5 21 	lds	r25, 0x21D5	; 0x8021d5 <udi_hid_kbd_report+0x2>
    12b0:	99 23       	and	r25, r25
    12b2:	41 f0       	breq	.+16     	; 0x12c4 <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    12b4:	89 17       	cp	r24, r25
    12b6:	a9 f0       	breq	.+42     	; 0x12e2 <udi_hid_kbd_up+0x4a>
    12b8:	e6 ed       	ldi	r30, 0xD6	; 214
    12ba:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    12bc:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    12be:	21 91       	ld	r18, Z+
    12c0:	21 11       	cpse	r18, r1
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12c4:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    12c6:	1e c0       	rjmp	.+60     	; 0x1304 <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    12c8:	28 17       	cp	r18, r24
    12ca:	21 f0       	breq	.+8      	; 0x12d4 <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    12cc:	9f 5f       	subi	r25, 0xFF	; 255
    12ce:	98 30       	cpi	r25, 0x08	; 8
    12d0:	b1 f7       	brne	.-20     	; 0x12be <udi_hid_kbd_up+0x26>
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    12d4:	98 30       	cpi	r25, 0x08	; 8
    12d6:	19 f0       	breq	.+6      	; 0x12de <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    12d8:	97 30       	cpi	r25, 0x07	; 7
    12da:	20 f0       	brcs	.+8      	; 0x12e4 <udi_hid_kbd_up+0x4c>
    12dc:	0c c0       	rjmp	.+24     	; 0x12f6 <udi_hid_kbd_up+0x5e>
    12de:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    12e0:	11 c0       	rjmp	.+34     	; 0x1304 <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    12e2:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    12e4:	e9 2f       	mov	r30, r25
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	ed 52       	subi	r30, 0x2D	; 45
    12ea:	fe 4d       	sbci	r31, 0xDE	; 222
    12ec:	81 81       	ldd	r24, Z+1	; 0x01
    12ee:	80 83       	st	Z, r24
		i++;
    12f0:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    12f2:	97 30       	cpi	r25, 0x07	; 7
    12f4:	b9 f7       	brne	.-18     	; 0x12e4 <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    12f6:	10 92 da 21 	sts	0x21DA, r1	; 0x8021da <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	80 93 db 21 	sts	0x21DB, r24	; 0x8021db <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1300:	a2 df       	rcall	.-188    	; 0x1246 <udi_hid_kbd_send_report>
    1302:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	0f 90       	pop	r0
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	08 95       	ret

00001310 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	1f 92       	push	r1
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    131c:	9f b7       	in	r25, 0x3f	; 63
    131e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1320:	f8 94       	cli
	return flags;
    1322:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    1324:	90 91 d5 21 	lds	r25, 0x21D5	; 0x8021d5 <udi_hid_kbd_report+0x2>
    1328:	99 23       	and	r25, r25
    132a:	b1 f0       	breq	.+44     	; 0x1358 <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    132c:	89 17       	cp	r24, r25
    132e:	41 f0       	breq	.+16     	; 0x1340 <udi_hid_kbd_down+0x30>
    1330:	a6 ed       	ldi	r26, 0xD6	; 214
    1332:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1334:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    1336:	9d 91       	ld	r25, X+
    1338:	99 23       	and	r25, r25
    133a:	49 f0       	breq	.+18     	; 0x134e <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    133c:	98 13       	cpse	r25, r24
    133e:	03 c0       	rjmp	.+6      	; 0x1346 <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1340:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	14 c0       	rjmp	.+40     	; 0x136e <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1346:	ef 5f       	subi	r30, 0xFF	; 255
    1348:	e8 30       	cpi	r30, 0x08	; 8
    134a:	a9 f7       	brne	.-22     	; 0x1336 <udi_hid_kbd_down+0x26>
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    134e:	e8 30       	cpi	r30, 0x08	; 8
    1350:	21 f4       	brne	.+8      	; 0x135a <udi_hid_kbd_down+0x4a>
    1352:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	0b c0       	rjmp	.+22     	; 0x136e <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1358:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	ed 52       	subi	r30, 0x2D	; 45
    135e:	fe 4d       	sbci	r31, 0xDE	; 222
    1360:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	80 93 db 21 	sts	0x21DB, r24	; 0x8021db <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1368:	6e df       	rcall	.-292    	; 0x1246 <udi_hid_kbd_send_report>
    136a:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    136c:	81 e0       	ldi	r24, 0x01	; 1
}
    136e:	0f 90       	pop	r0
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	08 95       	ret

00001378 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	dc 01       	movw	r26, r24
    137e:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    1380:	90 91 b9 23 	lds	r25, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    1384:	99 23       	and	r25, r25
    1386:	0c f0       	brlt	.+2      	; 0x138a <udi_hid_setup+0x12>
    1388:	68 c0       	rjmp	.+208    	; 0x145a <udi_hid_setup+0xe2>
    138a:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    138c:	09 f0       	breq	.+2      	; 0x1390 <udi_hid_setup+0x18>
    138e:	45 c0       	rjmp	.+138    	; 0x141a <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1390:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1394:	86 30       	cpi	r24, 0x06	; 6
    1396:	09 f0       	breq	.+2      	; 0x139a <udi_hid_setup+0x22>
    1398:	40 c0       	rjmp	.+128    	; 0x141a <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    139a:	76 d1       	rcall	.+748    	; 0x1688 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    139c:	dc 01       	movw	r26, r24
    139e:	1a 96       	adiw	r26, 0x0a	; 10
    13a0:	2c 91       	ld	r18, X
    13a2:	1a 97       	sbiw	r26, 0x0a	; 10
    13a4:	21 32       	cpi	r18, 0x21	; 33
    13a6:	09 f0       	breq	.+2      	; 0x13aa <udi_hid_setup+0x32>
    13a8:	77 c0       	rjmp	.+238    	; 0x1498 <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    13aa:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	21 32       	cpi	r18, 0x21	; 33
    13b2:	31 05       	cpc	r19, r1
    13b4:	b1 f4       	brne	.+44     	; 0x13e2 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    13b6:	9c 01       	movw	r18, r24
    13b8:	27 5f       	subi	r18, 0xF7	; 247
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	20 93 c1 23 	sts	0x23C1, r18	; 0x8023c1 <udd_g_ctrlreq+0x8>
    13c0:	30 93 c2 23 	sts	0x23C2, r19	; 0x8023c2 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    13c4:	e9 eb       	ldi	r30, 0xB9	; 185
    13c6:	f3 e2       	ldi	r31, 0x23	; 35
    13c8:	19 96       	adiw	r26, 0x09	; 9
    13ca:	8c 91       	ld	r24, X
    13cc:	26 81       	ldd	r18, Z+6	; 0x06
    13ce:	37 81       	ldd	r19, Z+7	; 0x07
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	28 17       	cp	r18, r24
    13d4:	39 07       	cpc	r19, r25
    13d6:	08 f4       	brcc	.+2      	; 0x13da <udi_hid_setup+0x62>
    13d8:	c9 01       	movw	r24, r18
    13da:	82 87       	std	Z+10, r24	; 0x0a
    13dc:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	68 c0       	rjmp	.+208    	; 0x14b2 <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    13e2:	fc 01       	movw	r30, r24
    13e4:	47 85       	ldd	r20, Z+15	; 0x0f
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	42 17       	cp	r20, r18
    13ea:	53 07       	cpc	r21, r19
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <udi_hid_setup+0x78>
    13ee:	56 c0       	rjmp	.+172    	; 0x149c <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    13f0:	c0 93 c1 23 	sts	0x23C1, r28	; 0x8023c1 <udd_g_ctrlreq+0x8>
    13f4:	d0 93 c2 23 	sts	0x23C2, r29	; 0x8023c2 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    13f8:	e9 eb       	ldi	r30, 0xB9	; 185
    13fa:	f3 e2       	ldi	r31, 0x23	; 35
    13fc:	26 81       	ldd	r18, Z+6	; 0x06
    13fe:	37 81       	ldd	r19, Z+7	; 0x07
    1400:	dc 01       	movw	r26, r24
    1402:	50 96       	adiw	r26, 0x10	; 16
    1404:	8d 91       	ld	r24, X+
    1406:	9c 91       	ld	r25, X
    1408:	51 97       	sbiw	r26, 0x11	; 17
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	08 f4       	brcc	.+2      	; 0x1412 <udi_hid_setup+0x9a>
    1410:	c9 01       	movw	r24, r18
    1412:	82 87       	std	Z+10, r24	; 0x0a
    1414:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	4c c0       	rjmp	.+152    	; 0x14b2 <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    141a:	90 32       	cpi	r25, 0x20	; 32
    141c:	09 f0       	breq	.+2      	; 0x1420 <udi_hid_setup+0xa8>
    141e:	40 c0       	rjmp	.+128    	; 0x14a0 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1420:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1424:	82 30       	cpi	r24, 0x02	; 2
    1426:	39 f0       	breq	.+14     	; 0x1436 <udi_hid_setup+0xbe>
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	71 f0       	breq	.+28     	; 0x1448 <udi_hid_setup+0xd0>
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	d1 f5       	brne	.+116    	; 0x14a4 <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    1430:	f9 01       	movw	r30, r18
    1432:	19 95       	eicall
    1434:	3e c0       	rjmp	.+124    	; 0x14b2 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    1436:	e9 eb       	ldi	r30, 0xB9	; 185
    1438:	f3 e2       	ldi	r31, 0x23	; 35
    143a:	a0 87       	std	Z+8, r26	; 0x08
    143c:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	82 87       	std	Z+10, r24	; 0x0a
    1444:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1446:	35 c0       	rjmp	.+106    	; 0x14b2 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1448:	e9 eb       	ldi	r30, 0xB9	; 185
    144a:	f3 e2       	ldi	r31, 0x23	; 35
    144c:	60 87       	std	Z+8, r22	; 0x08
    144e:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	82 87       	std	Z+10, r24	; 0x0a
    1456:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1458:	2c c0       	rjmp	.+88     	; 0x14b2 <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    145a:	90 76       	andi	r25, 0x60	; 96
    145c:	90 32       	cpi	r25, 0x20	; 32
    145e:	21 f5       	brne	.+72     	; 0x14a8 <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1460:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1464:	8a 30       	cpi	r24, 0x0A	; 10
    1466:	39 f0       	breq	.+14     	; 0x1476 <udi_hid_setup+0xfe>
    1468:	8b 30       	cpi	r24, 0x0B	; 11
    146a:	51 f0       	breq	.+20     	; 0x1480 <udi_hid_setup+0x108>
    146c:	89 30       	cpi	r24, 0x09	; 9
    146e:	f1 f4       	brne	.+60     	; 0x14ac <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    1470:	f9 01       	movw	r30, r18
    1472:	19 95       	eicall
    1474:	1e c0       	rjmp	.+60     	; 0x14b2 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1476:	80 91 bc 23 	lds	r24, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    147a:	8c 93       	st	X, r24
				return true;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	19 c0       	rjmp	.+50     	; 0x14b2 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    1480:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1484:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1488:	89 2b       	or	r24, r25
    148a:	91 f4       	brne	.+36     	; 0x14b0 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    148c:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1490:	db 01       	movw	r26, r22
    1492:	8c 93       	st	X, r24
				return true;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	0d c0       	rjmp	.+26     	; 0x14b2 <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	0b c0       	rjmp	.+22     	; 0x14b2 <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	09 c0       	rjmp	.+18     	; 0x14b2 <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	07 c0       	rjmp	.+14     	; 0x14b2 <udi_hid_setup+0x13a>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	05 c0       	rjmp	.+10     	; 0x14b2 <udi_hid_setup+0x13a>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <udi_hid_setup+0x13a>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    14b0:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    14b8:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    14bc:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    14c0:	01 90       	ld	r0, Z+
    14c2:	f0 81       	ld	r31, Z
    14c4:	e0 2d       	mov	r30, r0
    14c6:	22 81       	ldd	r18, Z+2	; 0x02
    14c8:	33 81       	ldd	r19, Z+3	; 0x03
    14ca:	2e 0f       	add	r18, r30
    14cc:	3f 1f       	adc	r19, r31
    14ce:	fc 01       	movw	r30, r24
    14d0:	40 81       	ld	r20, Z
    14d2:	e4 0f       	add	r30, r20
    14d4:	f1 1d       	adc	r31, r1
    14d6:	e2 17       	cp	r30, r18
    14d8:	f3 07       	cpc	r31, r19
    14da:	a0 f4       	brcc	.+40     	; 0x1504 <udc_next_desc_in_iface+0x4c>
    14dc:	81 81       	ldd	r24, Z+1	; 0x01
    14de:	84 30       	cpi	r24, 0x04	; 4
    14e0:	a1 f0       	breq	.+40     	; 0x150a <udc_next_desc_in_iface+0x52>
    14e2:	86 13       	cpse	r24, r22
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <udc_next_desc_in_iface+0x3a>
    14e6:	14 c0       	rjmp	.+40     	; 0x1510 <udc_next_desc_in_iface+0x58>
    14e8:	81 81       	ldd	r24, Z+1	; 0x01
    14ea:	84 30       	cpi	r24, 0x04	; 4
    14ec:	a1 f0       	breq	.+40     	; 0x1516 <udc_next_desc_in_iface+0x5e>
    14ee:	86 17       	cp	r24, r22
    14f0:	a9 f0       	breq	.+42     	; 0x151c <udc_next_desc_in_iface+0x64>
    14f2:	80 81       	ld	r24, Z
    14f4:	e8 0f       	add	r30, r24
    14f6:	f1 1d       	adc	r31, r1
    14f8:	e2 17       	cp	r30, r18
    14fa:	f3 07       	cpc	r31, r19
    14fc:	a8 f3       	brcs	.-22     	; 0x14e8 <udc_next_desc_in_iface+0x30>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	08 95       	ret
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	08 95       	ret
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	08 95       	ret
    1510:	8e 2f       	mov	r24, r30
    1512:	9f 2f       	mov	r25, r31
    1514:	08 95       	ret
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	08 95       	ret
    151c:	8e 2f       	mov	r24, r30
    151e:	9f 2f       	mov	r25, r31
    1520:	08 95       	ret

00001522 <udc_valid_address>:
    1522:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1526:	8f 77       	andi	r24, 0x7F	; 127
    1528:	95 c7       	rjmp	.+3882   	; 0x2454 <udd_set_address>
    152a:	08 95       	ret

0000152c <udc_update_iface_desc>:
    152c:	90 91 e6 21 	lds	r25, 0x21E6	; 0x8021e6 <udc_num_configuration>
    1530:	99 23       	and	r25, r25
    1532:	81 f1       	breq	.+96     	; 0x1594 <udc_update_iface_desc+0x68>
    1534:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1538:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    153c:	01 90       	ld	r0, Z+
    153e:	f0 81       	ld	r31, Z
    1540:	e0 2d       	mov	r30, r0
    1542:	94 81       	ldd	r25, Z+4	; 0x04
    1544:	89 17       	cp	r24, r25
    1546:	40 f5       	brcc	.+80     	; 0x1598 <udc_update_iface_desc+0x6c>
    1548:	e0 93 e2 21 	sts	0x21E2, r30	; 0x8021e2 <udc_ptr_iface>
    154c:	f0 93 e3 21 	sts	0x21E3, r31	; 0x8021e3 <udc_ptr_iface+0x1>
    1550:	22 81       	ldd	r18, Z+2	; 0x02
    1552:	33 81       	ldd	r19, Z+3	; 0x03
    1554:	2e 0f       	add	r18, r30
    1556:	3f 1f       	adc	r19, r31
    1558:	e2 17       	cp	r30, r18
    155a:	f3 07       	cpc	r31, r19
    155c:	f8 f4       	brcc	.+62     	; 0x159c <udc_update_iface_desc+0x70>
    155e:	91 81       	ldd	r25, Z+1	; 0x01
    1560:	94 30       	cpi	r25, 0x04	; 4
    1562:	61 f4       	brne	.+24     	; 0x157c <udc_update_iface_desc+0x50>
    1564:	92 81       	ldd	r25, Z+2	; 0x02
    1566:	89 13       	cpse	r24, r25
    1568:	09 c0       	rjmp	.+18     	; 0x157c <udc_update_iface_desc+0x50>
    156a:	93 81       	ldd	r25, Z+3	; 0x03
    156c:	96 13       	cpse	r25, r22
    156e:	06 c0       	rjmp	.+12     	; 0x157c <udc_update_iface_desc+0x50>
    1570:	e0 93 e2 21 	sts	0x21E2, r30	; 0x8021e2 <udc_ptr_iface>
    1574:	f0 93 e3 21 	sts	0x21E3, r31	; 0x8021e3 <udc_ptr_iface+0x1>
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	08 95       	ret
    157c:	90 81       	ld	r25, Z
    157e:	e9 0f       	add	r30, r25
    1580:	f1 1d       	adc	r31, r1
    1582:	e2 17       	cp	r30, r18
    1584:	f3 07       	cpc	r31, r19
    1586:	58 f3       	brcs	.-42     	; 0x155e <udc_update_iface_desc+0x32>
    1588:	e0 93 e2 21 	sts	0x21E2, r30	; 0x8021e2 <udc_ptr_iface>
    158c:	f0 93 e3 21 	sts	0x21E3, r31	; 0x8021e3 <udc_ptr_iface+0x1>
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	08 95       	ret
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	08 95       	ret
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	08 95       	ret
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	08 95       	ret

000015a0 <udc_iface_disable>:
    15a0:	ef 92       	push	r14
    15a2:	ff 92       	push	r15
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	c8 2f       	mov	r28, r24
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	be df       	rcall	.-132    	; 0x152c <udc_update_iface_desc>
    15b0:	18 2f       	mov	r17, r24
    15b2:	88 23       	and	r24, r24
    15b4:	81 f1       	breq	.+96     	; 0x1616 <udc_iface_disable+0x76>
    15b6:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    15ba:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    15be:	ec 2f       	mov	r30, r28
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	12 96       	adiw	r26, 0x02	; 2
    15c8:	8d 91       	ld	r24, X+
    15ca:	9c 91       	ld	r25, X
    15cc:	13 97       	sbiw	r26, 0x03	; 3
    15ce:	e8 0f       	add	r30, r24
    15d0:	f9 1f       	adc	r31, r25
    15d2:	e0 80       	ld	r14, Z
    15d4:	f1 80       	ldd	r15, Z+1	; 0x01
    15d6:	d7 01       	movw	r26, r14
    15d8:	16 96       	adiw	r26, 0x06	; 6
    15da:	ed 91       	ld	r30, X+
    15dc:	fc 91       	ld	r31, X
    15de:	17 97       	sbiw	r26, 0x07	; 7
    15e0:	19 95       	eicall
    15e2:	68 2f       	mov	r22, r24
    15e4:	8c 2f       	mov	r24, r28
    15e6:	a2 df       	rcall	.-188    	; 0x152c <udc_update_iface_desc>
    15e8:	18 2f       	mov	r17, r24
    15ea:	88 23       	and	r24, r24
    15ec:	a1 f0       	breq	.+40     	; 0x1616 <udc_iface_disable+0x76>
    15ee:	c0 91 e2 21 	lds	r28, 0x21E2	; 0x8021e2 <udc_ptr_iface>
    15f2:	d0 91 e3 21 	lds	r29, 0x21E3	; 0x8021e3 <udc_ptr_iface+0x1>
    15f6:	65 e0       	ldi	r22, 0x05	; 5
    15f8:	ce 01       	movw	r24, r28
    15fa:	5e df       	rcall	.-324    	; 0x14b8 <udc_next_desc_in_iface>
    15fc:	ec 01       	movw	r28, r24
    15fe:	89 2b       	or	r24, r25
    1600:	21 f0       	breq	.+8      	; 0x160a <udc_iface_disable+0x6a>
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	0e 94 2a 14 	call	0x2854	; 0x2854 <udd_ep_free>
    1608:	f6 cf       	rjmp	.-20     	; 0x15f6 <udc_iface_disable+0x56>
    160a:	d7 01       	movw	r26, r14
    160c:	12 96       	adiw	r26, 0x02	; 2
    160e:	ed 91       	ld	r30, X+
    1610:	fc 91       	ld	r31, X
    1612:	13 97       	sbiw	r26, 0x03	; 3
    1614:	19 95       	eicall
    1616:	81 2f       	mov	r24, r17
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	1f 91       	pop	r17
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	08 95       	ret

00001624 <udc_iface_enable>:
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	18 2f       	mov	r17, r24
    162c:	7f df       	rcall	.-258    	; 0x152c <udc_update_iface_desc>
    162e:	88 23       	and	r24, r24
    1630:	39 f1       	breq	.+78     	; 0x1680 <udc_iface_enable+0x5c>
    1632:	c0 91 e2 21 	lds	r28, 0x21E2	; 0x8021e2 <udc_ptr_iface>
    1636:	d0 91 e3 21 	lds	r29, 0x21E3	; 0x8021e3 <udc_ptr_iface+0x1>
    163a:	65 e0       	ldi	r22, 0x05	; 5
    163c:	ce 01       	movw	r24, r28
    163e:	3c df       	rcall	.-392    	; 0x14b8 <udc_next_desc_in_iface>
    1640:	ec 01       	movw	r28, r24
    1642:	89 2b       	or	r24, r25
    1644:	41 f0       	breq	.+16     	; 0x1656 <udc_iface_enable+0x32>
    1646:	4c 81       	ldd	r20, Y+4	; 0x04
    1648:	5d 81       	ldd	r21, Y+5	; 0x05
    164a:	6b 81       	ldd	r22, Y+3	; 0x03
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	0f d7       	rcall	.+3614   	; 0x246e <udd_ep_alloc>
    1650:	81 11       	cpse	r24, r1
    1652:	f3 cf       	rjmp	.-26     	; 0x163a <udc_iface_enable+0x16>
    1654:	15 c0       	rjmp	.+42     	; 0x1680 <udc_iface_enable+0x5c>
    1656:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    165a:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    165e:	e1 2f       	mov	r30, r17
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	ee 0f       	add	r30, r30
    1664:	ff 1f       	adc	r31, r31
    1666:	12 96       	adiw	r26, 0x02	; 2
    1668:	8d 91       	ld	r24, X+
    166a:	9c 91       	ld	r25, X
    166c:	13 97       	sbiw	r26, 0x03	; 3
    166e:	e8 0f       	add	r30, r24
    1670:	f9 1f       	adc	r31, r25
    1672:	01 90       	ld	r0, Z+
    1674:	f0 81       	ld	r31, Z
    1676:	e0 2d       	mov	r30, r0
    1678:	01 90       	ld	r0, Z+
    167a:	f0 81       	ld	r31, Z
    167c:	e0 2d       	mov	r30, r0
    167e:	19 95       	eicall
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	08 95       	ret

00001688 <udc_get_interface_desc>:
    1688:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <udc_ptr_iface>
    168c:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <udc_ptr_iface+0x1>
    1690:	08 95       	ret

00001692 <udc_start>:
    1692:	55 c6       	rjmp	.+3242   	; 0x233e <udd_enable>
    1694:	08 95       	ret

00001696 <udc_reset>:
    1696:	cf 93       	push	r28
    1698:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udc_num_configuration>
    169c:	88 23       	and	r24, r24
    169e:	c1 f0       	breq	.+48     	; 0x16d0 <udc_reset+0x3a>
    16a0:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    16a4:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    16a8:	01 90       	ld	r0, Z+
    16aa:	f0 81       	ld	r31, Z
    16ac:	e0 2d       	mov	r30, r0
    16ae:	84 81       	ldd	r24, Z+4	; 0x04
    16b0:	88 23       	and	r24, r24
    16b2:	71 f0       	breq	.+28     	; 0x16d0 <udc_reset+0x3a>
    16b4:	c0 e0       	ldi	r28, 0x00	; 0
    16b6:	8c 2f       	mov	r24, r28
    16b8:	73 df       	rcall	.-282    	; 0x15a0 <udc_iface_disable>
    16ba:	cf 5f       	subi	r28, 0xFF	; 255
    16bc:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    16c0:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    16c4:	01 90       	ld	r0, Z+
    16c6:	f0 81       	ld	r31, Z
    16c8:	e0 2d       	mov	r30, r0
    16ca:	84 81       	ldd	r24, Z+4	; 0x04
    16cc:	c8 17       	cp	r28, r24
    16ce:	98 f3       	brcs	.-26     	; 0x16b6 <udc_reset+0x20>
    16d0:	10 92 e6 21 	sts	0x21E6, r1	; 0x8021e6 <udc_num_configuration>
    16d4:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <udc_device_status>
    16d8:	81 fd       	sbrc	r24, 1
    16da:	0e 94 48 16 	call	0x2c90	; 0x2c90 <main_remotewakeup_disable>
    16de:	10 92 ea 21 	sts	0x21EA, r1	; 0x8021ea <udc_device_status>
    16e2:	10 92 eb 21 	sts	0x21EB, r1	; 0x8021eb <udc_device_status+0x1>
    16e6:	cf 91       	pop	r28
    16e8:	08 95       	ret

000016ea <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    16ea:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    16ec:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udc_num_configuration>
    16f0:	88 23       	and	r24, r24
    16f2:	49 f1       	breq	.+82     	; 0x1746 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    16f4:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    16f8:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    16fc:	ed 91       	ld	r30, X+
    16fe:	fc 91       	ld	r31, X
    1700:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1702:	84 81       	ldd	r24, Z+4	; 0x04
    1704:	88 23       	and	r24, r24
    1706:	f9 f0       	breq	.+62     	; 0x1746 <udc_sof_notify+0x5c>
    1708:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    170a:	ec 2f       	mov	r30, r28
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	12 96       	adiw	r26, 0x02	; 2
    1714:	8d 91       	ld	r24, X+
    1716:	9c 91       	ld	r25, X
    1718:	13 97       	sbiw	r26, 0x03	; 3
    171a:	e8 0f       	add	r30, r24
    171c:	f9 1f       	adc	r31, r25
    171e:	01 90       	ld	r0, Z+
    1720:	f0 81       	ld	r31, Z
    1722:	e0 2d       	mov	r30, r0
    1724:	00 84       	ldd	r0, Z+8	; 0x08
    1726:	f1 85       	ldd	r31, Z+9	; 0x09
    1728:	e0 2d       	mov	r30, r0
    172a:	30 97       	sbiw	r30, 0x00	; 0
    172c:	09 f0       	breq	.+2      	; 0x1730 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    172e:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1730:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1732:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1736:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    173a:	ed 91       	ld	r30, X+
    173c:	fc 91       	ld	r31, X
    173e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1740:	84 81       	ldd	r24, Z+4	; 0x04
    1742:	c8 17       	cp	r28, r24
    1744:	10 f3       	brcs	.-60     	; 0x170a <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

0000174a <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1752:	e9 eb       	ldi	r30, 0xB9	; 185
    1754:	f3 e2       	ldi	r31, 0x23	; 35
    1756:	12 86       	std	Z+10, r1	; 0x0a
    1758:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    175a:	14 86       	std	Z+12, r1	; 0x0c
    175c:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    175e:	16 86       	std	Z+14, r1	; 0x0e
    1760:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1762:	80 81       	ld	r24, Z
    1764:	88 23       	and	r24, r24
    1766:	0c f0       	brlt	.+2      	; 0x176a <udc_process_setup+0x20>
    1768:	7e c2       	rjmp	.+1276   	; 0x1c66 <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    176a:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    176e:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1772:	21 15       	cp	r18, r1
    1774:	31 05       	cpc	r19, r1
    1776:	09 f0       	breq	.+2      	; 0x177a <udc_process_setup+0x30>
    1778:	7b c2       	rjmp	.+1270   	; 0x1c70 <udc_process_setup+0x526>
    177a:	6d c2       	rjmp	.+1242   	; 0x1c56 <udc_process_setup+0x50c>
    177c:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    177e:	09 f0       	breq	.+2      	; 0x1782 <udc_process_setup+0x38>
    1780:	a0 c0       	rjmp	.+320    	; 0x18c2 <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1782:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1786:	96 30       	cpi	r25, 0x06	; 6
    1788:	79 f0       	breq	.+30     	; 0x17a8 <udc_process_setup+0x5e>
    178a:	98 30       	cpi	r25, 0x08	; 8
    178c:	09 f4       	brne	.+2      	; 0x1790 <udc_process_setup+0x46>
    178e:	8f c0       	rjmp	.+286    	; 0x18ae <udc_process_setup+0x164>
    1790:	91 11       	cpse	r25, r1
    1792:	97 c0       	rjmp	.+302    	; 0x18c2 <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1794:	22 30       	cpi	r18, 0x02	; 2
    1796:	31 05       	cpc	r19, r1
    1798:	09 f0       	breq	.+2      	; 0x179c <udc_process_setup+0x52>
    179a:	19 c2       	rjmp	.+1074   	; 0x1bce <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    179c:	62 e0       	ldi	r22, 0x02	; 2
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	8a ee       	ldi	r24, 0xEA	; 234
    17a2:	91 e2       	ldi	r25, 0x21	; 33
    17a4:	5d d6       	rcall	.+3258   	; 0x2460 <udd_set_setup_payload>
    17a6:	69 c2       	rjmp	.+1234   	; 0x1c7a <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    17a8:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    17ac:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    17b0:	29 2f       	mov	r18, r25
    17b2:	33 27       	eor	r19, r19
    17b4:	22 30       	cpi	r18, 0x02	; 2
    17b6:	31 05       	cpc	r19, r1
    17b8:	a9 f0       	breq	.+42     	; 0x17e4 <udc_process_setup+0x9a>
    17ba:	20 f4       	brcc	.+8      	; 0x17c4 <udc_process_setup+0x7a>
    17bc:	21 30       	cpi	r18, 0x01	; 1
    17be:	31 05       	cpc	r19, r1
    17c0:	41 f0       	breq	.+16     	; 0x17d2 <udc_process_setup+0x88>
    17c2:	c7 c1       	rjmp	.+910    	; 0x1b52 <udc_process_setup+0x408>
    17c4:	23 30       	cpi	r18, 0x03	; 3
    17c6:	31 05       	cpc	r19, r1
    17c8:	d9 f1       	breq	.+118    	; 0x1840 <udc_process_setup+0xf6>
    17ca:	2f 30       	cpi	r18, 0x0F	; 15
    17cc:	31 05       	cpc	r19, r1
    17ce:	51 f1       	breq	.+84     	; 0x1824 <udc_process_setup+0xda>
    17d0:	c0 c1       	rjmp	.+896    	; 0x1b52 <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    17d2:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    17d6:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    17da:	dc 01       	movw	r26, r24
    17dc:	6c 91       	ld	r22, X
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	3f d6       	rcall	.+3198   	; 0x2460 <udd_set_setup_payload>
    17e2:	56 c0       	rjmp	.+172    	; 0x1890 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    17e4:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    17e8:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    17ec:	21 89       	ldd	r18, Z+17	; 0x11
    17ee:	82 17       	cp	r24, r18
    17f0:	08 f0       	brcs	.+2      	; 0x17f4 <udc_process_setup+0xaa>
    17f2:	ed c1       	rjmp	.+986    	; 0x1bce <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    17f4:	99 27       	eor	r25, r25
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1802:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1806:	e8 0f       	add	r30, r24
    1808:	f9 1f       	adc	r31, r25
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    180e:	fc 01       	movw	r30, r24
    1810:	62 81       	ldd	r22, Z+2	; 0x02
    1812:	73 81       	ldd	r23, Z+3	; 0x03
    1814:	25 d6       	rcall	.+3146   	; 0x2460 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1816:	e0 91 c1 23 	lds	r30, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    181a:	f0 91 c2 23 	lds	r31, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    181e:	82 e0       	ldi	r24, 0x02	; 2
    1820:	81 83       	std	Z+1, r24	; 0x01
    1822:	36 c0       	rjmp	.+108    	; 0x1890 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1824:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    1828:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	09 f4       	brne	.+2      	; 0x1832 <udc_process_setup+0xe8>
    1830:	ce c1       	rjmp	.+924    	; 0x1bce <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1832:	dc 01       	movw	r26, r24
    1834:	12 96       	adiw	r26, 0x02	; 2
    1836:	6d 91       	ld	r22, X+
    1838:	7c 91       	ld	r23, X
    183a:	13 97       	sbiw	r26, 0x03	; 3
    183c:	11 d6       	rcall	.+3106   	; 0x2460 <udd_set_setup_payload>
    183e:	28 c0       	rjmp	.+80     	; 0x1890 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1840:	99 27       	eor	r25, r25
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	71 f0       	breq	.+28     	; 0x1864 <udc_process_setup+0x11a>
    1848:	38 f0       	brcs	.+14     	; 0x1858 <udc_process_setup+0x10e>
    184a:	02 97       	sbiw	r24, 0x02	; 2
    184c:	09 f0       	breq	.+2      	; 0x1850 <udc_process_setup+0x106>
    184e:	8a c1       	rjmp	.+788    	; 0x1b64 <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1850:	e6 e4       	ldi	r30, 0x46	; 70
    1852:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1854:	3b e1       	ldi	r19, 0x1B	; 27
    1856:	09 c0       	rjmp	.+18     	; 0x186a <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1858:	64 e0       	ldi	r22, 0x04	; 4
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	8c e6       	ldi	r24, 0x6C	; 108
    185e:	91 e2       	ldi	r25, 0x21	; 33
    1860:	ff d5       	rcall	.+3070   	; 0x2460 <udd_set_setup_payload>
    1862:	16 c0       	rjmp	.+44     	; 0x1890 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1864:	e2 e6       	ldi	r30, 0x62	; 98
    1866:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1868:	39 e0       	ldi	r19, 0x09	; 9
    186a:	a0 e1       	ldi	r26, 0x10	; 16
    186c:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    186e:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1870:	81 91       	ld	r24, Z+
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	8d 93       	st	X+, r24
    1876:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1878:	2f 5f       	subi	r18, 0xFF	; 255
    187a:	23 17       	cp	r18, r19
    187c:	c8 f3       	brcs	.-14     	; 0x1870 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    187e:	63 2f       	mov	r22, r19
    1880:	66 0f       	add	r22, r22
    1882:	6e 5f       	subi	r22, 0xFE	; 254
    1884:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <udc_string_desc>
		udd_set_setup_payload(
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	8e e0       	ldi	r24, 0x0E	; 14
    188c:	91 e2       	ldi	r25, 0x21	; 33
    188e:	e8 d5       	rcall	.+3024   	; 0x2460 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1890:	e9 eb       	ldi	r30, 0xB9	; 185
    1892:	f3 e2       	ldi	r31, 0x23	; 35
    1894:	86 81       	ldd	r24, Z+6	; 0x06
    1896:	97 81       	ldd	r25, Z+7	; 0x07
    1898:	22 85       	ldd	r18, Z+10	; 0x0a
    189a:	33 85       	ldd	r19, Z+11	; 0x0b
    189c:	82 17       	cp	r24, r18
    189e:	93 07       	cpc	r25, r19
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <udc_process_setup+0x15a>
    18a2:	eb c1       	rjmp	.+982    	; 0x1c7a <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    18a4:	80 93 c3 23 	sts	0x23C3, r24	; 0x8023c3 <udd_g_ctrlreq+0xa>
    18a8:	90 93 c4 23 	sts	0x23C4, r25	; 0x8023c4 <udd_g_ctrlreq+0xb>
    18ac:	e6 c1       	rjmp	.+972    	; 0x1c7a <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    18ae:	21 30       	cpi	r18, 0x01	; 1
    18b0:	31 05       	cpc	r19, r1
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    18b4:	8c c1       	rjmp	.+792    	; 0x1bce <udc_process_setup+0x484>
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	86 ee       	ldi	r24, 0xE6	; 230
    18bc:	91 e2       	ldi	r25, 0x21	; 33
    18be:	d0 d5       	rcall	.+2976   	; 0x2460 <udd_set_setup_payload>
    18c0:	dc c1       	rjmp	.+952    	; 0x1c7a <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	e1 f5       	brne	.+120    	; 0x193e <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    18c6:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    18ca:	9a 30       	cpi	r25, 0x0A	; 10
    18cc:	c1 f5       	brne	.+112    	; 0x193e <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    18ce:	21 30       	cpi	r18, 0x01	; 1
    18d0:	31 05       	cpc	r19, r1
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <udc_process_setup+0x18c>
    18d4:	4c c1       	rjmp	.+664    	; 0x1b6e <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    18d6:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udc_num_configuration>
    18da:	88 23       	and	r24, r24
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <udc_process_setup+0x196>
    18de:	47 c1       	rjmp	.+654    	; 0x1b6e <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18e0:	c0 91 bd 23 	lds	r28, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    18e4:	d0 91 be 23 	lds	r29, 0x23BE	; 0x8023be <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    18e8:	00 91 e4 21 	lds	r16, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    18ec:	10 91 e5 21 	lds	r17, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    18f0:	d8 01       	movw	r26, r16
    18f2:	ed 91       	ld	r30, X+
    18f4:	fc 91       	ld	r31, X
    18f6:	84 81       	ldd	r24, Z+4	; 0x04
    18f8:	c8 17       	cp	r28, r24
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    18fc:	38 c1       	rjmp	.+624    	; 0x1b6e <udc_process_setup+0x424>
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	8c 2f       	mov	r24, r28
    1902:	14 de       	rcall	.-984    	; 0x152c <udc_update_iface_desc>
    1904:	88 23       	and	r24, r24
    1906:	09 f4       	brne	.+2      	; 0x190a <udc_process_setup+0x1c0>
    1908:	2d c1       	rjmp	.+602    	; 0x1b64 <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    190a:	ce 01       	movw	r24, r28
    190c:	99 27       	eor	r25, r25
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	d8 01       	movw	r26, r16
    1914:	12 96       	adiw	r26, 0x02	; 2
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	13 97       	sbiw	r26, 0x03	; 3
    191c:	e8 0f       	add	r30, r24
    191e:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1920:	01 90       	ld	r0, Z+
    1922:	f0 81       	ld	r31, Z
    1924:	e0 2d       	mov	r30, r0
    1926:	86 81       	ldd	r24, Z+6	; 0x06
    1928:	97 81       	ldd	r25, Z+7	; 0x07
    192a:	fc 01       	movw	r30, r24
    192c:	19 95       	eicall
    192e:	80 93 e8 21 	sts	0x21E8, r24	; 0x8021e8 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	88 ee       	ldi	r24, 0xE8	; 232
    1938:	91 e2       	ldi	r25, 0x21	; 33
    193a:	92 d5       	rcall	.+2852   	; 0x2460 <udd_set_setup_payload>
    193c:	9e c1       	rjmp	.+828    	; 0x1c7a <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	09 f0       	breq	.+2      	; 0x1944 <udc_process_setup+0x1fa>
    1942:	10 c1       	rjmp	.+544    	; 0x1b64 <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1944:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1948:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    194a:	05 c1       	rjmp	.+522    	; 0x1b56 <udc_process_setup+0x40c>
    194c:	22 30       	cpi	r18, 0x02	; 2
    194e:	31 05       	cpc	r19, r1
    1950:	09 f0       	breq	.+2      	; 0x1954 <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1952:	3d c1       	rjmp	.+634    	; 0x1bce <udc_process_setup+0x484>
    1954:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    1958:	12 d6       	rcall	.+3108   	; 0x257e <udd_ep_is_halted>
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	80 93 e0 21 	sts	0x21E0, r24	; 0x8021e0 <udc_ep_status.4577>
    1960:	90 93 e1 21 	sts	0x21E1, r25	; 0x8021e1 <udc_ep_status.4577+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1964:	62 e0       	ldi	r22, 0x02	; 2
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	80 ee       	ldi	r24, 0xE0	; 224
    196a:	91 e2       	ldi	r25, 0x21	; 33
    196c:	79 d5       	rcall	.+2802   	; 0x2460 <udd_set_setup_payload>
    196e:	85 c1       	rjmp	.+778    	; 0x1c7a <udc_process_setup+0x530>
    1970:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1972:	09 f0       	breq	.+2      	; 0x1976 <udc_process_setup+0x22c>
    1974:	9f c0       	rjmp	.+318    	; 0x1ab4 <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1976:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    197a:	93 30       	cpi	r25, 0x03	; 3
    197c:	91 f1       	breq	.+100    	; 0x19e2 <udc_process_setup+0x298>
    197e:	18 f4       	brcc	.+6      	; 0x1986 <udc_process_setup+0x23c>
    1980:	91 30       	cpi	r25, 0x01	; 1
    1982:	a9 f0       	breq	.+42     	; 0x19ae <udc_process_setup+0x264>
    1984:	97 c0       	rjmp	.+302    	; 0x1ab4 <udc_process_setup+0x36a>
    1986:	95 30       	cpi	r25, 0x05	; 5
    1988:	21 f0       	breq	.+8      	; 0x1992 <udc_process_setup+0x248>
    198a:	99 30       	cpi	r25, 0x09	; 9
    198c:	09 f4       	brne	.+2      	; 0x1990 <udc_process_setup+0x246>
    198e:	43 c0       	rjmp	.+134    	; 0x1a16 <udc_process_setup+0x2cc>
    1990:	91 c0       	rjmp	.+290    	; 0x1ab4 <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1992:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1996:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    199a:	89 2b       	or	r24, r25
    199c:	09 f0       	breq	.+2      	; 0x19a0 <udc_process_setup+0x256>
    199e:	17 c1       	rjmp	.+558    	; 0x1bce <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    19a0:	81 e9       	ldi	r24, 0x91	; 145
    19a2:	9a e0       	ldi	r25, 0x0A	; 10
    19a4:	80 93 c5 23 	sts	0x23C5, r24	; 0x8023c5 <udd_g_ctrlreq+0xc>
    19a8:	90 93 c6 23 	sts	0x23C6, r25	; 0x8023c6 <udd_g_ctrlreq+0xd>
    19ac:	66 c1       	rjmp	.+716    	; 0x1c7a <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19ae:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    19b2:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    19b6:	89 2b       	or	r24, r25
    19b8:	09 f0       	breq	.+2      	; 0x19bc <udc_process_setup+0x272>
    19ba:	09 c1       	rjmp	.+530    	; 0x1bce <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    19bc:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    19c0:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	09 f0       	breq	.+2      	; 0x19ca <udc_process_setup+0x280>
    19c8:	02 c1       	rjmp	.+516    	; 0x1bce <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    19ca:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <udc_device_status>
    19ce:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <udc_device_status+0x1>
    19d2:	8d 7f       	andi	r24, 0xFD	; 253
    19d4:	80 93 ea 21 	sts	0x21EA, r24	; 0x8021ea <udc_device_status>
    19d8:	90 93 eb 21 	sts	0x21EB, r25	; 0x8021eb <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    19dc:	0e 94 48 16 	call	0x2c90	; 0x2c90 <main_remotewakeup_disable>
    19e0:	4c c1       	rjmp	.+664    	; 0x1c7a <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19e2:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    19e6:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    19ea:	89 2b       	or	r24, r25
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <udc_process_setup+0x2a6>
    19ee:	ef c0       	rjmp	.+478    	; 0x1bce <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    19f0:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    19f4:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	09 f0       	breq	.+2      	; 0x19fe <udc_process_setup+0x2b4>
    19fc:	ae c0       	rjmp	.+348    	; 0x1b5a <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    19fe:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <udc_device_status>
    1a02:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <udc_device_status+0x1>
    1a06:	82 60       	ori	r24, 0x02	; 2
    1a08:	80 93 ea 21 	sts	0x21EA, r24	; 0x8021ea <udc_device_status>
    1a0c:	90 93 eb 21 	sts	0x21EB, r25	; 0x8021eb <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1a10:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1a14:	32 c1       	rjmp	.+612    	; 0x1c7a <udc_process_setup+0x530>
    1a16:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1a1a:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1a1e:	89 2b       	or	r24, r25
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1a22:	d5 c0       	rjmp	.+426    	; 0x1bce <udc_process_setup+0x484>
    1a24:	1a d5       	rcall	.+2612   	; 0x245a <udd_getaddress>
    1a26:	88 23       	and	r24, r24
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <udc_process_setup+0x2e2>
    1a2a:	9c c0       	rjmp	.+312    	; 0x1b64 <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a2c:	20 91 bb 23 	lds	r18, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1a30:	30 91 bc 23 	lds	r19, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1a34:	33 27       	eor	r19, r19
    1a36:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1a3a:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a3e:	81 89       	ldd	r24, Z+17	; 0x11
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	82 17       	cp	r24, r18
    1a44:	93 07       	cpc	r25, r19
    1a46:	08 f4       	brcc	.+2      	; 0x1a4a <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1a48:	8d c0       	rjmp	.+282    	; 0x1b64 <udc_process_setup+0x41a>
    1a4a:	25 de       	rcall	.-950    	; 0x1696 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1a4c:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1a50:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1a54:	80 93 e6 21 	sts	0x21E6, r24	; 0x8021e6 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1a58:	88 23       	and	r24, r24
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <udc_process_setup+0x314>
    1a5c:	0e c1       	rjmp	.+540    	; 0x1c7a <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1a5e:	99 27       	eor	r25, r25
    1a60:	81 50       	subi	r24, 0x01	; 1
    1a62:	90 4c       	sbci	r25, 0xC0	; 192
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1a70:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1a74:	e8 0f       	add	r30, r24
    1a76:	f9 1f       	adc	r31, r25
    1a78:	e0 93 e4 21 	sts	0x21E4, r30	; 0x8021e4 <udc_ptr_conf>
    1a7c:	f0 93 e5 21 	sts	0x21E5, r31	; 0x8021e5 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a80:	01 90       	ld	r0, Z+
    1a82:	f0 81       	ld	r31, Z
    1a84:	e0 2d       	mov	r30, r0
    1a86:	84 81       	ldd	r24, Z+4	; 0x04
    1a88:	88 23       	and	r24, r24
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <udc_process_setup+0x344>
    1a8c:	f6 c0       	rjmp	.+492    	; 0x1c7a <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1a8e:	c0 e0       	ldi	r28, 0x00	; 0
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	8c 2f       	mov	r24, r28
    1a94:	c7 dd       	rcall	.-1138   	; 0x1624 <udc_iface_enable>
    1a96:	88 23       	and	r24, r24
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <udc_process_setup+0x352>
    1a9a:	64 c0       	rjmp	.+200    	; 0x1b64 <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1a9c:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a9e:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1aa2:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    1aa6:	01 90       	ld	r0, Z+
    1aa8:	f0 81       	ld	r31, Z
    1aaa:	e0 2d       	mov	r30, r0
    1aac:	84 81       	ldd	r24, Z+4	; 0x04
    1aae:	c8 17       	cp	r28, r24
    1ab0:	78 f3       	brcs	.-34     	; 0x1a90 <udc_process_setup+0x346>
    1ab2:	e3 c0       	rjmp	.+454    	; 0x1c7a <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	e9 f4       	brne	.+58     	; 0x1af2 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ab8:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1abc:	9b 30       	cpi	r25, 0x0B	; 11
    1abe:	c9 f4       	brne	.+50     	; 0x1af2 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1ac0:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1ac4:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1ac8:	89 2b       	or	r24, r25
    1aca:	09 f0       	breq	.+2      	; 0x1ace <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1acc:	50 c0       	rjmp	.+160    	; 0x1b6e <udc_process_setup+0x424>
    1ace:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udc_num_configuration>
    1ad2:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <udc_process_setup+0x38e>
    1ad6:	4b c0       	rjmp	.+150    	; 0x1b6e <udc_process_setup+0x424>
    1ad8:	e9 eb       	ldi	r30, 0xB9	; 185
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1ada:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1adc:	c4 81       	ldd	r28, Z+4	; 0x04
    1ade:	d2 81       	ldd	r29, Z+2	; 0x02
    1ae0:	8c 2f       	mov	r24, r28
    1ae2:	5e dd       	rcall	.-1348   	; 0x15a0 <udc_iface_disable>
    1ae4:	88 23       	and	r24, r24
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1ae8:	3d c0       	rjmp	.+122    	; 0x1b64 <udc_process_setup+0x41a>
    1aea:	6d 2f       	mov	r22, r29
    1aec:	8c 2f       	mov	r24, r28
    1aee:	9a dd       	rcall	.-1228   	; 0x1624 <udc_iface_enable>
    1af0:	37 c0       	rjmp	.+110    	; 0x1b60 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1af2:	82 30       	cpi	r24, 0x02	; 2
    1af4:	b9 f5       	brne	.+110    	; 0x1b64 <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1af6:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <udc_process_setup+0x3ba>
    1afe:	83 30       	cpi	r24, 0x03	; 3
    1b00:	99 f0       	breq	.+38     	; 0x1b28 <udc_process_setup+0x3de>
    1b02:	2d c0       	rjmp	.+90     	; 0x1b5e <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b04:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1b08:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1b0c:	89 2b       	or	r24, r25
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1b10:	5e c0       	rjmp	.+188    	; 0x1bce <udc_process_setup+0x484>
    1b12:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1b16:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1b1a:	89 2b       	or	r24, r25
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b1e:	57 c0       	rjmp	.+174    	; 0x1bce <udc_process_setup+0x484>
    1b20:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    1b24:	47 d5       	rcall	.+2702   	; 0x25b4 <udd_ep_clear_halt>
    1b26:	1c c0       	rjmp	.+56     	; 0x1b60 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b28:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1b2c:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1b30:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <udc_process_setup+0x3ec>
    1b34:	4c c0       	rjmp	.+152    	; 0x1bce <udc_process_setup+0x484>
    1b36:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1b3a:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1b3e:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <udc_process_setup+0x3fa>
    1b42:	45 c0       	rjmp	.+138    	; 0x1bce <udc_process_setup+0x484>
    1b44:	c9 eb       	ldi	r28, 0xB9	; 185
    1b46:	d3 e2       	ldi	r29, 0x23	; 35
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b4a:	35 d6       	rcall	.+3178   	; 0x27b6 <udd_ep_abort>
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9e d6       	rcall	.+3388   	; 0x288c <udd_ep_set_halt>
    1b50:	07 c0       	rjmp	.+14     	; 0x1b60 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	05 c0       	rjmp	.+10     	; 0x1b60 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1b60:	81 11       	cpse	r24, r1
    1b62:	8c c0       	rjmp	.+280    	; 0x1c7c <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1b64:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    1b68:	8f 71       	andi	r24, 0x1F	; 31
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	81 f5       	brne	.+96     	; 0x1bce <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b6e:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udc_num_configuration>
    1b72:	88 23       	and	r24, r24
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b76:	71 c0       	rjmp	.+226    	; 0x1c5a <udc_process_setup+0x510>
    1b78:	00 91 bd 23 	lds	r16, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    1b7c:	10 91 be 23 	lds	r17, 0x23BE	; 0x8023be <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b80:	c0 91 e4 21 	lds	r28, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1b84:	d0 91 e5 21 	lds	r29, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    1b88:	e8 81       	ld	r30, Y
    1b8a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b8c:	84 81       	ldd	r24, Z+4	; 0x04
    1b8e:	08 17       	cp	r16, r24
    1b90:	08 f0       	brcs	.+2      	; 0x1b94 <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b92:	65 c0       	rjmp	.+202    	; 0x1c5e <udc_process_setup+0x514>
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	80 2f       	mov	r24, r16
    1b98:	c9 dc       	rcall	.-1646   	; 0x152c <udc_update_iface_desc>
    1b9a:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b9c:	c1 f0       	breq	.+48     	; 0x1bce <udc_process_setup+0x484>
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	ff 27       	eor	r31, r31
    1ba2:	cf 01       	movw	r24, r30
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	ea 81       	ldd	r30, Y+2	; 0x02
    1baa:	fb 81       	ldd	r31, Y+3	; 0x03
    1bac:	e8 0f       	add	r30, r24
    1bae:	f9 1f       	adc	r31, r25
    1bb0:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1bb2:	d1 81       	ldd	r29, Z+1	; 0x01
    1bb4:	ee 81       	ldd	r30, Y+6	; 0x06
    1bb6:	ff 81       	ldd	r31, Y+7	; 0x07
    1bb8:	19 95       	eicall
    1bba:	68 2f       	mov	r22, r24
    1bbc:	80 2f       	mov	r24, r16
    1bbe:	b6 dc       	rcall	.-1684   	; 0x152c <udc_update_iface_desc>
    1bc0:	88 23       	and	r24, r24
    1bc2:	29 f0       	breq	.+10     	; 0x1bce <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1bc4:	ec 81       	ldd	r30, Y+4	; 0x04
    1bc6:	fd 81       	ldd	r31, Y+5	; 0x05
    1bc8:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1bca:	81 11       	cpse	r24, r1
    1bcc:	57 c0       	rjmp	.+174    	; 0x1c7c <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1bce:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    1bd2:	8f 71       	andi	r24, 0x1F	; 31
    1bd4:	82 30       	cpi	r24, 0x02	; 2
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <udc_process_setup+0x490>
    1bd8:	44 c0       	rjmp	.+136    	; 0x1c62 <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1bda:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udc_num_configuration>
    1bde:	88 23       	and	r24, r24
    1be0:	b1 f1       	breq	.+108    	; 0x1c4e <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1be2:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1be6:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    1bea:	ed 91       	ld	r30, X+
    1bec:	fc 91       	ld	r31, X
    1bee:	11 97       	sbiw	r26, 0x01	; 1
    1bf0:	84 81       	ldd	r24, Z+4	; 0x04
    1bf2:	88 23       	and	r24, r24
    1bf4:	71 f1       	breq	.+92     	; 0x1c52 <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bf6:	c0 e0       	ldi	r28, 0x00	; 0
    1bf8:	ec 2f       	mov	r30, r28
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	ee 0f       	add	r30, r30
    1bfe:	ff 1f       	adc	r31, r31
    1c00:	12 96       	adiw	r26, 0x02	; 2
    1c02:	8d 91       	ld	r24, X+
    1c04:	9c 91       	ld	r25, X
    1c06:	13 97       	sbiw	r26, 0x03	; 3
    1c08:	e8 0f       	add	r30, r24
    1c0a:	f9 1f       	adc	r31, r25
    1c0c:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c0e:	11 81       	ldd	r17, Z+1	; 0x01
    1c10:	d8 01       	movw	r26, r16
    1c12:	16 96       	adiw	r26, 0x06	; 6
    1c14:	ed 91       	ld	r30, X+
    1c16:	fc 91       	ld	r31, X
    1c18:	17 97       	sbiw	r26, 0x07	; 7
    1c1a:	19 95       	eicall
    1c1c:	68 2f       	mov	r22, r24
    1c1e:	8c 2f       	mov	r24, r28
    1c20:	85 dc       	rcall	.-1782   	; 0x152c <udc_update_iface_desc>
    1c22:	88 23       	and	r24, r24
    1c24:	59 f1       	breq	.+86     	; 0x1c7c <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1c26:	d8 01       	movw	r26, r16
    1c28:	14 96       	adiw	r26, 0x04	; 4
    1c2a:	ed 91       	ld	r30, X+
    1c2c:	fc 91       	ld	r31, X
    1c2e:	15 97       	sbiw	r26, 0x05	; 5
    1c30:	19 95       	eicall
    1c32:	81 11       	cpse	r24, r1
    1c34:	23 c0       	rjmp	.+70     	; 0x1c7c <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c36:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c38:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1c3c:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    1c40:	ed 91       	ld	r30, X+
    1c42:	fc 91       	ld	r31, X
    1c44:	11 97       	sbiw	r26, 0x01	; 1
    1c46:	94 81       	ldd	r25, Z+4	; 0x04
    1c48:	c9 17       	cp	r28, r25
    1c4a:	b0 f2       	brcs	.-84     	; 0x1bf8 <udc_process_setup+0x4ae>
    1c4c:	17 c0       	rjmp	.+46     	; 0x1c7c <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	15 c0       	rjmp	.+42     	; 0x1c7c <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	13 c0       	rjmp	.+38     	; 0x1c7c <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	11 c0       	rjmp	.+34     	; 0x1c7c <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	0f c0       	rjmp	.+30     	; 0x1c7c <udc_process_setup+0x532>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	0d c0       	rjmp	.+26     	; 0x1c7c <udc_process_setup+0x532>
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	0b c0       	rjmp	.+22     	; 0x1c7c <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1c66:	98 2f       	mov	r25, r24
    1c68:	90 76       	andi	r25, 0x60	; 96
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <udc_process_setup+0x524>
    1c6c:	7b cf       	rjmp	.-266    	; 0x1b64 <udc_process_setup+0x41a>
    1c6e:	80 ce       	rjmp	.-768    	; 0x1970 <udc_process_setup+0x226>
    1c70:	98 2f       	mov	r25, r24
    1c72:	90 76       	andi	r25, 0x60	; 96
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <udc_process_setup+0x52e>
    1c76:	76 cf       	rjmp	.-276    	; 0x1b64 <udc_process_setup+0x41a>
    1c78:	81 cd       	rjmp	.-1278   	; 0x177c <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	08 95       	ret

00001c86 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1c86:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1c8a:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1c8c:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1c8e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1c92:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1c94:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1c98:	08 95       	ret

00001c9a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1c9a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1c9c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1c9e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1ca0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1ca2:	60 83       	st	Z, r22
	ret                             // Return to caller
    1ca4:	08 95       	ret

00001ca6 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	1f 92       	push	r1
    1cac:	1f 92       	push	r1
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	81 11       	cpse	r24, r1
    1cb4:	26 c0       	rjmp	.+76     	; 0x1d02 <udd_sleep_mode+0x5c>
    1cb6:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <udd_b_idle>
    1cba:	99 23       	and	r25, r25
    1cbc:	f9 f0       	breq	.+62     	; 0x1cfc <udd_sleep_mode+0x56>
    1cbe:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <sleepmgr_locks+0x1>
    1cc2:	91 11       	cpse	r25, r1
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <udd_sleep_mode+0x22>
    1cc6:	ff cf       	rjmp	.-2      	; 0x1cc6 <udd_sleep_mode+0x20>
    1cc8:	9f b7       	in	r25, 0x3f	; 63
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	f8 94       	cli
    1cce:	2a 81       	ldd	r18, Y+2	; 0x02
    1cd0:	e3 eb       	ldi	r30, 0xB3	; 179
    1cd2:	f3 e2       	ldi	r31, 0x23	; 35
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	91 50       	subi	r25, 0x01	; 1
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	2f bf       	out	0x3f, r18	; 63
    1cdc:	0f c0       	rjmp	.+30     	; 0x1cfc <udd_sleep_mode+0x56>
    1cde:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <sleepmgr_locks+0x1>
    1ce2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <udd_sleep_mode+0x42>
    1ce6:	ff cf       	rjmp	.-2      	; 0x1ce6 <udd_sleep_mode+0x40>
    1ce8:	9f b7       	in	r25, 0x3f	; 63
    1cea:	99 83       	std	Y+1, r25	; 0x01
    1cec:	f8 94       	cli
    1cee:	29 81       	ldd	r18, Y+1	; 0x01
    1cf0:	e3 eb       	ldi	r30, 0xB3	; 179
    1cf2:	f3 e2       	ldi	r31, 0x23	; 35
    1cf4:	91 81       	ldd	r25, Z+1	; 0x01
    1cf6:	9f 5f       	subi	r25, 0xFF	; 255
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	2f bf       	out	0x3f, r18	; 63
    1cfc:	80 93 ac 23 	sts	0x23AC, r24	; 0x8023ac <udd_b_idle>
    1d00:	05 c0       	rjmp	.+10     	; 0x1d0c <udd_sleep_mode+0x66>
    1d02:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <udd_b_idle>
    1d06:	99 23       	and	r25, r25
    1d08:	51 f3       	breq	.-44     	; 0x1cde <udd_sleep_mode+0x38>
    1d0a:	f8 cf       	rjmp	.-16     	; 0x1cfc <udd_sleep_mode+0x56>
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	08 95       	ret

00001d16 <udd_ctrl_init>:
    1d16:	0f 93       	push	r16
    1d18:	e8 ec       	ldi	r30, 0xC8	; 200
    1d1a:	f4 e0       	ldi	r31, 0x04	; 4
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8f 7d       	andi	r24, 0xDF	; 223
    1d20:	80 83       	st	Z, r24
    1d22:	80 81       	ld	r24, Z
    1d24:	8f 7d       	andi	r24, 0xDF	; 223
    1d26:	80 83       	st	Z, r24
    1d28:	e0 e6       	ldi	r30, 0x60	; 96
    1d2a:	f3 e2       	ldi	r31, 0x23	; 35
    1d2c:	02 e0       	ldi	r16, 0x02	; 2
    1d2e:	05 93       	las	Z, r16
    1d30:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <udd_sram+0x1e>
    1d34:	10 92 63 23 	sts	0x2363, r1	; 0x802363 <udd_sram+0x1f>
    1d38:	00 e2       	ldi	r16, 0x20	; 32
    1d3a:	06 93       	lac	Z, r16
    1d3c:	00 e4       	ldi	r16, 0x40	; 64
    1d3e:	06 93       	lac	Z, r16
    1d40:	e8 e5       	ldi	r30, 0x58	; 88
    1d42:	f3 e2       	ldi	r31, 0x23	; 35
    1d44:	00 e4       	ldi	r16, 0x40	; 64
    1d46:	06 93       	lac	Z, r16
    1d48:	e9 eb       	ldi	r30, 0xB9	; 185
    1d4a:	f3 e2       	ldi	r31, 0x23	; 35
    1d4c:	14 86       	std	Z+12, r1	; 0x0c
    1d4e:	15 86       	std	Z+13, r1	; 0x0d
    1d50:	16 86       	std	Z+14, r1	; 0x0e
    1d52:	17 86       	std	Z+15, r1	; 0x0f
    1d54:	12 86       	std	Z+10, r1	; 0x0a
    1d56:	13 86       	std	Z+11, r1	; 0x0b
    1d58:	10 92 41 23 	sts	0x2341, r1	; 0x802341 <udd_ep_control_state>
    1d5c:	0f 91       	pop	r16
    1d5e:	08 95       	ret

00001d60 <udd_ctrl_stall_data>:
    1d60:	0f 93       	push	r16
    1d62:	85 e0       	ldi	r24, 0x05	; 5
    1d64:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ep_control_state>
    1d68:	e1 e6       	ldi	r30, 0x61	; 97
    1d6a:	f3 e2       	ldi	r31, 0x23	; 35
    1d6c:	04 e0       	ldi	r16, 0x04	; 4
    1d6e:	05 93       	las	Z, r16
    1d70:	e9 e5       	ldi	r30, 0x59	; 89
    1d72:	f3 e2       	ldi	r31, 0x23	; 35
    1d74:	04 e0       	ldi	r16, 0x04	; 4
    1d76:	05 93       	las	Z, r16
    1d78:	0f 91       	pop	r16
    1d7a:	08 95       	ret

00001d7c <udd_ctrl_send_zlp_in>:
    1d7c:	0f 93       	push	r16
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ep_control_state>
    1d84:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <udd_sram+0x1e>
    1d88:	10 92 63 23 	sts	0x2363, r1	; 0x802363 <udd_sram+0x1f>
    1d8c:	e0 e6       	ldi	r30, 0x60	; 96
    1d8e:	f3 e2       	ldi	r31, 0x23	; 35
    1d90:	02 e0       	ldi	r16, 0x02	; 2
    1d92:	06 93       	lac	Z, r16
    1d94:	0f 91       	pop	r16
    1d96:	08 95       	ret

00001d98 <udd_ctrl_endofrequest>:
    1d98:	e0 91 c5 23 	lds	r30, 0x23C5	; 0x8023c5 <udd_g_ctrlreq+0xc>
    1d9c:	f0 91 c6 23 	lds	r31, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0xd>
    1da0:	30 97       	sbiw	r30, 0x00	; 0
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <udd_ctrl_endofrequest+0xe>
    1da4:	19 95       	eicall
    1da6:	08 95       	ret

00001da8 <udd_ctrl_in_sent>:
    1da8:	0f 93       	push	r16
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ep_control_state>
    1db2:	83 30       	cpi	r24, 0x03	; 3
    1db4:	19 f4       	brne	.+6      	; 0x1dbc <udd_ctrl_in_sent+0x14>
    1db6:	f0 df       	rcall	.-32     	; 0x1d98 <udd_ctrl_endofrequest>
    1db8:	ae df       	rcall	.-164    	; 0x1d16 <udd_ctrl_init>
    1dba:	5e c0       	rjmp	.+188    	; 0x1e78 <udd_ctrl_in_sent+0xd0>
    1dbc:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <udd_ctrl_payload_nb_trans>
    1dc0:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    1dc4:	c0 91 c3 23 	lds	r28, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    1dc8:	d0 91 c4 23 	lds	r29, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1dcc:	c8 1b       	sub	r28, r24
    1dce:	d9 0b       	sbc	r29, r25
    1dd0:	71 f5       	brne	.+92     	; 0x1e2e <udd_ctrl_in_sent+0x86>
    1dd2:	20 91 3f 23 	lds	r18, 0x233F	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
    1dd6:	30 91 40 23 	lds	r19, 0x2340	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    1dda:	82 0f       	add	r24, r18
    1ddc:	93 1f       	adc	r25, r19
    1dde:	80 93 3f 23 	sts	0x233F, r24	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
    1de2:	90 93 40 23 	sts	0x2340, r25	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    1de6:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1dea:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1dee:	82 17       	cp	r24, r18
    1df0:	93 07       	cpc	r25, r19
    1df2:	21 f0       	breq	.+8      	; 0x1dfc <udd_ctrl_in_sent+0x54>
    1df4:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <b_shortpacket.5293>
    1df8:	88 23       	and	r24, r24
    1dfa:	41 f0       	breq	.+16     	; 0x1e0c <udd_ctrl_in_sent+0x64>
    1dfc:	84 e0       	ldi	r24, 0x04	; 4
    1dfe:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ep_control_state>
    1e02:	e8 e5       	ldi	r30, 0x58	; 88
    1e04:	f3 e2       	ldi	r31, 0x23	; 35
    1e06:	02 e0       	ldi	r16, 0x02	; 2
    1e08:	06 93       	lac	Z, r16
    1e0a:	36 c0       	rjmp	.+108    	; 0x1e78 <udd_ctrl_in_sent+0xd0>
    1e0c:	e0 91 c7 23 	lds	r30, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0xe>
    1e10:	f0 91 c8 23 	lds	r31, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0xf>
    1e14:	30 97       	sbiw	r30, 0x00	; 0
    1e16:	99 f0       	breq	.+38     	; 0x1e3e <udd_ctrl_in_sent+0x96>
    1e18:	19 95       	eicall
    1e1a:	88 23       	and	r24, r24
    1e1c:	81 f0       	breq	.+32     	; 0x1e3e <udd_ctrl_in_sent+0x96>
    1e1e:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <udd_ctrl_payload_nb_trans>
    1e22:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    1e26:	c0 91 c3 23 	lds	r28, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    1e2a:	d0 91 c4 23 	lds	r29, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1e2e:	c8 30       	cpi	r28, 0x08	; 8
    1e30:	d1 05       	cpc	r29, r1
    1e32:	28 f0       	brcs	.+10     	; 0x1e3e <udd_ctrl_in_sent+0x96>
    1e34:	10 92 ec 21 	sts	0x21EC, r1	; 0x8021ec <b_shortpacket.5293>
    1e38:	c8 e0       	ldi	r28, 0x08	; 8
    1e3a:	d0 e0       	ldi	r29, 0x00	; 0
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <udd_ctrl_in_sent+0x9c>
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	80 93 ec 21 	sts	0x21EC, r24	; 0x8021ec <b_shortpacket.5293>
    1e44:	e4 e4       	ldi	r30, 0x44	; 68
    1e46:	f3 e2       	ldi	r31, 0x23	; 35
    1e48:	c6 8f       	std	Z+30, r28	; 0x1e
    1e4a:	d7 8f       	std	Z+31, r29	; 0x1f
    1e4c:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <udd_ctrl_payload_nb_trans>
    1e50:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    1e54:	20 91 c1 23 	lds	r18, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    1e58:	30 91 c2 23 	lds	r19, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    1e5c:	28 0f       	add	r18, r24
    1e5e:	39 1f       	adc	r19, r25
    1e60:	20 a3       	std	Z+32, r18	; 0x20
    1e62:	31 a3       	std	Z+33, r19	; 0x21
    1e64:	c8 0f       	add	r28, r24
    1e66:	d9 1f       	adc	r29, r25
    1e68:	c0 93 3d 23 	sts	0x233D, r28	; 0x80233d <udd_ctrl_payload_nb_trans>
    1e6c:	d0 93 3e 23 	sts	0x233E, r29	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    1e70:	e0 e6       	ldi	r30, 0x60	; 96
    1e72:	f3 e2       	ldi	r31, 0x23	; 35
    1e74:	02 e0       	ldi	r16, 0x02	; 2
    1e76:	06 93       	lac	Z, r16
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	0f 91       	pop	r16
    1e7e:	08 95       	ret

00001e80 <udd_ep_get_size>:
    1e80:	fc 01       	movw	r30, r24
    1e82:	81 81       	ldd	r24, Z+1	; 0x01
    1e84:	e8 2f       	mov	r30, r24
    1e86:	e7 70       	andi	r30, 0x07	; 7
    1e88:	8e 2f       	mov	r24, r30
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	31 97       	sbiw	r30, 0x01	; 1
    1e90:	e7 30       	cpi	r30, 0x07	; 7
    1e92:	f1 05       	cpc	r31, r1
    1e94:	d0 f4       	brcc	.+52     	; 0x1eca <udd_ep_get_size+0x4a>
    1e96:	88 27       	eor	r24, r24
    1e98:	e9 5f       	subi	r30, 0xF9	; 249
    1e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9e:	22 c7       	rjmp	.+3652   	; 0x2ce4 <__tablejump2__>
    1ea0:	80 e1       	ldi	r24, 0x10	; 16
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	08 95       	ret
    1ea6:	80 e2       	ldi	r24, 0x20	; 32
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	08 95       	ret
    1eac:	80 e4       	ldi	r24, 0x40	; 64
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	08 95       	ret
    1eb2:	80 e8       	ldi	r24, 0x80	; 128
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	08 95       	ret
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	91 e0       	ldi	r25, 0x01	; 1
    1ebc:	08 95       	ret
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	92 e0       	ldi	r25, 0x02	; 2
    1ec2:	08 95       	ret
    1ec4:	8f ef       	ldi	r24, 0xFF	; 255
    1ec6:	93 e0       	ldi	r25, 0x03	; 3
    1ec8:	08 95       	ret
    1eca:	88 e0       	ldi	r24, 0x08	; 8
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	08 95       	ret

00001ed0 <udd_ep_get_job>:
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	2f 70       	andi	r18, 0x0F	; 15
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	22 0f       	add	r18, r18
    1ed8:	33 1f       	adc	r19, r19
    1eda:	08 2e       	mov	r0, r24
    1edc:	00 0c       	add	r0, r0
    1ede:	99 0b       	sbc	r25, r25
    1ee0:	88 27       	eor	r24, r24
    1ee2:	99 0f       	add	r25, r25
    1ee4:	88 1f       	adc	r24, r24
    1ee6:	99 27       	eor	r25, r25
    1ee8:	82 0f       	add	r24, r18
    1eea:	93 1f       	adc	r25, r19
    1eec:	02 97       	sbiw	r24, 0x02	; 2
    1eee:	9c 01       	movw	r18, r24
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	22 0f       	add	r18, r18
    1ef6:	33 1f       	adc	r19, r19
    1ef8:	22 0f       	add	r18, r18
    1efa:	33 1f       	adc	r19, r19
    1efc:	82 0f       	add	r24, r18
    1efe:	93 1f       	adc	r25, r19
    1f00:	83 51       	subi	r24, 0x13	; 19
    1f02:	9d 4d       	sbci	r25, 0xDD	; 221
    1f04:	08 95       	ret

00001f06 <udd_ctrl_interrupt_tc_setup>:
    1f06:	0f 93       	push	r16
    1f08:	cf 93       	push	r28
    1f0a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1f0e:	80 ff       	sbrs	r24, 0
    1f10:	64 c0       	rjmp	.+200    	; 0x1fda <udd_ctrl_interrupt_tc_setup+0xd4>
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1f18:	e8 e5       	ldi	r30, 0x58	; 88
    1f1a:	f3 e2       	ldi	r31, 0x23	; 35
    1f1c:	00 e8       	ldi	r16, 0x80	; 128
    1f1e:	06 93       	lac	Z, r16
    1f20:	e0 e6       	ldi	r30, 0x60	; 96
    1f22:	f3 e2       	ldi	r31, 0x23	; 35
    1f24:	00 e8       	ldi	r16, 0x80	; 128
    1f26:	06 93       	lac	Z, r16
    1f28:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1f2c:	e8 e5       	ldi	r30, 0x58	; 88
    1f2e:	f3 e2       	ldi	r31, 0x23	; 35
    1f30:	00 e1       	ldi	r16, 0x10	; 16
    1f32:	06 93       	lac	Z, r16
    1f34:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ep_control_state>
    1f38:	88 23       	and	r24, r24
    1f3a:	29 f0       	breq	.+10     	; 0x1f46 <udd_ctrl_interrupt_tc_setup+0x40>
    1f3c:	83 50       	subi	r24, 0x03	; 3
    1f3e:	82 30       	cpi	r24, 0x02	; 2
    1f40:	08 f4       	brcc	.+2      	; 0x1f44 <udd_ctrl_interrupt_tc_setup+0x3e>
    1f42:	2a df       	rcall	.-428    	; 0x1d98 <udd_ctrl_endofrequest>
    1f44:	e8 de       	rcall	.-560    	; 0x1d16 <udd_ctrl_init>
    1f46:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <udd_sram+0x16>
    1f4a:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <udd_sram+0x17>
    1f4e:	08 97       	sbiw	r24, 0x08	; 8
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <udd_ctrl_interrupt_tc_setup+0x4e>
    1f52:	45 c0       	rjmp	.+138    	; 0x1fde <udd_ctrl_interrupt_tc_setup+0xd8>
    1f54:	88 e0       	ldi	r24, 0x08	; 8
    1f56:	e5 e3       	ldi	r30, 0x35	; 53
    1f58:	f3 e2       	ldi	r31, 0x23	; 35
    1f5a:	a9 eb       	ldi	r26, 0xB9	; 185
    1f5c:	b3 e2       	ldi	r27, 0x23	; 35
    1f5e:	01 90       	ld	r0, Z+
    1f60:	0d 92       	st	X+, r0
    1f62:	8a 95       	dec	r24
    1f64:	e1 f7       	brne	.-8      	; 0x1f5e <udd_ctrl_interrupt_tc_setup+0x58>
    1f66:	e8 ec       	ldi	r30, 0xC8	; 200
    1f68:	f4 e0       	ldi	r31, 0x04	; 4
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 62       	ori	r24, 0x20	; 32
    1f6e:	80 83       	st	Z, r24
    1f70:	80 81       	ld	r24, Z
    1f72:	80 62       	ori	r24, 0x20	; 32
    1f74:	80 83       	st	Z, r24
    1f76:	e9 db       	rcall	.-2094   	; 0x174a <udc_process_setup>
    1f78:	c8 2f       	mov	r28, r24
    1f7a:	81 11       	cpse	r24, r1
    1f7c:	03 c0       	rjmp	.+6      	; 0x1f84 <udd_ctrl_interrupt_tc_setup+0x7e>
    1f7e:	f0 de       	rcall	.-544    	; 0x1d60 <udd_ctrl_stall_data>
    1f80:	c1 e0       	ldi	r28, 0x01	; 1
    1f82:	2e c0       	rjmp	.+92     	; 0x1fe0 <udd_ctrl_interrupt_tc_setup+0xda>
    1f84:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    1f88:	88 23       	and	r24, r24
    1f8a:	6c f4       	brge	.+26     	; 0x1fa6 <udd_ctrl_interrupt_tc_setup+0xa0>
    1f8c:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
    1f90:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f94:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <udd_ctrl_payload_nb_trans>
    1f98:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ep_control_state>
    1fa2:	02 df       	rcall	.-508    	; 0x1da8 <udd_ctrl_in_sent>
    1fa4:	1d c0       	rjmp	.+58     	; 0x1fe0 <udd_ctrl_interrupt_tc_setup+0xda>
    1fa6:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1faa:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1fae:	89 2b       	or	r24, r25
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <udd_ctrl_interrupt_tc_setup+0xb0>
    1fb2:	e4 de       	rcall	.-568    	; 0x1d7c <udd_ctrl_send_zlp_in>
    1fb4:	15 c0       	rjmp	.+42     	; 0x1fe0 <udd_ctrl_interrupt_tc_setup+0xda>
    1fb6:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
    1fba:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fbe:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <udd_ctrl_payload_nb_trans>
    1fc2:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ep_control_state>
    1fcc:	e8 e5       	ldi	r30, 0x58	; 88
    1fce:	f3 e2       	ldi	r31, 0x23	; 35
    1fd0:	02 e0       	ldi	r16, 0x02	; 2
    1fd2:	06 93       	lac	Z, r16
    1fd4:	00 e2       	ldi	r16, 0x20	; 32
    1fd6:	06 93       	lac	Z, r16
    1fd8:	03 c0       	rjmp	.+6      	; 0x1fe0 <udd_ctrl_interrupt_tc_setup+0xda>
    1fda:	c0 e0       	ldi	r28, 0x00	; 0
    1fdc:	01 c0       	rjmp	.+2      	; 0x1fe0 <udd_ctrl_interrupt_tc_setup+0xda>
    1fde:	c1 e0       	ldi	r28, 0x01	; 1
    1fe0:	8c 2f       	mov	r24, r28
    1fe2:	cf 91       	pop	r28
    1fe4:	0f 91       	pop	r16
    1fe6:	08 95       	ret

00001fe8 <udd_ep_trans_complet>:
    1fe8:	8f 92       	push	r8
    1fea:	9f 92       	push	r9
    1fec:	af 92       	push	r10
    1fee:	bf 92       	push	r11
    1ff0:	df 92       	push	r13
    1ff2:	ef 92       	push	r14
    1ff4:	ff 92       	push	r15
    1ff6:	0f 93       	push	r16
    1ff8:	1f 93       	push	r17
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	d8 2e       	mov	r13, r24
    2000:	67 df       	rcall	.-306    	; 0x1ed0 <udd_ep_get_job>
    2002:	8c 01       	movw	r16, r24
    2004:	cd 2d       	mov	r28, r13
    2006:	cf 70       	andi	r28, 0x0F	; 15
    2008:	d0 e0       	ldi	r29, 0x00	; 0
    200a:	ce 01       	movw	r24, r28
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	cd 2d       	mov	r28, r13
    2012:	0d 2c       	mov	r0, r13
    2014:	00 0c       	add	r0, r0
    2016:	dd 0b       	sbc	r29, r29
    2018:	cc 27       	eor	r28, r28
    201a:	dd 0f       	add	r29, r29
    201c:	cc 1f       	adc	r28, r28
    201e:	dd 27       	eor	r29, r29
    2020:	c8 0f       	add	r28, r24
    2022:	d9 1f       	adc	r29, r25
    2024:	ce 01       	movw	r24, r28
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	9c 01       	movw	r18, r24
    2034:	28 5a       	subi	r18, 0xA8	; 168
    2036:	3c 4d       	sbci	r19, 0xDC	; 220
    2038:	79 01       	movw	r14, r18
    203a:	c9 01       	movw	r24, r18
    203c:	21 df       	rcall	.-446    	; 0x1e80 <udd_ep_get_size>
    203e:	4c 01       	movw	r8, r24
    2040:	dd 20       	and	r13, r13
    2042:	0c f0       	brlt	.+2      	; 0x2046 <udd_ep_trans_complet+0x5e>
    2044:	79 c0       	rjmp	.+242    	; 0x2138 <udd_ep_trans_complet+0x150>
    2046:	fe 01       	movw	r30, r28
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	ee 0f       	add	r30, r30
    2052:	ff 1f       	adc	r31, r31
    2054:	ec 5b       	subi	r30, 0xBC	; 188
    2056:	fc 4d       	sbci	r31, 0xDC	; 220
    2058:	22 8d       	ldd	r18, Z+26	; 0x1a
    205a:	33 8d       	ldd	r19, Z+27	; 0x1b
    205c:	d8 01       	movw	r26, r16
    205e:	15 96       	adiw	r26, 0x05	; 5
    2060:	8d 91       	ld	r24, X+
    2062:	9c 91       	ld	r25, X
    2064:	16 97       	sbiw	r26, 0x06	; 6
    2066:	82 0f       	add	r24, r18
    2068:	93 1f       	adc	r25, r19
    206a:	15 96       	adiw	r26, 0x05	; 5
    206c:	8d 93       	st	X+, r24
    206e:	9c 93       	st	X, r25
    2070:	16 97       	sbiw	r26, 0x06	; 6
    2072:	13 96       	adiw	r26, 0x03	; 3
    2074:	2d 91       	ld	r18, X+
    2076:	3c 91       	ld	r19, X
    2078:	14 97       	sbiw	r26, 0x04	; 4
    207a:	82 17       	cp	r24, r18
    207c:	93 07       	cpc	r25, r19
    207e:	09 f4       	brne	.+2      	; 0x2082 <udd_ep_trans_complet+0x9a>
    2080:	45 c0       	rjmp	.+138    	; 0x210c <udd_ep_trans_complet+0x124>
    2082:	28 1b       	sub	r18, r24
    2084:	39 0b       	sbc	r19, r25
    2086:	21 15       	cp	r18, r1
    2088:	b4 e0       	ldi	r27, 0x04	; 4
    208a:	3b 07       	cpc	r19, r27
    208c:	38 f0       	brcs	.+14     	; 0x209c <udd_ep_trans_complet+0xb4>
    208e:	2f ef       	ldi	r18, 0xFF	; 255
    2090:	33 e0       	ldi	r19, 0x03	; 3
    2092:	c9 01       	movw	r24, r18
    2094:	b4 01       	movw	r22, r8
    2096:	12 d6       	rcall	.+3108   	; 0x2cbc <__udivmodhi4>
    2098:	28 1b       	sub	r18, r24
    209a:	39 0b       	sbc	r19, r25
    209c:	f8 01       	movw	r30, r16
    209e:	80 81       	ld	r24, Z
    20a0:	81 ff       	sbrs	r24, 1
    20a2:	09 c0       	rjmp	.+18     	; 0x20b6 <udd_ep_trans_complet+0xce>
    20a4:	c9 01       	movw	r24, r18
    20a6:	b4 01       	movw	r22, r8
    20a8:	09 d6       	rcall	.+3090   	; 0x2cbc <__udivmodhi4>
    20aa:	41 e0       	ldi	r20, 0x01	; 1
    20ac:	89 2b       	or	r24, r25
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <udd_ep_trans_complet+0xca>
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	84 2f       	mov	r24, r20
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <udd_ep_trans_complet+0xd0>
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	d8 01       	movw	r26, r16
    20ba:	9c 91       	ld	r25, X
    20bc:	80 fb       	bst	r24, 0
    20be:	91 f9       	bld	r25, 1
    20c0:	9c 93       	st	X, r25
    20c2:	fe 01       	movw	r30, r28
    20c4:	ee 0f       	add	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	ee 0f       	add	r30, r30
    20ca:	ff 1f       	adc	r31, r31
    20cc:	ee 0f       	add	r30, r30
    20ce:	ff 1f       	adc	r31, r31
    20d0:	ec 5b       	subi	r30, 0xBC	; 188
    20d2:	fc 4d       	sbci	r31, 0xDC	; 220
    20d4:	12 8e       	std	Z+26, r1	; 0x1a
    20d6:	13 8e       	std	Z+27, r1	; 0x1b
    20d8:	26 8b       	std	Z+22, r18	; 0x16
    20da:	37 8b       	std	Z+23, r19	; 0x17
    20dc:	11 96       	adiw	r26, 0x01	; 1
    20de:	2d 91       	ld	r18, X+
    20e0:	3c 91       	ld	r19, X
    20e2:	12 97       	sbiw	r26, 0x02	; 2
    20e4:	15 96       	adiw	r26, 0x05	; 5
    20e6:	8d 91       	ld	r24, X+
    20e8:	9c 91       	ld	r25, X
    20ea:	16 97       	sbiw	r26, 0x06	; 6
    20ec:	82 0f       	add	r24, r18
    20ee:	93 1f       	adc	r25, r19
    20f0:	cc 0f       	add	r28, r28
    20f2:	dd 1f       	adc	r29, r29
    20f4:	cc 0f       	add	r28, r28
    20f6:	dd 1f       	adc	r29, r29
    20f8:	cc 0f       	add	r28, r28
    20fa:	dd 1f       	adc	r29, r29
    20fc:	c4 5a       	subi	r28, 0xA4	; 164
    20fe:	dc 4d       	sbci	r29, 0xDC	; 220
    2100:	88 83       	st	Y, r24
    2102:	99 83       	std	Y+1, r25	; 0x01
    2104:	f7 01       	movw	r30, r14
    2106:	02 e0       	ldi	r16, 0x02	; 2
    2108:	06 93       	lac	Z, r16
    210a:	e0 c0       	rjmp	.+448    	; 0x22cc <udd_ep_trans_complet+0x2e4>
    210c:	d8 01       	movw	r26, r16
    210e:	8c 91       	ld	r24, X
    2110:	81 ff       	sbrs	r24, 1
    2112:	c9 c0       	rjmp	.+402    	; 0x22a6 <udd_ep_trans_complet+0x2be>
    2114:	8d 7f       	andi	r24, 0xFD	; 253
    2116:	8c 93       	st	X, r24
    2118:	cc 0f       	add	r28, r28
    211a:	dd 1f       	adc	r29, r29
    211c:	cc 0f       	add	r28, r28
    211e:	dd 1f       	adc	r29, r29
    2120:	cc 0f       	add	r28, r28
    2122:	dd 1f       	adc	r29, r29
    2124:	cc 5b       	subi	r28, 0xBC	; 188
    2126:	dc 4d       	sbci	r29, 0xDC	; 220
    2128:	1a 8e       	std	Y+26, r1	; 0x1a
    212a:	1b 8e       	std	Y+27, r1	; 0x1b
    212c:	1e 8a       	std	Y+22, r1	; 0x16
    212e:	1f 8a       	std	Y+23, r1	; 0x17
    2130:	f7 01       	movw	r30, r14
    2132:	02 e0       	ldi	r16, 0x02	; 2
    2134:	06 93       	lac	Z, r16
    2136:	ca c0       	rjmp	.+404    	; 0x22cc <udd_ep_trans_complet+0x2e4>
    2138:	fe 01       	movw	r30, r28
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	ee 0f       	add	r30, r30
    2144:	ff 1f       	adc	r31, r31
    2146:	ec 5b       	subi	r30, 0xBC	; 188
    2148:	fc 4d       	sbci	r31, 0xDC	; 220
    214a:	a6 88       	ldd	r10, Z+22	; 0x16
    214c:	b7 88       	ldd	r11, Z+23	; 0x17
    214e:	d8 01       	movw	r26, r16
    2150:	8c 91       	ld	r24, X
    2152:	82 ff       	sbrs	r24, 2
    2154:	19 c0       	rjmp	.+50     	; 0x2188 <udd_ep_trans_complet+0x1a0>
    2156:	11 96       	adiw	r26, 0x01	; 1
    2158:	ed 91       	ld	r30, X+
    215a:	fc 91       	ld	r31, X
    215c:	12 97       	sbiw	r26, 0x02	; 2
    215e:	15 96       	adiw	r26, 0x05	; 5
    2160:	2d 91       	ld	r18, X+
    2162:	3c 91       	ld	r19, X
    2164:	16 97       	sbiw	r26, 0x06	; 6
    2166:	13 96       	adiw	r26, 0x03	; 3
    2168:	8d 91       	ld	r24, X+
    216a:	9c 91       	ld	r25, X
    216c:	14 97       	sbiw	r26, 0x04	; 4
    216e:	b4 01       	movw	r22, r8
    2170:	a5 d5       	rcall	.+2890   	; 0x2cbc <__udivmodhi4>
    2172:	b0 e4       	ldi	r27, 0x40	; 64
    2174:	db 9e       	mul	r13, r27
    2176:	b0 01       	movw	r22, r0
    2178:	11 24       	eor	r1, r1
    217a:	63 55       	subi	r22, 0x53	; 83
    217c:	7e 4d       	sbci	r23, 0xDE	; 222
    217e:	ac 01       	movw	r20, r24
    2180:	cf 01       	movw	r24, r30
    2182:	82 0f       	add	r24, r18
    2184:	93 1f       	adc	r25, r19
    2186:	b6 d5       	rcall	.+2924   	; 0x2cf4 <memcpy>
    2188:	f8 01       	movw	r30, r16
    218a:	25 81       	ldd	r18, Z+5	; 0x05
    218c:	36 81       	ldd	r19, Z+6	; 0x06
    218e:	2a 0d       	add	r18, r10
    2190:	3b 1d       	adc	r19, r11
    2192:	25 83       	std	Z+5, r18	; 0x05
    2194:	36 83       	std	Z+6, r19	; 0x06
    2196:	83 81       	ldd	r24, Z+3	; 0x03
    2198:	94 81       	ldd	r25, Z+4	; 0x04
    219a:	82 17       	cp	r24, r18
    219c:	93 07       	cpc	r25, r19
    219e:	68 f4       	brcc	.+26     	; 0x21ba <udd_ep_trans_complet+0x1d2>
    21a0:	85 83       	std	Z+5, r24	; 0x05
    21a2:	96 83       	std	Z+6, r25	; 0x06
    21a4:	cc 0f       	add	r28, r28
    21a6:	dd 1f       	adc	r29, r29
    21a8:	cc 0f       	add	r28, r28
    21aa:	dd 1f       	adc	r29, r29
    21ac:	cc 0f       	add	r28, r28
    21ae:	dd 1f       	adc	r29, r29
    21b0:	cc 5b       	subi	r28, 0xBC	; 188
    21b2:	dc 4d       	sbci	r29, 0xDC	; 220
    21b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21b8:	76 c0       	rjmp	.+236    	; 0x22a6 <udd_ep_trans_complet+0x2be>
    21ba:	fe 01       	movw	r30, r28
    21bc:	ee 0f       	add	r30, r30
    21be:	ff 1f       	adc	r31, r31
    21c0:	ee 0f       	add	r30, r30
    21c2:	ff 1f       	adc	r31, r31
    21c4:	ee 0f       	add	r30, r30
    21c6:	ff 1f       	adc	r31, r31
    21c8:	ec 5b       	subi	r30, 0xBC	; 188
    21ca:	fc 4d       	sbci	r31, 0xDC	; 220
    21cc:	42 8d       	ldd	r20, Z+26	; 0x1a
    21ce:	53 8d       	ldd	r21, Z+27	; 0x1b
    21d0:	a4 16       	cp	r10, r20
    21d2:	b5 06       	cpc	r11, r21
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <udd_ep_trans_complet+0x1f0>
    21d6:	67 c0       	rjmp	.+206    	; 0x22a6 <udd_ep_trans_complet+0x2be>
    21d8:	28 17       	cp	r18, r24
    21da:	39 07       	cpc	r19, r25
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <udd_ep_trans_complet+0x1f8>
    21de:	63 c0       	rjmp	.+198    	; 0x22a6 <udd_ep_trans_complet+0x2be>
    21e0:	ac 01       	movw	r20, r24
    21e2:	42 1b       	sub	r20, r18
    21e4:	53 0b       	sbc	r21, r19
    21e6:	9a 01       	movw	r18, r20
    21e8:	21 15       	cp	r18, r1
    21ea:	54 e0       	ldi	r21, 0x04	; 4
    21ec:	35 07       	cpc	r19, r21
    21ee:	40 f0       	brcs	.+16     	; 0x2200 <udd_ep_trans_complet+0x218>
    21f0:	2f ef       	ldi	r18, 0xFF	; 255
    21f2:	33 e0       	ldi	r19, 0x03	; 3
    21f4:	c9 01       	movw	r24, r18
    21f6:	b4 01       	movw	r22, r8
    21f8:	61 d5       	rcall	.+2754   	; 0x2cbc <__udivmodhi4>
    21fa:	28 1b       	sub	r18, r24
    21fc:	39 0b       	sbc	r19, r25
    21fe:	05 c0       	rjmp	.+10     	; 0x220a <udd_ep_trans_complet+0x222>
    2200:	c9 01       	movw	r24, r18
    2202:	b4 01       	movw	r22, r8
    2204:	5b d5       	rcall	.+2742   	; 0x2cbc <__udivmodhi4>
    2206:	28 1b       	sub	r18, r24
    2208:	39 0b       	sbc	r19, r25
    220a:	fe 01       	movw	r30, r28
    220c:	ee 0f       	add	r30, r30
    220e:	ff 1f       	adc	r31, r31
    2210:	ee 0f       	add	r30, r30
    2212:	ff 1f       	adc	r31, r31
    2214:	ee 0f       	add	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	ec 5b       	subi	r30, 0xBC	; 188
    221a:	fc 4d       	sbci	r31, 0xDC	; 220
    221c:	16 8a       	std	Z+22, r1	; 0x16
    221e:	17 8a       	std	Z+23, r1	; 0x17
    2220:	28 15       	cp	r18, r8
    2222:	39 05       	cpc	r19, r9
    2224:	00 f5       	brcc	.+64     	; 0x2266 <udd_ep_trans_complet+0x27e>
    2226:	d8 01       	movw	r26, r16
    2228:	8c 91       	ld	r24, X
    222a:	84 60       	ori	r24, 0x04	; 4
    222c:	8c 93       	st	X, r24
    222e:	b0 e4       	ldi	r27, 0x40	; 64
    2230:	db 9e       	mul	r13, r27
    2232:	c0 01       	movw	r24, r0
    2234:	11 24       	eor	r1, r1
    2236:	83 55       	subi	r24, 0x53	; 83
    2238:	9e 4d       	sbci	r25, 0xDE	; 222
    223a:	fe 01       	movw	r30, r28
    223c:	ee 0f       	add	r30, r30
    223e:	ff 1f       	adc	r31, r31
    2240:	ee 0f       	add	r30, r30
    2242:	ff 1f       	adc	r31, r31
    2244:	ee 0f       	add	r30, r30
    2246:	ff 1f       	adc	r31, r31
    2248:	e4 5a       	subi	r30, 0xA4	; 164
    224a:	fc 4d       	sbci	r31, 0xDC	; 220
    224c:	80 83       	st	Z, r24
    224e:	91 83       	std	Z+1, r25	; 0x01
    2250:	cc 0f       	add	r28, r28
    2252:	dd 1f       	adc	r29, r29
    2254:	cc 0f       	add	r28, r28
    2256:	dd 1f       	adc	r29, r29
    2258:	cc 0f       	add	r28, r28
    225a:	dd 1f       	adc	r29, r29
    225c:	cc 5b       	subi	r28, 0xBC	; 188
    225e:	dc 4d       	sbci	r29, 0xDC	; 220
    2260:	8a 8e       	std	Y+26, r8	; 0x1a
    2262:	9b 8e       	std	Y+27, r9	; 0x1b
    2264:	1c c0       	rjmp	.+56     	; 0x229e <udd_ep_trans_complet+0x2b6>
    2266:	f8 01       	movw	r30, r16
    2268:	41 81       	ldd	r20, Z+1	; 0x01
    226a:	52 81       	ldd	r21, Z+2	; 0x02
    226c:	85 81       	ldd	r24, Z+5	; 0x05
    226e:	96 81       	ldd	r25, Z+6	; 0x06
    2270:	84 0f       	add	r24, r20
    2272:	95 1f       	adc	r25, r21
    2274:	fe 01       	movw	r30, r28
    2276:	ee 0f       	add	r30, r30
    2278:	ff 1f       	adc	r31, r31
    227a:	ee 0f       	add	r30, r30
    227c:	ff 1f       	adc	r31, r31
    227e:	ee 0f       	add	r30, r30
    2280:	ff 1f       	adc	r31, r31
    2282:	e4 5a       	subi	r30, 0xA4	; 164
    2284:	fc 4d       	sbci	r31, 0xDC	; 220
    2286:	80 83       	st	Z, r24
    2288:	91 83       	std	Z+1, r25	; 0x01
    228a:	cc 0f       	add	r28, r28
    228c:	dd 1f       	adc	r29, r29
    228e:	cc 0f       	add	r28, r28
    2290:	dd 1f       	adc	r29, r29
    2292:	cc 0f       	add	r28, r28
    2294:	dd 1f       	adc	r29, r29
    2296:	cc 5b       	subi	r28, 0xBC	; 188
    2298:	dc 4d       	sbci	r29, 0xDC	; 220
    229a:	2a 8f       	std	Y+26, r18	; 0x1a
    229c:	3b 8f       	std	Y+27, r19	; 0x1b
    229e:	f7 01       	movw	r30, r14
    22a0:	02 e0       	ldi	r16, 0x02	; 2
    22a2:	06 93       	lac	Z, r16
    22a4:	13 c0       	rjmp	.+38     	; 0x22cc <udd_ep_trans_complet+0x2e4>
    22a6:	d8 01       	movw	r26, r16
    22a8:	8c 91       	ld	r24, X
    22aa:	80 ff       	sbrs	r24, 0
    22ac:	0f c0       	rjmp	.+30     	; 0x22cc <udd_ep_trans_complet+0x2e4>
    22ae:	8e 7f       	andi	r24, 0xFE	; 254
    22b0:	8c 93       	st	X, r24
    22b2:	17 96       	adiw	r26, 0x07	; 7
    22b4:	ed 91       	ld	r30, X+
    22b6:	fc 91       	ld	r31, X
    22b8:	18 97       	sbiw	r26, 0x08	; 8
    22ba:	30 97       	sbiw	r30, 0x00	; 0
    22bc:	39 f0       	breq	.+14     	; 0x22cc <udd_ep_trans_complet+0x2e4>
    22be:	15 96       	adiw	r26, 0x05	; 5
    22c0:	6d 91       	ld	r22, X+
    22c2:	7c 91       	ld	r23, X
    22c4:	16 97       	sbiw	r26, 0x06	; 6
    22c6:	4d 2d       	mov	r20, r13
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	19 95       	eicall
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	1f 91       	pop	r17
    22d2:	0f 91       	pop	r16
    22d4:	ff 90       	pop	r15
    22d6:	ef 90       	pop	r14
    22d8:	df 90       	pop	r13
    22da:	bf 90       	pop	r11
    22dc:	af 90       	pop	r10
    22de:	9f 90       	pop	r9
    22e0:	8f 90       	pop	r8
    22e2:	08 95       	ret

000022e4 <udd_attach>:
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	1f 92       	push	r1
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	8f b7       	in	r24, 0x3f	; 63
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	f8 94       	cli
    22f6:	19 81       	ldd	r17, Y+1	; 0x01
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	d5 dc       	rcall	.-1622   	; 0x1ca6 <udd_sleep_mode>
    22fc:	ea ec       	ldi	r30, 0xCA	; 202
    22fe:	f4 e0       	ldi	r31, 0x04	; 4
    2300:	80 e4       	ldi	r24, 0x40	; 64
    2302:	80 83       	st	Z, r24
    2304:	80 e2       	ldi	r24, 0x20	; 32
    2306:	80 83       	st	Z, r24
    2308:	e1 ec       	ldi	r30, 0xC1	; 193
    230a:	f4 e0       	ldi	r31, 0x04	; 4
    230c:	80 81       	ld	r24, Z
    230e:	81 60       	ori	r24, 0x01	; 1
    2310:	80 83       	st	Z, r24
    2312:	a9 ec       	ldi	r26, 0xC9	; 201
    2314:	b4 e0       	ldi	r27, 0x04	; 4
    2316:	8c 91       	ld	r24, X
    2318:	82 60       	ori	r24, 0x02	; 2
    231a:	8c 93       	st	X, r24
    231c:	e8 ec       	ldi	r30, 0xC8	; 200
    231e:	f4 e0       	ldi	r31, 0x04	; 4
    2320:	80 81       	ld	r24, Z
    2322:	80 64       	ori	r24, 0x40	; 64
    2324:	80 83       	st	Z, r24
    2326:	8c 91       	ld	r24, X
    2328:	81 60       	ori	r24, 0x01	; 1
    232a:	8c 93       	st	X, r24
    232c:	80 81       	ld	r24, Z
    232e:	80 68       	ori	r24, 0x80	; 128
    2330:	80 83       	st	Z, r24
    2332:	1f bf       	out	0x3f, r17	; 63
    2334:	0f 90       	pop	r0
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	08 95       	ret

0000233e <udd_enable>:
    233e:	0f 93       	push	r16
    2340:	1f 93       	push	r17
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	1f 92       	push	r1
    2348:	1f 92       	push	r1
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	00 e6       	ldi	r16, 0x60	; 96
    2350:	10 e0       	ldi	r17, 0x00	; 0
    2352:	f8 01       	movw	r30, r16
    2354:	10 82       	st	Z, r1
    2356:	80 e3       	ldi	r24, 0x30	; 48
    2358:	0e 94 44 08 	call	0x1088	; 0x1088 <sysclk_enable_usb>
    235c:	e0 ec       	ldi	r30, 0xC0	; 192
    235e:	f4 e0       	ldi	r31, 0x04	; 4
    2360:	80 81       	ld	r24, Z
    2362:	80 64       	ori	r24, 0x40	; 64
    2364:	80 83       	st	Z, r24
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	f8 01       	movw	r30, r16
    236a:	80 83       	st	Z, r24
    236c:	8f b7       	in	r24, 0x3f	; 63
    236e:	8a 83       	std	Y+2, r24	; 0x02
    2370:	f8 94       	cli
    2372:	1a 81       	ldd	r17, Y+2	; 0x02
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	fc 01       	movw	r30, r24
    237a:	ee 0f       	add	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	ee 0f       	add	r30, r30
    2380:	ff 1f       	adc	r31, r31
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	ec 5b       	subi	r30, 0xBC	; 188
    2388:	fc 4d       	sbci	r31, 0xDC	; 220
    238a:	15 8a       	std	Z+21, r1	; 0x15
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	8a 30       	cpi	r24, 0x0A	; 10
    2390:	91 05       	cpc	r25, r1
    2392:	91 f7       	brne	.-28     	; 0x2378 <udd_enable+0x3a>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	fc 01       	movw	r30, r24
    239a:	ee 0f       	add	r30, r30
    239c:	ff 1f       	adc	r31, r31
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	ee 0f       	add	r30, r30
    23a4:	ff 1f       	adc	r31, r31
    23a6:	e8 0f       	add	r30, r24
    23a8:	f9 1f       	adc	r31, r25
    23aa:	e3 51       	subi	r30, 0x13	; 19
    23ac:	fd 4d       	sbci	r31, 0xDD	; 221
    23ae:	20 81       	ld	r18, Z
    23b0:	2e 7f       	andi	r18, 0xFE	; 254
    23b2:	20 83       	st	Z, r18
    23b4:	01 96       	adiw	r24, 0x01	; 1
    23b6:	88 30       	cpi	r24, 0x08	; 8
    23b8:	91 05       	cpc	r25, r1
    23ba:	71 f7       	brne	.-36     	; 0x2398 <udd_enable+0x5a>
    23bc:	6a e1       	ldi	r22, 0x1A	; 26
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	82 e0       	ldi	r24, 0x02	; 2
    23c2:	61 dc       	rcall	.-1854   	; 0x1c86 <nvm_read_byte>
    23c4:	8f 3f       	cpi	r24, 0xFF	; 255
    23c6:	19 f0       	breq	.+6      	; 0x23ce <udd_enable+0x90>
    23c8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    23cc:	03 c0       	rjmp	.+6      	; 0x23d4 <udd_enable+0x96>
    23ce:	8f e1       	ldi	r24, 0x1F	; 31
    23d0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    23d4:	6b e1       	ldi	r22, 0x1B	; 27
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	82 e0       	ldi	r24, 0x02	; 2
    23da:	55 dc       	rcall	.-1878   	; 0x1c86 <nvm_read_byte>
    23dc:	8f 3f       	cpi	r24, 0xFF	; 255
    23de:	19 f0       	breq	.+6      	; 0x23e6 <udd_enable+0xa8>
    23e0:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    23e4:	03 c0       	rjmp	.+6      	; 0x23ec <udd_enable+0xae>
    23e6:	8f e1       	ldi	r24, 0x1F	; 31
    23e8:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    23ec:	e0 ec       	ldi	r30, 0xC0	; 192
    23ee:	f4 e0       	ldi	r31, 0x04	; 4
    23f0:	80 81       	ld	r24, Z
    23f2:	84 60       	ori	r24, 0x04	; 4
    23f4:	80 83       	st	Z, r24
    23f6:	80 81       	ld	r24, Z
    23f8:	80 68       	ori	r24, 0x80	; 128
    23fa:	80 83       	st	Z, r24
    23fc:	80 81       	ld	r24, Z
    23fe:	80 61       	ori	r24, 0x10	; 16
    2400:	80 83       	st	Z, r24
    2402:	88 e5       	ldi	r24, 0x58	; 88
    2404:	93 e2       	ldi	r25, 0x23	; 35
    2406:	86 83       	std	Z+6, r24	; 0x06
    2408:	97 83       	std	Z+7, r25	; 0x07
    240a:	80 81       	ld	r24, Z
    240c:	80 62       	ori	r24, 0x20	; 32
    240e:	80 83       	st	Z, r24
    2410:	8f ef       	ldi	r24, 0xFF	; 255
    2412:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    2416:	e8 ec       	ldi	r30, 0xC8	; 200
    2418:	f4 e0       	ldi	r31, 0x04	; 4
    241a:	80 81       	ld	r24, Z
    241c:	81 60       	ori	r24, 0x01	; 1
    241e:	80 83       	st	Z, r24
    2420:	10 92 ac 23 	sts	0x23AC, r1	; 0x8023ac <udd_b_idle>
    2424:	80 91 b8 23 	lds	r24, 0x23B8	; 0x8023b8 <sleepmgr_locks+0x5>
    2428:	8f 3f       	cpi	r24, 0xFF	; 255
    242a:	09 f4       	brne	.+2      	; 0x242e <udd_enable+0xf0>
    242c:	ff cf       	rjmp	.-2      	; 0x242c <udd_enable+0xee>
    242e:	8f b7       	in	r24, 0x3f	; 63
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	f8 94       	cli
    2434:	99 81       	ldd	r25, Y+1	; 0x01
    2436:	e3 eb       	ldi	r30, 0xB3	; 179
    2438:	f3 e2       	ldi	r31, 0x23	; 35
    243a:	85 81       	ldd	r24, Z+5	; 0x05
    243c:	8f 5f       	subi	r24, 0xFF	; 255
    243e:	85 83       	std	Z+5, r24	; 0x05
    2440:	9f bf       	out	0x3f, r25	; 63
    2442:	50 df       	rcall	.-352    	; 0x22e4 <udd_attach>
    2444:	1f bf       	out	0x3f, r17	; 63
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	1f 91       	pop	r17
    2450:	0f 91       	pop	r16
    2452:	08 95       	ret

00002454 <udd_set_address>:
    2454:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2458:	08 95       	ret

0000245a <udd_getaddress>:
    245a:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    245e:	08 95       	ret

00002460 <udd_set_setup_payload>:
    2460:	e9 eb       	ldi	r30, 0xB9	; 185
    2462:	f3 e2       	ldi	r31, 0x23	; 35
    2464:	80 87       	std	Z+8, r24	; 0x08
    2466:	91 87       	std	Z+9, r25	; 0x09
    2468:	62 87       	std	Z+10, r22	; 0x0a
    246a:	73 87       	std	Z+11, r23	; 0x0b
    246c:	08 95       	ret

0000246e <udd_ep_alloc>:
    246e:	28 2f       	mov	r18, r24
    2470:	2f 70       	andi	r18, 0x0F	; 15
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	22 0f       	add	r18, r18
    2476:	33 1f       	adc	r19, r19
    2478:	08 2e       	mov	r0, r24
    247a:	00 0c       	add	r0, r0
    247c:	99 0b       	sbc	r25, r25
    247e:	88 27       	eor	r24, r24
    2480:	99 0f       	add	r25, r25
    2482:	88 1f       	adc	r24, r24
    2484:	99 27       	eor	r25, r25
    2486:	82 0f       	add	r24, r18
    2488:	93 1f       	adc	r25, r19
    248a:	fc 01       	movw	r30, r24
    248c:	ee 0f       	add	r30, r30
    248e:	ff 1f       	adc	r31, r31
    2490:	ee 0f       	add	r30, r30
    2492:	ff 1f       	adc	r31, r31
    2494:	ee 0f       	add	r30, r30
    2496:	ff 1f       	adc	r31, r31
    2498:	ec 5b       	subi	r30, 0xBC	; 188
    249a:	fc 4d       	sbci	r31, 0xDC	; 220
    249c:	25 89       	ldd	r18, Z+21	; 0x15
    249e:	20 7c       	andi	r18, 0xC0	; 192
    24a0:	09 f0       	breq	.+2      	; 0x24a4 <udd_ep_alloc+0x36>
    24a2:	69 c0       	rjmp	.+210    	; 0x2576 <udd_ep_alloc+0x108>
    24a4:	63 70       	andi	r22, 0x03	; 3
    24a6:	61 30       	cpi	r22, 0x01	; 1
    24a8:	11 f0       	breq	.+4      	; 0x24ae <udd_ep_alloc+0x40>
    24aa:	18 f4       	brcc	.+6      	; 0x24b2 <udd_ep_alloc+0x44>
    24ac:	04 c0       	rjmp	.+8      	; 0x24b6 <udd_ep_alloc+0x48>
    24ae:	60 ec       	ldi	r22, 0xC0	; 192
    24b0:	03 c0       	rjmp	.+6      	; 0x24b8 <udd_ep_alloc+0x4a>
    24b2:	60 e8       	ldi	r22, 0x80	; 128
    24b4:	01 c0       	rjmp	.+2      	; 0x24b8 <udd_ep_alloc+0x4a>
    24b6:	60 e4       	ldi	r22, 0x40	; 64
    24b8:	40 38       	cpi	r20, 0x80	; 128
    24ba:	51 05       	cpc	r21, r1
    24bc:	e9 f0       	breq	.+58     	; 0x24f8 <udd_ep_alloc+0x8a>
    24be:	50 f4       	brcc	.+20     	; 0x24d4 <udd_ep_alloc+0x66>
    24c0:	40 32       	cpi	r20, 0x20	; 32
    24c2:	51 05       	cpc	r21, r1
    24c4:	a9 f0       	breq	.+42     	; 0x24f0 <udd_ep_alloc+0x82>
    24c6:	40 34       	cpi	r20, 0x40	; 64
    24c8:	51 05       	cpc	r21, r1
    24ca:	a1 f0       	breq	.+40     	; 0x24f4 <udd_ep_alloc+0x86>
    24cc:	40 31       	cpi	r20, 0x10	; 16
    24ce:	51 05       	cpc	r21, r1
    24d0:	d9 f4       	brne	.+54     	; 0x2508 <udd_ep_alloc+0x9a>
    24d2:	0c c0       	rjmp	.+24     	; 0x24ec <udd_ep_alloc+0x7e>
    24d4:	41 15       	cp	r20, r1
    24d6:	22 e0       	ldi	r18, 0x02	; 2
    24d8:	52 07       	cpc	r21, r18
    24da:	91 f0       	breq	.+36     	; 0x2500 <udd_ep_alloc+0x92>
    24dc:	4f 3f       	cpi	r20, 0xFF	; 255
    24de:	23 e0       	ldi	r18, 0x03	; 3
    24e0:	52 07       	cpc	r21, r18
    24e2:	81 f0       	breq	.+32     	; 0x2504 <udd_ep_alloc+0x96>
    24e4:	41 15       	cp	r20, r1
    24e6:	51 40       	sbci	r21, 0x01	; 1
    24e8:	79 f4       	brne	.+30     	; 0x2508 <udd_ep_alloc+0x9a>
    24ea:	08 c0       	rjmp	.+16     	; 0x24fc <udd_ep_alloc+0x8e>
    24ec:	21 e0       	ldi	r18, 0x01	; 1
    24ee:	0d c0       	rjmp	.+26     	; 0x250a <udd_ep_alloc+0x9c>
    24f0:	22 e0       	ldi	r18, 0x02	; 2
    24f2:	0b c0       	rjmp	.+22     	; 0x250a <udd_ep_alloc+0x9c>
    24f4:	23 e0       	ldi	r18, 0x03	; 3
    24f6:	09 c0       	rjmp	.+18     	; 0x250a <udd_ep_alloc+0x9c>
    24f8:	24 e0       	ldi	r18, 0x04	; 4
    24fa:	07 c0       	rjmp	.+14     	; 0x250a <udd_ep_alloc+0x9c>
    24fc:	25 e0       	ldi	r18, 0x05	; 5
    24fe:	05 c0       	rjmp	.+10     	; 0x250a <udd_ep_alloc+0x9c>
    2500:	26 e0       	ldi	r18, 0x06	; 6
    2502:	03 c0       	rjmp	.+6      	; 0x250a <udd_ep_alloc+0x9c>
    2504:	27 e0       	ldi	r18, 0x07	; 7
    2506:	01 c0       	rjmp	.+2      	; 0x250a <udd_ep_alloc+0x9c>
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	fc 01       	movw	r30, r24
    250c:	ee 0f       	add	r30, r30
    250e:	ff 1f       	adc	r31, r31
    2510:	ee 0f       	add	r30, r30
    2512:	ff 1f       	adc	r31, r31
    2514:	ee 0f       	add	r30, r30
    2516:	ff 1f       	adc	r31, r31
    2518:	ec 5b       	subi	r30, 0xBC	; 188
    251a:	fc 4d       	sbci	r31, 0xDC	; 220
    251c:	15 8a       	std	Z+21, r1	; 0x15
    251e:	36 e0       	ldi	r19, 0x06	; 6
    2520:	34 8b       	std	Z+20, r19	; 0x14
    2522:	26 2b       	or	r18, r22
    2524:	25 8b       	std	Z+21, r18	; 0x15
    2526:	fc 01       	movw	r30, r24
    2528:	ee 0f       	add	r30, r30
    252a:	ff 1f       	adc	r31, r31
    252c:	ee 0f       	add	r30, r30
    252e:	ff 1f       	adc	r31, r31
    2530:	ee 0f       	add	r30, r30
    2532:	ff 1f       	adc	r31, r31
    2534:	ec 5b       	subi	r30, 0xBC	; 188
    2536:	fc 4d       	sbci	r31, 0xDC	; 220
    2538:	25 89       	ldd	r18, Z+21	; 0x15
    253a:	20 7c       	andi	r18, 0xC0	; 192
    253c:	20 3c       	cpi	r18, 0xC0	; 192
    253e:	69 f4       	brne	.+26     	; 0x255a <udd_ep_alloc+0xec>
    2540:	fc 01       	movw	r30, r24
    2542:	ee 0f       	add	r30, r30
    2544:	ff 1f       	adc	r31, r31
    2546:	ee 0f       	add	r30, r30
    2548:	ff 1f       	adc	r31, r31
    254a:	ee 0f       	add	r30, r30
    254c:	ff 1f       	adc	r31, r31
    254e:	ec 5b       	subi	r30, 0xBC	; 188
    2550:	fc 4d       	sbci	r31, 0xDC	; 220
    2552:	25 89       	ldd	r18, Z+21	; 0x15
    2554:	27 70       	andi	r18, 0x07	; 7
    2556:	27 30       	cpi	r18, 0x07	; 7
    2558:	81 f0       	breq	.+32     	; 0x257a <udd_ep_alloc+0x10c>
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	fc 01       	movw	r30, r24
    2568:	ec 5b       	subi	r30, 0xBC	; 188
    256a:	fc 4d       	sbci	r31, 0xDC	; 220
    256c:	85 89       	ldd	r24, Z+21	; 0x15
    256e:	80 62       	ori	r24, 0x20	; 32
    2570:	85 8b       	std	Z+21, r24	; 0x15
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	08 95       	ret
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	08 95       	ret
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	08 95       	ret

0000257e <udd_ep_is_halted>:
    257e:	e8 2f       	mov	r30, r24
    2580:	ef 70       	andi	r30, 0x0F	; 15
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	ee 0f       	add	r30, r30
    2586:	ff 1f       	adc	r31, r31
    2588:	08 2e       	mov	r0, r24
    258a:	00 0c       	add	r0, r0
    258c:	99 0b       	sbc	r25, r25
    258e:	88 27       	eor	r24, r24
    2590:	99 0f       	add	r25, r25
    2592:	88 1f       	adc	r24, r24
    2594:	99 27       	eor	r25, r25
    2596:	e8 0f       	add	r30, r24
    2598:	f9 1f       	adc	r31, r25
    259a:	ee 0f       	add	r30, r30
    259c:	ff 1f       	adc	r31, r31
    259e:	ee 0f       	add	r30, r30
    25a0:	ff 1f       	adc	r31, r31
    25a2:	ee 0f       	add	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	ec 5b       	subi	r30, 0xBC	; 188
    25a8:	fc 4d       	sbci	r31, 0xDC	; 220
    25aa:	85 89       	ldd	r24, Z+21	; 0x15
    25ac:	82 fb       	bst	r24, 2
    25ae:	88 27       	eor	r24, r24
    25b0:	80 f9       	bld	r24, 0
    25b2:	08 95       	ret

000025b4 <udd_ep_clear_halt>:
    25b4:	0f 93       	push	r16
    25b6:	28 2f       	mov	r18, r24
    25b8:	2f 70       	andi	r18, 0x0F	; 15
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	a9 01       	movw	r20, r18
    25be:	44 0f       	add	r20, r20
    25c0:	55 1f       	adc	r21, r21
    25c2:	28 2f       	mov	r18, r24
    25c4:	08 2e       	mov	r0, r24
    25c6:	00 0c       	add	r0, r0
    25c8:	33 0b       	sbc	r19, r19
    25ca:	22 27       	eor	r18, r18
    25cc:	33 0f       	add	r19, r19
    25ce:	22 1f       	adc	r18, r18
    25d0:	33 27       	eor	r19, r19
    25d2:	24 0f       	add	r18, r20
    25d4:	35 1f       	adc	r19, r21
    25d6:	a9 01       	movw	r20, r18
    25d8:	44 0f       	add	r20, r20
    25da:	55 1f       	adc	r21, r21
    25dc:	44 0f       	add	r20, r20
    25de:	55 1f       	adc	r21, r21
    25e0:	44 0f       	add	r20, r20
    25e2:	55 1f       	adc	r21, r21
    25e4:	fa 01       	movw	r30, r20
    25e6:	e8 5a       	subi	r30, 0xA8	; 168
    25e8:	fc 4d       	sbci	r31, 0xDC	; 220
    25ea:	01 e0       	ldi	r16, 0x01	; 1
    25ec:	06 93       	lac	Z, r16
    25ee:	fa 01       	movw	r30, r20
    25f0:	ec 5b       	subi	r30, 0xBC	; 188
    25f2:	fc 4d       	sbci	r31, 0xDC	; 220
    25f4:	95 89       	ldd	r25, Z+21	; 0x15
    25f6:	92 ff       	sbrs	r25, 2
    25f8:	11 c0       	rjmp	.+34     	; 0x261c <udd_ep_clear_halt+0x68>
    25fa:	fa 01       	movw	r30, r20
    25fc:	ec 5b       	subi	r30, 0xBC	; 188
    25fe:	fc 4d       	sbci	r31, 0xDC	; 220
    2600:	95 89       	ldd	r25, Z+21	; 0x15
    2602:	9b 7f       	andi	r25, 0xFB	; 251
    2604:	95 8b       	std	Z+21, r25	; 0x15
    2606:	64 dc       	rcall	.-1848   	; 0x1ed0 <udd_ep_get_job>
    2608:	fc 01       	movw	r30, r24
    260a:	80 81       	ld	r24, Z
    260c:	80 ff       	sbrs	r24, 0
    260e:	06 c0       	rjmp	.+12     	; 0x261c <udd_ep_clear_halt+0x68>
    2610:	8e 7f       	andi	r24, 0xFE	; 254
    2612:	80 83       	st	Z, r24
    2614:	07 80       	ldd	r0, Z+7	; 0x07
    2616:	f0 85       	ldd	r31, Z+8	; 0x08
    2618:	e0 2d       	mov	r30, r0
    261a:	19 95       	eicall
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	0f 91       	pop	r16
    2620:	08 95       	ret

00002622 <udd_ep_run>:
    2622:	6f 92       	push	r6
    2624:	7f 92       	push	r7
    2626:	8f 92       	push	r8
    2628:	9f 92       	push	r9
    262a:	af 92       	push	r10
    262c:	bf 92       	push	r11
    262e:	cf 92       	push	r12
    2630:	df 92       	push	r13
    2632:	ef 92       	push	r14
    2634:	ff 92       	push	r15
    2636:	0f 93       	push	r16
    2638:	1f 93       	push	r17
    263a:	cf 93       	push	r28
    263c:	df 93       	push	r29
    263e:	1f 92       	push	r1
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	78 2e       	mov	r7, r24
    2646:	66 2e       	mov	r6, r22
    2648:	4a 01       	movw	r8, r20
    264a:	59 01       	movw	r10, r18
    264c:	41 dc       	rcall	.-1918   	; 0x1ed0 <udd_ep_get_job>
    264e:	6c 01       	movw	r12, r24
    2650:	27 2d       	mov	r18, r7
    2652:	87 2d       	mov	r24, r7
    2654:	8f 70       	andi	r24, 0x0F	; 15
    2656:	e8 2e       	mov	r14, r24
    2658:	f1 2c       	mov	r15, r1
    265a:	c7 01       	movw	r24, r14
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	e7 2c       	mov	r14, r7
    2662:	07 2c       	mov	r0, r7
    2664:	00 0c       	add	r0, r0
    2666:	ff 08       	sbc	r15, r15
    2668:	ee 24       	eor	r14, r14
    266a:	ff 0c       	add	r15, r15
    266c:	ee 1c       	adc	r14, r14
    266e:	ff 24       	eor	r15, r15
    2670:	e8 0e       	add	r14, r24
    2672:	f9 1e       	adc	r15, r25
    2674:	f7 01       	movw	r30, r14
    2676:	ee 0f       	add	r30, r30
    2678:	ff 1f       	adc	r31, r31
    267a:	ee 0f       	add	r30, r30
    267c:	ff 1f       	adc	r31, r31
    267e:	ee 0f       	add	r30, r30
    2680:	ff 1f       	adc	r31, r31
    2682:	ec 5b       	subi	r30, 0xBC	; 188
    2684:	fc 4d       	sbci	r31, 0xDC	; 220
    2686:	85 89       	ldd	r24, Z+21	; 0x15
    2688:	80 7c       	andi	r24, 0xC0	; 192
    268a:	09 f4       	brne	.+2      	; 0x268e <udd_ep_run+0x6c>
    268c:	81 c0       	rjmp	.+258    	; 0x2790 <udd_ep_run+0x16e>
    268e:	f7 01       	movw	r30, r14
    2690:	ee 0f       	add	r30, r30
    2692:	ff 1f       	adc	r31, r31
    2694:	ee 0f       	add	r30, r30
    2696:	ff 1f       	adc	r31, r31
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	ec 5b       	subi	r30, 0xBC	; 188
    269e:	fc 4d       	sbci	r31, 0xDC	; 220
    26a0:	85 89       	ldd	r24, Z+21	; 0x15
    26a2:	80 7c       	andi	r24, 0xC0	; 192
    26a4:	80 3c       	cpi	r24, 0xC0	; 192
    26a6:	61 f0       	breq	.+24     	; 0x26c0 <udd_ep_run+0x9e>
    26a8:	f7 01       	movw	r30, r14
    26aa:	ee 0f       	add	r30, r30
    26ac:	ff 1f       	adc	r31, r31
    26ae:	ee 0f       	add	r30, r30
    26b0:	ff 1f       	adc	r31, r31
    26b2:	ee 0f       	add	r30, r30
    26b4:	ff 1f       	adc	r31, r31
    26b6:	ec 5b       	subi	r30, 0xBC	; 188
    26b8:	fc 4d       	sbci	r31, 0xDC	; 220
    26ba:	85 89       	ldd	r24, Z+21	; 0x15
    26bc:	82 fd       	sbrc	r24, 2
    26be:	6a c0       	rjmp	.+212    	; 0x2794 <udd_ep_run+0x172>
    26c0:	8f b7       	in	r24, 0x3f	; 63
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	f8 94       	cli
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	f6 01       	movw	r30, r12
    26ca:	90 81       	ld	r25, Z
    26cc:	90 ff       	sbrs	r25, 0
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <udd_ep_run+0xb4>
    26d0:	8f bf       	out	0x3f, r24	; 63
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	60 c0       	rjmp	.+192    	; 0x2796 <udd_ep_run+0x174>
    26d6:	f6 01       	movw	r30, r12
    26d8:	90 81       	ld	r25, Z
    26da:	91 60       	ori	r25, 0x01	; 1
    26dc:	90 83       	st	Z, r25
    26de:	8f bf       	out	0x3f, r24	; 63
    26e0:	81 82       	std	Z+1, r8	; 0x01
    26e2:	92 82       	std	Z+2, r9	; 0x02
    26e4:	a3 82       	std	Z+3, r10	; 0x03
    26e6:	b4 82       	std	Z+4, r11	; 0x04
    26e8:	15 82       	std	Z+5, r1	; 0x05
    26ea:	16 82       	std	Z+6, r1	; 0x06
    26ec:	07 83       	std	Z+7, r16	; 0x07
    26ee:	10 87       	std	Z+8, r17	; 0x08
    26f0:	61 10       	cpse	r6, r1
    26f2:	06 c0       	rjmp	.+12     	; 0x2700 <udd_ep_run+0xde>
    26f4:	91 e0       	ldi	r25, 0x01	; 1
    26f6:	a1 14       	cp	r10, r1
    26f8:	b1 04       	cpc	r11, r1
    26fa:	19 f0       	breq	.+6      	; 0x2702 <udd_ep_run+0xe0>
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	01 c0       	rjmp	.+2      	; 0x2702 <udd_ep_run+0xe0>
    2700:	91 e0       	ldi	r25, 0x01	; 1
    2702:	f6 01       	movw	r30, r12
    2704:	80 81       	ld	r24, Z
    2706:	90 fb       	bst	r25, 0
    2708:	81 f9       	bld	r24, 1
    270a:	8b 7f       	andi	r24, 0xFB	; 251
    270c:	80 83       	st	Z, r24
    270e:	22 23       	and	r18, r18
    2710:	64 f4       	brge	.+24     	; 0x272a <udd_ep_run+0x108>
    2712:	f7 01       	movw	r30, r14
    2714:	ee 0f       	add	r30, r30
    2716:	ff 1f       	adc	r31, r31
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	ee 0f       	add	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	ec 5b       	subi	r30, 0xBC	; 188
    2722:	fc 4d       	sbci	r31, 0xDC	; 220
    2724:	12 8e       	std	Z+26, r1	; 0x1a
    2726:	13 8e       	std	Z+27, r1	; 0x1b
    2728:	2f c0       	rjmp	.+94     	; 0x2788 <udd_ep_run+0x166>
    272a:	f7 01       	movw	r30, r14
    272c:	ee 0f       	add	r30, r30
    272e:	ff 1f       	adc	r31, r31
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	ee 0f       	add	r30, r30
    2736:	ff 1f       	adc	r31, r31
    2738:	ec 5b       	subi	r30, 0xBC	; 188
    273a:	fc 4d       	sbci	r31, 0xDC	; 220
    273c:	85 89       	ldd	r24, Z+21	; 0x15
    273e:	80 7c       	andi	r24, 0xC0	; 192
    2740:	80 3c       	cpi	r24, 0xC0	; 192
    2742:	a9 f4       	brne	.+42     	; 0x276e <udd_ep_run+0x14c>
    2744:	c7 01       	movw	r24, r14
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	88 5a       	subi	r24, 0xA8	; 168
    2754:	9c 4d       	sbci	r25, 0xDC	; 220
    2756:	94 db       	rcall	.-2264   	; 0x1e80 <udd_ep_get_size>
    2758:	bc 01       	movw	r22, r24
    275a:	c5 01       	movw	r24, r10
    275c:	af d2       	rcall	.+1374   	; 0x2cbc <__udivmodhi4>
    275e:	89 2b       	or	r24, r25
    2760:	31 f0       	breq	.+12     	; 0x276e <udd_ep_run+0x14c>
    2762:	f6 01       	movw	r30, r12
    2764:	80 81       	ld	r24, Z
    2766:	8e 7f       	andi	r24, 0xFE	; 254
    2768:	80 83       	st	Z, r24
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	14 c0       	rjmp	.+40     	; 0x2796 <udd_ep_run+0x174>
    276e:	f7 01       	movw	r30, r14
    2770:	ee 0f       	add	r30, r30
    2772:	ff 1f       	adc	r31, r31
    2774:	ee 0f       	add	r30, r30
    2776:	ff 1f       	adc	r31, r31
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	ec 5b       	subi	r30, 0xBC	; 188
    277e:	fc 4d       	sbci	r31, 0xDC	; 220
    2780:	16 8a       	std	Z+22, r1	; 0x16
    2782:	17 8a       	std	Z+23, r1	; 0x17
    2784:	12 8e       	std	Z+26, r1	; 0x1a
    2786:	13 8e       	std	Z+27, r1	; 0x1b
    2788:	87 2d       	mov	r24, r7
    278a:	2e dc       	rcall	.-1956   	; 0x1fe8 <udd_ep_trans_complet>
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	03 c0       	rjmp	.+6      	; 0x2796 <udd_ep_run+0x174>
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	01 c0       	rjmp	.+2      	; 0x2796 <udd_ep_run+0x174>
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	0f 90       	pop	r0
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	1f 91       	pop	r17
    279e:	0f 91       	pop	r16
    27a0:	ff 90       	pop	r15
    27a2:	ef 90       	pop	r14
    27a4:	df 90       	pop	r13
    27a6:	cf 90       	pop	r12
    27a8:	bf 90       	pop	r11
    27aa:	af 90       	pop	r10
    27ac:	9f 90       	pop	r9
    27ae:	8f 90       	pop	r8
    27b0:	7f 90       	pop	r7
    27b2:	6f 90       	pop	r6
    27b4:	08 95       	ret

000027b6 <udd_ep_abort>:
    27b6:	ff 92       	push	r15
    27b8:	0f 93       	push	r16
    27ba:	1f 93       	push	r17
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	18 2f       	mov	r17, r24
    27c2:	c8 2f       	mov	r28, r24
    27c4:	cf 70       	andi	r28, 0x0F	; 15
    27c6:	d0 e0       	ldi	r29, 0x00	; 0
    27c8:	ce 01       	movw	r24, r28
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	c1 2f       	mov	r28, r17
    27d0:	01 2e       	mov	r0, r17
    27d2:	00 0c       	add	r0, r0
    27d4:	dd 0b       	sbc	r29, r29
    27d6:	cc 27       	eor	r28, r28
    27d8:	dd 0f       	add	r29, r29
    27da:	cc 1f       	adc	r28, r28
    27dc:	dd 27       	eor	r29, r29
    27de:	c8 0f       	add	r28, r24
    27e0:	d9 1f       	adc	r29, r25
    27e2:	81 2f       	mov	r24, r17
    27e4:	75 db       	rcall	.-2326   	; 0x1ed0 <udd_ep_get_job>
    27e6:	dc 01       	movw	r26, r24
    27e8:	fe 01       	movw	r30, r28
    27ea:	ee 0f       	add	r30, r30
    27ec:	ff 1f       	adc	r31, r31
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	ee 0f       	add	r30, r30
    27f4:	ff 1f       	adc	r31, r31
    27f6:	e8 5a       	subi	r30, 0xA8	; 168
    27f8:	fc 4d       	sbci	r31, 0xDC	; 220
    27fa:	02 e0       	ldi	r16, 0x02	; 2
    27fc:	05 93       	las	Z, r16
    27fe:	8c 91       	ld	r24, X
    2800:	80 ff       	sbrs	r24, 0
    2802:	22 c0       	rjmp	.+68     	; 0x2848 <udd_ep_abort+0x92>
    2804:	8e 7f       	andi	r24, 0xFE	; 254
    2806:	8c 93       	st	X, r24
    2808:	17 96       	adiw	r26, 0x07	; 7
    280a:	ed 91       	ld	r30, X+
    280c:	fc 91       	ld	r31, X
    280e:	18 97       	sbiw	r26, 0x08	; 8
    2810:	30 97       	sbiw	r30, 0x00	; 0
    2812:	d1 f0       	breq	.+52     	; 0x2848 <udd_ep_abort+0x92>
    2814:	11 23       	and	r17, r17
    2816:	5c f4       	brge	.+22     	; 0x282e <udd_ep_abort+0x78>
    2818:	cc 0f       	add	r28, r28
    281a:	dd 1f       	adc	r29, r29
    281c:	cc 0f       	add	r28, r28
    281e:	dd 1f       	adc	r29, r29
    2820:	cc 0f       	add	r28, r28
    2822:	dd 1f       	adc	r29, r29
    2824:	cc 5b       	subi	r28, 0xBC	; 188
    2826:	dc 4d       	sbci	r29, 0xDC	; 220
    2828:	6a 8d       	ldd	r22, Y+26	; 0x1a
    282a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    282c:	0a c0       	rjmp	.+20     	; 0x2842 <udd_ep_abort+0x8c>
    282e:	cc 0f       	add	r28, r28
    2830:	dd 1f       	adc	r29, r29
    2832:	cc 0f       	add	r28, r28
    2834:	dd 1f       	adc	r29, r29
    2836:	cc 0f       	add	r28, r28
    2838:	dd 1f       	adc	r29, r29
    283a:	cc 5b       	subi	r28, 0xBC	; 188
    283c:	dc 4d       	sbci	r29, 0xDC	; 220
    283e:	6e 89       	ldd	r22, Y+22	; 0x16
    2840:	7f 89       	ldd	r23, Y+23	; 0x17
    2842:	41 2f       	mov	r20, r17
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	19 95       	eicall
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	ff 90       	pop	r15
    2852:	08 95       	ret

00002854 <udd_ep_free>:
    2854:	cf 93       	push	r28
    2856:	c8 2f       	mov	r28, r24
    2858:	ae df       	rcall	.-164    	; 0x27b6 <udd_ep_abort>
    285a:	ec 2f       	mov	r30, r28
    285c:	ef 70       	andi	r30, 0x0F	; 15
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	ee 0f       	add	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	8c 2f       	mov	r24, r28
    2866:	cc 0f       	add	r28, r28
    2868:	99 0b       	sbc	r25, r25
    286a:	88 27       	eor	r24, r24
    286c:	99 0f       	add	r25, r25
    286e:	88 1f       	adc	r24, r24
    2870:	99 27       	eor	r25, r25
    2872:	e8 0f       	add	r30, r24
    2874:	f9 1f       	adc	r31, r25
    2876:	ee 0f       	add	r30, r30
    2878:	ff 1f       	adc	r31, r31
    287a:	ee 0f       	add	r30, r30
    287c:	ff 1f       	adc	r31, r31
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	ec 5b       	subi	r30, 0xBC	; 188
    2884:	fc 4d       	sbci	r31, 0xDC	; 220
    2886:	15 8a       	std	Z+21, r1	; 0x15
    2888:	cf 91       	pop	r28
    288a:	08 95       	ret

0000288c <udd_ep_set_halt>:
    288c:	e8 2f       	mov	r30, r24
    288e:	ef 70       	andi	r30, 0x0F	; 15
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	ee 0f       	add	r30, r30
    2894:	ff 1f       	adc	r31, r31
    2896:	28 2f       	mov	r18, r24
    2898:	08 2e       	mov	r0, r24
    289a:	00 0c       	add	r0, r0
    289c:	33 0b       	sbc	r19, r19
    289e:	22 27       	eor	r18, r18
    28a0:	33 0f       	add	r19, r19
    28a2:	22 1f       	adc	r18, r18
    28a4:	33 27       	eor	r19, r19
    28a6:	e2 0f       	add	r30, r18
    28a8:	f3 1f       	adc	r31, r19
    28aa:	ee 0f       	add	r30, r30
    28ac:	ff 1f       	adc	r31, r31
    28ae:	ee 0f       	add	r30, r30
    28b0:	ff 1f       	adc	r31, r31
    28b2:	ee 0f       	add	r30, r30
    28b4:	ff 1f       	adc	r31, r31
    28b6:	ec 5b       	subi	r30, 0xBC	; 188
    28b8:	fc 4d       	sbci	r31, 0xDC	; 220
    28ba:	95 89       	ldd	r25, Z+21	; 0x15
    28bc:	94 60       	ori	r25, 0x04	; 4
    28be:	95 8b       	std	Z+21, r25	; 0x15
    28c0:	7a df       	rcall	.-268    	; 0x27b6 <udd_ep_abort>
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	08 95       	ret

000028c6 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    28c6:	1f 92       	push	r1
    28c8:	0f 92       	push	r0
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	0f 92       	push	r0
    28ce:	11 24       	eor	r1, r1
    28d0:	0b b6       	in	r0, 0x3b	; 59
    28d2:	0f 92       	push	r0
    28d4:	0f 93       	push	r16
    28d6:	2f 93       	push	r18
    28d8:	3f 93       	push	r19
    28da:	4f 93       	push	r20
    28dc:	5f 93       	push	r21
    28de:	6f 93       	push	r22
    28e0:	7f 93       	push	r23
    28e2:	8f 93       	push	r24
    28e4:	9f 93       	push	r25
    28e6:	af 93       	push	r26
    28e8:	bf 93       	push	r27
    28ea:	cf 93       	push	r28
    28ec:	ef 93       	push	r30
    28ee:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    28f0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    28f4:	88 23       	and	r24, r24
    28f6:	3c f4       	brge	.+14     	; 0x2906 <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    28f8:	80 e8       	ldi	r24, 0x80	; 128
    28fa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    28fe:	0e 94 75 0b 	call	0x16ea	; 0x16ea <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2902:	b0 d1       	rcall	.+864    	; 0x2c64 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2904:	89 c0       	rjmp	.+274    	; 0x2a18 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2906:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    290a:	82 ff       	sbrs	r24, 2
    290c:	20 c0       	rjmp	.+64     	; 0x294e <__vector_125+0x88>
		udd_ack_underflow_event();
    290e:	84 e0       	ldi	r24, 0x04	; 4
    2910:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    2914:	80 91 60 23 	lds	r24, 0x2360	; 0x802360 <udd_sram+0x1c>
    2918:	86 ff       	sbrs	r24, 6
    291a:	7e c0       	rjmp	.+252    	; 0x2a18 <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    291c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2920:	81 fd       	sbrc	r24, 1
    2922:	7a c0       	rjmp	.+244    	; 0x2a18 <__vector_125+0x152>
    2924:	f0 da       	rcall	.-2592   	; 0x1f06 <udd_ctrl_interrupt_tc_setup>
    2926:	81 11       	cpse	r24, r1
    2928:	77 c0       	rjmp	.+238    	; 0x2a18 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    292a:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ep_control_state>
    292e:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2930:	11 f4       	brne	.+4      	; 0x2936 <__vector_125+0x70>
    2932:	24 da       	rcall	.-3000   	; 0x1d7c <udd_ctrl_send_zlp_in>
    2934:	71 c0       	rjmp	.+226    	; 0x2a18 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2936:	84 30       	cpi	r24, 0x04	; 4
    2938:	09 f0       	breq	.+2      	; 0x293c <__vector_125+0x76>
    293a:	6e c0       	rjmp	.+220    	; 0x2a18 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    293c:	e1 e6       	ldi	r30, 0x61	; 97
    293e:	f3 e2       	ldi	r31, 0x23	; 35
    2940:	04 e0       	ldi	r16, 0x04	; 4
    2942:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2944:	e9 e5       	ldi	r30, 0x59	; 89
    2946:	f3 e2       	ldi	r31, 0x23	; 35
    2948:	04 e0       	ldi	r16, 0x04	; 4
    294a:	05 93       	las	Z, r16
    294c:	65 c0       	rjmp	.+202    	; 0x2a18 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    294e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2952:	81 ff       	sbrs	r24, 1
    2954:	5c c0       	rjmp	.+184    	; 0x2a0e <__vector_125+0x148>
		udd_ack_overflow_event();
    2956:	82 e0       	ldi	r24, 0x02	; 2
    2958:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    295c:	80 91 58 23 	lds	r24, 0x2358	; 0x802358 <udd_sram+0x14>
    2960:	86 ff       	sbrs	r24, 6
    2962:	5a c0       	rjmp	.+180    	; 0x2a18 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2964:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2968:	81 fd       	sbrc	r24, 1
    296a:	56 c0       	rjmp	.+172    	; 0x2a18 <__vector_125+0x152>
    296c:	cc da       	rcall	.-2664   	; 0x1f06 <udd_ctrl_interrupt_tc_setup>
    296e:	81 11       	cpse	r24, r1
    2970:	53 c0       	rjmp	.+166    	; 0x2a18 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2972:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ep_control_state>
    2976:	82 30       	cpi	r24, 0x02	; 2
    2978:	41 f4       	brne	.+16     	; 0x298a <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    297a:	84 e0       	ldi	r24, 0x04	; 4
    297c:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2980:	e8 e5       	ldi	r30, 0x58	; 88
    2982:	f3 e2       	ldi	r31, 0x23	; 35
    2984:	02 e0       	ldi	r16, 0x02	; 2
    2986:	06 93       	lac	Z, r16
    2988:	47 c0       	rjmp	.+142    	; 0x2a18 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    298a:	83 30       	cpi	r24, 0x03	; 3
    298c:	09 f0       	breq	.+2      	; 0x2990 <__vector_125+0xca>
    298e:	44 c0       	rjmp	.+136    	; 0x2a18 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2990:	e1 e6       	ldi	r30, 0x61	; 97
    2992:	f3 e2       	ldi	r31, 0x23	; 35
    2994:	04 e0       	ldi	r16, 0x04	; 4
    2996:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2998:	e9 e5       	ldi	r30, 0x59	; 89
    299a:	f3 e2       	ldi	r31, 0x23	; 35
    299c:	04 e0       	ldi	r16, 0x04	; 4
    299e:	05 93       	las	Z, r16
    29a0:	3b c0       	rjmp	.+118    	; 0x2a18 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    29a2:	80 e1       	ldi	r24, 0x10	; 16
    29a4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    29a8:	c1 e0       	ldi	r28, 0x01	; 1
    29aa:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    29ac:	04 df       	rcall	.-504    	; 0x27b6 <udd_ep_abort>
    29ae:	8c 2f       	mov	r24, r28
    29b0:	80 68       	ori	r24, 0x80	; 128
    29b2:	01 df       	rcall	.-510    	; 0x27b6 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    29b4:	cf 5f       	subi	r28, 0xFF	; 255
    29b6:	c5 30       	cpi	r28, 0x05	; 5
    29b8:	c1 f7       	brne	.-16     	; 0x29aa <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    29ba:	0e 94 4b 0b 	call	0x1696	; 0x1696 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    29be:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    29c2:	e4 e4       	ldi	r30, 0x44	; 68
    29c4:	f3 e2       	ldi	r31, 0x23	; 35
    29c6:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    29c8:	96 e0       	ldi	r25, 0x06	; 6
    29ca:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    29cc:	80 e4       	ldi	r24, 0x40	; 64
    29ce:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    29d0:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    29d2:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    29d4:	85 8f       	std	Z+29, r24	; 0x1d
    29d6:	85 e3       	ldi	r24, 0x35	; 53
    29d8:	93 e2       	ldi	r25, 0x23	; 35
    29da:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    29dc:	91 8f       	std	Z+25, r25	; 0x19
    29de:	9b d9       	rcall	.-3274   	; 0x1d16 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    29e0:	1b c0       	rjmp	.+54     	; 0x2a18 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    29e2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    29e6:	86 ff       	sbrs	r24, 6
    29e8:	07 c0       	rjmp	.+14     	; 0x29f8 <__vector_125+0x132>
    29ea:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    29ec:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    29f0:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    29f2:	59 d9       	rcall	.-3406   	; 0x1ca6 <udd_sleep_mode>
    29f4:	35 d1       	rcall	.+618    	; 0x2c60 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    29f6:	10 c0       	rjmp	.+32     	; 0x2a18 <__vector_125+0x152>
    29f8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    29fc:	85 ff       	sbrs	r24, 5
    29fe:	0c c0       	rjmp	.+24     	; 0x2a18 <__vector_125+0x152>
    2a00:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    2a02:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2a06:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2a08:	4e d9       	rcall	.-3428   	; 0x1ca6 <udd_sleep_mode>
    2a0a:	2b d1       	rcall	.+598    	; 0x2c62 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2a0c:	05 c0       	rjmp	.+10     	; 0x2a18 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2a0e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2a12:	84 fd       	sbrc	r24, 4
    2a14:	c6 cf       	rjmp	.-116    	; 0x29a2 <__vector_125+0xdc>
    2a16:	e5 cf       	rjmp	.-54     	; 0x29e2 <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2a18:	ff 91       	pop	r31
    2a1a:	ef 91       	pop	r30
    2a1c:	cf 91       	pop	r28
    2a1e:	bf 91       	pop	r27
    2a20:	af 91       	pop	r26
    2a22:	9f 91       	pop	r25
    2a24:	8f 91       	pop	r24
    2a26:	7f 91       	pop	r23
    2a28:	6f 91       	pop	r22
    2a2a:	5f 91       	pop	r21
    2a2c:	4f 91       	pop	r20
    2a2e:	3f 91       	pop	r19
    2a30:	2f 91       	pop	r18
    2a32:	0f 91       	pop	r16
    2a34:	0f 90       	pop	r0
    2a36:	0b be       	out	0x3b, r0	; 59
    2a38:	0f 90       	pop	r0
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	0f 90       	pop	r0
    2a3e:	1f 90       	pop	r1
    2a40:	18 95       	reti

00002a42 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2a42:	1f 92       	push	r1
    2a44:	0f 92       	push	r0
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	0f 92       	push	r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	0b b6       	in	r0, 0x3b	; 59
    2a4e:	0f 92       	push	r0
    2a50:	0f 93       	push	r16
    2a52:	1f 93       	push	r17
    2a54:	2f 93       	push	r18
    2a56:	3f 93       	push	r19
    2a58:	4f 93       	push	r20
    2a5a:	5f 93       	push	r21
    2a5c:	6f 93       	push	r22
    2a5e:	7f 93       	push	r23
    2a60:	8f 93       	push	r24
    2a62:	9f 93       	push	r25
    2a64:	af 93       	push	r26
    2a66:	bf 93       	push	r27
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	ef 93       	push	r30
    2a6e:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2a70:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2a74:	81 fd       	sbrc	r24, 1
    2a76:	03 c0       	rjmp	.+6      	; 0x2a7e <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2a78:	46 da       	rcall	.-2932   	; 0x1f06 <udd_ctrl_interrupt_tc_setup>
    2a7a:	81 11       	cpse	r24, r1
    2a7c:	c3 c0       	rjmp	.+390    	; 0x2c04 <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2a7e:	82 e0       	ldi	r24, 0x02	; 2
    2a80:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2a84:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2a88:	81 95       	neg	r24
    2a8a:	88 0f       	add	r24, r24
    2a8c:	e8 e5       	ldi	r30, 0x58	; 88
    2a8e:	f3 e2       	ldi	r31, 0x23	; 35
    2a90:	e8 1b       	sub	r30, r24
    2a92:	f1 09       	sbc	r31, r1
    2a94:	20 81       	ld	r18, Z
    2a96:	31 81       	ldd	r19, Z+1	; 0x01
    2a98:	28 55       	subi	r18, 0x58	; 88
    2a9a:	33 42       	sbci	r19, 0x23	; 35
    2a9c:	36 95       	lsr	r19
    2a9e:	27 95       	ror	r18
    2aa0:	36 95       	lsr	r19
    2aa2:	27 95       	ror	r18
    2aa4:	36 95       	lsr	r19
    2aa6:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2aa8:	82 2f       	mov	r24, r18
    2aaa:	86 95       	lsr	r24
    2aac:	20 fd       	sbrc	r18, 0
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <__vector_126+0x72>
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	01 c0       	rjmp	.+2      	; 0x2ab6 <__vector_126+0x74>
    2ab4:	90 e8       	ldi	r25, 0x80	; 128
    2ab6:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2ab8:	e8 2f       	mov	r30, r24
    2aba:	ef 70       	andi	r30, 0x0F	; 15
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	ee 0f       	add	r30, r30
    2ac0:	ff 1f       	adc	r31, r31
    2ac2:	28 2f       	mov	r18, r24
    2ac4:	08 2e       	mov	r0, r24
    2ac6:	00 0c       	add	r0, r0
    2ac8:	33 0b       	sbc	r19, r19
    2aca:	22 27       	eor	r18, r18
    2acc:	33 0f       	add	r19, r19
    2ace:	22 1f       	adc	r18, r18
    2ad0:	33 27       	eor	r19, r19
    2ad2:	e2 0f       	add	r30, r18
    2ad4:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2ad6:	df 01       	movw	r26, r30
    2ad8:	aa 0f       	add	r26, r26
    2ada:	bb 1f       	adc	r27, r27
    2adc:	aa 0f       	add	r26, r26
    2ade:	bb 1f       	adc	r27, r27
    2ae0:	aa 0f       	add	r26, r26
    2ae2:	bb 1f       	adc	r27, r27
    2ae4:	ac 5b       	subi	r26, 0xBC	; 188
    2ae6:	bc 4d       	sbci	r27, 0xDC	; 220
    2ae8:	54 96       	adiw	r26, 0x14	; 20
    2aea:	9c 91       	ld	r25, X
    2aec:	95 ff       	sbrs	r25, 5
    2aee:	8a c0       	rjmp	.+276    	; 0x2c04 <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2af0:	ee 0f       	add	r30, r30
    2af2:	ff 1f       	adc	r31, r31
    2af4:	ee 0f       	add	r30, r30
    2af6:	ff 1f       	adc	r31, r31
    2af8:	ee 0f       	add	r30, r30
    2afa:	ff 1f       	adc	r31, r31
    2afc:	e8 5a       	subi	r30, 0xA8	; 168
    2afe:	fc 4d       	sbci	r31, 0xDC	; 220
    2b00:	00 e2       	ldi	r16, 0x20	; 32
    2b02:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2b04:	81 11       	cpse	r24, r1
    2b06:	79 c0       	rjmp	.+242    	; 0x2bfa <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b08:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ep_control_state>
    2b0c:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2b0e:	19 f4       	brne	.+6      	; 0x2b16 <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2b10:	43 d9       	rcall	.-3450   	; 0x1d98 <udd_ctrl_endofrequest>
    2b12:	01 d9       	rcall	.-3582   	; 0x1d16 <udd_ctrl_init>
    2b14:	77 c0       	rjmp	.+238    	; 0x2c04 <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2b16:	00 91 5a 23 	lds	r16, 0x235A	; 0x80235a <udd_sram+0x16>
    2b1a:	10 91 5b 23 	lds	r17, 0x235B	; 0x80235b <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2b1e:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    2b22:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    2b26:	c0 91 3d 23 	lds	r28, 0x233D	; 0x80233d <udd_ctrl_payload_nb_trans>
    2b2a:	d0 91 3e 23 	lds	r29, 0x233E	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    2b2e:	98 01       	movw	r18, r16
    2b30:	2c 0f       	add	r18, r28
    2b32:	3d 1f       	adc	r19, r29
    2b34:	82 17       	cp	r24, r18
    2b36:	93 07       	cpc	r25, r19
    2b38:	18 f4       	brcc	.+6      	; 0x2b40 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2b3a:	8c 01       	movw	r16, r24
    2b3c:	0c 1b       	sub	r16, r28
    2b3e:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2b40:	80 91 c1 23 	lds	r24, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    2b44:	90 91 c2 23 	lds	r25, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    2b48:	a8 01       	movw	r20, r16
    2b4a:	65 e3       	ldi	r22, 0x35	; 53
    2b4c:	73 e2       	ldi	r23, 0x23	; 35
    2b4e:	8c 0f       	add	r24, r28
    2b50:	9d 1f       	adc	r25, r29
    2b52:	d0 d0       	rcall	.+416    	; 0x2cf4 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2b54:	c0 0f       	add	r28, r16
    2b56:	d1 1f       	adc	r29, r17
    2b58:	c0 93 3d 23 	sts	0x233D, r28	; 0x80233d <udd_ctrl_payload_nb_trans>
    2b5c:	d0 93 3e 23 	sts	0x233E, r29	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2b60:	08 30       	cpi	r16, 0x08	; 8
    2b62:	11 05       	cpc	r17, r1
    2b64:	69 f4       	brne	.+26     	; 0x2b80 <__vector_126+0x13e>
    2b66:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
    2b6a:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    2b6e:	8c 0f       	add	r24, r28
    2b70:	9d 1f       	adc	r25, r29
    2b72:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    2b76:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    2b7a:	82 17       	cp	r24, r18
    2b7c:	93 07       	cpc	r25, r19
    2b7e:	80 f0       	brcs	.+32     	; 0x2ba0 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2b80:	e9 eb       	ldi	r30, 0xB9	; 185
    2b82:	f3 e2       	ldi	r31, 0x23	; 35
    2b84:	c2 87       	std	Z+10, r28	; 0x0a
    2b86:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2b88:	06 84       	ldd	r0, Z+14	; 0x0e
    2b8a:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b8c:	e0 2d       	mov	r30, r0
    2b8e:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2b90:	29 f0       	breq	.+10     	; 0x2b9c <__vector_126+0x15a>
    2b92:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2b94:	81 11       	cpse	r24, r1
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <__vector_126+0x15a>
    2b98:	e3 d8       	rcall	.-3642   	; 0x1d60 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2b9a:	34 c0       	rjmp	.+104    	; 0x2c04 <__vector_126+0x1c2>
    2b9c:	ef d8       	rcall	.-3618   	; 0x1d7c <udd_ctrl_send_zlp_in>
    2b9e:	32 c0       	rjmp	.+100    	; 0x2c04 <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2ba0:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    2ba4:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    2ba8:	c8 17       	cp	r28, r24
    2baa:	d9 07       	cpc	r29, r25
    2bac:	f9 f4       	brne	.+62     	; 0x2bec <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2bae:	e0 91 c7 23 	lds	r30, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0xe>
    2bb2:	f0 91 c8 23 	lds	r31, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0xf>
    2bb6:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2bb8:	11 f4       	brne	.+4      	; 0x2bbe <__vector_126+0x17c>
    2bba:	d2 d8       	rcall	.-3676   	; 0x1d60 <udd_ctrl_stall_data>
    2bbc:	23 c0       	rjmp	.+70     	; 0x2c04 <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2bbe:	19 95       	eicall
    2bc0:	81 11       	cpse	r24, r1
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2bc4:	cd d8       	rcall	.-3686   	; 0x1d60 <udd_ctrl_stall_data>
    2bc6:	1e c0       	rjmp	.+60     	; 0x2c04 <__vector_126+0x1c2>
    2bc8:	20 91 3f 23 	lds	r18, 0x233F	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2bcc:	30 91 40 23 	lds	r19, 0x2340	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    2bd0:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <udd_ctrl_payload_nb_trans>
    2bd4:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    2bd8:	82 0f       	add	r24, r18
    2bda:	93 1f       	adc	r25, r19
    2bdc:	80 93 3f 23 	sts	0x233F, r24	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
    2be0:	90 93 40 23 	sts	0x2340, r25	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    2be4:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2be8:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    2bec:	e8 e5       	ldi	r30, 0x58	; 88
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2bee:	f3 e2       	ldi	r31, 0x23	; 35
    2bf0:	02 e0       	ldi	r16, 0x02	; 2
    2bf2:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2bf4:	00 e2       	ldi	r16, 0x20	; 32
    2bf6:	06 93       	lac	Z, r16
    2bf8:	05 c0       	rjmp	.+10     	; 0x2c04 <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2bfa:	80 38       	cpi	r24, 0x80	; 128
		udd_ctrl_in_sent();
    2bfc:	11 f4       	brne	.+4      	; 0x2c02 <__vector_126+0x1c0>
    2bfe:	d4 d8       	rcall	.-3672   	; 0x1da8 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2c00:	01 c0       	rjmp	.+2      	; 0x2c04 <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2c02:	f2 d9       	rcall	.-3100   	; 0x1fe8 <udd_ep_trans_complet>
    2c04:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2c06:	ef 91       	pop	r30
    2c08:	df 91       	pop	r29
    2c0a:	cf 91       	pop	r28
    2c0c:	bf 91       	pop	r27
    2c0e:	af 91       	pop	r26
    2c10:	9f 91       	pop	r25
    2c12:	8f 91       	pop	r24
    2c14:	7f 91       	pop	r23
    2c16:	6f 91       	pop	r22
    2c18:	5f 91       	pop	r21
    2c1a:	4f 91       	pop	r20
    2c1c:	3f 91       	pop	r19
    2c1e:	2f 91       	pop	r18
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	0f 90       	pop	r0
    2c26:	0b be       	out	0x3b, r0	; 59
    2c28:	0f 90       	pop	r0
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	0f 90       	pop	r0
    2c2e:	1f 90       	pop	r1
    2c30:	18 95       	reti

00002c32 <main>:

static const uint8_t sequence = 1;

int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    2c32:	87 e0       	ldi	r24, 0x07	; 7
    2c34:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    2c38:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2c3a:	e3 eb       	ldi	r30, 0xB3	; 179
    2c3c:	f3 e2       	ldi	r31, 0x23	; 35
    2c3e:	10 82       	st	Z, r1
    2c40:	11 82       	std	Z+1, r1	; 0x01
    2c42:	12 82       	std	Z+2, r1	; 0x02
    2c44:	13 82       	std	Z+3, r1	; 0x03
    2c46:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    2c4c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <sysclk_init>

	io_ui_process(); // initializes board i/o pins
    2c50:	0e 94 a7 07 	call	0xf4e	; 0xf4e <io_ui_process>

	udc_start();               // starts USB device controller
    2c54:	0e 94 49 0b 	call	0x1692	; 0x1692 <udc_start>

	startup_ui_process(sequence); // pick preferred sequence (1-5)
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	0e 94 a9 07 	call	0xf52	; 0xf52 <startup_ui_process>
    2c5e:	ff cf       	rjmp	.-2      	; 0x2c5e <main+0x2c>

00002c60 <main_suspend_action>:
}

/* --------------------------------------------------------------------- */
/* -------------------------------- USB -------------------------------- */
/* --------------------------------------------------------------------- */
void main_suspend_action(void) { }
    2c60:	08 95       	ret

00002c62 <main_resume_action>:
void main_resume_action(void) { }
    2c62:	08 95       	ret

00002c64 <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    2c64:	80 91 af 23 	lds	r24, 0x23AF	; 0x8023af <main_b_kbd_enable>
    2c68:	88 23       	and	r24, r24
    2c6a:	81 f0       	breq	.+32     	; 0x2c8c <main_sof_action+0x28>
	return;
	kbd_ui_process();
    2c6c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <kbd_ui_process>

	if (!main_b_generic_enable)
    2c70:	80 91 ae 23 	lds	r24, 0x23AE	; 0x8023ae <main_b_generic_enable>
    2c74:	88 23       	and	r24, r24
    2c76:	51 f0       	breq	.+20     	; 0x2c8c <main_sof_action+0x28>
		return;
	jstk_ui_process();
    2c78:	0e 94 ab 07 	call	0xf56	; 0xf56 <jstk_ui_process>

	if (!main_b_led_enable)
    2c7c:	80 91 ad 23 	lds	r24, 0x23AD	; 0x8023ad <main_b_led_enable>
    2c80:	88 23       	and	r24, r24
    2c82:	21 f0       	breq	.+8      	; 0x2c8c <main_sof_action+0x28>
		return;
	led_ui_process();
    2c84:	0e 94 b3 07 	call	0xf66	; 0xf66 <led_ui_process>

	status_ui_process();
    2c88:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <status_ui_process>
    2c8c:	08 95       	ret

00002c8e <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2c8e:	08 95       	ret

00002c90 <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2c90:	08 95       	ret

00002c92 <main_kbd_enable>:

/* --------------------------------------------------------------------- */
/* ----------------------------- keyboard ------------------------------ */
/* --------------------------------------------------------------------- */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	80 93 af 23 	sts	0x23AF, r24	; 0x8023af <main_b_kbd_enable>
	return true;
}
    2c98:	08 95       	ret

00002c9a <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2c9a:	10 92 af 23 	sts	0x23AF, r1	; 0x8023af <main_b_kbd_enable>
    2c9e:	08 95       	ret

00002ca0 <main_generic_enable>:

/* --------------------------------------------------------------------- */
/* ----------------------------- joystick ------------------------------ */
/* --------------------------------------------------------------------- */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	80 93 ae 23 	sts	0x23AE, r24	; 0x8023ae <main_b_generic_enable>
	return true;
}
    2ca6:	08 95       	ret

00002ca8 <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2ca8:	10 92 ae 23 	sts	0x23AE, r1	; 0x8023ae <main_b_generic_enable>
    2cac:	08 95       	ret

00002cae <main_led_enable>:

/* --------------------------------------------------------------------- */
/* ------------------------------- LEDs -------------------------------- */
/* --------------------------------------------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	80 93 ad 23 	sts	0x23AD, r24	; 0x8023ad <main_b_led_enable>
	return true;
}
    2cb4:	08 95       	ret

00002cb6 <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2cb6:	10 92 ad 23 	sts	0x23AD, r1	; 0x8023ad <main_b_led_enable>
    2cba:	08 95       	ret

00002cbc <__udivmodhi4>:
    2cbc:	aa 1b       	sub	r26, r26
    2cbe:	bb 1b       	sub	r27, r27
    2cc0:	51 e1       	ldi	r21, 0x11	; 17
    2cc2:	07 c0       	rjmp	.+14     	; 0x2cd2 <__udivmodhi4_ep>

00002cc4 <__udivmodhi4_loop>:
    2cc4:	aa 1f       	adc	r26, r26
    2cc6:	bb 1f       	adc	r27, r27
    2cc8:	a6 17       	cp	r26, r22
    2cca:	b7 07       	cpc	r27, r23
    2ccc:	10 f0       	brcs	.+4      	; 0x2cd2 <__udivmodhi4_ep>
    2cce:	a6 1b       	sub	r26, r22
    2cd0:	b7 0b       	sbc	r27, r23

00002cd2 <__udivmodhi4_ep>:
    2cd2:	88 1f       	adc	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	5a 95       	dec	r21
    2cd8:	a9 f7       	brne	.-22     	; 0x2cc4 <__udivmodhi4_loop>
    2cda:	80 95       	com	r24
    2cdc:	90 95       	com	r25
    2cde:	bc 01       	movw	r22, r24
    2ce0:	cd 01       	movw	r24, r26
    2ce2:	08 95       	ret

00002ce4 <__tablejump2__>:
    2ce4:	ee 0f       	add	r30, r30
    2ce6:	ff 1f       	adc	r31, r31
    2ce8:	88 1f       	adc	r24, r24
    2cea:	8b bf       	out	0x3b, r24	; 59
    2cec:	07 90       	elpm	r0, Z+
    2cee:	f6 91       	elpm	r31, Z
    2cf0:	e0 2d       	mov	r30, r0
    2cf2:	19 94       	eijmp

00002cf4 <memcpy>:
    2cf4:	fb 01       	movw	r30, r22
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <memcpy+0xa>
    2cfa:	01 90       	ld	r0, Z+
    2cfc:	0d 92       	st	X+, r0
    2cfe:	41 50       	subi	r20, 0x01	; 1
    2d00:	50 40       	sbci	r21, 0x00	; 0
    2d02:	d8 f7       	brcc	.-10     	; 0x2cfa <memcpy+0x6>
    2d04:	08 95       	ret

00002d06 <_exit>:
    2d06:	f8 94       	cli

00002d08 <__stop_program>:
    2d08:	ff cf       	rjmp	.-2      	; 0x2d08 <__stop_program>
