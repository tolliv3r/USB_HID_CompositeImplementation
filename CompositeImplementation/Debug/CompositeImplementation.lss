
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00802000  00002d10  00002da4  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000243  00802196  00802196  00002f3a  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005b0  00000000  00000000  00002fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b391  00000000  00000000  00003560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052bd  00000000  00000000  0000e8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009bfb  00000000  00000000  00013bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cec  00000000  00000000  0001d7ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036d57  00000000  00000000  0001e498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036e0  00000000  00000000  000551ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000758  00000000  00000000  000588d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd80  00000000  00000000  00059028  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__vector_125>
     1f8:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <__vector_126>
     1fc:	00 04       	cpc	r0, r0
     1fe:	46 04       	cpc	r4, r6
     200:	f6 03       	fmuls	r23, r22
     202:	48 04       	cpc	r4, r8
     204:	f8 03       	fmulsu	r23, r16
     206:	fa 03       	fmulsu	r23, r18
     208:	fc 03       	fmulsu	r23, r20
     20a:	fe 03       	fmulsu	r23, r22
     20c:	00 04       	cpc	r0, r0
     20e:	4f 0f       	add	r20, r31
     210:	52 0f       	add	r21, r18
     212:	55 0f       	add	r21, r21
     214:	58 0f       	add	r21, r24
     216:	5b 0f       	add	r21, r27
     218:	5e 0f       	add	r21, r30
     21a:	61 0f       	add	r22, r17

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	e0 e1       	ldi	r30, 0x10	; 16
     234:	fd e2       	ldi	r31, 0x2D	; 45
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a6 39       	cpi	r26, 0x96	; 150
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a6 e9       	ldi	r26, 0x96	; 150
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a9 3d       	cpi	r26, 0xD9	; 217
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 18 16 	call	0x2c30	; 0x2c30 <main>
     25a:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     264:	30 91 cb 23 	lds	r19, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x2>
     268:	20 91 cc 23 	lds	r18, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     278:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
     27c:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     284:	e9 ec       	ldi	r30, 0xC9	; 201
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	86 e9       	ldi	r24, 0x96	; 150
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     298:	8b e7       	ldi	r24, 0x7B	; 123
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
	}
	return false;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_in_sent>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep) {
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_led_b_report_in_free = true;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <udi_hid_led_b_report_in_free>
     2b6:	08 95       	ret

000002b8 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2bc:	0b e7       	ldi	r16, 0x7B	; 123
     2be:	11 e0       	ldi	r17, 0x01	; 1
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	46 e9       	ldi	r20, 0x96	; 150
     2c6:	51 e2       	ldi	r21, 0x21	; 33
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	0e 94 10 13 	call	0x2620	; 0x2620 <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
}
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	08 95       	ret

000002d6 <udi_hid_led_enable>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep);

/* --------------------------------------------------------------------- */

bool udi_hid_led_enable(void) {
     2d6:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d8:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2dc:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <udi_hid_led_protocol>
	udi_hid_led_b_report_in_free = true;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <udi_hid_led_b_report_in_free>

	if(!udi_hid_led_report_out_enable())
     2e6:	e8 df       	rcall	.-48     	; 0x2b8 <udi_hid_led_report_out_enable>
     2e8:	c8 2f       	mov	r28, r24
     2ea:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2ec:	0e 94 55 16 	call	0x2caa	; 0x2caa <main_led_enable>
	return true;
}
     2f0:	8c 2f       	mov	r24, r28
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2f6:	81 11       	cpse	r24, r1
     2f8:	07 c0       	rjmp	.+14     	; 0x308 <udi_hid_led_report_out_received+0x12>
     2fa:	61 30       	cpi	r22, 0x01	; 1
     2fc:	71 05       	cpc	r23, r1
     2fe:	21 f4       	brne	.+8      	; 0x308 <udi_hid_led_report_out_received+0x12>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     300:	86 e9       	ldi	r24, 0x96	; 150
     302:	91 e2       	ldi	r25, 0x21	; 33
     304:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <main_led_report_out>
	}
	udi_hid_led_report_out_enable();
     308:	d7 cf       	rjmp	.-82     	; 0x2b8 <udi_hid_led_report_out_enable>
     30a:	08 95       	ret

0000030c <udi_hid_led_disable>:
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     30c:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <main_led_disable>
     310:	08 95       	ret

00000312 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     312:	22 e3       	ldi	r18, 0x32	; 50
     314:	31 e0       	ldi	r19, 0x01	; 1
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	50 e2       	ldi	r21, 0x20	; 32
     31a:	6c e9       	ldi	r22, 0x9C	; 156
     31c:	71 e2       	ldi	r23, 0x21	; 33
     31e:	8e e9       	ldi	r24, 0x9E	; 158
     320:	91 e2       	ldi	r25, 0x21	; 33
     322:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     326:	08 95       	ret

00000328 <udi_hid_led_send_report_in>:
		              udi_hid_led_report_out_received);
}


bool udi_hid_led_send_report_in(uint8_t *data)
{
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	1f 92       	push	r1
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	9c 01       	movw	r18, r24
	if (!udi_hid_led_b_report_in_free)
     33a:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <udi_hid_led_b_report_in_free>
     33e:	88 23       	and	r24, r24
     340:	d9 f0       	breq	.+54     	; 0x378 <udi_hid_led_send_report_in+0x50>
     342:	d9 01       	movw	r26, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     344:	8f b7       	in	r24, 0x3f	; 63
     346:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     348:	f8 94       	cli
	return flags;
     34a:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();

	memset(&udi_hid_led_report_in,
     34c:	e8 e9       	ldi	r30, 0x98	; 152
     34e:	f1 e2       	ldi	r31, 0x21	; 33
     350:	10 82       	st	Z, r1
		   0,
		   sizeof(udi_hid_led_report_in));
	memcpy(&udi_hid_led_report_in,
     352:	8c 91       	ld	r24, X
     354:	80 83       	st	Z, r24
		   data,
		   sizeof(udi_hid_led_report_in));
	udi_hid_led_b_report_in_free = !udd_ep_run(UDI_HID_LED_EP_IN,
     356:	08 e5       	ldi	r16, 0x58	; 88
     358:	11 e0       	ldi	r17, 0x01	; 1
     35a:	21 e0       	ldi	r18, 0x01	; 1
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	af 01       	movw	r20, r30
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	84 e8       	ldi	r24, 0x84	; 132
     364:	0e 94 10 13 	call	0x2620	; 0x2620 <udd_ep_run>
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	89 27       	eor	r24, r25
     36c:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <udi_hid_led_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     370:	ff be       	out	0x3f, r15	; 63
		                                       false,
		                                       (uint8_t *) & udi_hid_led_report_in,
		                                       sizeof(udi_hid_led_report_in),
		                                       udi_hid_led_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_led_b_report_in_free;
     372:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <udi_hid_led_b_report_in_free>
     376:	89 27       	eor	r24, r25
}
     378:	0f 90       	pop	r0
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	08 95       	ret

00000386 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     386:	e0 e0       	ldi	r30, 0x00	; 0
     388:	f6 e0       	ldi	r31, 0x06	; 6
     38a:	9f ef       	ldi	r25, 0xFF	; 255
     38c:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     38e:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     390:	e0 e2       	ldi	r30, 0x20	; 32
     392:	f6 e0       	ldi	r31, 0x06	; 6
     394:	3f e3       	ldi	r19, 0x3F	; 63
     396:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     398:	88 e1       	ldi	r24, 0x18	; 24
     39a:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     39c:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     39e:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3a0:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3a2:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3a4:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     3a6:	20 ec       	ldi	r18, 0xC0	; 192
     3a8:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     3aa:	40 e4       	ldi	r20, 0x40	; 64
     3ac:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     3ae:	40 e8       	ldi	r20, 0x80	; 128
     3b0:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     3b2:	e0 e4       	ldi	r30, 0x40	; 64
     3b4:	f6 e0       	ldi	r31, 0x06	; 6
     3b6:	4c ef       	ldi	r20, 0xFC	; 252
     3b8:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ba:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3bc:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3be:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3c0:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3c2:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3c4:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     3c6:	43 e0       	ldi	r20, 0x03	; 3
     3c8:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     3ca:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     3cc:	e0 e6       	ldi	r30, 0x60	; 96
     3ce:	f6 e0       	ldi	r31, 0x06	; 6
     3d0:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d2:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d4:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d6:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d8:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3da:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3dc:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     3de:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     3e0:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     3e2:	e0 e8       	ldi	r30, 0x80	; 128
     3e4:	f6 e0       	ldi	r31, 0x06	; 6
     3e6:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e8:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ea:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ec:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ee:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f0:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f2:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f4:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f6:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     3f8:	e0 ea       	ldi	r30, 0xA0	; 160
     3fa:	f6 e0       	ldi	r31, 0x06	; 6
     3fc:	90 ef       	ldi	r25, 0xF0	; 240
     3fe:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     400:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     402:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     404:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     406:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     408:	8f e0       	ldi	r24, 0x0F	; 15
     40a:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     40c:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     40e:	9c d2       	rcall	.+1336   	; 0x948 <led_init>
	keypad_init();
     410:	0d c1       	rjmp	.+538    	; 0x62c <keypad_init>
     412:	08 95       	ret

00000414 <jstk_readVertIndex>:
     414:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     418:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	92 2b       	or	r25, r18
     420:	96 95       	lsr	r25
     422:	87 95       	ror	r24
     424:	96 95       	lsr	r25
     426:	87 95       	ror	r24
     428:	bc 01       	movw	r22, r24
     42a:	7f 70       	andi	r23, 0x0F	; 15
     42c:	80 ff       	sbrs	r24, 0
     42e:	17 c0       	rjmp	.+46     	; 0x45e <jstk_readVertIndex+0x4a>
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	e1 e0       	ldi	r30, 0x01	; 1
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	82 2f       	mov	r24, r18
     43a:	af 01       	movw	r20, r30
     43c:	02 2e       	mov	r0, r18
     43e:	02 c0       	rjmp	.+4      	; 0x444 <jstk_readVertIndex+0x30>
     440:	44 0f       	add	r20, r20
     442:	55 1f       	adc	r21, r21
     444:	0a 94       	dec	r0
     446:	e2 f7       	brpl	.-8      	; 0x440 <jstk_readVertIndex+0x2c>
     448:	46 23       	and	r20, r22
     44a:	57 23       	and	r21, r23
     44c:	45 2b       	or	r20, r21
     44e:	41 f0       	breq	.+16     	; 0x460 <jstk_readVertIndex+0x4c>
     450:	2f 5f       	subi	r18, 0xFF	; 255
     452:	3f 4f       	sbci	r19, 0xFF	; 255
     454:	2c 30       	cpi	r18, 0x0C	; 12
     456:	31 05       	cpc	r19, r1
     458:	79 f7       	brne	.-34     	; 0x438 <jstk_readVertIndex+0x24>
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	08 95       	ret
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	08 95       	ret

00000462 <jstk_readHoriIndex>:
     462:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     466:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	92 2b       	or	r25, r18
     46e:	bc 01       	movw	r22, r24
     470:	7f 70       	andi	r23, 0x0F	; 15
     472:	80 ff       	sbrs	r24, 0
     474:	17 c0       	rjmp	.+46     	; 0x4a4 <jstk_readHoriIndex+0x42>
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	e1 e0       	ldi	r30, 0x01	; 1
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	82 2f       	mov	r24, r18
     480:	af 01       	movw	r20, r30
     482:	02 2e       	mov	r0, r18
     484:	02 c0       	rjmp	.+4      	; 0x48a <jstk_readHoriIndex+0x28>
     486:	44 0f       	add	r20, r20
     488:	55 1f       	adc	r21, r21
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <jstk_readHoriIndex+0x24>
     48e:	46 23       	and	r20, r22
     490:	57 23       	and	r21, r23
     492:	45 2b       	or	r20, r21
     494:	41 f0       	breq	.+16     	; 0x4a6 <jstk_readHoriIndex+0x44>
     496:	2f 5f       	subi	r18, 0xFF	; 255
     498:	3f 4f       	sbci	r19, 0xFF	; 255
     49a:	2c 30       	cpi	r18, 0x0C	; 12
     49c:	31 05       	cpc	r19, r1
     49e:	79 f7       	brne	.-34     	; 0x47e <jstk_readHoriIndex+0x1c>
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	08 95       	ret
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	08 95       	ret

000004a8 <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     4a8:	88 23       	and	r24, r24
     4aa:	f4 f1       	brlt	.+124    	; 0x528 <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     4ac:	9b ef       	ldi	r25, 0xFB	; 251
     4ae:	98 0f       	add	r25, r24
     4b0:	92 30       	cpi	r25, 0x02	; 2
     4b2:	e0 f1       	brcs	.+120    	; 0x52c <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     4b4:	85 30       	cpi	r24, 0x05	; 5
     4b6:	34 f4       	brge	.+12     	; 0x4c4 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4b8:	95 e0       	ldi	r25, 0x05	; 5
     4ba:	98 1b       	sub	r25, r24
     4bc:	92 30       	cpi	r25, 0x02	; 2
     4be:	08 f0       	brcs	.+2      	; 0x4c2 <jstk_ledMask+0x1a>
     4c0:	42 c0       	rjmp	.+132    	; 0x546 <jstk_ledMask+0x9e>
     4c2:	36 c0       	rjmp	.+108    	; 0x530 <jstk_ledMask+0x88>
     4c4:	9a ef       	ldi	r25, 0xFA	; 250
     4c6:	98 0f       	add	r25, r24
     4c8:	92 30       	cpi	r25, 0x02	; 2
     4ca:	b0 f5       	brcc	.+108    	; 0x538 <jstk_ledMask+0x90>
     4cc:	31 c0       	rjmp	.+98     	; 0x530 <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4ce:	62 e0       	ldi	r22, 0x02	; 2
     4d0:	23 e0       	ldi	r18, 0x03	; 3
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     4d8:	e1 e0       	ldi	r30, 0x01	; 1
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	af 01       	movw	r20, r30
     4de:	02 2e       	mov	r0, r18
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <jstk_ledMask+0x3e>
     4e2:	44 0f       	add	r20, r20
     4e4:	55 1f       	adc	r21, r21
     4e6:	0a 94       	dec	r0
     4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <jstk_ledMask+0x3a>
     4ea:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     4ec:	9f 5f       	subi	r25, 0xFF	; 255
     4ee:	21 50       	subi	r18, 0x01	; 1
     4f0:	31 09       	sbc	r19, r1
     4f2:	96 17       	cp	r25, r22
     4f4:	98 f3       	brcs	.-26     	; 0x4dc <jstk_ledMask+0x34>
     4f6:	08 95       	ret
     4f8:	81 50       	subi	r24, 0x01	; 1
     4fa:	48 2f       	mov	r20, r24
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	4b 5f       	subi	r20, 0xFB	; 251
     500:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     502:	24 e0       	ldi	r18, 0x04	; 4
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     508:	e1 e0       	ldi	r30, 0x01	; 1
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	bf 01       	movw	r22, r30
     50e:	02 2e       	mov	r0, r18
     510:	02 c0       	rjmp	.+4      	; 0x516 <jstk_ledMask+0x6e>
     512:	66 0f       	add	r22, r22
     514:	77 1f       	adc	r23, r23
     516:	0a 94       	dec	r0
     518:	e2 f7       	brpl	.-8      	; 0x512 <jstk_ledMask+0x6a>
     51a:	86 2b       	or	r24, r22
     51c:	2f 5f       	subi	r18, 0xFF	; 255
     51e:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     520:	24 17       	cp	r18, r20
     522:	35 07       	cpc	r19, r21
     524:	99 f7       	brne	.-26     	; 0x50c <jstk_ledMask+0x64>
     526:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     52c:	88 e1       	ldi	r24, 0x18	; 24
     52e:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     530:	85 30       	cpi	r24, 0x05	; 5
     532:	6c f2       	brlt	.-102    	; 0x4ce <jstk_ledMask+0x26>
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	e0 cf       	rjmp	.-64     	; 0x4f8 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     538:	85 50       	subi	r24, 0x05	; 5
     53a:	85 30       	cpi	r24, 0x05	; 5
     53c:	08 f0       	brcs	.+2      	; 0x540 <jstk_ledMask+0x98>
     53e:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     540:	81 11       	cpse	r24, r1
     542:	da cf       	rjmp	.-76     	; 0x4f8 <jstk_ledMask+0x50>
     544:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     546:	66 e0       	ldi	r22, 0x06	; 6
     548:	68 1b       	sub	r22, r24
     54a:	65 30       	cpi	r22, 0x05	; 5
     54c:	08 f0       	brcs	.+2      	; 0x550 <jstk_ledMask+0xa8>
     54e:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     550:	61 11       	cpse	r22, r1
     552:	be cf       	rjmp	.-132    	; 0x4d0 <jstk_ledMask+0x28>
     554:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     556:	08 95       	ret

00000558 <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     558:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     55a:	5c df       	rcall	.-328    	; 0x414 <jstk_readVertIndex>
     55c:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     55e:	81 df       	rcall	.-254    	; 0x462 <jstk_readHoriIndex>
     560:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     562:	24 f4       	brge	.+8      	; 0x56c <jstk_readMask+0x14>
     564:	88 23       	and	r24, r24
     566:	c4 f0       	brlt	.+48     	; 0x598 <jstk_readMask+0x40>
     568:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     56a:	09 c0       	rjmp	.+18     	; 0x57e <jstk_readMask+0x26>
     56c:	c6 30       	cpi	r28, 0x06	; 6
     56e:	1c f0       	brlt	.+6      	; 0x576 <jstk_readMask+0x1e>
     570:	9b ef       	ldi	r25, 0xFB	; 251
     572:	9c 0f       	add	r25, r28
     574:	02 c0       	rjmp	.+4      	; 0x57a <jstk_readMask+0x22>
     576:	95 e0       	ldi	r25, 0x05	; 5
     578:	9c 1b       	sub	r25, r28
     57a:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     57c:	54 f0       	brlt	.+20     	; 0x592 <jstk_readMask+0x3a>
     57e:	86 30       	cpi	r24, 0x06	; 6
     580:	1c f0       	brlt	.+6      	; 0x588 <jstk_readMask+0x30>
     582:	2b ef       	ldi	r18, 0xFB	; 251
     584:	28 0f       	add	r18, r24
     586:	02 c0       	rjmp	.+4      	; 0x58c <jstk_readMask+0x34>
     588:	25 e0       	ldi	r18, 0x05	; 5
     58a:	28 1b       	sub	r18, r24
     58c:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     58e:	08 f4       	brcc	.+2      	; 0x592 <jstk_readMask+0x3a>
     590:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     592:	8c 2f       	mov	r24, r28
     594:	89 df       	rcall	.-238    	; 0x4a8 <jstk_ledMask>
     596:	01 c0       	rjmp	.+2      	; 0x59a <jstk_readMask+0x42>
     598:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     59a:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     59c:	08 95       	ret

0000059e <jstk_usbTask>:
     59e:	61 df       	rcall	.-318    	; 0x462 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5a0:	88 23       	and	r24, r24
     5a2:	3c f0       	brlt	.+14     	; 0x5b2 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5a4:	e8 2f       	mov	r30, r24
     5a6:	88 0f       	add	r24, r24
     5a8:	ff 0b       	sbc	r31, r31
     5aa:	e6 57       	subi	r30, 0x76	; 118
     5ac:	fe 4d       	sbci	r31, 0xDE	; 222
     5ae:	80 81       	ld	r24, Z
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5b2:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     5b4:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5b8:	2d df       	rcall	.-422    	; 0x414 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5ba:	88 23       	and	r24, r24
     5bc:	3c f0       	brlt	.+14     	; 0x5cc <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5be:	e8 2f       	mov	r30, r24
     5c0:	88 0f       	add	r24, r24
     5c2:	ff 0b       	sbc	r31, r31
     5c4:	e6 57       	subi	r30, 0x76	; 118
     5c6:	fe 4d       	sbci	r31, 0xDE	; 222
     5c8:	80 81       	ld	r24, Z
     5ca:	01 c0       	rjmp	.+2      	; 0x5ce <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5cc:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5ce:	e0 ea       	ldi	r30, 0xA0	; 160
     5d0:	f1 e2       	ldi	r31, 0x21	; 33
     5d2:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     5d4:	20 81       	ld	r18, Z
     5d6:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     5da:	29 13       	cpse	r18, r25
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <jstk_usbTask+0x48>
     5de:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     5e2:	98 17       	cp	r25, r24
     5e4:	71 f0       	breq	.+28     	; 0x602 <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     5e6:	80 ea       	ldi	r24, 0xA0	; 160
     5e8:	91 e2       	ldi	r25, 0x21	; 33
     5ea:	d4 d5       	rcall	.+2984   	; 0x1194 <udi_hid_generic_send_report_in>
     5ec:	88 23       	and	r24, r24
     5ee:	49 f0       	breq	.+18     	; 0x602 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     5f0:	e6 e2       	ldi	r30, 0x26	; 38
     5f2:	f0 e2       	ldi	r31, 0x20	; 32
     5f4:	a0 ea       	ldi	r26, 0xA0	; 160
     5f6:	b1 e2       	ldi	r27, 0x21	; 33
     5f8:	8c 91       	ld	r24, X
     5fa:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     5fc:	11 96       	adiw	r26, 0x01	; 1
     5fe:	8c 91       	ld	r24, X
     600:	81 83       	std	Z+1, r24	; 0x01
     602:	08 95       	ret

00000604 <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     604:	a9 df       	rcall	.-174    	; 0x558 <jstk_readMask>
     606:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     60a:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     60e:	90 93 c1 23 	sts	0x23C1, r25	; 0x8023c1 <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     612:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <jstk_testMode>
     616:	94 fd       	sbrc	r25, 4
     618:	07 c0       	rjmp	.+14     	; 0x628 <joystick+0x24>
        if (jstk_mask) {
     61a:	88 23       	and	r24, r24
            led_allOff();
     61c:	31 f0       	breq	.+12     	; 0x62a <joystick+0x26>
     61e:	9f d1       	rcall	.+830    	; 0x95e <led_allOff>
            led_on(jstk_mask);
     620:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <jstk_mask>
     624:	a2 c1       	rjmp	.+836    	; 0x96a <led_on>
        }
    } else {                                // normal mode
        // led_allOff();                       // for testing
        jstk_usbTask();                     // send to USB
     626:	08 95       	ret
     628:	ba cf       	rjmp	.-140    	; 0x59e <jstk_usbTask>
     62a:	08 95       	ret

0000062c <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     62c:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <kpd_keyPressed>
     630:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <kpd_currState>
     634:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <kpd_prevState>
     638:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <kpd_exitTestMode>
     63c:	10 92 ae 21 	sts	0x21AE, r1	; 0x8021ae <kpd_rowVal>
     640:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <kpd_code>
     644:	e4 eb       	ldi	r30, 0xB4	; 180
     646:	f1 e2       	ldi	r31, 0x21	; 33
     648:	81 e6       	ldi	r24, 0x61	; 97
     64a:	80 83       	st	Z, r24
     64c:	80 e6       	ldi	r24, 0x60	; 96
     64e:	81 83       	std	Z+1, r24	; 0x01
     650:	12 82       	std	Z+2, r1	; 0x02
     652:	13 82       	std	Z+3, r1	; 0x03
     654:	8f e5       	ldi	r24, 0x5F	; 95
     656:	84 83       	std	Z+4, r24	; 0x04
     658:	8e e5       	ldi	r24, 0x5E	; 94
     65a:	85 83       	std	Z+5, r24	; 0x05
     65c:	16 82       	std	Z+6, r1	; 0x06
     65e:	17 82       	std	Z+7, r1	; 0x07
     660:	8d e5       	ldi	r24, 0x5D	; 93
     662:	80 87       	std	Z+8, r24	; 0x08
     664:	11 86       	std	Z+9, r1	; 0x09
     666:	12 86       	std	Z+10, r1	; 0x0a
     668:	13 86       	std	Z+11, r1	; 0x0b
     66a:	14 86       	std	Z+12, r1	; 0x0c
     66c:	15 86       	std	Z+13, r1	; 0x0d
     66e:	89 e5       	ldi	r24, 0x59	; 89
     670:	86 87       	std	Z+14, r24	; 0x0e
     672:	8b e5       	ldi	r24, 0x5B	; 91
     674:	87 87       	std	Z+15, r24	; 0x0f
     676:	10 8a       	std	Z+16, r1	; 0x10
     678:	11 8a       	std	Z+17, r1	; 0x11
     67a:	8a e5       	ldi	r24, 0x5A	; 90
     67c:	82 8b       	std	Z+18, r24	; 0x12
     67e:	8c e5       	ldi	r24, 0x5C	; 92
     680:	83 8b       	std	Z+19, r24	; 0x13
     682:	ef ea       	ldi	r30, 0xAF	; 175
     684:	f1 e2       	ldi	r31, 0x21	; 33
     686:	8e e0       	ldi	r24, 0x0E	; 14
     688:	80 83       	st	Z, r24
     68a:	8d e0       	ldi	r24, 0x0D	; 13
     68c:	81 83       	std	Z+1, r24	; 0x01
     68e:	8b e0       	ldi	r24, 0x0B	; 11
     690:	82 83       	std	Z+2, r24	; 0x02
     692:	87 e0       	ldi	r24, 0x07	; 7
     694:	83 83       	std	Z+3, r24	; 0x03
     696:	8f ef       	ldi	r24, 0xFF	; 255
     698:	84 83       	std	Z+4, r24	; 0x04
     69a:	08 95       	ret

0000069c <keypad_poll>:
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	90 91 a5 21 	lds	r25, 0x21A5	; 0x8021a5 <prevRowMask.5333>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	15 e0       	ldi	r17, 0x05	; 5
     6ae:	74 e0       	ldi	r23, 0x04	; 4
     6b0:	e0 ea       	ldi	r30, 0xA0	; 160
     6b2:	f6 e0       	ldi	r31, 0x06	; 6
     6b4:	a0 e2       	ldi	r26, 0x20	; 32
     6b6:	b6 e0       	ldi	r27, 0x06	; 6
     6b8:	00 e8       	ldi	r16, 0x80	; 128
     6ba:	62 2f       	mov	r22, r18
     6bc:	e9 01       	movw	r28, r18
     6be:	c1 55       	subi	r28, 0x51	; 81
     6c0:	de 4d       	sbci	r29, 0xDE	; 222
     6c2:	88 81       	ld	r24, Y
     6c4:	84 83       	std	Z+4, r24	; 0x04
     6c6:	24 30       	cpi	r18, 0x04	; 4
     6c8:	21 f4       	brne	.+8      	; 0x6d2 <keypad_poll+0x36>
     6ca:	16 96       	adiw	r26, 0x06	; 6
     6cc:	0c 93       	st	X, r16
     6ce:	16 97       	sbiw	r26, 0x06	; 6
     6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <keypad_poll+0x3c>
     6d2:	15 96       	adiw	r26, 0x05	; 5
     6d4:	0c 93       	st	X, r16
     6d6:	15 97       	sbiw	r26, 0x05	; 5
     6d8:	80 85       	ldd	r24, Z+8	; 0x08
     6da:	80 95       	com	r24
     6dc:	80 7f       	andi	r24, 0xF0	; 240
     6de:	48 2f       	mov	r20, r24
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	ea 01       	movw	r28, r20
     6e4:	21 97       	sbiw	r28, 0x01	; 1
     6e6:	4c 23       	and	r20, r28
     6e8:	5d 23       	and	r21, r29
     6ea:	45 2b       	or	r20, r21
     6ec:	41 f0       	breq	.+16     	; 0x6fe <keypad_poll+0x62>
     6ee:	90 95       	com	r25
     6f0:	98 23       	and	r25, r24
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <keypad_poll+0x5a>
     6f4:	98 2f       	mov	r25, r24
     6f6:	49 2f       	mov	r20, r25
     6f8:	41 95       	neg	r20
     6fa:	94 23       	and	r25, r20
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <keypad_poll+0x64>
     6fe:	98 2f       	mov	r25, r24
     700:	90 32       	cpi	r25, 0x20	; 32
     702:	51 f0       	breq	.+20     	; 0x718 <keypad_poll+0x7c>
     704:	18 f4       	brcc	.+6      	; 0x70c <keypad_poll+0x70>
     706:	90 31       	cpi	r25, 0x10	; 16
     708:	d9 f1       	breq	.+118    	; 0x780 <keypad_poll+0xe4>
     70a:	0a c0       	rjmp	.+20     	; 0x720 <keypad_poll+0x84>
     70c:	90 34       	cpi	r25, 0x40	; 64
     70e:	d1 f1       	breq	.+116    	; 0x784 <keypad_poll+0xe8>
     710:	90 38       	cpi	r25, 0x80	; 128
     712:	31 f4       	brne	.+12     	; 0x720 <keypad_poll+0x84>
     714:	73 e0       	ldi	r23, 0x03	; 3
     716:	37 c0       	rjmp	.+110    	; 0x786 <keypad_poll+0xea>
     718:	99 23       	and	r25, r25
     71a:	11 f0       	breq	.+4      	; 0x720 <keypad_poll+0x84>
     71c:	16 2f       	mov	r17, r22
     71e:	71 e0       	ldi	r23, 0x01	; 1
     720:	2f 5f       	subi	r18, 0xFF	; 255
     722:	3f 4f       	sbci	r19, 0xFF	; 255
     724:	98 2f       	mov	r25, r24
     726:	25 30       	cpi	r18, 0x05	; 5
     728:	31 05       	cpc	r19, r1
     72a:	39 f6       	brne	.-114    	; 0x6ba <keypad_poll+0x1e>
     72c:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <prevRowMask.5333>
     730:	80 e8       	ldi	r24, 0x80	; 128
     732:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     736:	74 30       	cpi	r23, 0x04	; 4
     738:	e0 f4       	brcc	.+56     	; 0x772 <keypad_poll+0xd6>
     73a:	e1 2f       	mov	r30, r17
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	ee 0f       	add	r30, r30
     740:	ff 1f       	adc	r31, r31
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	ec 54       	subi	r30, 0x4C	; 76
     748:	fe 4d       	sbci	r31, 0xDE	; 222
     74a:	e7 0f       	add	r30, r23
     74c:	f1 1d       	adc	r31, r1
     74e:	80 81       	ld	r24, Z
     750:	90 91 ad 21 	lds	r25, 0x21AD	; 0x8021ad <kpd_keyPressed>
     754:	91 11       	cpse	r25, r1
     756:	06 c0       	rjmp	.+12     	; 0x764 <keypad_poll+0xc8>
     758:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <kpd_code>
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	80 93 ad 21 	sts	0x21AD, r24	; 0x8021ad <kpd_keyPressed>
     762:	13 c0       	rjmp	.+38     	; 0x78a <keypad_poll+0xee>
     764:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <kpd_code>
     768:	89 17       	cp	r24, r25
     76a:	79 f0       	breq	.+30     	; 0x78a <keypad_poll+0xee>
     76c:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <kpd_code>
     770:	0c c0       	rjmp	.+24     	; 0x78a <keypad_poll+0xee>
     772:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <kpd_keyPressed>
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	41 f4       	brne	.+16     	; 0x78a <keypad_poll+0xee>
     77a:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <kpd_keyPressed>
     77e:	05 c0       	rjmp	.+10     	; 0x78a <keypad_poll+0xee>
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	01 c0       	rjmp	.+2      	; 0x786 <keypad_poll+0xea>
     784:	72 e0       	ldi	r23, 0x02	; 2
     786:	16 2f       	mov	r17, r22
     788:	cb cf       	rjmp	.-106    	; 0x720 <keypad_poll+0x84>
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <keypad_getState>:
     794:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <kpd_keyPressed>
     798:	08 95       	ret

0000079a <keypad_report>:

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     79a:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     79e:	80 93 c2 23 	sts	0x23C2, r24	; 0x8023c2 <kpd_testMode>
	}
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     7a2:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     7a6:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     7aa:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_codeOut = keypad_getCode();    // current code to be outputed
     7ae:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <kpd_codeOut>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     7b2:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <kpd_testMode>
     7b6:	84 fd       	sbrc	r24, 4
     7b8:	29 c0       	rjmp	.+82     	; 0x80c <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     7ba:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <kpd_currState>
     7be:	81 30       	cpi	r24, 0x01	; 1
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <keypad_report+0x2a>
     7c2:	54 c0       	rjmp	.+168    	; 0x86c <keypad_report+0xd2>
     7c4:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <kpd_prevState>
     7c8:	81 11       	cpse	r24, r1
     7ca:	50 c0       	rjmp	.+160    	; 0x86c <keypad_report+0xd2>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
     7cc:	e0 91 a9 21 	lds	r30, 0x21A9	; 0x8021a9 <kpd_codeOut>
     7d0:	8e 2f       	mov	r24, r30
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	fc 01       	movw	r30, r24
     7d6:	e9 55       	subi	r30, 0x59	; 89
     7d8:	f1 09       	sbc	r31, r1
     7da:	e9 30       	cpi	r30, 0x09	; 9
     7dc:	f1 05       	cpc	r31, r1
     7de:	90 f4       	brcc	.+36     	; 0x804 <keypad_report+0x6a>
     7e0:	88 27       	eor	r24, r24
     7e2:	e2 50       	subi	r30, 0x02	; 2
     7e4:	ff 4f       	sbci	r31, 0xFF	; 255
     7e6:	8f 4f       	sbci	r24, 0xFF	; 255
     7e8:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     7ec:	84 e0       	ldi	r24, 0x04	; 4
     7ee:	09 c0       	rjmp	.+18     	; 0x802 <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     7f0:	80 e1       	ldi	r24, 0x10	; 16
     7f2:	07 c0       	rjmp	.+14     	; 0x802 <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     7f4:	80 e2       	ldi	r24, 0x20	; 32
     7f6:	05 c0       	rjmp	.+10     	; 0x802 <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     7f8:	80 e4       	ldi	r24, 0x40	; 64
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     7fc:	80 e8       	ldi	r24, 0x80	; 128
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     800:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     802:	bd d0       	rcall	.+378    	; 0x97e <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <kpd_exitTestMode>
     80a:	30 c0       	rjmp	.+96     	; 0x86c <keypad_report+0xd2>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     80c:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <kpd_code>
	else // normal mode
	{
		static uint8_t kpd_prevCode = 0;
		uint8_t currCode = keypad_getCode();

		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     810:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <kpd_currState>
     814:	81 30       	cpi	r24, 0x01	; 1
     816:	61 f4       	brne	.+24     	; 0x830 <keypad_report+0x96>
     818:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <kpd_prevState>
     81c:	81 11       	cpse	r24, r1
     81e:	08 c0       	rjmp	.+16     	; 0x830 <keypad_report+0x96>
			kpd_prevCode = currCode;
     820:	90 93 a4 21 	sts	0x21A4, r25	; 0x8021a4 <kpd_prevCode.5374>

			keyStatus2Report = KEYPAD_PRESSED;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <keyStatus2Report>
			key2Report = currCode;
     82a:	90 93 a6 21 	sts	0x21A6, r25	; 0x8021a6 <key2Report>
     82e:	1e c0       	rjmp	.+60     	; 0x86c <keypad_report+0xd2>
		} else if (kpd_currState == KEYPAD_PRESSED &&
     830:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <kpd_currState>
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	61 f4       	brne	.+24     	; 0x850 <keypad_report+0xb6>
     838:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_prevCode.5374>
     83c:	98 17       	cp	r25, r24
     83e:	41 f0       	breq	.+16     	; 0x850 <keypad_report+0xb6>
			       currCode != kpd_prevCode) {
			kpd_prevCode = currCode;
     840:	90 93 a4 21 	sts	0x21A4, r25	; 0x8021a4 <kpd_prevCode.5374>
			
			keyStatus2Report = KEYPAD_PRESSED;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <keyStatus2Report>
			key2Report = currCode;
     84a:	90 93 a6 21 	sts	0x21A6, r25	; 0x8021a6 <key2Report>
     84e:	0e c0       	rjmp	.+28     	; 0x86c <keypad_report+0xd2>
		} else if (kpd_currState == KEYPAD_RELEASED &&
     850:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <kpd_currState>
     854:	81 11       	cpse	r24, r1
     856:	0a c0       	rjmp	.+20     	; 0x86c <keypad_report+0xd2>
			       kpd_prevState == KEYPAD_PRESSED) {
     858:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <kpd_prevState>
			       currCode != kpd_prevCode) {
			kpd_prevCode = currCode;
			
			keyStatus2Report = KEYPAD_PRESSED;
			key2Report = currCode;
		} else if (kpd_currState == KEYPAD_RELEASED &&
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	31 f4       	brne	.+12     	; 0x86c <keypad_report+0xd2>
			       kpd_prevState == KEYPAD_PRESSED) {
			keyStatus2Report = KEYPAD_RELEASED;
     860:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <keyStatus2Report>
			key2Report = kpd_prevCode;
     864:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_prevCode.5374>
     868:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <key2Report>
		}
	}
	
	// clears LEDs when exiting test mode
	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     86c:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <kpd_testMode>
     870:	84 ff       	sbrs	r24, 4
     872:	07 c0       	rjmp	.+14     	; 0x882 <keypad_report+0xe8>
     874:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <kpd_exitTestMode>
     878:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     87a:	19 f4       	brne	.+6      	; 0x882 <keypad_report+0xe8>
     87c:	70 d0       	rcall	.+224    	; 0x95e <led_allOff>
		kpd_exitTestMode = 0;
     87e:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <kpd_exitTestMode>
	}
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
     882:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <kpd_currState>
     886:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <kpd_prevState>
}
     88a:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	b9 cf       	rjmp	.-142    	; 0x802 <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     890:	88 e0       	ldi	r24, 0x08	; 8
     892:	b7 cf       	rjmp	.-146    	; 0x802 <keypad_report+0x68>

00000894 <keypad>:
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
}


void keypad(void) {
     894:	cf 93       	push	r28
	keypad_poll();
     896:	02 df       	rcall	.-508    	; 0x69c <keypad_poll>
	keypad_report();
     898:	80 df       	rcall	.-256    	; 0x79a <keypad_report>
     89a:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <keyStatus2Report>

	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = keyStatus2Report;
     89e:	c1 e0       	ldi	r28, 0x01	; 1
     8a0:	81 11       	cpse	r24, r1
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <keypad+0x12>
     8a4:	c0 e0       	ldi	r28, 0x00	; 0
     8a6:	88 23       	and	r24, r24
	uint8_t key_val = key2Report;

	if (key_down) {
     8a8:	81 f0       	breq	.+32     	; 0x8ca <keypad+0x36>
     8aa:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <key2Report>

	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = keyStatus2Report;
	uint8_t key_val = key2Report;
     8ae:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <key_was_down.5379>

	if (key_down) {
		if (!key_was_down)
     8b2:	91 11       	cpse	r25, r1
     8b4:	03 c0       	rjmp	.+6      	; 0x8bc <keypad+0x28>
     8b6:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <active_key.5380>
			active_key = key_val;
     8ba:	15 c0       	rjmp	.+42     	; 0x8e6 <keypad+0x52>
     8bc:	90 91 a2 21 	lds	r25, 0x21A2	; 0x8021a2 <active_key.5380>
		else if (key_val != active_key)
     8c0:	89 17       	cp	r24, r25
     8c2:	89 f0       	breq	.+34     	; 0x8e6 <keypad+0x52>
     8c4:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <active_key.5380>
			active_key = key_val;
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <keypad+0x52>
     8ca:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <key_was_down.5379>
	} else if (key_was_down) {
     8ce:	88 23       	and	r24, r24
     8d0:	51 f0       	breq	.+20     	; 0x8e6 <keypad+0x52>
     8d2:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <active_key.5380>
		if (active_key) {
     8d6:	88 23       	and	r24, r24
     8d8:	21 f0       	breq	.+8      	; 0x8e2 <keypad+0x4e>
			udi_hid_kbd_down(active_key);
     8da:	19 d5       	rcall	.+2610   	; 0x130e <udi_hid_kbd_down>
			udi_hid_kbd_up(active_key);
     8dc:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <active_key.5380>
     8e0:	da d4       	rcall	.+2484   	; 0x1296 <udi_hid_kbd_up>
     8e2:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <active_key.5380>
		}
		active_key = 0;
     8e6:	c0 93 a3 21 	sts	0x21A3, r28	; 0x8021a3 <key_was_down.5379>
	}
	key_was_down = key_down;
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <led_updateState>:
     8ee:	e9 ec       	ldi	r30, 0xC9	; 201
void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     8f0:	f1 e2       	ldi	r31, 0x21	; 33
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	ac 01       	movw	r20, r24
     8fa:	02 2e       	mov	r0, r18
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <led_updateState+0x14>
     8fe:	55 95       	asr	r21
     900:	47 95       	ror	r20
     902:	0a 94       	dec	r0
     904:	e2 f7       	brpl	.-8      	; 0x8fe <led_updateState+0x10>
     906:	40 fd       	sbrc	r20, 0
     908:	60 83       	st	Z, r22
     90a:	2f 5f       	subi	r18, 0xFF	; 255
     90c:	3f 4f       	sbci	r19, 0xFF	; 255
     90e:	31 96       	adiw	r30, 0x01	; 1
     910:	28 30       	cpi	r18, 0x08	; 8
     912:	31 05       	cpc	r19, r1
     914:	89 f7       	brne	.-30     	; 0x8f8 <led_updateState+0xa>
     916:	08 95       	ret

00000918 <userActivity>:
     918:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     91c:	80 93 d1 21 	sts	0x21D1, r24	; 0x8021d1 <testMode>
     920:	bd de       	rcall	.-646    	; 0x69c <keypad_poll>
     922:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <testMode>
     926:	84 ff       	sbrs	r24, 4
     928:	0a c0       	rjmp	.+20     	; 0x93e <userActivity+0x26>
     92a:	34 df       	rcall	.-408    	; 0x794 <keypad_getState>
     92c:	81 30       	cpi	r24, 0x01	; 1
     92e:	49 f0       	breq	.+18     	; 0x942 <userActivity+0x2a>
     930:	13 de       	rcall	.-986    	; 0x558 <jstk_readMask>
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	81 11       	cpse	r24, r1
     936:	01 c0       	rjmp	.+2      	; 0x93a <userActivity+0x22>
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	89 2f       	mov	r24, r25
     93c:	03 c0       	rjmp	.+6      	; 0x944 <userActivity+0x2c>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	01 c0       	rjmp	.+2      	; 0x944 <userActivity+0x2c>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	81 70       	andi	r24, 0x01	; 1
     946:	08 95       	ret

00000948 <led_init>:
     948:	e0 e0       	ldi	r30, 0x00	; 0
     94a:	f6 e0       	ldi	r31, 0x06	; 6
     94c:	8f ef       	ldi	r24, 0xFF	; 255
     94e:	81 83       	std	Z+1, r24	; 0x01
     950:	85 83       	std	Z+5, r24	; 0x05
     952:	e0 e2       	ldi	r30, 0x20	; 32
     954:	f6 e0       	ldi	r31, 0x06	; 6
     956:	80 e4       	ldi	r24, 0x40	; 64
     958:	81 83       	std	Z+1, r24	; 0x01
     95a:	86 83       	std	Z+6, r24	; 0x06
     95c:	08 95       	ret

0000095e <led_allOff>:
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	c3 cf       	rjmp	.-122    	; 0x8ee <led_updateState>
     968:	08 95       	ret

0000096a <led_on>:
     96a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	be cf       	rjmp	.-132    	; 0x8ee <led_updateState>
     972:	08 95       	ret

00000974 <led_off>:
     974:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	b9 cf       	rjmp	.-142    	; 0x8ee <led_updateState>
     97c:	08 95       	ret

0000097e <led_toggle>:
     97e:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     982:	e9 ec       	ldi	r30, 0xC9	; 201
     984:	f1 e2       	ldi	r31, 0x21	; 33
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	68 2f       	mov	r22, r24
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	ab 01       	movw	r20, r22
     992:	02 2e       	mov	r0, r18
     994:	02 c0       	rjmp	.+4      	; 0x99a <led_toggle+0x1c>
     996:	55 95       	asr	r21
     998:	47 95       	ror	r20
     99a:	0a 94       	dec	r0
     99c:	e2 f7       	brpl	.-8      	; 0x996 <led_toggle+0x18>
     99e:	40 ff       	sbrs	r20, 0
     9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <led_toggle+0x2a>
     9a2:	90 81       	ld	r25, Z
     9a4:	98 27       	eor	r25, r24
     9a6:	90 83       	st	Z, r25
     9a8:	2f 5f       	subi	r18, 0xFF	; 255
     9aa:	3f 4f       	sbci	r19, 0xFF	; 255
     9ac:	31 96       	adiw	r30, 0x01	; 1
     9ae:	28 30       	cpi	r18, 0x08	; 8
     9b0:	31 05       	cpc	r19, r1
     9b2:	71 f7       	brne	.-36     	; 0x990 <led_toggle+0x12>
     9b4:	08 95       	ret

000009b6 <led_setState>:
     9b6:	e0 e0       	ldi	r30, 0x00	; 0
     9b8:	f6 e0       	ldi	r31, 0x06	; 6
     9ba:	9f ef       	ldi	r25, 0xFF	; 255
     9bc:	95 83       	std	Z+5, r25	; 0x05
     9be:	86 83       	std	Z+6, r24	; 0x06
     9c0:	e9 ec       	ldi	r30, 0xC9	; 201
     9c2:	f1 e2       	ldi	r31, 0x21	; 33
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	ac 01       	movw	r20, r24
     9cc:	02 2e       	mov	r0, r18
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <led_setState+0x1e>
     9d0:	55 95       	asr	r21
     9d2:	47 95       	ror	r20
     9d4:	0a 94       	dec	r0
     9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <led_setState+0x1a>
     9d8:	41 70       	andi	r20, 0x01	; 1
     9da:	41 93       	st	Z+, r20
     9dc:	2f 5f       	subi	r18, 0xFF	; 255
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	28 30       	cpi	r18, 0x08	; 8
     9e2:	31 05       	cpc	r19, r1
     9e4:	91 f7       	brne	.-28     	; 0x9ca <led_setState+0x14>
     9e6:	08 95       	ret

000009e8 <led_getMap>:
     9e8:	e9 ec       	ldi	r30, 0xC9	; 201
     9ea:	f1 e2       	ldi	r31, 0x21	; 33
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	91 91       	ld	r25, Z+
     9f8:	99 23       	and	r25, r25
     9fa:	41 f0       	breq	.+16     	; 0xa0c <led_getMap+0x24>
     9fc:	ab 01       	movw	r20, r22
     9fe:	02 2e       	mov	r0, r18
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <led_getMap+0x1e>
     a02:	44 0f       	add	r20, r20
     a04:	55 1f       	adc	r21, r21
     a06:	0a 94       	dec	r0
     a08:	e2 f7       	brpl	.-8      	; 0xa02 <led_getMap+0x1a>
     a0a:	84 2b       	or	r24, r20
     a0c:	2f 5f       	subi	r18, 0xFF	; 255
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	28 30       	cpi	r18, 0x08	; 8
     a12:	31 05       	cpc	r19, r1
     a14:	81 f7       	brne	.-32     	; 0x9f6 <led_getMap+0xe>
     a16:	08 95       	ret

00000a18 <led_usbTask>:
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	1f 92       	push	r1
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	e2 df       	rcall	.-60     	; 0x9e8 <led_getMap>
     a24:	89 83       	std	Y+1, r24	; 0x01
     a26:	ce 01       	movw	r24, r28
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	7e dc       	rcall	.-1796   	; 0x328 <udi_hid_led_send_report_in>
     a2c:	0f 90       	pop	r0
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	08 95       	ret

00000a34 <testIndicator>:
}

void testIndicator(void) { // blink status LED when in test mode
    sof_ms++;
     a34:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <sof_ms>
     a38:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <sof_ms+0x1>
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <sof_ms>
     a42:	90 93 d3 21 	sts	0x21D3, r25	; 0x8021d3 <sof_ms+0x1>

    if ((PORTB.IN & PIN4_bm) == 0) {
     a46:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     a4a:	84 fd       	sbrc	r24, 4
     a4c:	0f c0       	rjmp	.+30     	; 0xa6c <testIndicator+0x38>
        if (sof_ms >= 500) {
     a4e:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <sof_ms>
     a52:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <sof_ms+0x1>
     a56:	84 3f       	cpi	r24, 0xF4	; 244
     a58:	91 40       	sbci	r25, 0x01	; 1
     a5a:	78 f0       	brcs	.+30     	; 0xa7a <testIndicator+0x46>
void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     a5c:	80 e4       	ldi	r24, 0x40	; 64
     a5e:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>
    sof_ms++;

    if ((PORTB.IN & PIN4_bm) == 0) {
        if (sof_ms >= 500) {
            led_statusToggle();
            sof_ms = 0;
     a62:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <sof_ms>
     a66:	10 92 d3 21 	sts	0x21D3, r1	; 0x8021d3 <sof_ms+0x1>
     a6a:	08 95       	ret
//     return false;
// }

/* ----------------------------- Status LED ----------------------------- */
void led_statusOn(void) { // status LED on
    STATUS_LED_PORT.OUTCLR = LEDS_PIN;
     a6c:	80 e4       	ldi	r24, 0x40	; 64
     a6e:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
            led_statusToggle();
            sof_ms = 0;
        }
    } else {
        led_statusOn();
        sof_ms = 0;
     a72:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <sof_ms>
     a76:	10 92 d3 21 	sts	0x21D3, r1	; 0x8021d3 <sof_ms+0x1>
     a7a:	08 95       	ret

00000a7c <startupSequence>:
            (keypad_getState()   == KEYPAD_PRESSED) ||
            (jstk_readMask()     != 0);
}

void startupSequence(uint8_t sequence) // startup LED animation
{
     a7c:	6f 92       	push	r6
     a7e:	7f 92       	push	r7
     a80:	8f 92       	push	r8
     a82:	9f 92       	push	r9
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	28 97       	sbiw	r28, 0x08	; 8
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	de bf       	out	0x3e, r29	; 62
    const uint8_t seq[8] = {
     aa2:	98 e0       	ldi	r25, 0x08	; 8
     aa4:	e2 e8       	ldi	r30, 0x82	; 130
     aa6:	f1 e2       	ldi	r31, 0x21	; 33
     aa8:	de 01       	movw	r26, r28
     aaa:	11 96       	adiw	r26, 0x01	; 1
     aac:	01 90       	ld	r0, Z+
     aae:	0d 92       	st	X+, r0
     ab0:	9a 95       	dec	r25
     ab2:	e1 f7       	brne	.-8      	; 0xaac <startupSequence+0x30>
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
     ab4:	83 30       	cpi	r24, 0x03	; 3
     ab6:	09 f4       	brne	.+2      	; 0xaba <startupSequence+0x3e>
     ab8:	0c c1       	rjmp	.+536    	; 0xcd2 <startupSequence+0x256>
     aba:	38 f4       	brcc	.+14     	; 0xaca <startupSequence+0x4e>
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	09 f4       	brne	.+2      	; 0xac2 <startupSequence+0x46>
     ac0:	42 c0       	rjmp	.+132    	; 0xb46 <startupSequence+0xca>
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	09 f4       	brne	.+2      	; 0xac8 <startupSequence+0x4c>
     ac6:	a5 c0       	rjmp	.+330    	; 0xc12 <startupSequence+0x196>
     ac8:	31 c2       	rjmp	.+1122   	; 0xf2c <startupSequence+0x4b0>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <startupSequence+0x54>
     ace:	61 c1       	rjmp	.+706    	; 0xd92 <startupSequence+0x316>
     ad0:	85 30       	cpi	r24, 0x05	; 5
     ad2:	09 f4       	brne	.+2      	; 0xad6 <startupSequence+0x5a>
     ad4:	ba c1       	rjmp	.+884    	; 0xe4a <startupSequence+0x3ce>
     ad6:	2a c2       	rjmp	.+1108   	; 0xf2c <startupSequence+0x4b0>
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     ad8:	f8 01       	movw	r30, r16
     ada:	f1 90       	ld	r15, Z+
     adc:	8f 01       	movw	r16, r30
     ade:	8f 2d       	mov	r24, r15
     ae0:	44 df       	rcall	.-376    	; 0x96a <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae2:	ff e0       	ldi	r31, 0x0F	; 15
     ae4:	28 e9       	ldi	r18, 0x98	; 152
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	f1 50       	subi	r31, 0x01	; 1
     aea:	20 40       	sbci	r18, 0x00	; 0
     aec:	80 40       	sbci	r24, 0x00	; 0
     aee:	e1 f7       	brne	.-8      	; 0xae8 <startupSequence+0x6c>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <startupSequence+0x76>
     af2:	00 00       	nop
                    _delay_ms(850);
                    led_off(seq[i]);
     af4:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     af6:	3e df       	rcall	.-388    	; 0x974 <led_off>
     af8:	0f df       	rcall	.-482    	; 0x918 <userActivity>
     afa:	80 93 c8 21 	sts	0x21C8, r24	; 0x8021c8 <user_active.5530>

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
     afe:	a0 16       	cp	r10, r16
     b00:	b1 06       	cpc	r11, r17
     b02:	09 f4       	brne	.+2      	; 0xb06 <startupSequence+0x8a>
     b04:	b9 c1       	rjmp	.+882    	; 0xe78 <startupSequence+0x3fc>
     b06:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     b0a:	88 23       	and	r24, r24
     b0c:	29 f3       	breq	.-54     	; 0xad8 <startupSequence+0x5c>
     b0e:	b4 c1       	rjmp	.+872    	; 0xe78 <startupSequence+0x3fc>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     b10:	f8 01       	movw	r30, r16
     b12:	f2 90       	ld	r15, -Z
     b14:	8f 01       	movw	r16, r30
     b16:	8f 2d       	mov	r24, r15
     b18:	28 df       	rcall	.-432    	; 0x96a <led_on>
     b1a:	ff e0       	ldi	r31, 0x0F	; 15
     b1c:	28 e9       	ldi	r18, 0x98	; 152
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	f1 50       	subi	r31, 0x01	; 1
     b22:	20 40       	sbci	r18, 0x00	; 0
     b24:	80 40       	sbci	r24, 0x00	; 0
     b26:	e1 f7       	brne	.-8      	; 0xb20 <startupSequence+0xa4>
                    _delay_ms(850);
                    led_off(seq[i]);
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <startupSequence+0xae>
     b2a:	00 00       	nop
     b2c:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     b2e:	22 df       	rcall	.-444    	; 0x974 <led_off>
     b30:	f3 de       	rcall	.-538    	; 0x918 <userActivity>
     b32:	80 93 c8 21 	sts	0x21C8, r24	; 0x8021c8 <user_active.5530>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     b36:	0c 15       	cp	r16, r12
     b38:	1d 05       	cpc	r17, r13
     b3a:	61 f0       	breq	.+24     	; 0xb54 <startupSequence+0xd8>
     b3c:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     b40:	88 23       	and	r24, r24
     b42:	31 f3       	breq	.-52     	; 0xb10 <startupSequence+0x94>
     b44:	07 c0       	rjmp	.+14     	; 0xb54 <startupSequence+0xd8>
     b46:	5e 01       	movw	r10, r28
     b48:	99 e0       	ldi	r25, 0x09	; 9
     b4a:	a9 0e       	add	r10, r25
     b4c:	b1 1c       	adc	r11, r1
     b4e:	fe 01       	movw	r30, r28
     b50:	31 96       	adiw	r30, 0x01	; 1
     b52:	6f 01       	movw	r12, r30
    static volatile bool user_active = false;

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
     b54:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     b58:	81 11       	cpse	r24, r1
     b5a:	06 c0       	rjmp	.+12     	; 0xb68 <startupSequence+0xec>
                for (int i = 0; i < 8 && !user_active; i++) {
     b5c:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     b60:	88 23       	and	r24, r24
     b62:	09 f4       	brne	.+2      	; 0xb66 <startupSequence+0xea>
     b64:	ce c1       	rjmp	.+924    	; 0xf02 <startupSequence+0x486>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
            }
            led_allOff();
     b66:	88 c1       	rjmp	.+784    	; 0xe78 <startupSequence+0x3fc>
            break;
     b68:	fa de       	rcall	.-524    	; 0x95e <led_allOff>
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     b6a:	e0 c1       	rjmp	.+960    	; 0xf2c <startupSequence+0x4b0>
     b6c:	f8 01       	movw	r30, r16
     b6e:	72 90       	ld	r7, -Z
     b70:	8f 01       	movw	r16, r30
     b72:	87 2d       	mov	r24, r7
                    led_on(seq[right]);
     b74:	fa de       	rcall	.-524    	; 0x96a <led_on>
     b76:	f6 01       	movw	r30, r12
     b78:	f1 90       	ld	r15, Z+
     b7a:	6f 01       	movw	r12, r30
     b7c:	8f 2d       	mov	r24, r15
     b7e:	f5 de       	rcall	.-534    	; 0x96a <led_on>
     b80:	ff e1       	ldi	r31, 0x1F	; 31
     b82:	2f eb       	ldi	r18, 0xBF	; 191
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	f1 50       	subi	r31, 0x01	; 1
     b88:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     b8a:	80 40       	sbci	r24, 0x00	; 0
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <startupSequence+0x10a>
                    led_off(seq[right]);
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <startupSequence+0x114>
     b90:	00 00       	nop
     b92:	87 2d       	mov	r24, r7

                    keypad_poll();
     b94:	ef de       	rcall	.-546    	; 0x974 <led_off>
     b96:	8f 2d       	mov	r24, r15
                    if (keypad_getState() == KEYPAD_PRESSED)
     b98:	ed de       	rcall	.-550    	; 0x974 <led_off>
     b9a:	80 dd       	rcall	.-1280   	; 0x69c <keypad_poll>
     b9c:	fb dd       	rcall	.-1034   	; 0x794 <keypad_getState>
     b9e:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     ba0:	11 f4       	brne	.+4      	; 0xba6 <startupSequence+0x12a>
     ba2:	e0 92 c8 21 	sts	0x21C8, r14	; 0x8021c8 <user_active.5530>
                    if (jstk_readMask() != 0)
     ba6:	d8 dc       	rcall	.-1616   	; 0x558 <jstk_readMask>
     ba8:	81 11       	cpse	r24, r1
                        user_active = true;
     baa:	e0 92 c8 21 	sts	0x21C8, r14	; 0x8021c8 <user_active.5530>
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     bae:	08 15       	cp	r16, r8
     bb0:	19 05       	cpc	r17, r9
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <startupSequence+0x13a>
     bb4:	66 c1       	rjmp	.+716    	; 0xe82 <startupSequence+0x406>
     bb6:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     bba:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     bbc:	b9 f2       	breq	.-82     	; 0xb6c <startupSequence+0xf0>
     bbe:	61 c1       	rjmp	.+706    	; 0xe82 <startupSequence+0x406>
     bc0:	f3 01       	movw	r30, r6
     bc2:	d1 90       	ld	r13, Z+
     bc4:	3f 01       	movw	r6, r30
     bc6:	8d 2d       	mov	r24, r13
                    led_on(seq[right]);
     bc8:	d0 de       	rcall	.-608    	; 0x96a <led_on>
     bca:	f8 01       	movw	r30, r16
     bcc:	f2 90       	ld	r15, -Z
     bce:	8f 01       	movw	r16, r30
     bd0:	8f 2d       	mov	r24, r15
     bd2:	cb de       	rcall	.-618    	; 0x96a <led_on>
     bd4:	ff e1       	ldi	r31, 0x1F	; 31
     bd6:	2f eb       	ldi	r18, 0xBF	; 191
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	f1 50       	subi	r31, 0x01	; 1
     bdc:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     bde:	80 40       	sbci	r24, 0x00	; 0
     be0:	e1 f7       	brne	.-8      	; 0xbda <startupSequence+0x15e>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <startupSequence+0x168>
                    led_off(seq[right]);
     be4:	00 00       	nop
     be6:	8d 2d       	mov	r24, r13
     be8:	c5 de       	rcall	.-630    	; 0x974 <led_off>

                    keypad_poll();
     bea:	8f 2d       	mov	r24, r15
     bec:	c3 de       	rcall	.-634    	; 0x974 <led_off>
                    if (keypad_getState() == KEYPAD_PRESSED)
     bee:	56 dd       	rcall	.-1364   	; 0x69c <keypad_poll>
     bf0:	d1 dd       	rcall	.-1118   	; 0x794 <keypad_getState>
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	11 f4       	brne	.+4      	; 0xbfa <startupSequence+0x17e>
                        user_active = true;
     bf6:	e0 92 c8 21 	sts	0x21C8, r14	; 0x8021c8 <user_active.5530>
                    if (jstk_readMask() != 0)
     bfa:	ae dc       	rcall	.-1700   	; 0x558 <jstk_readMask>
     bfc:	81 11       	cpse	r24, r1
     bfe:	e0 92 c8 21 	sts	0x21C8, r14	; 0x8021c8 <user_active.5530>
                        user_active = true;
     c02:	0a 15       	cp	r16, r10
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     c04:	1b 05       	cpc	r17, r11
     c06:	71 f0       	breq	.+28     	; 0xc24 <startupSequence+0x1a8>
     c08:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     c0c:	88 23       	and	r24, r24
     c0e:	c1 f2       	breq	.-80     	; 0xbc0 <startupSequence+0x144>
     c10:	09 c0       	rjmp	.+18     	; 0xc24 <startupSequence+0x1a8>
     c12:	fe 01       	movw	r30, r28
     c14:	31 96       	adiw	r30, 0x01	; 1
     c16:	4f 01       	movw	r8, r30

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     c18:	ee 24       	eor	r14, r14
     c1a:	e3 94       	inc	r14
     c1c:	5e 01       	movw	r10, r28
     c1e:	f5 e0       	ldi	r31, 0x05	; 5
     c20:	af 0e       	add	r10, r31
            }
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
     c22:	b1 1c       	adc	r11, r1
     c24:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
                for (int i = 0; i < 4 && !user_active; i++) {
     c28:	81 11       	cpse	r24, r1
     c2a:	0a c0       	rjmp	.+20     	; 0xc40 <startupSequence+0x1c4>
     c2c:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     c30:	81 11       	cpse	r24, r1
     c32:	27 c1       	rjmp	.+590    	; 0xe82 <startupSequence+0x406>
     c34:	6e 01       	movw	r12, r28
     c36:	25 e0       	ldi	r18, 0x05	; 5
     c38:	c2 0e       	add	r12, r18
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     c3a:	d1 1c       	adc	r13, r1
     c3c:	86 01       	movw	r16, r12
            break;
     c3e:	96 cf       	rjmp	.-212    	; 0xb6c <startupSequence+0xf0>
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     c40:	8e de       	rcall	.-740    	; 0x95e <led_allOff>
     c42:	74 c1       	rjmp	.+744    	; 0xf2c <startupSequence+0x4b0>
     c44:	f8 01       	movw	r30, r16
     c46:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     c48:	8f 01       	movw	r16, r30
     c4a:	8f de       	rcall	.-738    	; 0x96a <led_on>
     c4c:	f7 01       	movw	r30, r14
     c4e:	81 91       	ld	r24, Z+
     c50:	7f 01       	movw	r14, r30
     c52:	8b de       	rcall	.-746    	; 0x96a <led_on>
     c54:	ff e2       	ldi	r31, 0x2F	; 47
     c56:	27 e5       	ldi	r18, 0x57	; 87
     c58:	85 e0       	ldi	r24, 0x05	; 5
     c5a:	f1 50       	subi	r31, 0x01	; 1
     c5c:	20 40       	sbci	r18, 0x00	; 0
     c5e:	80 40       	sbci	r24, 0x00	; 0
     c60:	e1 f7       	brne	.-8      	; 0xc5a <startupSequence+0x1de>
                    _delay_ms(1750);

                    keypad_poll();
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <startupSequence+0x1e8>
     c64:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     c66:	1a dd       	rcall	.-1484   	; 0x69c <keypad_poll>
     c68:	95 dd       	rcall	.-1238   	; 0x794 <keypad_getState>
     c6a:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     c6c:	11 f4       	brne	.+4      	; 0xc72 <startupSequence+0x1f6>
     c6e:	90 92 c8 21 	sts	0x21C8, r9	; 0x8021c8 <user_active.5530>
                    if (jstk_readMask() != 0)
     c72:	72 dc       	rcall	.-1820   	; 0x558 <jstk_readMask>
     c74:	81 11       	cpse	r24, r1
                        user_active = true;
     c76:	90 92 c8 21 	sts	0x21C8, r9	; 0x8021c8 <user_active.5530>
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     c7a:	a0 16       	cp	r10, r16
     c7c:	b1 06       	cpc	r11, r17
     c7e:	09 f4       	brne	.+2      	; 0xc82 <startupSequence+0x206>
     c80:	0b c1       	rjmp	.+534    	; 0xe98 <startupSequence+0x41c>
     c82:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     c86:	88 23       	and	r24, r24
     c88:	e9 f2       	breq	.-70     	; 0xc44 <startupSequence+0x1c8>
     c8a:	06 c1       	rjmp	.+524    	; 0xe98 <startupSequence+0x41c>
     c8c:	f7 01       	movw	r30, r14
     c8e:	81 91       	ld	r24, Z+
                    led_off(seq[right]);
     c90:	7f 01       	movw	r14, r30
     c92:	70 de       	rcall	.-800    	; 0x974 <led_off>
     c94:	f8 01       	movw	r30, r16
     c96:	82 91       	ld	r24, -Z
     c98:	8f 01       	movw	r16, r30
     c9a:	6c de       	rcall	.-808    	; 0x974 <led_off>
     c9c:	ff e2       	ldi	r31, 0x2F	; 47
     c9e:	27 e5       	ldi	r18, 0x57	; 87
     ca0:	85 e0       	ldi	r24, 0x05	; 5
     ca2:	f1 50       	subi	r31, 0x01	; 1
     ca4:	20 40       	sbci	r18, 0x00	; 0
     ca6:	80 40       	sbci	r24, 0x00	; 0
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <startupSequence+0x226>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <startupSequence+0x230>
                    _delay_ms(1750);

                    keypad_poll();
     cac:	00 00       	nop
     cae:	f6 dc       	rcall	.-1556   	; 0x69c <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     cb0:	71 dd       	rcall	.-1310   	; 0x794 <keypad_getState>
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	11 f4       	brne	.+4      	; 0xcba <startupSequence+0x23e>
     cb6:	90 92 c8 21 	sts	0x21C8, r9	; 0x8021c8 <user_active.5530>
                        user_active = true;
     cba:	4e dc       	rcall	.-1892   	; 0x558 <jstk_readMask>
                    if (jstk_readMask() != 0)
     cbc:	81 11       	cpse	r24, r1
     cbe:	90 92 c8 21 	sts	0x21C8, r9	; 0x8021c8 <user_active.5530>
                        user_active = true;
     cc2:	c0 16       	cp	r12, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     cc4:	d1 06       	cpc	r13, r17
     cc6:	71 f0       	breq	.+28     	; 0xce4 <startupSequence+0x268>
     cc8:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     ccc:	88 23       	and	r24, r24
     cce:	f1 f2       	breq	.-68     	; 0xc8c <startupSequence+0x210>
     cd0:	09 c0       	rjmp	.+18     	; 0xce4 <startupSequence+0x268>
     cd2:	fe 01       	movw	r30, r28
     cd4:	31 96       	adiw	r30, 0x01	; 1

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     cd6:	5f 01       	movw	r10, r30
     cd8:	99 24       	eor	r9, r9
     cda:	93 94       	inc	r9
     cdc:	6e 01       	movw	r12, r28
     cde:	f5 e0       	ldi	r31, 0x05	; 5
     ce0:	cf 0e       	add	r12, r31
            }
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
     ce2:	d1 1c       	adc	r13, r1
     ce4:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
                for (int i = 0; i < 4 && !user_active; i++) {
     ce8:	81 11       	cpse	r24, r1
     cea:	0a c0       	rjmp	.+20     	; 0xd00 <startupSequence+0x284>
     cec:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     cf0:	81 11       	cpse	r24, r1
     cf2:	d2 c0       	rjmp	.+420    	; 0xe98 <startupSequence+0x41c>
     cf4:	7e 01       	movw	r14, r28
     cf6:	25 e0       	ldi	r18, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     cf8:	e2 0e       	add	r14, r18
     cfa:	f1 1c       	adc	r15, r1
            break;
     cfc:	87 01       	movw	r16, r14
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     cfe:	a2 cf       	rjmp	.-188    	; 0xc44 <startupSequence+0x1c8>
     d00:	2e de       	rcall	.-932    	; 0x95e <led_allOff>
     d02:	14 c1       	rjmp	.+552    	; 0xf2c <startupSequence+0x4b0>
     d04:	f8 01       	movw	r30, r16
     d06:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     d08:	8f 01       	movw	r16, r30
     d0a:	2f de       	rcall	.-930    	; 0x96a <led_on>
     d0c:	f7 01       	movw	r30, r14
     d0e:	81 91       	ld	r24, Z+
     d10:	7f 01       	movw	r14, r30
     d12:	2b de       	rcall	.-938    	; 0x96a <led_on>
     d14:	ff e2       	ldi	r31, 0x2F	; 47
     d16:	27 e5       	ldi	r18, 0x57	; 87
     d18:	85 e0       	ldi	r24, 0x05	; 5
     d1a:	f1 50       	subi	r31, 0x01	; 1
     d1c:	20 40       	sbci	r18, 0x00	; 0
     d1e:	80 40       	sbci	r24, 0x00	; 0
                    _delay_ms(1750);

                    keypad_poll();
     d20:	e1 f7       	brne	.-8      	; 0xd1a <startupSequence+0x29e>
                    if (keypad_getState() == KEYPAD_PRESSED)
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <startupSequence+0x2a8>
     d24:	00 00       	nop
     d26:	ba dc       	rcall	.-1676   	; 0x69c <keypad_poll>
                        user_active = true;
     d28:	35 dd       	rcall	.-1430   	; 0x794 <keypad_getState>
                    if (jstk_readMask() != 0)
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	11 f4       	brne	.+4      	; 0xd32 <startupSequence+0x2b6>
     d2e:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5530>
                        user_active = true;
     d32:	12 dc       	rcall	.-2012   	; 0x558 <jstk_readMask>
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     d34:	81 11       	cpse	r24, r1
     d36:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5530>
     d3a:	0c 15       	cp	r16, r12
     d3c:	1d 05       	cpc	r17, r13
     d3e:	09 f4       	brne	.+2      	; 0xd42 <startupSequence+0x2c6>
     d40:	b6 c0       	rjmp	.+364    	; 0xeae <startupSequence+0x432>
     d42:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     d46:	88 23       	and	r24, r24
     d48:	e9 f2       	breq	.-70     	; 0xd04 <startupSequence+0x288>
     d4a:	b1 c0       	rjmp	.+354    	; 0xeae <startupSequence+0x432>
     d4c:	f8 01       	movw	r30, r16
     d4e:	82 91       	ld	r24, -Z
                    led_off(seq[right]);
     d50:	8f 01       	movw	r16, r30
     d52:	10 de       	rcall	.-992    	; 0x974 <led_off>
     d54:	f7 01       	movw	r30, r14
     d56:	81 91       	ld	r24, Z+
     d58:	7f 01       	movw	r14, r30
     d5a:	0c de       	rcall	.-1000   	; 0x974 <led_off>
     d5c:	ff e2       	ldi	r31, 0x2F	; 47
     d5e:	27 e5       	ldi	r18, 0x57	; 87
     d60:	85 e0       	ldi	r24, 0x05	; 5
     d62:	f1 50       	subi	r31, 0x01	; 1
     d64:	20 40       	sbci	r18, 0x00	; 0
     d66:	80 40       	sbci	r24, 0x00	; 0
     d68:	e1 f7       	brne	.-8      	; 0xd62 <startupSequence+0x2e6>
                    _delay_ms(1750);

                    keypad_poll();
     d6a:	00 c0       	rjmp	.+0      	; 0xd6c <startupSequence+0x2f0>
     d6c:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     d6e:	96 dc       	rcall	.-1748   	; 0x69c <keypad_poll>
     d70:	11 dd       	rcall	.-1502   	; 0x794 <keypad_getState>
     d72:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     d74:	11 f4       	brne	.+4      	; 0xd7a <startupSequence+0x2fe>
                    if (jstk_readMask() != 0)
     d76:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5530>
     d7a:	ee db       	rcall	.-2084   	; 0x558 <jstk_readMask>
                        user_active = true;
     d7c:	81 11       	cpse	r24, r1
     d7e:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5530>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     d82:	c0 16       	cp	r12, r16
     d84:	d1 06       	cpc	r13, r17
     d86:	51 f0       	breq	.+20     	; 0xd9c <startupSequence+0x320>
     d88:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     d8c:	88 23       	and	r24, r24
     d8e:	f1 f2       	breq	.-68     	; 0xd4c <startupSequence+0x2d0>
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <startupSequence+0x320>

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     d92:	fe 01       	movw	r30, r28
     d94:	31 96       	adiw	r30, 0x01	; 1
            }
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
     d96:	6f 01       	movw	r12, r30
     d98:	bb 24       	eor	r11, r11
     d9a:	b3 94       	inc	r11
     d9c:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
                for (int i = 0; i < 4 && !user_active; i++) {
     da0:	81 11       	cpse	r24, r1
     da2:	0a c0       	rjmp	.+20     	; 0xdb8 <startupSequence+0x33c>
     da4:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     da8:	81 11       	cpse	r24, r1
     daa:	81 c0       	rjmp	.+258    	; 0xeae <startupSequence+0x432>
     dac:	7e 01       	movw	r14, r28
     dae:	f5 e0       	ldi	r31, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     db0:	ef 0e       	add	r14, r31
     db2:	f1 1c       	adc	r15, r1
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     db4:	87 01       	movw	r16, r14
     db6:	a6 cf       	rjmp	.-180    	; 0xd04 <startupSequence+0x288>
     db8:	d2 dd       	rcall	.-1116   	; 0x95e <led_allOff>
     dba:	b8 c0       	rjmp	.+368    	; 0xf2c <startupSequence+0x4b0>
     dbc:	f7 01       	movw	r30, r14
                    led_on(seq[right]);
     dbe:	81 91       	ld	r24, Z+
     dc0:	7f 01       	movw	r14, r30
     dc2:	d3 dd       	rcall	.-1114   	; 0x96a <led_on>
     dc4:	f8 01       	movw	r30, r16
     dc6:	82 91       	ld	r24, -Z
     dc8:	8f 01       	movw	r16, r30
     dca:	cf dd       	rcall	.-1122   	; 0x96a <led_on>
     dcc:	ff e2       	ldi	r31, 0x2F	; 47
     dce:	27 e5       	ldi	r18, 0x57	; 87
     dd0:	85 e0       	ldi	r24, 0x05	; 5
     dd2:	f1 50       	subi	r31, 0x01	; 1
                    _delay_ms(1750);

                    keypad_poll();
     dd4:	20 40       	sbci	r18, 0x00	; 0
     dd6:	80 40       	sbci	r24, 0x00	; 0
                    if (keypad_getState() == KEYPAD_PRESSED)
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <startupSequence+0x356>
     dda:	00 c0       	rjmp	.+0      	; 0xddc <startupSequence+0x360>
     ddc:	00 00       	nop
     dde:	5e dc       	rcall	.-1860   	; 0x69c <keypad_poll>
                        user_active = true;
     de0:	d9 dc       	rcall	.-1614   	; 0x794 <keypad_getState>
     de2:	81 30       	cpi	r24, 0x01	; 1
                    if (jstk_readMask() != 0)
     de4:	11 f4       	brne	.+4      	; 0xdea <startupSequence+0x36e>
     de6:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5530>
                        user_active = true;
     dea:	b6 db       	rcall	.-2196   	; 0x558 <jstk_readMask>
     dec:	81 11       	cpse	r24, r1
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
     dee:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5530>
     df2:	0c 15       	cp	r16, r12
     df4:	1d 05       	cpc	r17, r13
     df6:	09 f4       	brne	.+2      	; 0xdfa <startupSequence+0x37e>
     df8:	64 c0       	rjmp	.+200    	; 0xec2 <startupSequence+0x446>
     dfa:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     dfe:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     e00:	e9 f2       	breq	.-70     	; 0xdbc <startupSequence+0x340>
     e02:	5f c0       	rjmp	.+190    	; 0xec2 <startupSequence+0x446>
     e04:	f7 01       	movw	r30, r14
     e06:	81 91       	ld	r24, Z+
     e08:	7f 01       	movw	r14, r30
                    led_off(seq[right]);
     e0a:	b4 dd       	rcall	.-1176   	; 0x974 <led_off>
     e0c:	f8 01       	movw	r30, r16
     e0e:	82 91       	ld	r24, -Z
     e10:	8f 01       	movw	r16, r30
     e12:	b0 dd       	rcall	.-1184   	; 0x974 <led_off>
     e14:	ff e2       	ldi	r31, 0x2F	; 47
     e16:	27 e5       	ldi	r18, 0x57	; 87
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	f1 50       	subi	r31, 0x01	; 1
     e1c:	20 40       	sbci	r18, 0x00	; 0
     e1e:	80 40       	sbci	r24, 0x00	; 0
     e20:	e1 f7       	brne	.-8      	; 0xe1a <startupSequence+0x39e>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <startupSequence+0x3a8>
                    _delay_ms(1750);

                    keypad_poll();
     e24:	00 00       	nop
     e26:	3a dc       	rcall	.-1932   	; 0x69c <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     e28:	b5 dc       	rcall	.-1686   	; 0x794 <keypad_getState>
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	11 f4       	brne	.+4      	; 0xe32 <startupSequence+0x3b6>
     e2e:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5530>
                        user_active = true;
     e32:	92 db       	rcall	.-2268   	; 0x558 <jstk_readMask>
                    if (jstk_readMask() != 0)
     e34:	81 11       	cpse	r24, r1
     e36:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5530>
                        user_active = true;
     e3a:	0c 15       	cp	r16, r12
     e3c:	1d 05       	cpc	r17, r13
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e3e:	59 f0       	breq	.+22     	; 0xe56 <startupSequence+0x3da>
     e40:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     e44:	88 23       	and	r24, r24
     e46:	f1 f2       	breq	.-68     	; 0xe04 <startupSequence+0x388>
     e48:	06 c0       	rjmp	.+12     	; 0xe56 <startupSequence+0x3da>
     e4a:	6e 01       	movw	r12, r28
     e4c:	95 e0       	ldi	r25, 0x05	; 5
     e4e:	c9 0e       	add	r12, r25
     e50:	d1 1c       	adc	r13, r1
     e52:	bb 24       	eor	r11, r11
     e54:	b3 94       	inc	r11

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     e56:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
            }
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
     e5a:	81 11       	cpse	r24, r1
     e5c:	0b c0       	rjmp	.+22     	; 0xe74 <startupSequence+0x3f8>
     e5e:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
                for (int i = 3; i >= 0 && !user_active; i--) {
     e62:	81 11       	cpse	r24, r1
     e64:	2e c0       	rjmp	.+92     	; 0xec2 <startupSequence+0x446>
     e66:	fe 01       	movw	r30, r28
     e68:	31 96       	adiw	r30, 0x01	; 1
     e6a:	7f 01       	movw	r14, r30
     e6c:	8e 01       	movw	r16, r28
     e6e:	07 5f       	subi	r16, 0xF7	; 247
     e70:	1f 4f       	sbci	r17, 0xFF	; 255
     e72:	a4 cf       	rjmp	.-184    	; 0xdbc <startupSequence+0x340>
     e74:	74 dd       	rcall	.-1304   	; 0x95e <led_allOff>
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     e76:	5a c0       	rjmp	.+180    	; 0xf2c <startupSequence+0x4b0>
     e78:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     e7c:	88 23       	and	r24, r24
     e7e:	61 f1       	breq	.+88     	; 0xed8 <startupSequence+0x45c>
     e80:	69 ce       	rjmp	.-814    	; 0xb54 <startupSequence+0xd8>
     e82:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e86:	81 11       	cpse	r24, r1
     e88:	cd ce       	rjmp	.-614    	; 0xc24 <startupSequence+0x1a8>
     e8a:	ce 01       	movw	r24, r28
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	3c 01       	movw	r6, r24
     e90:	8e 01       	movw	r16, r28
     e92:	07 5f       	subi	r16, 0xF7	; 247
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	94 ce       	rjmp	.-728    	; 0xbc0 <startupSequence+0x144>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e98:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     e9c:	81 11       	cpse	r24, r1
     e9e:	22 cf       	rjmp	.-444    	; 0xce4 <startupSequence+0x268>
     ea0:	fe 01       	movw	r30, r28
     ea2:	31 96       	adiw	r30, 0x01	; 1
     ea4:	7f 01       	movw	r14, r30
     ea6:	8e 01       	movw	r16, r28
     ea8:	07 5f       	subi	r16, 0xF7	; 247
     eaa:	1f 4f       	sbci	r17, 0xFF	; 255
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     eac:	ef ce       	rjmp	.-546    	; 0xc8c <startupSequence+0x210>
     eae:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     eb2:	81 11       	cpse	r24, r1
     eb4:	73 cf       	rjmp	.-282    	; 0xd9c <startupSequence+0x320>
     eb6:	7e 01       	movw	r14, r28
     eb8:	f5 e0       	ldi	r31, 0x05	; 5
     eba:	ef 0e       	add	r14, r31
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     ebc:	f1 1c       	adc	r15, r1
     ebe:	87 01       	movw	r16, r14
     ec0:	45 cf       	rjmp	.-374    	; 0xd4c <startupSequence+0x2d0>
     ec2:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5530>
     ec6:	81 11       	cpse	r24, r1
     ec8:	c6 cf       	rjmp	.-116    	; 0xe56 <startupSequence+0x3da>
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	7c 01       	movw	r14, r24
     ed0:	8e 01       	movw	r16, r28
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     ed2:	07 5f       	subi	r16, 0xF7	; 247
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255
     ed6:	96 cf       	rjmp	.-212    	; 0xe04 <startupSequence+0x388>
     ed8:	18 85       	ldd	r17, Y+8	; 0x08
     eda:	81 2f       	mov	r24, r17
     edc:	46 dd       	rcall	.-1396   	; 0x96a <led_on>
     ede:	9f e0       	ldi	r25, 0x0F	; 15
     ee0:	e8 e9       	ldi	r30, 0x98	; 152
     ee2:	f2 e0       	ldi	r31, 0x02	; 2
     ee4:	91 50       	subi	r25, 0x01	; 1
     ee6:	e0 40       	sbci	r30, 0x00	; 0
     ee8:	f0 40       	sbci	r31, 0x00	; 0
     eea:	e1 f7       	brne	.-8      	; 0xee4 <startupSequence+0x468>
                    _delay_ms(850);
                    led_off(seq[i]);
     eec:	00 c0       	rjmp	.+0      	; 0xeee <startupSequence+0x472>
     eee:	00 00       	nop
     ef0:	81 2f       	mov	r24, r17

                    user_active = userActivity();
     ef2:	40 dd       	rcall	.-1408   	; 0x974 <led_off>
     ef4:	11 dd       	rcall	.-1502   	; 0x918 <userActivity>
     ef6:	80 93 c8 21 	sts	0x21C8, r24	; 0x8021c8 <user_active.5530>
     efa:	8e 01       	movw	r16, r28
     efc:	08 5f       	subi	r16, 0xF8	; 248
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	1d ce       	rjmp	.-966    	; 0xb3c <startupSequence+0xc0>
    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     f02:	19 81       	ldd	r17, Y+1	; 0x01
     f04:	81 2f       	mov	r24, r17
     f06:	31 dd       	rcall	.-1438   	; 0x96a <led_on>
     f08:	2f e0       	ldi	r18, 0x0F	; 15
     f0a:	88 e9       	ldi	r24, 0x98	; 152
     f0c:	92 e0       	ldi	r25, 0x02	; 2
     f0e:	21 50       	subi	r18, 0x01	; 1
     f10:	80 40       	sbci	r24, 0x00	; 0
     f12:	90 40       	sbci	r25, 0x00	; 0
     f14:	e1 f7       	brne	.-8      	; 0xf0e <startupSequence+0x492>
     f16:	00 c0       	rjmp	.+0      	; 0xf18 <startupSequence+0x49c>
     f18:	00 00       	nop
     f1a:	81 2f       	mov	r24, r17
                    _delay_ms(850);
                    led_off(seq[i]);
     f1c:	2b dd       	rcall	.-1450   	; 0x974 <led_off>
     f1e:	fc dc       	rcall	.-1544   	; 0x918 <userActivity>
     f20:	80 93 c8 21 	sts	0x21C8, r24	; 0x8021c8 <user_active.5530>

                    user_active = userActivity();
     f24:	8e 01       	movw	r16, r28
     f26:	0e 5f       	subi	r16, 0xFE	; 254
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	ed cd       	rjmp	.-1062   	; 0xb06 <startupSequence+0x8a>
     f2c:	28 96       	adiw	r28, 0x08	; 8
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	de bf       	out	0x3e, r29	; 62
            led_allOff();
            break;
        default:
            break;
    }
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	df 90       	pop	r13
     f40:	cf 90       	pop	r12
     f42:	bf 90       	pop	r11
     f44:	af 90       	pop	r10
     f46:	9f 90       	pop	r9
     f48:	8f 90       	pop	r8
     f4a:	7f 90       	pop	r7
     f4c:	6f 90       	pop	r6
     f4e:	08 95       	ret

00000f50 <io_ui_process>:
#include "keypad.h"
#include "joystick.h"


void io_ui_process(void) {
	io_init();
     f50:	1a ca       	rjmp	.-3020   	; 0x386 <io_init>
     f52:	08 95       	ret

00000f54 <startup_ui_process>:
}

void startup_ui_process(uint8_t sequence) {
	startupSequence(sequence);
     f54:	93 cd       	rjmp	.-1242   	; 0xa7c <startupSequence>
     f56:	08 95       	ret

00000f58 <jstk_ui_process>:
}

void jstk_ui_process(void) {
	joystick();
     f58:	55 cb       	rjmp	.-2390   	; 0x604 <joystick>
     f5a:	08 95       	ret

00000f5c <kbd_ui_process>:
}

void kbd_ui_process(void) {
	keypad();
     f5c:	9b cc       	rjmp	.-1738   	; 0x894 <keypad>
     f5e:	08 95       	ret

00000f60 <led_set>:
}

void led_set(uint8_t mask) {
	led_setState(mask);
     f60:	2a cd       	rjmp	.-1452   	; 0x9b6 <led_setState>
     f62:	08 95       	ret

00000f64 <led_ui_process>:
}

void led_ui_process(void) {
	led_usbTask();
     f64:	59 cd       	rjmp	.-1358   	; 0xa18 <led_usbTask>
     f66:	08 95       	ret

00000f68 <status_ui_process>:
}

void status_ui_process(void) {
	testIndicator();
     f68:	65 cd       	rjmp	.-1334   	; 0xa34 <testIndicator>
     f6a:	08 95       	ret

00000f6c <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	27 97       	sbiw	r28, 0x07	; 7
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     f84:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     f88:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     f8c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     f90:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     f94:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     f98:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     f9c:	65 e0       	ldi	r22, 0x05	; 5
     f9e:	81 e4       	ldi	r24, 0x41	; 65
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	7a d6       	rcall	.+3316   	; 0x1c98 <ccp_write_io>
     fa4:	6c e1       	ldi	r22, 0x1C	; 28
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	6c d6       	rcall	.+3288   	; 0x1c84 <nvm_read_byte>
     fac:	8a 83       	std	Y+2, r24	; 0x02
     fae:	6d e1       	ldi	r22, 0x1D	; 29
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	67 d6       	rcall	.+3278   	; 0x1c84 <nvm_read_byte>
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <sysclk_init+0x5c>
     fc0:	80 e4       	ldi	r24, 0x40	; 64
     fc2:	93 e2       	ldi	r25, 0x23	; 35
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	9a 83       	std	Y+2, r25	; 0x02
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	9a 81       	ldd	r25, Y+2	; 0x02
     fcc:	8b 83       	std	Y+3, r24	; 0x03
     fce:	9c 83       	std	Y+4, r25	; 0x04
     fd0:	e0 e6       	ldi	r30, 0x60	; 96
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	82 83       	std	Z+2, r24	; 0x02
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	83 83       	std	Z+3, r24	; 0x03
     fda:	8f b7       	in	r24, 0x3f	; 63
     fdc:	8e 83       	std	Y+6, r24	; 0x06
     fde:	f8 94       	cli
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	e0 e5       	ldi	r30, 0x50	; 80
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	82 60       	ori	r24, 0x02	; 2
     fea:	80 83       	st	Z, r24
     fec:	9f bf       	out	0x3f, r25	; 63
     fee:	81 81       	ldd	r24, Z+1	; 0x01
     ff0:	81 ff       	sbrs	r24, 1
     ff2:	fd cf       	rjmp	.-6      	; 0xfee <sysclk_init+0x82>
     ff4:	8f b7       	in	r24, 0x3f	; 63
     ff6:	8f 83       	std	Y+7, r24	; 0x07
     ff8:	f8 94       	cli
     ffa:	9f 81       	ldd	r25, Y+7	; 0x07
     ffc:	00 e5       	ldi	r16, 0x50	; 80
     ffe:	10 e0       	ldi	r17, 0x00	; 0
    1000:	d8 01       	movw	r26, r16
    1002:	16 96       	adiw	r26, 0x06	; 6
    1004:	8c 91       	ld	r24, X
    1006:	16 97       	sbiw	r26, 0x06	; 6
    1008:	89 7f       	andi	r24, 0xF9	; 249
    100a:	16 96       	adiw	r26, 0x06	; 6
    100c:	8c 93       	st	X, r24
    100e:	16 97       	sbiw	r26, 0x06	; 6
    1010:	e0 e6       	ldi	r30, 0x60	; 96
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 e8       	ldi	r24, 0x80	; 128
    1016:	85 83       	std	Z+5, r24	; 0x05
    1018:	8b eb       	ldi	r24, 0xBB	; 187
    101a:	86 83       	std	Z+6, r24	; 0x06
    101c:	16 96       	adiw	r26, 0x06	; 6
    101e:	8c 91       	ld	r24, X
    1020:	16 97       	sbiw	r26, 0x06	; 6
    1022:	84 60       	ori	r24, 0x04	; 4
    1024:	16 96       	adiw	r26, 0x06	; 6
    1026:	8c 93       	st	X, r24
    1028:	80 81       	ld	r24, Z
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	80 83       	st	Z, r24
    102e:	9f bf       	out	0x3f, r25	; 63
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	80 e4       	ldi	r24, 0x40	; 64
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	30 d6       	rcall	.+3168   	; 0x1c98 <ccp_write_io>
    1038:	8f b7       	in	r24, 0x3f	; 63
    103a:	8d 83       	std	Y+5, r24	; 0x05
    103c:	f8 94       	cli
    103e:	9d 81       	ldd	r25, Y+5	; 0x05
    1040:	f8 01       	movw	r30, r16
    1042:	80 81       	ld	r24, Z
    1044:	8e 7f       	andi	r24, 0xFE	; 254
    1046:	80 83       	st	Z, r24
    1048:	9f bf       	out	0x3f, r25	; 63
    104a:	27 96       	adiw	r28, 0x07	; 7
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	08 95       	ret

0000105a <sysclk_enable_module>:
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	1f 92       	push	r1
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	9f b7       	in	r25, 0x3f	; 63
    1066:	99 83       	std	Y+1, r25	; 0x01
    1068:	f8 94       	cli
    106a:	99 81       	ldd	r25, Y+1	; 0x01
    106c:	e8 2f       	mov	r30, r24
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	e0 59       	subi	r30, 0x90	; 144
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	60 95       	com	r22
    1076:	80 81       	ld	r24, Z
    1078:	68 23       	and	r22, r24
    107a:	60 83       	st	Z, r22
    107c:	9f bf       	out	0x3f, r25	; 63
    107e:	0f 90       	pop	r0
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	1f 92       	push	r1
    108c:	1f 92       	push	r1
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1092:	86 30       	cpi	r24, 0x06	; 6
    1094:	11 f0       	breq	.+4      	; 0x109a <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	01 c0       	rjmp	.+2      	; 0x109c <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    109a:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    109c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    10a0:	81 fd       	sbrc	r24, 1
    10a2:	2a c0       	rjmp	.+84     	; 0x10f8 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10a4:	8f b7       	in	r24, 0x3f	; 63
    10a6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    10a8:	f8 94       	cli
	return flags;
    10aa:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    10ac:	e0 e5       	ldi	r30, 0x50	; 80
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	82 60       	ori	r24, 0x02	; 2
    10b4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10b6:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    10b8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    10ba:	81 ff       	sbrs	r24, 1
    10bc:	fd cf       	rjmp	.-6      	; 0x10b8 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10be:	8f b7       	in	r24, 0x3f	; 63
    10c0:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    10c2:	f8 94       	cli
	return flags;
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    10c6:	a0 e5       	ldi	r26, 0x50	; 80
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	16 96       	adiw	r26, 0x06	; 6
    10cc:	8c 91       	ld	r24, X
    10ce:	16 97       	sbiw	r26, 0x06	; 6
    10d0:	89 7f       	andi	r24, 0xF9	; 249
    10d2:	16 96       	adiw	r26, 0x06	; 6
    10d4:	8c 93       	st	X, r24
    10d6:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    10d8:	e0 e6       	ldi	r30, 0x60	; 96
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 e8       	ldi	r24, 0x80	; 128
    10de:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    10e0:	8b eb       	ldi	r24, 0xBB	; 187
    10e2:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    10e4:	16 96       	adiw	r26, 0x06	; 6
    10e6:	8c 91       	ld	r24, X
    10e8:	16 97       	sbiw	r26, 0x06	; 6
    10ea:	84 60       	ori	r24, 0x04	; 4
    10ec:	16 96       	adiw	r26, 0x06	; 6
    10ee:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    10f0:	80 81       	ld	r24, Z
    10f2:	81 60       	ori	r24, 0x01	; 1
    10f4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10f6:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    10f8:	63 60       	ori	r22, 0x03	; 3
    10fa:	84 e4       	ldi	r24, 0x44	; 68
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	cc d5       	rcall	.+2968   	; 0x1c98 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1100:	60 e4       	ldi	r22, 0x40	; 64
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	aa df       	rcall	.-172    	; 0x105a <sysclk_enable_module>
}
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	08 95       	ret

00001114 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    1114:	30 91 cb 23 	lds	r19, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x2>
    1118:	20 91 cc 23 	lds	r18, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x3>
    111c:	82 2f       	mov	r24, r18
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	03 97       	sbiw	r24, 0x03	; 3
    1122:	b1 f4       	brne	.+44     	; 0x1150 <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    1124:	31 11       	cpse	r19, r1
    1126:	16 c0       	rjmp	.+44     	; 0x1154 <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
    1128:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    112c:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    1130:	89 2b       	or	r24, r25
    1132:	91 f4       	brne	.+36     	; 0x1158 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
    1134:	e9 ec       	ldi	r30, 0xC9	; 201
    1136:	f3 e2       	ldi	r31, 0x23	; 35
    1138:	84 ed       	ldi	r24, 0xD4	; 212
    113a:	91 e2       	ldi	r25, 0x21	; 33
    113c:	80 87       	std	Z+8, r24	; 0x08
    113e:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    1140:	8e ea       	ldi	r24, 0xAE	; 174
    1142:	98 e0       	ldi	r25, 0x08	; 8
    1144:	84 87       	std	Z+12, r24	; 0x0c
    1146:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
    1148:	12 86       	std	Z+10, r1	; 0x0a
    114a:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	08 95       	ret
	}
	return false;
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	08 95       	ret
    1158:	80 e0       	ldi	r24, 0x00	; 0
}
    115a:	08 95       	ret

0000115c <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
    115c:	08 95       	ret

0000115e <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	80 93 d6 21 	sts	0x21D6, r24	; 0x8021d6 <udi_hid_generic_b_report_in_free>
    1164:	08 95       	ret

00001166 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
    1166:	10 92 da 21 	sts	0x21DA, r1	; 0x8021da <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
    116a:	10 92 d8 21 	sts	0x21D8, r1	; 0x8021d8 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	80 93 d6 21 	sts	0x21D6, r24	; 0x8021d6 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
    1174:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <main_generic_enable>
}
    1178:	08 95       	ret

0000117a <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
    117a:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <main_generic_disable>
    117e:	08 95       	ret

00001180 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
    1180:	2a e8       	ldi	r18, 0x8A	; 138
    1182:	38 e0       	ldi	r19, 0x08	; 8
    1184:	46 ea       	ldi	r20, 0xA6	; 166
    1186:	50 e2       	ldi	r21, 0x20	; 32
    1188:	68 ed       	ldi	r22, 0xD8	; 216
    118a:	71 e2       	ldi	r23, 0x21	; 33
    118c:	8a ed       	ldi	r24, 0xDA	; 218
    118e:	91 e2       	ldi	r25, 0x21	; 33
    1190:	f2 c0       	rjmp	.+484    	; 0x1376 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
    1192:	08 95       	ret

00001194 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	1f 92       	push	r1
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
    11a6:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <udi_hid_generic_b_report_in_free>
    11aa:	88 23       	and	r24, r24
    11ac:	09 f1       	breq	.+66     	; 0x11f0 <udi_hid_generic_send_report_in+0x5c>
    11ae:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11b0:	8f b7       	in	r24, 0x3f	; 63
    11b2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    11b4:	f8 94       	cli
	return flags;
    11b6:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
    11b8:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <udi_hid_generic_report_feature>
    11bc:	10 92 d5 21 	sts	0x21D5, r1	; 0x8021d5 <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	80 93 d4 21 	sts	0x21D4, r24	; 0x8021d4 <udi_hid_generic_report_feature>
    11c8:	90 93 d5 21 	sts	0x21D5, r25	; 0x8021d5 <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    11cc:	0f ea       	ldi	r16, 0xAF	; 175
    11ce:	18 e0       	ldi	r17, 0x08	; 8
    11d0:	22 e0       	ldi	r18, 0x02	; 2
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	44 ed       	ldi	r20, 0xD4	; 212
    11d6:	51 e2       	ldi	r21, 0x21	; 33
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	82 e8       	ldi	r24, 0x82	; 130
    11dc:	0e 94 10 13 	call	0x2620	; 0x2620 <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	89 27       	eor	r24, r25
    11e4:	80 93 d6 21 	sts	0x21D6, r24	; 0x8021d6 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11e8:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
    11ea:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <udi_hid_generic_b_report_in_free>
    11ee:	89 27       	eor	r24, r25

}
    11f0:	0f 90       	pop	r0
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	08 95       	ret

000011fe <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	08 95       	ret

00001202 <udi_hid_kbd_setreport>:
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	08 95       	ret

00001206 <udi_hid_kbd_enable>:
    1206:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <udi_hid_kbd_rate>
    120a:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <udi_hid_kbd_protocol>
    120e:	10 92 e4 21 	sts	0x21E4, r1	; 0x8021e4 <udi_hid_kbd_b_report_trans_ongoing>
    1212:	88 e0       	ldi	r24, 0x08	; 8
    1214:	e5 ee       	ldi	r30, 0xE5	; 229
    1216:	f1 e2       	ldi	r31, 0x21	; 33
    1218:	df 01       	movw	r26, r30
    121a:	1d 92       	st	X+, r1
    121c:	8a 95       	dec	r24
    121e:	e9 f7       	brne	.-6      	; 0x121a <udi_hid_kbd_enable+0x14>
    1220:	10 92 ed 21 	sts	0x21ED, r1	; 0x8021ed <udi_hid_kbd_b_report_valid>
    1224:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <main_kbd_enable>
    1228:	08 95       	ret

0000122a <udi_hid_kbd_disable>:
    122a:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <main_kbd_disable>
    122e:	08 95       	ret

00001230 <udi_hid_kbd_setup>:
    1230:	21 e0       	ldi	r18, 0x01	; 1
    1232:	39 e0       	ldi	r19, 0x09	; 9
    1234:	48 ec       	ldi	r20, 0xC8	; 200
    1236:	50 e2       	ldi	r21, 0x20	; 32
    1238:	6e ee       	ldi	r22, 0xEE	; 238
    123a:	71 e2       	ldi	r23, 0x21	; 33
    123c:	80 ef       	ldi	r24, 0xF0	; 240
    123e:	91 e2       	ldi	r25, 0x21	; 33
    1240:	9a c0       	rjmp	.+308    	; 0x1376 <udi_hid_setup>
    1242:	08 95       	ret

00001244 <udi_hid_kbd_send_report>:
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <udi_hid_kbd_b_report_trans_ongoing>
    124c:	81 11       	cpse	r24, r1
    124e:	18 c0       	rjmp	.+48     	; 0x1280 <udi_hid_kbd_send_report+0x3c>
    1250:	88 e0       	ldi	r24, 0x08	; 8
    1252:	e5 ee       	ldi	r30, 0xE5	; 229
    1254:	f1 e2       	ldi	r31, 0x21	; 33
    1256:	ac ed       	ldi	r26, 0xDC	; 220
    1258:	b1 e2       	ldi	r27, 0x21	; 33
    125a:	01 90       	ld	r0, Z+
    125c:	0d 92       	st	X+, r0
    125e:	8a 95       	dec	r24
    1260:	e1 f7       	brne	.-8      	; 0x125a <udi_hid_kbd_send_report+0x16>
    1262:	10 92 ed 21 	sts	0x21ED, r1	; 0x8021ed <udi_hid_kbd_b_report_valid>
    1266:	04 e4       	ldi	r16, 0x44	; 68
    1268:	19 e0       	ldi	r17, 0x09	; 9
    126a:	28 e0       	ldi	r18, 0x08	; 8
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	4c ed       	ldi	r20, 0xDC	; 220
    1270:	51 e2       	ldi	r21, 0x21	; 33
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	81 e8       	ldi	r24, 0x81	; 129
    1276:	0e 94 10 13 	call	0x2620	; 0x2620 <udd_ep_run>
    127a:	80 93 e4 21 	sts	0x21E4, r24	; 0x8021e4 <udi_hid_kbd_b_report_trans_ongoing>
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <udi_hid_kbd_send_report+0x3e>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	08 95       	ret

00001288 <udi_hid_kbd_report_sent>:
    1288:	10 92 e4 21 	sts	0x21E4, r1	; 0x8021e4 <udi_hid_kbd_b_report_trans_ongoing>
    128c:	80 91 ed 21 	lds	r24, 0x21ED	; 0x8021ed <udi_hid_kbd_b_report_valid>
    1290:	81 11       	cpse	r24, r1
    1292:	d8 cf       	rjmp	.-80     	; 0x1244 <udi_hid_kbd_send_report>
    1294:	08 95       	ret

00001296 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	1f 92       	push	r1
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    12a2:	9f b7       	in	r25, 0x3f	; 63
    12a4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    12a6:	f8 94       	cli
	return flags;
    12a8:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    12aa:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <udi_hid_kbd_report+0x2>
    12ae:	99 23       	and	r25, r25
    12b0:	41 f0       	breq	.+16     	; 0x12c2 <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    12b2:	89 17       	cp	r24, r25
    12b4:	a9 f0       	breq	.+42     	; 0x12e0 <udi_hid_kbd_up+0x4a>
    12b6:	e8 ee       	ldi	r30, 0xE8	; 232
    12b8:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    12ba:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    12bc:	21 91       	ld	r18, Z+
    12be:	21 11       	cpse	r18, r1
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12c2:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    12c4:	1e c0       	rjmp	.+60     	; 0x1302 <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    12c6:	28 17       	cp	r18, r24
    12c8:	21 f0       	breq	.+8      	; 0x12d2 <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    12ca:	9f 5f       	subi	r25, 0xFF	; 255
    12cc:	98 30       	cpi	r25, 0x08	; 8
    12ce:	b1 f7       	brne	.-20     	; 0x12bc <udi_hid_kbd_up+0x26>
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    12d2:	98 30       	cpi	r25, 0x08	; 8
    12d4:	19 f0       	breq	.+6      	; 0x12dc <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    12d6:	97 30       	cpi	r25, 0x07	; 7
    12d8:	20 f0       	brcs	.+8      	; 0x12e2 <udi_hid_kbd_up+0x4c>
    12da:	0c c0       	rjmp	.+24     	; 0x12f4 <udi_hid_kbd_up+0x5e>
    12dc:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    12de:	11 c0       	rjmp	.+34     	; 0x1302 <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    12e0:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    12e2:	e9 2f       	mov	r30, r25
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	eb 51       	subi	r30, 0x1B	; 27
    12e8:	fe 4d       	sbci	r31, 0xDE	; 222
    12ea:	81 81       	ldd	r24, Z+1	; 0x01
    12ec:	80 83       	st	Z, r24
		i++;
    12ee:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    12f0:	97 30       	cpi	r25, 0x07	; 7
    12f2:	b9 f7       	brne	.-18     	; 0x12e2 <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    12f4:	10 92 ec 21 	sts	0x21EC, r1	; 0x8021ec <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 ed 21 	sts	0x21ED, r24	; 0x8021ed <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    12fe:	a2 df       	rcall	.-188    	; 0x1244 <udi_hid_kbd_send_report>
    1300:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	0f 90       	pop	r0
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	08 95       	ret

0000130e <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	1f 92       	push	r1
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    131a:	9f b7       	in	r25, 0x3f	; 63
    131c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    131e:	f8 94       	cli
	return flags;
    1320:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    1322:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <udi_hid_kbd_report+0x2>
    1326:	99 23       	and	r25, r25
    1328:	b1 f0       	breq	.+44     	; 0x1356 <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    132a:	89 17       	cp	r24, r25
    132c:	41 f0       	breq	.+16     	; 0x133e <udi_hid_kbd_down+0x30>
    132e:	a8 ee       	ldi	r26, 0xE8	; 232
    1330:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1332:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    1334:	9d 91       	ld	r25, X+
    1336:	99 23       	and	r25, r25
    1338:	49 f0       	breq	.+18     	; 0x134c <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    133a:	98 13       	cpse	r25, r24
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    133e:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	14 c0       	rjmp	.+40     	; 0x136c <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1344:	ef 5f       	subi	r30, 0xFF	; 255
    1346:	e8 30       	cpi	r30, 0x08	; 8
    1348:	a9 f7       	brne	.-22     	; 0x1334 <udi_hid_kbd_down+0x26>
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    134c:	e8 30       	cpi	r30, 0x08	; 8
    134e:	21 f4       	brne	.+8      	; 0x1358 <udi_hid_kbd_down+0x4a>
    1350:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	0b c0       	rjmp	.+22     	; 0x136c <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1356:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	eb 51       	subi	r30, 0x1B	; 27
    135c:	fe 4d       	sbci	r31, 0xDE	; 222
    135e:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	80 93 ed 21 	sts	0x21ED, r24	; 0x8021ed <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1366:	6e df       	rcall	.-292    	; 0x1244 <udi_hid_kbd_send_report>
    1368:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    136a:	81 e0       	ldi	r24, 0x01	; 1
}
    136c:	0f 90       	pop	r0
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	08 95       	ret

00001376 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	dc 01       	movw	r26, r24
    137c:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    137e:	90 91 c9 23 	lds	r25, 0x23C9	; 0x8023c9 <udd_g_ctrlreq>
    1382:	99 23       	and	r25, r25
    1384:	0c f0       	brlt	.+2      	; 0x1388 <udi_hid_setup+0x12>
    1386:	68 c0       	rjmp	.+208    	; 0x1458 <udi_hid_setup+0xe2>
    1388:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    138a:	09 f0       	breq	.+2      	; 0x138e <udi_hid_setup+0x18>
    138c:	45 c0       	rjmp	.+138    	; 0x1418 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    138e:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x1>
    1392:	86 30       	cpi	r24, 0x06	; 6
    1394:	09 f0       	breq	.+2      	; 0x1398 <udi_hid_setup+0x22>
    1396:	40 c0       	rjmp	.+128    	; 0x1418 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1398:	76 d1       	rcall	.+748    	; 0x1686 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    139a:	dc 01       	movw	r26, r24
    139c:	1a 96       	adiw	r26, 0x0a	; 10
    139e:	2c 91       	ld	r18, X
    13a0:	1a 97       	sbiw	r26, 0x0a	; 10
    13a2:	21 32       	cpi	r18, 0x21	; 33
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <udi_hid_setup+0x32>
    13a6:	77 c0       	rjmp	.+238    	; 0x1496 <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    13a8:	20 91 cc 23 	lds	r18, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x3>
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	21 32       	cpi	r18, 0x21	; 33
    13b0:	31 05       	cpc	r19, r1
    13b2:	b1 f4       	brne	.+44     	; 0x13e0 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    13b4:	9c 01       	movw	r18, r24
    13b6:	27 5f       	subi	r18, 0xF7	; 247
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	20 93 d1 23 	sts	0x23D1, r18	; 0x8023d1 <udd_g_ctrlreq+0x8>
    13be:	30 93 d2 23 	sts	0x23D2, r19	; 0x8023d2 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    13c2:	e9 ec       	ldi	r30, 0xC9	; 201
    13c4:	f3 e2       	ldi	r31, 0x23	; 35
    13c6:	19 96       	adiw	r26, 0x09	; 9
    13c8:	8c 91       	ld	r24, X
    13ca:	26 81       	ldd	r18, Z+6	; 0x06
    13cc:	37 81       	ldd	r19, Z+7	; 0x07
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	28 17       	cp	r18, r24
    13d2:	39 07       	cpc	r19, r25
    13d4:	08 f4       	brcc	.+2      	; 0x13d8 <udi_hid_setup+0x62>
    13d6:	c9 01       	movw	r24, r18
    13d8:	82 87       	std	Z+10, r24	; 0x0a
    13da:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	68 c0       	rjmp	.+208    	; 0x14b0 <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    13e0:	fc 01       	movw	r30, r24
    13e2:	47 85       	ldd	r20, Z+15	; 0x0f
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	42 17       	cp	r20, r18
    13e8:	53 07       	cpc	r21, r19
    13ea:	09 f0       	breq	.+2      	; 0x13ee <udi_hid_setup+0x78>
    13ec:	56 c0       	rjmp	.+172    	; 0x149a <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    13ee:	c0 93 d1 23 	sts	0x23D1, r28	; 0x8023d1 <udd_g_ctrlreq+0x8>
    13f2:	d0 93 d2 23 	sts	0x23D2, r29	; 0x8023d2 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    13f6:	e9 ec       	ldi	r30, 0xC9	; 201
    13f8:	f3 e2       	ldi	r31, 0x23	; 35
    13fa:	26 81       	ldd	r18, Z+6	; 0x06
    13fc:	37 81       	ldd	r19, Z+7	; 0x07
    13fe:	dc 01       	movw	r26, r24
    1400:	50 96       	adiw	r26, 0x10	; 16
    1402:	8d 91       	ld	r24, X+
    1404:	9c 91       	ld	r25, X
    1406:	51 97       	sbiw	r26, 0x11	; 17
    1408:	28 17       	cp	r18, r24
    140a:	39 07       	cpc	r19, r25
    140c:	08 f4       	brcc	.+2      	; 0x1410 <udi_hid_setup+0x9a>
    140e:	c9 01       	movw	r24, r18
    1410:	82 87       	std	Z+10, r24	; 0x0a
    1412:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	4c c0       	rjmp	.+152    	; 0x14b0 <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1418:	90 32       	cpi	r25, 0x20	; 32
    141a:	09 f0       	breq	.+2      	; 0x141e <udi_hid_setup+0xa8>
    141c:	40 c0       	rjmp	.+128    	; 0x149e <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    141e:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x1>
    1422:	82 30       	cpi	r24, 0x02	; 2
    1424:	39 f0       	breq	.+14     	; 0x1434 <udi_hid_setup+0xbe>
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	71 f0       	breq	.+28     	; 0x1446 <udi_hid_setup+0xd0>
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	d1 f5       	brne	.+116    	; 0x14a2 <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    142e:	f9 01       	movw	r30, r18
    1430:	19 95       	eicall
    1432:	3e c0       	rjmp	.+124    	; 0x14b0 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    1434:	e9 ec       	ldi	r30, 0xC9	; 201
    1436:	f3 e2       	ldi	r31, 0x23	; 35
    1438:	a0 87       	std	Z+8, r26	; 0x08
    143a:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	82 87       	std	Z+10, r24	; 0x0a
    1442:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1444:	35 c0       	rjmp	.+106    	; 0x14b0 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1446:	e9 ec       	ldi	r30, 0xC9	; 201
    1448:	f3 e2       	ldi	r31, 0x23	; 35
    144a:	60 87       	std	Z+8, r22	; 0x08
    144c:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	82 87       	std	Z+10, r24	; 0x0a
    1454:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1456:	2c c0       	rjmp	.+88     	; 0x14b0 <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1458:	90 76       	andi	r25, 0x60	; 96
    145a:	90 32       	cpi	r25, 0x20	; 32
    145c:	21 f5       	brne	.+72     	; 0x14a6 <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    145e:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x1>
    1462:	8a 30       	cpi	r24, 0x0A	; 10
    1464:	39 f0       	breq	.+14     	; 0x1474 <udi_hid_setup+0xfe>
    1466:	8b 30       	cpi	r24, 0x0B	; 11
    1468:	51 f0       	breq	.+20     	; 0x147e <udi_hid_setup+0x108>
    146a:	89 30       	cpi	r24, 0x09	; 9
    146c:	f1 f4       	brne	.+60     	; 0x14aa <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    146e:	f9 01       	movw	r30, r18
    1470:	19 95       	eicall
    1472:	1e c0       	rjmp	.+60     	; 0x14b0 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1474:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x3>
    1478:	8c 93       	st	X, r24
				return true;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	19 c0       	rjmp	.+50     	; 0x14b0 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    147e:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    1482:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    1486:	89 2b       	or	r24, r25
    1488:	91 f4       	brne	.+36     	; 0x14ae <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    148a:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x2>
    148e:	db 01       	movw	r26, r22
    1490:	8c 93       	st	X, r24
				return true;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	0d c0       	rjmp	.+26     	; 0x14b0 <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	0b c0       	rjmp	.+22     	; 0x14b0 <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	09 c0       	rjmp	.+18     	; 0x14b0 <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <udi_hid_setup+0x13a>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <udi_hid_setup+0x13a>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <udi_hid_setup+0x13a>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    14ae:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    14b6:	e0 91 f6 21 	lds	r30, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    14ba:	f0 91 f7 21 	lds	r31, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    14be:	01 90       	ld	r0, Z+
    14c0:	f0 81       	ld	r31, Z
    14c2:	e0 2d       	mov	r30, r0
    14c4:	22 81       	ldd	r18, Z+2	; 0x02
    14c6:	33 81       	ldd	r19, Z+3	; 0x03
    14c8:	2e 0f       	add	r18, r30
    14ca:	3f 1f       	adc	r19, r31
    14cc:	fc 01       	movw	r30, r24
    14ce:	40 81       	ld	r20, Z
    14d0:	e4 0f       	add	r30, r20
    14d2:	f1 1d       	adc	r31, r1
    14d4:	e2 17       	cp	r30, r18
    14d6:	f3 07       	cpc	r31, r19
    14d8:	a0 f4       	brcc	.+40     	; 0x1502 <udc_next_desc_in_iface+0x4c>
    14da:	81 81       	ldd	r24, Z+1	; 0x01
    14dc:	84 30       	cpi	r24, 0x04	; 4
    14de:	a1 f0       	breq	.+40     	; 0x1508 <udc_next_desc_in_iface+0x52>
    14e0:	86 13       	cpse	r24, r22
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <udc_next_desc_in_iface+0x3a>
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <udc_next_desc_in_iface+0x58>
    14e6:	81 81       	ldd	r24, Z+1	; 0x01
    14e8:	84 30       	cpi	r24, 0x04	; 4
    14ea:	a1 f0       	breq	.+40     	; 0x1514 <udc_next_desc_in_iface+0x5e>
    14ec:	86 17       	cp	r24, r22
    14ee:	a9 f0       	breq	.+42     	; 0x151a <udc_next_desc_in_iface+0x64>
    14f0:	80 81       	ld	r24, Z
    14f2:	e8 0f       	add	r30, r24
    14f4:	f1 1d       	adc	r31, r1
    14f6:	e2 17       	cp	r30, r18
    14f8:	f3 07       	cpc	r31, r19
    14fa:	a8 f3       	brcs	.-22     	; 0x14e6 <udc_next_desc_in_iface+0x30>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	08 95       	ret
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	08 95       	ret
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	08 95       	ret
    150e:	8e 2f       	mov	r24, r30
    1510:	9f 2f       	mov	r25, r31
    1512:	08 95       	ret
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	08 95       	ret
    151a:	8e 2f       	mov	r24, r30
    151c:	9f 2f       	mov	r25, r31
    151e:	08 95       	ret

00001520 <udc_valid_address>:
    1520:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x2>
    1524:	8f 77       	andi	r24, 0x7F	; 127
    1526:	95 c7       	rjmp	.+3882   	; 0x2452 <udd_set_address>
    1528:	08 95       	ret

0000152a <udc_update_iface_desc>:
    152a:	90 91 f8 21 	lds	r25, 0x21F8	; 0x8021f8 <udc_num_configuration>
    152e:	99 23       	and	r25, r25
    1530:	81 f1       	breq	.+96     	; 0x1592 <udc_update_iface_desc+0x68>
    1532:	e0 91 f6 21 	lds	r30, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    1536:	f0 91 f7 21 	lds	r31, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    153a:	01 90       	ld	r0, Z+
    153c:	f0 81       	ld	r31, Z
    153e:	e0 2d       	mov	r30, r0
    1540:	94 81       	ldd	r25, Z+4	; 0x04
    1542:	89 17       	cp	r24, r25
    1544:	40 f5       	brcc	.+80     	; 0x1596 <udc_update_iface_desc+0x6c>
    1546:	e0 93 f4 21 	sts	0x21F4, r30	; 0x8021f4 <udc_ptr_iface>
    154a:	f0 93 f5 21 	sts	0x21F5, r31	; 0x8021f5 <udc_ptr_iface+0x1>
    154e:	22 81       	ldd	r18, Z+2	; 0x02
    1550:	33 81       	ldd	r19, Z+3	; 0x03
    1552:	2e 0f       	add	r18, r30
    1554:	3f 1f       	adc	r19, r31
    1556:	e2 17       	cp	r30, r18
    1558:	f3 07       	cpc	r31, r19
    155a:	f8 f4       	brcc	.+62     	; 0x159a <udc_update_iface_desc+0x70>
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	94 30       	cpi	r25, 0x04	; 4
    1560:	61 f4       	brne	.+24     	; 0x157a <udc_update_iface_desc+0x50>
    1562:	92 81       	ldd	r25, Z+2	; 0x02
    1564:	89 13       	cpse	r24, r25
    1566:	09 c0       	rjmp	.+18     	; 0x157a <udc_update_iface_desc+0x50>
    1568:	93 81       	ldd	r25, Z+3	; 0x03
    156a:	96 13       	cpse	r25, r22
    156c:	06 c0       	rjmp	.+12     	; 0x157a <udc_update_iface_desc+0x50>
    156e:	e0 93 f4 21 	sts	0x21F4, r30	; 0x8021f4 <udc_ptr_iface>
    1572:	f0 93 f5 21 	sts	0x21F5, r31	; 0x8021f5 <udc_ptr_iface+0x1>
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	08 95       	ret
    157a:	90 81       	ld	r25, Z
    157c:	e9 0f       	add	r30, r25
    157e:	f1 1d       	adc	r31, r1
    1580:	e2 17       	cp	r30, r18
    1582:	f3 07       	cpc	r31, r19
    1584:	58 f3       	brcs	.-42     	; 0x155c <udc_update_iface_desc+0x32>
    1586:	e0 93 f4 21 	sts	0x21F4, r30	; 0x8021f4 <udc_ptr_iface>
    158a:	f0 93 f5 21 	sts	0x21F5, r31	; 0x8021f5 <udc_ptr_iface+0x1>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	08 95       	ret
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	08 95       	ret
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	08 95       	ret
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	08 95       	ret

0000159e <udc_iface_disable>:
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	c8 2f       	mov	r28, r24
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	be df       	rcall	.-132    	; 0x152a <udc_update_iface_desc>
    15ae:	18 2f       	mov	r17, r24
    15b0:	88 23       	and	r24, r24
    15b2:	81 f1       	breq	.+96     	; 0x1614 <udc_iface_disable+0x76>
    15b4:	a0 91 f6 21 	lds	r26, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    15b8:	b0 91 f7 21 	lds	r27, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    15bc:	ec 2f       	mov	r30, r28
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	12 96       	adiw	r26, 0x02	; 2
    15c6:	8d 91       	ld	r24, X+
    15c8:	9c 91       	ld	r25, X
    15ca:	13 97       	sbiw	r26, 0x03	; 3
    15cc:	e8 0f       	add	r30, r24
    15ce:	f9 1f       	adc	r31, r25
    15d0:	e0 80       	ld	r14, Z
    15d2:	f1 80       	ldd	r15, Z+1	; 0x01
    15d4:	d7 01       	movw	r26, r14
    15d6:	16 96       	adiw	r26, 0x06	; 6
    15d8:	ed 91       	ld	r30, X+
    15da:	fc 91       	ld	r31, X
    15dc:	17 97       	sbiw	r26, 0x07	; 7
    15de:	19 95       	eicall
    15e0:	68 2f       	mov	r22, r24
    15e2:	8c 2f       	mov	r24, r28
    15e4:	a2 df       	rcall	.-188    	; 0x152a <udc_update_iface_desc>
    15e6:	18 2f       	mov	r17, r24
    15e8:	88 23       	and	r24, r24
    15ea:	a1 f0       	breq	.+40     	; 0x1614 <udc_iface_disable+0x76>
    15ec:	c0 91 f4 21 	lds	r28, 0x21F4	; 0x8021f4 <udc_ptr_iface>
    15f0:	d0 91 f5 21 	lds	r29, 0x21F5	; 0x8021f5 <udc_ptr_iface+0x1>
    15f4:	65 e0       	ldi	r22, 0x05	; 5
    15f6:	ce 01       	movw	r24, r28
    15f8:	5e df       	rcall	.-324    	; 0x14b6 <udc_next_desc_in_iface>
    15fa:	ec 01       	movw	r28, r24
    15fc:	89 2b       	or	r24, r25
    15fe:	21 f0       	breq	.+8      	; 0x1608 <udc_iface_disable+0x6a>
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	0e 94 29 14 	call	0x2852	; 0x2852 <udd_ep_free>
    1606:	f6 cf       	rjmp	.-20     	; 0x15f4 <udc_iface_disable+0x56>
    1608:	d7 01       	movw	r26, r14
    160a:	12 96       	adiw	r26, 0x02	; 2
    160c:	ed 91       	ld	r30, X+
    160e:	fc 91       	ld	r31, X
    1610:	13 97       	sbiw	r26, 0x03	; 3
    1612:	19 95       	eicall
    1614:	81 2f       	mov	r24, r17
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	08 95       	ret

00001622 <udc_iface_enable>:
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	18 2f       	mov	r17, r24
    162a:	7f df       	rcall	.-258    	; 0x152a <udc_update_iface_desc>
    162c:	88 23       	and	r24, r24
    162e:	39 f1       	breq	.+78     	; 0x167e <udc_iface_enable+0x5c>
    1630:	c0 91 f4 21 	lds	r28, 0x21F4	; 0x8021f4 <udc_ptr_iface>
    1634:	d0 91 f5 21 	lds	r29, 0x21F5	; 0x8021f5 <udc_ptr_iface+0x1>
    1638:	65 e0       	ldi	r22, 0x05	; 5
    163a:	ce 01       	movw	r24, r28
    163c:	3c df       	rcall	.-392    	; 0x14b6 <udc_next_desc_in_iface>
    163e:	ec 01       	movw	r28, r24
    1640:	89 2b       	or	r24, r25
    1642:	41 f0       	breq	.+16     	; 0x1654 <udc_iface_enable+0x32>
    1644:	4c 81       	ldd	r20, Y+4	; 0x04
    1646:	5d 81       	ldd	r21, Y+5	; 0x05
    1648:	6b 81       	ldd	r22, Y+3	; 0x03
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	0f d7       	rcall	.+3614   	; 0x246c <udd_ep_alloc>
    164e:	81 11       	cpse	r24, r1
    1650:	f3 cf       	rjmp	.-26     	; 0x1638 <udc_iface_enable+0x16>
    1652:	15 c0       	rjmp	.+42     	; 0x167e <udc_iface_enable+0x5c>
    1654:	a0 91 f6 21 	lds	r26, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    1658:	b0 91 f7 21 	lds	r27, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    165c:	e1 2f       	mov	r30, r17
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	12 96       	adiw	r26, 0x02	; 2
    1666:	8d 91       	ld	r24, X+
    1668:	9c 91       	ld	r25, X
    166a:	13 97       	sbiw	r26, 0x03	; 3
    166c:	e8 0f       	add	r30, r24
    166e:	f9 1f       	adc	r31, r25
    1670:	01 90       	ld	r0, Z+
    1672:	f0 81       	ld	r31, Z
    1674:	e0 2d       	mov	r30, r0
    1676:	01 90       	ld	r0, Z+
    1678:	f0 81       	ld	r31, Z
    167a:	e0 2d       	mov	r30, r0
    167c:	19 95       	eicall
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	08 95       	ret

00001686 <udc_get_interface_desc>:
    1686:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_ptr_iface>
    168a:	90 91 f5 21 	lds	r25, 0x21F5	; 0x8021f5 <udc_ptr_iface+0x1>
    168e:	08 95       	ret

00001690 <udc_start>:
    1690:	55 c6       	rjmp	.+3242   	; 0x233c <udd_enable>
    1692:	08 95       	ret

00001694 <udc_reset>:
    1694:	cf 93       	push	r28
    1696:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udc_num_configuration>
    169a:	88 23       	and	r24, r24
    169c:	c1 f0       	breq	.+48     	; 0x16ce <udc_reset+0x3a>
    169e:	e0 91 f6 21 	lds	r30, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    16a2:	f0 91 f7 21 	lds	r31, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    16a6:	01 90       	ld	r0, Z+
    16a8:	f0 81       	ld	r31, Z
    16aa:	e0 2d       	mov	r30, r0
    16ac:	84 81       	ldd	r24, Z+4	; 0x04
    16ae:	88 23       	and	r24, r24
    16b0:	71 f0       	breq	.+28     	; 0x16ce <udc_reset+0x3a>
    16b2:	c0 e0       	ldi	r28, 0x00	; 0
    16b4:	8c 2f       	mov	r24, r28
    16b6:	73 df       	rcall	.-282    	; 0x159e <udc_iface_disable>
    16b8:	cf 5f       	subi	r28, 0xFF	; 255
    16ba:	e0 91 f6 21 	lds	r30, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    16be:	f0 91 f7 21 	lds	r31, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    16c2:	01 90       	ld	r0, Z+
    16c4:	f0 81       	ld	r31, Z
    16c6:	e0 2d       	mov	r30, r0
    16c8:	84 81       	ldd	r24, Z+4	; 0x04
    16ca:	c8 17       	cp	r28, r24
    16cc:	98 f3       	brcs	.-26     	; 0x16b4 <udc_reset+0x20>
    16ce:	10 92 f8 21 	sts	0x21F8, r1	; 0x8021f8 <udc_num_configuration>
    16d2:	80 91 fc 21 	lds	r24, 0x21FC	; 0x8021fc <udc_device_status>
    16d6:	81 fd       	sbrc	r24, 1
    16d8:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <main_remotewakeup_disable>
    16dc:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udc_device_status>
    16e0:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udc_device_status+0x1>
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret

000016e8 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    16e8:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    16ea:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udc_num_configuration>
    16ee:	88 23       	and	r24, r24
    16f0:	49 f1       	breq	.+82     	; 0x1744 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    16f2:	a0 91 f6 21 	lds	r26, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    16f6:	b0 91 f7 21 	lds	r27, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    16fa:	ed 91       	ld	r30, X+
    16fc:	fc 91       	ld	r31, X
    16fe:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1700:	84 81       	ldd	r24, Z+4	; 0x04
    1702:	88 23       	and	r24, r24
    1704:	f9 f0       	breq	.+62     	; 0x1744 <udc_sof_notify+0x5c>
    1706:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1708:	ec 2f       	mov	r30, r28
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	ee 0f       	add	r30, r30
    170e:	ff 1f       	adc	r31, r31
    1710:	12 96       	adiw	r26, 0x02	; 2
    1712:	8d 91       	ld	r24, X+
    1714:	9c 91       	ld	r25, X
    1716:	13 97       	sbiw	r26, 0x03	; 3
    1718:	e8 0f       	add	r30, r24
    171a:	f9 1f       	adc	r31, r25
    171c:	01 90       	ld	r0, Z+
    171e:	f0 81       	ld	r31, Z
    1720:	e0 2d       	mov	r30, r0
    1722:	00 84       	ldd	r0, Z+8	; 0x08
    1724:	f1 85       	ldd	r31, Z+9	; 0x09
    1726:	e0 2d       	mov	r30, r0
    1728:	30 97       	sbiw	r30, 0x00	; 0
    172a:	09 f0       	breq	.+2      	; 0x172e <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    172c:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    172e:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1730:	a0 91 f6 21 	lds	r26, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    1734:	b0 91 f7 21 	lds	r27, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    1738:	ed 91       	ld	r30, X+
    173a:	fc 91       	ld	r31, X
    173c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    173e:	84 81       	ldd	r24, Z+4	; 0x04
    1740:	c8 17       	cp	r28, r24
    1742:	10 f3       	brcs	.-60     	; 0x1708 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1744:	cf 91       	pop	r28
    1746:	08 95       	ret

00001748 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1750:	e9 ec       	ldi	r30, 0xC9	; 201
    1752:	f3 e2       	ldi	r31, 0x23	; 35
    1754:	12 86       	std	Z+10, r1	; 0x0a
    1756:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1758:	14 86       	std	Z+12, r1	; 0x0c
    175a:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    175c:	16 86       	std	Z+14, r1	; 0x0e
    175e:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1760:	80 81       	ld	r24, Z
    1762:	88 23       	and	r24, r24
    1764:	0c f0       	brlt	.+2      	; 0x1768 <udc_process_setup+0x20>
    1766:	7e c2       	rjmp	.+1276   	; 0x1c64 <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1768:	20 91 cf 23 	lds	r18, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    176c:	30 91 d0 23 	lds	r19, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    1770:	21 15       	cp	r18, r1
    1772:	31 05       	cpc	r19, r1
    1774:	09 f0       	breq	.+2      	; 0x1778 <udc_process_setup+0x30>
    1776:	7b c2       	rjmp	.+1270   	; 0x1c6e <udc_process_setup+0x526>
    1778:	6d c2       	rjmp	.+1242   	; 0x1c54 <udc_process_setup+0x50c>
    177a:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    177c:	09 f0       	breq	.+2      	; 0x1780 <udc_process_setup+0x38>
    177e:	a0 c0       	rjmp	.+320    	; 0x18c0 <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1780:	90 91 ca 23 	lds	r25, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x1>
    1784:	96 30       	cpi	r25, 0x06	; 6
    1786:	79 f0       	breq	.+30     	; 0x17a6 <udc_process_setup+0x5e>
    1788:	98 30       	cpi	r25, 0x08	; 8
    178a:	09 f4       	brne	.+2      	; 0x178e <udc_process_setup+0x46>
    178c:	8f c0       	rjmp	.+286    	; 0x18ac <udc_process_setup+0x164>
    178e:	91 11       	cpse	r25, r1
    1790:	97 c0       	rjmp	.+302    	; 0x18c0 <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	09 f0       	breq	.+2      	; 0x179a <udc_process_setup+0x52>
    1798:	19 c2       	rjmp	.+1074   	; 0x1bcc <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    179a:	62 e0       	ldi	r22, 0x02	; 2
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	8c ef       	ldi	r24, 0xFC	; 252
    17a0:	91 e2       	ldi	r25, 0x21	; 33
    17a2:	5d d6       	rcall	.+3258   	; 0x245e <udd_set_setup_payload>
    17a4:	69 c2       	rjmp	.+1234   	; 0x1c78 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    17a6:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x2>
    17aa:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    17ae:	29 2f       	mov	r18, r25
    17b0:	33 27       	eor	r19, r19
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	a9 f0       	breq	.+42     	; 0x17e2 <udc_process_setup+0x9a>
    17b8:	20 f4       	brcc	.+8      	; 0x17c2 <udc_process_setup+0x7a>
    17ba:	21 30       	cpi	r18, 0x01	; 1
    17bc:	31 05       	cpc	r19, r1
    17be:	41 f0       	breq	.+16     	; 0x17d0 <udc_process_setup+0x88>
    17c0:	c7 c1       	rjmp	.+910    	; 0x1b50 <udc_process_setup+0x408>
    17c2:	23 30       	cpi	r18, 0x03	; 3
    17c4:	31 05       	cpc	r19, r1
    17c6:	d9 f1       	breq	.+118    	; 0x183e <udc_process_setup+0xf6>
    17c8:	2f 30       	cpi	r18, 0x0F	; 15
    17ca:	31 05       	cpc	r19, r1
    17cc:	51 f1       	breq	.+84     	; 0x1822 <udc_process_setup+0xda>
    17ce:	c0 c1       	rjmp	.+896    	; 0x1b50 <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    17d0:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    17d4:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    17d8:	dc 01       	movw	r26, r24
    17da:	6c 91       	ld	r22, X
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	3f d6       	rcall	.+3198   	; 0x245e <udd_set_setup_payload>
    17e0:	56 c0       	rjmp	.+172    	; 0x188e <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    17e2:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    17e6:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    17ea:	21 89       	ldd	r18, Z+17	; 0x11
    17ec:	82 17       	cp	r24, r18
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <udc_process_setup+0xaa>
    17f0:	ed c1       	rjmp	.+986    	; 0x1bcc <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    17f2:	99 27       	eor	r25, r25
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1800:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1804:	e8 0f       	add	r30, r24
    1806:	f9 1f       	adc	r31, r25
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    180c:	fc 01       	movw	r30, r24
    180e:	62 81       	ldd	r22, Z+2	; 0x02
    1810:	73 81       	ldd	r23, Z+3	; 0x03
    1812:	25 d6       	rcall	.+3146   	; 0x245e <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1814:	e0 91 d1 23 	lds	r30, 0x23D1	; 0x8023d1 <udd_g_ctrlreq+0x8>
    1818:	f0 91 d2 23 	lds	r31, 0x23D2	; 0x8023d2 <udd_g_ctrlreq+0x9>
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	81 83       	std	Z+1, r24	; 0x01
    1820:	36 c0       	rjmp	.+108    	; 0x188e <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1822:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    1826:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	09 f4       	brne	.+2      	; 0x1830 <udc_process_setup+0xe8>
    182e:	ce c1       	rjmp	.+924    	; 0x1bcc <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1830:	dc 01       	movw	r26, r24
    1832:	12 96       	adiw	r26, 0x02	; 2
    1834:	6d 91       	ld	r22, X+
    1836:	7c 91       	ld	r23, X
    1838:	13 97       	sbiw	r26, 0x03	; 3
    183a:	11 d6       	rcall	.+3106   	; 0x245e <udd_set_setup_payload>
    183c:	28 c0       	rjmp	.+80     	; 0x188e <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    183e:	99 27       	eor	r25, r25
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	91 05       	cpc	r25, r1
    1844:	71 f0       	breq	.+28     	; 0x1862 <udc_process_setup+0x11a>
    1846:	38 f0       	brcs	.+14     	; 0x1856 <udc_process_setup+0x10e>
    1848:	02 97       	sbiw	r24, 0x02	; 2
    184a:	09 f0       	breq	.+2      	; 0x184e <udc_process_setup+0x106>
    184c:	8a c1       	rjmp	.+788    	; 0x1b62 <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    184e:	e2 e5       	ldi	r30, 0x52	; 82
    1850:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1852:	31 e2       	ldi	r19, 0x21	; 33
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1856:	64 e0       	ldi	r22, 0x04	; 4
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	8e e7       	ldi	r24, 0x7E	; 126
    185c:	91 e2       	ldi	r25, 0x21	; 33
    185e:	ff d5       	rcall	.+3070   	; 0x245e <udd_set_setup_payload>
    1860:	16 c0       	rjmp	.+44     	; 0x188e <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1862:	e4 e7       	ldi	r30, 0x74	; 116
    1864:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1866:	39 e0       	ldi	r19, 0x09	; 9
    1868:	a0 e1       	ldi	r26, 0x10	; 16
    186a:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    186c:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    186e:	81 91       	ld	r24, Z+
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	8d 93       	st	X+, r24
    1874:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1876:	2f 5f       	subi	r18, 0xFF	; 255
    1878:	23 17       	cp	r18, r19
    187a:	c8 f3       	brcs	.-14     	; 0x186e <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    187c:	63 2f       	mov	r22, r19
    187e:	66 0f       	add	r22, r22
    1880:	6e 5f       	subi	r22, 0xFE	; 254
    1882:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <udc_string_desc>
		udd_set_setup_payload(
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	8e e0       	ldi	r24, 0x0E	; 14
    188a:	91 e2       	ldi	r25, 0x21	; 33
    188c:	e8 d5       	rcall	.+3024   	; 0x245e <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    188e:	e9 ec       	ldi	r30, 0xC9	; 201
    1890:	f3 e2       	ldi	r31, 0x23	; 35
    1892:	86 81       	ldd	r24, Z+6	; 0x06
    1894:	97 81       	ldd	r25, Z+7	; 0x07
    1896:	22 85       	ldd	r18, Z+10	; 0x0a
    1898:	33 85       	ldd	r19, Z+11	; 0x0b
    189a:	82 17       	cp	r24, r18
    189c:	93 07       	cpc	r25, r19
    189e:	08 f0       	brcs	.+2      	; 0x18a2 <udc_process_setup+0x15a>
    18a0:	eb c1       	rjmp	.+982    	; 0x1c78 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    18a2:	80 93 d3 23 	sts	0x23D3, r24	; 0x8023d3 <udd_g_ctrlreq+0xa>
    18a6:	90 93 d4 23 	sts	0x23D4, r25	; 0x8023d4 <udd_g_ctrlreq+0xb>
    18aa:	e6 c1       	rjmp	.+972    	; 0x1c78 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    18ac:	21 30       	cpi	r18, 0x01	; 1
    18ae:	31 05       	cpc	r19, r1
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    18b2:	8c c1       	rjmp	.+792    	; 0x1bcc <udc_process_setup+0x484>
    18b4:	61 e0       	ldi	r22, 0x01	; 1
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	88 ef       	ldi	r24, 0xF8	; 248
    18ba:	91 e2       	ldi	r25, 0x21	; 33
    18bc:	d0 d5       	rcall	.+2976   	; 0x245e <udd_set_setup_payload>
    18be:	dc c1       	rjmp	.+952    	; 0x1c78 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	e1 f5       	brne	.+120    	; 0x193c <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    18c4:	90 91 ca 23 	lds	r25, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x1>
    18c8:	9a 30       	cpi	r25, 0x0A	; 10
    18ca:	c1 f5       	brne	.+112    	; 0x193c <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    18cc:	21 30       	cpi	r18, 0x01	; 1
    18ce:	31 05       	cpc	r19, r1
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <udc_process_setup+0x18c>
    18d2:	4c c1       	rjmp	.+664    	; 0x1b6c <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    18d4:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udc_num_configuration>
    18d8:	88 23       	and	r24, r24
    18da:	09 f4       	brne	.+2      	; 0x18de <udc_process_setup+0x196>
    18dc:	47 c1       	rjmp	.+654    	; 0x1b6c <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18de:	c0 91 cd 23 	lds	r28, 0x23CD	; 0x8023cd <udd_g_ctrlreq+0x4>
    18e2:	d0 91 ce 23 	lds	r29, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    18e6:	00 91 f6 21 	lds	r16, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    18ea:	10 91 f7 21 	lds	r17, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    18ee:	d8 01       	movw	r26, r16
    18f0:	ed 91       	ld	r30, X+
    18f2:	fc 91       	ld	r31, X
    18f4:	84 81       	ldd	r24, Z+4	; 0x04
    18f6:	c8 17       	cp	r28, r24
    18f8:	08 f0       	brcs	.+2      	; 0x18fc <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    18fa:	38 c1       	rjmp	.+624    	; 0x1b6c <udc_process_setup+0x424>
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	8c 2f       	mov	r24, r28
    1900:	14 de       	rcall	.-984    	; 0x152a <udc_update_iface_desc>
    1902:	88 23       	and	r24, r24
    1904:	09 f4       	brne	.+2      	; 0x1908 <udc_process_setup+0x1c0>
    1906:	2d c1       	rjmp	.+602    	; 0x1b62 <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1908:	ce 01       	movw	r24, r28
    190a:	99 27       	eor	r25, r25
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	d8 01       	movw	r26, r16
    1912:	12 96       	adiw	r26, 0x02	; 2
    1914:	ed 91       	ld	r30, X+
    1916:	fc 91       	ld	r31, X
    1918:	13 97       	sbiw	r26, 0x03	; 3
    191a:	e8 0f       	add	r30, r24
    191c:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    191e:	01 90       	ld	r0, Z+
    1920:	f0 81       	ld	r31, Z
    1922:	e0 2d       	mov	r30, r0
    1924:	86 81       	ldd	r24, Z+6	; 0x06
    1926:	97 81       	ldd	r25, Z+7	; 0x07
    1928:	fc 01       	movw	r30, r24
    192a:	19 95       	eicall
    192c:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	8a ef       	ldi	r24, 0xFA	; 250
    1936:	91 e2       	ldi	r25, 0x21	; 33
    1938:	92 d5       	rcall	.+2852   	; 0x245e <udd_set_setup_payload>
    193a:	9e c1       	rjmp	.+828    	; 0x1c78 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    193c:	82 30       	cpi	r24, 0x02	; 2
    193e:	09 f0       	breq	.+2      	; 0x1942 <udc_process_setup+0x1fa>
    1940:	10 c1       	rjmp	.+544    	; 0x1b62 <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1942:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x1>
    1946:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1948:	05 c1       	rjmp	.+522    	; 0x1b54 <udc_process_setup+0x40c>
    194a:	22 30       	cpi	r18, 0x02	; 2
    194c:	31 05       	cpc	r19, r1
    194e:	09 f0       	breq	.+2      	; 0x1952 <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1950:	3d c1       	rjmp	.+634    	; 0x1bcc <udc_process_setup+0x484>
    1952:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <udd_g_ctrlreq+0x4>
    1956:	12 d6       	rcall	.+3108   	; 0x257c <udd_ep_is_halted>
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udc_ep_status.4581>
    195e:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <udc_ep_status.4581+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1962:	62 e0       	ldi	r22, 0x02	; 2
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	82 ef       	ldi	r24, 0xF2	; 242
    1968:	91 e2       	ldi	r25, 0x21	; 33
    196a:	79 d5       	rcall	.+2802   	; 0x245e <udd_set_setup_payload>
    196c:	85 c1       	rjmp	.+778    	; 0x1c78 <udc_process_setup+0x530>
    196e:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1970:	09 f0       	breq	.+2      	; 0x1974 <udc_process_setup+0x22c>
    1972:	9f c0       	rjmp	.+318    	; 0x1ab2 <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1974:	90 91 ca 23 	lds	r25, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x1>
    1978:	93 30       	cpi	r25, 0x03	; 3
    197a:	91 f1       	breq	.+100    	; 0x19e0 <udc_process_setup+0x298>
    197c:	18 f4       	brcc	.+6      	; 0x1984 <udc_process_setup+0x23c>
    197e:	91 30       	cpi	r25, 0x01	; 1
    1980:	a9 f0       	breq	.+42     	; 0x19ac <udc_process_setup+0x264>
    1982:	97 c0       	rjmp	.+302    	; 0x1ab2 <udc_process_setup+0x36a>
    1984:	95 30       	cpi	r25, 0x05	; 5
    1986:	21 f0       	breq	.+8      	; 0x1990 <udc_process_setup+0x248>
    1988:	99 30       	cpi	r25, 0x09	; 9
    198a:	09 f4       	brne	.+2      	; 0x198e <udc_process_setup+0x246>
    198c:	43 c0       	rjmp	.+134    	; 0x1a14 <udc_process_setup+0x2cc>
    198e:	91 c0       	rjmp	.+290    	; 0x1ab2 <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1990:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    1994:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    1998:	89 2b       	or	r24, r25
    199a:	09 f0       	breq	.+2      	; 0x199e <udc_process_setup+0x256>
    199c:	17 c1       	rjmp	.+558    	; 0x1bcc <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    199e:	80 e9       	ldi	r24, 0x90	; 144
    19a0:	9a e0       	ldi	r25, 0x0A	; 10
    19a2:	80 93 d5 23 	sts	0x23D5, r24	; 0x8023d5 <udd_g_ctrlreq+0xc>
    19a6:	90 93 d6 23 	sts	0x23D6, r25	; 0x8023d6 <udd_g_ctrlreq+0xd>
    19aa:	66 c1       	rjmp	.+716    	; 0x1c78 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19ac:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    19b0:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    19b4:	89 2b       	or	r24, r25
    19b6:	09 f0       	breq	.+2      	; 0x19ba <udc_process_setup+0x272>
    19b8:	09 c1       	rjmp	.+530    	; 0x1bcc <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    19ba:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x2>
    19be:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x3>
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <udc_process_setup+0x280>
    19c6:	02 c1       	rjmp	.+516    	; 0x1bcc <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    19c8:	80 91 fc 21 	lds	r24, 0x21FC	; 0x8021fc <udc_device_status>
    19cc:	90 91 fd 21 	lds	r25, 0x21FD	; 0x8021fd <udc_device_status+0x1>
    19d0:	8d 7f       	andi	r24, 0xFD	; 253
    19d2:	80 93 fc 21 	sts	0x21FC, r24	; 0x8021fc <udc_device_status>
    19d6:	90 93 fd 21 	sts	0x21FD, r25	; 0x8021fd <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    19da:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <main_remotewakeup_disable>
    19de:	4c c1       	rjmp	.+664    	; 0x1c78 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19e0:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    19e4:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    19e8:	89 2b       	or	r24, r25
    19ea:	09 f0       	breq	.+2      	; 0x19ee <udc_process_setup+0x2a6>
    19ec:	ef c0       	rjmp	.+478    	; 0x1bcc <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    19ee:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x2>
    19f2:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x3>
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	09 f0       	breq	.+2      	; 0x19fc <udc_process_setup+0x2b4>
    19fa:	ae c0       	rjmp	.+348    	; 0x1b58 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    19fc:	80 91 fc 21 	lds	r24, 0x21FC	; 0x8021fc <udc_device_status>
    1a00:	90 91 fd 21 	lds	r25, 0x21FD	; 0x8021fd <udc_device_status+0x1>
    1a04:	82 60       	ori	r24, 0x02	; 2
    1a06:	80 93 fc 21 	sts	0x21FC, r24	; 0x8021fc <udc_device_status>
    1a0a:	90 93 fd 21 	sts	0x21FD, r25	; 0x8021fd <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1a0e:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1a12:	32 c1       	rjmp	.+612    	; 0x1c78 <udc_process_setup+0x530>
    1a14:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    1a18:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    1a1c:	89 2b       	or	r24, r25
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1a20:	d5 c0       	rjmp	.+426    	; 0x1bcc <udc_process_setup+0x484>
    1a22:	1a d5       	rcall	.+2612   	; 0x2458 <udd_getaddress>
    1a24:	88 23       	and	r24, r24
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <udc_process_setup+0x2e2>
    1a28:	9c c0       	rjmp	.+312    	; 0x1b62 <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a2a:	20 91 cb 23 	lds	r18, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x2>
    1a2e:	30 91 cc 23 	lds	r19, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1a32:	33 27       	eor	r19, r19
    1a34:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1a38:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a3c:	81 89       	ldd	r24, Z+17	; 0x11
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	82 17       	cp	r24, r18
    1a42:	93 07       	cpc	r25, r19
    1a44:	08 f4       	brcc	.+2      	; 0x1a48 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1a46:	8d c0       	rjmp	.+282    	; 0x1b62 <udc_process_setup+0x41a>
    1a48:	25 de       	rcall	.-950    	; 0x1694 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1a4a:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x2>
    1a4e:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x3>
    1a52:	80 93 f8 21 	sts	0x21F8, r24	; 0x8021f8 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1a56:	88 23       	and	r24, r24
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <udc_process_setup+0x314>
    1a5a:	0e c1       	rjmp	.+540    	; 0x1c78 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1a5c:	99 27       	eor	r25, r25
    1a5e:	81 50       	subi	r24, 0x01	; 1
    1a60:	90 4c       	sbci	r25, 0xC0	; 192
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1a6e:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1a72:	e8 0f       	add	r30, r24
    1a74:	f9 1f       	adc	r31, r25
    1a76:	e0 93 f6 21 	sts	0x21F6, r30	; 0x8021f6 <udc_ptr_conf>
    1a7a:	f0 93 f7 21 	sts	0x21F7, r31	; 0x8021f7 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a7e:	01 90       	ld	r0, Z+
    1a80:	f0 81       	ld	r31, Z
    1a82:	e0 2d       	mov	r30, r0
    1a84:	84 81       	ldd	r24, Z+4	; 0x04
    1a86:	88 23       	and	r24, r24
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <udc_process_setup+0x344>
    1a8a:	f6 c0       	rjmp	.+492    	; 0x1c78 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1a8c:	c0 e0       	ldi	r28, 0x00	; 0
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	8c 2f       	mov	r24, r28
    1a92:	c7 dd       	rcall	.-1138   	; 0x1622 <udc_iface_enable>
    1a94:	88 23       	and	r24, r24
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <udc_process_setup+0x352>
    1a98:	64 c0       	rjmp	.+200    	; 0x1b62 <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1a9a:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a9c:	e0 91 f6 21 	lds	r30, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    1aa0:	f0 91 f7 21 	lds	r31, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    1aa4:	01 90       	ld	r0, Z+
    1aa6:	f0 81       	ld	r31, Z
    1aa8:	e0 2d       	mov	r30, r0
    1aaa:	84 81       	ldd	r24, Z+4	; 0x04
    1aac:	c8 17       	cp	r28, r24
    1aae:	78 f3       	brcs	.-34     	; 0x1a8e <udc_process_setup+0x346>
    1ab0:	e3 c0       	rjmp	.+454    	; 0x1c78 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	e9 f4       	brne	.+58     	; 0x1af0 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ab6:	90 91 ca 23 	lds	r25, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x1>
    1aba:	9b 30       	cpi	r25, 0x0B	; 11
    1abc:	c9 f4       	brne	.+50     	; 0x1af0 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1abe:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    1ac2:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    1ac6:	89 2b       	or	r24, r25
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1aca:	50 c0       	rjmp	.+160    	; 0x1b6c <udc_process_setup+0x424>
    1acc:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udc_num_configuration>
    1ad0:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <udc_process_setup+0x38e>
    1ad4:	4b c0       	rjmp	.+150    	; 0x1b6c <udc_process_setup+0x424>
    1ad6:	e9 ec       	ldi	r30, 0xC9	; 201
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1ad8:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1ada:	c4 81       	ldd	r28, Z+4	; 0x04
    1adc:	d2 81       	ldd	r29, Z+2	; 0x02
    1ade:	8c 2f       	mov	r24, r28
    1ae0:	5e dd       	rcall	.-1348   	; 0x159e <udc_iface_disable>
    1ae2:	88 23       	and	r24, r24
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1ae6:	3d c0       	rjmp	.+122    	; 0x1b62 <udc_process_setup+0x41a>
    1ae8:	6d 2f       	mov	r22, r29
    1aea:	8c 2f       	mov	r24, r28
    1aec:	9a dd       	rcall	.-1228   	; 0x1622 <udc_iface_enable>
    1aee:	37 c0       	rjmp	.+110    	; 0x1b5e <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	b9 f5       	brne	.+110    	; 0x1b62 <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1af4:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x1>
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	19 f0       	breq	.+6      	; 0x1b02 <udc_process_setup+0x3ba>
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	99 f0       	breq	.+38     	; 0x1b26 <udc_process_setup+0x3de>
    1b00:	2d c0       	rjmp	.+90     	; 0x1b5c <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b02:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    1b06:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    1b0a:	89 2b       	or	r24, r25
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1b0e:	5e c0       	rjmp	.+188    	; 0x1bcc <udc_process_setup+0x484>
    1b10:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x2>
    1b14:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x3>
    1b18:	89 2b       	or	r24, r25
    1b1a:	09 f0       	breq	.+2      	; 0x1b1e <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b1c:	57 c0       	rjmp	.+174    	; 0x1bcc <udc_process_setup+0x484>
    1b1e:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <udd_g_ctrlreq+0x4>
    1b22:	47 d5       	rcall	.+2702   	; 0x25b2 <udd_ep_clear_halt>
    1b24:	1c c0       	rjmp	.+56     	; 0x1b5e <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b26:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    1b2a:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    1b2e:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <udc_process_setup+0x3ec>
    1b32:	4c c0       	rjmp	.+152    	; 0x1bcc <udc_process_setup+0x484>
    1b34:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x2>
    1b38:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x3>
    1b3c:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <udc_process_setup+0x3fa>
    1b40:	45 c0       	rjmp	.+138    	; 0x1bcc <udc_process_setup+0x484>
    1b42:	c9 ec       	ldi	r28, 0xC9	; 201
    1b44:	d3 e2       	ldi	r29, 0x23	; 35
    1b46:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b48:	35 d6       	rcall	.+3178   	; 0x27b4 <udd_ep_abort>
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	9e d6       	rcall	.+3388   	; 0x288a <udd_ep_set_halt>
    1b4e:	07 c0       	rjmp	.+14     	; 0x1b5e <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	05 c0       	rjmp	.+10     	; 0x1b5e <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	03 c0       	rjmp	.+6      	; 0x1b5e <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1b5e:	81 11       	cpse	r24, r1
    1b60:	8c c0       	rjmp	.+280    	; 0x1c7a <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1b62:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udd_g_ctrlreq>
    1b66:	8f 71       	andi	r24, 0x1F	; 31
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	81 f5       	brne	.+96     	; 0x1bcc <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b6c:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udc_num_configuration>
    1b70:	88 23       	and	r24, r24
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b74:	71 c0       	rjmp	.+226    	; 0x1c58 <udc_process_setup+0x510>
    1b76:	00 91 cd 23 	lds	r16, 0x23CD	; 0x8023cd <udd_g_ctrlreq+0x4>
    1b7a:	10 91 ce 23 	lds	r17, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b7e:	c0 91 f6 21 	lds	r28, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    1b82:	d0 91 f7 21 	lds	r29, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    1b86:	e8 81       	ld	r30, Y
    1b88:	f9 81       	ldd	r31, Y+1	; 0x01
    1b8a:	84 81       	ldd	r24, Z+4	; 0x04
    1b8c:	08 17       	cp	r16, r24
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b90:	65 c0       	rjmp	.+202    	; 0x1c5c <udc_process_setup+0x514>
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	80 2f       	mov	r24, r16
    1b96:	c9 dc       	rcall	.-1646   	; 0x152a <udc_update_iface_desc>
    1b98:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b9a:	c1 f0       	breq	.+48     	; 0x1bcc <udc_process_setup+0x484>
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	ff 27       	eor	r31, r31
    1ba0:	cf 01       	movw	r24, r30
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ba8:	fb 81       	ldd	r31, Y+3	; 0x03
    1baa:	e8 0f       	add	r30, r24
    1bac:	f9 1f       	adc	r31, r25
    1bae:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1bb0:	d1 81       	ldd	r29, Z+1	; 0x01
    1bb2:	ee 81       	ldd	r30, Y+6	; 0x06
    1bb4:	ff 81       	ldd	r31, Y+7	; 0x07
    1bb6:	19 95       	eicall
    1bb8:	68 2f       	mov	r22, r24
    1bba:	80 2f       	mov	r24, r16
    1bbc:	b6 dc       	rcall	.-1684   	; 0x152a <udc_update_iface_desc>
    1bbe:	88 23       	and	r24, r24
    1bc0:	29 f0       	breq	.+10     	; 0x1bcc <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1bc2:	ec 81       	ldd	r30, Y+4	; 0x04
    1bc4:	fd 81       	ldd	r31, Y+5	; 0x05
    1bc6:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1bc8:	81 11       	cpse	r24, r1
    1bca:	57 c0       	rjmp	.+174    	; 0x1c7a <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1bcc:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udd_g_ctrlreq>
    1bd0:	8f 71       	andi	r24, 0x1F	; 31
    1bd2:	82 30       	cpi	r24, 0x02	; 2
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <udc_process_setup+0x490>
    1bd6:	44 c0       	rjmp	.+136    	; 0x1c60 <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1bd8:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udc_num_configuration>
    1bdc:	88 23       	and	r24, r24
    1bde:	b1 f1       	breq	.+108    	; 0x1c4c <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1be0:	a0 91 f6 21 	lds	r26, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    1be4:	b0 91 f7 21 	lds	r27, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    1be8:	ed 91       	ld	r30, X+
    1bea:	fc 91       	ld	r31, X
    1bec:	11 97       	sbiw	r26, 0x01	; 1
    1bee:	84 81       	ldd	r24, Z+4	; 0x04
    1bf0:	88 23       	and	r24, r24
    1bf2:	71 f1       	breq	.+92     	; 0x1c50 <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bf4:	c0 e0       	ldi	r28, 0x00	; 0
    1bf6:	ec 2f       	mov	r30, r28
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	ee 0f       	add	r30, r30
    1bfc:	ff 1f       	adc	r31, r31
    1bfe:	12 96       	adiw	r26, 0x02	; 2
    1c00:	8d 91       	ld	r24, X+
    1c02:	9c 91       	ld	r25, X
    1c04:	13 97       	sbiw	r26, 0x03	; 3
    1c06:	e8 0f       	add	r30, r24
    1c08:	f9 1f       	adc	r31, r25
    1c0a:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c0c:	11 81       	ldd	r17, Z+1	; 0x01
    1c0e:	d8 01       	movw	r26, r16
    1c10:	16 96       	adiw	r26, 0x06	; 6
    1c12:	ed 91       	ld	r30, X+
    1c14:	fc 91       	ld	r31, X
    1c16:	17 97       	sbiw	r26, 0x07	; 7
    1c18:	19 95       	eicall
    1c1a:	68 2f       	mov	r22, r24
    1c1c:	8c 2f       	mov	r24, r28
    1c1e:	85 dc       	rcall	.-1782   	; 0x152a <udc_update_iface_desc>
    1c20:	88 23       	and	r24, r24
    1c22:	59 f1       	breq	.+86     	; 0x1c7a <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1c24:	d8 01       	movw	r26, r16
    1c26:	14 96       	adiw	r26, 0x04	; 4
    1c28:	ed 91       	ld	r30, X+
    1c2a:	fc 91       	ld	r31, X
    1c2c:	15 97       	sbiw	r26, 0x05	; 5
    1c2e:	19 95       	eicall
    1c30:	81 11       	cpse	r24, r1
    1c32:	23 c0       	rjmp	.+70     	; 0x1c7a <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c34:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c36:	a0 91 f6 21 	lds	r26, 0x21F6	; 0x8021f6 <udc_ptr_conf>
    1c3a:	b0 91 f7 21 	lds	r27, 0x21F7	; 0x8021f7 <udc_ptr_conf+0x1>
    1c3e:	ed 91       	ld	r30, X+
    1c40:	fc 91       	ld	r31, X
    1c42:	11 97       	sbiw	r26, 0x01	; 1
    1c44:	94 81       	ldd	r25, Z+4	; 0x04
    1c46:	c9 17       	cp	r28, r25
    1c48:	b0 f2       	brcs	.-84     	; 0x1bf6 <udc_process_setup+0x4ae>
    1c4a:	17 c0       	rjmp	.+46     	; 0x1c7a <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	15 c0       	rjmp	.+42     	; 0x1c7a <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	13 c0       	rjmp	.+38     	; 0x1c7a <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	11 c0       	rjmp	.+34     	; 0x1c7a <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <udc_process_setup+0x532>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	0d c0       	rjmp	.+26     	; 0x1c7a <udc_process_setup+0x532>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	0b c0       	rjmp	.+22     	; 0x1c7a <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1c64:	98 2f       	mov	r25, r24
    1c66:	90 76       	andi	r25, 0x60	; 96
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <udc_process_setup+0x524>
    1c6a:	7b cf       	rjmp	.-266    	; 0x1b62 <udc_process_setup+0x41a>
    1c6c:	80 ce       	rjmp	.-768    	; 0x196e <udc_process_setup+0x226>
    1c6e:	98 2f       	mov	r25, r24
    1c70:	90 76       	andi	r25, 0x60	; 96
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <udc_process_setup+0x52e>
    1c74:	76 cf       	rjmp	.-276    	; 0x1b62 <udc_process_setup+0x41a>
    1c76:	81 cd       	rjmp	.-1278   	; 0x177a <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	08 95       	ret

00001c84 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1c84:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1c88:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1c8a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1c8c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1c90:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1c92:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1c96:	08 95       	ret

00001c98 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1c98:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1c9a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1c9c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1c9e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1ca0:	60 83       	st	Z, r22
	ret                             // Return to caller
    1ca2:	08 95       	ret

00001ca4 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	1f 92       	push	r1
    1caa:	1f 92       	push	r1
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	81 11       	cpse	r24, r1
    1cb2:	26 c0       	rjmp	.+76     	; 0x1d00 <udd_sleep_mode+0x5c>
    1cb4:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_b_idle>
    1cb8:	99 23       	and	r25, r25
    1cba:	f9 f0       	breq	.+62     	; 0x1cfa <udd_sleep_mode+0x56>
    1cbc:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <sleepmgr_locks+0x1>
    1cc0:	91 11       	cpse	r25, r1
    1cc2:	01 c0       	rjmp	.+2      	; 0x1cc6 <udd_sleep_mode+0x22>
    1cc4:	ff cf       	rjmp	.-2      	; 0x1cc4 <udd_sleep_mode+0x20>
    1cc6:	9f b7       	in	r25, 0x3f	; 63
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	f8 94       	cli
    1ccc:	2a 81       	ldd	r18, Y+2	; 0x02
    1cce:	e3 ec       	ldi	r30, 0xC3	; 195
    1cd0:	f3 e2       	ldi	r31, 0x23	; 35
    1cd2:	91 81       	ldd	r25, Z+1	; 0x01
    1cd4:	91 50       	subi	r25, 0x01	; 1
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	2f bf       	out	0x3f, r18	; 63
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <udd_sleep_mode+0x56>
    1cdc:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <sleepmgr_locks+0x1>
    1ce0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <udd_sleep_mode+0x42>
    1ce4:	ff cf       	rjmp	.-2      	; 0x1ce4 <udd_sleep_mode+0x40>
    1ce6:	9f b7       	in	r25, 0x3f	; 63
    1ce8:	99 83       	std	Y+1, r25	; 0x01
    1cea:	f8 94       	cli
    1cec:	29 81       	ldd	r18, Y+1	; 0x01
    1cee:	e3 ec       	ldi	r30, 0xC3	; 195
    1cf0:	f3 e2       	ldi	r31, 0x23	; 35
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	9f 5f       	subi	r25, 0xFF	; 255
    1cf6:	91 83       	std	Z+1, r25	; 0x01
    1cf8:	2f bf       	out	0x3f, r18	; 63
    1cfa:	80 93 bc 23 	sts	0x23BC, r24	; 0x8023bc <udd_b_idle>
    1cfe:	05 c0       	rjmp	.+10     	; 0x1d0a <udd_sleep_mode+0x66>
    1d00:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_b_idle>
    1d04:	99 23       	and	r25, r25
    1d06:	51 f3       	breq	.-44     	; 0x1cdc <udd_sleep_mode+0x38>
    1d08:	f8 cf       	rjmp	.-16     	; 0x1cfa <udd_sleep_mode+0x56>
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <udd_ctrl_init>:
    1d14:	0f 93       	push	r16
    1d16:	e8 ec       	ldi	r30, 0xC8	; 200
    1d18:	f4 e0       	ldi	r31, 0x04	; 4
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8f 7d       	andi	r24, 0xDF	; 223
    1d1e:	80 83       	st	Z, r24
    1d20:	80 81       	ld	r24, Z
    1d22:	8f 7d       	andi	r24, 0xDF	; 223
    1d24:	80 83       	st	Z, r24
    1d26:	e0 e7       	ldi	r30, 0x70	; 112
    1d28:	f3 e2       	ldi	r31, 0x23	; 35
    1d2a:	02 e0       	ldi	r16, 0x02	; 2
    1d2c:	05 93       	las	Z, r16
    1d2e:	10 92 72 23 	sts	0x2372, r1	; 0x802372 <udd_sram+0x1e>
    1d32:	10 92 73 23 	sts	0x2373, r1	; 0x802373 <udd_sram+0x1f>
    1d36:	00 e2       	ldi	r16, 0x20	; 32
    1d38:	06 93       	lac	Z, r16
    1d3a:	00 e4       	ldi	r16, 0x40	; 64
    1d3c:	06 93       	lac	Z, r16
    1d3e:	e8 e6       	ldi	r30, 0x68	; 104
    1d40:	f3 e2       	ldi	r31, 0x23	; 35
    1d42:	00 e4       	ldi	r16, 0x40	; 64
    1d44:	06 93       	lac	Z, r16
    1d46:	e9 ec       	ldi	r30, 0xC9	; 201
    1d48:	f3 e2       	ldi	r31, 0x23	; 35
    1d4a:	14 86       	std	Z+12, r1	; 0x0c
    1d4c:	15 86       	std	Z+13, r1	; 0x0d
    1d4e:	16 86       	std	Z+14, r1	; 0x0e
    1d50:	17 86       	std	Z+15, r1	; 0x0f
    1d52:	12 86       	std	Z+10, r1	; 0x0a
    1d54:	13 86       	std	Z+11, r1	; 0x0b
    1d56:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <udd_ep_control_state>
    1d5a:	0f 91       	pop	r16
    1d5c:	08 95       	ret

00001d5e <udd_ctrl_stall_data>:
    1d5e:	0f 93       	push	r16
    1d60:	85 e0       	ldi	r24, 0x05	; 5
    1d62:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <udd_ep_control_state>
    1d66:	e1 e7       	ldi	r30, 0x71	; 113
    1d68:	f3 e2       	ldi	r31, 0x23	; 35
    1d6a:	04 e0       	ldi	r16, 0x04	; 4
    1d6c:	05 93       	las	Z, r16
    1d6e:	e9 e6       	ldi	r30, 0x69	; 105
    1d70:	f3 e2       	ldi	r31, 0x23	; 35
    1d72:	04 e0       	ldi	r16, 0x04	; 4
    1d74:	05 93       	las	Z, r16
    1d76:	0f 91       	pop	r16
    1d78:	08 95       	ret

00001d7a <udd_ctrl_send_zlp_in>:
    1d7a:	0f 93       	push	r16
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <udd_ep_control_state>
    1d82:	10 92 72 23 	sts	0x2372, r1	; 0x802372 <udd_sram+0x1e>
    1d86:	10 92 73 23 	sts	0x2373, r1	; 0x802373 <udd_sram+0x1f>
    1d8a:	e0 e7       	ldi	r30, 0x70	; 112
    1d8c:	f3 e2       	ldi	r31, 0x23	; 35
    1d8e:	02 e0       	ldi	r16, 0x02	; 2
    1d90:	06 93       	lac	Z, r16
    1d92:	0f 91       	pop	r16
    1d94:	08 95       	ret

00001d96 <udd_ctrl_endofrequest>:
    1d96:	e0 91 d5 23 	lds	r30, 0x23D5	; 0x8023d5 <udd_g_ctrlreq+0xc>
    1d9a:	f0 91 d6 23 	lds	r31, 0x23D6	; 0x8023d6 <udd_g_ctrlreq+0xd>
    1d9e:	30 97       	sbiw	r30, 0x00	; 0
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <udd_ctrl_endofrequest+0xe>
    1da2:	19 95       	eicall
    1da4:	08 95       	ret

00001da6 <udd_ctrl_in_sent>:
    1da6:	0f 93       	push	r16
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <udd_ep_control_state>
    1db0:	83 30       	cpi	r24, 0x03	; 3
    1db2:	19 f4       	brne	.+6      	; 0x1dba <udd_ctrl_in_sent+0x14>
    1db4:	f0 df       	rcall	.-32     	; 0x1d96 <udd_ctrl_endofrequest>
    1db6:	ae df       	rcall	.-164    	; 0x1d14 <udd_ctrl_init>
    1db8:	5e c0       	rjmp	.+188    	; 0x1e76 <udd_ctrl_in_sent+0xd0>
    1dba:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <udd_ctrl_payload_nb_trans>
    1dbe:	90 91 50 23 	lds	r25, 0x2350	; 0x802350 <udd_ctrl_payload_nb_trans+0x1>
    1dc2:	c0 91 d3 23 	lds	r28, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0xa>
    1dc6:	d0 91 d4 23 	lds	r29, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0xb>
    1dca:	c8 1b       	sub	r28, r24
    1dcc:	d9 0b       	sbc	r29, r25
    1dce:	71 f5       	brne	.+92     	; 0x1e2c <udd_ctrl_in_sent+0x86>
    1dd0:	20 91 51 23 	lds	r18, 0x2351	; 0x802351 <udd_ctrl_prev_payload_nb_trans>
    1dd4:	30 91 52 23 	lds	r19, 0x2352	; 0x802352 <udd_ctrl_prev_payload_nb_trans+0x1>
    1dd8:	82 0f       	add	r24, r18
    1dda:	93 1f       	adc	r25, r19
    1ddc:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <udd_ctrl_prev_payload_nb_trans>
    1de0:	90 93 52 23 	sts	0x2352, r25	; 0x802352 <udd_ctrl_prev_payload_nb_trans+0x1>
    1de4:	20 91 cf 23 	lds	r18, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    1de8:	30 91 d0 23 	lds	r19, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    1dec:	82 17       	cp	r24, r18
    1dee:	93 07       	cpc	r25, r19
    1df0:	21 f0       	breq	.+8      	; 0x1dfa <udd_ctrl_in_sent+0x54>
    1df2:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <b_shortpacket.5297>
    1df6:	88 23       	and	r24, r24
    1df8:	41 f0       	breq	.+16     	; 0x1e0a <udd_ctrl_in_sent+0x64>
    1dfa:	84 e0       	ldi	r24, 0x04	; 4
    1dfc:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <udd_ep_control_state>
    1e00:	e8 e6       	ldi	r30, 0x68	; 104
    1e02:	f3 e2       	ldi	r31, 0x23	; 35
    1e04:	02 e0       	ldi	r16, 0x02	; 2
    1e06:	06 93       	lac	Z, r16
    1e08:	36 c0       	rjmp	.+108    	; 0x1e76 <udd_ctrl_in_sent+0xd0>
    1e0a:	e0 91 d7 23 	lds	r30, 0x23D7	; 0x8023d7 <udd_g_ctrlreq+0xe>
    1e0e:	f0 91 d8 23 	lds	r31, 0x23D8	; 0x8023d8 <udd_g_ctrlreq+0xf>
    1e12:	30 97       	sbiw	r30, 0x00	; 0
    1e14:	99 f0       	breq	.+38     	; 0x1e3c <udd_ctrl_in_sent+0x96>
    1e16:	19 95       	eicall
    1e18:	88 23       	and	r24, r24
    1e1a:	81 f0       	breq	.+32     	; 0x1e3c <udd_ctrl_in_sent+0x96>
    1e1c:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <udd_ctrl_payload_nb_trans>
    1e20:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <udd_ctrl_payload_nb_trans+0x1>
    1e24:	c0 91 d3 23 	lds	r28, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0xa>
    1e28:	d0 91 d4 23 	lds	r29, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0xb>
    1e2c:	c8 30       	cpi	r28, 0x08	; 8
    1e2e:	d1 05       	cpc	r29, r1
    1e30:	28 f0       	brcs	.+10     	; 0x1e3c <udd_ctrl_in_sent+0x96>
    1e32:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <b_shortpacket.5297>
    1e36:	c8 e0       	ldi	r28, 0x08	; 8
    1e38:	d0 e0       	ldi	r29, 0x00	; 0
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <udd_ctrl_in_sent+0x9c>
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	80 93 fe 21 	sts	0x21FE, r24	; 0x8021fe <b_shortpacket.5297>
    1e42:	e4 e5       	ldi	r30, 0x54	; 84
    1e44:	f3 e2       	ldi	r31, 0x23	; 35
    1e46:	c6 8f       	std	Z+30, r28	; 0x1e
    1e48:	d7 8f       	std	Z+31, r29	; 0x1f
    1e4a:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <udd_ctrl_payload_nb_trans>
    1e4e:	90 91 50 23 	lds	r25, 0x2350	; 0x802350 <udd_ctrl_payload_nb_trans+0x1>
    1e52:	20 91 d1 23 	lds	r18, 0x23D1	; 0x8023d1 <udd_g_ctrlreq+0x8>
    1e56:	30 91 d2 23 	lds	r19, 0x23D2	; 0x8023d2 <udd_g_ctrlreq+0x9>
    1e5a:	28 0f       	add	r18, r24
    1e5c:	39 1f       	adc	r19, r25
    1e5e:	20 a3       	std	Z+32, r18	; 0x20
    1e60:	31 a3       	std	Z+33, r19	; 0x21
    1e62:	c8 0f       	add	r28, r24
    1e64:	d9 1f       	adc	r29, r25
    1e66:	c0 93 4f 23 	sts	0x234F, r28	; 0x80234f <udd_ctrl_payload_nb_trans>
    1e6a:	d0 93 50 23 	sts	0x2350, r29	; 0x802350 <udd_ctrl_payload_nb_trans+0x1>
    1e6e:	e0 e7       	ldi	r30, 0x70	; 112
    1e70:	f3 e2       	ldi	r31, 0x23	; 35
    1e72:	02 e0       	ldi	r16, 0x02	; 2
    1e74:	06 93       	lac	Z, r16
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	0f 91       	pop	r16
    1e7c:	08 95       	ret

00001e7e <udd_ep_get_size>:
    1e7e:	fc 01       	movw	r30, r24
    1e80:	81 81       	ldd	r24, Z+1	; 0x01
    1e82:	e8 2f       	mov	r30, r24
    1e84:	e7 70       	andi	r30, 0x07	; 7
    1e86:	8e 2f       	mov	r24, r30
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	31 97       	sbiw	r30, 0x01	; 1
    1e8e:	e7 30       	cpi	r30, 0x07	; 7
    1e90:	f1 05       	cpc	r31, r1
    1e92:	d0 f4       	brcc	.+52     	; 0x1ec8 <udd_ep_get_size+0x4a>
    1e94:	88 27       	eor	r24, r24
    1e96:	e9 5f       	subi	r30, 0xF9	; 249
    1e98:	fe 4f       	sbci	r31, 0xFE	; 254
    1e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9c:	26 c7       	rjmp	.+3660   	; 0x2cea <__tablejump2__>
    1e9e:	80 e1       	ldi	r24, 0x10	; 16
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	08 95       	ret
    1ea4:	80 e2       	ldi	r24, 0x20	; 32
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	08 95       	ret
    1eaa:	80 e4       	ldi	r24, 0x40	; 64
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	08 95       	ret
    1eb0:	80 e8       	ldi	r24, 0x80	; 128
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	08 95       	ret
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	91 e0       	ldi	r25, 0x01	; 1
    1eba:	08 95       	ret
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	92 e0       	ldi	r25, 0x02	; 2
    1ec0:	08 95       	ret
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	93 e0       	ldi	r25, 0x03	; 3
    1ec6:	08 95       	ret
    1ec8:	88 e0       	ldi	r24, 0x08	; 8
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	08 95       	ret

00001ece <udd_ep_get_job>:
    1ece:	28 2f       	mov	r18, r24
    1ed0:	2f 70       	andi	r18, 0x0F	; 15
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	22 0f       	add	r18, r18
    1ed6:	33 1f       	adc	r19, r19
    1ed8:	08 2e       	mov	r0, r24
    1eda:	00 0c       	add	r0, r0
    1edc:	99 0b       	sbc	r25, r25
    1ede:	88 27       	eor	r24, r24
    1ee0:	99 0f       	add	r25, r25
    1ee2:	88 1f       	adc	r24, r24
    1ee4:	99 27       	eor	r25, r25
    1ee6:	82 0f       	add	r24, r18
    1ee8:	93 1f       	adc	r25, r19
    1eea:	02 97       	sbiw	r24, 0x02	; 2
    1eec:	9c 01       	movw	r18, r24
    1eee:	22 0f       	add	r18, r18
    1ef0:	33 1f       	adc	r19, r19
    1ef2:	22 0f       	add	r18, r18
    1ef4:	33 1f       	adc	r19, r19
    1ef6:	22 0f       	add	r18, r18
    1ef8:	33 1f       	adc	r19, r19
    1efa:	82 0f       	add	r24, r18
    1efc:	93 1f       	adc	r25, r19
    1efe:	81 50       	subi	r24, 0x01	; 1
    1f00:	9d 4d       	sbci	r25, 0xDD	; 221
    1f02:	08 95       	ret

00001f04 <udd_ctrl_interrupt_tc_setup>:
    1f04:	0f 93       	push	r16
    1f06:	cf 93       	push	r28
    1f08:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1f0c:	80 ff       	sbrs	r24, 0
    1f0e:	64 c0       	rjmp	.+200    	; 0x1fd8 <udd_ctrl_interrupt_tc_setup+0xd4>
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1f16:	e8 e6       	ldi	r30, 0x68	; 104
    1f18:	f3 e2       	ldi	r31, 0x23	; 35
    1f1a:	00 e8       	ldi	r16, 0x80	; 128
    1f1c:	06 93       	lac	Z, r16
    1f1e:	e0 e7       	ldi	r30, 0x70	; 112
    1f20:	f3 e2       	ldi	r31, 0x23	; 35
    1f22:	00 e8       	ldi	r16, 0x80	; 128
    1f24:	06 93       	lac	Z, r16
    1f26:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1f2a:	e8 e6       	ldi	r30, 0x68	; 104
    1f2c:	f3 e2       	ldi	r31, 0x23	; 35
    1f2e:	00 e1       	ldi	r16, 0x10	; 16
    1f30:	06 93       	lac	Z, r16
    1f32:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <udd_ep_control_state>
    1f36:	88 23       	and	r24, r24
    1f38:	29 f0       	breq	.+10     	; 0x1f44 <udd_ctrl_interrupt_tc_setup+0x40>
    1f3a:	83 50       	subi	r24, 0x03	; 3
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	08 f4       	brcc	.+2      	; 0x1f42 <udd_ctrl_interrupt_tc_setup+0x3e>
    1f40:	2a df       	rcall	.-428    	; 0x1d96 <udd_ctrl_endofrequest>
    1f42:	e8 de       	rcall	.-560    	; 0x1d14 <udd_ctrl_init>
    1f44:	80 91 6a 23 	lds	r24, 0x236A	; 0x80236a <udd_sram+0x16>
    1f48:	90 91 6b 23 	lds	r25, 0x236B	; 0x80236b <udd_sram+0x17>
    1f4c:	08 97       	sbiw	r24, 0x08	; 8
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <udd_ctrl_interrupt_tc_setup+0x4e>
    1f50:	45 c0       	rjmp	.+138    	; 0x1fdc <udd_ctrl_interrupt_tc_setup+0xd8>
    1f52:	88 e0       	ldi	r24, 0x08	; 8
    1f54:	e7 e4       	ldi	r30, 0x47	; 71
    1f56:	f3 e2       	ldi	r31, 0x23	; 35
    1f58:	a9 ec       	ldi	r26, 0xC9	; 201
    1f5a:	b3 e2       	ldi	r27, 0x23	; 35
    1f5c:	01 90       	ld	r0, Z+
    1f5e:	0d 92       	st	X+, r0
    1f60:	8a 95       	dec	r24
    1f62:	e1 f7       	brne	.-8      	; 0x1f5c <udd_ctrl_interrupt_tc_setup+0x58>
    1f64:	e8 ec       	ldi	r30, 0xC8	; 200
    1f66:	f4 e0       	ldi	r31, 0x04	; 4
    1f68:	80 81       	ld	r24, Z
    1f6a:	80 62       	ori	r24, 0x20	; 32
    1f6c:	80 83       	st	Z, r24
    1f6e:	80 81       	ld	r24, Z
    1f70:	80 62       	ori	r24, 0x20	; 32
    1f72:	80 83       	st	Z, r24
    1f74:	e9 db       	rcall	.-2094   	; 0x1748 <udc_process_setup>
    1f76:	c8 2f       	mov	r28, r24
    1f78:	81 11       	cpse	r24, r1
    1f7a:	03 c0       	rjmp	.+6      	; 0x1f82 <udd_ctrl_interrupt_tc_setup+0x7e>
    1f7c:	f0 de       	rcall	.-544    	; 0x1d5e <udd_ctrl_stall_data>
    1f7e:	c1 e0       	ldi	r28, 0x01	; 1
    1f80:	2e c0       	rjmp	.+92     	; 0x1fde <udd_ctrl_interrupt_tc_setup+0xda>
    1f82:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udd_g_ctrlreq>
    1f86:	88 23       	and	r24, r24
    1f88:	6c f4       	brge	.+26     	; 0x1fa4 <udd_ctrl_interrupt_tc_setup+0xa0>
    1f8a:	10 92 51 23 	sts	0x2351, r1	; 0x802351 <udd_ctrl_prev_payload_nb_trans>
    1f8e:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f92:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <udd_ctrl_payload_nb_trans>
    1f96:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <udd_ctrl_payload_nb_trans+0x1>
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <udd_ep_control_state>
    1fa0:	02 df       	rcall	.-508    	; 0x1da6 <udd_ctrl_in_sent>
    1fa2:	1d c0       	rjmp	.+58     	; 0x1fde <udd_ctrl_interrupt_tc_setup+0xda>
    1fa4:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    1fa8:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    1fac:	89 2b       	or	r24, r25
    1fae:	11 f4       	brne	.+4      	; 0x1fb4 <udd_ctrl_interrupt_tc_setup+0xb0>
    1fb0:	e4 de       	rcall	.-568    	; 0x1d7a <udd_ctrl_send_zlp_in>
    1fb2:	15 c0       	rjmp	.+42     	; 0x1fde <udd_ctrl_interrupt_tc_setup+0xda>
    1fb4:	10 92 51 23 	sts	0x2351, r1	; 0x802351 <udd_ctrl_prev_payload_nb_trans>
    1fb8:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fbc:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <udd_ctrl_payload_nb_trans>
    1fc0:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <udd_ctrl_payload_nb_trans+0x1>
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <udd_ep_control_state>
    1fca:	e8 e6       	ldi	r30, 0x68	; 104
    1fcc:	f3 e2       	ldi	r31, 0x23	; 35
    1fce:	02 e0       	ldi	r16, 0x02	; 2
    1fd0:	06 93       	lac	Z, r16
    1fd2:	00 e2       	ldi	r16, 0x20	; 32
    1fd4:	06 93       	lac	Z, r16
    1fd6:	03 c0       	rjmp	.+6      	; 0x1fde <udd_ctrl_interrupt_tc_setup+0xda>
    1fd8:	c0 e0       	ldi	r28, 0x00	; 0
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <udd_ctrl_interrupt_tc_setup+0xda>
    1fdc:	c1 e0       	ldi	r28, 0x01	; 1
    1fde:	8c 2f       	mov	r24, r28
    1fe0:	cf 91       	pop	r28
    1fe2:	0f 91       	pop	r16
    1fe4:	08 95       	ret

00001fe6 <udd_ep_trans_complet>:
    1fe6:	8f 92       	push	r8
    1fe8:	9f 92       	push	r9
    1fea:	af 92       	push	r10
    1fec:	bf 92       	push	r11
    1fee:	df 92       	push	r13
    1ff0:	ef 92       	push	r14
    1ff2:	ff 92       	push	r15
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	d8 2e       	mov	r13, r24
    1ffe:	67 df       	rcall	.-306    	; 0x1ece <udd_ep_get_job>
    2000:	8c 01       	movw	r16, r24
    2002:	cd 2d       	mov	r28, r13
    2004:	cf 70       	andi	r28, 0x0F	; 15
    2006:	d0 e0       	ldi	r29, 0x00	; 0
    2008:	ce 01       	movw	r24, r28
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	cd 2d       	mov	r28, r13
    2010:	0d 2c       	mov	r0, r13
    2012:	00 0c       	add	r0, r0
    2014:	dd 0b       	sbc	r29, r29
    2016:	cc 27       	eor	r28, r28
    2018:	dd 0f       	add	r29, r29
    201a:	cc 1f       	adc	r28, r28
    201c:	dd 27       	eor	r29, r29
    201e:	c8 0f       	add	r28, r24
    2020:	d9 1f       	adc	r29, r25
    2022:	ce 01       	movw	r24, r28
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	9c 01       	movw	r18, r24
    2032:	28 59       	subi	r18, 0x98	; 152
    2034:	3c 4d       	sbci	r19, 0xDC	; 220
    2036:	79 01       	movw	r14, r18
    2038:	c9 01       	movw	r24, r18
    203a:	21 df       	rcall	.-446    	; 0x1e7e <udd_ep_get_size>
    203c:	4c 01       	movw	r8, r24
    203e:	dd 20       	and	r13, r13
    2040:	0c f0       	brlt	.+2      	; 0x2044 <udd_ep_trans_complet+0x5e>
    2042:	79 c0       	rjmp	.+242    	; 0x2136 <udd_ep_trans_complet+0x150>
    2044:	fe 01       	movw	r30, r28
    2046:	ee 0f       	add	r30, r30
    2048:	ff 1f       	adc	r31, r31
    204a:	ee 0f       	add	r30, r30
    204c:	ff 1f       	adc	r31, r31
    204e:	ee 0f       	add	r30, r30
    2050:	ff 1f       	adc	r31, r31
    2052:	ec 5a       	subi	r30, 0xAC	; 172
    2054:	fc 4d       	sbci	r31, 0xDC	; 220
    2056:	22 8d       	ldd	r18, Z+26	; 0x1a
    2058:	33 8d       	ldd	r19, Z+27	; 0x1b
    205a:	d8 01       	movw	r26, r16
    205c:	15 96       	adiw	r26, 0x05	; 5
    205e:	8d 91       	ld	r24, X+
    2060:	9c 91       	ld	r25, X
    2062:	16 97       	sbiw	r26, 0x06	; 6
    2064:	82 0f       	add	r24, r18
    2066:	93 1f       	adc	r25, r19
    2068:	15 96       	adiw	r26, 0x05	; 5
    206a:	8d 93       	st	X+, r24
    206c:	9c 93       	st	X, r25
    206e:	16 97       	sbiw	r26, 0x06	; 6
    2070:	13 96       	adiw	r26, 0x03	; 3
    2072:	2d 91       	ld	r18, X+
    2074:	3c 91       	ld	r19, X
    2076:	14 97       	sbiw	r26, 0x04	; 4
    2078:	82 17       	cp	r24, r18
    207a:	93 07       	cpc	r25, r19
    207c:	09 f4       	brne	.+2      	; 0x2080 <udd_ep_trans_complet+0x9a>
    207e:	45 c0       	rjmp	.+138    	; 0x210a <udd_ep_trans_complet+0x124>
    2080:	28 1b       	sub	r18, r24
    2082:	39 0b       	sbc	r19, r25
    2084:	21 15       	cp	r18, r1
    2086:	b4 e0       	ldi	r27, 0x04	; 4
    2088:	3b 07       	cpc	r19, r27
    208a:	38 f0       	brcs	.+14     	; 0x209a <udd_ep_trans_complet+0xb4>
    208c:	2f ef       	ldi	r18, 0xFF	; 255
    208e:	33 e0       	ldi	r19, 0x03	; 3
    2090:	c9 01       	movw	r24, r18
    2092:	b4 01       	movw	r22, r8
    2094:	16 d6       	rcall	.+3116   	; 0x2cc2 <__udivmodhi4>
    2096:	28 1b       	sub	r18, r24
    2098:	39 0b       	sbc	r19, r25
    209a:	f8 01       	movw	r30, r16
    209c:	80 81       	ld	r24, Z
    209e:	81 ff       	sbrs	r24, 1
    20a0:	09 c0       	rjmp	.+18     	; 0x20b4 <udd_ep_trans_complet+0xce>
    20a2:	c9 01       	movw	r24, r18
    20a4:	b4 01       	movw	r22, r8
    20a6:	0d d6       	rcall	.+3098   	; 0x2cc2 <__udivmodhi4>
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	89 2b       	or	r24, r25
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <udd_ep_trans_complet+0xca>
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	84 2f       	mov	r24, r20
    20b2:	01 c0       	rjmp	.+2      	; 0x20b6 <udd_ep_trans_complet+0xd0>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	d8 01       	movw	r26, r16
    20b8:	9c 91       	ld	r25, X
    20ba:	80 fb       	bst	r24, 0
    20bc:	91 f9       	bld	r25, 1
    20be:	9c 93       	st	X, r25
    20c0:	fe 01       	movw	r30, r28
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	ee 0f       	add	r30, r30
    20cc:	ff 1f       	adc	r31, r31
    20ce:	ec 5a       	subi	r30, 0xAC	; 172
    20d0:	fc 4d       	sbci	r31, 0xDC	; 220
    20d2:	12 8e       	std	Z+26, r1	; 0x1a
    20d4:	13 8e       	std	Z+27, r1	; 0x1b
    20d6:	26 8b       	std	Z+22, r18	; 0x16
    20d8:	37 8b       	std	Z+23, r19	; 0x17
    20da:	11 96       	adiw	r26, 0x01	; 1
    20dc:	2d 91       	ld	r18, X+
    20de:	3c 91       	ld	r19, X
    20e0:	12 97       	sbiw	r26, 0x02	; 2
    20e2:	15 96       	adiw	r26, 0x05	; 5
    20e4:	8d 91       	ld	r24, X+
    20e6:	9c 91       	ld	r25, X
    20e8:	16 97       	sbiw	r26, 0x06	; 6
    20ea:	82 0f       	add	r24, r18
    20ec:	93 1f       	adc	r25, r19
    20ee:	cc 0f       	add	r28, r28
    20f0:	dd 1f       	adc	r29, r29
    20f2:	cc 0f       	add	r28, r28
    20f4:	dd 1f       	adc	r29, r29
    20f6:	cc 0f       	add	r28, r28
    20f8:	dd 1f       	adc	r29, r29
    20fa:	c4 59       	subi	r28, 0x94	; 148
    20fc:	dc 4d       	sbci	r29, 0xDC	; 220
    20fe:	88 83       	st	Y, r24
    2100:	99 83       	std	Y+1, r25	; 0x01
    2102:	f7 01       	movw	r30, r14
    2104:	02 e0       	ldi	r16, 0x02	; 2
    2106:	06 93       	lac	Z, r16
    2108:	e0 c0       	rjmp	.+448    	; 0x22ca <udd_ep_trans_complet+0x2e4>
    210a:	d8 01       	movw	r26, r16
    210c:	8c 91       	ld	r24, X
    210e:	81 ff       	sbrs	r24, 1
    2110:	c9 c0       	rjmp	.+402    	; 0x22a4 <udd_ep_trans_complet+0x2be>
    2112:	8d 7f       	andi	r24, 0xFD	; 253
    2114:	8c 93       	st	X, r24
    2116:	cc 0f       	add	r28, r28
    2118:	dd 1f       	adc	r29, r29
    211a:	cc 0f       	add	r28, r28
    211c:	dd 1f       	adc	r29, r29
    211e:	cc 0f       	add	r28, r28
    2120:	dd 1f       	adc	r29, r29
    2122:	cc 5a       	subi	r28, 0xAC	; 172
    2124:	dc 4d       	sbci	r29, 0xDC	; 220
    2126:	1a 8e       	std	Y+26, r1	; 0x1a
    2128:	1b 8e       	std	Y+27, r1	; 0x1b
    212a:	1e 8a       	std	Y+22, r1	; 0x16
    212c:	1f 8a       	std	Y+23, r1	; 0x17
    212e:	f7 01       	movw	r30, r14
    2130:	02 e0       	ldi	r16, 0x02	; 2
    2132:	06 93       	lac	Z, r16
    2134:	ca c0       	rjmp	.+404    	; 0x22ca <udd_ep_trans_complet+0x2e4>
    2136:	fe 01       	movw	r30, r28
    2138:	ee 0f       	add	r30, r30
    213a:	ff 1f       	adc	r31, r31
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	ee 0f       	add	r30, r30
    2142:	ff 1f       	adc	r31, r31
    2144:	ec 5a       	subi	r30, 0xAC	; 172
    2146:	fc 4d       	sbci	r31, 0xDC	; 220
    2148:	a6 88       	ldd	r10, Z+22	; 0x16
    214a:	b7 88       	ldd	r11, Z+23	; 0x17
    214c:	d8 01       	movw	r26, r16
    214e:	8c 91       	ld	r24, X
    2150:	82 ff       	sbrs	r24, 2
    2152:	19 c0       	rjmp	.+50     	; 0x2186 <udd_ep_trans_complet+0x1a0>
    2154:	11 96       	adiw	r26, 0x01	; 1
    2156:	ed 91       	ld	r30, X+
    2158:	fc 91       	ld	r31, X
    215a:	12 97       	sbiw	r26, 0x02	; 2
    215c:	15 96       	adiw	r26, 0x05	; 5
    215e:	2d 91       	ld	r18, X+
    2160:	3c 91       	ld	r19, X
    2162:	16 97       	sbiw	r26, 0x06	; 6
    2164:	13 96       	adiw	r26, 0x03	; 3
    2166:	8d 91       	ld	r24, X+
    2168:	9c 91       	ld	r25, X
    216a:	14 97       	sbiw	r26, 0x04	; 4
    216c:	b4 01       	movw	r22, r8
    216e:	a9 d5       	rcall	.+2898   	; 0x2cc2 <__udivmodhi4>
    2170:	b0 e4       	ldi	r27, 0x40	; 64
    2172:	db 9e       	mul	r13, r27
    2174:	b0 01       	movw	r22, r0
    2176:	11 24       	eor	r1, r1
    2178:	61 54       	subi	r22, 0x41	; 65
    217a:	7e 4d       	sbci	r23, 0xDE	; 222
    217c:	ac 01       	movw	r20, r24
    217e:	cf 01       	movw	r24, r30
    2180:	82 0f       	add	r24, r18
    2182:	93 1f       	adc	r25, r19
    2184:	ba d5       	rcall	.+2932   	; 0x2cfa <memcpy>
    2186:	f8 01       	movw	r30, r16
    2188:	25 81       	ldd	r18, Z+5	; 0x05
    218a:	36 81       	ldd	r19, Z+6	; 0x06
    218c:	2a 0d       	add	r18, r10
    218e:	3b 1d       	adc	r19, r11
    2190:	25 83       	std	Z+5, r18	; 0x05
    2192:	36 83       	std	Z+6, r19	; 0x06
    2194:	83 81       	ldd	r24, Z+3	; 0x03
    2196:	94 81       	ldd	r25, Z+4	; 0x04
    2198:	82 17       	cp	r24, r18
    219a:	93 07       	cpc	r25, r19
    219c:	68 f4       	brcc	.+26     	; 0x21b8 <udd_ep_trans_complet+0x1d2>
    219e:	85 83       	std	Z+5, r24	; 0x05
    21a0:	96 83       	std	Z+6, r25	; 0x06
    21a2:	cc 0f       	add	r28, r28
    21a4:	dd 1f       	adc	r29, r29
    21a6:	cc 0f       	add	r28, r28
    21a8:	dd 1f       	adc	r29, r29
    21aa:	cc 0f       	add	r28, r28
    21ac:	dd 1f       	adc	r29, r29
    21ae:	cc 5a       	subi	r28, 0xAC	; 172
    21b0:	dc 4d       	sbci	r29, 0xDC	; 220
    21b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21b6:	76 c0       	rjmp	.+236    	; 0x22a4 <udd_ep_trans_complet+0x2be>
    21b8:	fe 01       	movw	r30, r28
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	ee 0f       	add	r30, r30
    21c0:	ff 1f       	adc	r31, r31
    21c2:	ee 0f       	add	r30, r30
    21c4:	ff 1f       	adc	r31, r31
    21c6:	ec 5a       	subi	r30, 0xAC	; 172
    21c8:	fc 4d       	sbci	r31, 0xDC	; 220
    21ca:	42 8d       	ldd	r20, Z+26	; 0x1a
    21cc:	53 8d       	ldd	r21, Z+27	; 0x1b
    21ce:	a4 16       	cp	r10, r20
    21d0:	b5 06       	cpc	r11, r21
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <udd_ep_trans_complet+0x1f0>
    21d4:	67 c0       	rjmp	.+206    	; 0x22a4 <udd_ep_trans_complet+0x2be>
    21d6:	28 17       	cp	r18, r24
    21d8:	39 07       	cpc	r19, r25
    21da:	09 f4       	brne	.+2      	; 0x21de <udd_ep_trans_complet+0x1f8>
    21dc:	63 c0       	rjmp	.+198    	; 0x22a4 <udd_ep_trans_complet+0x2be>
    21de:	ac 01       	movw	r20, r24
    21e0:	42 1b       	sub	r20, r18
    21e2:	53 0b       	sbc	r21, r19
    21e4:	9a 01       	movw	r18, r20
    21e6:	21 15       	cp	r18, r1
    21e8:	54 e0       	ldi	r21, 0x04	; 4
    21ea:	35 07       	cpc	r19, r21
    21ec:	40 f0       	brcs	.+16     	; 0x21fe <udd_ep_trans_complet+0x218>
    21ee:	2f ef       	ldi	r18, 0xFF	; 255
    21f0:	33 e0       	ldi	r19, 0x03	; 3
    21f2:	c9 01       	movw	r24, r18
    21f4:	b4 01       	movw	r22, r8
    21f6:	65 d5       	rcall	.+2762   	; 0x2cc2 <__udivmodhi4>
    21f8:	28 1b       	sub	r18, r24
    21fa:	39 0b       	sbc	r19, r25
    21fc:	05 c0       	rjmp	.+10     	; 0x2208 <udd_ep_trans_complet+0x222>
    21fe:	c9 01       	movw	r24, r18
    2200:	b4 01       	movw	r22, r8
    2202:	5f d5       	rcall	.+2750   	; 0x2cc2 <__udivmodhi4>
    2204:	28 1b       	sub	r18, r24
    2206:	39 0b       	sbc	r19, r25
    2208:	fe 01       	movw	r30, r28
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	ee 0f       	add	r30, r30
    2210:	ff 1f       	adc	r31, r31
    2212:	ee 0f       	add	r30, r30
    2214:	ff 1f       	adc	r31, r31
    2216:	ec 5a       	subi	r30, 0xAC	; 172
    2218:	fc 4d       	sbci	r31, 0xDC	; 220
    221a:	16 8a       	std	Z+22, r1	; 0x16
    221c:	17 8a       	std	Z+23, r1	; 0x17
    221e:	28 15       	cp	r18, r8
    2220:	39 05       	cpc	r19, r9
    2222:	00 f5       	brcc	.+64     	; 0x2264 <udd_ep_trans_complet+0x27e>
    2224:	d8 01       	movw	r26, r16
    2226:	8c 91       	ld	r24, X
    2228:	84 60       	ori	r24, 0x04	; 4
    222a:	8c 93       	st	X, r24
    222c:	b0 e4       	ldi	r27, 0x40	; 64
    222e:	db 9e       	mul	r13, r27
    2230:	c0 01       	movw	r24, r0
    2232:	11 24       	eor	r1, r1
    2234:	81 54       	subi	r24, 0x41	; 65
    2236:	9e 4d       	sbci	r25, 0xDE	; 222
    2238:	fe 01       	movw	r30, r28
    223a:	ee 0f       	add	r30, r30
    223c:	ff 1f       	adc	r31, r31
    223e:	ee 0f       	add	r30, r30
    2240:	ff 1f       	adc	r31, r31
    2242:	ee 0f       	add	r30, r30
    2244:	ff 1f       	adc	r31, r31
    2246:	e4 59       	subi	r30, 0x94	; 148
    2248:	fc 4d       	sbci	r31, 0xDC	; 220
    224a:	80 83       	st	Z, r24
    224c:	91 83       	std	Z+1, r25	; 0x01
    224e:	cc 0f       	add	r28, r28
    2250:	dd 1f       	adc	r29, r29
    2252:	cc 0f       	add	r28, r28
    2254:	dd 1f       	adc	r29, r29
    2256:	cc 0f       	add	r28, r28
    2258:	dd 1f       	adc	r29, r29
    225a:	cc 5a       	subi	r28, 0xAC	; 172
    225c:	dc 4d       	sbci	r29, 0xDC	; 220
    225e:	8a 8e       	std	Y+26, r8	; 0x1a
    2260:	9b 8e       	std	Y+27, r9	; 0x1b
    2262:	1c c0       	rjmp	.+56     	; 0x229c <udd_ep_trans_complet+0x2b6>
    2264:	f8 01       	movw	r30, r16
    2266:	41 81       	ldd	r20, Z+1	; 0x01
    2268:	52 81       	ldd	r21, Z+2	; 0x02
    226a:	85 81       	ldd	r24, Z+5	; 0x05
    226c:	96 81       	ldd	r25, Z+6	; 0x06
    226e:	84 0f       	add	r24, r20
    2270:	95 1f       	adc	r25, r21
    2272:	fe 01       	movw	r30, r28
    2274:	ee 0f       	add	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	ee 0f       	add	r30, r30
    227a:	ff 1f       	adc	r31, r31
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	e4 59       	subi	r30, 0x94	; 148
    2282:	fc 4d       	sbci	r31, 0xDC	; 220
    2284:	80 83       	st	Z, r24
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	cc 0f       	add	r28, r28
    228a:	dd 1f       	adc	r29, r29
    228c:	cc 0f       	add	r28, r28
    228e:	dd 1f       	adc	r29, r29
    2290:	cc 0f       	add	r28, r28
    2292:	dd 1f       	adc	r29, r29
    2294:	cc 5a       	subi	r28, 0xAC	; 172
    2296:	dc 4d       	sbci	r29, 0xDC	; 220
    2298:	2a 8f       	std	Y+26, r18	; 0x1a
    229a:	3b 8f       	std	Y+27, r19	; 0x1b
    229c:	f7 01       	movw	r30, r14
    229e:	02 e0       	ldi	r16, 0x02	; 2
    22a0:	06 93       	lac	Z, r16
    22a2:	13 c0       	rjmp	.+38     	; 0x22ca <udd_ep_trans_complet+0x2e4>
    22a4:	d8 01       	movw	r26, r16
    22a6:	8c 91       	ld	r24, X
    22a8:	80 ff       	sbrs	r24, 0
    22aa:	0f c0       	rjmp	.+30     	; 0x22ca <udd_ep_trans_complet+0x2e4>
    22ac:	8e 7f       	andi	r24, 0xFE	; 254
    22ae:	8c 93       	st	X, r24
    22b0:	17 96       	adiw	r26, 0x07	; 7
    22b2:	ed 91       	ld	r30, X+
    22b4:	fc 91       	ld	r31, X
    22b6:	18 97       	sbiw	r26, 0x08	; 8
    22b8:	30 97       	sbiw	r30, 0x00	; 0
    22ba:	39 f0       	breq	.+14     	; 0x22ca <udd_ep_trans_complet+0x2e4>
    22bc:	15 96       	adiw	r26, 0x05	; 5
    22be:	6d 91       	ld	r22, X+
    22c0:	7c 91       	ld	r23, X
    22c2:	16 97       	sbiw	r26, 0x06	; 6
    22c4:	4d 2d       	mov	r20, r13
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	19 95       	eicall
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	ff 90       	pop	r15
    22d4:	ef 90       	pop	r14
    22d6:	df 90       	pop	r13
    22d8:	bf 90       	pop	r11
    22da:	af 90       	pop	r10
    22dc:	9f 90       	pop	r9
    22de:	8f 90       	pop	r8
    22e0:	08 95       	ret

000022e2 <udd_attach>:
    22e2:	1f 93       	push	r17
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
    22e8:	1f 92       	push	r1
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	8f b7       	in	r24, 0x3f	; 63
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	f8 94       	cli
    22f4:	19 81       	ldd	r17, Y+1	; 0x01
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	d5 dc       	rcall	.-1622   	; 0x1ca4 <udd_sleep_mode>
    22fa:	ea ec       	ldi	r30, 0xCA	; 202
    22fc:	f4 e0       	ldi	r31, 0x04	; 4
    22fe:	80 e4       	ldi	r24, 0x40	; 64
    2300:	80 83       	st	Z, r24
    2302:	80 e2       	ldi	r24, 0x20	; 32
    2304:	80 83       	st	Z, r24
    2306:	e1 ec       	ldi	r30, 0xC1	; 193
    2308:	f4 e0       	ldi	r31, 0x04	; 4
    230a:	80 81       	ld	r24, Z
    230c:	81 60       	ori	r24, 0x01	; 1
    230e:	80 83       	st	Z, r24
    2310:	a9 ec       	ldi	r26, 0xC9	; 201
    2312:	b4 e0       	ldi	r27, 0x04	; 4
    2314:	8c 91       	ld	r24, X
    2316:	82 60       	ori	r24, 0x02	; 2
    2318:	8c 93       	st	X, r24
    231a:	e8 ec       	ldi	r30, 0xC8	; 200
    231c:	f4 e0       	ldi	r31, 0x04	; 4
    231e:	80 81       	ld	r24, Z
    2320:	80 64       	ori	r24, 0x40	; 64
    2322:	80 83       	st	Z, r24
    2324:	8c 91       	ld	r24, X
    2326:	81 60       	ori	r24, 0x01	; 1
    2328:	8c 93       	st	X, r24
    232a:	80 81       	ld	r24, Z
    232c:	80 68       	ori	r24, 0x80	; 128
    232e:	80 83       	st	Z, r24
    2330:	1f bf       	out	0x3f, r17	; 63
    2332:	0f 90       	pop	r0
    2334:	df 91       	pop	r29
    2336:	cf 91       	pop	r28
    2338:	1f 91       	pop	r17
    233a:	08 95       	ret

0000233c <udd_enable>:
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	1f 92       	push	r1
    2346:	1f 92       	push	r1
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	00 e6       	ldi	r16, 0x60	; 96
    234e:	10 e0       	ldi	r17, 0x00	; 0
    2350:	f8 01       	movw	r30, r16
    2352:	10 82       	st	Z, r1
    2354:	80 e3       	ldi	r24, 0x30	; 48
    2356:	0e 94 43 08 	call	0x1086	; 0x1086 <sysclk_enable_usb>
    235a:	e0 ec       	ldi	r30, 0xC0	; 192
    235c:	f4 e0       	ldi	r31, 0x04	; 4
    235e:	80 81       	ld	r24, Z
    2360:	80 64       	ori	r24, 0x40	; 64
    2362:	80 83       	st	Z, r24
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	f8 01       	movw	r30, r16
    2368:	80 83       	st	Z, r24
    236a:	8f b7       	in	r24, 0x3f	; 63
    236c:	8a 83       	std	Y+2, r24	; 0x02
    236e:	f8 94       	cli
    2370:	1a 81       	ldd	r17, Y+2	; 0x02
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	fc 01       	movw	r30, r24
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	ee 0f       	add	r30, r30
    237e:	ff 1f       	adc	r31, r31
    2380:	ee 0f       	add	r30, r30
    2382:	ff 1f       	adc	r31, r31
    2384:	ec 5a       	subi	r30, 0xAC	; 172
    2386:	fc 4d       	sbci	r31, 0xDC	; 220
    2388:	15 8a       	std	Z+21, r1	; 0x15
    238a:	01 96       	adiw	r24, 0x01	; 1
    238c:	8a 30       	cpi	r24, 0x0A	; 10
    238e:	91 05       	cpc	r25, r1
    2390:	91 f7       	brne	.-28     	; 0x2376 <udd_enable+0x3a>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	fc 01       	movw	r30, r24
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	ee 0f       	add	r30, r30
    239e:	ff 1f       	adc	r31, r31
    23a0:	ee 0f       	add	r30, r30
    23a2:	ff 1f       	adc	r31, r31
    23a4:	e8 0f       	add	r30, r24
    23a6:	f9 1f       	adc	r31, r25
    23a8:	e1 50       	subi	r30, 0x01	; 1
    23aa:	fd 4d       	sbci	r31, 0xDD	; 221
    23ac:	20 81       	ld	r18, Z
    23ae:	2e 7f       	andi	r18, 0xFE	; 254
    23b0:	20 83       	st	Z, r18
    23b2:	01 96       	adiw	r24, 0x01	; 1
    23b4:	88 30       	cpi	r24, 0x08	; 8
    23b6:	91 05       	cpc	r25, r1
    23b8:	71 f7       	brne	.-36     	; 0x2396 <udd_enable+0x5a>
    23ba:	6a e1       	ldi	r22, 0x1A	; 26
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	61 dc       	rcall	.-1854   	; 0x1c84 <nvm_read_byte>
    23c2:	8f 3f       	cpi	r24, 0xFF	; 255
    23c4:	19 f0       	breq	.+6      	; 0x23cc <udd_enable+0x90>
    23c6:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    23ca:	03 c0       	rjmp	.+6      	; 0x23d2 <udd_enable+0x96>
    23cc:	8f e1       	ldi	r24, 0x1F	; 31
    23ce:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    23d2:	6b e1       	ldi	r22, 0x1B	; 27
    23d4:	70 e0       	ldi	r23, 0x00	; 0
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	55 dc       	rcall	.-1878   	; 0x1c84 <nvm_read_byte>
    23da:	8f 3f       	cpi	r24, 0xFF	; 255
    23dc:	19 f0       	breq	.+6      	; 0x23e4 <udd_enable+0xa8>
    23de:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    23e2:	03 c0       	rjmp	.+6      	; 0x23ea <udd_enable+0xae>
    23e4:	8f e1       	ldi	r24, 0x1F	; 31
    23e6:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    23ea:	e0 ec       	ldi	r30, 0xC0	; 192
    23ec:	f4 e0       	ldi	r31, 0x04	; 4
    23ee:	80 81       	ld	r24, Z
    23f0:	84 60       	ori	r24, 0x04	; 4
    23f2:	80 83       	st	Z, r24
    23f4:	80 81       	ld	r24, Z
    23f6:	80 68       	ori	r24, 0x80	; 128
    23f8:	80 83       	st	Z, r24
    23fa:	80 81       	ld	r24, Z
    23fc:	80 61       	ori	r24, 0x10	; 16
    23fe:	80 83       	st	Z, r24
    2400:	88 e6       	ldi	r24, 0x68	; 104
    2402:	93 e2       	ldi	r25, 0x23	; 35
    2404:	86 83       	std	Z+6, r24	; 0x06
    2406:	97 83       	std	Z+7, r25	; 0x07
    2408:	80 81       	ld	r24, Z
    240a:	80 62       	ori	r24, 0x20	; 32
    240c:	80 83       	st	Z, r24
    240e:	8f ef       	ldi	r24, 0xFF	; 255
    2410:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    2414:	e8 ec       	ldi	r30, 0xC8	; 200
    2416:	f4 e0       	ldi	r31, 0x04	; 4
    2418:	80 81       	ld	r24, Z
    241a:	81 60       	ori	r24, 0x01	; 1
    241c:	80 83       	st	Z, r24
    241e:	10 92 bc 23 	sts	0x23BC, r1	; 0x8023bc <udd_b_idle>
    2422:	80 91 c8 23 	lds	r24, 0x23C8	; 0x8023c8 <sleepmgr_locks+0x5>
    2426:	8f 3f       	cpi	r24, 0xFF	; 255
    2428:	09 f4       	brne	.+2      	; 0x242c <udd_enable+0xf0>
    242a:	ff cf       	rjmp	.-2      	; 0x242a <udd_enable+0xee>
    242c:	8f b7       	in	r24, 0x3f	; 63
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	f8 94       	cli
    2432:	99 81       	ldd	r25, Y+1	; 0x01
    2434:	e3 ec       	ldi	r30, 0xC3	; 195
    2436:	f3 e2       	ldi	r31, 0x23	; 35
    2438:	85 81       	ldd	r24, Z+5	; 0x05
    243a:	8f 5f       	subi	r24, 0xFF	; 255
    243c:	85 83       	std	Z+5, r24	; 0x05
    243e:	9f bf       	out	0x3f, r25	; 63
    2440:	50 df       	rcall	.-352    	; 0x22e2 <udd_attach>
    2442:	1f bf       	out	0x3f, r17	; 63
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	08 95       	ret

00002452 <udd_set_address>:
    2452:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2456:	08 95       	ret

00002458 <udd_getaddress>:
    2458:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    245c:	08 95       	ret

0000245e <udd_set_setup_payload>:
    245e:	e9 ec       	ldi	r30, 0xC9	; 201
    2460:	f3 e2       	ldi	r31, 0x23	; 35
    2462:	80 87       	std	Z+8, r24	; 0x08
    2464:	91 87       	std	Z+9, r25	; 0x09
    2466:	62 87       	std	Z+10, r22	; 0x0a
    2468:	73 87       	std	Z+11, r23	; 0x0b
    246a:	08 95       	ret

0000246c <udd_ep_alloc>:
    246c:	28 2f       	mov	r18, r24
    246e:	2f 70       	andi	r18, 0x0F	; 15
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	22 0f       	add	r18, r18
    2474:	33 1f       	adc	r19, r19
    2476:	08 2e       	mov	r0, r24
    2478:	00 0c       	add	r0, r0
    247a:	99 0b       	sbc	r25, r25
    247c:	88 27       	eor	r24, r24
    247e:	99 0f       	add	r25, r25
    2480:	88 1f       	adc	r24, r24
    2482:	99 27       	eor	r25, r25
    2484:	82 0f       	add	r24, r18
    2486:	93 1f       	adc	r25, r19
    2488:	fc 01       	movw	r30, r24
    248a:	ee 0f       	add	r30, r30
    248c:	ff 1f       	adc	r31, r31
    248e:	ee 0f       	add	r30, r30
    2490:	ff 1f       	adc	r31, r31
    2492:	ee 0f       	add	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	ec 5a       	subi	r30, 0xAC	; 172
    2498:	fc 4d       	sbci	r31, 0xDC	; 220
    249a:	25 89       	ldd	r18, Z+21	; 0x15
    249c:	20 7c       	andi	r18, 0xC0	; 192
    249e:	09 f0       	breq	.+2      	; 0x24a2 <udd_ep_alloc+0x36>
    24a0:	69 c0       	rjmp	.+210    	; 0x2574 <udd_ep_alloc+0x108>
    24a2:	63 70       	andi	r22, 0x03	; 3
    24a4:	61 30       	cpi	r22, 0x01	; 1
    24a6:	11 f0       	breq	.+4      	; 0x24ac <udd_ep_alloc+0x40>
    24a8:	18 f4       	brcc	.+6      	; 0x24b0 <udd_ep_alloc+0x44>
    24aa:	04 c0       	rjmp	.+8      	; 0x24b4 <udd_ep_alloc+0x48>
    24ac:	60 ec       	ldi	r22, 0xC0	; 192
    24ae:	03 c0       	rjmp	.+6      	; 0x24b6 <udd_ep_alloc+0x4a>
    24b0:	60 e8       	ldi	r22, 0x80	; 128
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <udd_ep_alloc+0x4a>
    24b4:	60 e4       	ldi	r22, 0x40	; 64
    24b6:	40 38       	cpi	r20, 0x80	; 128
    24b8:	51 05       	cpc	r21, r1
    24ba:	e9 f0       	breq	.+58     	; 0x24f6 <udd_ep_alloc+0x8a>
    24bc:	50 f4       	brcc	.+20     	; 0x24d2 <udd_ep_alloc+0x66>
    24be:	40 32       	cpi	r20, 0x20	; 32
    24c0:	51 05       	cpc	r21, r1
    24c2:	a9 f0       	breq	.+42     	; 0x24ee <udd_ep_alloc+0x82>
    24c4:	40 34       	cpi	r20, 0x40	; 64
    24c6:	51 05       	cpc	r21, r1
    24c8:	a1 f0       	breq	.+40     	; 0x24f2 <udd_ep_alloc+0x86>
    24ca:	40 31       	cpi	r20, 0x10	; 16
    24cc:	51 05       	cpc	r21, r1
    24ce:	d9 f4       	brne	.+54     	; 0x2506 <udd_ep_alloc+0x9a>
    24d0:	0c c0       	rjmp	.+24     	; 0x24ea <udd_ep_alloc+0x7e>
    24d2:	41 15       	cp	r20, r1
    24d4:	22 e0       	ldi	r18, 0x02	; 2
    24d6:	52 07       	cpc	r21, r18
    24d8:	91 f0       	breq	.+36     	; 0x24fe <udd_ep_alloc+0x92>
    24da:	4f 3f       	cpi	r20, 0xFF	; 255
    24dc:	23 e0       	ldi	r18, 0x03	; 3
    24de:	52 07       	cpc	r21, r18
    24e0:	81 f0       	breq	.+32     	; 0x2502 <udd_ep_alloc+0x96>
    24e2:	41 15       	cp	r20, r1
    24e4:	51 40       	sbci	r21, 0x01	; 1
    24e6:	79 f4       	brne	.+30     	; 0x2506 <udd_ep_alloc+0x9a>
    24e8:	08 c0       	rjmp	.+16     	; 0x24fa <udd_ep_alloc+0x8e>
    24ea:	21 e0       	ldi	r18, 0x01	; 1
    24ec:	0d c0       	rjmp	.+26     	; 0x2508 <udd_ep_alloc+0x9c>
    24ee:	22 e0       	ldi	r18, 0x02	; 2
    24f0:	0b c0       	rjmp	.+22     	; 0x2508 <udd_ep_alloc+0x9c>
    24f2:	23 e0       	ldi	r18, 0x03	; 3
    24f4:	09 c0       	rjmp	.+18     	; 0x2508 <udd_ep_alloc+0x9c>
    24f6:	24 e0       	ldi	r18, 0x04	; 4
    24f8:	07 c0       	rjmp	.+14     	; 0x2508 <udd_ep_alloc+0x9c>
    24fa:	25 e0       	ldi	r18, 0x05	; 5
    24fc:	05 c0       	rjmp	.+10     	; 0x2508 <udd_ep_alloc+0x9c>
    24fe:	26 e0       	ldi	r18, 0x06	; 6
    2500:	03 c0       	rjmp	.+6      	; 0x2508 <udd_ep_alloc+0x9c>
    2502:	27 e0       	ldi	r18, 0x07	; 7
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <udd_ep_alloc+0x9c>
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	fc 01       	movw	r30, r24
    250a:	ee 0f       	add	r30, r30
    250c:	ff 1f       	adc	r31, r31
    250e:	ee 0f       	add	r30, r30
    2510:	ff 1f       	adc	r31, r31
    2512:	ee 0f       	add	r30, r30
    2514:	ff 1f       	adc	r31, r31
    2516:	ec 5a       	subi	r30, 0xAC	; 172
    2518:	fc 4d       	sbci	r31, 0xDC	; 220
    251a:	15 8a       	std	Z+21, r1	; 0x15
    251c:	36 e0       	ldi	r19, 0x06	; 6
    251e:	34 8b       	std	Z+20, r19	; 0x14
    2520:	26 2b       	or	r18, r22
    2522:	25 8b       	std	Z+21, r18	; 0x15
    2524:	fc 01       	movw	r30, r24
    2526:	ee 0f       	add	r30, r30
    2528:	ff 1f       	adc	r31, r31
    252a:	ee 0f       	add	r30, r30
    252c:	ff 1f       	adc	r31, r31
    252e:	ee 0f       	add	r30, r30
    2530:	ff 1f       	adc	r31, r31
    2532:	ec 5a       	subi	r30, 0xAC	; 172
    2534:	fc 4d       	sbci	r31, 0xDC	; 220
    2536:	25 89       	ldd	r18, Z+21	; 0x15
    2538:	20 7c       	andi	r18, 0xC0	; 192
    253a:	20 3c       	cpi	r18, 0xC0	; 192
    253c:	69 f4       	brne	.+26     	; 0x2558 <udd_ep_alloc+0xec>
    253e:	fc 01       	movw	r30, r24
    2540:	ee 0f       	add	r30, r30
    2542:	ff 1f       	adc	r31, r31
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	ee 0f       	add	r30, r30
    254a:	ff 1f       	adc	r31, r31
    254c:	ec 5a       	subi	r30, 0xAC	; 172
    254e:	fc 4d       	sbci	r31, 0xDC	; 220
    2550:	25 89       	ldd	r18, Z+21	; 0x15
    2552:	27 70       	andi	r18, 0x07	; 7
    2554:	27 30       	cpi	r18, 0x07	; 7
    2556:	81 f0       	breq	.+32     	; 0x2578 <udd_ep_alloc+0x10c>
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	fc 01       	movw	r30, r24
    2566:	ec 5a       	subi	r30, 0xAC	; 172
    2568:	fc 4d       	sbci	r31, 0xDC	; 220
    256a:	85 89       	ldd	r24, Z+21	; 0x15
    256c:	80 62       	ori	r24, 0x20	; 32
    256e:	85 8b       	std	Z+21, r24	; 0x15
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	08 95       	ret
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	08 95       	ret
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	08 95       	ret

0000257c <udd_ep_is_halted>:
    257c:	e8 2f       	mov	r30, r24
    257e:	ef 70       	andi	r30, 0x0F	; 15
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	ee 0f       	add	r30, r30
    2584:	ff 1f       	adc	r31, r31
    2586:	08 2e       	mov	r0, r24
    2588:	00 0c       	add	r0, r0
    258a:	99 0b       	sbc	r25, r25
    258c:	88 27       	eor	r24, r24
    258e:	99 0f       	add	r25, r25
    2590:	88 1f       	adc	r24, r24
    2592:	99 27       	eor	r25, r25
    2594:	e8 0f       	add	r30, r24
    2596:	f9 1f       	adc	r31, r25
    2598:	ee 0f       	add	r30, r30
    259a:	ff 1f       	adc	r31, r31
    259c:	ee 0f       	add	r30, r30
    259e:	ff 1f       	adc	r31, r31
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	ec 5a       	subi	r30, 0xAC	; 172
    25a6:	fc 4d       	sbci	r31, 0xDC	; 220
    25a8:	85 89       	ldd	r24, Z+21	; 0x15
    25aa:	82 fb       	bst	r24, 2
    25ac:	88 27       	eor	r24, r24
    25ae:	80 f9       	bld	r24, 0
    25b0:	08 95       	ret

000025b2 <udd_ep_clear_halt>:
    25b2:	0f 93       	push	r16
    25b4:	28 2f       	mov	r18, r24
    25b6:	2f 70       	andi	r18, 0x0F	; 15
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	a9 01       	movw	r20, r18
    25bc:	44 0f       	add	r20, r20
    25be:	55 1f       	adc	r21, r21
    25c0:	28 2f       	mov	r18, r24
    25c2:	08 2e       	mov	r0, r24
    25c4:	00 0c       	add	r0, r0
    25c6:	33 0b       	sbc	r19, r19
    25c8:	22 27       	eor	r18, r18
    25ca:	33 0f       	add	r19, r19
    25cc:	22 1f       	adc	r18, r18
    25ce:	33 27       	eor	r19, r19
    25d0:	24 0f       	add	r18, r20
    25d2:	35 1f       	adc	r19, r21
    25d4:	a9 01       	movw	r20, r18
    25d6:	44 0f       	add	r20, r20
    25d8:	55 1f       	adc	r21, r21
    25da:	44 0f       	add	r20, r20
    25dc:	55 1f       	adc	r21, r21
    25de:	44 0f       	add	r20, r20
    25e0:	55 1f       	adc	r21, r21
    25e2:	fa 01       	movw	r30, r20
    25e4:	e8 59       	subi	r30, 0x98	; 152
    25e6:	fc 4d       	sbci	r31, 0xDC	; 220
    25e8:	01 e0       	ldi	r16, 0x01	; 1
    25ea:	06 93       	lac	Z, r16
    25ec:	fa 01       	movw	r30, r20
    25ee:	ec 5a       	subi	r30, 0xAC	; 172
    25f0:	fc 4d       	sbci	r31, 0xDC	; 220
    25f2:	95 89       	ldd	r25, Z+21	; 0x15
    25f4:	92 ff       	sbrs	r25, 2
    25f6:	11 c0       	rjmp	.+34     	; 0x261a <udd_ep_clear_halt+0x68>
    25f8:	fa 01       	movw	r30, r20
    25fa:	ec 5a       	subi	r30, 0xAC	; 172
    25fc:	fc 4d       	sbci	r31, 0xDC	; 220
    25fe:	95 89       	ldd	r25, Z+21	; 0x15
    2600:	9b 7f       	andi	r25, 0xFB	; 251
    2602:	95 8b       	std	Z+21, r25	; 0x15
    2604:	64 dc       	rcall	.-1848   	; 0x1ece <udd_ep_get_job>
    2606:	fc 01       	movw	r30, r24
    2608:	80 81       	ld	r24, Z
    260a:	80 ff       	sbrs	r24, 0
    260c:	06 c0       	rjmp	.+12     	; 0x261a <udd_ep_clear_halt+0x68>
    260e:	8e 7f       	andi	r24, 0xFE	; 254
    2610:	80 83       	st	Z, r24
    2612:	07 80       	ldd	r0, Z+7	; 0x07
    2614:	f0 85       	ldd	r31, Z+8	; 0x08
    2616:	e0 2d       	mov	r30, r0
    2618:	19 95       	eicall
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	0f 91       	pop	r16
    261e:	08 95       	ret

00002620 <udd_ep_run>:
    2620:	6f 92       	push	r6
    2622:	7f 92       	push	r7
    2624:	8f 92       	push	r8
    2626:	9f 92       	push	r9
    2628:	af 92       	push	r10
    262a:	bf 92       	push	r11
    262c:	cf 92       	push	r12
    262e:	df 92       	push	r13
    2630:	ef 92       	push	r14
    2632:	ff 92       	push	r15
    2634:	0f 93       	push	r16
    2636:	1f 93       	push	r17
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	1f 92       	push	r1
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	78 2e       	mov	r7, r24
    2644:	66 2e       	mov	r6, r22
    2646:	4a 01       	movw	r8, r20
    2648:	59 01       	movw	r10, r18
    264a:	41 dc       	rcall	.-1918   	; 0x1ece <udd_ep_get_job>
    264c:	6c 01       	movw	r12, r24
    264e:	27 2d       	mov	r18, r7
    2650:	87 2d       	mov	r24, r7
    2652:	8f 70       	andi	r24, 0x0F	; 15
    2654:	e8 2e       	mov	r14, r24
    2656:	f1 2c       	mov	r15, r1
    2658:	c7 01       	movw	r24, r14
    265a:	88 0f       	add	r24, r24
    265c:	99 1f       	adc	r25, r25
    265e:	e7 2c       	mov	r14, r7
    2660:	07 2c       	mov	r0, r7
    2662:	00 0c       	add	r0, r0
    2664:	ff 08       	sbc	r15, r15
    2666:	ee 24       	eor	r14, r14
    2668:	ff 0c       	add	r15, r15
    266a:	ee 1c       	adc	r14, r14
    266c:	ff 24       	eor	r15, r15
    266e:	e8 0e       	add	r14, r24
    2670:	f9 1e       	adc	r15, r25
    2672:	f7 01       	movw	r30, r14
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	ee 0f       	add	r30, r30
    267e:	ff 1f       	adc	r31, r31
    2680:	ec 5a       	subi	r30, 0xAC	; 172
    2682:	fc 4d       	sbci	r31, 0xDC	; 220
    2684:	85 89       	ldd	r24, Z+21	; 0x15
    2686:	80 7c       	andi	r24, 0xC0	; 192
    2688:	09 f4       	brne	.+2      	; 0x268c <udd_ep_run+0x6c>
    268a:	81 c0       	rjmp	.+258    	; 0x278e <udd_ep_run+0x16e>
    268c:	f7 01       	movw	r30, r14
    268e:	ee 0f       	add	r30, r30
    2690:	ff 1f       	adc	r31, r31
    2692:	ee 0f       	add	r30, r30
    2694:	ff 1f       	adc	r31, r31
    2696:	ee 0f       	add	r30, r30
    2698:	ff 1f       	adc	r31, r31
    269a:	ec 5a       	subi	r30, 0xAC	; 172
    269c:	fc 4d       	sbci	r31, 0xDC	; 220
    269e:	85 89       	ldd	r24, Z+21	; 0x15
    26a0:	80 7c       	andi	r24, 0xC0	; 192
    26a2:	80 3c       	cpi	r24, 0xC0	; 192
    26a4:	61 f0       	breq	.+24     	; 0x26be <udd_ep_run+0x9e>
    26a6:	f7 01       	movw	r30, r14
    26a8:	ee 0f       	add	r30, r30
    26aa:	ff 1f       	adc	r31, r31
    26ac:	ee 0f       	add	r30, r30
    26ae:	ff 1f       	adc	r31, r31
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	ec 5a       	subi	r30, 0xAC	; 172
    26b6:	fc 4d       	sbci	r31, 0xDC	; 220
    26b8:	85 89       	ldd	r24, Z+21	; 0x15
    26ba:	82 fd       	sbrc	r24, 2
    26bc:	6a c0       	rjmp	.+212    	; 0x2792 <udd_ep_run+0x172>
    26be:	8f b7       	in	r24, 0x3f	; 63
    26c0:	89 83       	std	Y+1, r24	; 0x01
    26c2:	f8 94       	cli
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	f6 01       	movw	r30, r12
    26c8:	90 81       	ld	r25, Z
    26ca:	90 ff       	sbrs	r25, 0
    26cc:	03 c0       	rjmp	.+6      	; 0x26d4 <udd_ep_run+0xb4>
    26ce:	8f bf       	out	0x3f, r24	; 63
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	60 c0       	rjmp	.+192    	; 0x2794 <udd_ep_run+0x174>
    26d4:	f6 01       	movw	r30, r12
    26d6:	90 81       	ld	r25, Z
    26d8:	91 60       	ori	r25, 0x01	; 1
    26da:	90 83       	st	Z, r25
    26dc:	8f bf       	out	0x3f, r24	; 63
    26de:	81 82       	std	Z+1, r8	; 0x01
    26e0:	92 82       	std	Z+2, r9	; 0x02
    26e2:	a3 82       	std	Z+3, r10	; 0x03
    26e4:	b4 82       	std	Z+4, r11	; 0x04
    26e6:	15 82       	std	Z+5, r1	; 0x05
    26e8:	16 82       	std	Z+6, r1	; 0x06
    26ea:	07 83       	std	Z+7, r16	; 0x07
    26ec:	10 87       	std	Z+8, r17	; 0x08
    26ee:	61 10       	cpse	r6, r1
    26f0:	06 c0       	rjmp	.+12     	; 0x26fe <udd_ep_run+0xde>
    26f2:	91 e0       	ldi	r25, 0x01	; 1
    26f4:	a1 14       	cp	r10, r1
    26f6:	b1 04       	cpc	r11, r1
    26f8:	19 f0       	breq	.+6      	; 0x2700 <udd_ep_run+0xe0>
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <udd_ep_run+0xe0>
    26fe:	91 e0       	ldi	r25, 0x01	; 1
    2700:	f6 01       	movw	r30, r12
    2702:	80 81       	ld	r24, Z
    2704:	90 fb       	bst	r25, 0
    2706:	81 f9       	bld	r24, 1
    2708:	8b 7f       	andi	r24, 0xFB	; 251
    270a:	80 83       	st	Z, r24
    270c:	22 23       	and	r18, r18
    270e:	64 f4       	brge	.+24     	; 0x2728 <udd_ep_run+0x108>
    2710:	f7 01       	movw	r30, r14
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	ee 0f       	add	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	ee 0f       	add	r30, r30
    271c:	ff 1f       	adc	r31, r31
    271e:	ec 5a       	subi	r30, 0xAC	; 172
    2720:	fc 4d       	sbci	r31, 0xDC	; 220
    2722:	12 8e       	std	Z+26, r1	; 0x1a
    2724:	13 8e       	std	Z+27, r1	; 0x1b
    2726:	2f c0       	rjmp	.+94     	; 0x2786 <udd_ep_run+0x166>
    2728:	f7 01       	movw	r30, r14
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	ee 0f       	add	r30, r30
    2734:	ff 1f       	adc	r31, r31
    2736:	ec 5a       	subi	r30, 0xAC	; 172
    2738:	fc 4d       	sbci	r31, 0xDC	; 220
    273a:	85 89       	ldd	r24, Z+21	; 0x15
    273c:	80 7c       	andi	r24, 0xC0	; 192
    273e:	80 3c       	cpi	r24, 0xC0	; 192
    2740:	a9 f4       	brne	.+42     	; 0x276c <udd_ep_run+0x14c>
    2742:	c7 01       	movw	r24, r14
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	88 0f       	add	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	88 59       	subi	r24, 0x98	; 152
    2752:	9c 4d       	sbci	r25, 0xDC	; 220
    2754:	94 db       	rcall	.-2264   	; 0x1e7e <udd_ep_get_size>
    2756:	bc 01       	movw	r22, r24
    2758:	c5 01       	movw	r24, r10
    275a:	b3 d2       	rcall	.+1382   	; 0x2cc2 <__udivmodhi4>
    275c:	89 2b       	or	r24, r25
    275e:	31 f0       	breq	.+12     	; 0x276c <udd_ep_run+0x14c>
    2760:	f6 01       	movw	r30, r12
    2762:	80 81       	ld	r24, Z
    2764:	8e 7f       	andi	r24, 0xFE	; 254
    2766:	80 83       	st	Z, r24
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	14 c0       	rjmp	.+40     	; 0x2794 <udd_ep_run+0x174>
    276c:	f7 01       	movw	r30, r14
    276e:	ee 0f       	add	r30, r30
    2770:	ff 1f       	adc	r31, r31
    2772:	ee 0f       	add	r30, r30
    2774:	ff 1f       	adc	r31, r31
    2776:	ee 0f       	add	r30, r30
    2778:	ff 1f       	adc	r31, r31
    277a:	ec 5a       	subi	r30, 0xAC	; 172
    277c:	fc 4d       	sbci	r31, 0xDC	; 220
    277e:	16 8a       	std	Z+22, r1	; 0x16
    2780:	17 8a       	std	Z+23, r1	; 0x17
    2782:	12 8e       	std	Z+26, r1	; 0x1a
    2784:	13 8e       	std	Z+27, r1	; 0x1b
    2786:	87 2d       	mov	r24, r7
    2788:	2e dc       	rcall	.-1956   	; 0x1fe6 <udd_ep_trans_complet>
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	03 c0       	rjmp	.+6      	; 0x2794 <udd_ep_run+0x174>
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	01 c0       	rjmp	.+2      	; 0x2794 <udd_ep_run+0x174>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	0f 90       	pop	r0
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	ff 90       	pop	r15
    27a0:	ef 90       	pop	r14
    27a2:	df 90       	pop	r13
    27a4:	cf 90       	pop	r12
    27a6:	bf 90       	pop	r11
    27a8:	af 90       	pop	r10
    27aa:	9f 90       	pop	r9
    27ac:	8f 90       	pop	r8
    27ae:	7f 90       	pop	r7
    27b0:	6f 90       	pop	r6
    27b2:	08 95       	ret

000027b4 <udd_ep_abort>:
    27b4:	ff 92       	push	r15
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	18 2f       	mov	r17, r24
    27c0:	c8 2f       	mov	r28, r24
    27c2:	cf 70       	andi	r28, 0x0F	; 15
    27c4:	d0 e0       	ldi	r29, 0x00	; 0
    27c6:	ce 01       	movw	r24, r28
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	c1 2f       	mov	r28, r17
    27ce:	01 2e       	mov	r0, r17
    27d0:	00 0c       	add	r0, r0
    27d2:	dd 0b       	sbc	r29, r29
    27d4:	cc 27       	eor	r28, r28
    27d6:	dd 0f       	add	r29, r29
    27d8:	cc 1f       	adc	r28, r28
    27da:	dd 27       	eor	r29, r29
    27dc:	c8 0f       	add	r28, r24
    27de:	d9 1f       	adc	r29, r25
    27e0:	81 2f       	mov	r24, r17
    27e2:	75 db       	rcall	.-2326   	; 0x1ece <udd_ep_get_job>
    27e4:	dc 01       	movw	r26, r24
    27e6:	fe 01       	movw	r30, r28
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	ee 0f       	add	r30, r30
    27f2:	ff 1f       	adc	r31, r31
    27f4:	e8 59       	subi	r30, 0x98	; 152
    27f6:	fc 4d       	sbci	r31, 0xDC	; 220
    27f8:	02 e0       	ldi	r16, 0x02	; 2
    27fa:	05 93       	las	Z, r16
    27fc:	8c 91       	ld	r24, X
    27fe:	80 ff       	sbrs	r24, 0
    2800:	22 c0       	rjmp	.+68     	; 0x2846 <udd_ep_abort+0x92>
    2802:	8e 7f       	andi	r24, 0xFE	; 254
    2804:	8c 93       	st	X, r24
    2806:	17 96       	adiw	r26, 0x07	; 7
    2808:	ed 91       	ld	r30, X+
    280a:	fc 91       	ld	r31, X
    280c:	18 97       	sbiw	r26, 0x08	; 8
    280e:	30 97       	sbiw	r30, 0x00	; 0
    2810:	d1 f0       	breq	.+52     	; 0x2846 <udd_ep_abort+0x92>
    2812:	11 23       	and	r17, r17
    2814:	5c f4       	brge	.+22     	; 0x282c <udd_ep_abort+0x78>
    2816:	cc 0f       	add	r28, r28
    2818:	dd 1f       	adc	r29, r29
    281a:	cc 0f       	add	r28, r28
    281c:	dd 1f       	adc	r29, r29
    281e:	cc 0f       	add	r28, r28
    2820:	dd 1f       	adc	r29, r29
    2822:	cc 5a       	subi	r28, 0xAC	; 172
    2824:	dc 4d       	sbci	r29, 0xDC	; 220
    2826:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2828:	7b 8d       	ldd	r23, Y+27	; 0x1b
    282a:	0a c0       	rjmp	.+20     	; 0x2840 <udd_ep_abort+0x8c>
    282c:	cc 0f       	add	r28, r28
    282e:	dd 1f       	adc	r29, r29
    2830:	cc 0f       	add	r28, r28
    2832:	dd 1f       	adc	r29, r29
    2834:	cc 0f       	add	r28, r28
    2836:	dd 1f       	adc	r29, r29
    2838:	cc 5a       	subi	r28, 0xAC	; 172
    283a:	dc 4d       	sbci	r29, 0xDC	; 220
    283c:	6e 89       	ldd	r22, Y+22	; 0x16
    283e:	7f 89       	ldd	r23, Y+23	; 0x17
    2840:	41 2f       	mov	r20, r17
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	19 95       	eicall
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	ff 90       	pop	r15
    2850:	08 95       	ret

00002852 <udd_ep_free>:
    2852:	cf 93       	push	r28
    2854:	c8 2f       	mov	r28, r24
    2856:	ae df       	rcall	.-164    	; 0x27b4 <udd_ep_abort>
    2858:	ec 2f       	mov	r30, r28
    285a:	ef 70       	andi	r30, 0x0F	; 15
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	ee 0f       	add	r30, r30
    2860:	ff 1f       	adc	r31, r31
    2862:	8c 2f       	mov	r24, r28
    2864:	cc 0f       	add	r28, r28
    2866:	99 0b       	sbc	r25, r25
    2868:	88 27       	eor	r24, r24
    286a:	99 0f       	add	r25, r25
    286c:	88 1f       	adc	r24, r24
    286e:	99 27       	eor	r25, r25
    2870:	e8 0f       	add	r30, r24
    2872:	f9 1f       	adc	r31, r25
    2874:	ee 0f       	add	r30, r30
    2876:	ff 1f       	adc	r31, r31
    2878:	ee 0f       	add	r30, r30
    287a:	ff 1f       	adc	r31, r31
    287c:	ee 0f       	add	r30, r30
    287e:	ff 1f       	adc	r31, r31
    2880:	ec 5a       	subi	r30, 0xAC	; 172
    2882:	fc 4d       	sbci	r31, 0xDC	; 220
    2884:	15 8a       	std	Z+21, r1	; 0x15
    2886:	cf 91       	pop	r28
    2888:	08 95       	ret

0000288a <udd_ep_set_halt>:
    288a:	e8 2f       	mov	r30, r24
    288c:	ef 70       	andi	r30, 0x0F	; 15
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	ee 0f       	add	r30, r30
    2892:	ff 1f       	adc	r31, r31
    2894:	28 2f       	mov	r18, r24
    2896:	08 2e       	mov	r0, r24
    2898:	00 0c       	add	r0, r0
    289a:	33 0b       	sbc	r19, r19
    289c:	22 27       	eor	r18, r18
    289e:	33 0f       	add	r19, r19
    28a0:	22 1f       	adc	r18, r18
    28a2:	33 27       	eor	r19, r19
    28a4:	e2 0f       	add	r30, r18
    28a6:	f3 1f       	adc	r31, r19
    28a8:	ee 0f       	add	r30, r30
    28aa:	ff 1f       	adc	r31, r31
    28ac:	ee 0f       	add	r30, r30
    28ae:	ff 1f       	adc	r31, r31
    28b0:	ee 0f       	add	r30, r30
    28b2:	ff 1f       	adc	r31, r31
    28b4:	ec 5a       	subi	r30, 0xAC	; 172
    28b6:	fc 4d       	sbci	r31, 0xDC	; 220
    28b8:	95 89       	ldd	r25, Z+21	; 0x15
    28ba:	94 60       	ori	r25, 0x04	; 4
    28bc:	95 8b       	std	Z+21, r25	; 0x15
    28be:	7a df       	rcall	.-268    	; 0x27b4 <udd_ep_abort>
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	08 95       	ret

000028c4 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    28c4:	1f 92       	push	r1
    28c6:	0f 92       	push	r0
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	0f 92       	push	r0
    28cc:	11 24       	eor	r1, r1
    28ce:	0b b6       	in	r0, 0x3b	; 59
    28d0:	0f 92       	push	r0
    28d2:	0f 93       	push	r16
    28d4:	2f 93       	push	r18
    28d6:	3f 93       	push	r19
    28d8:	4f 93       	push	r20
    28da:	5f 93       	push	r21
    28dc:	6f 93       	push	r22
    28de:	7f 93       	push	r23
    28e0:	8f 93       	push	r24
    28e2:	9f 93       	push	r25
    28e4:	af 93       	push	r26
    28e6:	bf 93       	push	r27
    28e8:	cf 93       	push	r28
    28ea:	ef 93       	push	r30
    28ec:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    28ee:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    28f2:	88 23       	and	r24, r24
    28f4:	3c f4       	brge	.+14     	; 0x2904 <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    28f6:	80 e8       	ldi	r24, 0x80	; 128
    28f8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    28fc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2900:	b0 d1       	rcall	.+864    	; 0x2c62 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2902:	89 c0       	rjmp	.+274    	; 0x2a16 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2904:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2908:	82 ff       	sbrs	r24, 2
    290a:	20 c0       	rjmp	.+64     	; 0x294c <__vector_125+0x88>
		udd_ack_underflow_event();
    290c:	84 e0       	ldi	r24, 0x04	; 4
    290e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    2912:	80 91 70 23 	lds	r24, 0x2370	; 0x802370 <udd_sram+0x1c>
    2916:	86 ff       	sbrs	r24, 6
    2918:	7e c0       	rjmp	.+252    	; 0x2a16 <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    291a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    291e:	81 fd       	sbrc	r24, 1
    2920:	7a c0       	rjmp	.+244    	; 0x2a16 <__vector_125+0x152>
    2922:	f0 da       	rcall	.-2592   	; 0x1f04 <udd_ctrl_interrupt_tc_setup>
    2924:	81 11       	cpse	r24, r1
    2926:	77 c0       	rjmp	.+238    	; 0x2a16 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2928:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <udd_ep_control_state>
    292c:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    292e:	11 f4       	brne	.+4      	; 0x2934 <__vector_125+0x70>
    2930:	24 da       	rcall	.-3000   	; 0x1d7a <udd_ctrl_send_zlp_in>
    2932:	71 c0       	rjmp	.+226    	; 0x2a16 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2934:	84 30       	cpi	r24, 0x04	; 4
    2936:	09 f0       	breq	.+2      	; 0x293a <__vector_125+0x76>
    2938:	6e c0       	rjmp	.+220    	; 0x2a16 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    293a:	e1 e7       	ldi	r30, 0x71	; 113
    293c:	f3 e2       	ldi	r31, 0x23	; 35
    293e:	04 e0       	ldi	r16, 0x04	; 4
    2940:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2942:	e9 e6       	ldi	r30, 0x69	; 105
    2944:	f3 e2       	ldi	r31, 0x23	; 35
    2946:	04 e0       	ldi	r16, 0x04	; 4
    2948:	05 93       	las	Z, r16
    294a:	65 c0       	rjmp	.+202    	; 0x2a16 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    294c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2950:	81 ff       	sbrs	r24, 1
    2952:	5c c0       	rjmp	.+184    	; 0x2a0c <__vector_125+0x148>
		udd_ack_overflow_event();
    2954:	82 e0       	ldi	r24, 0x02	; 2
    2956:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    295a:	80 91 68 23 	lds	r24, 0x2368	; 0x802368 <udd_sram+0x14>
    295e:	86 ff       	sbrs	r24, 6
    2960:	5a c0       	rjmp	.+180    	; 0x2a16 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2962:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2966:	81 fd       	sbrc	r24, 1
    2968:	56 c0       	rjmp	.+172    	; 0x2a16 <__vector_125+0x152>
    296a:	cc da       	rcall	.-2664   	; 0x1f04 <udd_ctrl_interrupt_tc_setup>
    296c:	81 11       	cpse	r24, r1
    296e:	53 c0       	rjmp	.+166    	; 0x2a16 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2970:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <udd_ep_control_state>
    2974:	82 30       	cpi	r24, 0x02	; 2
    2976:	41 f4       	brne	.+16     	; 0x2988 <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2978:	84 e0       	ldi	r24, 0x04	; 4
    297a:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    297e:	e8 e6       	ldi	r30, 0x68	; 104
    2980:	f3 e2       	ldi	r31, 0x23	; 35
    2982:	02 e0       	ldi	r16, 0x02	; 2
    2984:	06 93       	lac	Z, r16
    2986:	47 c0       	rjmp	.+142    	; 0x2a16 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2988:	83 30       	cpi	r24, 0x03	; 3
    298a:	09 f0       	breq	.+2      	; 0x298e <__vector_125+0xca>
    298c:	44 c0       	rjmp	.+136    	; 0x2a16 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    298e:	e1 e7       	ldi	r30, 0x71	; 113
    2990:	f3 e2       	ldi	r31, 0x23	; 35
    2992:	04 e0       	ldi	r16, 0x04	; 4
    2994:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2996:	e9 e6       	ldi	r30, 0x69	; 105
    2998:	f3 e2       	ldi	r31, 0x23	; 35
    299a:	04 e0       	ldi	r16, 0x04	; 4
    299c:	05 93       	las	Z, r16
    299e:	3b c0       	rjmp	.+118    	; 0x2a16 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    29a0:	80 e1       	ldi	r24, 0x10	; 16
    29a2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    29a6:	c1 e0       	ldi	r28, 0x01	; 1
    29a8:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    29aa:	04 df       	rcall	.-504    	; 0x27b4 <udd_ep_abort>
    29ac:	8c 2f       	mov	r24, r28
    29ae:	80 68       	ori	r24, 0x80	; 128
    29b0:	01 df       	rcall	.-510    	; 0x27b4 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    29b2:	cf 5f       	subi	r28, 0xFF	; 255
    29b4:	c5 30       	cpi	r28, 0x05	; 5
    29b6:	c1 f7       	brne	.-16     	; 0x29a8 <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    29b8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    29bc:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    29c0:	e4 e5       	ldi	r30, 0x54	; 84
    29c2:	f3 e2       	ldi	r31, 0x23	; 35
    29c4:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    29c6:	96 e0       	ldi	r25, 0x06	; 6
    29c8:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    29ca:	80 e4       	ldi	r24, 0x40	; 64
    29cc:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    29ce:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    29d0:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    29d2:	85 8f       	std	Z+29, r24	; 0x1d
    29d4:	87 e4       	ldi	r24, 0x47	; 71
    29d6:	93 e2       	ldi	r25, 0x23	; 35
    29d8:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    29da:	91 8f       	std	Z+25, r25	; 0x19
    29dc:	9b d9       	rcall	.-3274   	; 0x1d14 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    29de:	1b c0       	rjmp	.+54     	; 0x2a16 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    29e0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    29e4:	86 ff       	sbrs	r24, 6
    29e6:	07 c0       	rjmp	.+14     	; 0x29f6 <__vector_125+0x132>
    29e8:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    29ea:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    29ee:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    29f0:	59 d9       	rcall	.-3406   	; 0x1ca4 <udd_sleep_mode>
    29f2:	35 d1       	rcall	.+618    	; 0x2c5e <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    29f4:	10 c0       	rjmp	.+32     	; 0x2a16 <__vector_125+0x152>
    29f6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    29fa:	85 ff       	sbrs	r24, 5
    29fc:	0c c0       	rjmp	.+24     	; 0x2a16 <__vector_125+0x152>
    29fe:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    2a00:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2a04:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2a06:	4e d9       	rcall	.-3428   	; 0x1ca4 <udd_sleep_mode>
    2a08:	2b d1       	rcall	.+598    	; 0x2c60 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2a0a:	05 c0       	rjmp	.+10     	; 0x2a16 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2a0c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2a10:	84 fd       	sbrc	r24, 4
    2a12:	c6 cf       	rjmp	.-116    	; 0x29a0 <__vector_125+0xdc>
    2a14:	e5 cf       	rjmp	.-54     	; 0x29e0 <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2a16:	ff 91       	pop	r31
    2a18:	ef 91       	pop	r30
    2a1a:	cf 91       	pop	r28
    2a1c:	bf 91       	pop	r27
    2a1e:	af 91       	pop	r26
    2a20:	9f 91       	pop	r25
    2a22:	8f 91       	pop	r24
    2a24:	7f 91       	pop	r23
    2a26:	6f 91       	pop	r22
    2a28:	5f 91       	pop	r21
    2a2a:	4f 91       	pop	r20
    2a2c:	3f 91       	pop	r19
    2a2e:	2f 91       	pop	r18
    2a30:	0f 91       	pop	r16
    2a32:	0f 90       	pop	r0
    2a34:	0b be       	out	0x3b, r0	; 59
    2a36:	0f 90       	pop	r0
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	0f 90       	pop	r0
    2a3c:	1f 90       	pop	r1
    2a3e:	18 95       	reti

00002a40 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2a40:	1f 92       	push	r1
    2a42:	0f 92       	push	r0
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	0f 92       	push	r0
    2a48:	11 24       	eor	r1, r1
    2a4a:	0b b6       	in	r0, 0x3b	; 59
    2a4c:	0f 92       	push	r0
    2a4e:	0f 93       	push	r16
    2a50:	1f 93       	push	r17
    2a52:	2f 93       	push	r18
    2a54:	3f 93       	push	r19
    2a56:	4f 93       	push	r20
    2a58:	5f 93       	push	r21
    2a5a:	6f 93       	push	r22
    2a5c:	7f 93       	push	r23
    2a5e:	8f 93       	push	r24
    2a60:	9f 93       	push	r25
    2a62:	af 93       	push	r26
    2a64:	bf 93       	push	r27
    2a66:	cf 93       	push	r28
    2a68:	df 93       	push	r29
    2a6a:	ef 93       	push	r30
    2a6c:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2a6e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2a72:	81 fd       	sbrc	r24, 1
    2a74:	03 c0       	rjmp	.+6      	; 0x2a7c <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2a76:	46 da       	rcall	.-2932   	; 0x1f04 <udd_ctrl_interrupt_tc_setup>
    2a78:	81 11       	cpse	r24, r1
    2a7a:	c3 c0       	rjmp	.+390    	; 0x2c02 <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2a82:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2a86:	81 95       	neg	r24
    2a88:	88 0f       	add	r24, r24
    2a8a:	e8 e6       	ldi	r30, 0x68	; 104
    2a8c:	f3 e2       	ldi	r31, 0x23	; 35
    2a8e:	e8 1b       	sub	r30, r24
    2a90:	f1 09       	sbc	r31, r1
    2a92:	20 81       	ld	r18, Z
    2a94:	31 81       	ldd	r19, Z+1	; 0x01
    2a96:	28 56       	subi	r18, 0x68	; 104
    2a98:	33 42       	sbci	r19, 0x23	; 35
    2a9a:	36 95       	lsr	r19
    2a9c:	27 95       	ror	r18
    2a9e:	36 95       	lsr	r19
    2aa0:	27 95       	ror	r18
    2aa2:	36 95       	lsr	r19
    2aa4:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2aa6:	82 2f       	mov	r24, r18
    2aa8:	86 95       	lsr	r24
    2aaa:	20 fd       	sbrc	r18, 0
    2aac:	02 c0       	rjmp	.+4      	; 0x2ab2 <__vector_126+0x72>
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	01 c0       	rjmp	.+2      	; 0x2ab4 <__vector_126+0x74>
    2ab2:	90 e8       	ldi	r25, 0x80	; 128
    2ab4:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2ab6:	e8 2f       	mov	r30, r24
    2ab8:	ef 70       	andi	r30, 0x0F	; 15
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	ee 0f       	add	r30, r30
    2abe:	ff 1f       	adc	r31, r31
    2ac0:	28 2f       	mov	r18, r24
    2ac2:	08 2e       	mov	r0, r24
    2ac4:	00 0c       	add	r0, r0
    2ac6:	33 0b       	sbc	r19, r19
    2ac8:	22 27       	eor	r18, r18
    2aca:	33 0f       	add	r19, r19
    2acc:	22 1f       	adc	r18, r18
    2ace:	33 27       	eor	r19, r19
    2ad0:	e2 0f       	add	r30, r18
    2ad2:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2ad4:	df 01       	movw	r26, r30
    2ad6:	aa 0f       	add	r26, r26
    2ad8:	bb 1f       	adc	r27, r27
    2ada:	aa 0f       	add	r26, r26
    2adc:	bb 1f       	adc	r27, r27
    2ade:	aa 0f       	add	r26, r26
    2ae0:	bb 1f       	adc	r27, r27
    2ae2:	ac 5a       	subi	r26, 0xAC	; 172
    2ae4:	bc 4d       	sbci	r27, 0xDC	; 220
    2ae6:	54 96       	adiw	r26, 0x14	; 20
    2ae8:	9c 91       	ld	r25, X
    2aea:	95 ff       	sbrs	r25, 5
    2aec:	8a c0       	rjmp	.+276    	; 0x2c02 <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2aee:	ee 0f       	add	r30, r30
    2af0:	ff 1f       	adc	r31, r31
    2af2:	ee 0f       	add	r30, r30
    2af4:	ff 1f       	adc	r31, r31
    2af6:	ee 0f       	add	r30, r30
    2af8:	ff 1f       	adc	r31, r31
    2afa:	e8 59       	subi	r30, 0x98	; 152
    2afc:	fc 4d       	sbci	r31, 0xDC	; 220
    2afe:	00 e2       	ldi	r16, 0x20	; 32
    2b00:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2b02:	81 11       	cpse	r24, r1
    2b04:	79 c0       	rjmp	.+242    	; 0x2bf8 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b06:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <udd_ep_control_state>
    2b0a:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2b0c:	19 f4       	brne	.+6      	; 0x2b14 <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2b0e:	43 d9       	rcall	.-3450   	; 0x1d96 <udd_ctrl_endofrequest>
    2b10:	01 d9       	rcall	.-3582   	; 0x1d14 <udd_ctrl_init>
    2b12:	77 c0       	rjmp	.+238    	; 0x2c02 <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2b14:	00 91 6a 23 	lds	r16, 0x236A	; 0x80236a <udd_sram+0x16>
    2b18:	10 91 6b 23 	lds	r17, 0x236B	; 0x80236b <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2b1c:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0xa>
    2b20:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0xb>
    2b24:	c0 91 4f 23 	lds	r28, 0x234F	; 0x80234f <udd_ctrl_payload_nb_trans>
    2b28:	d0 91 50 23 	lds	r29, 0x2350	; 0x802350 <udd_ctrl_payload_nb_trans+0x1>
    2b2c:	98 01       	movw	r18, r16
    2b2e:	2c 0f       	add	r18, r28
    2b30:	3d 1f       	adc	r19, r29
    2b32:	82 17       	cp	r24, r18
    2b34:	93 07       	cpc	r25, r19
    2b36:	18 f4       	brcc	.+6      	; 0x2b3e <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2b38:	8c 01       	movw	r16, r24
    2b3a:	0c 1b       	sub	r16, r28
    2b3c:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2b3e:	80 91 d1 23 	lds	r24, 0x23D1	; 0x8023d1 <udd_g_ctrlreq+0x8>
    2b42:	90 91 d2 23 	lds	r25, 0x23D2	; 0x8023d2 <udd_g_ctrlreq+0x9>
    2b46:	a8 01       	movw	r20, r16
    2b48:	67 e4       	ldi	r22, 0x47	; 71
    2b4a:	73 e2       	ldi	r23, 0x23	; 35
    2b4c:	8c 0f       	add	r24, r28
    2b4e:	9d 1f       	adc	r25, r29
    2b50:	d4 d0       	rcall	.+424    	; 0x2cfa <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2b52:	c0 0f       	add	r28, r16
    2b54:	d1 1f       	adc	r29, r17
    2b56:	c0 93 4f 23 	sts	0x234F, r28	; 0x80234f <udd_ctrl_payload_nb_trans>
    2b5a:	d0 93 50 23 	sts	0x2350, r29	; 0x802350 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2b5e:	08 30       	cpi	r16, 0x08	; 8
    2b60:	11 05       	cpc	r17, r1
    2b62:	69 f4       	brne	.+26     	; 0x2b7e <__vector_126+0x13e>
    2b64:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <udd_ctrl_prev_payload_nb_trans>
    2b68:	90 91 52 23 	lds	r25, 0x2352	; 0x802352 <udd_ctrl_prev_payload_nb_trans+0x1>
    2b6c:	8c 0f       	add	r24, r28
    2b6e:	9d 1f       	adc	r25, r29
    2b70:	20 91 cf 23 	lds	r18, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x6>
    2b74:	30 91 d0 23 	lds	r19, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x7>
    2b78:	82 17       	cp	r24, r18
    2b7a:	93 07       	cpc	r25, r19
    2b7c:	80 f0       	brcs	.+32     	; 0x2b9e <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2b7e:	e9 ec       	ldi	r30, 0xC9	; 201
    2b80:	f3 e2       	ldi	r31, 0x23	; 35
    2b82:	c2 87       	std	Z+10, r28	; 0x0a
    2b84:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2b86:	06 84       	ldd	r0, Z+14	; 0x0e
    2b88:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b8a:	e0 2d       	mov	r30, r0
    2b8c:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2b8e:	29 f0       	breq	.+10     	; 0x2b9a <__vector_126+0x15a>
    2b90:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2b92:	81 11       	cpse	r24, r1
    2b94:	02 c0       	rjmp	.+4      	; 0x2b9a <__vector_126+0x15a>
    2b96:	e3 d8       	rcall	.-3642   	; 0x1d5e <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2b98:	34 c0       	rjmp	.+104    	; 0x2c02 <__vector_126+0x1c2>
    2b9a:	ef d8       	rcall	.-3618   	; 0x1d7a <udd_ctrl_send_zlp_in>
    2b9c:	32 c0       	rjmp	.+100    	; 0x2c02 <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2b9e:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0xa>
    2ba2:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0xb>
    2ba6:	c8 17       	cp	r28, r24
    2ba8:	d9 07       	cpc	r29, r25
    2baa:	f9 f4       	brne	.+62     	; 0x2bea <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2bac:	e0 91 d7 23 	lds	r30, 0x23D7	; 0x8023d7 <udd_g_ctrlreq+0xe>
    2bb0:	f0 91 d8 23 	lds	r31, 0x23D8	; 0x8023d8 <udd_g_ctrlreq+0xf>
    2bb4:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2bb6:	11 f4       	brne	.+4      	; 0x2bbc <__vector_126+0x17c>
    2bb8:	d2 d8       	rcall	.-3676   	; 0x1d5e <udd_ctrl_stall_data>
    2bba:	23 c0       	rjmp	.+70     	; 0x2c02 <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2bbc:	19 95       	eicall
    2bbe:	81 11       	cpse	r24, r1
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2bc2:	cd d8       	rcall	.-3686   	; 0x1d5e <udd_ctrl_stall_data>
    2bc4:	1e c0       	rjmp	.+60     	; 0x2c02 <__vector_126+0x1c2>
    2bc6:	20 91 51 23 	lds	r18, 0x2351	; 0x802351 <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2bca:	30 91 52 23 	lds	r19, 0x2352	; 0x802352 <udd_ctrl_prev_payload_nb_trans+0x1>
    2bce:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <udd_ctrl_payload_nb_trans>
    2bd2:	90 91 50 23 	lds	r25, 0x2350	; 0x802350 <udd_ctrl_payload_nb_trans+0x1>
    2bd6:	82 0f       	add	r24, r18
    2bd8:	93 1f       	adc	r25, r19
    2bda:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <udd_ctrl_prev_payload_nb_trans>
    2bde:	90 93 52 23 	sts	0x2352, r25	; 0x802352 <udd_ctrl_prev_payload_nb_trans+0x1>
    2be2:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2be6:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <udd_ctrl_payload_nb_trans+0x1>
    2bea:	e8 e6       	ldi	r30, 0x68	; 104
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2bec:	f3 e2       	ldi	r31, 0x23	; 35
    2bee:	02 e0       	ldi	r16, 0x02	; 2
    2bf0:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2bf2:	00 e2       	ldi	r16, 0x20	; 32
    2bf4:	06 93       	lac	Z, r16
    2bf6:	05 c0       	rjmp	.+10     	; 0x2c02 <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2bf8:	80 38       	cpi	r24, 0x80	; 128
		udd_ctrl_in_sent();
    2bfa:	11 f4       	brne	.+4      	; 0x2c00 <__vector_126+0x1c0>
    2bfc:	d4 d8       	rcall	.-3672   	; 0x1da6 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2bfe:	01 c0       	rjmp	.+2      	; 0x2c02 <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2c00:	f2 d9       	rcall	.-3100   	; 0x1fe6 <udd_ep_trans_complet>
    2c02:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2c04:	ef 91       	pop	r30
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	bf 91       	pop	r27
    2c0c:	af 91       	pop	r26
    2c0e:	9f 91       	pop	r25
    2c10:	8f 91       	pop	r24
    2c12:	7f 91       	pop	r23
    2c14:	6f 91       	pop	r22
    2c16:	5f 91       	pop	r21
    2c18:	4f 91       	pop	r20
    2c1a:	3f 91       	pop	r19
    2c1c:	2f 91       	pop	r18
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	0f 90       	pop	r0
    2c24:	0b be       	out	0x3b, r0	; 59
    2c26:	0f 90       	pop	r0
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	0f 90       	pop	r0
    2c2c:	1f 90       	pop	r1
    2c2e:	18 95       	reti

00002c30 <main>:

static const uint8_t sequence = 1;

int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    2c30:	87 e0       	ldi	r24, 0x07	; 7
    2c32:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    2c36:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2c38:	e3 ec       	ldi	r30, 0xC3	; 195
    2c3a:	f3 e2       	ldi	r31, 0x23	; 35
    2c3c:	10 82       	st	Z, r1
    2c3e:	11 82       	std	Z+1, r1	; 0x01
    2c40:	12 82       	std	Z+2, r1	; 0x02
    2c42:	13 82       	std	Z+3, r1	; 0x03
    2c44:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    2c4a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <sysclk_init>

	io_ui_process(); // initializes board i/o pins
    2c4e:	0e 94 a8 07 	call	0xf50	; 0xf50 <io_ui_process>

	udc_start();               // starts USB device controller
    2c52:	0e 94 48 0b 	call	0x1690	; 0x1690 <udc_start>

	startup_ui_process(sequence); // pick preferred sequence (1-5)
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	0e 94 aa 07 	call	0xf54	; 0xf54 <startup_ui_process>
    2c5c:	ff cf       	rjmp	.-2      	; 0x2c5c <main+0x2c>

00002c5e <main_suspend_action>:

	while (true) { }
}

/* -------------------------------- USB -------------------------------- */
void main_suspend_action(void) { }
    2c5e:	08 95       	ret

00002c60 <main_resume_action>:
void main_resume_action(void) { }
    2c60:	08 95       	ret

00002c62 <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    2c62:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <main_b_kbd_enable>
    2c66:	88 23       	and	r24, r24
    2c68:	79 f0       	breq	.+30     	; 0x2c88 <main_sof_action+0x26>
	return;
	kbd_ui_process();
    2c6a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <kbd_ui_process>

	if (!main_b_generic_enable)
    2c6e:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <main_b_generic_enable>
    2c72:	88 23       	and	r24, r24
    2c74:	49 f0       	breq	.+18     	; 0x2c88 <main_sof_action+0x26>
		return;
	jstk_ui_process();
    2c76:	0e 94 ac 07 	call	0xf58	; 0xf58 <jstk_ui_process>

	status_ui_process();
    2c7a:	0e 94 b4 07 	call	0xf68	; 0xf68 <status_ui_process>

	// if (main_b_led_enable) {
	// 	uint8_t map = led_getMap();
	// 	main_led_report_in(&map);
	// }
	if (!main_b_led_enable)
    2c7e:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <main_b_led_enable>
    2c82:	81 11       	cpse	r24, r1
		return;
	led_ui_process();
    2c84:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <led_ui_process>
    2c88:	08 95       	ret

00002c8a <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2c8a:	08 95       	ret

00002c8c <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2c8c:	08 95       	ret

00002c8e <main_kbd_enable>:

/* ----------------------------- keyboard ------------------------------ */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	80 93 bf 23 	sts	0x23BF, r24	; 0x8023bf <main_b_kbd_enable>
	return true;
}
    2c94:	08 95       	ret

00002c96 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2c96:	10 92 bf 23 	sts	0x23BF, r1	; 0x8023bf <main_b_kbd_enable>
    2c9a:	08 95       	ret

00002c9c <main_generic_enable>:
}

/* ----------------------------- joystick ------------------------------ */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	80 93 be 23 	sts	0x23BE, r24	; 0x8023be <main_b_generic_enable>
	return true;
}
    2ca2:	08 95       	ret

00002ca4 <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2ca4:	10 92 be 23 	sts	0x23BE, r1	; 0x8023be <main_b_generic_enable>
    2ca8:	08 95       	ret

00002caa <main_led_enable>:
}

/* ------------------------------- LEDs -------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	80 93 bd 23 	sts	0x23BD, r24	; 0x8023bd <main_b_led_enable>
	return true;
}
    2cb0:	08 95       	ret

00002cb2 <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2cb2:	10 92 bd 23 	sts	0x23BD, r1	; 0x8023bd <main_b_led_enable>
    2cb6:	08 95       	ret

00002cb8 <main_led_report_out>:
}

void main_led_report_out(uint8_t const *report) {
	led_set(report[0]);
    2cb8:	fc 01       	movw	r30, r24
    2cba:	80 81       	ld	r24, Z
    2cbc:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <led_set>
    2cc0:	08 95       	ret

00002cc2 <__udivmodhi4>:
    2cc2:	aa 1b       	sub	r26, r26
    2cc4:	bb 1b       	sub	r27, r27
    2cc6:	51 e1       	ldi	r21, 0x11	; 17
    2cc8:	07 c0       	rjmp	.+14     	; 0x2cd8 <__udivmodhi4_ep>

00002cca <__udivmodhi4_loop>:
    2cca:	aa 1f       	adc	r26, r26
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	a6 17       	cp	r26, r22
    2cd0:	b7 07       	cpc	r27, r23
    2cd2:	10 f0       	brcs	.+4      	; 0x2cd8 <__udivmodhi4_ep>
    2cd4:	a6 1b       	sub	r26, r22
    2cd6:	b7 0b       	sbc	r27, r23

00002cd8 <__udivmodhi4_ep>:
    2cd8:	88 1f       	adc	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	5a 95       	dec	r21
    2cde:	a9 f7       	brne	.-22     	; 0x2cca <__udivmodhi4_loop>
    2ce0:	80 95       	com	r24
    2ce2:	90 95       	com	r25
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	08 95       	ret

00002cea <__tablejump2__>:
    2cea:	ee 0f       	add	r30, r30
    2cec:	ff 1f       	adc	r31, r31
    2cee:	88 1f       	adc	r24, r24
    2cf0:	8b bf       	out	0x3b, r24	; 59
    2cf2:	07 90       	elpm	r0, Z+
    2cf4:	f6 91       	elpm	r31, Z
    2cf6:	e0 2d       	mov	r30, r0
    2cf8:	19 94       	eijmp

00002cfa <memcpy>:
    2cfa:	fb 01       	movw	r30, r22
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	02 c0       	rjmp	.+4      	; 0x2d04 <memcpy+0xa>
    2d00:	01 90       	ld	r0, Z+
    2d02:	0d 92       	st	X+, r0
    2d04:	41 50       	subi	r20, 0x01	; 1
    2d06:	50 40       	sbci	r21, 0x00	; 0
    2d08:	d8 f7       	brcc	.-10     	; 0x2d00 <memcpy+0x6>
    2d0a:	08 95       	ret

00002d0c <_exit>:
    2d0c:	f8 94       	cli

00002d0e <__stop_program>:
    2d0e:	ff cf       	rjmp	.-2      	; 0x2d0e <__stop_program>
