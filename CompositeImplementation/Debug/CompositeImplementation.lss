
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ef4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000184  00802000  00002ef4  00002f88  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000024d  00802184  00802184  0000310c  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000313c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a8  00000000  00000000  00003180  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b6a1  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052c3  00000000  00000000  0000edc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009d8f  00000000  00000000  0001408c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cf0  00000000  00000000  0001de1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036d18  00000000  00000000  0001eb0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a03  00000000  00000000  00055824  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f0  00000000  00000000  00059228  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd69  00000000  00000000  00059a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop
       4:	34 c1       	rjmp	.+616    	; 0x26e <__bad_interrupt>
       6:	00 00       	nop
       8:	32 c1       	rjmp	.+612    	; 0x26e <__bad_interrupt>
       a:	00 00       	nop
       c:	30 c1       	rjmp	.+608    	; 0x26e <__bad_interrupt>
       e:	00 00       	nop
      10:	2e c1       	rjmp	.+604    	; 0x26e <__bad_interrupt>
      12:	00 00       	nop
      14:	2c c1       	rjmp	.+600    	; 0x26e <__bad_interrupt>
      16:	00 00       	nop
      18:	2a c1       	rjmp	.+596    	; 0x26e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	28 c1       	rjmp	.+592    	; 0x26e <__bad_interrupt>
      1e:	00 00       	nop
      20:	26 c1       	rjmp	.+588    	; 0x26e <__bad_interrupt>
      22:	00 00       	nop
      24:	24 c1       	rjmp	.+584    	; 0x26e <__bad_interrupt>
      26:	00 00       	nop
      28:	22 c1       	rjmp	.+580    	; 0x26e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	20 c1       	rjmp	.+576    	; 0x26e <__bad_interrupt>
      2e:	00 00       	nop
      30:	1e c1       	rjmp	.+572    	; 0x26e <__bad_interrupt>
      32:	00 00       	nop
      34:	1c c1       	rjmp	.+568    	; 0x26e <__bad_interrupt>
      36:	00 00       	nop
      38:	1a c1       	rjmp	.+564    	; 0x26e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	18 c1       	rjmp	.+560    	; 0x26e <__bad_interrupt>
      3e:	00 00       	nop
      40:	16 c1       	rjmp	.+556    	; 0x26e <__bad_interrupt>
      42:	00 00       	nop
      44:	14 c1       	rjmp	.+552    	; 0x26e <__bad_interrupt>
      46:	00 00       	nop
      48:	12 c1       	rjmp	.+548    	; 0x26e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	10 c1       	rjmp	.+544    	; 0x26e <__bad_interrupt>
      4e:	00 00       	nop
      50:	0e c1       	rjmp	.+540    	; 0x26e <__bad_interrupt>
      52:	00 00       	nop
      54:	0c c1       	rjmp	.+536    	; 0x26e <__bad_interrupt>
      56:	00 00       	nop
      58:	0a c1       	rjmp	.+532    	; 0x26e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	08 c1       	rjmp	.+528    	; 0x26e <__bad_interrupt>
      5e:	00 00       	nop
      60:	06 c1       	rjmp	.+524    	; 0x26e <__bad_interrupt>
      62:	00 00       	nop
      64:	04 c1       	rjmp	.+520    	; 0x26e <__bad_interrupt>
      66:	00 00       	nop
      68:	02 c1       	rjmp	.+516    	; 0x26e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	00 c1       	rjmp	.+512    	; 0x26e <__bad_interrupt>
      6e:	00 00       	nop
      70:	fe c0       	rjmp	.+508    	; 0x26e <__bad_interrupt>
      72:	00 00       	nop
      74:	fc c0       	rjmp	.+504    	; 0x26e <__bad_interrupt>
      76:	00 00       	nop
      78:	fa c0       	rjmp	.+500    	; 0x26e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f8 c0       	rjmp	.+496    	; 0x26e <__bad_interrupt>
      7e:	00 00       	nop
      80:	f6 c0       	rjmp	.+492    	; 0x26e <__bad_interrupt>
      82:	00 00       	nop
      84:	f4 c0       	rjmp	.+488    	; 0x26e <__bad_interrupt>
      86:	00 00       	nop
      88:	f2 c0       	rjmp	.+484    	; 0x26e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f0 c0       	rjmp	.+480    	; 0x26e <__bad_interrupt>
      8e:	00 00       	nop
      90:	ee c0       	rjmp	.+476    	; 0x26e <__bad_interrupt>
      92:	00 00       	nop
      94:	ec c0       	rjmp	.+472    	; 0x26e <__bad_interrupt>
      96:	00 00       	nop
      98:	ea c0       	rjmp	.+468    	; 0x26e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e8 c0       	rjmp	.+464    	; 0x26e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e6 c0       	rjmp	.+460    	; 0x26e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e4 c0       	rjmp	.+456    	; 0x26e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e2 c0       	rjmp	.+452    	; 0x26e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e0 c0       	rjmp	.+448    	; 0x26e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	de c0       	rjmp	.+444    	; 0x26e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	dc c0       	rjmp	.+440    	; 0x26e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	da c0       	rjmp	.+436    	; 0x26e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d8 c0       	rjmp	.+432    	; 0x26e <__bad_interrupt>
      be:	00 00       	nop
      c0:	d6 c0       	rjmp	.+428    	; 0x26e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d4 c0       	rjmp	.+424    	; 0x26e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d2 c0       	rjmp	.+420    	; 0x26e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d0 c0       	rjmp	.+416    	; 0x26e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ce c0       	rjmp	.+412    	; 0x26e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cc c0       	rjmp	.+408    	; 0x26e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ca c0       	rjmp	.+404    	; 0x26e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c8 c0       	rjmp	.+400    	; 0x26e <__bad_interrupt>
      de:	00 00       	nop
      e0:	c6 c0       	rjmp	.+396    	; 0x26e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c4 c0       	rjmp	.+392    	; 0x26e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c2 c0       	rjmp	.+388    	; 0x26e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c0 c0       	rjmp	.+384    	; 0x26e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	be c0       	rjmp	.+380    	; 0x26e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	bc c0       	rjmp	.+376    	; 0x26e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ba c0       	rjmp	.+372    	; 0x26e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b8 c0       	rjmp	.+368    	; 0x26e <__bad_interrupt>
      fe:	00 00       	nop
     100:	b6 c0       	rjmp	.+364    	; 0x26e <__bad_interrupt>
     102:	00 00       	nop
     104:	b4 c0       	rjmp	.+360    	; 0x26e <__bad_interrupt>
     106:	00 00       	nop
     108:	b2 c0       	rjmp	.+356    	; 0x26e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b0 c0       	rjmp	.+352    	; 0x26e <__bad_interrupt>
     10e:	00 00       	nop
     110:	ae c0       	rjmp	.+348    	; 0x26e <__bad_interrupt>
     112:	00 00       	nop
     114:	ac c0       	rjmp	.+344    	; 0x26e <__bad_interrupt>
     116:	00 00       	nop
     118:	aa c0       	rjmp	.+340    	; 0x26e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a8 c0       	rjmp	.+336    	; 0x26e <__bad_interrupt>
     11e:	00 00       	nop
     120:	a6 c0       	rjmp	.+332    	; 0x26e <__bad_interrupt>
     122:	00 00       	nop
     124:	a4 c0       	rjmp	.+328    	; 0x26e <__bad_interrupt>
     126:	00 00       	nop
     128:	a2 c0       	rjmp	.+324    	; 0x26e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a0 c0       	rjmp	.+320    	; 0x26e <__bad_interrupt>
     12e:	00 00       	nop
     130:	9e c0       	rjmp	.+316    	; 0x26e <__bad_interrupt>
     132:	00 00       	nop
     134:	9c c0       	rjmp	.+312    	; 0x26e <__bad_interrupt>
     136:	00 00       	nop
     138:	9a c0       	rjmp	.+308    	; 0x26e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	98 c0       	rjmp	.+304    	; 0x26e <__bad_interrupt>
     13e:	00 00       	nop
     140:	96 c0       	rjmp	.+300    	; 0x26e <__bad_interrupt>
     142:	00 00       	nop
     144:	94 c0       	rjmp	.+296    	; 0x26e <__bad_interrupt>
     146:	00 00       	nop
     148:	92 c0       	rjmp	.+292    	; 0x26e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	90 c0       	rjmp	.+288    	; 0x26e <__bad_interrupt>
     14e:	00 00       	nop
     150:	8e c0       	rjmp	.+284    	; 0x26e <__bad_interrupt>
     152:	00 00       	nop
     154:	8c c0       	rjmp	.+280    	; 0x26e <__bad_interrupt>
     156:	00 00       	nop
     158:	8a c0       	rjmp	.+276    	; 0x26e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	88 c0       	rjmp	.+272    	; 0x26e <__bad_interrupt>
     15e:	00 00       	nop
     160:	86 c0       	rjmp	.+268    	; 0x26e <__bad_interrupt>
     162:	00 00       	nop
     164:	84 c0       	rjmp	.+264    	; 0x26e <__bad_interrupt>
     166:	00 00       	nop
     168:	82 c0       	rjmp	.+260    	; 0x26e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	80 c0       	rjmp	.+256    	; 0x26e <__bad_interrupt>
     16e:	00 00       	nop
     170:	7e c0       	rjmp	.+252    	; 0x26e <__bad_interrupt>
     172:	00 00       	nop
     174:	7c c0       	rjmp	.+248    	; 0x26e <__bad_interrupt>
     176:	00 00       	nop
     178:	7a c0       	rjmp	.+244    	; 0x26e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	78 c0       	rjmp	.+240    	; 0x26e <__bad_interrupt>
     17e:	00 00       	nop
     180:	76 c0       	rjmp	.+236    	; 0x26e <__bad_interrupt>
     182:	00 00       	nop
     184:	74 c0       	rjmp	.+232    	; 0x26e <__bad_interrupt>
     186:	00 00       	nop
     188:	72 c0       	rjmp	.+228    	; 0x26e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	70 c0       	rjmp	.+224    	; 0x26e <__bad_interrupt>
     18e:	00 00       	nop
     190:	6e c0       	rjmp	.+220    	; 0x26e <__bad_interrupt>
     192:	00 00       	nop
     194:	6c c0       	rjmp	.+216    	; 0x26e <__bad_interrupt>
     196:	00 00       	nop
     198:	6a c0       	rjmp	.+212    	; 0x26e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	68 c0       	rjmp	.+208    	; 0x26e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	66 c0       	rjmp	.+204    	; 0x26e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	64 c0       	rjmp	.+200    	; 0x26e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	62 c0       	rjmp	.+196    	; 0x26e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	60 c0       	rjmp	.+192    	; 0x26e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	5e c0       	rjmp	.+188    	; 0x26e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	5c c0       	rjmp	.+184    	; 0x26e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	5a c0       	rjmp	.+180    	; 0x26e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	58 c0       	rjmp	.+176    	; 0x26e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	56 c0       	rjmp	.+172    	; 0x26e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	54 c0       	rjmp	.+168    	; 0x26e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	52 c0       	rjmp	.+164    	; 0x26e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	50 c0       	rjmp	.+160    	; 0x26e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	4e c0       	rjmp	.+156    	; 0x26e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4c c0       	rjmp	.+152    	; 0x26e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	4a c0       	rjmp	.+148    	; 0x26e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	48 c0       	rjmp	.+144    	; 0x26e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	46 c0       	rjmp	.+140    	; 0x26e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	44 c0       	rjmp	.+136    	; 0x26e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	42 c0       	rjmp	.+132    	; 0x26e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	40 c0       	rjmp	.+128    	; 0x26e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	3e c0       	rjmp	.+124    	; 0x26e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__vector_125>
     1f8:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__vector_126>
     1fc:	36 04       	cpc	r3, r6
     1fe:	75 04       	cpc	r7, r5
     200:	2c 04       	cpc	r2, r12
     202:	77 04       	cpc	r7, r7
     204:	2e 04       	cpc	r2, r14
     206:	30 04       	cpc	r3, r0
     208:	32 04       	cpc	r3, r2
     20a:	34 04       	cpc	r3, r4
     20c:	36 04       	cpc	r3, r6
     20e:	cb 05       	cpc	r28, r11
     210:	31 06       	cpc	r3, r17
     212:	91 06       	cpc	r9, r17
     214:	f1 06       	cpc	r15, r17
     216:	4d 07       	cpc	r20, r29
     218:	8e 05       	cpc	r24, r14
     21a:	bc 07       	cpc	r27, r28
     21c:	1a 08       	sbc	r1, r10
     21e:	45 10       	cpse	r4, r5
     220:	48 10       	cpse	r4, r8
     222:	4b 10       	cpse	r4, r11
     224:	4e 10       	cpse	r4, r14
     226:	51 10       	cpse	r5, r1
     228:	54 10       	cpse	r5, r4
     22a:	57 10       	cpse	r5, r7

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	cd bf       	out	0x3d, r28	; 61
     234:	df e5       	ldi	r29, 0x5F	; 95
     236:	de bf       	out	0x3e, r29	; 62
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	11 e2       	ldi	r17, 0x21	; 33
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e2       	ldi	r27, 0x20	; 32
     242:	e4 ef       	ldi	r30, 0xF4	; 244
     244:	fe e2       	ldi	r31, 0x2E	; 46
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a4 38       	cpi	r26, 0x84	; 132
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	23 e2       	ldi	r18, 0x23	; 35
     258:	a4 e8       	ldi	r26, 0x84	; 132
     25a:	b1 e2       	ldi	r27, 0x21	; 33
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a1 3d       	cpi	r26, 0xD1	; 209
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <main>
     26a:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <_exit>

0000026e <__bad_interrupt>:
     26e:	c8 ce       	rjmp	.-624    	; 0x0 <__vectors>

00000270 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	08 95       	ret

00000274 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     274:	30 91 c3 23 	lds	r19, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0x2>
     278:	20 91 c4 23 	lds	r18, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0x3>
     27c:	82 2f       	mov	r24, r18
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	02 97       	sbiw	r24, 0x02	; 2
     282:	c1 f4       	brne	.+48     	; 0x2b4 <udi_hid_led_setreport+0x40>
     284:	31 11       	cpse	r19, r1
     286:	18 c0       	rjmp	.+48     	; 0x2b8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     288:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
     28c:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	a1 f4       	brne	.+40     	; 0x2bc <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     294:	e1 ec       	ldi	r30, 0xC1	; 193
     296:	f3 e2       	ldi	r31, 0x23	; 35
     298:	84 e8       	ldi	r24, 0x84	; 132
     29a:	91 e2       	ldi	r25, 0x21	; 33
     29c:	80 87       	std	Z+8, r24	; 0x08
     29e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	82 87       	std	Z+10, r24	; 0x0a
     2a6:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     2a8:	83 e8       	ldi	r24, 0x83	; 131
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	84 87       	std	Z+12, r24	; 0x0c
     2ae:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	08 95       	ret
	}
	return false;
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	08 95       	ret
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	08 95       	ret
     2bc:	80 e0       	ldi	r24, 0x00	; 0
}
     2be:	08 95       	ret

000002c0 <udi_hid_led_report_in_sent>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep) {
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_led_b_report_in_free = true;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <udi_hid_led_b_report_in_free>
     2c6:	08 95       	ret

000002c8 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2cc:	03 e8       	ldi	r16, 0x83	; 131
     2ce:	11 e0       	ldi	r17, 0x01	; 1
     2d0:	21 e0       	ldi	r18, 0x01	; 1
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	44 e8       	ldi	r20, 0x84	; 132
     2d6:	51 e2       	ldi	r21, 0x21	; 33
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	0e 94 06 14 	call	0x280c	; 0x280c <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
}
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	08 95       	ret

000002e6 <udi_hid_led_enable>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep);

/* --------------------------------------------------------------------- */

bool udi_hid_led_enable(void) {
     2e6:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2e8:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2ec:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <udi_hid_led_protocol>
	udi_hid_led_b_report_in_free = true;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <udi_hid_led_b_report_in_free>

	if(!udi_hid_led_report_out_enable())
     2f6:	e8 df       	rcall	.-48     	; 0x2c8 <udi_hid_led_report_out_enable>
     2f8:	c8 2f       	mov	r28, r24
     2fa:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2fc:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <main_led_enable>
	return true;
}
     300:	8c 2f       	mov	r24, r28
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     306:	81 11       	cpse	r24, r1
     308:	06 c0       	rjmp	.+12     	; 0x316 <udi_hid_led_report_out_received+0x10>
     30a:	61 30       	cpi	r22, 0x01	; 1
     30c:	71 05       	cpc	r23, r1
     30e:	19 f4       	brne	.+6      	; 0x316 <udi_hid_led_report_out_received+0x10>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     310:	84 e8       	ldi	r24, 0x84	; 132
     312:	91 e2       	ldi	r25, 0x21	; 33
     314:	19 d7       	rcall	.+3634   	; 0x1148 <ui_led_report>
	}
	udi_hid_led_report_out_enable();
     316:	d8 cf       	rjmp	.-80     	; 0x2c8 <udi_hid_led_report_out_enable>
     318:	08 95       	ret

0000031a <udi_hid_led_disable>:
     31a:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <main_led_disable>
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     31e:	08 95       	ret

00000320 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     320:	2a e3       	ldi	r18, 0x3A	; 58
     322:	31 e0       	ldi	r19, 0x01	; 1
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	50 e2       	ldi	r21, 0x20	; 32
     328:	6a e8       	ldi	r22, 0x8A	; 138
     32a:	71 e2       	ldi	r23, 0x21	; 33
     32c:	8c e8       	ldi	r24, 0x8C	; 140
     32e:	91 e2       	ldi	r25, 0x21	; 33
     330:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     334:	08 95       	ret

00000336 <udi_hid_led_send_report_in>:
		              udi_hid_led_report_out_received);
}


bool udi_hid_led_send_report_in(uint8_t *data)
{
     336:	ff 92       	push	r15
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	1f 92       	push	r1
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	9c 01       	movw	r18, r24
	if (!udi_hid_led_b_report_in_free)
     348:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <udi_hid_led_b_report_in_free>
     34c:	88 23       	and	r24, r24
     34e:	09 f1       	breq	.+66     	; 0x392 <udi_hid_led_send_report_in+0x5c>
     350:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     352:	8f b7       	in	r24, 0x3f	; 63
     354:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     356:	f8 94       	cli
	return flags;
     358:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();

	memset(&udi_hid_led_report_in,
     35a:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <udi_hid_led_report_in>
     35e:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <udi_hid_led_report_in+0x1>
		   0,
		   sizeof(udi_hid_led_report_in));
	memcpy(&udi_hid_led_report_in,
     362:	80 81       	ld	r24, Z
     364:	91 81       	ldd	r25, Z+1	; 0x01
     366:	80 93 86 21 	sts	0x2186, r24	; 0x802186 <udi_hid_led_report_in>
     36a:	90 93 87 21 	sts	0x2187, r25	; 0x802187 <udi_hid_led_report_in+0x1>
		   data,
		   sizeof(udi_hid_led_report_in));
	udi_hid_led_b_report_in_free = !udd_ep_run(UDI_HID_LED_EP_IN,
     36e:	00 e6       	ldi	r16, 0x60	; 96
     370:	11 e0       	ldi	r17, 0x01	; 1
     372:	22 e0       	ldi	r18, 0x02	; 2
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	46 e8       	ldi	r20, 0x86	; 134
     378:	51 e2       	ldi	r21, 0x21	; 33
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	84 e8       	ldi	r24, 0x84	; 132
     37e:	0e 94 06 14 	call	0x280c	; 0x280c <udd_ep_run>
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	89 27       	eor	r24, r25
     386:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <udi_hid_led_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     38a:	ff be       	out	0x3f, r15	; 63
		                                       false,
		                                       (uint8_t *) & udi_hid_led_report_in,
		                                       sizeof(udi_hid_led_report_in),
		                                       udi_hid_led_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_led_b_report_in_free;
     38c:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <udi_hid_led_b_report_in_free>
     390:	89 27       	eor	r24, r25
}
     392:	0f 90       	pop	r0
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	08 95       	ret

000003a0 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     3a0:	e0 e0       	ldi	r30, 0x00	; 0
     3a2:	f6 e0       	ldi	r31, 0x06	; 6
     3a4:	9f ef       	ldi	r25, 0xFF	; 255
     3a6:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     3a8:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     3aa:	e0 e2       	ldi	r30, 0x20	; 32
     3ac:	f6 e0       	ldi	r31, 0x06	; 6
     3ae:	3f e3       	ldi	r19, 0x3F	; 63
     3b0:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3b2:	88 e1       	ldi	r24, 0x18	; 24
     3b4:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3b6:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3b8:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3ba:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3bc:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3be:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     3c0:	20 ec       	ldi	r18, 0xC0	; 192
     3c2:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     3c4:	40 e4       	ldi	r20, 0x40	; 64
     3c6:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     3c8:	40 e8       	ldi	r20, 0x80	; 128
     3ca:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     3cc:	e0 e4       	ldi	r30, 0x40	; 64
     3ce:	f6 e0       	ldi	r31, 0x06	; 6
     3d0:	4c ef       	ldi	r20, 0xFC	; 252
     3d2:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d4:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d6:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d8:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3da:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3dc:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3de:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     3e0:	43 e0       	ldi	r20, 0x03	; 3
     3e2:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     3e4:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     3e6:	e0 e6       	ldi	r30, 0x60	; 96
     3e8:	f6 e0       	ldi	r31, 0x06	; 6
     3ea:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ec:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ee:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f0:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f2:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f4:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f6:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     3f8:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     3fa:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     3fc:	e0 e8       	ldi	r30, 0x80	; 128
     3fe:	f6 e0       	ldi	r31, 0x06	; 6
     400:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     402:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     404:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     406:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     408:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40a:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40c:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40e:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     410:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     412:	e0 ea       	ldi	r30, 0xA0	; 160
     414:	f6 e0       	ldi	r31, 0x06	; 6
     416:	90 ef       	ldi	r25, 0xF0	; 240
     418:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41a:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41c:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41e:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     420:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     422:	8f e0       	ldi	r24, 0x0F	; 15
     424:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     426:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     428:	99 d2       	rcall	.+1330   	; 0x95c <led_init>
	keypad_init();
     42a:	0d c1       	rjmp	.+538    	; 0x646 <keypad_init>
     42c:	08 95       	ret

0000042e <jstk_readVertIndex>:
     42e:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     432:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	92 2b       	or	r25, r18
     43a:	96 95       	lsr	r25
     43c:	87 95       	ror	r24
     43e:	96 95       	lsr	r25
     440:	87 95       	ror	r24
     442:	bc 01       	movw	r22, r24
     444:	7f 70       	andi	r23, 0x0F	; 15
     446:	80 ff       	sbrs	r24, 0
     448:	17 c0       	rjmp	.+46     	; 0x478 <jstk_readVertIndex+0x4a>
     44a:	21 e0       	ldi	r18, 0x01	; 1
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	e1 e0       	ldi	r30, 0x01	; 1
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	82 2f       	mov	r24, r18
     454:	af 01       	movw	r20, r30
     456:	02 2e       	mov	r0, r18
     458:	02 c0       	rjmp	.+4      	; 0x45e <jstk_readVertIndex+0x30>
     45a:	44 0f       	add	r20, r20
     45c:	55 1f       	adc	r21, r21
     45e:	0a 94       	dec	r0
     460:	e2 f7       	brpl	.-8      	; 0x45a <jstk_readVertIndex+0x2c>
     462:	46 23       	and	r20, r22
     464:	57 23       	and	r21, r23
     466:	45 2b       	or	r20, r21
     468:	41 f0       	breq	.+16     	; 0x47a <jstk_readVertIndex+0x4c>
     46a:	2f 5f       	subi	r18, 0xFF	; 255
     46c:	3f 4f       	sbci	r19, 0xFF	; 255
     46e:	2c 30       	cpi	r18, 0x0C	; 12
     470:	31 05       	cpc	r19, r1
     472:	79 f7       	brne	.-34     	; 0x452 <jstk_readVertIndex+0x24>
     474:	8f ef       	ldi	r24, 0xFF	; 255
     476:	08 95       	ret
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	08 95       	ret

0000047c <jstk_readHoriIndex>:
     47c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     480:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	92 2b       	or	r25, r18
     488:	bc 01       	movw	r22, r24
     48a:	7f 70       	andi	r23, 0x0F	; 15
     48c:	80 ff       	sbrs	r24, 0
     48e:	17 c0       	rjmp	.+46     	; 0x4be <jstk_readHoriIndex+0x42>
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	e1 e0       	ldi	r30, 0x01	; 1
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	82 2f       	mov	r24, r18
     49a:	af 01       	movw	r20, r30
     49c:	02 2e       	mov	r0, r18
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <jstk_readHoriIndex+0x28>
     4a0:	44 0f       	add	r20, r20
     4a2:	55 1f       	adc	r21, r21
     4a4:	0a 94       	dec	r0
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <jstk_readHoriIndex+0x24>
     4a8:	46 23       	and	r20, r22
     4aa:	57 23       	and	r21, r23
     4ac:	45 2b       	or	r20, r21
     4ae:	41 f0       	breq	.+16     	; 0x4c0 <jstk_readHoriIndex+0x44>
     4b0:	2f 5f       	subi	r18, 0xFF	; 255
     4b2:	3f 4f       	sbci	r19, 0xFF	; 255
     4b4:	2c 30       	cpi	r18, 0x0C	; 12
     4b6:	31 05       	cpc	r19, r1
     4b8:	79 f7       	brne	.-34     	; 0x498 <jstk_readHoriIndex+0x1c>
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	08 95       	ret
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	08 95       	ret

000004c2 <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     4c2:	88 23       	and	r24, r24
     4c4:	f4 f1       	brlt	.+124    	; 0x542 <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     4c6:	9b ef       	ldi	r25, 0xFB	; 251
     4c8:	98 0f       	add	r25, r24
     4ca:	92 30       	cpi	r25, 0x02	; 2
     4cc:	e0 f1       	brcs	.+120    	; 0x546 <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     4ce:	85 30       	cpi	r24, 0x05	; 5
     4d0:	34 f4       	brge	.+12     	; 0x4de <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4d2:	95 e0       	ldi	r25, 0x05	; 5
     4d4:	98 1b       	sub	r25, r24
     4d6:	92 30       	cpi	r25, 0x02	; 2
     4d8:	08 f0       	brcs	.+2      	; 0x4dc <jstk_ledMask+0x1a>
     4da:	42 c0       	rjmp	.+132    	; 0x560 <jstk_ledMask+0x9e>
     4dc:	36 c0       	rjmp	.+108    	; 0x54a <jstk_ledMask+0x88>
     4de:	9a ef       	ldi	r25, 0xFA	; 250
     4e0:	98 0f       	add	r25, r24
     4e2:	92 30       	cpi	r25, 0x02	; 2
     4e4:	b0 f5       	brcc	.+108    	; 0x552 <jstk_ledMask+0x90>
     4e6:	31 c0       	rjmp	.+98     	; 0x54a <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4e8:	62 e0       	ldi	r22, 0x02	; 2
     4ea:	23 e0       	ldi	r18, 0x03	; 3
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     4f2:	e1 e0       	ldi	r30, 0x01	; 1
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	af 01       	movw	r20, r30
     4f8:	02 2e       	mov	r0, r18
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <jstk_ledMask+0x3e>
     4fc:	44 0f       	add	r20, r20
     4fe:	55 1f       	adc	r21, r21
     500:	0a 94       	dec	r0
     502:	e2 f7       	brpl	.-8      	; 0x4fc <jstk_ledMask+0x3a>
     504:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     506:	9f 5f       	subi	r25, 0xFF	; 255
     508:	21 50       	subi	r18, 0x01	; 1
     50a:	31 09       	sbc	r19, r1
     50c:	96 17       	cp	r25, r22
     50e:	98 f3       	brcs	.-26     	; 0x4f6 <jstk_ledMask+0x34>
     510:	08 95       	ret
     512:	81 50       	subi	r24, 0x01	; 1
     514:	48 2f       	mov	r20, r24
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	4b 5f       	subi	r20, 0xFB	; 251
     51a:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     51c:	24 e0       	ldi	r18, 0x04	; 4
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     522:	e1 e0       	ldi	r30, 0x01	; 1
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	bf 01       	movw	r22, r30
     528:	02 2e       	mov	r0, r18
     52a:	02 c0       	rjmp	.+4      	; 0x530 <jstk_ledMask+0x6e>
     52c:	66 0f       	add	r22, r22
     52e:	77 1f       	adc	r23, r23
     530:	0a 94       	dec	r0
     532:	e2 f7       	brpl	.-8      	; 0x52c <jstk_ledMask+0x6a>
     534:	86 2b       	or	r24, r22
     536:	2f 5f       	subi	r18, 0xFF	; 255
     538:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     53a:	24 17       	cp	r18, r20
     53c:	35 07       	cpc	r19, r21
     53e:	99 f7       	brne	.-26     	; 0x526 <jstk_ledMask+0x64>
     540:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     546:	88 e1       	ldi	r24, 0x18	; 24
     548:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     54a:	85 30       	cpi	r24, 0x05	; 5
     54c:	6c f2       	brlt	.-102    	; 0x4e8 <jstk_ledMask+0x26>
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	e0 cf       	rjmp	.-64     	; 0x512 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     552:	85 50       	subi	r24, 0x05	; 5
     554:	85 30       	cpi	r24, 0x05	; 5
     556:	08 f0       	brcs	.+2      	; 0x55a <jstk_ledMask+0x98>
     558:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     55a:	81 11       	cpse	r24, r1
     55c:	da cf       	rjmp	.-76     	; 0x512 <jstk_ledMask+0x50>
     55e:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     560:	66 e0       	ldi	r22, 0x06	; 6
     562:	68 1b       	sub	r22, r24
     564:	65 30       	cpi	r22, 0x05	; 5
     566:	08 f0       	brcs	.+2      	; 0x56a <jstk_ledMask+0xa8>
     568:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     56a:	61 11       	cpse	r22, r1
     56c:	be cf       	rjmp	.-132    	; 0x4ea <jstk_ledMask+0x28>
     56e:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     570:	08 95       	ret

00000572 <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     572:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     574:	5c df       	rcall	.-328    	; 0x42e <jstk_readVertIndex>
     576:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     578:	81 df       	rcall	.-254    	; 0x47c <jstk_readHoriIndex>
     57a:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     57c:	24 f4       	brge	.+8      	; 0x586 <jstk_readMask+0x14>
     57e:	88 23       	and	r24, r24
     580:	c4 f0       	brlt	.+48     	; 0x5b2 <jstk_readMask+0x40>
     582:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     584:	09 c0       	rjmp	.+18     	; 0x598 <jstk_readMask+0x26>
     586:	c6 30       	cpi	r28, 0x06	; 6
     588:	1c f0       	brlt	.+6      	; 0x590 <jstk_readMask+0x1e>
     58a:	9b ef       	ldi	r25, 0xFB	; 251
     58c:	9c 0f       	add	r25, r28
     58e:	02 c0       	rjmp	.+4      	; 0x594 <jstk_readMask+0x22>
     590:	95 e0       	ldi	r25, 0x05	; 5
     592:	9c 1b       	sub	r25, r28
     594:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     596:	54 f0       	brlt	.+20     	; 0x5ac <jstk_readMask+0x3a>
     598:	86 30       	cpi	r24, 0x06	; 6
     59a:	1c f0       	brlt	.+6      	; 0x5a2 <jstk_readMask+0x30>
     59c:	2b ef       	ldi	r18, 0xFB	; 251
     59e:	28 0f       	add	r18, r24
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <jstk_readMask+0x34>
     5a2:	25 e0       	ldi	r18, 0x05	; 5
     5a4:	28 1b       	sub	r18, r24
     5a6:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     5a8:	08 f4       	brcc	.+2      	; 0x5ac <jstk_readMask+0x3a>
     5aa:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     5ac:	8c 2f       	mov	r24, r28
     5ae:	89 df       	rcall	.-238    	; 0x4c2 <jstk_ledMask>
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <jstk_readMask+0x42>
     5b2:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     5b4:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     5b6:	08 95       	ret

000005b8 <jstk_usbTask>:
     5b8:	61 df       	rcall	.-318    	; 0x47c <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5ba:	88 23       	and	r24, r24
     5bc:	3c f0       	brlt	.+14     	; 0x5cc <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5be:	e8 2f       	mov	r30, r24
     5c0:	88 0f       	add	r24, r24
     5c2:	ff 0b       	sbc	r31, r31
     5c4:	e8 58       	subi	r30, 0x88	; 136
     5c6:	fe 4d       	sbci	r31, 0xDE	; 222
     5c8:	80 81       	ld	r24, Z
     5ca:	01 c0       	rjmp	.+2      	; 0x5ce <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5cc:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     5ce:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5d2:	2d df       	rcall	.-422    	; 0x42e <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5d4:	88 23       	and	r24, r24
     5d6:	3c f0       	brlt	.+14     	; 0x5e6 <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5d8:	e8 2f       	mov	r30, r24
     5da:	88 0f       	add	r24, r24
     5dc:	ff 0b       	sbc	r31, r31
     5de:	e8 58       	subi	r30, 0x88	; 136
     5e0:	fe 4d       	sbci	r31, 0xDE	; 222
     5e2:	80 81       	ld	r24, Z
     5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5e6:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5e8:	ee e8       	ldi	r30, 0x8E	; 142
     5ea:	f1 e2       	ldi	r31, 0x21	; 33
     5ec:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     5ee:	20 81       	ld	r18, Z
     5f0:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     5f4:	29 13       	cpse	r18, r25
     5f6:	04 c0       	rjmp	.+8      	; 0x600 <jstk_usbTask+0x48>
     5f8:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     5fc:	98 17       	cp	r25, r24
     5fe:	71 f0       	breq	.+28     	; 0x61c <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     600:	8e e8       	ldi	r24, 0x8E	; 142
     602:	91 e2       	ldi	r25, 0x21	; 33
     604:	bd d6       	rcall	.+3450   	; 0x1380 <udi_hid_generic_send_report_in>
     606:	88 23       	and	r24, r24
     608:	49 f0       	breq	.+18     	; 0x61c <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     60a:	e6 e2       	ldi	r30, 0x26	; 38
     60c:	f0 e2       	ldi	r31, 0x20	; 32
     60e:	ae e8       	ldi	r26, 0x8E	; 142
     610:	b1 e2       	ldi	r27, 0x21	; 33
     612:	8c 91       	ld	r24, X
     614:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     616:	11 96       	adiw	r26, 0x01	; 1
     618:	8c 91       	ld	r24, X
     61a:	81 83       	std	Z+1, r24	; 0x01
     61c:	08 95       	ret

0000061e <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     61e:	a9 df       	rcall	.-174    	; 0x572 <jstk_readMask>
     620:	80 93 b8 23 	sts	0x23B8, r24	; 0x8023b8 <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     624:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     628:	90 93 b9 23 	sts	0x23B9, r25	; 0x8023b9 <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     62c:	90 91 b9 23 	lds	r25, 0x23B9	; 0x8023b9 <jstk_testMode>
     630:	94 fd       	sbrc	r25, 4
     632:	07 c0       	rjmp	.+14     	; 0x642 <joystick+0x24>
        if (jstk_mask) {
     634:	88 23       	and	r24, r24
            led_allOff();
     636:	31 f0       	breq	.+12     	; 0x644 <joystick+0x26>
     638:	a2 d1       	rcall	.+836    	; 0x97e <led_allOff>
            led_on(jstk_mask);
     63a:	80 91 b8 23 	lds	r24, 0x23B8	; 0x8023b8 <jstk_mask>
     63e:	a5 c1       	rjmp	.+842    	; 0x98a <led_on>
        }
    } else {                                // normal mode
        // led_allOff();                       // for testing
        jstk_usbTask();                     // send to USB
     640:	08 95       	ret
     642:	ba cf       	rjmp	.-140    	; 0x5b8 <jstk_usbTask>
     644:	08 95       	ret

00000646 <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     646:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <kpd_keyPressed>
     64a:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <kpd_currState>
     64e:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <kpd_prevState>
     652:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <kpd_exitTestMode>
     656:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <kpd_rowVal>
     65a:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <kpd_code>
     65e:	e1 ea       	ldi	r30, 0xA1	; 161
     660:	f1 e2       	ldi	r31, 0x21	; 33
     662:	81 e6       	ldi	r24, 0x61	; 97
     664:	80 83       	st	Z, r24
     666:	80 e6       	ldi	r24, 0x60	; 96
     668:	81 83       	std	Z+1, r24	; 0x01
     66a:	12 82       	std	Z+2, r1	; 0x02
     66c:	13 82       	std	Z+3, r1	; 0x03
     66e:	8f e5       	ldi	r24, 0x5F	; 95
     670:	84 83       	std	Z+4, r24	; 0x04
     672:	8e e5       	ldi	r24, 0x5E	; 94
     674:	85 83       	std	Z+5, r24	; 0x05
     676:	16 82       	std	Z+6, r1	; 0x06
     678:	17 82       	std	Z+7, r1	; 0x07
     67a:	8d e5       	ldi	r24, 0x5D	; 93
     67c:	80 87       	std	Z+8, r24	; 0x08
     67e:	11 86       	std	Z+9, r1	; 0x09
     680:	12 86       	std	Z+10, r1	; 0x0a
     682:	13 86       	std	Z+11, r1	; 0x0b
     684:	14 86       	std	Z+12, r1	; 0x0c
     686:	15 86       	std	Z+13, r1	; 0x0d
     688:	89 e5       	ldi	r24, 0x59	; 89
     68a:	86 87       	std	Z+14, r24	; 0x0e
     68c:	8b e5       	ldi	r24, 0x5B	; 91
     68e:	87 87       	std	Z+15, r24	; 0x0f
     690:	10 8a       	std	Z+16, r1	; 0x10
     692:	11 8a       	std	Z+17, r1	; 0x11
     694:	8a e5       	ldi	r24, 0x5A	; 90
     696:	82 8b       	std	Z+18, r24	; 0x12
     698:	8c e5       	ldi	r24, 0x5C	; 92
     69a:	83 8b       	std	Z+19, r24	; 0x13
     69c:	ec e9       	ldi	r30, 0x9C	; 156
     69e:	f1 e2       	ldi	r31, 0x21	; 33
     6a0:	8e e0       	ldi	r24, 0x0E	; 14
     6a2:	80 83       	st	Z, r24
     6a4:	8d e0       	ldi	r24, 0x0D	; 13
     6a6:	81 83       	std	Z+1, r24	; 0x01
     6a8:	8b e0       	ldi	r24, 0x0B	; 11
     6aa:	82 83       	std	Z+2, r24	; 0x02
     6ac:	87 e0       	ldi	r24, 0x07	; 7
     6ae:	83 83       	std	Z+3, r24	; 0x03
     6b0:	8f ef       	ldi	r24, 0xFF	; 255
     6b2:	84 83       	std	Z+4, r24	; 0x04
     6b4:	08 95       	ret

000006b6 <keypad_poll>:
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	60 91 93 21 	lds	r22, 0x2193	; 0x802193 <prevRowMask.5328>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	0f 2e       	mov	r0, r31
     6d2:	f5 e0       	ldi	r31, 0x05	; 5
     6d4:	ff 2e       	mov	r15, r31
     6d6:	f0 2d       	mov	r31, r0
     6d8:	d4 e0       	ldi	r29, 0x04	; 4
     6da:	e0 ea       	ldi	r30, 0xA0	; 160
     6dc:	f6 e0       	ldi	r31, 0x06	; 6
     6de:	0f 2e       	mov	r0, r31
     6e0:	f0 e2       	ldi	r31, 0x20	; 32
     6e2:	cf 2e       	mov	r12, r31
     6e4:	f6 e0       	ldi	r31, 0x06	; 6
     6e6:	df 2e       	mov	r13, r31
     6e8:	f0 2d       	mov	r31, r0
     6ea:	68 94       	set
     6ec:	ee 24       	eor	r14, r14
     6ee:	e7 f8       	bld	r14, 7
     6f0:	c2 2f       	mov	r28, r18
     6f2:	c9 01       	movw	r24, r18
     6f4:	84 56       	subi	r24, 0x64	; 100
     6f6:	9e 4d       	sbci	r25, 0xDE	; 222
     6f8:	dc 01       	movw	r26, r24
     6fa:	8c 91       	ld	r24, X
     6fc:	84 83       	std	Z+4, r24	; 0x04
     6fe:	24 30       	cpi	r18, 0x04	; 4
     700:	21 f4       	brne	.+8      	; 0x70a <keypad_poll+0x54>
     702:	d6 01       	movw	r26, r12
     704:	16 96       	adiw	r26, 0x06	; 6
     706:	ec 92       	st	X, r14
     708:	03 c0       	rjmp	.+6      	; 0x710 <keypad_poll+0x5a>
     70a:	d6 01       	movw	r26, r12
     70c:	15 96       	adiw	r26, 0x05	; 5
     70e:	ec 92       	st	X, r14
     710:	80 85       	ldd	r24, Z+8	; 0x08
     712:	80 7f       	andi	r24, 0xF0	; 240
     714:	80 95       	com	r24
     716:	98 2f       	mov	r25, r24
     718:	90 7f       	andi	r25, 0xF0	; 240
     71a:	84 fd       	sbrc	r24, 4
     71c:	7f 5f       	subi	r23, 0xFF	; 255
     71e:	85 fd       	sbrc	r24, 5
     720:	7f 5f       	subi	r23, 0xFF	; 255
     722:	86 fd       	sbrc	r24, 6
     724:	7f 5f       	subi	r23, 0xFF	; 255
     726:	99 23       	and	r25, r25
     728:	0c f4       	brge	.+2      	; 0x72c <keypad_poll+0x76>
     72a:	7f 5f       	subi	r23, 0xFF	; 255
     72c:	49 2f       	mov	r20, r25
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	8a 01       	movw	r16, r20
     732:	01 50       	subi	r16, 0x01	; 1
     734:	11 09       	sbc	r17, r1
     736:	40 23       	and	r20, r16
     738:	51 23       	and	r21, r17
     73a:	45 2b       	or	r20, r21
     73c:	49 f0       	breq	.+18     	; 0x750 <keypad_poll+0x9a>
     73e:	86 2f       	mov	r24, r22
     740:	80 95       	com	r24
     742:	89 23       	and	r24, r25
     744:	09 f4       	brne	.+2      	; 0x748 <keypad_poll+0x92>
     746:	89 2f       	mov	r24, r25
     748:	48 2f       	mov	r20, r24
     74a:	41 95       	neg	r20
     74c:	84 23       	and	r24, r20
     74e:	01 c0       	rjmp	.+2      	; 0x752 <keypad_poll+0x9c>
     750:	89 2f       	mov	r24, r25
     752:	80 32       	cpi	r24, 0x20	; 32
     754:	61 f0       	breq	.+24     	; 0x76e <keypad_poll+0xb8>
     756:	20 f4       	brcc	.+8      	; 0x760 <keypad_poll+0xaa>
     758:	80 31       	cpi	r24, 0x10	; 16
     75a:	09 f4       	brne	.+2      	; 0x75e <keypad_poll+0xa8>
     75c:	43 c0       	rjmp	.+134    	; 0x7e4 <keypad_poll+0x12e>
     75e:	0b c0       	rjmp	.+22     	; 0x776 <keypad_poll+0xc0>
     760:	80 34       	cpi	r24, 0x40	; 64
     762:	09 f4       	brne	.+2      	; 0x766 <keypad_poll+0xb0>
     764:	41 c0       	rjmp	.+130    	; 0x7e8 <keypad_poll+0x132>
     766:	80 38       	cpi	r24, 0x80	; 128
     768:	31 f4       	brne	.+12     	; 0x776 <keypad_poll+0xc0>
     76a:	d3 e0       	ldi	r29, 0x03	; 3
     76c:	3e c0       	rjmp	.+124    	; 0x7ea <keypad_poll+0x134>
     76e:	88 23       	and	r24, r24
     770:	11 f0       	breq	.+4      	; 0x776 <keypad_poll+0xc0>
     772:	fc 2e       	mov	r15, r28
     774:	d1 e0       	ldi	r29, 0x01	; 1
     776:	2f 5f       	subi	r18, 0xFF	; 255
     778:	3f 4f       	sbci	r19, 0xFF	; 255
     77a:	69 2f       	mov	r22, r25
     77c:	25 30       	cpi	r18, 0x05	; 5
     77e:	31 05       	cpc	r19, r1
     780:	09 f0       	breq	.+2      	; 0x784 <keypad_poll+0xce>
     782:	b6 cf       	rjmp	.-148    	; 0x6f0 <keypad_poll+0x3a>
     784:	90 93 93 21 	sts	0x2193, r25	; 0x802193 <prevRowMask.5328>
     788:	80 e8       	ldi	r24, 0x80	; 128
     78a:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     78e:	d4 30       	cpi	r29, 0x04	; 4
     790:	e0 f4       	brcc	.+56     	; 0x7ca <keypad_poll+0x114>
     792:	ef 2d       	mov	r30, r15
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	ef 55       	subi	r30, 0x5F	; 95
     7a0:	fe 4d       	sbci	r31, 0xDE	; 222
     7a2:	ed 0f       	add	r30, r29
     7a4:	f1 1d       	adc	r31, r1
     7a6:	80 81       	ld	r24, Z
     7a8:	90 91 9a 21 	lds	r25, 0x219A	; 0x80219a <kpd_keyPressed>
     7ac:	91 11       	cpse	r25, r1
     7ae:	06 c0       	rjmp	.+12     	; 0x7bc <keypad_poll+0x106>
     7b0:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <kpd_code>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <kpd_keyPressed>
     7ba:	0d c0       	rjmp	.+26     	; 0x7d6 <keypad_poll+0x120>
     7bc:	90 91 99 21 	lds	r25, 0x2199	; 0x802199 <kpd_code>
     7c0:	89 17       	cp	r24, r25
     7c2:	49 f0       	breq	.+18     	; 0x7d6 <keypad_poll+0x120>
     7c4:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <kpd_code>
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <keypad_poll+0x120>
     7ca:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_keyPressed>
     7ce:	81 30       	cpi	r24, 0x01	; 1
     7d0:	11 f4       	brne	.+4      	; 0x7d6 <keypad_poll+0x120>
     7d2:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <kpd_keyPressed>
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	72 30       	cpi	r23, 0x02	; 2
     7da:	08 f4       	brcc	.+2      	; 0x7de <keypad_poll+0x128>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <kpd_multiPress>
     7e2:	05 c0       	rjmp	.+10     	; 0x7ee <keypad_poll+0x138>
     7e4:	d0 e0       	ldi	r29, 0x00	; 0
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <keypad_poll+0x134>
     7e8:	d2 e0       	ldi	r29, 0x02	; 2
     7ea:	fc 2e       	mov	r15, r28
     7ec:	c4 cf       	rjmp	.-120    	; 0x776 <keypad_poll+0xc0>
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	08 95       	ret

00000800 <keypad_getState>:
     800:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_keyPressed>
     804:	08 95       	ret

00000806 <keypad_report>:

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     806:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     80a:	80 93 ba 23 	sts	0x23BA, r24	; 0x8023ba <kpd_testMode>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     80e:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     812:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     816:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_currentCode = keypad_getCode();    // current code to be outputed
     81a:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <kpd_currentCode>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     81e:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <kpd_testMode>
     822:	84 fd       	sbrc	r24, 4
     824:	29 c0       	rjmp	.+82     	; 0x878 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     826:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <kpd_currState>
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	09 f0       	breq	.+2      	; 0x830 <keypad_report+0x2a>
     82e:	4d c0       	rjmp	.+154    	; 0x8ca <keypad_report+0xc4>
     830:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <kpd_prevState>
     834:	81 11       	cpse	r24, r1
     836:	49 c0       	rjmp	.+146    	; 0x8ca <keypad_report+0xc4>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
     838:	e0 91 96 21 	lds	r30, 0x2196	; 0x802196 <kpd_currentCode>
     83c:	8e 2f       	mov	r24, r30
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	fc 01       	movw	r30, r24
     842:	e9 55       	subi	r30, 0x59	; 89
     844:	f1 09       	sbc	r31, r1
     846:	e9 30       	cpi	r30, 0x09	; 9
     848:	f1 05       	cpc	r31, r1
     84a:	90 f4       	brcc	.+36     	; 0x870 <keypad_report+0x6a>
     84c:	88 27       	eor	r24, r24
     84e:	e2 50       	subi	r30, 0x02	; 2
     850:	ff 4f       	sbci	r31, 0xFF	; 255
     852:	8f 4f       	sbci	r24, 0xFF	; 255
     854:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     858:	84 e0       	ldi	r24, 0x04	; 4
     85a:	09 c0       	rjmp	.+18     	; 0x86e <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     85c:	80 e1       	ldi	r24, 0x10	; 16
     85e:	07 c0       	rjmp	.+14     	; 0x86e <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     860:	80 e2       	ldi	r24, 0x20	; 32
     862:	05 c0       	rjmp	.+10     	; 0x86e <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     864:	80 e4       	ldi	r24, 0x40	; 64
     866:	03 c0       	rjmp	.+6      	; 0x86e <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     868:	80 e8       	ldi	r24, 0x80	; 128
     86a:	01 c0       	rjmp	.+2      	; 0x86e <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     86c:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     86e:	97 d0       	rcall	.+302    	; 0x99e <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <kpd_exitTestMode>
     876:	29 c0       	rjmp	.+82     	; 0x8ca <keypad_report+0xc4>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     878:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_keyPressed>

		static bool    kpd_firstKey  = false;
		static uint8_t kpd_firstCode = 0;
		static bool    kpd_block     = false;

		if (!kpd_firstKey) {
     87c:	90 91 92 21 	lds	r25, 0x2192	; 0x802192 <kpd_firstKey.5371>
     880:	91 11       	cpse	r25, r1
     882:	0b c0       	rjmp	.+22     	; 0x89a <keypad_report+0x94>
			if (kpd_anyPressed) {
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	09 f5       	brne	.+66     	; 0x8ca <keypad_report+0xc4>
				kpd_firstKey = true;
     888:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <kpd_firstKey.5371>
				kpd_firstCode = kpd_currentCode;
     88c:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <kpd_currentCode>
     890:	80 93 91 21 	sts	0x2191, r24	; 0x802191 <kpd_firstCode.5372>
				kpd_block = false;
     894:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <kpd_block.5373>
     898:	18 c0       	rjmp	.+48     	; 0x8ca <keypad_report+0xc4>
			}
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	51 f5       	brne	.+84     	; 0x8f2 <keypad_report+0xec>
     89e:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <kpd_block.5373>
     8a2:	81 11       	cpse	r24, r1
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <keypad_report+0xc4>
     8a6:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <kpd_multiPress>
     8aa:	88 23       	and	r24, r24
     8ac:	71 f0       	breq	.+28     	; 0x8ca <keypad_report+0xc4>
				kpd_block = true;
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <kpd_block.5373>
     8b4:	0a c0       	rjmp	.+20     	; 0x8ca <keypad_report+0xc4>
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
					udi_hid_kbd_down(kpd_firstCode);
     8b6:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <kpd_firstCode.5372>
     8ba:	1f d6       	rcall	.+3134   	; 0x14fa <udi_hid_kbd_down>
					udi_hid_kbd_up(kpd_firstCode);
     8bc:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <kpd_firstCode.5372>
     8c0:	e0 d5       	rcall	.+3008   	; 0x1482 <udi_hid_kbd_up>
				}
				kpd_firstKey = false;
     8c2:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <kpd_firstKey.5371>
				kpd_block = false;
     8c6:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <kpd_block.5373>
			}
		}
	}

	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     8ca:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <kpd_testMode>
     8ce:	84 ff       	sbrs	r24, 4
     8d0:	07 c0       	rjmp	.+14     	; 0x8e0 <keypad_report+0xda>
     8d2:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <kpd_exitTestMode>
     8d6:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <keypad_report+0xda>
     8da:	51 d0       	rcall	.+162    	; 0x97e <led_allOff>
		kpd_exitTestMode = 0;
     8dc:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <kpd_exitTestMode>
	}
	kpd_prevState = kpd_currState;
     8e0:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <kpd_currState>
     8e4:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <kpd_prevState>
}
     8e8:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	c0 cf       	rjmp	.-128    	; 0x86e <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     8ee:	88 e0       	ldi	r24, 0x08	; 8
     8f0:	be cf       	rjmp	.-132    	; 0x86e <keypad_report+0x68>
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
				kpd_block = true;
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
     8f2:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <kpd_block.5373>
     8f6:	81 11       	cpse	r24, r1
     8f8:	e4 cf       	rjmp	.-56     	; 0x8c2 <keypad_report+0xbc>
     8fa:	dd cf       	rjmp	.-70     	; 0x8b6 <keypad_report+0xb0>

000008fc <keypad>:
	kpd_prevState = kpd_currState;
}

void keypad(void)
{
	keypad_poll();
     8fc:	dc de       	rcall	.-584    	; 0x6b6 <keypad_poll>
	keypad_report();
     8fe:	83 cf       	rjmp	.-250    	; 0x806 <keypad_report>
     900:	08 95       	ret

00000902 <led_updateState>:
     902:	e6 eb       	ldi	r30, 0xB6	; 182
}

void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;

    ledMap[8] = false;
     904:	f1 e2       	ldi	r31, 0x21	; 33
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	ac 01       	movw	r20, r24
     90e:	02 2e       	mov	r0, r18
     910:	02 c0       	rjmp	.+4      	; 0x916 <led_updateState+0x14>
     912:	55 95       	asr	r21
     914:	47 95       	ror	r20
     916:	0a 94       	dec	r0
     918:	e2 f7       	brpl	.-8      	; 0x912 <led_updateState+0x10>
     91a:	40 fd       	sbrc	r20, 0
     91c:	60 83       	st	Z, r22
     91e:	2f 5f       	subi	r18, 0xFF	; 255
     920:	3f 4f       	sbci	r19, 0xFF	; 255
     922:	31 96       	adiw	r30, 0x01	; 1
     924:	28 30       	cpi	r18, 0x08	; 8
     926:	31 05       	cpc	r19, r1
     928:	89 f7       	brne	.-30     	; 0x90c <led_updateState+0xa>
     92a:	08 95       	ret

0000092c <userActivity>:
     92c:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     930:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <testMode>
     934:	c0 de       	rcall	.-640    	; 0x6b6 <keypad_poll>
     936:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <testMode>
     93a:	84 ff       	sbrs	r24, 4
     93c:	0a c0       	rjmp	.+20     	; 0x952 <userActivity+0x26>
     93e:	60 df       	rcall	.-320    	; 0x800 <keypad_getState>
     940:	81 30       	cpi	r24, 0x01	; 1
     942:	49 f0       	breq	.+18     	; 0x956 <userActivity+0x2a>
     944:	16 de       	rcall	.-980    	; 0x572 <jstk_readMask>
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	81 11       	cpse	r24, r1
     94a:	01 c0       	rjmp	.+2      	; 0x94e <userActivity+0x22>
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	89 2f       	mov	r24, r25
     950:	03 c0       	rjmp	.+6      	; 0x958 <userActivity+0x2c>
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	01 c0       	rjmp	.+2      	; 0x958 <userActivity+0x2c>
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	81 70       	andi	r24, 0x01	; 1
     95a:	08 95       	ret

0000095c <led_init>:
     95c:	e0 e0       	ldi	r30, 0x00	; 0
     95e:	f6 e0       	ldi	r31, 0x06	; 6
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	81 83       	std	Z+1, r24	; 0x01
     964:	85 83       	std	Z+5, r24	; 0x05
     966:	e0 e2       	ldi	r30, 0x20	; 32
     968:	f6 e0       	ldi	r31, 0x06	; 6
     96a:	80 e4       	ldi	r24, 0x40	; 64
     96c:	81 83       	std	Z+1, r24	; 0x01
     96e:	86 83       	std	Z+6, r24	; 0x06
     970:	08 95       	ret

00000972 <led_allOn>:
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	c3 cf       	rjmp	.-122    	; 0x902 <led_updateState>
     97c:	08 95       	ret

0000097e <led_allOff>:
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	bd cf       	rjmp	.-134    	; 0x902 <led_updateState>
     988:	08 95       	ret

0000098a <led_on>:
     98a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	b8 cf       	rjmp	.-144    	; 0x902 <led_updateState>
     992:	08 95       	ret

00000994 <led_off>:
     994:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	b3 cf       	rjmp	.-154    	; 0x902 <led_updateState>
     99c:	08 95       	ret

0000099e <led_toggle>:
     99e:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     9a2:	e6 eb       	ldi	r30, 0xB6	; 182
     9a4:	f1 e2       	ldi	r31, 0x21	; 33
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	68 2f       	mov	r22, r24
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	ab 01       	movw	r20, r22
     9b2:	02 2e       	mov	r0, r18
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <led_toggle+0x1c>
     9b6:	55 95       	asr	r21
     9b8:	47 95       	ror	r20
     9ba:	0a 94       	dec	r0
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <led_toggle+0x18>
     9be:	40 ff       	sbrs	r20, 0
     9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <led_toggle+0x2a>
     9c2:	90 81       	ld	r25, Z
     9c4:	98 27       	eor	r25, r24
     9c6:	90 83       	st	Z, r25
     9c8:	2f 5f       	subi	r18, 0xFF	; 255
     9ca:	3f 4f       	sbci	r19, 0xFF	; 255
     9cc:	31 96       	adiw	r30, 0x01	; 1
     9ce:	28 30       	cpi	r18, 0x08	; 8
     9d0:	31 05       	cpc	r19, r1
     9d2:	71 f7       	brne	.-36     	; 0x9b0 <led_toggle+0x12>
     9d4:	08 95       	ret

000009d6 <led_setState>:
     9d6:	e0 e0       	ldi	r30, 0x00	; 0
     9d8:	f6 e0       	ldi	r31, 0x06	; 6
     9da:	9f ef       	ldi	r25, 0xFF	; 255
     9dc:	95 83       	std	Z+5, r25	; 0x05
     9de:	86 83       	std	Z+6, r24	; 0x06
     9e0:	e6 eb       	ldi	r30, 0xB6	; 182
     9e2:	f1 e2       	ldi	r31, 0x21	; 33
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	ac 01       	movw	r20, r24
     9ec:	02 2e       	mov	r0, r18
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <led_setState+0x1e>
     9f0:	55 95       	asr	r21
     9f2:	47 95       	ror	r20
     9f4:	0a 94       	dec	r0
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <led_setState+0x1a>
     9f8:	41 70       	andi	r20, 0x01	; 1
     9fa:	41 93       	st	Z+, r20
     9fc:	2f 5f       	subi	r18, 0xFF	; 255
     9fe:	3f 4f       	sbci	r19, 0xFF	; 255
     a00:	28 30       	cpi	r18, 0x08	; 8
     a02:	31 05       	cpc	r19, r1
     a04:	91 f7       	brne	.-28     	; 0x9ea <led_setState+0x14>
     a06:	08 95       	ret

00000a08 <led_getMap>:
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	a6 eb       	ldi	r26, 0xB6	; 182
     a0e:	b1 e2       	ldi	r27, 0x21	; 33
     a10:	66 ec       	ldi	r22, 0xC6	; 198
     a12:	71 e2       	ldi	r23, 0x21	; 33
     a14:	fd 01       	movw	r30, r26
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	c1 e0       	ldi	r28, 0x01	; 1
     a1c:	d0 e0       	ldi	r29, 0x00	; 0
     a1e:	9f 01       	movw	r18, r30
     a20:	2a 1b       	sub	r18, r26
     a22:	3b 0b       	sbc	r19, r27
     a24:	91 91       	ld	r25, Z+
     a26:	99 23       	and	r25, r25
     a28:	41 f0       	breq	.+16     	; 0xa3a <led_getMap+0x32>
     a2a:	ce 01       	movw	r24, r28
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <led_getMap+0x2a>
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	2a 95       	dec	r18
     a34:	e2 f7       	brpl	.-8      	; 0xa2e <led_getMap+0x26>
     a36:	48 2b       	or	r20, r24
     a38:	59 2b       	or	r21, r25
     a3a:	e6 17       	cp	r30, r22
     a3c:	f7 07       	cpc	r31, r23
     a3e:	79 f7       	brne	.-34     	; 0xa1e <led_getMap+0x16>
     a40:	ca 01       	movw	r24, r20
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <led_usbTask>:
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	1f 92       	push	r1
     a4e:	1f 92       	push	r1
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	d9 df       	rcall	.-78     	; 0xa08 <led_getMap>
     a56:	89 83       	std	Y+1, r24	; 0x01
     a58:	9a 83       	std	Y+2, r25	; 0x02
     a5a:	ce 01       	movw	r24, r28
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	6b dc       	rcall	.-1834   	; 0x336 <udi_hid_led_send_report_in>
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <led_statusOn>:
     a6a:	80 e4       	ldi	r24, 0x40	; 64
     a6c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <ledMap+0x8>
     a76:	08 95       	ret

00000a78 <led_statusToggle>:
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     a78:	80 e4       	ldi	r24, 0x40	; 64
     a7a:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>

    ledMap[8] = !ledMap[8];
     a7e:	e6 eb       	ldi	r30, 0xB6	; 182
     a80:	f1 e2       	ldi	r31, 0x21	; 33
     a82:	90 85       	ldd	r25, Z+8	; 0x08
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	89 27       	eor	r24, r25
     a88:	80 87       	std	Z+8, r24	; 0x08
     a8a:	08 95       	ret

00000a8c <testIndicator>:
}

void testIndicator(void) { // blink status LED when in test mode
    sof_ms++;
     a8c:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <sof_ms>
     a90:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <sof_ms+0x1>
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	80 93 c7 21 	sts	0x21C7, r24	; 0x8021c7 <sof_ms>
     a9a:	90 93 c8 21 	sts	0x21C8, r25	; 0x8021c8 <sof_ms+0x1>

    if ((PORTB.IN & PIN4_bm) == 0) {
     a9e:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     aa2:	84 fd       	sbrc	r24, 4
     aa4:	0d c0       	rjmp	.+26     	; 0xac0 <testIndicator+0x34>
        if (sof_ms >= 500) {
     aa6:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <sof_ms>
     aaa:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <sof_ms+0x1>
     aae:	84 3f       	cpi	r24, 0xF4	; 244
     ab0:	91 40       	sbci	r25, 0x01	; 1
     ab2:	58 f0       	brcs	.+22     	; 0xaca <testIndicator+0x3e>
            led_statusToggle();
     ab4:	e1 df       	rcall	.-62     	; 0xa78 <led_statusToggle>
            sof_ms = 0;
     ab6:	10 92 c7 21 	sts	0x21C7, r1	; 0x8021c7 <sof_ms>
     aba:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <sof_ms+0x1>
        }
    } else {
        led_statusOn();
     abe:	08 95       	ret
     ac0:	d4 df       	rcall	.-88     	; 0xa6a <led_statusOn>
        sof_ms = 0;
     ac2:	10 92 c7 21 	sts	0x21C7, r1	; 0x8021c7 <sof_ms>
     ac6:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <sof_ms+0x1>
     aca:	08 95       	ret

00000acc <startupSequence>:
            (keypad_getState()   == KEYPAD_PRESSED) ||
            (jstk_readMask()     != 0);
}

void startupSequence(uint8_t sequence) // startup LED animation
{
     acc:	7f 92       	push	r7
     ace:	8f 92       	push	r8
     ad0:	9f 92       	push	r9
     ad2:	af 92       	push	r10
     ad4:	bf 92       	push	r11
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	28 97       	sbiw	r28, 0x08	; 8
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	de bf       	out	0x3e, r29	; 62
    const uint8_t seq[8] = {
     af0:	98 e0       	ldi	r25, 0x08	; 8
     af2:	e0 e7       	ldi	r30, 0x70	; 112
     af4:	f1 e2       	ldi	r31, 0x21	; 33
     af6:	de 01       	movw	r26, r28
     af8:	11 96       	adiw	r26, 0x01	; 1
     afa:	01 90       	ld	r0, Z+
     afc:	0d 92       	st	X+, r0
     afe:	9a 95       	dec	r25
     b00:	e1 f7       	brne	.-8      	; 0xafa <startupSequence+0x2e>
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	fc 01       	movw	r30, r24
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	e8 30       	cpi	r30, 0x08	; 8
     b0a:	f1 05       	cpc	r31, r1
     b0c:	08 f0       	brcs	.+2      	; 0xb10 <startupSequence+0x44>
     b0e:	03 c3       	rjmp	.+1542   	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
     b10:	88 27       	eor	r24, r24
     b12:	e9 5f       	subi	r30, 0xF9	; 249
     b14:	fe 4f       	sbci	r31, 0xFE	; 254
     b16:	8f 4f       	sbci	r24, 0xFF	; 255
     b18:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__tablejump2__>
            }
            led_allOff();
            break;
        case 6:
            /* ---------------- stripes idk ---------------- */
            while (!user_active) {
     b1c:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     b20:	88 23       	and	r24, r24
     b22:	09 f4       	brne	.+2      	; 0xb26 <startupSequence+0x5a>
     b24:	d1 c1       	rjmp	.+930    	; 0xec8 <startupSequence+0x3fc>
     b26:	0b c2       	rjmp	.+1046   	; 0xf3e <startupSequence+0x472>
    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     b28:	f8 01       	movw	r30, r16
     b2a:	f1 90       	ld	r15, Z+
     b2c:	8f 01       	movw	r16, r30
     b2e:	8f 2d       	mov	r24, r15
     b30:	2c df       	rcall	.-424    	; 0x98a <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b32:	ff e0       	ldi	r31, 0x0F	; 15
     b34:	28 e9       	ldi	r18, 0x98	; 152
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	f1 50       	subi	r31, 0x01	; 1
     b3a:	20 40       	sbci	r18, 0x00	; 0
     b3c:	80 40       	sbci	r24, 0x00	; 0
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <startupSequence+0x6c>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <startupSequence+0x76>
     b42:	00 00       	nop
                    _delay_ms(850);
                    led_off(seq[i]);
     b44:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     b46:	26 df       	rcall	.-436    	; 0x994 <led_off>
     b48:	f1 de       	rcall	.-542    	; 0x92c <userActivity>
     b4a:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5529>

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
     b4e:	a0 16       	cp	r10, r16
     b50:	b1 06       	cpc	r11, r17
     b52:	09 f4       	brne	.+2      	; 0xb56 <startupSequence+0x8a>
     b54:	87 c2       	rjmp	.+1294   	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
     b56:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     b5a:	88 23       	and	r24, r24
     b5c:	29 f3       	breq	.-54     	; 0xb28 <startupSequence+0x5c>
     b5e:	82 c2       	rjmp	.+1284   	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     b60:	f8 01       	movw	r30, r16
     b62:	f2 90       	ld	r15, -Z
     b64:	8f 01       	movw	r16, r30
     b66:	8f 2d       	mov	r24, r15
     b68:	10 df       	rcall	.-480    	; 0x98a <led_on>
     b6a:	ff e0       	ldi	r31, 0x0F	; 15
     b6c:	28 e9       	ldi	r18, 0x98	; 152
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	f1 50       	subi	r31, 0x01	; 1
     b72:	20 40       	sbci	r18, 0x00	; 0
     b74:	80 40       	sbci	r24, 0x00	; 0
     b76:	e1 f7       	brne	.-8      	; 0xb70 <startupSequence+0xa4>
                    _delay_ms(850);
                    led_off(seq[i]);
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <startupSequence+0xae>
     b7a:	00 00       	nop
     b7c:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     b7e:	0a df       	rcall	.-492    	; 0x994 <led_off>
     b80:	d5 de       	rcall	.-598    	; 0x92c <userActivity>
     b82:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5529>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     b86:	c0 16       	cp	r12, r16
     b88:	d1 06       	cpc	r13, r17
     b8a:	61 f0       	breq	.+24     	; 0xba4 <startupSequence+0xd8>
     b8c:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     b90:	88 23       	and	r24, r24
     b92:	31 f3       	breq	.-52     	; 0xb60 <startupSequence+0x94>
     b94:	07 c0       	rjmp	.+14     	; 0xba4 <startupSequence+0xd8>
     b96:	5e 01       	movw	r10, r28
     b98:	99 e0       	ldi	r25, 0x09	; 9
     b9a:	a9 0e       	add	r10, r25
     b9c:	b1 1c       	adc	r11, r1
     b9e:	fe 01       	movw	r30, r28
     ba0:	31 96       	adiw	r30, 0x01	; 1
     ba2:	6f 01       	movw	r12, r30
    static volatile bool user_active = false;

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
     ba4:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     ba8:	81 11       	cpse	r24, r1
     baa:	06 c0       	rjmp	.+12     	; 0xbb8 <startupSequence+0xec>
                for (int i = 0; i < 8 && !user_active; i++) {
     bac:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     bb0:	88 23       	and	r24, r24
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <startupSequence+0xea>
     bb4:	9b c2       	rjmp	.+1334   	; 0x10ec <__EEPROM_REGION_LENGTH__+0xec>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
            }
            led_allOff();
     bb6:	56 c2       	rjmp	.+1196   	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
            break;
     bb8:	e2 de       	rcall	.-572    	; 0x97e <led_allOff>
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     bba:	ad c2       	rjmp	.+1370   	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
     bbc:	f8 01       	movw	r30, r16
     bbe:	e2 90       	ld	r14, -Z
     bc0:	8f 01       	movw	r16, r30
     bc2:	8e 2d       	mov	r24, r14
                    led_on(seq[right]);
     bc4:	e2 de       	rcall	.-572    	; 0x98a <led_on>
     bc6:	f4 01       	movw	r30, r8
     bc8:	f1 90       	ld	r15, Z+
     bca:	4f 01       	movw	r8, r30
     bcc:	8f 2d       	mov	r24, r15
     bce:	dd de       	rcall	.-582    	; 0x98a <led_on>
     bd0:	ff e1       	ldi	r31, 0x1F	; 31
     bd2:	2f eb       	ldi	r18, 0xBF	; 191
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	f1 50       	subi	r31, 0x01	; 1
     bd8:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     bda:	80 40       	sbci	r24, 0x00	; 0
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <startupSequence+0x10a>
                    led_off(seq[right]);
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <startupSequence+0x114>
     be0:	00 00       	nop
     be2:	8e 2d       	mov	r24, r14

                    keypad_poll();
     be4:	d7 de       	rcall	.-594    	; 0x994 <led_off>
     be6:	8f 2d       	mov	r24, r15
                    if (keypad_getState() == KEYPAD_PRESSED)
     be8:	d5 de       	rcall	.-598    	; 0x994 <led_off>
     bea:	65 dd       	rcall	.-1334   	; 0x6b6 <keypad_poll>
     bec:	09 de       	rcall	.-1006   	; 0x800 <keypad_getState>
     bee:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     bf0:	11 f4       	brne	.+4      	; 0xbf6 <startupSequence+0x12a>
     bf2:	70 92 b5 21 	sts	0x21B5, r7	; 0x8021b5 <user_active.5529>
                    if (jstk_readMask() != 0)
     bf6:	bd dc       	rcall	.-1670   	; 0x572 <jstk_readMask>
     bf8:	81 11       	cpse	r24, r1
                        user_active = true;
     bfa:	70 92 b5 21 	sts	0x21B5, r7	; 0x8021b5 <user_active.5529>
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     bfe:	0a 15       	cp	r16, r10
     c00:	1b 05       	cpc	r17, r11
     c02:	09 f4       	brne	.+2      	; 0xc06 <startupSequence+0x13a>
     c04:	34 c2       	rjmp	.+1128   	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
     c06:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     c0a:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     c0c:	b9 f2       	breq	.-82     	; 0xbbc <startupSequence+0xf0>
     c0e:	2f c2       	rjmp	.+1118   	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
     c10:	f4 01       	movw	r30, r8
     c12:	e1 90       	ld	r14, Z+
     c14:	4f 01       	movw	r8, r30
     c16:	8e 2d       	mov	r24, r14
                    led_on(seq[right]);
     c18:	b8 de       	rcall	.-656    	; 0x98a <led_on>
     c1a:	f8 01       	movw	r30, r16
     c1c:	f2 90       	ld	r15, -Z
     c1e:	8f 01       	movw	r16, r30
     c20:	8f 2d       	mov	r24, r15
     c22:	b3 de       	rcall	.-666    	; 0x98a <led_on>
     c24:	ff e1       	ldi	r31, 0x1F	; 31
     c26:	2f eb       	ldi	r18, 0xBF	; 191
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	f1 50       	subi	r31, 0x01	; 1
     c2c:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     c2e:	80 40       	sbci	r24, 0x00	; 0
     c30:	e1 f7       	brne	.-8      	; 0xc2a <startupSequence+0x15e>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <startupSequence+0x168>
                    led_off(seq[right]);
     c34:	00 00       	nop
     c36:	8e 2d       	mov	r24, r14
     c38:	ad de       	rcall	.-678    	; 0x994 <led_off>

                    keypad_poll();
     c3a:	8f 2d       	mov	r24, r15
     c3c:	ab de       	rcall	.-682    	; 0x994 <led_off>
                    if (keypad_getState() == KEYPAD_PRESSED)
     c3e:	3b dd       	rcall	.-1418   	; 0x6b6 <keypad_poll>
     c40:	df dd       	rcall	.-1090   	; 0x800 <keypad_getState>
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	11 f4       	brne	.+4      	; 0xc4a <startupSequence+0x17e>
                        user_active = true;
     c46:	70 92 b5 21 	sts	0x21B5, r7	; 0x8021b5 <user_active.5529>
                    if (jstk_readMask() != 0)
     c4a:	93 dc       	rcall	.-1754   	; 0x572 <jstk_readMask>
     c4c:	81 11       	cpse	r24, r1
     c4e:	70 92 b5 21 	sts	0x21B5, r7	; 0x8021b5 <user_active.5529>
                        user_active = true;
     c52:	c0 16       	cp	r12, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     c54:	d1 06       	cpc	r13, r17
     c56:	71 f0       	breq	.+28     	; 0xc74 <startupSequence+0x1a8>
     c58:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     c5c:	88 23       	and	r24, r24
     c5e:	c1 f2       	breq	.-80     	; 0xc10 <startupSequence+0x144>
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <startupSequence+0x1a8>
     c62:	fe 01       	movw	r30, r28
     c64:	31 96       	adiw	r30, 0x01	; 1
     c66:	5f 01       	movw	r10, r30

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     c68:	77 24       	eor	r7, r7
     c6a:	73 94       	inc	r7
     c6c:	6e 01       	movw	r12, r28
     c6e:	f5 e0       	ldi	r31, 0x05	; 5
     c70:	cf 0e       	add	r12, r31
            }
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
     c72:	d1 1c       	adc	r13, r1
     c74:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
                for (int i = 0; i < 4 && !user_active; i++) {
     c78:	81 11       	cpse	r24, r1
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <startupSequence+0x1c4>
     c7c:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     c80:	81 11       	cpse	r24, r1
     c82:	f5 c1       	rjmp	.+1002   	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
     c84:	4e 01       	movw	r8, r28
     c86:	25 e0       	ldi	r18, 0x05	; 5
     c88:	82 0e       	add	r8, r18
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     c8a:	91 1c       	adc	r9, r1
     c8c:	84 01       	movw	r16, r8
            break;
     c8e:	96 cf       	rjmp	.-212    	; 0xbbc <startupSequence+0xf0>
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     c90:	76 de       	rcall	.-788    	; 0x97e <led_allOff>
     c92:	41 c2       	rjmp	.+1154   	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
     c94:	f8 01       	movw	r30, r16
     c96:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     c98:	8f 01       	movw	r16, r30
     c9a:	77 de       	rcall	.-786    	; 0x98a <led_on>
     c9c:	f7 01       	movw	r30, r14
     c9e:	81 91       	ld	r24, Z+
     ca0:	7f 01       	movw	r14, r30
     ca2:	73 de       	rcall	.-794    	; 0x98a <led_on>
     ca4:	ff e2       	ldi	r31, 0x2F	; 47
     ca6:	27 e5       	ldi	r18, 0x57	; 87
     ca8:	85 e0       	ldi	r24, 0x05	; 5
     caa:	f1 50       	subi	r31, 0x01	; 1
     cac:	20 40       	sbci	r18, 0x00	; 0
     cae:	80 40       	sbci	r24, 0x00	; 0
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <startupSequence+0x1de>
                    _delay_ms(1750);

                    keypad_poll();
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <startupSequence+0x1e8>
     cb4:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     cb6:	ff dc       	rcall	.-1538   	; 0x6b6 <keypad_poll>
     cb8:	a3 dd       	rcall	.-1210   	; 0x800 <keypad_getState>
     cba:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     cbc:	11 f4       	brne	.+4      	; 0xcc2 <startupSequence+0x1f6>
     cbe:	90 92 b5 21 	sts	0x21B5, r9	; 0x8021b5 <user_active.5529>
                    if (jstk_readMask() != 0)
     cc2:	57 dc       	rcall	.-1874   	; 0x572 <jstk_readMask>
     cc4:	81 11       	cpse	r24, r1
                        user_active = true;
     cc6:	90 92 b5 21 	sts	0x21B5, r9	; 0x8021b5 <user_active.5529>
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     cca:	a0 16       	cp	r10, r16
     ccc:	b1 06       	cpc	r11, r17
     cce:	09 f4       	brne	.+2      	; 0xcd2 <startupSequence+0x206>
     cd0:	d9 c1       	rjmp	.+946    	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
     cd2:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     cd6:	88 23       	and	r24, r24
     cd8:	e9 f2       	breq	.-70     	; 0xc94 <startupSequence+0x1c8>
     cda:	d4 c1       	rjmp	.+936    	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
     cdc:	f7 01       	movw	r30, r14
     cde:	81 91       	ld	r24, Z+
                    led_off(seq[right]);
     ce0:	7f 01       	movw	r14, r30
     ce2:	58 de       	rcall	.-848    	; 0x994 <led_off>
     ce4:	f8 01       	movw	r30, r16
     ce6:	82 91       	ld	r24, -Z
     ce8:	8f 01       	movw	r16, r30
     cea:	54 de       	rcall	.-856    	; 0x994 <led_off>
     cec:	ff e2       	ldi	r31, 0x2F	; 47
     cee:	27 e5       	ldi	r18, 0x57	; 87
     cf0:	85 e0       	ldi	r24, 0x05	; 5
     cf2:	f1 50       	subi	r31, 0x01	; 1
     cf4:	20 40       	sbci	r18, 0x00	; 0
     cf6:	80 40       	sbci	r24, 0x00	; 0
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <startupSequence+0x226>
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <startupSequence+0x230>
                    _delay_ms(1750);

                    keypad_poll();
     cfc:	00 00       	nop
     cfe:	db dc       	rcall	.-1610   	; 0x6b6 <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     d00:	7f dd       	rcall	.-1282   	; 0x800 <keypad_getState>
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	11 f4       	brne	.+4      	; 0xd0a <startupSequence+0x23e>
     d06:	90 92 b5 21 	sts	0x21B5, r9	; 0x8021b5 <user_active.5529>
                        user_active = true;
     d0a:	33 dc       	rcall	.-1946   	; 0x572 <jstk_readMask>
                    if (jstk_readMask() != 0)
     d0c:	81 11       	cpse	r24, r1
     d0e:	90 92 b5 21 	sts	0x21B5, r9	; 0x8021b5 <user_active.5529>
                        user_active = true;
     d12:	c0 16       	cp	r12, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     d14:	d1 06       	cpc	r13, r17
     d16:	71 f0       	breq	.+28     	; 0xd34 <startupSequence+0x268>
     d18:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     d1c:	88 23       	and	r24, r24
     d1e:	f1 f2       	breq	.-68     	; 0xcdc <startupSequence+0x210>
     d20:	09 c0       	rjmp	.+18     	; 0xd34 <startupSequence+0x268>
     d22:	fe 01       	movw	r30, r28
     d24:	31 96       	adiw	r30, 0x01	; 1

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     d26:	5f 01       	movw	r10, r30
     d28:	99 24       	eor	r9, r9
     d2a:	93 94       	inc	r9
     d2c:	6e 01       	movw	r12, r28
     d2e:	f5 e0       	ldi	r31, 0x05	; 5
     d30:	cf 0e       	add	r12, r31
            }
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
     d32:	d1 1c       	adc	r13, r1
     d34:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
                for (int i = 0; i < 4 && !user_active; i++) {
     d38:	81 11       	cpse	r24, r1
     d3a:	0a c0       	rjmp	.+20     	; 0xd50 <startupSequence+0x284>
     d3c:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     d40:	81 11       	cpse	r24, r1
     d42:	a0 c1       	rjmp	.+832    	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
     d44:	7e 01       	movw	r14, r28
     d46:	25 e0       	ldi	r18, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     d48:	e2 0e       	add	r14, r18
     d4a:	f1 1c       	adc	r15, r1
            break;
     d4c:	87 01       	movw	r16, r14
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     d4e:	a2 cf       	rjmp	.-188    	; 0xc94 <startupSequence+0x1c8>
     d50:	16 de       	rcall	.-980    	; 0x97e <led_allOff>
     d52:	e1 c1       	rjmp	.+962    	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
     d54:	f8 01       	movw	r30, r16
     d56:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     d58:	8f 01       	movw	r16, r30
     d5a:	17 de       	rcall	.-978    	; 0x98a <led_on>
     d5c:	f7 01       	movw	r30, r14
     d5e:	81 91       	ld	r24, Z+
     d60:	7f 01       	movw	r14, r30
     d62:	13 de       	rcall	.-986    	; 0x98a <led_on>
     d64:	ff e2       	ldi	r31, 0x2F	; 47
     d66:	27 e5       	ldi	r18, 0x57	; 87
     d68:	85 e0       	ldi	r24, 0x05	; 5
     d6a:	f1 50       	subi	r31, 0x01	; 1
     d6c:	20 40       	sbci	r18, 0x00	; 0
     d6e:	80 40       	sbci	r24, 0x00	; 0
                    _delay_ms(1750);

                    keypad_poll();
     d70:	e1 f7       	brne	.-8      	; 0xd6a <startupSequence+0x29e>
                    if (keypad_getState() == KEYPAD_PRESSED)
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <startupSequence+0x2a8>
     d74:	00 00       	nop
     d76:	9f dc       	rcall	.-1730   	; 0x6b6 <keypad_poll>
                        user_active = true;
     d78:	43 dd       	rcall	.-1402   	; 0x800 <keypad_getState>
                    if (jstk_readMask() != 0)
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	11 f4       	brne	.+4      	; 0xd82 <startupSequence+0x2b6>
     d7e:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5529>
                        user_active = true;
     d82:	f7 db       	rcall	.-2066   	; 0x572 <jstk_readMask>
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     d84:	81 11       	cpse	r24, r1
     d86:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5529>
     d8a:	c0 16       	cp	r12, r16
     d8c:	d1 06       	cpc	r13, r17
     d8e:	09 f4       	brne	.+2      	; 0xd92 <startupSequence+0x2c6>
     d90:	84 c1       	rjmp	.+776    	; 0x109a <__EEPROM_REGION_LENGTH__+0x9a>
     d92:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     d96:	88 23       	and	r24, r24
     d98:	e9 f2       	breq	.-70     	; 0xd54 <startupSequence+0x288>
     d9a:	7f c1       	rjmp	.+766    	; 0x109a <__EEPROM_REGION_LENGTH__+0x9a>
     d9c:	f8 01       	movw	r30, r16
     d9e:	82 91       	ld	r24, -Z
                    led_off(seq[right]);
     da0:	8f 01       	movw	r16, r30
     da2:	f8 dd       	rcall	.-1040   	; 0x994 <led_off>
     da4:	f7 01       	movw	r30, r14
     da6:	81 91       	ld	r24, Z+
     da8:	7f 01       	movw	r14, r30
     daa:	f4 dd       	rcall	.-1048   	; 0x994 <led_off>
     dac:	ff e2       	ldi	r31, 0x2F	; 47
     dae:	27 e5       	ldi	r18, 0x57	; 87
     db0:	85 e0       	ldi	r24, 0x05	; 5
     db2:	f1 50       	subi	r31, 0x01	; 1
     db4:	20 40       	sbci	r18, 0x00	; 0
     db6:	80 40       	sbci	r24, 0x00	; 0
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <startupSequence+0x2e6>
                    _delay_ms(1750);

                    keypad_poll();
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <startupSequence+0x2f0>
     dbc:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     dbe:	7b dc       	rcall	.-1802   	; 0x6b6 <keypad_poll>
     dc0:	1f dd       	rcall	.-1474   	; 0x800 <keypad_getState>
     dc2:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     dc4:	11 f4       	brne	.+4      	; 0xdca <startupSequence+0x2fe>
                    if (jstk_readMask() != 0)
     dc6:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5529>
     dca:	d3 db       	rcall	.-2138   	; 0x572 <jstk_readMask>
                        user_active = true;
     dcc:	81 11       	cpse	r24, r1
     dce:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5529>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     dd2:	c0 16       	cp	r12, r16
     dd4:	d1 06       	cpc	r13, r17
     dd6:	51 f0       	breq	.+20     	; 0xdec <startupSequence+0x320>
     dd8:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     ddc:	88 23       	and	r24, r24
     dde:	f1 f2       	breq	.-68     	; 0xd9c <startupSequence+0x2d0>
     de0:	05 c0       	rjmp	.+10     	; 0xdec <startupSequence+0x320>

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     de2:	fe 01       	movw	r30, r28
     de4:	31 96       	adiw	r30, 0x01	; 1
            }
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
     de6:	6f 01       	movw	r12, r30
     de8:	bb 24       	eor	r11, r11
     dea:	b3 94       	inc	r11
     dec:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
                for (int i = 0; i < 4 && !user_active; i++) {
     df0:	81 11       	cpse	r24, r1
     df2:	0a c0       	rjmp	.+20     	; 0xe08 <startupSequence+0x33c>
     df4:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     df8:	81 11       	cpse	r24, r1
     dfa:	4f c1       	rjmp	.+670    	; 0x109a <__EEPROM_REGION_LENGTH__+0x9a>
     dfc:	7e 01       	movw	r14, r28
     dfe:	f5 e0       	ldi	r31, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     e00:	ef 0e       	add	r14, r31
     e02:	f1 1c       	adc	r15, r1
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     e04:	87 01       	movw	r16, r14
     e06:	a6 cf       	rjmp	.-180    	; 0xd54 <startupSequence+0x288>
     e08:	ba dd       	rcall	.-1164   	; 0x97e <led_allOff>
     e0a:	85 c1       	rjmp	.+778    	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
     e0c:	f7 01       	movw	r30, r14
                    led_on(seq[right]);
     e0e:	81 91       	ld	r24, Z+
     e10:	7f 01       	movw	r14, r30
     e12:	bb dd       	rcall	.-1162   	; 0x98a <led_on>
     e14:	f8 01       	movw	r30, r16
     e16:	82 91       	ld	r24, -Z
     e18:	8f 01       	movw	r16, r30
     e1a:	b7 dd       	rcall	.-1170   	; 0x98a <led_on>
     e1c:	ff e2       	ldi	r31, 0x2F	; 47
     e1e:	27 e5       	ldi	r18, 0x57	; 87
     e20:	85 e0       	ldi	r24, 0x05	; 5
     e22:	f1 50       	subi	r31, 0x01	; 1
                    _delay_ms(1750);

                    keypad_poll();
     e24:	20 40       	sbci	r18, 0x00	; 0
     e26:	80 40       	sbci	r24, 0x00	; 0
                    if (keypad_getState() == KEYPAD_PRESSED)
     e28:	e1 f7       	brne	.-8      	; 0xe22 <startupSequence+0x356>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <startupSequence+0x360>
     e2c:	00 00       	nop
     e2e:	43 dc       	rcall	.-1914   	; 0x6b6 <keypad_poll>
                        user_active = true;
     e30:	e7 dc       	rcall	.-1586   	; 0x800 <keypad_getState>
     e32:	81 30       	cpi	r24, 0x01	; 1
                    if (jstk_readMask() != 0)
     e34:	11 f4       	brne	.+4      	; 0xe3a <startupSequence+0x36e>
     e36:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5529>
                        user_active = true;
     e3a:	9b db       	rcall	.-2250   	; 0x572 <jstk_readMask>
     e3c:	81 11       	cpse	r24, r1
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
     e3e:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5529>
     e42:	0c 15       	cp	r16, r12
     e44:	1d 05       	cpc	r17, r13
     e46:	09 f4       	brne	.+2      	; 0xe4a <startupSequence+0x37e>
     e48:	31 c1       	rjmp	.+610    	; 0x10ac <__EEPROM_REGION_LENGTH__+0xac>
     e4a:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     e4e:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     e50:	e9 f2       	breq	.-70     	; 0xe0c <startupSequence+0x340>
     e52:	2c c1       	rjmp	.+600    	; 0x10ac <__EEPROM_REGION_LENGTH__+0xac>
     e54:	f7 01       	movw	r30, r14
     e56:	81 91       	ld	r24, Z+
     e58:	7f 01       	movw	r14, r30
                    led_off(seq[right]);
     e5a:	9c dd       	rcall	.-1224   	; 0x994 <led_off>
     e5c:	f8 01       	movw	r30, r16
     e5e:	82 91       	ld	r24, -Z
     e60:	8f 01       	movw	r16, r30
     e62:	98 dd       	rcall	.-1232   	; 0x994 <led_off>
     e64:	ff e2       	ldi	r31, 0x2F	; 47
     e66:	27 e5       	ldi	r18, 0x57	; 87
     e68:	85 e0       	ldi	r24, 0x05	; 5
     e6a:	f1 50       	subi	r31, 0x01	; 1
     e6c:	20 40       	sbci	r18, 0x00	; 0
     e6e:	80 40       	sbci	r24, 0x00	; 0
     e70:	e1 f7       	brne	.-8      	; 0xe6a <startupSequence+0x39e>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <startupSequence+0x3a8>
                    _delay_ms(1750);

                    keypad_poll();
     e74:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     e76:	1f dc       	rcall	.-1986   	; 0x6b6 <keypad_poll>
     e78:	c3 dc       	rcall	.-1658   	; 0x800 <keypad_getState>
     e7a:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     e7c:	11 f4       	brne	.+4      	; 0xe82 <startupSequence+0x3b6>
     e7e:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5529>
                    if (jstk_readMask() != 0)
     e82:	77 db       	rcall	.-2322   	; 0x572 <jstk_readMask>
     e84:	81 11       	cpse	r24, r1
                        user_active = true;
     e86:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5529>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e8a:	0c 15       	cp	r16, r12
     e8c:	1d 05       	cpc	r17, r13
     e8e:	59 f0       	breq	.+22     	; 0xea6 <startupSequence+0x3da>
     e90:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     e94:	88 23       	and	r24, r24
     e96:	f1 f2       	breq	.-68     	; 0xe54 <startupSequence+0x388>
     e98:	06 c0       	rjmp	.+12     	; 0xea6 <startupSequence+0x3da>
     e9a:	6e 01       	movw	r12, r28
     e9c:	95 e0       	ldi	r25, 0x05	; 5

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     e9e:	c9 0e       	add	r12, r25
     ea0:	d1 1c       	adc	r13, r1
            }
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
     ea2:	bb 24       	eor	r11, r11
     ea4:	b3 94       	inc	r11
     ea6:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
                for (int i = 3; i >= 0 && !user_active; i--) {
     eaa:	81 11       	cpse	r24, r1
     eac:	0b c0       	rjmp	.+22     	; 0xec4 <startupSequence+0x3f8>
     eae:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     eb2:	81 11       	cpse	r24, r1
     eb4:	fb c0       	rjmp	.+502    	; 0x10ac <__EEPROM_REGION_LENGTH__+0xac>
     eb6:	fe 01       	movw	r30, r28
     eb8:	31 96       	adiw	r30, 0x01	; 1
     eba:	7f 01       	movw	r14, r30
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     ebc:	8e 01       	movw	r16, r28
     ebe:	07 5f       	subi	r16, 0xF7	; 247
            break;
     ec0:	1f 4f       	sbci	r17, 0xFF	; 255
        case 6:
            /* ---------------- stripes idk ---------------- */
            while (!user_active) {
                led_allOn();
     ec2:	a4 cf       	rjmp	.-184    	; 0xe0c <startupSequence+0x340>
     ec4:	5c dd       	rcall	.-1352   	; 0x97e <led_allOff>
     ec6:	27 c1       	rjmp	.+590    	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
     ec8:	54 dd       	rcall	.-1368   	; 0x972 <led_allOn>
     eca:	ff e7       	ldi	r31, 0x7F	; 127
     ecc:	2a e1       	ldi	r18, 0x1A	; 26
     ece:	86 e0       	ldi	r24, 0x06	; 6
     ed0:	f1 50       	subi	r31, 0x01	; 1
     ed2:	20 40       	sbci	r18, 0x00	; 0
     ed4:	80 40       	sbci	r24, 0x00	; 0
                _delay_ms(2000);
                user_active = userActivity();
     ed6:	e1 f7       	brne	.-8      	; 0xed0 <startupSequence+0x404>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <startupSequence+0x40e>
     eda:	00 00       	nop

                led_allOff();
     edc:	27 dd       	rcall	.-1458   	; 0x92c <userActivity>
     ede:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5529>
     ee2:	4d dd       	rcall	.-1382   	; 0x97e <led_allOff>
     ee4:	9f e7       	ldi	r25, 0x7F	; 127
     ee6:	ea e1       	ldi	r30, 0x1A	; 26
     ee8:	f6 e0       	ldi	r31, 0x06	; 6
     eea:	91 50       	subi	r25, 0x01	; 1
     eec:	e0 40       	sbci	r30, 0x00	; 0
     eee:	f0 40       	sbci	r31, 0x00	; 0
                _delay_ms(2000);
                user_active = userActivity();
     ef0:	e1 f7       	brne	.-8      	; 0xeea <startupSequence+0x41e>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <startupSequence+0x428>
     ef4:	00 00       	nop
     ef6:	1a dd       	rcall	.-1484   	; 0x92c <userActivity>

                led_setState(0x55);
     ef8:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5529>
     efc:	85 e5       	ldi	r24, 0x55	; 85
     efe:	6b dd       	rcall	.-1322   	; 0x9d6 <led_setState>
     f00:	2f e7       	ldi	r18, 0x7F	; 127
     f02:	8a e1       	ldi	r24, 0x1A	; 26
     f04:	96 e0       	ldi	r25, 0x06	; 6
     f06:	21 50       	subi	r18, 0x01	; 1
     f08:	80 40       	sbci	r24, 0x00	; 0
     f0a:	90 40       	sbci	r25, 0x00	; 0
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <startupSequence+0x43a>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <startupSequence+0x444>
                _delay_ms(2000);
                user_active = userActivity();
     f10:	00 00       	nop
     f12:	0c dd       	rcall	.-1512   	; 0x92c <userActivity>
     f14:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5529>

                led_setState(0xAA);
     f18:	8a ea       	ldi	r24, 0xAA	; 170
     f1a:	5d dd       	rcall	.-1350   	; 0x9d6 <led_setState>
     f1c:	ef e7       	ldi	r30, 0x7F	; 127
     f1e:	fa e1       	ldi	r31, 0x1A	; 26
     f20:	26 e0       	ldi	r18, 0x06	; 6
     f22:	e1 50       	subi	r30, 0x01	; 1
     f24:	f0 40       	sbci	r31, 0x00	; 0
     f26:	20 40       	sbci	r18, 0x00	; 0
     f28:	e1 f7       	brne	.-8      	; 0xf22 <startupSequence+0x456>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <startupSequence+0x460>
                _delay_ms(2000);
                user_active = userActivity();
     f2c:	00 00       	nop
     f2e:	fe dc       	rcall	.-1540   	; 0x92c <userActivity>
     f30:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5529>
            }
            led_allOff();
            break;
        case 6:
            /* ---------------- stripes idk ---------------- */
            while (!user_active) {
     f34:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     f38:	88 23       	and	r24, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <startupSequence+0x472>

                led_setState(0xAA);
                _delay_ms(2000);
                user_active = userActivity();
            }
            led_allOff();
     f3c:	c5 cf       	rjmp	.-118    	; 0xec8 <startupSequence+0x3fc>
     f3e:	1f dd       	rcall	.-1474   	; 0x97e <led_allOff>
            break;
     f40:	ea c0       	rjmp	.+468    	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
            uint8_t pos = 0;
            int8_t  dir = +1;

            while (!user_active) {
                uint8_t mask = (0x07 << pos);
                led_setState(mask);
     f42:	8f 2d       	mov	r24, r15
     f44:	01 2e       	mov	r0, r17
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <startupSequence+0x47e>
     f48:	88 0f       	add	r24, r24
     f4a:	0a 94       	dec	r0
     f4c:	ea f7       	brpl	.-6      	; 0xf48 <startupSequence+0x47c>
     f4e:	43 dd       	rcall	.-1402   	; 0x9d6 <led_setState>
     f50:	8f ed       	ldi	r24, 0xDF	; 223
     f52:	93 e9       	ldi	r25, 0x93	; 147
     f54:	e4 e0       	ldi	r30, 0x04	; 4
     f56:	81 50       	subi	r24, 0x01	; 1
     f58:	90 40       	sbci	r25, 0x00	; 0
     f5a:	e0 40       	sbci	r30, 0x00	; 0
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <startupSequence+0x48a>
     f5e:	00 c0       	rjmp	.+0      	; 0xf60 <startupSequence+0x494>
     f60:	00 00       	nop
     f62:	e4 dc       	rcall	.-1592   	; 0x92c <userActivity>

                _delay_ms(1500);
                user_active = userActivity();
     f64:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5529>
     f68:	80 2f       	mov	r24, r16
     f6a:	10 0f       	add	r17, r16

                pos += dir;
     f6c:	11 f0       	breq	.+4      	; 0xf72 <startupSequence+0x4a6>
     f6e:	15 30       	cpi	r17, 0x05	; 5
                if (pos == 0 || pos == (8 - 3)) {
     f70:	49 f4       	brne	.+18     	; 0xf84 <startupSequence+0x4b8>
     f72:	08 2f       	mov	r16, r24
     f74:	01 95       	neg	r16
                    dir = -dir;
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <startupSequence+0x4b8>
     f78:	01 e0       	ldi	r16, 0x01	; 1
     f7a:	10 e0       	ldi	r17, 0x00	; 0
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
     f7c:	0f 2e       	mov	r0, r31
     f7e:	f7 e0       	ldi	r31, 0x07	; 7
            uint8_t pos = 0;
            int8_t  dir = +1;

            while (!user_active) {
                uint8_t mask = (0x07 << pos);
                led_setState(mask);
     f80:	ff 2e       	mov	r15, r31
     f82:	f0 2d       	mov	r31, r0
     f84:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
        case 7: {
            /* ---------------- 3 led bounce --------------- */
            uint8_t pos = 0;
            int8_t  dir = +1;

            while (!user_active) {
     f88:	88 23       	and	r24, r24
     f8a:	d9 f2       	breq	.-74     	; 0xf42 <startupSequence+0x476>
     f8c:	f8 dc       	rcall	.-1552   	; 0x97e <led_allOff>
                pos += dir;
                if (pos == 0 || pos == (8 - 3)) {
                    dir = -dir;
                }
            }
            led_allOff();
     f8e:	c3 c0       	rjmp	.+390    	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
     f90:	8f 2d       	mov	r24, r15
            uint16_t delay_ms = 2500;

            while (!user_active) {
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
                    for (uint8_t i = 0; i < 8; ++i) {
                        led_setState(1 << i);
     f92:	00 2e       	mov	r0, r16
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <startupSequence+0x4cc>
     f96:	88 0f       	add	r24, r24
     f98:	0a 94       	dec	r0
     f9a:	ea f7       	brpl	.-6      	; 0xf96 <startupSequence+0x4ca>
     f9c:	1c dd       	rcall	.-1480   	; 0x9d6 <led_setState>
     f9e:	c1 14       	cp	r12, r1
     fa0:	d1 04       	cpc	r13, r1
    }
}


void delay_ms_var(uint16_t ms) {
    while (ms--) {
     fa2:	49 f0       	breq	.+18     	; 0xfb6 <startupSequence+0x4ea>
     fa4:	c6 01       	movw	r24, r12
     fa6:	e9 ef       	ldi	r30, 0xF9	; 249
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	31 97       	sbiw	r30, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <startupSequence+0x4de>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <startupSequence+0x4e4>
     fb0:	00 00       	nop
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	c1 f7       	brne	.-16     	; 0xfa6 <startupSequence+0x4da>
     fb6:	ba dc       	rcall	.-1676   	; 0x92c <userActivity>
     fb8:	88 23       	and	r24, r24
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
                    for (uint8_t i = 0; i < 8; ++i) {
                        led_setState(1 << i);
                        delay_ms_var(delay_ms);
                        
                        if (userActivity()) {
     fba:	19 f0       	breq	.+6      	; 0xfc2 <startupSequence+0x4f6>
     fbc:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5529>
     fc0:	05 c0       	rjmp	.+10     	; 0xfcc <startupSequence+0x500>
                            user_active = true;
     fc2:	0f 5f       	subi	r16, 0xFF	; 255
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
                            break;
     fc6:	08 30       	cpi	r16, 0x08	; 8
     fc8:	11 05       	cpc	r17, r1
     fca:	11 f7       	brne	.-60     	; 0xf90 <startupSequence+0x4c4>
            /* ---------- warp-speed acceleration ---------- */
            uint16_t delay_ms = 2500;

            while (!user_active) {
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
                    for (uint8_t i = 0; i < 8; ++i) {
     fcc:	f5 ef       	ldi	r31, 0xF5	; 245
     fce:	cf 16       	cp	r12, r31
     fd0:	f1 e0       	ldi	r31, 0x01	; 1
                        if (userActivity()) {
                            user_active = true;
                            break;
                        }
                    }
                    if (delay_ms > 500)
     fd2:	df 06       	cpc	r13, r31
     fd4:	18 f0       	brcs	.+6      	; 0xfdc <startupSequence+0x510>
     fd6:	2a ef       	ldi	r18, 0xFA	; 250
     fd8:	c2 1a       	sub	r12, r18
     fda:	d1 08       	sbc	r13, r1
                        delay_ms -= 250;
     fdc:	ea 94       	dec	r14
     fde:	ee 20       	and	r14, r14
     fe0:	21 f1       	breq	.+72     	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
        case 8: {
            /* ---------- warp-speed acceleration ---------- */
            uint16_t delay_ms = 2500;

            while (!user_active) {
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
     fe2:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
     fe6:	81 11       	cpse	r24, r1
     fe8:	20 c0       	rjmp	.+64     	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
     fea:	00 e0       	ldi	r16, 0x00	; 0
     fec:	10 e0       	ldi	r17, 0x00	; 0
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
     fee:	d0 cf       	rjmp	.-96     	; 0xf90 <startupSequence+0x4c4>
     ff0:	00 e0       	ldi	r16, 0x00	; 0
     ff2:	10 e0       	ldi	r17, 0x00	; 0
     ff4:	8f 2d       	mov	r24, r15
     ff6:	00 2e       	mov	r0, r16
                        delay_ms -= 250;
                }

                while (!user_active) {
                    for (uint8_t i = 0; i < 8; ++i) {
                        led_setState(1 << i);
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <startupSequence+0x530>
     ffa:	88 0f       	add	r24, r24
     ffc:	0a 94       	dec	r0
     ffe:	ea f7       	brpl	.-6      	; 0xffa <startupSequence+0x52e>
    1000:	ea dc       	rcall	.-1580   	; 0x9d6 <led_setState>
    1002:	8f e9       	ldi	r24, 0x9F	; 159
    1004:	96 e8       	ldi	r25, 0x86	; 134
    1006:	e1 e0       	ldi	r30, 0x01	; 1
    1008:	81 50       	subi	r24, 0x01	; 1
    100a:	90 40       	sbci	r25, 0x00	; 0
    100c:	e0 40       	sbci	r30, 0x00	; 0
    100e:	e1 f7       	brne	.-8      	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    1012:	00 00       	nop
    1014:	8b dc       	rcall	.-1770   	; 0x92c <userActivity>
    1016:	88 23       	and	r24, r24
    1018:	19 f0       	breq	.+6      	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
                        _delay_ms(500);
                        
                        if (userActivity()) {
    101a:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5529>
    101e:	05 c0       	rjmp	.+10     	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1020:	0f 5f       	subi	r16, 0xFF	; 255
                            user_active = true;
    1022:	1f 4f       	sbci	r17, 0xFF	; 255
    1024:	08 30       	cpi	r16, 0x08	; 8
                            break;
    1026:	11 05       	cpc	r17, r1
    1028:	29 f7       	brne	.-54     	; 0xff4 <startupSequence+0x528>
    102a:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
                    if (delay_ms > 500)
                        delay_ms -= 250;
                }

                while (!user_active) {
                    for (uint8_t i = 0; i < 8; ++i) {
    102e:	88 23       	and	r24, r24
    1030:	f9 f2       	breq	.-66     	; 0xff0 <startupSequence+0x524>
                    }
                    if (delay_ms > 500)
                        delay_ms -= 250;
                }

                while (!user_active) {
    1032:	0a c0       	rjmp	.+20     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1034:	0f 2e       	mov	r0, r31
    1036:	f4 ec       	ldi	r31, 0xC4	; 196
    1038:	cf 2e       	mov	r12, r31
    103a:	f9 e0       	ldi	r31, 0x09	; 9
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
    103c:	df 2e       	mov	r13, r31
    103e:	f0 2d       	mov	r31, r0
    1040:	ff 24       	eor	r15, r15
    1042:	f3 94       	inc	r15
    1044:	bb 24       	eor	r11, r11
            uint16_t delay_ms = 2500;

            while (!user_active) {
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
                    for (uint8_t i = 0; i < 8; ++i) {
                        led_setState(1 << i);
    1046:	b3 94       	inc	r11
    1048:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
                        delay_ms_var(delay_ms);
                        
                        if (userActivity()) {
                            user_active = true;
    104c:	81 11       	cpse	r24, r1
        }
        case 8: {
            /* ---------- warp-speed acceleration ---------- */
            uint16_t delay_ms = 2500;

            while (!user_active) {
    104e:	08 c0       	rjmp	.+16     	; 0x1060 <__EEPROM_REGION_LENGTH__+0x60>
    1050:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
                for (uint8_t p = 0; p < 8 && !user_active; ++p) {
    1054:	81 11       	cpse	r24, r1
    1056:	e9 cf       	rjmp	.-46     	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1058:	68 94       	set
    105a:	ee 24       	eor	r14, r14
    105c:	e3 f8       	bld	r14, 3
    105e:	c5 cf       	rjmp	.-118    	; 0xfea <startupSequence+0x51e>
    1060:	8e dc       	rcall	.-1764   	; 0x97e <led_allOff>
                            break;
                        }
                    }
                }
            }
            led_allOff();
    1062:	59 c0       	rjmp	.+178    	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
            break;
        }
        default:
            break;
    }
}
    1064:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
    1068:	88 23       	and	r24, r24
    106a:	59 f1       	breq	.+86     	; 0x10c2 <__EEPROM_REGION_LENGTH__+0xc2>
    106c:	9b cd       	rjmp	.-1226   	; 0xba4 <startupSequence+0xd8>
    106e:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
    1072:	81 11       	cpse	r24, r1
    1074:	ff cd       	rjmp	.-1026   	; 0xc74 <startupSequence+0x1a8>
    1076:	ce 01       	movw	r24, r28
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	4c 01       	movw	r8, r24
    107c:	8e 01       	movw	r16, r28
    107e:	07 5f       	subi	r16, 0xF7	; 247
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
    1082:	c6 cd       	rjmp	.-1140   	; 0xc10 <startupSequence+0x144>
    1084:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
    1088:	81 11       	cpse	r24, r1
    108a:	54 ce       	rjmp	.-856    	; 0xd34 <startupSequence+0x268>
    108c:	fe 01       	movw	r30, r28
    108e:	31 96       	adiw	r30, 0x01	; 1
    1090:	7f 01       	movw	r14, r30
    1092:	8e 01       	movw	r16, r28
    1094:	07 5f       	subi	r16, 0xF7	; 247
    1096:	1f 4f       	sbci	r17, 0xFF	; 255
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
    1098:	21 ce       	rjmp	.-958    	; 0xcdc <startupSequence+0x210>
    109a:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
    109e:	81 11       	cpse	r24, r1
    10a0:	a5 ce       	rjmp	.-694    	; 0xdec <startupSequence+0x320>
    10a2:	8e 01       	movw	r16, r28
    10a4:	0b 5f       	subi	r16, 0xFB	; 251
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	78 01       	movw	r14, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
    10aa:	78 ce       	rjmp	.-784    	; 0xd9c <startupSequence+0x2d0>
    10ac:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5529>
    10b0:	81 11       	cpse	r24, r1
    10b2:	f9 ce       	rjmp	.-526    	; 0xea6 <startupSequence+0x3da>
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	7c 01       	movw	r14, r24
    10ba:	8e 01       	movw	r16, r28
    10bc:	07 5f       	subi	r16, 0xF7	; 247
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
    10c0:	c9 ce       	rjmp	.-622    	; 0xe54 <startupSequence+0x388>
    10c2:	18 85       	ldd	r17, Y+8	; 0x08
    10c4:	81 2f       	mov	r24, r17
    10c6:	61 dc       	rcall	.-1854   	; 0x98a <led_on>
    10c8:	9f e0       	ldi	r25, 0x0F	; 15
    10ca:	e8 e9       	ldi	r30, 0x98	; 152
    10cc:	f2 e0       	ldi	r31, 0x02	; 2
    10ce:	91 50       	subi	r25, 0x01	; 1
    10d0:	e0 40       	sbci	r30, 0x00	; 0
    10d2:	f0 40       	sbci	r31, 0x00	; 0
    10d4:	e1 f7       	brne	.-8      	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
    10d6:	00 c0       	rjmp	.+0      	; 0x10d8 <__EEPROM_REGION_LENGTH__+0xd8>
    10d8:	00 00       	nop
                    _delay_ms(850);
                    led_off(seq[i]);
    10da:	81 2f       	mov	r24, r17
    10dc:	5b dc       	rcall	.-1866   	; 0x994 <led_off>
    10de:	26 dc       	rcall	.-1972   	; 0x92c <userActivity>

                    user_active = userActivity();
    10e0:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5529>
    10e4:	8e 01       	movw	r16, r28
    10e6:	08 5f       	subi	r16, 0xF8	; 248
    10e8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ea:	50 cd       	rjmp	.-1376   	; 0xb8c <startupSequence+0xc0>
    10ec:	19 81       	ldd	r17, Y+1	; 0x01
    10ee:	81 2f       	mov	r24, r17
    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
    10f0:	4c dc       	rcall	.-1896   	; 0x98a <led_on>
    10f2:	2f e0       	ldi	r18, 0x0F	; 15
    10f4:	88 e9       	ldi	r24, 0x98	; 152
    10f6:	92 e0       	ldi	r25, 0x02	; 2
    10f8:	21 50       	subi	r18, 0x01	; 1
    10fa:	80 40       	sbci	r24, 0x00	; 0
    10fc:	90 40       	sbci	r25, 0x00	; 0
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <__EEPROM_REGION_LENGTH__+0xf8>
    1100:	00 c0       	rjmp	.+0      	; 0x1102 <__EEPROM_REGION_LENGTH__+0x102>
    1102:	00 00       	nop
    1104:	81 2f       	mov	r24, r17
    1106:	46 dc       	rcall	.-1908   	; 0x994 <led_off>
    1108:	11 dc       	rcall	.-2014   	; 0x92c <userActivity>
                    _delay_ms(850);
                    led_off(seq[i]);
    110a:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5529>
    110e:	8e 01       	movw	r16, r28

                    user_active = userActivity();
    1110:	0e 5f       	subi	r16, 0xFE	; 254
    1112:	1f 4f       	sbci	r17, 0xFF	; 255
    1114:	20 cd       	rjmp	.-1472   	; 0xb56 <startupSequence+0x8a>
    1116:	28 96       	adiw	r28, 0x08	; 8
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
            break;
        }
        default:
            break;
    }
}
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
    1128:	df 90       	pop	r13
    112a:	cf 90       	pop	r12
    112c:	bf 90       	pop	r11
    112e:	af 90       	pop	r10
    1130:	9f 90       	pop	r9
    1132:	8f 90       	pop	r8
    1134:	7f 90       	pop	r7
    1136:	08 95       	ret

00001138 <io_ui_process>:

/* -------------------------------------- */
/* -------- UI process callbacks -------- */
/* -------------------------------------- */
void io_ui_process(void) {
	io_init();
    1138:	33 c9       	rjmp	.-3482   	; 0x3a0 <io_init>
    113a:	08 95       	ret

0000113c <startup_ui_process>:
}

void startup_ui_process(uint8_t sequence) {
	startupSequence(sequence);
    113c:	c7 cc       	rjmp	.-1650   	; 0xacc <startupSequence>
    113e:	08 95       	ret

00001140 <jstk_ui_process>:
}

void jstk_ui_process(void) {
	joystick();
    1140:	6e ca       	rjmp	.-2852   	; 0x61e <joystick>
    1142:	08 95       	ret

00001144 <kbd_ui_process>:
}

void kbd_ui_process(void) {
	keypad();
    1144:	db cb       	rjmp	.-2122   	; 0x8fc <keypad>
    1146:	08 95       	ret

00001148 <ui_led_report>:
}

void ui_led_report(uint8_t const *mask) {
	led_setState(mask[0]);
    1148:	fc 01       	movw	r30, r24
    114a:	80 81       	ld	r24, Z
    114c:	44 cc       	rjmp	.-1912   	; 0x9d6 <led_setState>
    114e:	08 95       	ret

00001150 <led_ui_process>:
}

void led_ui_process(void) {
	led_usbTask();
    1150:	7b cc       	rjmp	.-1802   	; 0xa48 <led_usbTask>
    1152:	08 95       	ret

00001154 <status_ui_process>:
}

void status_ui_process(void) {
	testIndicator();
    1154:	9b cc       	rjmp	.-1738   	; 0xa8c <testIndicator>
    1156:	08 95       	ret

00001158 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	27 97       	sbiw	r28, 0x07	; 7
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
    1170:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
    1174:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
    1178:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
    117c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
    1180:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
    1184:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
    1188:	65 e0       	ldi	r22, 0x05	; 5
    118a:	81 e4       	ldi	r24, 0x41	; 65
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	7a d6       	rcall	.+3316   	; 0x1e84 <ccp_write_io>
    1190:	6c e1       	ldi	r22, 0x1C	; 28
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	6c d6       	rcall	.+3288   	; 0x1e70 <nvm_read_byte>
    1198:	8a 83       	std	Y+2, r24	; 0x02
    119a:	6d e1       	ldi	r22, 0x1D	; 29
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	67 d6       	rcall	.+3278   	; 0x1e70 <nvm_read_byte>
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	21 f4       	brne	.+8      	; 0x11b4 <sysclk_init+0x5c>
    11ac:	80 e4       	ldi	r24, 0x40	; 64
    11ae:	93 e2       	ldi	r25, 0x23	; 35
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	8b 83       	std	Y+3, r24	; 0x03
    11ba:	9c 83       	std	Y+4, r25	; 0x04
    11bc:	e0 e6       	ldi	r30, 0x60	; 96
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	82 83       	std	Z+2, r24	; 0x02
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	83 83       	std	Z+3, r24	; 0x03
    11c6:	8f b7       	in	r24, 0x3f	; 63
    11c8:	8e 83       	std	Y+6, r24	; 0x06
    11ca:	f8 94       	cli
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	e0 e5       	ldi	r30, 0x50	; 80
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	82 60       	ori	r24, 0x02	; 2
    11d6:	80 83       	st	Z, r24
    11d8:	9f bf       	out	0x3f, r25	; 63
    11da:	81 81       	ldd	r24, Z+1	; 0x01
    11dc:	81 ff       	sbrs	r24, 1
    11de:	fd cf       	rjmp	.-6      	; 0x11da <sysclk_init+0x82>
    11e0:	8f b7       	in	r24, 0x3f	; 63
    11e2:	8f 83       	std	Y+7, r24	; 0x07
    11e4:	f8 94       	cli
    11e6:	9f 81       	ldd	r25, Y+7	; 0x07
    11e8:	00 e5       	ldi	r16, 0x50	; 80
    11ea:	10 e0       	ldi	r17, 0x00	; 0
    11ec:	d8 01       	movw	r26, r16
    11ee:	16 96       	adiw	r26, 0x06	; 6
    11f0:	8c 91       	ld	r24, X
    11f2:	16 97       	sbiw	r26, 0x06	; 6
    11f4:	89 7f       	andi	r24, 0xF9	; 249
    11f6:	16 96       	adiw	r26, 0x06	; 6
    11f8:	8c 93       	st	X, r24
    11fa:	16 97       	sbiw	r26, 0x06	; 6
    11fc:	e0 e6       	ldi	r30, 0x60	; 96
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 e8       	ldi	r24, 0x80	; 128
    1202:	85 83       	std	Z+5, r24	; 0x05
    1204:	8b eb       	ldi	r24, 0xBB	; 187
    1206:	86 83       	std	Z+6, r24	; 0x06
    1208:	16 96       	adiw	r26, 0x06	; 6
    120a:	8c 91       	ld	r24, X
    120c:	16 97       	sbiw	r26, 0x06	; 6
    120e:	84 60       	ori	r24, 0x04	; 4
    1210:	16 96       	adiw	r26, 0x06	; 6
    1212:	8c 93       	st	X, r24
    1214:	80 81       	ld	r24, Z
    1216:	81 60       	ori	r24, 0x01	; 1
    1218:	80 83       	st	Z, r24
    121a:	9f bf       	out	0x3f, r25	; 63
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	80 e4       	ldi	r24, 0x40	; 64
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	30 d6       	rcall	.+3168   	; 0x1e84 <ccp_write_io>
    1224:	8f b7       	in	r24, 0x3f	; 63
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	f8 94       	cli
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	f8 01       	movw	r30, r16
    122e:	80 81       	ld	r24, Z
    1230:	8e 7f       	andi	r24, 0xFE	; 254
    1232:	80 83       	st	Z, r24
    1234:	9f bf       	out	0x3f, r25	; 63
    1236:	27 96       	adiw	r28, 0x07	; 7
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	08 95       	ret

00001246 <sysclk_enable_module>:
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	1f 92       	push	r1
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	9f b7       	in	r25, 0x3f	; 63
    1252:	99 83       	std	Y+1, r25	; 0x01
    1254:	f8 94       	cli
    1256:	99 81       	ldd	r25, Y+1	; 0x01
    1258:	e8 2f       	mov	r30, r24
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	e0 59       	subi	r30, 0x90	; 144
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	60 95       	com	r22
    1262:	80 81       	ld	r24, Z
    1264:	68 23       	and	r22, r24
    1266:	60 83       	st	Z, r22
    1268:	9f bf       	out	0x3f, r25	; 63
    126a:	0f 90       	pop	r0
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	08 95       	ret

00001272 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	1f 92       	push	r1
    1278:	1f 92       	push	r1
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    127e:	86 30       	cpi	r24, 0x06	; 6
    1280:	11 f0       	breq	.+4      	; 0x1286 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1286:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1288:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    128c:	81 fd       	sbrc	r24, 1
    128e:	2a c0       	rjmp	.+84     	; 0x12e4 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1290:	8f b7       	in	r24, 0x3f	; 63
    1292:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1294:	f8 94       	cli
	return flags;
    1296:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1298:	e0 e5       	ldi	r30, 0x50	; 80
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	82 60       	ori	r24, 0x02	; 2
    12a0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12a2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    12a4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    12a6:	81 ff       	sbrs	r24, 1
    12a8:	fd cf       	rjmp	.-6      	; 0x12a4 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    12aa:	8f b7       	in	r24, 0x3f	; 63
    12ac:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    12ae:	f8 94       	cli
	return flags;
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    12b2:	a0 e5       	ldi	r26, 0x50	; 80
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	16 96       	adiw	r26, 0x06	; 6
    12b8:	8c 91       	ld	r24, X
    12ba:	16 97       	sbiw	r26, 0x06	; 6
    12bc:	89 7f       	andi	r24, 0xF9	; 249
    12be:	16 96       	adiw	r26, 0x06	; 6
    12c0:	8c 93       	st	X, r24
    12c2:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    12c4:	e0 e6       	ldi	r30, 0x60	; 96
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 e8       	ldi	r24, 0x80	; 128
    12ca:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    12cc:	8b eb       	ldi	r24, 0xBB	; 187
    12ce:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    12d0:	16 96       	adiw	r26, 0x06	; 6
    12d2:	8c 91       	ld	r24, X
    12d4:	16 97       	sbiw	r26, 0x06	; 6
    12d6:	84 60       	ori	r24, 0x04	; 4
    12d8:	16 96       	adiw	r26, 0x06	; 6
    12da:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    12dc:	80 81       	ld	r24, Z
    12de:	81 60       	ori	r24, 0x01	; 1
    12e0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12e2:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    12e4:	63 60       	ori	r22, 0x03	; 3
    12e6:	84 e4       	ldi	r24, 0x44	; 68
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	cc d5       	rcall	.+2968   	; 0x1e84 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    12ec:	60 e4       	ldi	r22, 0x40	; 64
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	aa df       	rcall	.-172    	; 0x1246 <sysclk_enable_module>
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	08 95       	ret

000012fc <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	08 95       	ret

00001300 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    1300:	30 91 c3 23 	lds	r19, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0x2>
    1304:	20 91 c4 23 	lds	r18, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0x3>
    1308:	82 2f       	mov	r24, r18
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	03 97       	sbiw	r24, 0x03	; 3
    130e:	b1 f4       	brne	.+44     	; 0x133c <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    1310:	31 11       	cpse	r19, r1
    1312:	16 c0       	rjmp	.+44     	; 0x1340 <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
    1314:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    1318:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    131c:	89 2b       	or	r24, r25
    131e:	91 f4       	brne	.+36     	; 0x1344 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
    1320:	e1 ec       	ldi	r30, 0xC1	; 193
    1322:	f3 e2       	ldi	r31, 0x23	; 35
    1324:	8a ec       	ldi	r24, 0xCA	; 202
    1326:	91 e2       	ldi	r25, 0x21	; 33
    1328:	80 87       	std	Z+8, r24	; 0x08
    132a:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    132c:	84 ea       	ldi	r24, 0xA4	; 164
    132e:	99 e0       	ldi	r25, 0x09	; 9
    1330:	84 87       	std	Z+12, r24	; 0x0c
    1332:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
    1334:	12 86       	std	Z+10, r1	; 0x0a
    1336:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	08 95       	ret
	}
	return false;
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	08 95       	ret
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	08 95       	ret
    1344:	80 e0       	ldi	r24, 0x00	; 0
}
    1346:	08 95       	ret

00001348 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
    1348:	08 95       	ret

0000134a <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	80 93 cc 21 	sts	0x21CC, r24	; 0x8021cc <udi_hid_generic_b_report_in_free>
    1350:	08 95       	ret

00001352 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
    1352:	10 92 d0 21 	sts	0x21D0, r1	; 0x8021d0 <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
    1356:	10 92 ce 21 	sts	0x21CE, r1	; 0x8021ce <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	80 93 cc 21 	sts	0x21CC, r24	; 0x8021cc <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
    1360:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <main_generic_enable>
}
    1364:	08 95       	ret

00001366 <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
    1366:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <main_generic_disable>
    136a:	08 95       	ret

0000136c <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
    136c:	20 e8       	ldi	r18, 0x80	; 128
    136e:	39 e0       	ldi	r19, 0x09	; 9
    1370:	46 ea       	ldi	r20, 0xA6	; 166
    1372:	50 e2       	ldi	r21, 0x20	; 32
    1374:	6e ec       	ldi	r22, 0xCE	; 206
    1376:	71 e2       	ldi	r23, 0x21	; 33
    1378:	80 ed       	ldi	r24, 0xD0	; 208
    137a:	91 e2       	ldi	r25, 0x21	; 33
    137c:	f2 c0       	rjmp	.+484    	; 0x1562 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
    137e:	08 95       	ret

00001380 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	1f 92       	push	r1
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
    1392:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <udi_hid_generic_b_report_in_free>
    1396:	88 23       	and	r24, r24
    1398:	09 f1       	breq	.+66     	; 0x13dc <udi_hid_generic_send_report_in+0x5c>
    139a:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    139c:	8f b7       	in	r24, 0x3f	; 63
    139e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    13a0:	f8 94       	cli
	return flags;
    13a2:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
    13a4:	10 92 ca 21 	sts	0x21CA, r1	; 0x8021ca <udi_hid_generic_report_feature>
    13a8:	10 92 cb 21 	sts	0x21CB, r1	; 0x8021cb <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
    13ac:	80 81       	ld	r24, Z
    13ae:	91 81       	ldd	r25, Z+1	; 0x01
    13b0:	80 93 ca 21 	sts	0x21CA, r24	; 0x8021ca <udi_hid_generic_report_feature>
    13b4:	90 93 cb 21 	sts	0x21CB, r25	; 0x8021cb <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    13b8:	05 ea       	ldi	r16, 0xA5	; 165
    13ba:	19 e0       	ldi	r17, 0x09	; 9
    13bc:	22 e0       	ldi	r18, 0x02	; 2
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	4a ec       	ldi	r20, 0xCA	; 202
    13c2:	51 e2       	ldi	r21, 0x21	; 33
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	82 e8       	ldi	r24, 0x82	; 130
    13c8:	0e 94 06 14 	call	0x280c	; 0x280c <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	89 27       	eor	r24, r25
    13d0:	80 93 cc 21 	sts	0x21CC, r24	; 0x8021cc <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13d4:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
    13d6:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <udi_hid_generic_b_report_in_free>
    13da:	89 27       	eor	r24, r25

}
    13dc:	0f 90       	pop	r0
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	08 95       	ret

000013ea <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	08 95       	ret

000013ee <udi_hid_kbd_setreport>:
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	08 95       	ret

000013f2 <udi_hid_kbd_enable>:
    13f2:	10 92 e6 21 	sts	0x21E6, r1	; 0x8021e6 <udi_hid_kbd_rate>
    13f6:	10 92 e4 21 	sts	0x21E4, r1	; 0x8021e4 <udi_hid_kbd_protocol>
    13fa:	10 92 da 21 	sts	0x21DA, r1	; 0x8021da <udi_hid_kbd_b_report_trans_ongoing>
    13fe:	88 e0       	ldi	r24, 0x08	; 8
    1400:	eb ed       	ldi	r30, 0xDB	; 219
    1402:	f1 e2       	ldi	r31, 0x21	; 33
    1404:	df 01       	movw	r26, r30
    1406:	1d 92       	st	X+, r1
    1408:	8a 95       	dec	r24
    140a:	e9 f7       	brne	.-6      	; 0x1406 <udi_hid_kbd_enable+0x14>
    140c:	10 92 e3 21 	sts	0x21E3, r1	; 0x8021e3 <udi_hid_kbd_b_report_valid>
    1410:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <main_kbd_enable>
    1414:	08 95       	ret

00001416 <udi_hid_kbd_disable>:
    1416:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <main_kbd_disable>
    141a:	08 95       	ret

0000141c <udi_hid_kbd_setup>:
    141c:	27 ef       	ldi	r18, 0xF7	; 247
    141e:	39 e0       	ldi	r19, 0x09	; 9
    1420:	48 ec       	ldi	r20, 0xC8	; 200
    1422:	50 e2       	ldi	r21, 0x20	; 32
    1424:	64 ee       	ldi	r22, 0xE4	; 228
    1426:	71 e2       	ldi	r23, 0x21	; 33
    1428:	86 ee       	ldi	r24, 0xE6	; 230
    142a:	91 e2       	ldi	r25, 0x21	; 33
    142c:	9a c0       	rjmp	.+308    	; 0x1562 <udi_hid_setup>
    142e:	08 95       	ret

00001430 <udi_hid_kbd_send_report>:
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <udi_hid_kbd_b_report_trans_ongoing>
    1438:	81 11       	cpse	r24, r1
    143a:	18 c0       	rjmp	.+48     	; 0x146c <udi_hid_kbd_send_report+0x3c>
    143c:	88 e0       	ldi	r24, 0x08	; 8
    143e:	eb ed       	ldi	r30, 0xDB	; 219
    1440:	f1 e2       	ldi	r31, 0x21	; 33
    1442:	a2 ed       	ldi	r26, 0xD2	; 210
    1444:	b1 e2       	ldi	r27, 0x21	; 33
    1446:	01 90       	ld	r0, Z+
    1448:	0d 92       	st	X+, r0
    144a:	8a 95       	dec	r24
    144c:	e1 f7       	brne	.-8      	; 0x1446 <udi_hid_kbd_send_report+0x16>
    144e:	10 92 e3 21 	sts	0x21E3, r1	; 0x8021e3 <udi_hid_kbd_b_report_valid>
    1452:	0a e3       	ldi	r16, 0x3A	; 58
    1454:	1a e0       	ldi	r17, 0x0A	; 10
    1456:	28 e0       	ldi	r18, 0x08	; 8
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	42 ed       	ldi	r20, 0xD2	; 210
    145c:	51 e2       	ldi	r21, 0x21	; 33
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	81 e8       	ldi	r24, 0x81	; 129
    1462:	0e 94 06 14 	call	0x280c	; 0x280c <udd_ep_run>
    1466:	80 93 da 21 	sts	0x21DA, r24	; 0x8021da <udi_hid_kbd_b_report_trans_ongoing>
    146a:	01 c0       	rjmp	.+2      	; 0x146e <udi_hid_kbd_send_report+0x3e>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	08 95       	ret

00001474 <udi_hid_kbd_report_sent>:
    1474:	10 92 da 21 	sts	0x21DA, r1	; 0x8021da <udi_hid_kbd_b_report_trans_ongoing>
    1478:	80 91 e3 21 	lds	r24, 0x21E3	; 0x8021e3 <udi_hid_kbd_b_report_valid>
    147c:	81 11       	cpse	r24, r1
    147e:	d8 cf       	rjmp	.-80     	; 0x1430 <udi_hid_kbd_send_report>
    1480:	08 95       	ret

00001482 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	1f 92       	push	r1
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    148e:	9f b7       	in	r25, 0x3f	; 63
    1490:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1492:	f8 94       	cli
	return flags;
    1494:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    1496:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <udi_hid_kbd_report+0x2>
    149a:	99 23       	and	r25, r25
    149c:	41 f0       	breq	.+16     	; 0x14ae <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    149e:	89 17       	cp	r24, r25
    14a0:	a9 f0       	breq	.+42     	; 0x14cc <udi_hid_kbd_up+0x4a>
    14a2:	ee ed       	ldi	r30, 0xDE	; 222
    14a4:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    14a6:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    14a8:	21 91       	ld	r18, Z+
    14aa:	21 11       	cpse	r18, r1
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14ae:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    14b0:	1e c0       	rjmp	.+60     	; 0x14ee <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    14b2:	28 17       	cp	r18, r24
    14b4:	21 f0       	breq	.+8      	; 0x14be <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    14b6:	9f 5f       	subi	r25, 0xFF	; 255
    14b8:	98 30       	cpi	r25, 0x08	; 8
    14ba:	b1 f7       	brne	.-20     	; 0x14a8 <udi_hid_kbd_up+0x26>
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    14be:	98 30       	cpi	r25, 0x08	; 8
    14c0:	19 f0       	breq	.+6      	; 0x14c8 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    14c2:	97 30       	cpi	r25, 0x07	; 7
    14c4:	20 f0       	brcs	.+8      	; 0x14ce <udi_hid_kbd_up+0x4c>
    14c6:	0c c0       	rjmp	.+24     	; 0x14e0 <udi_hid_kbd_up+0x5e>
    14c8:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    14ca:	11 c0       	rjmp	.+34     	; 0x14ee <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    14cc:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    14ce:	e9 2f       	mov	r30, r25
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	e5 52       	subi	r30, 0x25	; 37
    14d4:	fe 4d       	sbci	r31, 0xDE	; 222
    14d6:	81 81       	ldd	r24, Z+1	; 0x01
    14d8:	80 83       	st	Z, r24
		i++;
    14da:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    14dc:	97 30       	cpi	r25, 0x07	; 7
    14de:	b9 f7       	brne	.-18     	; 0x14ce <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    14e0:	10 92 e2 21 	sts	0x21E2, r1	; 0x8021e2 <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	80 93 e3 21 	sts	0x21E3, r24	; 0x8021e3 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    14ea:	a2 df       	rcall	.-188    	; 0x1430 <udi_hid_kbd_send_report>
    14ec:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	0f 90       	pop	r0
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	08 95       	ret

000014fa <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	1f 92       	push	r1
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1506:	9f b7       	in	r25, 0x3f	; 63
    1508:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    150a:	f8 94       	cli
	return flags;
    150c:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    150e:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <udi_hid_kbd_report+0x2>
    1512:	99 23       	and	r25, r25
    1514:	b1 f0       	breq	.+44     	; 0x1542 <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1516:	89 17       	cp	r24, r25
    1518:	41 f0       	breq	.+16     	; 0x152a <udi_hid_kbd_down+0x30>
    151a:	ae ed       	ldi	r26, 0xDE	; 222
    151c:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    151e:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    1520:	9d 91       	ld	r25, X+
    1522:	99 23       	and	r25, r25
    1524:	49 f0       	breq	.+18     	; 0x1538 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1526:	98 13       	cpse	r25, r24
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    152a:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	14 c0       	rjmp	.+40     	; 0x1558 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1530:	ef 5f       	subi	r30, 0xFF	; 255
    1532:	e8 30       	cpi	r30, 0x08	; 8
    1534:	a9 f7       	brne	.-22     	; 0x1520 <udi_hid_kbd_down+0x26>
    1536:	02 c0       	rjmp	.+4      	; 0x153c <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    1538:	e8 30       	cpi	r30, 0x08	; 8
    153a:	21 f4       	brne	.+8      	; 0x1544 <udi_hid_kbd_down+0x4a>
    153c:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	0b c0       	rjmp	.+22     	; 0x1558 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1542:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	e5 52       	subi	r30, 0x25	; 37
    1548:	fe 4d       	sbci	r31, 0xDE	; 222
    154a:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	80 93 e3 21 	sts	0x21E3, r24	; 0x8021e3 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1552:	6e df       	rcall	.-292    	; 0x1430 <udi_hid_kbd_send_report>
    1554:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    1556:	81 e0       	ldi	r24, 0x01	; 1
}
    1558:	0f 90       	pop	r0
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	08 95       	ret

00001562 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	dc 01       	movw	r26, r24
    1568:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    156a:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <udd_g_ctrlreq>
    156e:	99 23       	and	r25, r25
    1570:	0c f0       	brlt	.+2      	; 0x1574 <udi_hid_setup+0x12>
    1572:	68 c0       	rjmp	.+208    	; 0x1644 <udi_hid_setup+0xe2>
    1574:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1576:	09 f0       	breq	.+2      	; 0x157a <udi_hid_setup+0x18>
    1578:	45 c0       	rjmp	.+138    	; 0x1604 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    157a:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x1>
    157e:	86 30       	cpi	r24, 0x06	; 6
    1580:	09 f0       	breq	.+2      	; 0x1584 <udi_hid_setup+0x22>
    1582:	40 c0       	rjmp	.+128    	; 0x1604 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1584:	76 d1       	rcall	.+748    	; 0x1872 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1586:	dc 01       	movw	r26, r24
    1588:	1a 96       	adiw	r26, 0x0a	; 10
    158a:	2c 91       	ld	r18, X
    158c:	1a 97       	sbiw	r26, 0x0a	; 10
    158e:	21 32       	cpi	r18, 0x21	; 33
    1590:	09 f0       	breq	.+2      	; 0x1594 <udi_hid_setup+0x32>
    1592:	77 c0       	rjmp	.+238    	; 0x1682 <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1594:	20 91 c4 23 	lds	r18, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0x3>
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	21 32       	cpi	r18, 0x21	; 33
    159c:	31 05       	cpc	r19, r1
    159e:	b1 f4       	brne	.+44     	; 0x15cc <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    15a0:	9c 01       	movw	r18, r24
    15a2:	27 5f       	subi	r18, 0xF7	; 247
    15a4:	3f 4f       	sbci	r19, 0xFF	; 255
    15a6:	20 93 c9 23 	sts	0x23C9, r18	; 0x8023c9 <udd_g_ctrlreq+0x8>
    15aa:	30 93 ca 23 	sts	0x23CA, r19	; 0x8023ca <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    15ae:	e1 ec       	ldi	r30, 0xC1	; 193
    15b0:	f3 e2       	ldi	r31, 0x23	; 35
    15b2:	19 96       	adiw	r26, 0x09	; 9
    15b4:	8c 91       	ld	r24, X
    15b6:	26 81       	ldd	r18, Z+6	; 0x06
    15b8:	37 81       	ldd	r19, Z+7	; 0x07
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	28 17       	cp	r18, r24
    15be:	39 07       	cpc	r19, r25
    15c0:	08 f4       	brcc	.+2      	; 0x15c4 <udi_hid_setup+0x62>
    15c2:	c9 01       	movw	r24, r18
    15c4:	82 87       	std	Z+10, r24	; 0x0a
    15c6:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	68 c0       	rjmp	.+208    	; 0x169c <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    15cc:	fc 01       	movw	r30, r24
    15ce:	47 85       	ldd	r20, Z+15	; 0x0f
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	42 17       	cp	r20, r18
    15d4:	53 07       	cpc	r21, r19
    15d6:	09 f0       	breq	.+2      	; 0x15da <udi_hid_setup+0x78>
    15d8:	56 c0       	rjmp	.+172    	; 0x1686 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    15da:	c0 93 c9 23 	sts	0x23C9, r28	; 0x8023c9 <udd_g_ctrlreq+0x8>
    15de:	d0 93 ca 23 	sts	0x23CA, r29	; 0x8023ca <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    15e2:	e1 ec       	ldi	r30, 0xC1	; 193
    15e4:	f3 e2       	ldi	r31, 0x23	; 35
    15e6:	26 81       	ldd	r18, Z+6	; 0x06
    15e8:	37 81       	ldd	r19, Z+7	; 0x07
    15ea:	dc 01       	movw	r26, r24
    15ec:	50 96       	adiw	r26, 0x10	; 16
    15ee:	8d 91       	ld	r24, X+
    15f0:	9c 91       	ld	r25, X
    15f2:	51 97       	sbiw	r26, 0x11	; 17
    15f4:	28 17       	cp	r18, r24
    15f6:	39 07       	cpc	r19, r25
    15f8:	08 f4       	brcc	.+2      	; 0x15fc <udi_hid_setup+0x9a>
    15fa:	c9 01       	movw	r24, r18
    15fc:	82 87       	std	Z+10, r24	; 0x0a
    15fe:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	4c c0       	rjmp	.+152    	; 0x169c <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1604:	90 32       	cpi	r25, 0x20	; 32
    1606:	09 f0       	breq	.+2      	; 0x160a <udi_hid_setup+0xa8>
    1608:	40 c0       	rjmp	.+128    	; 0x168a <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    160a:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x1>
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	39 f0       	breq	.+14     	; 0x1620 <udi_hid_setup+0xbe>
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	71 f0       	breq	.+28     	; 0x1632 <udi_hid_setup+0xd0>
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	d1 f5       	brne	.+116    	; 0x168e <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    161a:	f9 01       	movw	r30, r18
    161c:	19 95       	eicall
    161e:	3e c0       	rjmp	.+124    	; 0x169c <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    1620:	e1 ec       	ldi	r30, 0xC1	; 193
    1622:	f3 e2       	ldi	r31, 0x23	; 35
    1624:	a0 87       	std	Z+8, r26	; 0x08
    1626:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	82 87       	std	Z+10, r24	; 0x0a
    162e:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1630:	35 c0       	rjmp	.+106    	; 0x169c <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1632:	e1 ec       	ldi	r30, 0xC1	; 193
    1634:	f3 e2       	ldi	r31, 0x23	; 35
    1636:	60 87       	std	Z+8, r22	; 0x08
    1638:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	82 87       	std	Z+10, r24	; 0x0a
    1640:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1642:	2c c0       	rjmp	.+88     	; 0x169c <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1644:	90 76       	andi	r25, 0x60	; 96
    1646:	90 32       	cpi	r25, 0x20	; 32
    1648:	21 f5       	brne	.+72     	; 0x1692 <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    164a:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x1>
    164e:	8a 30       	cpi	r24, 0x0A	; 10
    1650:	39 f0       	breq	.+14     	; 0x1660 <udi_hid_setup+0xfe>
    1652:	8b 30       	cpi	r24, 0x0B	; 11
    1654:	51 f0       	breq	.+20     	; 0x166a <udi_hid_setup+0x108>
    1656:	89 30       	cpi	r24, 0x09	; 9
    1658:	f1 f4       	brne	.+60     	; 0x1696 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    165a:	f9 01       	movw	r30, r18
    165c:	19 95       	eicall
    165e:	1e c0       	rjmp	.+60     	; 0x169c <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1660:	80 91 c4 23 	lds	r24, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0x3>
    1664:	8c 93       	st	X, r24
				return true;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	19 c0       	rjmp	.+50     	; 0x169c <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    166a:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    166e:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    1672:	89 2b       	or	r24, r25
    1674:	91 f4       	brne	.+36     	; 0x169a <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    1676:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0x2>
    167a:	db 01       	movw	r26, r22
    167c:	8c 93       	st	X, r24
				return true;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	0d c0       	rjmp	.+26     	; 0x169c <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	0b c0       	rjmp	.+22     	; 0x169c <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	09 c0       	rjmp	.+18     	; 0x169c <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	07 c0       	rjmp	.+14     	; 0x169c <udi_hid_setup+0x13a>
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	05 c0       	rjmp	.+10     	; 0x169c <udi_hid_setup+0x13a>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	03 c0       	rjmp	.+6      	; 0x169c <udi_hid_setup+0x13a>
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	01 c0       	rjmp	.+2      	; 0x169c <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    169a:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	08 95       	ret

000016a2 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    16a2:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <udc_ptr_conf>
    16a6:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    16aa:	01 90       	ld	r0, Z+
    16ac:	f0 81       	ld	r31, Z
    16ae:	e0 2d       	mov	r30, r0
    16b0:	22 81       	ldd	r18, Z+2	; 0x02
    16b2:	33 81       	ldd	r19, Z+3	; 0x03
    16b4:	2e 0f       	add	r18, r30
    16b6:	3f 1f       	adc	r19, r31
    16b8:	fc 01       	movw	r30, r24
    16ba:	40 81       	ld	r20, Z
    16bc:	e4 0f       	add	r30, r20
    16be:	f1 1d       	adc	r31, r1
    16c0:	e2 17       	cp	r30, r18
    16c2:	f3 07       	cpc	r31, r19
    16c4:	a0 f4       	brcc	.+40     	; 0x16ee <udc_next_desc_in_iface+0x4c>
    16c6:	81 81       	ldd	r24, Z+1	; 0x01
    16c8:	84 30       	cpi	r24, 0x04	; 4
    16ca:	a1 f0       	breq	.+40     	; 0x16f4 <udc_next_desc_in_iface+0x52>
    16cc:	86 13       	cpse	r24, r22
    16ce:	06 c0       	rjmp	.+12     	; 0x16dc <udc_next_desc_in_iface+0x3a>
    16d0:	14 c0       	rjmp	.+40     	; 0x16fa <udc_next_desc_in_iface+0x58>
    16d2:	81 81       	ldd	r24, Z+1	; 0x01
    16d4:	84 30       	cpi	r24, 0x04	; 4
    16d6:	a1 f0       	breq	.+40     	; 0x1700 <udc_next_desc_in_iface+0x5e>
    16d8:	86 17       	cp	r24, r22
    16da:	a9 f0       	breq	.+42     	; 0x1706 <udc_next_desc_in_iface+0x64>
    16dc:	80 81       	ld	r24, Z
    16de:	e8 0f       	add	r30, r24
    16e0:	f1 1d       	adc	r31, r1
    16e2:	e2 17       	cp	r30, r18
    16e4:	f3 07       	cpc	r31, r19
    16e6:	a8 f3       	brcs	.-22     	; 0x16d2 <udc_next_desc_in_iface+0x30>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	08 95       	ret
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	08 95       	ret
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	08 95       	ret
    16fa:	8e 2f       	mov	r24, r30
    16fc:	9f 2f       	mov	r25, r31
    16fe:	08 95       	ret
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	08 95       	ret
    1706:	8e 2f       	mov	r24, r30
    1708:	9f 2f       	mov	r25, r31
    170a:	08 95       	ret

0000170c <udc_valid_address>:
    170c:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0x2>
    1710:	8f 77       	andi	r24, 0x7F	; 127
    1712:	95 c7       	rjmp	.+3882   	; 0x263e <udd_set_address>
    1714:	08 95       	ret

00001716 <udc_update_iface_desc>:
    1716:	90 91 ee 21 	lds	r25, 0x21EE	; 0x8021ee <udc_num_configuration>
    171a:	99 23       	and	r25, r25
    171c:	81 f1       	breq	.+96     	; 0x177e <udc_update_iface_desc+0x68>
    171e:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <udc_ptr_conf>
    1722:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    1726:	01 90       	ld	r0, Z+
    1728:	f0 81       	ld	r31, Z
    172a:	e0 2d       	mov	r30, r0
    172c:	94 81       	ldd	r25, Z+4	; 0x04
    172e:	89 17       	cp	r24, r25
    1730:	40 f5       	brcc	.+80     	; 0x1782 <udc_update_iface_desc+0x6c>
    1732:	e0 93 ea 21 	sts	0x21EA, r30	; 0x8021ea <udc_ptr_iface>
    1736:	f0 93 eb 21 	sts	0x21EB, r31	; 0x8021eb <udc_ptr_iface+0x1>
    173a:	22 81       	ldd	r18, Z+2	; 0x02
    173c:	33 81       	ldd	r19, Z+3	; 0x03
    173e:	2e 0f       	add	r18, r30
    1740:	3f 1f       	adc	r19, r31
    1742:	e2 17       	cp	r30, r18
    1744:	f3 07       	cpc	r31, r19
    1746:	f8 f4       	brcc	.+62     	; 0x1786 <udc_update_iface_desc+0x70>
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	94 30       	cpi	r25, 0x04	; 4
    174c:	61 f4       	brne	.+24     	; 0x1766 <udc_update_iface_desc+0x50>
    174e:	92 81       	ldd	r25, Z+2	; 0x02
    1750:	89 13       	cpse	r24, r25
    1752:	09 c0       	rjmp	.+18     	; 0x1766 <udc_update_iface_desc+0x50>
    1754:	93 81       	ldd	r25, Z+3	; 0x03
    1756:	96 13       	cpse	r25, r22
    1758:	06 c0       	rjmp	.+12     	; 0x1766 <udc_update_iface_desc+0x50>
    175a:	e0 93 ea 21 	sts	0x21EA, r30	; 0x8021ea <udc_ptr_iface>
    175e:	f0 93 eb 21 	sts	0x21EB, r31	; 0x8021eb <udc_ptr_iface+0x1>
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	08 95       	ret
    1766:	90 81       	ld	r25, Z
    1768:	e9 0f       	add	r30, r25
    176a:	f1 1d       	adc	r31, r1
    176c:	e2 17       	cp	r30, r18
    176e:	f3 07       	cpc	r31, r19
    1770:	58 f3       	brcs	.-42     	; 0x1748 <udc_update_iface_desc+0x32>
    1772:	e0 93 ea 21 	sts	0x21EA, r30	; 0x8021ea <udc_ptr_iface>
    1776:	f0 93 eb 21 	sts	0x21EB, r31	; 0x8021eb <udc_ptr_iface+0x1>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	08 95       	ret
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	08 95       	ret
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	08 95       	ret
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	08 95       	ret

0000178a <udc_iface_disable>:
    178a:	ef 92       	push	r14
    178c:	ff 92       	push	r15
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	c8 2f       	mov	r28, r24
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	be df       	rcall	.-132    	; 0x1716 <udc_update_iface_desc>
    179a:	18 2f       	mov	r17, r24
    179c:	88 23       	and	r24, r24
    179e:	81 f1       	breq	.+96     	; 0x1800 <udc_iface_disable+0x76>
    17a0:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <udc_ptr_conf>
    17a4:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    17a8:	ec 2f       	mov	r30, r28
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	ee 0f       	add	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	12 96       	adiw	r26, 0x02	; 2
    17b2:	8d 91       	ld	r24, X+
    17b4:	9c 91       	ld	r25, X
    17b6:	13 97       	sbiw	r26, 0x03	; 3
    17b8:	e8 0f       	add	r30, r24
    17ba:	f9 1f       	adc	r31, r25
    17bc:	e0 80       	ld	r14, Z
    17be:	f1 80       	ldd	r15, Z+1	; 0x01
    17c0:	d7 01       	movw	r26, r14
    17c2:	16 96       	adiw	r26, 0x06	; 6
    17c4:	ed 91       	ld	r30, X+
    17c6:	fc 91       	ld	r31, X
    17c8:	17 97       	sbiw	r26, 0x07	; 7
    17ca:	19 95       	eicall
    17cc:	68 2f       	mov	r22, r24
    17ce:	8c 2f       	mov	r24, r28
    17d0:	a2 df       	rcall	.-188    	; 0x1716 <udc_update_iface_desc>
    17d2:	18 2f       	mov	r17, r24
    17d4:	88 23       	and	r24, r24
    17d6:	a1 f0       	breq	.+40     	; 0x1800 <udc_iface_disable+0x76>
    17d8:	c0 91 ea 21 	lds	r28, 0x21EA	; 0x8021ea <udc_ptr_iface>
    17dc:	d0 91 eb 21 	lds	r29, 0x21EB	; 0x8021eb <udc_ptr_iface+0x1>
    17e0:	65 e0       	ldi	r22, 0x05	; 5
    17e2:	ce 01       	movw	r24, r28
    17e4:	5e df       	rcall	.-324    	; 0x16a2 <udc_next_desc_in_iface>
    17e6:	ec 01       	movw	r28, r24
    17e8:	89 2b       	or	r24, r25
    17ea:	21 f0       	breq	.+8      	; 0x17f4 <udc_iface_disable+0x6a>
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <udd_ep_free>
    17f2:	f6 cf       	rjmp	.-20     	; 0x17e0 <udc_iface_disable+0x56>
    17f4:	d7 01       	movw	r26, r14
    17f6:	12 96       	adiw	r26, 0x02	; 2
    17f8:	ed 91       	ld	r30, X+
    17fa:	fc 91       	ld	r31, X
    17fc:	13 97       	sbiw	r26, 0x03	; 3
    17fe:	19 95       	eicall
    1800:	81 2f       	mov	r24, r17
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	ff 90       	pop	r15
    180a:	ef 90       	pop	r14
    180c:	08 95       	ret

0000180e <udc_iface_enable>:
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	18 2f       	mov	r17, r24
    1816:	7f df       	rcall	.-258    	; 0x1716 <udc_update_iface_desc>
    1818:	88 23       	and	r24, r24
    181a:	39 f1       	breq	.+78     	; 0x186a <udc_iface_enable+0x5c>
    181c:	c0 91 ea 21 	lds	r28, 0x21EA	; 0x8021ea <udc_ptr_iface>
    1820:	d0 91 eb 21 	lds	r29, 0x21EB	; 0x8021eb <udc_ptr_iface+0x1>
    1824:	65 e0       	ldi	r22, 0x05	; 5
    1826:	ce 01       	movw	r24, r28
    1828:	3c df       	rcall	.-392    	; 0x16a2 <udc_next_desc_in_iface>
    182a:	ec 01       	movw	r28, r24
    182c:	89 2b       	or	r24, r25
    182e:	41 f0       	breq	.+16     	; 0x1840 <udc_iface_enable+0x32>
    1830:	4c 81       	ldd	r20, Y+4	; 0x04
    1832:	5d 81       	ldd	r21, Y+5	; 0x05
    1834:	6b 81       	ldd	r22, Y+3	; 0x03
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	0f d7       	rcall	.+3614   	; 0x2658 <udd_ep_alloc>
    183a:	81 11       	cpse	r24, r1
    183c:	f3 cf       	rjmp	.-26     	; 0x1824 <udc_iface_enable+0x16>
    183e:	15 c0       	rjmp	.+42     	; 0x186a <udc_iface_enable+0x5c>
    1840:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <udc_ptr_conf>
    1844:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    1848:	e1 2f       	mov	r30, r17
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	ee 0f       	add	r30, r30
    184e:	ff 1f       	adc	r31, r31
    1850:	12 96       	adiw	r26, 0x02	; 2
    1852:	8d 91       	ld	r24, X+
    1854:	9c 91       	ld	r25, X
    1856:	13 97       	sbiw	r26, 0x03	; 3
    1858:	e8 0f       	add	r30, r24
    185a:	f9 1f       	adc	r31, r25
    185c:	01 90       	ld	r0, Z+
    185e:	f0 81       	ld	r31, Z
    1860:	e0 2d       	mov	r30, r0
    1862:	01 90       	ld	r0, Z+
    1864:	f0 81       	ld	r31, Z
    1866:	e0 2d       	mov	r30, r0
    1868:	19 95       	eicall
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	08 95       	ret

00001872 <udc_get_interface_desc>:
    1872:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <udc_ptr_iface>
    1876:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <udc_ptr_iface+0x1>
    187a:	08 95       	ret

0000187c <udc_start>:
    187c:	55 c6       	rjmp	.+3242   	; 0x2528 <udd_enable>
    187e:	08 95       	ret

00001880 <udc_reset>:
    1880:	cf 93       	push	r28
    1882:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_num_configuration>
    1886:	88 23       	and	r24, r24
    1888:	c1 f0       	breq	.+48     	; 0x18ba <udc_reset+0x3a>
    188a:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <udc_ptr_conf>
    188e:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    1892:	01 90       	ld	r0, Z+
    1894:	f0 81       	ld	r31, Z
    1896:	e0 2d       	mov	r30, r0
    1898:	84 81       	ldd	r24, Z+4	; 0x04
    189a:	88 23       	and	r24, r24
    189c:	71 f0       	breq	.+28     	; 0x18ba <udc_reset+0x3a>
    189e:	c0 e0       	ldi	r28, 0x00	; 0
    18a0:	8c 2f       	mov	r24, r28
    18a2:	73 df       	rcall	.-282    	; 0x178a <udc_iface_disable>
    18a4:	cf 5f       	subi	r28, 0xFF	; 255
    18a6:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <udc_ptr_conf>
    18aa:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    18ae:	01 90       	ld	r0, Z+
    18b0:	f0 81       	ld	r31, Z
    18b2:	e0 2d       	mov	r30, r0
    18b4:	84 81       	ldd	r24, Z+4	; 0x04
    18b6:	c8 17       	cp	r28, r24
    18b8:	98 f3       	brcs	.-26     	; 0x18a0 <udc_reset+0x20>
    18ba:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <udc_num_configuration>
    18be:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udc_device_status>
    18c2:	81 fd       	sbrc	r24, 1
    18c4:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <main_remotewakeup_disable>
    18c8:	10 92 f2 21 	sts	0x21F2, r1	; 0x8021f2 <udc_device_status>
    18cc:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <udc_device_status+0x1>
    18d0:	cf 91       	pop	r28
    18d2:	08 95       	ret

000018d4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    18d4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    18d6:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_num_configuration>
    18da:	88 23       	and	r24, r24
    18dc:	49 f1       	breq	.+82     	; 0x1930 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18de:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <udc_ptr_conf>
    18e2:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    18e6:	ed 91       	ld	r30, X+
    18e8:	fc 91       	ld	r31, X
    18ea:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    18ec:	84 81       	ldd	r24, Z+4	; 0x04
    18ee:	88 23       	and	r24, r24
    18f0:	f9 f0       	breq	.+62     	; 0x1930 <udc_sof_notify+0x5c>
    18f2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    18f4:	ec 2f       	mov	r30, r28
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	ee 0f       	add	r30, r30
    18fa:	ff 1f       	adc	r31, r31
    18fc:	12 96       	adiw	r26, 0x02	; 2
    18fe:	8d 91       	ld	r24, X+
    1900:	9c 91       	ld	r25, X
    1902:	13 97       	sbiw	r26, 0x03	; 3
    1904:	e8 0f       	add	r30, r24
    1906:	f9 1f       	adc	r31, r25
    1908:	01 90       	ld	r0, Z+
    190a:	f0 81       	ld	r31, Z
    190c:	e0 2d       	mov	r30, r0
    190e:	00 84       	ldd	r0, Z+8	; 0x08
    1910:	f1 85       	ldd	r31, Z+9	; 0x09
    1912:	e0 2d       	mov	r30, r0
    1914:	30 97       	sbiw	r30, 0x00	; 0
    1916:	09 f0       	breq	.+2      	; 0x191a <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1918:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    191a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    191c:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <udc_ptr_conf>
    1920:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    1924:	ed 91       	ld	r30, X+
    1926:	fc 91       	ld	r31, X
    1928:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    192a:	84 81       	ldd	r24, Z+4	; 0x04
    192c:	c8 17       	cp	r28, r24
    192e:	10 f3       	brcs	.-60     	; 0x18f4 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    193c:	e1 ec       	ldi	r30, 0xC1	; 193
    193e:	f3 e2       	ldi	r31, 0x23	; 35
    1940:	12 86       	std	Z+10, r1	; 0x0a
    1942:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1944:	14 86       	std	Z+12, r1	; 0x0c
    1946:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1948:	16 86       	std	Z+14, r1	; 0x0e
    194a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    194c:	80 81       	ld	r24, Z
    194e:	88 23       	and	r24, r24
    1950:	0c f0       	brlt	.+2      	; 0x1954 <udc_process_setup+0x20>
    1952:	7e c2       	rjmp	.+1276   	; 0x1e50 <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1954:	20 91 c7 23 	lds	r18, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    1958:	30 91 c8 23 	lds	r19, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    195c:	21 15       	cp	r18, r1
    195e:	31 05       	cpc	r19, r1
    1960:	09 f0       	breq	.+2      	; 0x1964 <udc_process_setup+0x30>
    1962:	7b c2       	rjmp	.+1270   	; 0x1e5a <udc_process_setup+0x526>
    1964:	6d c2       	rjmp	.+1242   	; 0x1e40 <udc_process_setup+0x50c>
    1966:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1968:	09 f0       	breq	.+2      	; 0x196c <udc_process_setup+0x38>
    196a:	a0 c0       	rjmp	.+320    	; 0x1aac <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    196c:	90 91 c2 23 	lds	r25, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x1>
    1970:	96 30       	cpi	r25, 0x06	; 6
    1972:	79 f0       	breq	.+30     	; 0x1992 <udc_process_setup+0x5e>
    1974:	98 30       	cpi	r25, 0x08	; 8
    1976:	09 f4       	brne	.+2      	; 0x197a <udc_process_setup+0x46>
    1978:	8f c0       	rjmp	.+286    	; 0x1a98 <udc_process_setup+0x164>
    197a:	91 11       	cpse	r25, r1
    197c:	97 c0       	rjmp	.+302    	; 0x1aac <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    197e:	22 30       	cpi	r18, 0x02	; 2
    1980:	31 05       	cpc	r19, r1
    1982:	09 f0       	breq	.+2      	; 0x1986 <udc_process_setup+0x52>
    1984:	19 c2       	rjmp	.+1074   	; 0x1db8 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1986:	62 e0       	ldi	r22, 0x02	; 2
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	82 ef       	ldi	r24, 0xF2	; 242
    198c:	91 e2       	ldi	r25, 0x21	; 33
    198e:	5d d6       	rcall	.+3258   	; 0x264a <udd_set_setup_payload>
    1990:	69 c2       	rjmp	.+1234   	; 0x1e64 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1992:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0x2>
    1996:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    199a:	29 2f       	mov	r18, r25
    199c:	33 27       	eor	r19, r19
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	a9 f0       	breq	.+42     	; 0x19ce <udc_process_setup+0x9a>
    19a4:	20 f4       	brcc	.+8      	; 0x19ae <udc_process_setup+0x7a>
    19a6:	21 30       	cpi	r18, 0x01	; 1
    19a8:	31 05       	cpc	r19, r1
    19aa:	41 f0       	breq	.+16     	; 0x19bc <udc_process_setup+0x88>
    19ac:	c7 c1       	rjmp	.+910    	; 0x1d3c <udc_process_setup+0x408>
    19ae:	23 30       	cpi	r18, 0x03	; 3
    19b0:	31 05       	cpc	r19, r1
    19b2:	d9 f1       	breq	.+118    	; 0x1a2a <udc_process_setup+0xf6>
    19b4:	2f 30       	cpi	r18, 0x0F	; 15
    19b6:	31 05       	cpc	r19, r1
    19b8:	51 f1       	breq	.+84     	; 0x1a0e <udc_process_setup+0xda>
    19ba:	c0 c1       	rjmp	.+896    	; 0x1d3c <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    19bc:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    19c0:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    19c4:	dc 01       	movw	r26, r24
    19c6:	6c 91       	ld	r22, X
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	3f d6       	rcall	.+3198   	; 0x264a <udd_set_setup_payload>
    19cc:	56 c0       	rjmp	.+172    	; 0x1a7a <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    19ce:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    19d2:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    19d6:	21 89       	ldd	r18, Z+17	; 0x11
    19d8:	82 17       	cp	r24, r18
    19da:	08 f0       	brcs	.+2      	; 0x19de <udc_process_setup+0xaa>
    19dc:	ed c1       	rjmp	.+986    	; 0x1db8 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    19de:	99 27       	eor	r25, r25
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    19ec:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    19f0:	e8 0f       	add	r30, r24
    19f2:	f9 1f       	adc	r31, r25
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    19f8:	fc 01       	movw	r30, r24
    19fa:	62 81       	ldd	r22, Z+2	; 0x02
    19fc:	73 81       	ldd	r23, Z+3	; 0x03
    19fe:	25 d6       	rcall	.+3146   	; 0x264a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1a00:	e0 91 c9 23 	lds	r30, 0x23C9	; 0x8023c9 <udd_g_ctrlreq+0x8>
    1a04:	f0 91 ca 23 	lds	r31, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x9>
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	81 83       	std	Z+1, r24	; 0x01
    1a0c:	36 c0       	rjmp	.+108    	; 0x1a7a <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1a0e:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    1a12:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <udc_process_setup+0xe8>
    1a1a:	ce c1       	rjmp	.+924    	; 0x1db8 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	12 96       	adiw	r26, 0x02	; 2
    1a20:	6d 91       	ld	r22, X+
    1a22:	7c 91       	ld	r23, X
    1a24:	13 97       	sbiw	r26, 0x03	; 3
    1a26:	11 d6       	rcall	.+3106   	; 0x264a <udd_set_setup_payload>
    1a28:	28 c0       	rjmp	.+80     	; 0x1a7a <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1a2a:	99 27       	eor	r25, r25
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	91 05       	cpc	r25, r1
    1a30:	71 f0       	breq	.+28     	; 0x1a4e <udc_process_setup+0x11a>
    1a32:	38 f0       	brcs	.+14     	; 0x1a42 <udc_process_setup+0x10e>
    1a34:	02 97       	sbiw	r24, 0x02	; 2
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <udc_process_setup+0x106>
    1a38:	8a c1       	rjmp	.+788    	; 0x1d4e <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1a3a:	e6 e4       	ldi	r30, 0x46	; 70
    1a3c:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1a3e:	3b e1       	ldi	r19, 0x1B	; 27
    1a40:	09 c0       	rjmp	.+18     	; 0x1a54 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1a42:	64 e0       	ldi	r22, 0x04	; 4
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	8c e6       	ldi	r24, 0x6C	; 108
    1a48:	91 e2       	ldi	r25, 0x21	; 33
    1a4a:	ff d5       	rcall	.+3070   	; 0x264a <udd_set_setup_payload>
    1a4c:	16 c0       	rjmp	.+44     	; 0x1a7a <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1a4e:	e2 e6       	ldi	r30, 0x62	; 98
    1a50:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a52:	39 e0       	ldi	r19, 0x09	; 9
    1a54:	a0 e1       	ldi	r26, 0x10	; 16
    1a56:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1a58:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1a5a:	81 91       	ld	r24, Z+
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	8d 93       	st	X+, r24
    1a60:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1a62:	2f 5f       	subi	r18, 0xFF	; 255
    1a64:	23 17       	cp	r18, r19
    1a66:	c8 f3       	brcs	.-14     	; 0x1a5a <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1a68:	63 2f       	mov	r22, r19
    1a6a:	66 0f       	add	r22, r22
    1a6c:	6e 5f       	subi	r22, 0xFE	; 254
    1a6e:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <udc_string_desc>
		udd_set_setup_payload(
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	8e e0       	ldi	r24, 0x0E	; 14
    1a76:	91 e2       	ldi	r25, 0x21	; 33
    1a78:	e8 d5       	rcall	.+3024   	; 0x264a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1a7a:	e1 ec       	ldi	r30, 0xC1	; 193
    1a7c:	f3 e2       	ldi	r31, 0x23	; 35
    1a7e:	86 81       	ldd	r24, Z+6	; 0x06
    1a80:	97 81       	ldd	r25, Z+7	; 0x07
    1a82:	22 85       	ldd	r18, Z+10	; 0x0a
    1a84:	33 85       	ldd	r19, Z+11	; 0x0b
    1a86:	82 17       	cp	r24, r18
    1a88:	93 07       	cpc	r25, r19
    1a8a:	08 f0       	brcs	.+2      	; 0x1a8e <udc_process_setup+0x15a>
    1a8c:	eb c1       	rjmp	.+982    	; 0x1e64 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1a8e:	80 93 cb 23 	sts	0x23CB, r24	; 0x8023cb <udd_g_ctrlreq+0xa>
    1a92:	90 93 cc 23 	sts	0x23CC, r25	; 0x8023cc <udd_g_ctrlreq+0xb>
    1a96:	e6 c1       	rjmp	.+972    	; 0x1e64 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a98:	21 30       	cpi	r18, 0x01	; 1
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1a9e:	8c c1       	rjmp	.+792    	; 0x1db8 <udc_process_setup+0x484>
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	8e ee       	ldi	r24, 0xEE	; 238
    1aa6:	91 e2       	ldi	r25, 0x21	; 33
    1aa8:	d0 d5       	rcall	.+2976   	; 0x264a <udd_set_setup_payload>
    1aaa:	dc c1       	rjmp	.+952    	; 0x1e64 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	e1 f5       	brne	.+120    	; 0x1b28 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ab0:	90 91 c2 23 	lds	r25, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x1>
    1ab4:	9a 30       	cpi	r25, 0x0A	; 10
    1ab6:	c1 f5       	brne	.+112    	; 0x1b28 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1ab8:	21 30       	cpi	r18, 0x01	; 1
    1aba:	31 05       	cpc	r19, r1
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <udc_process_setup+0x18c>
    1abe:	4c c1       	rjmp	.+664    	; 0x1d58 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1ac0:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_num_configuration>
    1ac4:	88 23       	and	r24, r24
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <udc_process_setup+0x196>
    1ac8:	47 c1       	rjmp	.+654    	; 0x1d58 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1aca:	c0 91 c5 23 	lds	r28, 0x23C5	; 0x8023c5 <udd_g_ctrlreq+0x4>
    1ace:	d0 91 c6 23 	lds	r29, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ad2:	00 91 ec 21 	lds	r16, 0x21EC	; 0x8021ec <udc_ptr_conf>
    1ad6:	10 91 ed 21 	lds	r17, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    1ada:	d8 01       	movw	r26, r16
    1adc:	ed 91       	ld	r30, X+
    1ade:	fc 91       	ld	r31, X
    1ae0:	84 81       	ldd	r24, Z+4	; 0x04
    1ae2:	c8 17       	cp	r28, r24
    1ae4:	08 f0       	brcs	.+2      	; 0x1ae8 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1ae6:	38 c1       	rjmp	.+624    	; 0x1d58 <udc_process_setup+0x424>
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	8c 2f       	mov	r24, r28
    1aec:	14 de       	rcall	.-984    	; 0x1716 <udc_update_iface_desc>
    1aee:	88 23       	and	r24, r24
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <udc_process_setup+0x1c0>
    1af2:	2d c1       	rjmp	.+602    	; 0x1d4e <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1af4:	ce 01       	movw	r24, r28
    1af6:	99 27       	eor	r25, r25
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	d8 01       	movw	r26, r16
    1afe:	12 96       	adiw	r26, 0x02	; 2
    1b00:	ed 91       	ld	r30, X+
    1b02:	fc 91       	ld	r31, X
    1b04:	13 97       	sbiw	r26, 0x03	; 3
    1b06:	e8 0f       	add	r30, r24
    1b08:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1b0a:	01 90       	ld	r0, Z+
    1b0c:	f0 81       	ld	r31, Z
    1b0e:	e0 2d       	mov	r30, r0
    1b10:	86 81       	ldd	r24, Z+6	; 0x06
    1b12:	97 81       	ldd	r25, Z+7	; 0x07
    1b14:	fc 01       	movw	r30, r24
    1b16:	19 95       	eicall
    1b18:	80 93 f0 21 	sts	0x21F0, r24	; 0x8021f0 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	80 ef       	ldi	r24, 0xF0	; 240
    1b22:	91 e2       	ldi	r25, 0x21	; 33
    1b24:	92 d5       	rcall	.+2852   	; 0x264a <udd_set_setup_payload>
    1b26:	9e c1       	rjmp	.+828    	; 0x1e64 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1b28:	82 30       	cpi	r24, 0x02	; 2
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <udc_process_setup+0x1fa>
    1b2c:	10 c1       	rjmp	.+544    	; 0x1d4e <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b2e:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x1>
    1b32:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1b34:	05 c1       	rjmp	.+522    	; 0x1d40 <udc_process_setup+0x40c>
    1b36:	22 30       	cpi	r18, 0x02	; 2
    1b38:	31 05       	cpc	r19, r1
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1b3c:	3d c1       	rjmp	.+634    	; 0x1db8 <udc_process_setup+0x484>
    1b3e:	80 91 c5 23 	lds	r24, 0x23C5	; 0x8023c5 <udd_g_ctrlreq+0x4>
    1b42:	12 d6       	rcall	.+3108   	; 0x2768 <udd_ep_is_halted>
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	80 93 e8 21 	sts	0x21E8, r24	; 0x8021e8 <udc_ep_status.4577>
    1b4a:	90 93 e9 21 	sts	0x21E9, r25	; 0x8021e9 <udc_ep_status.4577+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1b4e:	62 e0       	ldi	r22, 0x02	; 2
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	88 ee       	ldi	r24, 0xE8	; 232
    1b54:	91 e2       	ldi	r25, 0x21	; 33
    1b56:	79 d5       	rcall	.+2802   	; 0x264a <udd_set_setup_payload>
    1b58:	85 c1       	rjmp	.+778    	; 0x1e64 <udc_process_setup+0x530>
    1b5a:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <udc_process_setup+0x22c>
    1b5e:	9f c0       	rjmp	.+318    	; 0x1c9e <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b60:	90 91 c2 23 	lds	r25, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x1>
    1b64:	93 30       	cpi	r25, 0x03	; 3
    1b66:	91 f1       	breq	.+100    	; 0x1bcc <udc_process_setup+0x298>
    1b68:	18 f4       	brcc	.+6      	; 0x1b70 <udc_process_setup+0x23c>
    1b6a:	91 30       	cpi	r25, 0x01	; 1
    1b6c:	a9 f0       	breq	.+42     	; 0x1b98 <udc_process_setup+0x264>
    1b6e:	97 c0       	rjmp	.+302    	; 0x1c9e <udc_process_setup+0x36a>
    1b70:	95 30       	cpi	r25, 0x05	; 5
    1b72:	21 f0       	breq	.+8      	; 0x1b7c <udc_process_setup+0x248>
    1b74:	99 30       	cpi	r25, 0x09	; 9
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <udc_process_setup+0x246>
    1b78:	43 c0       	rjmp	.+134    	; 0x1c00 <udc_process_setup+0x2cc>
    1b7a:	91 c0       	rjmp	.+290    	; 0x1c9e <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b7c:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    1b80:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    1b84:	89 2b       	or	r24, r25
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <udc_process_setup+0x256>
    1b88:	17 c1       	rjmp	.+558    	; 0x1db8 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1b8a:	86 e8       	ldi	r24, 0x86	; 134
    1b8c:	9b e0       	ldi	r25, 0x0B	; 11
    1b8e:	80 93 cd 23 	sts	0x23CD, r24	; 0x8023cd <udd_g_ctrlreq+0xc>
    1b92:	90 93 ce 23 	sts	0x23CE, r25	; 0x8023ce <udd_g_ctrlreq+0xd>
    1b96:	66 c1       	rjmp	.+716    	; 0x1e64 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b98:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    1b9c:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    1ba0:	89 2b       	or	r24, r25
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <udc_process_setup+0x272>
    1ba4:	09 c1       	rjmp	.+530    	; 0x1db8 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1ba6:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0x2>
    1baa:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0x3>
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <udc_process_setup+0x280>
    1bb2:	02 c1       	rjmp	.+516    	; 0x1db8 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1bb4:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udc_device_status>
    1bb8:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <udc_device_status+0x1>
    1bbc:	8d 7f       	andi	r24, 0xFD	; 253
    1bbe:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udc_device_status>
    1bc2:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1bc6:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <main_remotewakeup_disable>
    1bca:	4c c1       	rjmp	.+664    	; 0x1e64 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1bcc:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    1bd0:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    1bd4:	89 2b       	or	r24, r25
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <udc_process_setup+0x2a6>
    1bd8:	ef c0       	rjmp	.+478    	; 0x1db8 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1bda:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0x2>
    1bde:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0x3>
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	09 f0       	breq	.+2      	; 0x1be8 <udc_process_setup+0x2b4>
    1be6:	ae c0       	rjmp	.+348    	; 0x1d44 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1be8:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udc_device_status>
    1bec:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <udc_device_status+0x1>
    1bf0:	82 60       	ori	r24, 0x02	; 2
    1bf2:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udc_device_status>
    1bf6:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1bfa:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1bfe:	32 c1       	rjmp	.+612    	; 0x1e64 <udc_process_setup+0x530>
    1c00:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    1c04:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    1c08:	89 2b       	or	r24, r25
    1c0a:	09 f0       	breq	.+2      	; 0x1c0e <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1c0c:	d5 c0       	rjmp	.+426    	; 0x1db8 <udc_process_setup+0x484>
    1c0e:	1a d5       	rcall	.+2612   	; 0x2644 <udd_getaddress>
    1c10:	88 23       	and	r24, r24
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <udc_process_setup+0x2e2>
    1c14:	9c c0       	rjmp	.+312    	; 0x1d4e <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1c16:	20 91 c3 23 	lds	r18, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0x2>
    1c1a:	30 91 c4 23 	lds	r19, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1c1e:	33 27       	eor	r19, r19
    1c20:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1c24:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1c28:	81 89       	ldd	r24, Z+17	; 0x11
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	82 17       	cp	r24, r18
    1c2e:	93 07       	cpc	r25, r19
    1c30:	08 f4       	brcc	.+2      	; 0x1c34 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1c32:	8d c0       	rjmp	.+282    	; 0x1d4e <udc_process_setup+0x41a>
    1c34:	25 de       	rcall	.-950    	; 0x1880 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1c36:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0x2>
    1c3a:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0x3>
    1c3e:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1c42:	88 23       	and	r24, r24
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <udc_process_setup+0x314>
    1c46:	0e c1       	rjmp	.+540    	; 0x1e64 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1c48:	99 27       	eor	r25, r25
    1c4a:	81 50       	subi	r24, 0x01	; 1
    1c4c:	90 4c       	sbci	r25, 0xC0	; 192
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1c5a:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1c5e:	e8 0f       	add	r30, r24
    1c60:	f9 1f       	adc	r31, r25
    1c62:	e0 93 ec 21 	sts	0x21EC, r30	; 0x8021ec <udc_ptr_conf>
    1c66:	f0 93 ed 21 	sts	0x21ED, r31	; 0x8021ed <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c6a:	01 90       	ld	r0, Z+
    1c6c:	f0 81       	ld	r31, Z
    1c6e:	e0 2d       	mov	r30, r0
    1c70:	84 81       	ldd	r24, Z+4	; 0x04
    1c72:	88 23       	and	r24, r24
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <udc_process_setup+0x344>
    1c76:	f6 c0       	rjmp	.+492    	; 0x1e64 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1c78:	c0 e0       	ldi	r28, 0x00	; 0
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	8c 2f       	mov	r24, r28
    1c7e:	c7 dd       	rcall	.-1138   	; 0x180e <udc_iface_enable>
    1c80:	88 23       	and	r24, r24
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <udc_process_setup+0x352>
    1c84:	64 c0       	rjmp	.+200    	; 0x1d4e <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c86:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c88:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <udc_ptr_conf>
    1c8c:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    1c90:	01 90       	ld	r0, Z+
    1c92:	f0 81       	ld	r31, Z
    1c94:	e0 2d       	mov	r30, r0
    1c96:	84 81       	ldd	r24, Z+4	; 0x04
    1c98:	c8 17       	cp	r28, r24
    1c9a:	78 f3       	brcs	.-34     	; 0x1c7a <udc_process_setup+0x346>
    1c9c:	e3 c0       	rjmp	.+454    	; 0x1e64 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	e9 f4       	brne	.+58     	; 0x1cdc <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ca2:	90 91 c2 23 	lds	r25, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x1>
    1ca6:	9b 30       	cpi	r25, 0x0B	; 11
    1ca8:	c9 f4       	brne	.+50     	; 0x1cdc <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1caa:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    1cae:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    1cb2:	89 2b       	or	r24, r25
    1cb4:	09 f0       	breq	.+2      	; 0x1cb8 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1cb6:	50 c0       	rjmp	.+160    	; 0x1d58 <udc_process_setup+0x424>
    1cb8:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_num_configuration>
    1cbc:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <udc_process_setup+0x38e>
    1cc0:	4b c0       	rjmp	.+150    	; 0x1d58 <udc_process_setup+0x424>
    1cc2:	e1 ec       	ldi	r30, 0xC1	; 193
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1cc4:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1cc6:	c4 81       	ldd	r28, Z+4	; 0x04
    1cc8:	d2 81       	ldd	r29, Z+2	; 0x02
    1cca:	8c 2f       	mov	r24, r28
    1ccc:	5e dd       	rcall	.-1348   	; 0x178a <udc_iface_disable>
    1cce:	88 23       	and	r24, r24
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1cd2:	3d c0       	rjmp	.+122    	; 0x1d4e <udc_process_setup+0x41a>
    1cd4:	6d 2f       	mov	r22, r29
    1cd6:	8c 2f       	mov	r24, r28
    1cd8:	9a dd       	rcall	.-1228   	; 0x180e <udc_iface_enable>
    1cda:	37 c0       	rjmp	.+110    	; 0x1d4a <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1cdc:	82 30       	cpi	r24, 0x02	; 2
    1cde:	b9 f5       	brne	.+110    	; 0x1d4e <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ce0:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x1>
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	19 f0       	breq	.+6      	; 0x1cee <udc_process_setup+0x3ba>
    1ce8:	83 30       	cpi	r24, 0x03	; 3
    1cea:	99 f0       	breq	.+38     	; 0x1d12 <udc_process_setup+0x3de>
    1cec:	2d c0       	rjmp	.+90     	; 0x1d48 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1cee:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    1cf2:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    1cf6:	89 2b       	or	r24, r25
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1cfa:	5e c0       	rjmp	.+188    	; 0x1db8 <udc_process_setup+0x484>
    1cfc:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0x2>
    1d00:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0x3>
    1d04:	89 2b       	or	r24, r25
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d08:	57 c0       	rjmp	.+174    	; 0x1db8 <udc_process_setup+0x484>
    1d0a:	80 91 c5 23 	lds	r24, 0x23C5	; 0x8023c5 <udd_g_ctrlreq+0x4>
    1d0e:	47 d5       	rcall	.+2702   	; 0x279e <udd_ep_clear_halt>
    1d10:	1c c0       	rjmp	.+56     	; 0x1d4a <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d12:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    1d16:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    1d1a:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <udc_process_setup+0x3ec>
    1d1e:	4c c0       	rjmp	.+152    	; 0x1db8 <udc_process_setup+0x484>
    1d20:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0x2>
    1d24:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0x3>
    1d28:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <udc_process_setup+0x3fa>
    1d2c:	45 c0       	rjmp	.+138    	; 0x1db8 <udc_process_setup+0x484>
    1d2e:	c1 ec       	ldi	r28, 0xC1	; 193
    1d30:	d3 e2       	ldi	r29, 0x23	; 35
    1d32:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d34:	35 d6       	rcall	.+3178   	; 0x29a0 <udd_ep_abort>
    1d36:	8c 81       	ldd	r24, Y+4	; 0x04
    1d38:	9e d6       	rcall	.+3388   	; 0x2a76 <udd_ep_set_halt>
    1d3a:	07 c0       	rjmp	.+14     	; 0x1d4a <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	05 c0       	rjmp	.+10     	; 0x1d4a <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1d48:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1d4a:	81 11       	cpse	r24, r1
    1d4c:	8c c0       	rjmp	.+280    	; 0x1e66 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1d4e:	80 91 c1 23 	lds	r24, 0x23C1	; 0x8023c1 <udd_g_ctrlreq>
    1d52:	8f 71       	andi	r24, 0x1F	; 31
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	81 f5       	brne	.+96     	; 0x1db8 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d58:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_num_configuration>
    1d5c:	88 23       	and	r24, r24
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d60:	71 c0       	rjmp	.+226    	; 0x1e44 <udc_process_setup+0x510>
    1d62:	00 91 c5 23 	lds	r16, 0x23C5	; 0x8023c5 <udd_g_ctrlreq+0x4>
    1d66:	10 91 c6 23 	lds	r17, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1d6a:	c0 91 ec 21 	lds	r28, 0x21EC	; 0x8021ec <udc_ptr_conf>
    1d6e:	d0 91 ed 21 	lds	r29, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    1d72:	e8 81       	ld	r30, Y
    1d74:	f9 81       	ldd	r31, Y+1	; 0x01
    1d76:	84 81       	ldd	r24, Z+4	; 0x04
    1d78:	08 17       	cp	r16, r24
    1d7a:	08 f0       	brcs	.+2      	; 0x1d7e <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1d7c:	65 c0       	rjmp	.+202    	; 0x1e48 <udc_process_setup+0x514>
    1d7e:	60 e0       	ldi	r22, 0x00	; 0
    1d80:	80 2f       	mov	r24, r16
    1d82:	c9 dc       	rcall	.-1646   	; 0x1716 <udc_update_iface_desc>
    1d84:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d86:	c1 f0       	breq	.+48     	; 0x1db8 <udc_process_setup+0x484>
    1d88:	f8 01       	movw	r30, r16
    1d8a:	ff 27       	eor	r31, r31
    1d8c:	cf 01       	movw	r24, r30
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	ea 81       	ldd	r30, Y+2	; 0x02
    1d94:	fb 81       	ldd	r31, Y+3	; 0x03
    1d96:	e8 0f       	add	r30, r24
    1d98:	f9 1f       	adc	r31, r25
    1d9a:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d9c:	d1 81       	ldd	r29, Z+1	; 0x01
    1d9e:	ee 81       	ldd	r30, Y+6	; 0x06
    1da0:	ff 81       	ldd	r31, Y+7	; 0x07
    1da2:	19 95       	eicall
    1da4:	68 2f       	mov	r22, r24
    1da6:	80 2f       	mov	r24, r16
    1da8:	b6 dc       	rcall	.-1684   	; 0x1716 <udc_update_iface_desc>
    1daa:	88 23       	and	r24, r24
    1dac:	29 f0       	breq	.+10     	; 0x1db8 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1dae:	ec 81       	ldd	r30, Y+4	; 0x04
    1db0:	fd 81       	ldd	r31, Y+5	; 0x05
    1db2:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1db4:	81 11       	cpse	r24, r1
    1db6:	57 c0       	rjmp	.+174    	; 0x1e66 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1db8:	80 91 c1 23 	lds	r24, 0x23C1	; 0x8023c1 <udd_g_ctrlreq>
    1dbc:	8f 71       	andi	r24, 0x1F	; 31
    1dbe:	82 30       	cpi	r24, 0x02	; 2
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <udc_process_setup+0x490>
    1dc2:	44 c0       	rjmp	.+136    	; 0x1e4c <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1dc4:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_num_configuration>
    1dc8:	88 23       	and	r24, r24
    1dca:	b1 f1       	breq	.+108    	; 0x1e38 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dcc:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <udc_ptr_conf>
    1dd0:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    1dd4:	ed 91       	ld	r30, X+
    1dd6:	fc 91       	ld	r31, X
    1dd8:	11 97       	sbiw	r26, 0x01	; 1
    1dda:	84 81       	ldd	r24, Z+4	; 0x04
    1ddc:	88 23       	and	r24, r24
    1dde:	71 f1       	breq	.+92     	; 0x1e3c <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1de0:	c0 e0       	ldi	r28, 0x00	; 0
    1de2:	ec 2f       	mov	r30, r28
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	ee 0f       	add	r30, r30
    1de8:	ff 1f       	adc	r31, r31
    1dea:	12 96       	adiw	r26, 0x02	; 2
    1dec:	8d 91       	ld	r24, X+
    1dee:	9c 91       	ld	r25, X
    1df0:	13 97       	sbiw	r26, 0x03	; 3
    1df2:	e8 0f       	add	r30, r24
    1df4:	f9 1f       	adc	r31, r25
    1df6:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1df8:	11 81       	ldd	r17, Z+1	; 0x01
    1dfa:	d8 01       	movw	r26, r16
    1dfc:	16 96       	adiw	r26, 0x06	; 6
    1dfe:	ed 91       	ld	r30, X+
    1e00:	fc 91       	ld	r31, X
    1e02:	17 97       	sbiw	r26, 0x07	; 7
    1e04:	19 95       	eicall
    1e06:	68 2f       	mov	r22, r24
    1e08:	8c 2f       	mov	r24, r28
    1e0a:	85 dc       	rcall	.-1782   	; 0x1716 <udc_update_iface_desc>
    1e0c:	88 23       	and	r24, r24
    1e0e:	59 f1       	breq	.+86     	; 0x1e66 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1e10:	d8 01       	movw	r26, r16
    1e12:	14 96       	adiw	r26, 0x04	; 4
    1e14:	ed 91       	ld	r30, X+
    1e16:	fc 91       	ld	r31, X
    1e18:	15 97       	sbiw	r26, 0x05	; 5
    1e1a:	19 95       	eicall
    1e1c:	81 11       	cpse	r24, r1
    1e1e:	23 c0       	rjmp	.+70     	; 0x1e66 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1e20:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e22:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <udc_ptr_conf>
    1e26:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <udc_ptr_conf+0x1>
    1e2a:	ed 91       	ld	r30, X+
    1e2c:	fc 91       	ld	r31, X
    1e2e:	11 97       	sbiw	r26, 0x01	; 1
    1e30:	94 81       	ldd	r25, Z+4	; 0x04
    1e32:	c9 17       	cp	r28, r25
    1e34:	b0 f2       	brcs	.-84     	; 0x1de2 <udc_process_setup+0x4ae>
    1e36:	17 c0       	rjmp	.+46     	; 0x1e66 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	15 c0       	rjmp	.+42     	; 0x1e66 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	13 c0       	rjmp	.+38     	; 0x1e66 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	11 c0       	rjmp	.+34     	; 0x1e66 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <udc_process_setup+0x532>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	0d c0       	rjmp	.+26     	; 0x1e66 <udc_process_setup+0x532>
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	0b c0       	rjmp	.+22     	; 0x1e66 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1e50:	98 2f       	mov	r25, r24
    1e52:	90 76       	andi	r25, 0x60	; 96
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <udc_process_setup+0x524>
    1e56:	7b cf       	rjmp	.-266    	; 0x1d4e <udc_process_setup+0x41a>
    1e58:	80 ce       	rjmp	.-768    	; 0x1b5a <udc_process_setup+0x226>
    1e5a:	98 2f       	mov	r25, r24
    1e5c:	90 76       	andi	r25, 0x60	; 96
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <udc_process_setup+0x52e>
    1e60:	76 cf       	rjmp	.-276    	; 0x1d4e <udc_process_setup+0x41a>
    1e62:	81 cd       	rjmp	.-1278   	; 0x1966 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	08 95       	ret

00001e70 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1e70:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1e74:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1e76:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1e78:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1e7c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1e7e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1e82:	08 95       	ret

00001e84 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1e84:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1e86:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1e88:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1e8a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1e8c:	60 83       	st	Z, r22
	ret                             // Return to caller
    1e8e:	08 95       	ret

00001e90 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	1f 92       	push	r1
    1e96:	1f 92       	push	r1
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	26 c0       	rjmp	.+76     	; 0x1eec <udd_sleep_mode+0x5c>
    1ea0:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <udd_b_idle>
    1ea4:	99 23       	and	r25, r25
    1ea6:	f9 f0       	breq	.+62     	; 0x1ee6 <udd_sleep_mode+0x56>
    1ea8:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <sleepmgr_locks+0x1>
    1eac:	91 11       	cpse	r25, r1
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <udd_sleep_mode+0x22>
    1eb0:	ff cf       	rjmp	.-2      	; 0x1eb0 <udd_sleep_mode+0x20>
    1eb2:	9f b7       	in	r25, 0x3f	; 63
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	f8 94       	cli
    1eb8:	2a 81       	ldd	r18, Y+2	; 0x02
    1eba:	eb eb       	ldi	r30, 0xBB	; 187
    1ebc:	f3 e2       	ldi	r31, 0x23	; 35
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	91 50       	subi	r25, 0x01	; 1
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	2f bf       	out	0x3f, r18	; 63
    1ec6:	0f c0       	rjmp	.+30     	; 0x1ee6 <udd_sleep_mode+0x56>
    1ec8:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <sleepmgr_locks+0x1>
    1ecc:	9f 3f       	cpi	r25, 0xFF	; 255
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <udd_sleep_mode+0x42>
    1ed0:	ff cf       	rjmp	.-2      	; 0x1ed0 <udd_sleep_mode+0x40>
    1ed2:	9f b7       	in	r25, 0x3f	; 63
    1ed4:	99 83       	std	Y+1, r25	; 0x01
    1ed6:	f8 94       	cli
    1ed8:	29 81       	ldd	r18, Y+1	; 0x01
    1eda:	eb eb       	ldi	r30, 0xBB	; 187
    1edc:	f3 e2       	ldi	r31, 0x23	; 35
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	9f 5f       	subi	r25, 0xFF	; 255
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	2f bf       	out	0x3f, r18	; 63
    1ee6:	80 93 b4 23 	sts	0x23B4, r24	; 0x8023b4 <udd_b_idle>
    1eea:	05 c0       	rjmp	.+10     	; 0x1ef6 <udd_sleep_mode+0x66>
    1eec:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <udd_b_idle>
    1ef0:	99 23       	and	r25, r25
    1ef2:	51 f3       	breq	.-44     	; 0x1ec8 <udd_sleep_mode+0x38>
    1ef4:	f8 cf       	rjmp	.-16     	; 0x1ee6 <udd_sleep_mode+0x56>
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	08 95       	ret

00001f00 <udd_ctrl_init>:
    1f00:	0f 93       	push	r16
    1f02:	e8 ec       	ldi	r30, 0xC8	; 200
    1f04:	f4 e0       	ldi	r31, 0x04	; 4
    1f06:	80 81       	ld	r24, Z
    1f08:	8f 7d       	andi	r24, 0xDF	; 223
    1f0a:	80 83       	st	Z, r24
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8f 7d       	andi	r24, 0xDF	; 223
    1f10:	80 83       	st	Z, r24
    1f12:	e8 e6       	ldi	r30, 0x68	; 104
    1f14:	f3 e2       	ldi	r31, 0x23	; 35
    1f16:	02 e0       	ldi	r16, 0x02	; 2
    1f18:	05 93       	las	Z, r16
    1f1a:	10 92 6a 23 	sts	0x236A, r1	; 0x80236a <udd_sram+0x1e>
    1f1e:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udd_sram+0x1f>
    1f22:	00 e2       	ldi	r16, 0x20	; 32
    1f24:	06 93       	lac	Z, r16
    1f26:	00 e4       	ldi	r16, 0x40	; 64
    1f28:	06 93       	lac	Z, r16
    1f2a:	e0 e6       	ldi	r30, 0x60	; 96
    1f2c:	f3 e2       	ldi	r31, 0x23	; 35
    1f2e:	00 e4       	ldi	r16, 0x40	; 64
    1f30:	06 93       	lac	Z, r16
    1f32:	e1 ec       	ldi	r30, 0xC1	; 193
    1f34:	f3 e2       	ldi	r31, 0x23	; 35
    1f36:	14 86       	std	Z+12, r1	; 0x0c
    1f38:	15 86       	std	Z+13, r1	; 0x0d
    1f3a:	16 86       	std	Z+14, r1	; 0x0e
    1f3c:	17 86       	std	Z+15, r1	; 0x0f
    1f3e:	12 86       	std	Z+10, r1	; 0x0a
    1f40:	13 86       	std	Z+11, r1	; 0x0b
    1f42:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <udd_ep_control_state>
    1f46:	0f 91       	pop	r16
    1f48:	08 95       	ret

00001f4a <udd_ctrl_stall_data>:
    1f4a:	0f 93       	push	r16
    1f4c:	85 e0       	ldi	r24, 0x05	; 5
    1f4e:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <udd_ep_control_state>
    1f52:	e9 e6       	ldi	r30, 0x69	; 105
    1f54:	f3 e2       	ldi	r31, 0x23	; 35
    1f56:	04 e0       	ldi	r16, 0x04	; 4
    1f58:	05 93       	las	Z, r16
    1f5a:	e1 e6       	ldi	r30, 0x61	; 97
    1f5c:	f3 e2       	ldi	r31, 0x23	; 35
    1f5e:	04 e0       	ldi	r16, 0x04	; 4
    1f60:	05 93       	las	Z, r16
    1f62:	0f 91       	pop	r16
    1f64:	08 95       	ret

00001f66 <udd_ctrl_send_zlp_in>:
    1f66:	0f 93       	push	r16
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <udd_ep_control_state>
    1f6e:	10 92 6a 23 	sts	0x236A, r1	; 0x80236a <udd_sram+0x1e>
    1f72:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udd_sram+0x1f>
    1f76:	e8 e6       	ldi	r30, 0x68	; 104
    1f78:	f3 e2       	ldi	r31, 0x23	; 35
    1f7a:	02 e0       	ldi	r16, 0x02	; 2
    1f7c:	06 93       	lac	Z, r16
    1f7e:	0f 91       	pop	r16
    1f80:	08 95       	ret

00001f82 <udd_ctrl_endofrequest>:
    1f82:	e0 91 cd 23 	lds	r30, 0x23CD	; 0x8023cd <udd_g_ctrlreq+0xc>
    1f86:	f0 91 ce 23 	lds	r31, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0xd>
    1f8a:	30 97       	sbiw	r30, 0x00	; 0
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <udd_ctrl_endofrequest+0xe>
    1f8e:	19 95       	eicall
    1f90:	08 95       	ret

00001f92 <udd_ctrl_in_sent>:
    1f92:	0f 93       	push	r16
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <udd_ep_control_state>
    1f9c:	83 30       	cpi	r24, 0x03	; 3
    1f9e:	19 f4       	brne	.+6      	; 0x1fa6 <udd_ctrl_in_sent+0x14>
    1fa0:	f0 df       	rcall	.-32     	; 0x1f82 <udd_ctrl_endofrequest>
    1fa2:	ae df       	rcall	.-164    	; 0x1f00 <udd_ctrl_init>
    1fa4:	5e c0       	rjmp	.+188    	; 0x2062 <udd_ctrl_in_sent+0xd0>
    1fa6:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <udd_ctrl_payload_nb_trans>
    1faa:	90 91 46 23 	lds	r25, 0x2346	; 0x802346 <udd_ctrl_payload_nb_trans+0x1>
    1fae:	c0 91 cb 23 	lds	r28, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0xa>
    1fb2:	d0 91 cc 23 	lds	r29, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0xb>
    1fb6:	c8 1b       	sub	r28, r24
    1fb8:	d9 0b       	sbc	r29, r25
    1fba:	71 f5       	brne	.+92     	; 0x2018 <udd_ctrl_in_sent+0x86>
    1fbc:	20 91 47 23 	lds	r18, 0x2347	; 0x802347 <udd_ctrl_prev_payload_nb_trans>
    1fc0:	30 91 48 23 	lds	r19, 0x2348	; 0x802348 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fc4:	82 0f       	add	r24, r18
    1fc6:	93 1f       	adc	r25, r19
    1fc8:	80 93 47 23 	sts	0x2347, r24	; 0x802347 <udd_ctrl_prev_payload_nb_trans>
    1fcc:	90 93 48 23 	sts	0x2348, r25	; 0x802348 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fd0:	20 91 c7 23 	lds	r18, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    1fd4:	30 91 c8 23 	lds	r19, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    1fd8:	82 17       	cp	r24, r18
    1fda:	93 07       	cpc	r25, r19
    1fdc:	21 f0       	breq	.+8      	; 0x1fe6 <udd_ctrl_in_sent+0x54>
    1fde:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <b_shortpacket.5293>
    1fe2:	88 23       	and	r24, r24
    1fe4:	41 f0       	breq	.+16     	; 0x1ff6 <udd_ctrl_in_sent+0x64>
    1fe6:	84 e0       	ldi	r24, 0x04	; 4
    1fe8:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <udd_ep_control_state>
    1fec:	e0 e6       	ldi	r30, 0x60	; 96
    1fee:	f3 e2       	ldi	r31, 0x23	; 35
    1ff0:	02 e0       	ldi	r16, 0x02	; 2
    1ff2:	06 93       	lac	Z, r16
    1ff4:	36 c0       	rjmp	.+108    	; 0x2062 <udd_ctrl_in_sent+0xd0>
    1ff6:	e0 91 cf 23 	lds	r30, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0xe>
    1ffa:	f0 91 d0 23 	lds	r31, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0xf>
    1ffe:	30 97       	sbiw	r30, 0x00	; 0
    2000:	99 f0       	breq	.+38     	; 0x2028 <udd_ctrl_in_sent+0x96>
    2002:	19 95       	eicall
    2004:	88 23       	and	r24, r24
    2006:	81 f0       	breq	.+32     	; 0x2028 <udd_ctrl_in_sent+0x96>
    2008:	10 92 45 23 	sts	0x2345, r1	; 0x802345 <udd_ctrl_payload_nb_trans>
    200c:	10 92 46 23 	sts	0x2346, r1	; 0x802346 <udd_ctrl_payload_nb_trans+0x1>
    2010:	c0 91 cb 23 	lds	r28, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0xa>
    2014:	d0 91 cc 23 	lds	r29, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0xb>
    2018:	c8 30       	cpi	r28, 0x08	; 8
    201a:	d1 05       	cpc	r29, r1
    201c:	28 f0       	brcs	.+10     	; 0x2028 <udd_ctrl_in_sent+0x96>
    201e:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <b_shortpacket.5293>
    2022:	c8 e0       	ldi	r28, 0x08	; 8
    2024:	d0 e0       	ldi	r29, 0x00	; 0
    2026:	03 c0       	rjmp	.+6      	; 0x202e <udd_ctrl_in_sent+0x9c>
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <b_shortpacket.5293>
    202e:	ec e4       	ldi	r30, 0x4C	; 76
    2030:	f3 e2       	ldi	r31, 0x23	; 35
    2032:	c6 8f       	std	Z+30, r28	; 0x1e
    2034:	d7 8f       	std	Z+31, r29	; 0x1f
    2036:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <udd_ctrl_payload_nb_trans>
    203a:	90 91 46 23 	lds	r25, 0x2346	; 0x802346 <udd_ctrl_payload_nb_trans+0x1>
    203e:	20 91 c9 23 	lds	r18, 0x23C9	; 0x8023c9 <udd_g_ctrlreq+0x8>
    2042:	30 91 ca 23 	lds	r19, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x9>
    2046:	28 0f       	add	r18, r24
    2048:	39 1f       	adc	r19, r25
    204a:	20 a3       	std	Z+32, r18	; 0x20
    204c:	31 a3       	std	Z+33, r19	; 0x21
    204e:	c8 0f       	add	r28, r24
    2050:	d9 1f       	adc	r29, r25
    2052:	c0 93 45 23 	sts	0x2345, r28	; 0x802345 <udd_ctrl_payload_nb_trans>
    2056:	d0 93 46 23 	sts	0x2346, r29	; 0x802346 <udd_ctrl_payload_nb_trans+0x1>
    205a:	e8 e6       	ldi	r30, 0x68	; 104
    205c:	f3 e2       	ldi	r31, 0x23	; 35
    205e:	02 e0       	ldi	r16, 0x02	; 2
    2060:	06 93       	lac	Z, r16
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	0f 91       	pop	r16
    2068:	08 95       	ret

0000206a <udd_ep_get_size>:
    206a:	fc 01       	movw	r30, r24
    206c:	81 81       	ldd	r24, Z+1	; 0x01
    206e:	e8 2f       	mov	r30, r24
    2070:	e7 70       	andi	r30, 0x07	; 7
    2072:	8e 2f       	mov	r24, r30
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	fc 01       	movw	r30, r24
    2078:	31 97       	sbiw	r30, 0x01	; 1
    207a:	e7 30       	cpi	r30, 0x07	; 7
    207c:	f1 05       	cpc	r31, r1
    207e:	d0 f4       	brcc	.+52     	; 0x20b4 <udd_ep_get_size+0x4a>
    2080:	88 27       	eor	r24, r24
    2082:	e1 5f       	subi	r30, 0xF1	; 241
    2084:	fe 4f       	sbci	r31, 0xFE	; 254
    2086:	8f 4f       	sbci	r24, 0xFF	; 255
    2088:	22 c7       	rjmp	.+3652   	; 0x2ece <__tablejump2__>
    208a:	80 e1       	ldi	r24, 0x10	; 16
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	08 95       	ret
    2090:	80 e2       	ldi	r24, 0x20	; 32
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	08 95       	ret
    2096:	80 e4       	ldi	r24, 0x40	; 64
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	08 95       	ret
    209c:	80 e8       	ldi	r24, 0x80	; 128
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	08 95       	ret
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	91 e0       	ldi	r25, 0x01	; 1
    20a6:	08 95       	ret
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	92 e0       	ldi	r25, 0x02	; 2
    20ac:	08 95       	ret
    20ae:	8f ef       	ldi	r24, 0xFF	; 255
    20b0:	93 e0       	ldi	r25, 0x03	; 3
    20b2:	08 95       	ret
    20b4:	88 e0       	ldi	r24, 0x08	; 8
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	08 95       	ret

000020ba <udd_ep_get_job>:
    20ba:	28 2f       	mov	r18, r24
    20bc:	2f 70       	andi	r18, 0x0F	; 15
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	22 0f       	add	r18, r18
    20c2:	33 1f       	adc	r19, r19
    20c4:	08 2e       	mov	r0, r24
    20c6:	00 0c       	add	r0, r0
    20c8:	99 0b       	sbc	r25, r25
    20ca:	88 27       	eor	r24, r24
    20cc:	99 0f       	add	r25, r25
    20ce:	88 1f       	adc	r24, r24
    20d0:	99 27       	eor	r25, r25
    20d2:	82 0f       	add	r24, r18
    20d4:	93 1f       	adc	r25, r19
    20d6:	02 97       	sbiw	r24, 0x02	; 2
    20d8:	9c 01       	movw	r18, r24
    20da:	22 0f       	add	r18, r18
    20dc:	33 1f       	adc	r19, r19
    20de:	22 0f       	add	r18, r18
    20e0:	33 1f       	adc	r19, r19
    20e2:	22 0f       	add	r18, r18
    20e4:	33 1f       	adc	r19, r19
    20e6:	82 0f       	add	r24, r18
    20e8:	93 1f       	adc	r25, r19
    20ea:	8b 50       	subi	r24, 0x0B	; 11
    20ec:	9d 4d       	sbci	r25, 0xDD	; 221
    20ee:	08 95       	ret

000020f0 <udd_ctrl_interrupt_tc_setup>:
    20f0:	0f 93       	push	r16
    20f2:	cf 93       	push	r28
    20f4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    20f8:	80 ff       	sbrs	r24, 0
    20fa:	64 c0       	rjmp	.+200    	; 0x21c4 <udd_ctrl_interrupt_tc_setup+0xd4>
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2102:	e0 e6       	ldi	r30, 0x60	; 96
    2104:	f3 e2       	ldi	r31, 0x23	; 35
    2106:	00 e8       	ldi	r16, 0x80	; 128
    2108:	06 93       	lac	Z, r16
    210a:	e8 e6       	ldi	r30, 0x68	; 104
    210c:	f3 e2       	ldi	r31, 0x23	; 35
    210e:	00 e8       	ldi	r16, 0x80	; 128
    2110:	06 93       	lac	Z, r16
    2112:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2116:	e0 e6       	ldi	r30, 0x60	; 96
    2118:	f3 e2       	ldi	r31, 0x23	; 35
    211a:	00 e1       	ldi	r16, 0x10	; 16
    211c:	06 93       	lac	Z, r16
    211e:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <udd_ep_control_state>
    2122:	88 23       	and	r24, r24
    2124:	29 f0       	breq	.+10     	; 0x2130 <udd_ctrl_interrupt_tc_setup+0x40>
    2126:	83 50       	subi	r24, 0x03	; 3
    2128:	82 30       	cpi	r24, 0x02	; 2
    212a:	08 f4       	brcc	.+2      	; 0x212e <udd_ctrl_interrupt_tc_setup+0x3e>
    212c:	2a df       	rcall	.-428    	; 0x1f82 <udd_ctrl_endofrequest>
    212e:	e8 de       	rcall	.-560    	; 0x1f00 <udd_ctrl_init>
    2130:	80 91 62 23 	lds	r24, 0x2362	; 0x802362 <udd_sram+0x16>
    2134:	90 91 63 23 	lds	r25, 0x2363	; 0x802363 <udd_sram+0x17>
    2138:	08 97       	sbiw	r24, 0x08	; 8
    213a:	09 f0       	breq	.+2      	; 0x213e <udd_ctrl_interrupt_tc_setup+0x4e>
    213c:	45 c0       	rjmp	.+138    	; 0x21c8 <udd_ctrl_interrupt_tc_setup+0xd8>
    213e:	88 e0       	ldi	r24, 0x08	; 8
    2140:	ed e3       	ldi	r30, 0x3D	; 61
    2142:	f3 e2       	ldi	r31, 0x23	; 35
    2144:	a1 ec       	ldi	r26, 0xC1	; 193
    2146:	b3 e2       	ldi	r27, 0x23	; 35
    2148:	01 90       	ld	r0, Z+
    214a:	0d 92       	st	X+, r0
    214c:	8a 95       	dec	r24
    214e:	e1 f7       	brne	.-8      	; 0x2148 <udd_ctrl_interrupt_tc_setup+0x58>
    2150:	e8 ec       	ldi	r30, 0xC8	; 200
    2152:	f4 e0       	ldi	r31, 0x04	; 4
    2154:	80 81       	ld	r24, Z
    2156:	80 62       	ori	r24, 0x20	; 32
    2158:	80 83       	st	Z, r24
    215a:	80 81       	ld	r24, Z
    215c:	80 62       	ori	r24, 0x20	; 32
    215e:	80 83       	st	Z, r24
    2160:	e9 db       	rcall	.-2094   	; 0x1934 <udc_process_setup>
    2162:	c8 2f       	mov	r28, r24
    2164:	81 11       	cpse	r24, r1
    2166:	03 c0       	rjmp	.+6      	; 0x216e <udd_ctrl_interrupt_tc_setup+0x7e>
    2168:	f0 de       	rcall	.-544    	; 0x1f4a <udd_ctrl_stall_data>
    216a:	c1 e0       	ldi	r28, 0x01	; 1
    216c:	2e c0       	rjmp	.+92     	; 0x21ca <udd_ctrl_interrupt_tc_setup+0xda>
    216e:	80 91 c1 23 	lds	r24, 0x23C1	; 0x8023c1 <udd_g_ctrlreq>
    2172:	88 23       	and	r24, r24
    2174:	6c f4       	brge	.+26     	; 0x2190 <udd_ctrl_interrupt_tc_setup+0xa0>
    2176:	10 92 47 23 	sts	0x2347, r1	; 0x802347 <udd_ctrl_prev_payload_nb_trans>
    217a:	10 92 48 23 	sts	0x2348, r1	; 0x802348 <udd_ctrl_prev_payload_nb_trans+0x1>
    217e:	10 92 45 23 	sts	0x2345, r1	; 0x802345 <udd_ctrl_payload_nb_trans>
    2182:	10 92 46 23 	sts	0x2346, r1	; 0x802346 <udd_ctrl_payload_nb_trans+0x1>
    2186:	82 e0       	ldi	r24, 0x02	; 2
    2188:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <udd_ep_control_state>
    218c:	02 df       	rcall	.-508    	; 0x1f92 <udd_ctrl_in_sent>
    218e:	1d c0       	rjmp	.+58     	; 0x21ca <udd_ctrl_interrupt_tc_setup+0xda>
    2190:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    2194:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    2198:	89 2b       	or	r24, r25
    219a:	11 f4       	brne	.+4      	; 0x21a0 <udd_ctrl_interrupt_tc_setup+0xb0>
    219c:	e4 de       	rcall	.-568    	; 0x1f66 <udd_ctrl_send_zlp_in>
    219e:	15 c0       	rjmp	.+42     	; 0x21ca <udd_ctrl_interrupt_tc_setup+0xda>
    21a0:	10 92 47 23 	sts	0x2347, r1	; 0x802347 <udd_ctrl_prev_payload_nb_trans>
    21a4:	10 92 48 23 	sts	0x2348, r1	; 0x802348 <udd_ctrl_prev_payload_nb_trans+0x1>
    21a8:	10 92 45 23 	sts	0x2345, r1	; 0x802345 <udd_ctrl_payload_nb_trans>
    21ac:	10 92 46 23 	sts	0x2346, r1	; 0x802346 <udd_ctrl_payload_nb_trans+0x1>
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <udd_ep_control_state>
    21b6:	e0 e6       	ldi	r30, 0x60	; 96
    21b8:	f3 e2       	ldi	r31, 0x23	; 35
    21ba:	02 e0       	ldi	r16, 0x02	; 2
    21bc:	06 93       	lac	Z, r16
    21be:	00 e2       	ldi	r16, 0x20	; 32
    21c0:	06 93       	lac	Z, r16
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <udd_ctrl_interrupt_tc_setup+0xda>
    21c4:	c0 e0       	ldi	r28, 0x00	; 0
    21c6:	01 c0       	rjmp	.+2      	; 0x21ca <udd_ctrl_interrupt_tc_setup+0xda>
    21c8:	c1 e0       	ldi	r28, 0x01	; 1
    21ca:	8c 2f       	mov	r24, r28
    21cc:	cf 91       	pop	r28
    21ce:	0f 91       	pop	r16
    21d0:	08 95       	ret

000021d2 <udd_ep_trans_complet>:
    21d2:	8f 92       	push	r8
    21d4:	9f 92       	push	r9
    21d6:	af 92       	push	r10
    21d8:	bf 92       	push	r11
    21da:	df 92       	push	r13
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	d8 2e       	mov	r13, r24
    21ea:	67 df       	rcall	.-306    	; 0x20ba <udd_ep_get_job>
    21ec:	8c 01       	movw	r16, r24
    21ee:	cd 2d       	mov	r28, r13
    21f0:	cf 70       	andi	r28, 0x0F	; 15
    21f2:	d0 e0       	ldi	r29, 0x00	; 0
    21f4:	ce 01       	movw	r24, r28
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	cd 2d       	mov	r28, r13
    21fc:	0d 2c       	mov	r0, r13
    21fe:	00 0c       	add	r0, r0
    2200:	dd 0b       	sbc	r29, r29
    2202:	cc 27       	eor	r28, r28
    2204:	dd 0f       	add	r29, r29
    2206:	cc 1f       	adc	r28, r28
    2208:	dd 27       	eor	r29, r29
    220a:	c8 0f       	add	r28, r24
    220c:	d9 1f       	adc	r29, r25
    220e:	ce 01       	movw	r24, r28
    2210:	88 0f       	add	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	9c 01       	movw	r18, r24
    221e:	20 5a       	subi	r18, 0xA0	; 160
    2220:	3c 4d       	sbci	r19, 0xDC	; 220
    2222:	79 01       	movw	r14, r18
    2224:	c9 01       	movw	r24, r18
    2226:	21 df       	rcall	.-446    	; 0x206a <udd_ep_get_size>
    2228:	4c 01       	movw	r8, r24
    222a:	dd 20       	and	r13, r13
    222c:	0c f0       	brlt	.+2      	; 0x2230 <udd_ep_trans_complet+0x5e>
    222e:	79 c0       	rjmp	.+242    	; 0x2322 <udd_ep_trans_complet+0x150>
    2230:	fe 01       	movw	r30, r28
    2232:	ee 0f       	add	r30, r30
    2234:	ff 1f       	adc	r31, r31
    2236:	ee 0f       	add	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	ee 0f       	add	r30, r30
    223c:	ff 1f       	adc	r31, r31
    223e:	e4 5b       	subi	r30, 0xB4	; 180
    2240:	fc 4d       	sbci	r31, 0xDC	; 220
    2242:	22 8d       	ldd	r18, Z+26	; 0x1a
    2244:	33 8d       	ldd	r19, Z+27	; 0x1b
    2246:	d8 01       	movw	r26, r16
    2248:	15 96       	adiw	r26, 0x05	; 5
    224a:	8d 91       	ld	r24, X+
    224c:	9c 91       	ld	r25, X
    224e:	16 97       	sbiw	r26, 0x06	; 6
    2250:	82 0f       	add	r24, r18
    2252:	93 1f       	adc	r25, r19
    2254:	15 96       	adiw	r26, 0x05	; 5
    2256:	8d 93       	st	X+, r24
    2258:	9c 93       	st	X, r25
    225a:	16 97       	sbiw	r26, 0x06	; 6
    225c:	13 96       	adiw	r26, 0x03	; 3
    225e:	2d 91       	ld	r18, X+
    2260:	3c 91       	ld	r19, X
    2262:	14 97       	sbiw	r26, 0x04	; 4
    2264:	82 17       	cp	r24, r18
    2266:	93 07       	cpc	r25, r19
    2268:	09 f4       	brne	.+2      	; 0x226c <udd_ep_trans_complet+0x9a>
    226a:	45 c0       	rjmp	.+138    	; 0x22f6 <udd_ep_trans_complet+0x124>
    226c:	28 1b       	sub	r18, r24
    226e:	39 0b       	sbc	r19, r25
    2270:	21 15       	cp	r18, r1
    2272:	b4 e0       	ldi	r27, 0x04	; 4
    2274:	3b 07       	cpc	r19, r27
    2276:	38 f0       	brcs	.+14     	; 0x2286 <udd_ep_trans_complet+0xb4>
    2278:	2f ef       	ldi	r18, 0xFF	; 255
    227a:	33 e0       	ldi	r19, 0x03	; 3
    227c:	c9 01       	movw	r24, r18
    227e:	b4 01       	movw	r22, r8
    2280:	12 d6       	rcall	.+3108   	; 0x2ea6 <__udivmodhi4>
    2282:	28 1b       	sub	r18, r24
    2284:	39 0b       	sbc	r19, r25
    2286:	f8 01       	movw	r30, r16
    2288:	80 81       	ld	r24, Z
    228a:	81 ff       	sbrs	r24, 1
    228c:	09 c0       	rjmp	.+18     	; 0x22a0 <udd_ep_trans_complet+0xce>
    228e:	c9 01       	movw	r24, r18
    2290:	b4 01       	movw	r22, r8
    2292:	09 d6       	rcall	.+3090   	; 0x2ea6 <__udivmodhi4>
    2294:	41 e0       	ldi	r20, 0x01	; 1
    2296:	89 2b       	or	r24, r25
    2298:	09 f0       	breq	.+2      	; 0x229c <udd_ep_trans_complet+0xca>
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	84 2f       	mov	r24, r20
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <udd_ep_trans_complet+0xd0>
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	d8 01       	movw	r26, r16
    22a4:	9c 91       	ld	r25, X
    22a6:	80 fb       	bst	r24, 0
    22a8:	91 f9       	bld	r25, 1
    22aa:	9c 93       	st	X, r25
    22ac:	fe 01       	movw	r30, r28
    22ae:	ee 0f       	add	r30, r30
    22b0:	ff 1f       	adc	r31, r31
    22b2:	ee 0f       	add	r30, r30
    22b4:	ff 1f       	adc	r31, r31
    22b6:	ee 0f       	add	r30, r30
    22b8:	ff 1f       	adc	r31, r31
    22ba:	e4 5b       	subi	r30, 0xB4	; 180
    22bc:	fc 4d       	sbci	r31, 0xDC	; 220
    22be:	12 8e       	std	Z+26, r1	; 0x1a
    22c0:	13 8e       	std	Z+27, r1	; 0x1b
    22c2:	26 8b       	std	Z+22, r18	; 0x16
    22c4:	37 8b       	std	Z+23, r19	; 0x17
    22c6:	11 96       	adiw	r26, 0x01	; 1
    22c8:	2d 91       	ld	r18, X+
    22ca:	3c 91       	ld	r19, X
    22cc:	12 97       	sbiw	r26, 0x02	; 2
    22ce:	15 96       	adiw	r26, 0x05	; 5
    22d0:	8d 91       	ld	r24, X+
    22d2:	9c 91       	ld	r25, X
    22d4:	16 97       	sbiw	r26, 0x06	; 6
    22d6:	82 0f       	add	r24, r18
    22d8:	93 1f       	adc	r25, r19
    22da:	cc 0f       	add	r28, r28
    22dc:	dd 1f       	adc	r29, r29
    22de:	cc 0f       	add	r28, r28
    22e0:	dd 1f       	adc	r29, r29
    22e2:	cc 0f       	add	r28, r28
    22e4:	dd 1f       	adc	r29, r29
    22e6:	cc 59       	subi	r28, 0x9C	; 156
    22e8:	dc 4d       	sbci	r29, 0xDC	; 220
    22ea:	88 83       	st	Y, r24
    22ec:	99 83       	std	Y+1, r25	; 0x01
    22ee:	f7 01       	movw	r30, r14
    22f0:	02 e0       	ldi	r16, 0x02	; 2
    22f2:	06 93       	lac	Z, r16
    22f4:	e0 c0       	rjmp	.+448    	; 0x24b6 <udd_ep_trans_complet+0x2e4>
    22f6:	d8 01       	movw	r26, r16
    22f8:	8c 91       	ld	r24, X
    22fa:	81 ff       	sbrs	r24, 1
    22fc:	c9 c0       	rjmp	.+402    	; 0x2490 <udd_ep_trans_complet+0x2be>
    22fe:	8d 7f       	andi	r24, 0xFD	; 253
    2300:	8c 93       	st	X, r24
    2302:	cc 0f       	add	r28, r28
    2304:	dd 1f       	adc	r29, r29
    2306:	cc 0f       	add	r28, r28
    2308:	dd 1f       	adc	r29, r29
    230a:	cc 0f       	add	r28, r28
    230c:	dd 1f       	adc	r29, r29
    230e:	c4 5b       	subi	r28, 0xB4	; 180
    2310:	dc 4d       	sbci	r29, 0xDC	; 220
    2312:	1a 8e       	std	Y+26, r1	; 0x1a
    2314:	1b 8e       	std	Y+27, r1	; 0x1b
    2316:	1e 8a       	std	Y+22, r1	; 0x16
    2318:	1f 8a       	std	Y+23, r1	; 0x17
    231a:	f7 01       	movw	r30, r14
    231c:	02 e0       	ldi	r16, 0x02	; 2
    231e:	06 93       	lac	Z, r16
    2320:	ca c0       	rjmp	.+404    	; 0x24b6 <udd_ep_trans_complet+0x2e4>
    2322:	fe 01       	movw	r30, r28
    2324:	ee 0f       	add	r30, r30
    2326:	ff 1f       	adc	r31, r31
    2328:	ee 0f       	add	r30, r30
    232a:	ff 1f       	adc	r31, r31
    232c:	ee 0f       	add	r30, r30
    232e:	ff 1f       	adc	r31, r31
    2330:	e4 5b       	subi	r30, 0xB4	; 180
    2332:	fc 4d       	sbci	r31, 0xDC	; 220
    2334:	a6 88       	ldd	r10, Z+22	; 0x16
    2336:	b7 88       	ldd	r11, Z+23	; 0x17
    2338:	d8 01       	movw	r26, r16
    233a:	8c 91       	ld	r24, X
    233c:	82 ff       	sbrs	r24, 2
    233e:	19 c0       	rjmp	.+50     	; 0x2372 <udd_ep_trans_complet+0x1a0>
    2340:	11 96       	adiw	r26, 0x01	; 1
    2342:	ed 91       	ld	r30, X+
    2344:	fc 91       	ld	r31, X
    2346:	12 97       	sbiw	r26, 0x02	; 2
    2348:	15 96       	adiw	r26, 0x05	; 5
    234a:	2d 91       	ld	r18, X+
    234c:	3c 91       	ld	r19, X
    234e:	16 97       	sbiw	r26, 0x06	; 6
    2350:	13 96       	adiw	r26, 0x03	; 3
    2352:	8d 91       	ld	r24, X+
    2354:	9c 91       	ld	r25, X
    2356:	14 97       	sbiw	r26, 0x04	; 4
    2358:	b4 01       	movw	r22, r8
    235a:	a5 d5       	rcall	.+2890   	; 0x2ea6 <__udivmodhi4>
    235c:	b0 e4       	ldi	r27, 0x40	; 64
    235e:	db 9e       	mul	r13, r27
    2360:	b0 01       	movw	r22, r0
    2362:	11 24       	eor	r1, r1
    2364:	6b 54       	subi	r22, 0x4B	; 75
    2366:	7e 4d       	sbci	r23, 0xDE	; 222
    2368:	ac 01       	movw	r20, r24
    236a:	cf 01       	movw	r24, r30
    236c:	82 0f       	add	r24, r18
    236e:	93 1f       	adc	r25, r19
    2370:	b6 d5       	rcall	.+2924   	; 0x2ede <memcpy>
    2372:	f8 01       	movw	r30, r16
    2374:	25 81       	ldd	r18, Z+5	; 0x05
    2376:	36 81       	ldd	r19, Z+6	; 0x06
    2378:	2a 0d       	add	r18, r10
    237a:	3b 1d       	adc	r19, r11
    237c:	25 83       	std	Z+5, r18	; 0x05
    237e:	36 83       	std	Z+6, r19	; 0x06
    2380:	83 81       	ldd	r24, Z+3	; 0x03
    2382:	94 81       	ldd	r25, Z+4	; 0x04
    2384:	82 17       	cp	r24, r18
    2386:	93 07       	cpc	r25, r19
    2388:	68 f4       	brcc	.+26     	; 0x23a4 <udd_ep_trans_complet+0x1d2>
    238a:	85 83       	std	Z+5, r24	; 0x05
    238c:	96 83       	std	Z+6, r25	; 0x06
    238e:	cc 0f       	add	r28, r28
    2390:	dd 1f       	adc	r29, r29
    2392:	cc 0f       	add	r28, r28
    2394:	dd 1f       	adc	r29, r29
    2396:	cc 0f       	add	r28, r28
    2398:	dd 1f       	adc	r29, r29
    239a:	c4 5b       	subi	r28, 0xB4	; 180
    239c:	dc 4d       	sbci	r29, 0xDC	; 220
    239e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23a2:	76 c0       	rjmp	.+236    	; 0x2490 <udd_ep_trans_complet+0x2be>
    23a4:	fe 01       	movw	r30, r28
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	e4 5b       	subi	r30, 0xB4	; 180
    23b4:	fc 4d       	sbci	r31, 0xDC	; 220
    23b6:	42 8d       	ldd	r20, Z+26	; 0x1a
    23b8:	53 8d       	ldd	r21, Z+27	; 0x1b
    23ba:	a4 16       	cp	r10, r20
    23bc:	b5 06       	cpc	r11, r21
    23be:	09 f0       	breq	.+2      	; 0x23c2 <udd_ep_trans_complet+0x1f0>
    23c0:	67 c0       	rjmp	.+206    	; 0x2490 <udd_ep_trans_complet+0x2be>
    23c2:	28 17       	cp	r18, r24
    23c4:	39 07       	cpc	r19, r25
    23c6:	09 f4       	brne	.+2      	; 0x23ca <udd_ep_trans_complet+0x1f8>
    23c8:	63 c0       	rjmp	.+198    	; 0x2490 <udd_ep_trans_complet+0x2be>
    23ca:	ac 01       	movw	r20, r24
    23cc:	42 1b       	sub	r20, r18
    23ce:	53 0b       	sbc	r21, r19
    23d0:	9a 01       	movw	r18, r20
    23d2:	21 15       	cp	r18, r1
    23d4:	54 e0       	ldi	r21, 0x04	; 4
    23d6:	35 07       	cpc	r19, r21
    23d8:	40 f0       	brcs	.+16     	; 0x23ea <udd_ep_trans_complet+0x218>
    23da:	2f ef       	ldi	r18, 0xFF	; 255
    23dc:	33 e0       	ldi	r19, 0x03	; 3
    23de:	c9 01       	movw	r24, r18
    23e0:	b4 01       	movw	r22, r8
    23e2:	61 d5       	rcall	.+2754   	; 0x2ea6 <__udivmodhi4>
    23e4:	28 1b       	sub	r18, r24
    23e6:	39 0b       	sbc	r19, r25
    23e8:	05 c0       	rjmp	.+10     	; 0x23f4 <udd_ep_trans_complet+0x222>
    23ea:	c9 01       	movw	r24, r18
    23ec:	b4 01       	movw	r22, r8
    23ee:	5b d5       	rcall	.+2742   	; 0x2ea6 <__udivmodhi4>
    23f0:	28 1b       	sub	r18, r24
    23f2:	39 0b       	sbc	r19, r25
    23f4:	fe 01       	movw	r30, r28
    23f6:	ee 0f       	add	r30, r30
    23f8:	ff 1f       	adc	r31, r31
    23fa:	ee 0f       	add	r30, r30
    23fc:	ff 1f       	adc	r31, r31
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	e4 5b       	subi	r30, 0xB4	; 180
    2404:	fc 4d       	sbci	r31, 0xDC	; 220
    2406:	16 8a       	std	Z+22, r1	; 0x16
    2408:	17 8a       	std	Z+23, r1	; 0x17
    240a:	28 15       	cp	r18, r8
    240c:	39 05       	cpc	r19, r9
    240e:	00 f5       	brcc	.+64     	; 0x2450 <udd_ep_trans_complet+0x27e>
    2410:	d8 01       	movw	r26, r16
    2412:	8c 91       	ld	r24, X
    2414:	84 60       	ori	r24, 0x04	; 4
    2416:	8c 93       	st	X, r24
    2418:	b0 e4       	ldi	r27, 0x40	; 64
    241a:	db 9e       	mul	r13, r27
    241c:	c0 01       	movw	r24, r0
    241e:	11 24       	eor	r1, r1
    2420:	8b 54       	subi	r24, 0x4B	; 75
    2422:	9e 4d       	sbci	r25, 0xDE	; 222
    2424:	fe 01       	movw	r30, r28
    2426:	ee 0f       	add	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	ee 0f       	add	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	ec 59       	subi	r30, 0x9C	; 156
    2434:	fc 4d       	sbci	r31, 0xDC	; 220
    2436:	80 83       	st	Z, r24
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	cc 0f       	add	r28, r28
    243c:	dd 1f       	adc	r29, r29
    243e:	cc 0f       	add	r28, r28
    2440:	dd 1f       	adc	r29, r29
    2442:	cc 0f       	add	r28, r28
    2444:	dd 1f       	adc	r29, r29
    2446:	c4 5b       	subi	r28, 0xB4	; 180
    2448:	dc 4d       	sbci	r29, 0xDC	; 220
    244a:	8a 8e       	std	Y+26, r8	; 0x1a
    244c:	9b 8e       	std	Y+27, r9	; 0x1b
    244e:	1c c0       	rjmp	.+56     	; 0x2488 <udd_ep_trans_complet+0x2b6>
    2450:	f8 01       	movw	r30, r16
    2452:	41 81       	ldd	r20, Z+1	; 0x01
    2454:	52 81       	ldd	r21, Z+2	; 0x02
    2456:	85 81       	ldd	r24, Z+5	; 0x05
    2458:	96 81       	ldd	r25, Z+6	; 0x06
    245a:	84 0f       	add	r24, r20
    245c:	95 1f       	adc	r25, r21
    245e:	fe 01       	movw	r30, r28
    2460:	ee 0f       	add	r30, r30
    2462:	ff 1f       	adc	r31, r31
    2464:	ee 0f       	add	r30, r30
    2466:	ff 1f       	adc	r31, r31
    2468:	ee 0f       	add	r30, r30
    246a:	ff 1f       	adc	r31, r31
    246c:	ec 59       	subi	r30, 0x9C	; 156
    246e:	fc 4d       	sbci	r31, 0xDC	; 220
    2470:	80 83       	st	Z, r24
    2472:	91 83       	std	Z+1, r25	; 0x01
    2474:	cc 0f       	add	r28, r28
    2476:	dd 1f       	adc	r29, r29
    2478:	cc 0f       	add	r28, r28
    247a:	dd 1f       	adc	r29, r29
    247c:	cc 0f       	add	r28, r28
    247e:	dd 1f       	adc	r29, r29
    2480:	c4 5b       	subi	r28, 0xB4	; 180
    2482:	dc 4d       	sbci	r29, 0xDC	; 220
    2484:	2a 8f       	std	Y+26, r18	; 0x1a
    2486:	3b 8f       	std	Y+27, r19	; 0x1b
    2488:	f7 01       	movw	r30, r14
    248a:	02 e0       	ldi	r16, 0x02	; 2
    248c:	06 93       	lac	Z, r16
    248e:	13 c0       	rjmp	.+38     	; 0x24b6 <udd_ep_trans_complet+0x2e4>
    2490:	d8 01       	movw	r26, r16
    2492:	8c 91       	ld	r24, X
    2494:	80 ff       	sbrs	r24, 0
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <udd_ep_trans_complet+0x2e4>
    2498:	8e 7f       	andi	r24, 0xFE	; 254
    249a:	8c 93       	st	X, r24
    249c:	17 96       	adiw	r26, 0x07	; 7
    249e:	ed 91       	ld	r30, X+
    24a0:	fc 91       	ld	r31, X
    24a2:	18 97       	sbiw	r26, 0x08	; 8
    24a4:	30 97       	sbiw	r30, 0x00	; 0
    24a6:	39 f0       	breq	.+14     	; 0x24b6 <udd_ep_trans_complet+0x2e4>
    24a8:	15 96       	adiw	r26, 0x05	; 5
    24aa:	6d 91       	ld	r22, X+
    24ac:	7c 91       	ld	r23, X
    24ae:	16 97       	sbiw	r26, 0x06	; 6
    24b0:	4d 2d       	mov	r20, r13
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	19 95       	eicall
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	df 90       	pop	r13
    24c4:	bf 90       	pop	r11
    24c6:	af 90       	pop	r10
    24c8:	9f 90       	pop	r9
    24ca:	8f 90       	pop	r8
    24cc:	08 95       	ret

000024ce <udd_attach>:
    24ce:	1f 93       	push	r17
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	1f 92       	push	r1
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	8f b7       	in	r24, 0x3f	; 63
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	f8 94       	cli
    24e0:	19 81       	ldd	r17, Y+1	; 0x01
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	d5 dc       	rcall	.-1622   	; 0x1e90 <udd_sleep_mode>
    24e6:	ea ec       	ldi	r30, 0xCA	; 202
    24e8:	f4 e0       	ldi	r31, 0x04	; 4
    24ea:	80 e4       	ldi	r24, 0x40	; 64
    24ec:	80 83       	st	Z, r24
    24ee:	80 e2       	ldi	r24, 0x20	; 32
    24f0:	80 83       	st	Z, r24
    24f2:	e1 ec       	ldi	r30, 0xC1	; 193
    24f4:	f4 e0       	ldi	r31, 0x04	; 4
    24f6:	80 81       	ld	r24, Z
    24f8:	81 60       	ori	r24, 0x01	; 1
    24fa:	80 83       	st	Z, r24
    24fc:	a9 ec       	ldi	r26, 0xC9	; 201
    24fe:	b4 e0       	ldi	r27, 0x04	; 4
    2500:	8c 91       	ld	r24, X
    2502:	82 60       	ori	r24, 0x02	; 2
    2504:	8c 93       	st	X, r24
    2506:	e8 ec       	ldi	r30, 0xC8	; 200
    2508:	f4 e0       	ldi	r31, 0x04	; 4
    250a:	80 81       	ld	r24, Z
    250c:	80 64       	ori	r24, 0x40	; 64
    250e:	80 83       	st	Z, r24
    2510:	8c 91       	ld	r24, X
    2512:	81 60       	ori	r24, 0x01	; 1
    2514:	8c 93       	st	X, r24
    2516:	80 81       	ld	r24, Z
    2518:	80 68       	ori	r24, 0x80	; 128
    251a:	80 83       	st	Z, r24
    251c:	1f bf       	out	0x3f, r17	; 63
    251e:	0f 90       	pop	r0
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	08 95       	ret

00002528 <udd_enable>:
    2528:	0f 93       	push	r16
    252a:	1f 93       	push	r17
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	1f 92       	push	r1
    2532:	1f 92       	push	r1
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	00 e6       	ldi	r16, 0x60	; 96
    253a:	10 e0       	ldi	r17, 0x00	; 0
    253c:	f8 01       	movw	r30, r16
    253e:	10 82       	st	Z, r1
    2540:	80 e3       	ldi	r24, 0x30	; 48
    2542:	0e 94 39 09 	call	0x1272	; 0x1272 <sysclk_enable_usb>
    2546:	e0 ec       	ldi	r30, 0xC0	; 192
    2548:	f4 e0       	ldi	r31, 0x04	; 4
    254a:	80 81       	ld	r24, Z
    254c:	80 64       	ori	r24, 0x40	; 64
    254e:	80 83       	st	Z, r24
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	f8 01       	movw	r30, r16
    2554:	80 83       	st	Z, r24
    2556:	8f b7       	in	r24, 0x3f	; 63
    2558:	8a 83       	std	Y+2, r24	; 0x02
    255a:	f8 94       	cli
    255c:	1a 81       	ldd	r17, Y+2	; 0x02
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	fc 01       	movw	r30, r24
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	ee 0f       	add	r30, r30
    256a:	ff 1f       	adc	r31, r31
    256c:	ee 0f       	add	r30, r30
    256e:	ff 1f       	adc	r31, r31
    2570:	e4 5b       	subi	r30, 0xB4	; 180
    2572:	fc 4d       	sbci	r31, 0xDC	; 220
    2574:	15 8a       	std	Z+21, r1	; 0x15
    2576:	01 96       	adiw	r24, 0x01	; 1
    2578:	8a 30       	cpi	r24, 0x0A	; 10
    257a:	91 05       	cpc	r25, r1
    257c:	91 f7       	brne	.-28     	; 0x2562 <udd_enable+0x3a>
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	fc 01       	movw	r30, r24
    2584:	ee 0f       	add	r30, r30
    2586:	ff 1f       	adc	r31, r31
    2588:	ee 0f       	add	r30, r30
    258a:	ff 1f       	adc	r31, r31
    258c:	ee 0f       	add	r30, r30
    258e:	ff 1f       	adc	r31, r31
    2590:	e8 0f       	add	r30, r24
    2592:	f9 1f       	adc	r31, r25
    2594:	eb 50       	subi	r30, 0x0B	; 11
    2596:	fd 4d       	sbci	r31, 0xDD	; 221
    2598:	20 81       	ld	r18, Z
    259a:	2e 7f       	andi	r18, 0xFE	; 254
    259c:	20 83       	st	Z, r18
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	88 30       	cpi	r24, 0x08	; 8
    25a2:	91 05       	cpc	r25, r1
    25a4:	71 f7       	brne	.-36     	; 0x2582 <udd_enable+0x5a>
    25a6:	6a e1       	ldi	r22, 0x1A	; 26
    25a8:	70 e0       	ldi	r23, 0x00	; 0
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	61 dc       	rcall	.-1854   	; 0x1e70 <nvm_read_byte>
    25ae:	8f 3f       	cpi	r24, 0xFF	; 255
    25b0:	19 f0       	breq	.+6      	; 0x25b8 <udd_enable+0x90>
    25b2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <udd_enable+0x96>
    25b8:	8f e1       	ldi	r24, 0x1F	; 31
    25ba:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    25be:	6b e1       	ldi	r22, 0x1B	; 27
    25c0:	70 e0       	ldi	r23, 0x00	; 0
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	55 dc       	rcall	.-1878   	; 0x1e70 <nvm_read_byte>
    25c6:	8f 3f       	cpi	r24, 0xFF	; 255
    25c8:	19 f0       	breq	.+6      	; 0x25d0 <udd_enable+0xa8>
    25ca:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    25ce:	03 c0       	rjmp	.+6      	; 0x25d6 <udd_enable+0xae>
    25d0:	8f e1       	ldi	r24, 0x1F	; 31
    25d2:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    25d6:	e0 ec       	ldi	r30, 0xC0	; 192
    25d8:	f4 e0       	ldi	r31, 0x04	; 4
    25da:	80 81       	ld	r24, Z
    25dc:	84 60       	ori	r24, 0x04	; 4
    25de:	80 83       	st	Z, r24
    25e0:	80 81       	ld	r24, Z
    25e2:	80 68       	ori	r24, 0x80	; 128
    25e4:	80 83       	st	Z, r24
    25e6:	80 81       	ld	r24, Z
    25e8:	80 61       	ori	r24, 0x10	; 16
    25ea:	80 83       	st	Z, r24
    25ec:	80 e6       	ldi	r24, 0x60	; 96
    25ee:	93 e2       	ldi	r25, 0x23	; 35
    25f0:	86 83       	std	Z+6, r24	; 0x06
    25f2:	97 83       	std	Z+7, r25	; 0x07
    25f4:	80 81       	ld	r24, Z
    25f6:	80 62       	ori	r24, 0x20	; 32
    25f8:	80 83       	st	Z, r24
    25fa:	8f ef       	ldi	r24, 0xFF	; 255
    25fc:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    2600:	e8 ec       	ldi	r30, 0xC8	; 200
    2602:	f4 e0       	ldi	r31, 0x04	; 4
    2604:	80 81       	ld	r24, Z
    2606:	81 60       	ori	r24, 0x01	; 1
    2608:	80 83       	st	Z, r24
    260a:	10 92 b4 23 	sts	0x23B4, r1	; 0x8023b4 <udd_b_idle>
    260e:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <sleepmgr_locks+0x5>
    2612:	8f 3f       	cpi	r24, 0xFF	; 255
    2614:	09 f4       	brne	.+2      	; 0x2618 <udd_enable+0xf0>
    2616:	ff cf       	rjmp	.-2      	; 0x2616 <udd_enable+0xee>
    2618:	8f b7       	in	r24, 0x3f	; 63
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	f8 94       	cli
    261e:	99 81       	ldd	r25, Y+1	; 0x01
    2620:	eb eb       	ldi	r30, 0xBB	; 187
    2622:	f3 e2       	ldi	r31, 0x23	; 35
    2624:	85 81       	ldd	r24, Z+5	; 0x05
    2626:	8f 5f       	subi	r24, 0xFF	; 255
    2628:	85 83       	std	Z+5, r24	; 0x05
    262a:	9f bf       	out	0x3f, r25	; 63
    262c:	50 df       	rcall	.-352    	; 0x24ce <udd_attach>
    262e:	1f bf       	out	0x3f, r17	; 63
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	08 95       	ret

0000263e <udd_set_address>:
    263e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2642:	08 95       	ret

00002644 <udd_getaddress>:
    2644:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2648:	08 95       	ret

0000264a <udd_set_setup_payload>:
    264a:	e1 ec       	ldi	r30, 0xC1	; 193
    264c:	f3 e2       	ldi	r31, 0x23	; 35
    264e:	80 87       	std	Z+8, r24	; 0x08
    2650:	91 87       	std	Z+9, r25	; 0x09
    2652:	62 87       	std	Z+10, r22	; 0x0a
    2654:	73 87       	std	Z+11, r23	; 0x0b
    2656:	08 95       	ret

00002658 <udd_ep_alloc>:
    2658:	28 2f       	mov	r18, r24
    265a:	2f 70       	andi	r18, 0x0F	; 15
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	22 0f       	add	r18, r18
    2660:	33 1f       	adc	r19, r19
    2662:	08 2e       	mov	r0, r24
    2664:	00 0c       	add	r0, r0
    2666:	99 0b       	sbc	r25, r25
    2668:	88 27       	eor	r24, r24
    266a:	99 0f       	add	r25, r25
    266c:	88 1f       	adc	r24, r24
    266e:	99 27       	eor	r25, r25
    2670:	82 0f       	add	r24, r18
    2672:	93 1f       	adc	r25, r19
    2674:	fc 01       	movw	r30, r24
    2676:	ee 0f       	add	r30, r30
    2678:	ff 1f       	adc	r31, r31
    267a:	ee 0f       	add	r30, r30
    267c:	ff 1f       	adc	r31, r31
    267e:	ee 0f       	add	r30, r30
    2680:	ff 1f       	adc	r31, r31
    2682:	e4 5b       	subi	r30, 0xB4	; 180
    2684:	fc 4d       	sbci	r31, 0xDC	; 220
    2686:	25 89       	ldd	r18, Z+21	; 0x15
    2688:	20 7c       	andi	r18, 0xC0	; 192
    268a:	09 f0       	breq	.+2      	; 0x268e <udd_ep_alloc+0x36>
    268c:	69 c0       	rjmp	.+210    	; 0x2760 <udd_ep_alloc+0x108>
    268e:	63 70       	andi	r22, 0x03	; 3
    2690:	61 30       	cpi	r22, 0x01	; 1
    2692:	11 f0       	breq	.+4      	; 0x2698 <udd_ep_alloc+0x40>
    2694:	18 f4       	brcc	.+6      	; 0x269c <udd_ep_alloc+0x44>
    2696:	04 c0       	rjmp	.+8      	; 0x26a0 <udd_ep_alloc+0x48>
    2698:	60 ec       	ldi	r22, 0xC0	; 192
    269a:	03 c0       	rjmp	.+6      	; 0x26a2 <udd_ep_alloc+0x4a>
    269c:	60 e8       	ldi	r22, 0x80	; 128
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <udd_ep_alloc+0x4a>
    26a0:	60 e4       	ldi	r22, 0x40	; 64
    26a2:	40 38       	cpi	r20, 0x80	; 128
    26a4:	51 05       	cpc	r21, r1
    26a6:	e9 f0       	breq	.+58     	; 0x26e2 <udd_ep_alloc+0x8a>
    26a8:	50 f4       	brcc	.+20     	; 0x26be <udd_ep_alloc+0x66>
    26aa:	40 32       	cpi	r20, 0x20	; 32
    26ac:	51 05       	cpc	r21, r1
    26ae:	a9 f0       	breq	.+42     	; 0x26da <udd_ep_alloc+0x82>
    26b0:	40 34       	cpi	r20, 0x40	; 64
    26b2:	51 05       	cpc	r21, r1
    26b4:	a1 f0       	breq	.+40     	; 0x26de <udd_ep_alloc+0x86>
    26b6:	40 31       	cpi	r20, 0x10	; 16
    26b8:	51 05       	cpc	r21, r1
    26ba:	d9 f4       	brne	.+54     	; 0x26f2 <udd_ep_alloc+0x9a>
    26bc:	0c c0       	rjmp	.+24     	; 0x26d6 <udd_ep_alloc+0x7e>
    26be:	41 15       	cp	r20, r1
    26c0:	22 e0       	ldi	r18, 0x02	; 2
    26c2:	52 07       	cpc	r21, r18
    26c4:	91 f0       	breq	.+36     	; 0x26ea <udd_ep_alloc+0x92>
    26c6:	4f 3f       	cpi	r20, 0xFF	; 255
    26c8:	23 e0       	ldi	r18, 0x03	; 3
    26ca:	52 07       	cpc	r21, r18
    26cc:	81 f0       	breq	.+32     	; 0x26ee <udd_ep_alloc+0x96>
    26ce:	41 15       	cp	r20, r1
    26d0:	51 40       	sbci	r21, 0x01	; 1
    26d2:	79 f4       	brne	.+30     	; 0x26f2 <udd_ep_alloc+0x9a>
    26d4:	08 c0       	rjmp	.+16     	; 0x26e6 <udd_ep_alloc+0x8e>
    26d6:	21 e0       	ldi	r18, 0x01	; 1
    26d8:	0d c0       	rjmp	.+26     	; 0x26f4 <udd_ep_alloc+0x9c>
    26da:	22 e0       	ldi	r18, 0x02	; 2
    26dc:	0b c0       	rjmp	.+22     	; 0x26f4 <udd_ep_alloc+0x9c>
    26de:	23 e0       	ldi	r18, 0x03	; 3
    26e0:	09 c0       	rjmp	.+18     	; 0x26f4 <udd_ep_alloc+0x9c>
    26e2:	24 e0       	ldi	r18, 0x04	; 4
    26e4:	07 c0       	rjmp	.+14     	; 0x26f4 <udd_ep_alloc+0x9c>
    26e6:	25 e0       	ldi	r18, 0x05	; 5
    26e8:	05 c0       	rjmp	.+10     	; 0x26f4 <udd_ep_alloc+0x9c>
    26ea:	26 e0       	ldi	r18, 0x06	; 6
    26ec:	03 c0       	rjmp	.+6      	; 0x26f4 <udd_ep_alloc+0x9c>
    26ee:	27 e0       	ldi	r18, 0x07	; 7
    26f0:	01 c0       	rjmp	.+2      	; 0x26f4 <udd_ep_alloc+0x9c>
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	fc 01       	movw	r30, r24
    26f6:	ee 0f       	add	r30, r30
    26f8:	ff 1f       	adc	r31, r31
    26fa:	ee 0f       	add	r30, r30
    26fc:	ff 1f       	adc	r31, r31
    26fe:	ee 0f       	add	r30, r30
    2700:	ff 1f       	adc	r31, r31
    2702:	e4 5b       	subi	r30, 0xB4	; 180
    2704:	fc 4d       	sbci	r31, 0xDC	; 220
    2706:	15 8a       	std	Z+21, r1	; 0x15
    2708:	36 e0       	ldi	r19, 0x06	; 6
    270a:	34 8b       	std	Z+20, r19	; 0x14
    270c:	26 2b       	or	r18, r22
    270e:	25 8b       	std	Z+21, r18	; 0x15
    2710:	fc 01       	movw	r30, r24
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	ee 0f       	add	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	ee 0f       	add	r30, r30
    271c:	ff 1f       	adc	r31, r31
    271e:	e4 5b       	subi	r30, 0xB4	; 180
    2720:	fc 4d       	sbci	r31, 0xDC	; 220
    2722:	25 89       	ldd	r18, Z+21	; 0x15
    2724:	20 7c       	andi	r18, 0xC0	; 192
    2726:	20 3c       	cpi	r18, 0xC0	; 192
    2728:	69 f4       	brne	.+26     	; 0x2744 <udd_ep_alloc+0xec>
    272a:	fc 01       	movw	r30, r24
    272c:	ee 0f       	add	r30, r30
    272e:	ff 1f       	adc	r31, r31
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	ee 0f       	add	r30, r30
    2736:	ff 1f       	adc	r31, r31
    2738:	e4 5b       	subi	r30, 0xB4	; 180
    273a:	fc 4d       	sbci	r31, 0xDC	; 220
    273c:	25 89       	ldd	r18, Z+21	; 0x15
    273e:	27 70       	andi	r18, 0x07	; 7
    2740:	27 30       	cpi	r18, 0x07	; 7
    2742:	81 f0       	breq	.+32     	; 0x2764 <udd_ep_alloc+0x10c>
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	88 0f       	add	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	fc 01       	movw	r30, r24
    2752:	e4 5b       	subi	r30, 0xB4	; 180
    2754:	fc 4d       	sbci	r31, 0xDC	; 220
    2756:	85 89       	ldd	r24, Z+21	; 0x15
    2758:	80 62       	ori	r24, 0x20	; 32
    275a:	85 8b       	std	Z+21, r24	; 0x15
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	08 95       	ret
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	08 95       	ret
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	08 95       	ret

00002768 <udd_ep_is_halted>:
    2768:	e8 2f       	mov	r30, r24
    276a:	ef 70       	andi	r30, 0x0F	; 15
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	ee 0f       	add	r30, r30
    2770:	ff 1f       	adc	r31, r31
    2772:	08 2e       	mov	r0, r24
    2774:	00 0c       	add	r0, r0
    2776:	99 0b       	sbc	r25, r25
    2778:	88 27       	eor	r24, r24
    277a:	99 0f       	add	r25, r25
    277c:	88 1f       	adc	r24, r24
    277e:	99 27       	eor	r25, r25
    2780:	e8 0f       	add	r30, r24
    2782:	f9 1f       	adc	r31, r25
    2784:	ee 0f       	add	r30, r30
    2786:	ff 1f       	adc	r31, r31
    2788:	ee 0f       	add	r30, r30
    278a:	ff 1f       	adc	r31, r31
    278c:	ee 0f       	add	r30, r30
    278e:	ff 1f       	adc	r31, r31
    2790:	e4 5b       	subi	r30, 0xB4	; 180
    2792:	fc 4d       	sbci	r31, 0xDC	; 220
    2794:	85 89       	ldd	r24, Z+21	; 0x15
    2796:	82 fb       	bst	r24, 2
    2798:	88 27       	eor	r24, r24
    279a:	80 f9       	bld	r24, 0
    279c:	08 95       	ret

0000279e <udd_ep_clear_halt>:
    279e:	0f 93       	push	r16
    27a0:	28 2f       	mov	r18, r24
    27a2:	2f 70       	andi	r18, 0x0F	; 15
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	a9 01       	movw	r20, r18
    27a8:	44 0f       	add	r20, r20
    27aa:	55 1f       	adc	r21, r21
    27ac:	28 2f       	mov	r18, r24
    27ae:	08 2e       	mov	r0, r24
    27b0:	00 0c       	add	r0, r0
    27b2:	33 0b       	sbc	r19, r19
    27b4:	22 27       	eor	r18, r18
    27b6:	33 0f       	add	r19, r19
    27b8:	22 1f       	adc	r18, r18
    27ba:	33 27       	eor	r19, r19
    27bc:	24 0f       	add	r18, r20
    27be:	35 1f       	adc	r19, r21
    27c0:	a9 01       	movw	r20, r18
    27c2:	44 0f       	add	r20, r20
    27c4:	55 1f       	adc	r21, r21
    27c6:	44 0f       	add	r20, r20
    27c8:	55 1f       	adc	r21, r21
    27ca:	44 0f       	add	r20, r20
    27cc:	55 1f       	adc	r21, r21
    27ce:	fa 01       	movw	r30, r20
    27d0:	e0 5a       	subi	r30, 0xA0	; 160
    27d2:	fc 4d       	sbci	r31, 0xDC	; 220
    27d4:	01 e0       	ldi	r16, 0x01	; 1
    27d6:	06 93       	lac	Z, r16
    27d8:	fa 01       	movw	r30, r20
    27da:	e4 5b       	subi	r30, 0xB4	; 180
    27dc:	fc 4d       	sbci	r31, 0xDC	; 220
    27de:	95 89       	ldd	r25, Z+21	; 0x15
    27e0:	92 ff       	sbrs	r25, 2
    27e2:	11 c0       	rjmp	.+34     	; 0x2806 <udd_ep_clear_halt+0x68>
    27e4:	fa 01       	movw	r30, r20
    27e6:	e4 5b       	subi	r30, 0xB4	; 180
    27e8:	fc 4d       	sbci	r31, 0xDC	; 220
    27ea:	95 89       	ldd	r25, Z+21	; 0x15
    27ec:	9b 7f       	andi	r25, 0xFB	; 251
    27ee:	95 8b       	std	Z+21, r25	; 0x15
    27f0:	64 dc       	rcall	.-1848   	; 0x20ba <udd_ep_get_job>
    27f2:	fc 01       	movw	r30, r24
    27f4:	80 81       	ld	r24, Z
    27f6:	80 ff       	sbrs	r24, 0
    27f8:	06 c0       	rjmp	.+12     	; 0x2806 <udd_ep_clear_halt+0x68>
    27fa:	8e 7f       	andi	r24, 0xFE	; 254
    27fc:	80 83       	st	Z, r24
    27fe:	07 80       	ldd	r0, Z+7	; 0x07
    2800:	f0 85       	ldd	r31, Z+8	; 0x08
    2802:	e0 2d       	mov	r30, r0
    2804:	19 95       	eicall
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	0f 91       	pop	r16
    280a:	08 95       	ret

0000280c <udd_ep_run>:
    280c:	6f 92       	push	r6
    280e:	7f 92       	push	r7
    2810:	8f 92       	push	r8
    2812:	9f 92       	push	r9
    2814:	af 92       	push	r10
    2816:	bf 92       	push	r11
    2818:	cf 92       	push	r12
    281a:	df 92       	push	r13
    281c:	ef 92       	push	r14
    281e:	ff 92       	push	r15
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	1f 92       	push	r1
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	78 2e       	mov	r7, r24
    2830:	66 2e       	mov	r6, r22
    2832:	4a 01       	movw	r8, r20
    2834:	59 01       	movw	r10, r18
    2836:	41 dc       	rcall	.-1918   	; 0x20ba <udd_ep_get_job>
    2838:	6c 01       	movw	r12, r24
    283a:	27 2d       	mov	r18, r7
    283c:	87 2d       	mov	r24, r7
    283e:	8f 70       	andi	r24, 0x0F	; 15
    2840:	e8 2e       	mov	r14, r24
    2842:	f1 2c       	mov	r15, r1
    2844:	c7 01       	movw	r24, r14
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	e7 2c       	mov	r14, r7
    284c:	07 2c       	mov	r0, r7
    284e:	00 0c       	add	r0, r0
    2850:	ff 08       	sbc	r15, r15
    2852:	ee 24       	eor	r14, r14
    2854:	ff 0c       	add	r15, r15
    2856:	ee 1c       	adc	r14, r14
    2858:	ff 24       	eor	r15, r15
    285a:	e8 0e       	add	r14, r24
    285c:	f9 1e       	adc	r15, r25
    285e:	f7 01       	movw	r30, r14
    2860:	ee 0f       	add	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	ee 0f       	add	r30, r30
    2866:	ff 1f       	adc	r31, r31
    2868:	ee 0f       	add	r30, r30
    286a:	ff 1f       	adc	r31, r31
    286c:	e4 5b       	subi	r30, 0xB4	; 180
    286e:	fc 4d       	sbci	r31, 0xDC	; 220
    2870:	85 89       	ldd	r24, Z+21	; 0x15
    2872:	80 7c       	andi	r24, 0xC0	; 192
    2874:	09 f4       	brne	.+2      	; 0x2878 <udd_ep_run+0x6c>
    2876:	81 c0       	rjmp	.+258    	; 0x297a <udd_ep_run+0x16e>
    2878:	f7 01       	movw	r30, r14
    287a:	ee 0f       	add	r30, r30
    287c:	ff 1f       	adc	r31, r31
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	ee 0f       	add	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	e4 5b       	subi	r30, 0xB4	; 180
    2888:	fc 4d       	sbci	r31, 0xDC	; 220
    288a:	85 89       	ldd	r24, Z+21	; 0x15
    288c:	80 7c       	andi	r24, 0xC0	; 192
    288e:	80 3c       	cpi	r24, 0xC0	; 192
    2890:	61 f0       	breq	.+24     	; 0x28aa <udd_ep_run+0x9e>
    2892:	f7 01       	movw	r30, r14
    2894:	ee 0f       	add	r30, r30
    2896:	ff 1f       	adc	r31, r31
    2898:	ee 0f       	add	r30, r30
    289a:	ff 1f       	adc	r31, r31
    289c:	ee 0f       	add	r30, r30
    289e:	ff 1f       	adc	r31, r31
    28a0:	e4 5b       	subi	r30, 0xB4	; 180
    28a2:	fc 4d       	sbci	r31, 0xDC	; 220
    28a4:	85 89       	ldd	r24, Z+21	; 0x15
    28a6:	82 fd       	sbrc	r24, 2
    28a8:	6a c0       	rjmp	.+212    	; 0x297e <udd_ep_run+0x172>
    28aa:	8f b7       	in	r24, 0x3f	; 63
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	f8 94       	cli
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	f6 01       	movw	r30, r12
    28b4:	90 81       	ld	r25, Z
    28b6:	90 ff       	sbrs	r25, 0
    28b8:	03 c0       	rjmp	.+6      	; 0x28c0 <udd_ep_run+0xb4>
    28ba:	8f bf       	out	0x3f, r24	; 63
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	60 c0       	rjmp	.+192    	; 0x2980 <udd_ep_run+0x174>
    28c0:	f6 01       	movw	r30, r12
    28c2:	90 81       	ld	r25, Z
    28c4:	91 60       	ori	r25, 0x01	; 1
    28c6:	90 83       	st	Z, r25
    28c8:	8f bf       	out	0x3f, r24	; 63
    28ca:	81 82       	std	Z+1, r8	; 0x01
    28cc:	92 82       	std	Z+2, r9	; 0x02
    28ce:	a3 82       	std	Z+3, r10	; 0x03
    28d0:	b4 82       	std	Z+4, r11	; 0x04
    28d2:	15 82       	std	Z+5, r1	; 0x05
    28d4:	16 82       	std	Z+6, r1	; 0x06
    28d6:	07 83       	std	Z+7, r16	; 0x07
    28d8:	10 87       	std	Z+8, r17	; 0x08
    28da:	61 10       	cpse	r6, r1
    28dc:	06 c0       	rjmp	.+12     	; 0x28ea <udd_ep_run+0xde>
    28de:	91 e0       	ldi	r25, 0x01	; 1
    28e0:	a1 14       	cp	r10, r1
    28e2:	b1 04       	cpc	r11, r1
    28e4:	19 f0       	breq	.+6      	; 0x28ec <udd_ep_run+0xe0>
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	01 c0       	rjmp	.+2      	; 0x28ec <udd_ep_run+0xe0>
    28ea:	91 e0       	ldi	r25, 0x01	; 1
    28ec:	f6 01       	movw	r30, r12
    28ee:	80 81       	ld	r24, Z
    28f0:	90 fb       	bst	r25, 0
    28f2:	81 f9       	bld	r24, 1
    28f4:	8b 7f       	andi	r24, 0xFB	; 251
    28f6:	80 83       	st	Z, r24
    28f8:	22 23       	and	r18, r18
    28fa:	64 f4       	brge	.+24     	; 0x2914 <udd_ep_run+0x108>
    28fc:	f7 01       	movw	r30, r14
    28fe:	ee 0f       	add	r30, r30
    2900:	ff 1f       	adc	r31, r31
    2902:	ee 0f       	add	r30, r30
    2904:	ff 1f       	adc	r31, r31
    2906:	ee 0f       	add	r30, r30
    2908:	ff 1f       	adc	r31, r31
    290a:	e4 5b       	subi	r30, 0xB4	; 180
    290c:	fc 4d       	sbci	r31, 0xDC	; 220
    290e:	12 8e       	std	Z+26, r1	; 0x1a
    2910:	13 8e       	std	Z+27, r1	; 0x1b
    2912:	2f c0       	rjmp	.+94     	; 0x2972 <udd_ep_run+0x166>
    2914:	f7 01       	movw	r30, r14
    2916:	ee 0f       	add	r30, r30
    2918:	ff 1f       	adc	r31, r31
    291a:	ee 0f       	add	r30, r30
    291c:	ff 1f       	adc	r31, r31
    291e:	ee 0f       	add	r30, r30
    2920:	ff 1f       	adc	r31, r31
    2922:	e4 5b       	subi	r30, 0xB4	; 180
    2924:	fc 4d       	sbci	r31, 0xDC	; 220
    2926:	85 89       	ldd	r24, Z+21	; 0x15
    2928:	80 7c       	andi	r24, 0xC0	; 192
    292a:	80 3c       	cpi	r24, 0xC0	; 192
    292c:	a9 f4       	brne	.+42     	; 0x2958 <udd_ep_run+0x14c>
    292e:	c7 01       	movw	r24, r14
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	88 0f       	add	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	80 5a       	subi	r24, 0xA0	; 160
    293e:	9c 4d       	sbci	r25, 0xDC	; 220
    2940:	94 db       	rcall	.-2264   	; 0x206a <udd_ep_get_size>
    2942:	bc 01       	movw	r22, r24
    2944:	c5 01       	movw	r24, r10
    2946:	af d2       	rcall	.+1374   	; 0x2ea6 <__udivmodhi4>
    2948:	89 2b       	or	r24, r25
    294a:	31 f0       	breq	.+12     	; 0x2958 <udd_ep_run+0x14c>
    294c:	f6 01       	movw	r30, r12
    294e:	80 81       	ld	r24, Z
    2950:	8e 7f       	andi	r24, 0xFE	; 254
    2952:	80 83       	st	Z, r24
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	14 c0       	rjmp	.+40     	; 0x2980 <udd_ep_run+0x174>
    2958:	f7 01       	movw	r30, r14
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	ee 0f       	add	r30, r30
    2964:	ff 1f       	adc	r31, r31
    2966:	e4 5b       	subi	r30, 0xB4	; 180
    2968:	fc 4d       	sbci	r31, 0xDC	; 220
    296a:	16 8a       	std	Z+22, r1	; 0x16
    296c:	17 8a       	std	Z+23, r1	; 0x17
    296e:	12 8e       	std	Z+26, r1	; 0x1a
    2970:	13 8e       	std	Z+27, r1	; 0x1b
    2972:	87 2d       	mov	r24, r7
    2974:	2e dc       	rcall	.-1956   	; 0x21d2 <udd_ep_trans_complet>
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	03 c0       	rjmp	.+6      	; 0x2980 <udd_ep_run+0x174>
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <udd_ep_run+0x174>
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	0f 90       	pop	r0
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	1f 91       	pop	r17
    2988:	0f 91       	pop	r16
    298a:	ff 90       	pop	r15
    298c:	ef 90       	pop	r14
    298e:	df 90       	pop	r13
    2990:	cf 90       	pop	r12
    2992:	bf 90       	pop	r11
    2994:	af 90       	pop	r10
    2996:	9f 90       	pop	r9
    2998:	8f 90       	pop	r8
    299a:	7f 90       	pop	r7
    299c:	6f 90       	pop	r6
    299e:	08 95       	ret

000029a0 <udd_ep_abort>:
    29a0:	ff 92       	push	r15
    29a2:	0f 93       	push	r16
    29a4:	1f 93       	push	r17
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	18 2f       	mov	r17, r24
    29ac:	c8 2f       	mov	r28, r24
    29ae:	cf 70       	andi	r28, 0x0F	; 15
    29b0:	d0 e0       	ldi	r29, 0x00	; 0
    29b2:	ce 01       	movw	r24, r28
    29b4:	88 0f       	add	r24, r24
    29b6:	99 1f       	adc	r25, r25
    29b8:	c1 2f       	mov	r28, r17
    29ba:	01 2e       	mov	r0, r17
    29bc:	00 0c       	add	r0, r0
    29be:	dd 0b       	sbc	r29, r29
    29c0:	cc 27       	eor	r28, r28
    29c2:	dd 0f       	add	r29, r29
    29c4:	cc 1f       	adc	r28, r28
    29c6:	dd 27       	eor	r29, r29
    29c8:	c8 0f       	add	r28, r24
    29ca:	d9 1f       	adc	r29, r25
    29cc:	81 2f       	mov	r24, r17
    29ce:	75 db       	rcall	.-2326   	; 0x20ba <udd_ep_get_job>
    29d0:	dc 01       	movw	r26, r24
    29d2:	fe 01       	movw	r30, r28
    29d4:	ee 0f       	add	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	ee 0f       	add	r30, r30
    29da:	ff 1f       	adc	r31, r31
    29dc:	ee 0f       	add	r30, r30
    29de:	ff 1f       	adc	r31, r31
    29e0:	e0 5a       	subi	r30, 0xA0	; 160
    29e2:	fc 4d       	sbci	r31, 0xDC	; 220
    29e4:	02 e0       	ldi	r16, 0x02	; 2
    29e6:	05 93       	las	Z, r16
    29e8:	8c 91       	ld	r24, X
    29ea:	80 ff       	sbrs	r24, 0
    29ec:	22 c0       	rjmp	.+68     	; 0x2a32 <udd_ep_abort+0x92>
    29ee:	8e 7f       	andi	r24, 0xFE	; 254
    29f0:	8c 93       	st	X, r24
    29f2:	17 96       	adiw	r26, 0x07	; 7
    29f4:	ed 91       	ld	r30, X+
    29f6:	fc 91       	ld	r31, X
    29f8:	18 97       	sbiw	r26, 0x08	; 8
    29fa:	30 97       	sbiw	r30, 0x00	; 0
    29fc:	d1 f0       	breq	.+52     	; 0x2a32 <udd_ep_abort+0x92>
    29fe:	11 23       	and	r17, r17
    2a00:	5c f4       	brge	.+22     	; 0x2a18 <udd_ep_abort+0x78>
    2a02:	cc 0f       	add	r28, r28
    2a04:	dd 1f       	adc	r29, r29
    2a06:	cc 0f       	add	r28, r28
    2a08:	dd 1f       	adc	r29, r29
    2a0a:	cc 0f       	add	r28, r28
    2a0c:	dd 1f       	adc	r29, r29
    2a0e:	c4 5b       	subi	r28, 0xB4	; 180
    2a10:	dc 4d       	sbci	r29, 0xDC	; 220
    2a12:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2a14:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2a16:	0a c0       	rjmp	.+20     	; 0x2a2c <udd_ep_abort+0x8c>
    2a18:	cc 0f       	add	r28, r28
    2a1a:	dd 1f       	adc	r29, r29
    2a1c:	cc 0f       	add	r28, r28
    2a1e:	dd 1f       	adc	r29, r29
    2a20:	cc 0f       	add	r28, r28
    2a22:	dd 1f       	adc	r29, r29
    2a24:	c4 5b       	subi	r28, 0xB4	; 180
    2a26:	dc 4d       	sbci	r29, 0xDC	; 220
    2a28:	6e 89       	ldd	r22, Y+22	; 0x16
    2a2a:	7f 89       	ldd	r23, Y+23	; 0x17
    2a2c:	41 2f       	mov	r20, r17
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	19 95       	eicall
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	1f 91       	pop	r17
    2a38:	0f 91       	pop	r16
    2a3a:	ff 90       	pop	r15
    2a3c:	08 95       	ret

00002a3e <udd_ep_free>:
    2a3e:	cf 93       	push	r28
    2a40:	c8 2f       	mov	r28, r24
    2a42:	ae df       	rcall	.-164    	; 0x29a0 <udd_ep_abort>
    2a44:	ec 2f       	mov	r30, r28
    2a46:	ef 70       	andi	r30, 0x0F	; 15
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	ee 0f       	add	r30, r30
    2a4c:	ff 1f       	adc	r31, r31
    2a4e:	8c 2f       	mov	r24, r28
    2a50:	cc 0f       	add	r28, r28
    2a52:	99 0b       	sbc	r25, r25
    2a54:	88 27       	eor	r24, r24
    2a56:	99 0f       	add	r25, r25
    2a58:	88 1f       	adc	r24, r24
    2a5a:	99 27       	eor	r25, r25
    2a5c:	e8 0f       	add	r30, r24
    2a5e:	f9 1f       	adc	r31, r25
    2a60:	ee 0f       	add	r30, r30
    2a62:	ff 1f       	adc	r31, r31
    2a64:	ee 0f       	add	r30, r30
    2a66:	ff 1f       	adc	r31, r31
    2a68:	ee 0f       	add	r30, r30
    2a6a:	ff 1f       	adc	r31, r31
    2a6c:	e4 5b       	subi	r30, 0xB4	; 180
    2a6e:	fc 4d       	sbci	r31, 0xDC	; 220
    2a70:	15 8a       	std	Z+21, r1	; 0x15
    2a72:	cf 91       	pop	r28
    2a74:	08 95       	ret

00002a76 <udd_ep_set_halt>:
    2a76:	e8 2f       	mov	r30, r24
    2a78:	ef 70       	andi	r30, 0x0F	; 15
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	ee 0f       	add	r30, r30
    2a7e:	ff 1f       	adc	r31, r31
    2a80:	28 2f       	mov	r18, r24
    2a82:	08 2e       	mov	r0, r24
    2a84:	00 0c       	add	r0, r0
    2a86:	33 0b       	sbc	r19, r19
    2a88:	22 27       	eor	r18, r18
    2a8a:	33 0f       	add	r19, r19
    2a8c:	22 1f       	adc	r18, r18
    2a8e:	33 27       	eor	r19, r19
    2a90:	e2 0f       	add	r30, r18
    2a92:	f3 1f       	adc	r31, r19
    2a94:	ee 0f       	add	r30, r30
    2a96:	ff 1f       	adc	r31, r31
    2a98:	ee 0f       	add	r30, r30
    2a9a:	ff 1f       	adc	r31, r31
    2a9c:	ee 0f       	add	r30, r30
    2a9e:	ff 1f       	adc	r31, r31
    2aa0:	e4 5b       	subi	r30, 0xB4	; 180
    2aa2:	fc 4d       	sbci	r31, 0xDC	; 220
    2aa4:	95 89       	ldd	r25, Z+21	; 0x15
    2aa6:	94 60       	ori	r25, 0x04	; 4
    2aa8:	95 8b       	std	Z+21, r25	; 0x15
    2aaa:	7a df       	rcall	.-268    	; 0x29a0 <udd_ep_abort>
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	08 95       	ret

00002ab0 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2ab0:	1f 92       	push	r1
    2ab2:	0f 92       	push	r0
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	0f 92       	push	r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	0b b6       	in	r0, 0x3b	; 59
    2abc:	0f 92       	push	r0
    2abe:	0f 93       	push	r16
    2ac0:	2f 93       	push	r18
    2ac2:	3f 93       	push	r19
    2ac4:	4f 93       	push	r20
    2ac6:	5f 93       	push	r21
    2ac8:	6f 93       	push	r22
    2aca:	7f 93       	push	r23
    2acc:	8f 93       	push	r24
    2ace:	9f 93       	push	r25
    2ad0:	af 93       	push	r26
    2ad2:	bf 93       	push	r27
    2ad4:	cf 93       	push	r28
    2ad6:	ef 93       	push	r30
    2ad8:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2ada:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2ade:	88 23       	and	r24, r24
    2ae0:	3c f4       	brge	.+14     	; 0x2af0 <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    2ae2:	80 e8       	ldi	r24, 0x80	; 128
    2ae4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    2ae8:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2aec:	b0 d1       	rcall	.+864    	; 0x2e4e <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2aee:	89 c0       	rjmp	.+274    	; 0x2c02 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2af0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2af4:	82 ff       	sbrs	r24, 2
    2af6:	20 c0       	rjmp	.+64     	; 0x2b38 <__vector_125+0x88>
		udd_ack_underflow_event();
    2af8:	84 e0       	ldi	r24, 0x04	; 4
    2afa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    2afe:	80 91 68 23 	lds	r24, 0x2368	; 0x802368 <udd_sram+0x1c>
    2b02:	86 ff       	sbrs	r24, 6
    2b04:	7e c0       	rjmp	.+252    	; 0x2c02 <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2b06:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2b0a:	81 fd       	sbrc	r24, 1
    2b0c:	7a c0       	rjmp	.+244    	; 0x2c02 <__vector_125+0x152>
    2b0e:	f0 da       	rcall	.-2592   	; 0x20f0 <udd_ctrl_interrupt_tc_setup>
    2b10:	81 11       	cpse	r24, r1
    2b12:	77 c0       	rjmp	.+238    	; 0x2c02 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2b14:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <udd_ep_control_state>
    2b18:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2b1a:	11 f4       	brne	.+4      	; 0x2b20 <__vector_125+0x70>
    2b1c:	24 da       	rcall	.-3000   	; 0x1f66 <udd_ctrl_send_zlp_in>
    2b1e:	71 c0       	rjmp	.+226    	; 0x2c02 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b20:	84 30       	cpi	r24, 0x04	; 4
    2b22:	09 f0       	breq	.+2      	; 0x2b26 <__vector_125+0x76>
    2b24:	6e c0       	rjmp	.+220    	; 0x2c02 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2b26:	e9 e6       	ldi	r30, 0x69	; 105
    2b28:	f3 e2       	ldi	r31, 0x23	; 35
    2b2a:	04 e0       	ldi	r16, 0x04	; 4
    2b2c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b2e:	e1 e6       	ldi	r30, 0x61	; 97
    2b30:	f3 e2       	ldi	r31, 0x23	; 35
    2b32:	04 e0       	ldi	r16, 0x04	; 4
    2b34:	05 93       	las	Z, r16
    2b36:	65 c0       	rjmp	.+202    	; 0x2c02 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2b38:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2b3c:	81 ff       	sbrs	r24, 1
    2b3e:	5c c0       	rjmp	.+184    	; 0x2bf8 <__vector_125+0x148>
		udd_ack_overflow_event();
    2b40:	82 e0       	ldi	r24, 0x02	; 2
    2b42:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    2b46:	80 91 60 23 	lds	r24, 0x2360	; 0x802360 <udd_sram+0x14>
    2b4a:	86 ff       	sbrs	r24, 6
    2b4c:	5a c0       	rjmp	.+180    	; 0x2c02 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2b4e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2b52:	81 fd       	sbrc	r24, 1
    2b54:	56 c0       	rjmp	.+172    	; 0x2c02 <__vector_125+0x152>
    2b56:	cc da       	rcall	.-2664   	; 0x20f0 <udd_ctrl_interrupt_tc_setup>
    2b58:	81 11       	cpse	r24, r1
    2b5a:	53 c0       	rjmp	.+166    	; 0x2c02 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2b5c:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <udd_ep_control_state>
    2b60:	82 30       	cpi	r24, 0x02	; 2
    2b62:	41 f4       	brne	.+16     	; 0x2b74 <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2b64:	84 e0       	ldi	r24, 0x04	; 4
    2b66:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2b6a:	e0 e6       	ldi	r30, 0x60	; 96
    2b6c:	f3 e2       	ldi	r31, 0x23	; 35
    2b6e:	02 e0       	ldi	r16, 0x02	; 2
    2b70:	06 93       	lac	Z, r16
    2b72:	47 c0       	rjmp	.+142    	; 0x2c02 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2b74:	83 30       	cpi	r24, 0x03	; 3
    2b76:	09 f0       	breq	.+2      	; 0x2b7a <__vector_125+0xca>
    2b78:	44 c0       	rjmp	.+136    	; 0x2c02 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2b7a:	e9 e6       	ldi	r30, 0x69	; 105
    2b7c:	f3 e2       	ldi	r31, 0x23	; 35
    2b7e:	04 e0       	ldi	r16, 0x04	; 4
    2b80:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b82:	e1 e6       	ldi	r30, 0x61	; 97
    2b84:	f3 e2       	ldi	r31, 0x23	; 35
    2b86:	04 e0       	ldi	r16, 0x04	; 4
    2b88:	05 93       	las	Z, r16
    2b8a:	3b c0       	rjmp	.+118    	; 0x2c02 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2b8c:	80 e1       	ldi	r24, 0x10	; 16
    2b8e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b92:	c1 e0       	ldi	r28, 0x01	; 1
    2b94:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b96:	04 df       	rcall	.-504    	; 0x29a0 <udd_ep_abort>
    2b98:	8c 2f       	mov	r24, r28
    2b9a:	80 68       	ori	r24, 0x80	; 128
    2b9c:	01 df       	rcall	.-510    	; 0x29a0 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    2b9e:	cf 5f       	subi	r28, 0xFF	; 255
    2ba0:	c5 30       	cpi	r28, 0x05	; 5
    2ba2:	c1 f7       	brne	.-16     	; 0x2b94 <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2ba4:	0e 94 40 0c 	call	0x1880	; 0x1880 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2ba8:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2bac:	ec e4       	ldi	r30, 0x4C	; 76
    2bae:	f3 e2       	ldi	r31, 0x23	; 35
    2bb0:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2bb2:	96 e0       	ldi	r25, 0x06	; 6
    2bb4:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2bb6:	80 e4       	ldi	r24, 0x40	; 64
    2bb8:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2bba:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2bbc:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2bbe:	85 8f       	std	Z+29, r24	; 0x1d
    2bc0:	8d e3       	ldi	r24, 0x3D	; 61
    2bc2:	93 e2       	ldi	r25, 0x23	; 35
    2bc4:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    2bc6:	91 8f       	std	Z+25, r25	; 0x19
    2bc8:	9b d9       	rcall	.-3274   	; 0x1f00 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2bca:	1b c0       	rjmp	.+54     	; 0x2c02 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    2bcc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    2bd0:	86 ff       	sbrs	r24, 6
    2bd2:	07 c0       	rjmp	.+14     	; 0x2be2 <__vector_125+0x132>
    2bd4:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2bd6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2bda:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2bdc:	59 d9       	rcall	.-3406   	; 0x1e90 <udd_sleep_mode>
    2bde:	35 d1       	rcall	.+618    	; 0x2e4a <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2be0:	10 c0       	rjmp	.+32     	; 0x2c02 <__vector_125+0x152>
    2be2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    2be6:	85 ff       	sbrs	r24, 5
    2be8:	0c c0       	rjmp	.+24     	; 0x2c02 <__vector_125+0x152>
    2bea:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    2bec:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2bf2:	4e d9       	rcall	.-3428   	; 0x1e90 <udd_sleep_mode>
    2bf4:	2b d1       	rcall	.+598    	; 0x2e4c <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2bf6:	05 c0       	rjmp	.+10     	; 0x2c02 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2bf8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2bfc:	84 fd       	sbrc	r24, 4
    2bfe:	c6 cf       	rjmp	.-116    	; 0x2b8c <__vector_125+0xdc>
    2c00:	e5 cf       	rjmp	.-54     	; 0x2bcc <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2c02:	ff 91       	pop	r31
    2c04:	ef 91       	pop	r30
    2c06:	cf 91       	pop	r28
    2c08:	bf 91       	pop	r27
    2c0a:	af 91       	pop	r26
    2c0c:	9f 91       	pop	r25
    2c0e:	8f 91       	pop	r24
    2c10:	7f 91       	pop	r23
    2c12:	6f 91       	pop	r22
    2c14:	5f 91       	pop	r21
    2c16:	4f 91       	pop	r20
    2c18:	3f 91       	pop	r19
    2c1a:	2f 91       	pop	r18
    2c1c:	0f 91       	pop	r16
    2c1e:	0f 90       	pop	r0
    2c20:	0b be       	out	0x3b, r0	; 59
    2c22:	0f 90       	pop	r0
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	0f 90       	pop	r0
    2c28:	1f 90       	pop	r1
    2c2a:	18 95       	reti

00002c2c <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2c2c:	1f 92       	push	r1
    2c2e:	0f 92       	push	r0
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	0f 92       	push	r0
    2c34:	11 24       	eor	r1, r1
    2c36:	0b b6       	in	r0, 0x3b	; 59
    2c38:	0f 92       	push	r0
    2c3a:	0f 93       	push	r16
    2c3c:	1f 93       	push	r17
    2c3e:	2f 93       	push	r18
    2c40:	3f 93       	push	r19
    2c42:	4f 93       	push	r20
    2c44:	5f 93       	push	r21
    2c46:	6f 93       	push	r22
    2c48:	7f 93       	push	r23
    2c4a:	8f 93       	push	r24
    2c4c:	9f 93       	push	r25
    2c4e:	af 93       	push	r26
    2c50:	bf 93       	push	r27
    2c52:	cf 93       	push	r28
    2c54:	df 93       	push	r29
    2c56:	ef 93       	push	r30
    2c58:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2c5a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2c5e:	81 fd       	sbrc	r24, 1
    2c60:	03 c0       	rjmp	.+6      	; 0x2c68 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2c62:	46 da       	rcall	.-2932   	; 0x20f0 <udd_ctrl_interrupt_tc_setup>
    2c64:	81 11       	cpse	r24, r1
    2c66:	c3 c0       	rjmp	.+390    	; 0x2dee <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2c68:	82 e0       	ldi	r24, 0x02	; 2
    2c6a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2c6e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2c72:	81 95       	neg	r24
    2c74:	88 0f       	add	r24, r24
    2c76:	e0 e6       	ldi	r30, 0x60	; 96
    2c78:	f3 e2       	ldi	r31, 0x23	; 35
    2c7a:	e8 1b       	sub	r30, r24
    2c7c:	f1 09       	sbc	r31, r1
    2c7e:	20 81       	ld	r18, Z
    2c80:	31 81       	ldd	r19, Z+1	; 0x01
    2c82:	20 56       	subi	r18, 0x60	; 96
    2c84:	33 42       	sbci	r19, 0x23	; 35
    2c86:	36 95       	lsr	r19
    2c88:	27 95       	ror	r18
    2c8a:	36 95       	lsr	r19
    2c8c:	27 95       	ror	r18
    2c8e:	36 95       	lsr	r19
    2c90:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2c92:	82 2f       	mov	r24, r18
    2c94:	86 95       	lsr	r24
    2c96:	20 fd       	sbrc	r18, 0
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <__vector_126+0x72>
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	01 c0       	rjmp	.+2      	; 0x2ca0 <__vector_126+0x74>
    2c9e:	90 e8       	ldi	r25, 0x80	; 128
    2ca0:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2ca2:	e8 2f       	mov	r30, r24
    2ca4:	ef 70       	andi	r30, 0x0F	; 15
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	ee 0f       	add	r30, r30
    2caa:	ff 1f       	adc	r31, r31
    2cac:	28 2f       	mov	r18, r24
    2cae:	08 2e       	mov	r0, r24
    2cb0:	00 0c       	add	r0, r0
    2cb2:	33 0b       	sbc	r19, r19
    2cb4:	22 27       	eor	r18, r18
    2cb6:	33 0f       	add	r19, r19
    2cb8:	22 1f       	adc	r18, r18
    2cba:	33 27       	eor	r19, r19
    2cbc:	e2 0f       	add	r30, r18
    2cbe:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2cc0:	df 01       	movw	r26, r30
    2cc2:	aa 0f       	add	r26, r26
    2cc4:	bb 1f       	adc	r27, r27
    2cc6:	aa 0f       	add	r26, r26
    2cc8:	bb 1f       	adc	r27, r27
    2cca:	aa 0f       	add	r26, r26
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	a4 5b       	subi	r26, 0xB4	; 180
    2cd0:	bc 4d       	sbci	r27, 0xDC	; 220
    2cd2:	54 96       	adiw	r26, 0x14	; 20
    2cd4:	9c 91       	ld	r25, X
    2cd6:	95 ff       	sbrs	r25, 5
    2cd8:	8a c0       	rjmp	.+276    	; 0x2dee <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2cda:	ee 0f       	add	r30, r30
    2cdc:	ff 1f       	adc	r31, r31
    2cde:	ee 0f       	add	r30, r30
    2ce0:	ff 1f       	adc	r31, r31
    2ce2:	ee 0f       	add	r30, r30
    2ce4:	ff 1f       	adc	r31, r31
    2ce6:	e0 5a       	subi	r30, 0xA0	; 160
    2ce8:	fc 4d       	sbci	r31, 0xDC	; 220
    2cea:	00 e2       	ldi	r16, 0x20	; 32
    2cec:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2cee:	81 11       	cpse	r24, r1
    2cf0:	79 c0       	rjmp	.+242    	; 0x2de4 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2cf2:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <udd_ep_control_state>
    2cf6:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2cf8:	19 f4       	brne	.+6      	; 0x2d00 <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2cfa:	43 d9       	rcall	.-3450   	; 0x1f82 <udd_ctrl_endofrequest>
    2cfc:	01 d9       	rcall	.-3582   	; 0x1f00 <udd_ctrl_init>
    2cfe:	77 c0       	rjmp	.+238    	; 0x2dee <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2d00:	00 91 62 23 	lds	r16, 0x2362	; 0x802362 <udd_sram+0x16>
    2d04:	10 91 63 23 	lds	r17, 0x2363	; 0x802363 <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2d08:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0xa>
    2d0c:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0xb>
    2d10:	c0 91 45 23 	lds	r28, 0x2345	; 0x802345 <udd_ctrl_payload_nb_trans>
    2d14:	d0 91 46 23 	lds	r29, 0x2346	; 0x802346 <udd_ctrl_payload_nb_trans+0x1>
    2d18:	98 01       	movw	r18, r16
    2d1a:	2c 0f       	add	r18, r28
    2d1c:	3d 1f       	adc	r19, r29
    2d1e:	82 17       	cp	r24, r18
    2d20:	93 07       	cpc	r25, r19
    2d22:	18 f4       	brcc	.+6      	; 0x2d2a <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2d24:	8c 01       	movw	r16, r24
    2d26:	0c 1b       	sub	r16, r28
    2d28:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2d2a:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udd_g_ctrlreq+0x8>
    2d2e:	90 91 ca 23 	lds	r25, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x9>
    2d32:	a8 01       	movw	r20, r16
    2d34:	6d e3       	ldi	r22, 0x3D	; 61
    2d36:	73 e2       	ldi	r23, 0x23	; 35
    2d38:	8c 0f       	add	r24, r28
    2d3a:	9d 1f       	adc	r25, r29
    2d3c:	d0 d0       	rcall	.+416    	; 0x2ede <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2d3e:	c0 0f       	add	r28, r16
    2d40:	d1 1f       	adc	r29, r17
    2d42:	c0 93 45 23 	sts	0x2345, r28	; 0x802345 <udd_ctrl_payload_nb_trans>
    2d46:	d0 93 46 23 	sts	0x2346, r29	; 0x802346 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2d4a:	08 30       	cpi	r16, 0x08	; 8
    2d4c:	11 05       	cpc	r17, r1
    2d4e:	69 f4       	brne	.+26     	; 0x2d6a <__vector_126+0x13e>
    2d50:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_ctrl_prev_payload_nb_trans>
    2d54:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_ctrl_prev_payload_nb_trans+0x1>
    2d58:	8c 0f       	add	r24, r28
    2d5a:	9d 1f       	adc	r25, r29
    2d5c:	20 91 c7 23 	lds	r18, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x6>
    2d60:	30 91 c8 23 	lds	r19, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x7>
    2d64:	82 17       	cp	r24, r18
    2d66:	93 07       	cpc	r25, r19
    2d68:	80 f0       	brcs	.+32     	; 0x2d8a <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2d6a:	e1 ec       	ldi	r30, 0xC1	; 193
    2d6c:	f3 e2       	ldi	r31, 0x23	; 35
    2d6e:	c2 87       	std	Z+10, r28	; 0x0a
    2d70:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2d72:	06 84       	ldd	r0, Z+14	; 0x0e
    2d74:	f7 85       	ldd	r31, Z+15	; 0x0f
    2d76:	e0 2d       	mov	r30, r0
    2d78:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2d7a:	29 f0       	breq	.+10     	; 0x2d86 <__vector_126+0x15a>
    2d7c:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2d7e:	81 11       	cpse	r24, r1
    2d80:	02 c0       	rjmp	.+4      	; 0x2d86 <__vector_126+0x15a>
    2d82:	e3 d8       	rcall	.-3642   	; 0x1f4a <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2d84:	34 c0       	rjmp	.+104    	; 0x2dee <__vector_126+0x1c2>
    2d86:	ef d8       	rcall	.-3618   	; 0x1f66 <udd_ctrl_send_zlp_in>
    2d88:	32 c0       	rjmp	.+100    	; 0x2dee <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2d8a:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0xa>
    2d8e:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0xb>
    2d92:	c8 17       	cp	r28, r24
    2d94:	d9 07       	cpc	r29, r25
    2d96:	f9 f4       	brne	.+62     	; 0x2dd6 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2d98:	e0 91 cf 23 	lds	r30, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0xe>
    2d9c:	f0 91 d0 23 	lds	r31, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0xf>
    2da0:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2da2:	11 f4       	brne	.+4      	; 0x2da8 <__vector_126+0x17c>
    2da4:	d2 d8       	rcall	.-3676   	; 0x1f4a <udd_ctrl_stall_data>
    2da6:	23 c0       	rjmp	.+70     	; 0x2dee <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2da8:	19 95       	eicall
    2daa:	81 11       	cpse	r24, r1
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2dae:	cd d8       	rcall	.-3686   	; 0x1f4a <udd_ctrl_stall_data>
    2db0:	1e c0       	rjmp	.+60     	; 0x2dee <__vector_126+0x1c2>
    2db2:	20 91 47 23 	lds	r18, 0x2347	; 0x802347 <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2db6:	30 91 48 23 	lds	r19, 0x2348	; 0x802348 <udd_ctrl_prev_payload_nb_trans+0x1>
    2dba:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <udd_ctrl_payload_nb_trans>
    2dbe:	90 91 46 23 	lds	r25, 0x2346	; 0x802346 <udd_ctrl_payload_nb_trans+0x1>
    2dc2:	82 0f       	add	r24, r18
    2dc4:	93 1f       	adc	r25, r19
    2dc6:	80 93 47 23 	sts	0x2347, r24	; 0x802347 <udd_ctrl_prev_payload_nb_trans>
    2dca:	90 93 48 23 	sts	0x2348, r25	; 0x802348 <udd_ctrl_prev_payload_nb_trans+0x1>
    2dce:	10 92 45 23 	sts	0x2345, r1	; 0x802345 <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2dd2:	10 92 46 23 	sts	0x2346, r1	; 0x802346 <udd_ctrl_payload_nb_trans+0x1>
    2dd6:	e0 e6       	ldi	r30, 0x60	; 96
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2dd8:	f3 e2       	ldi	r31, 0x23	; 35
    2dda:	02 e0       	ldi	r16, 0x02	; 2
    2ddc:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2dde:	00 e2       	ldi	r16, 0x20	; 32
    2de0:	06 93       	lac	Z, r16
    2de2:	05 c0       	rjmp	.+10     	; 0x2dee <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2de4:	80 38       	cpi	r24, 0x80	; 128
    2de6:	11 f4       	brne	.+4      	; 0x2dec <__vector_126+0x1c0>
		udd_ctrl_in_sent();
    2de8:	d4 d8       	rcall	.-3672   	; 0x1f92 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2dea:	01 c0       	rjmp	.+2      	; 0x2dee <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2dec:	f2 d9       	rcall	.-3100   	; 0x21d2 <udd_ep_trans_complet>
    2dee:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2df0:	ef 91       	pop	r30
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	bf 91       	pop	r27
    2df8:	af 91       	pop	r26
    2dfa:	9f 91       	pop	r25
    2dfc:	8f 91       	pop	r24
    2dfe:	7f 91       	pop	r23
    2e00:	6f 91       	pop	r22
    2e02:	5f 91       	pop	r21
    2e04:	4f 91       	pop	r20
    2e06:	3f 91       	pop	r19
    2e08:	2f 91       	pop	r18
    2e0a:	1f 91       	pop	r17
    2e0c:	0f 91       	pop	r16
    2e0e:	0f 90       	pop	r0
    2e10:	0b be       	out	0x3b, r0	; 59
    2e12:	0f 90       	pop	r0
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	0f 90       	pop	r0
    2e18:	1f 90       	pop	r1
    2e1a:	18 95       	reti

00002e1c <main>:

static const uint8_t sequence = 8;

int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    2e1c:	87 e0       	ldi	r24, 0x07	; 7
    2e1e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    2e22:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2e24:	eb eb       	ldi	r30, 0xBB	; 187
    2e26:	f3 e2       	ldi	r31, 0x23	; 35
    2e28:	10 82       	st	Z, r1
    2e2a:	11 82       	std	Z+1, r1	; 0x01
    2e2c:	12 82       	std	Z+2, r1	; 0x02
    2e2e:	13 82       	std	Z+3, r1	; 0x03
    2e30:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    2e36:	0e 94 ac 08 	call	0x1158	; 0x1158 <sysclk_init>

	io_ui_process(); // initializes board i/o pins
    2e3a:	0e 94 9c 08 	call	0x1138	; 0x1138 <io_ui_process>

	udc_start();               // starts USB device controller
    2e3e:	0e 94 3e 0c 	call	0x187c	; 0x187c <udc_start>

	startup_ui_process(sequence); // pick preferred sequence (1-5)
    2e42:	88 e0       	ldi	r24, 0x08	; 8
    2e44:	0e 94 9e 08 	call	0x113c	; 0x113c <startup_ui_process>
    2e48:	ff cf       	rjmp	.-2      	; 0x2e48 <main+0x2c>

00002e4a <main_suspend_action>:
}

/* --------------------------------------------------------------------- */
/* -------------------------------- USB -------------------------------- */
/* --------------------------------------------------------------------- */
void main_suspend_action(void) { }
    2e4a:	08 95       	ret

00002e4c <main_resume_action>:
void main_resume_action(void) { }
    2e4c:	08 95       	ret

00002e4e <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    2e4e:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <main_b_kbd_enable>
    2e52:	88 23       	and	r24, r24
    2e54:	81 f0       	breq	.+32     	; 0x2e76 <main_sof_action+0x28>
	return;
	kbd_ui_process();
    2e56:	0e 94 a2 08 	call	0x1144	; 0x1144 <kbd_ui_process>

	if (!main_b_generic_enable)
    2e5a:	80 91 b6 23 	lds	r24, 0x23B6	; 0x8023b6 <main_b_generic_enable>
    2e5e:	88 23       	and	r24, r24
    2e60:	51 f0       	breq	.+20     	; 0x2e76 <main_sof_action+0x28>
		return;
	jstk_ui_process();
    2e62:	0e 94 a0 08 	call	0x1140	; 0x1140 <jstk_ui_process>

	if (!main_b_led_enable)
    2e66:	80 91 b5 23 	lds	r24, 0x23B5	; 0x8023b5 <main_b_led_enable>
    2e6a:	88 23       	and	r24, r24
    2e6c:	21 f0       	breq	.+8      	; 0x2e76 <main_sof_action+0x28>
		return;
	led_ui_process();
    2e6e:	0e 94 a8 08 	call	0x1150	; 0x1150 <led_ui_process>

	status_ui_process();
    2e72:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <status_ui_process>
    2e76:	08 95       	ret

00002e78 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2e78:	08 95       	ret

00002e7a <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2e7a:	08 95       	ret

00002e7c <main_kbd_enable>:

/* --------------------------------------------------------------------- */
/* ----------------------------- keyboard ------------------------------ */
/* --------------------------------------------------------------------- */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	80 93 b7 23 	sts	0x23B7, r24	; 0x8023b7 <main_b_kbd_enable>
	return true;
}
    2e82:	08 95       	ret

00002e84 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2e84:	10 92 b7 23 	sts	0x23B7, r1	; 0x8023b7 <main_b_kbd_enable>
    2e88:	08 95       	ret

00002e8a <main_generic_enable>:

/* --------------------------------------------------------------------- */
/* ----------------------------- joystick ------------------------------ */
/* --------------------------------------------------------------------- */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	80 93 b6 23 	sts	0x23B6, r24	; 0x8023b6 <main_b_generic_enable>
	return true;
}
    2e90:	08 95       	ret

00002e92 <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2e92:	10 92 b6 23 	sts	0x23B6, r1	; 0x8023b6 <main_b_generic_enable>
    2e96:	08 95       	ret

00002e98 <main_led_enable>:

/* --------------------------------------------------------------------- */
/* ------------------------------- LEDs -------------------------------- */
/* --------------------------------------------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	80 93 b5 23 	sts	0x23B5, r24	; 0x8023b5 <main_b_led_enable>
	return true;
}
    2e9e:	08 95       	ret

00002ea0 <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2ea0:	10 92 b5 23 	sts	0x23B5, r1	; 0x8023b5 <main_b_led_enable>
    2ea4:	08 95       	ret

00002ea6 <__udivmodhi4>:
    2ea6:	aa 1b       	sub	r26, r26
    2ea8:	bb 1b       	sub	r27, r27
    2eaa:	51 e1       	ldi	r21, 0x11	; 17
    2eac:	07 c0       	rjmp	.+14     	; 0x2ebc <__udivmodhi4_ep>

00002eae <__udivmodhi4_loop>:
    2eae:	aa 1f       	adc	r26, r26
    2eb0:	bb 1f       	adc	r27, r27
    2eb2:	a6 17       	cp	r26, r22
    2eb4:	b7 07       	cpc	r27, r23
    2eb6:	10 f0       	brcs	.+4      	; 0x2ebc <__udivmodhi4_ep>
    2eb8:	a6 1b       	sub	r26, r22
    2eba:	b7 0b       	sbc	r27, r23

00002ebc <__udivmodhi4_ep>:
    2ebc:	88 1f       	adc	r24, r24
    2ebe:	99 1f       	adc	r25, r25
    2ec0:	5a 95       	dec	r21
    2ec2:	a9 f7       	brne	.-22     	; 0x2eae <__udivmodhi4_loop>
    2ec4:	80 95       	com	r24
    2ec6:	90 95       	com	r25
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	08 95       	ret

00002ece <__tablejump2__>:
    2ece:	ee 0f       	add	r30, r30
    2ed0:	ff 1f       	adc	r31, r31
    2ed2:	88 1f       	adc	r24, r24
    2ed4:	8b bf       	out	0x3b, r24	; 59
    2ed6:	07 90       	elpm	r0, Z+
    2ed8:	f6 91       	elpm	r31, Z
    2eda:	e0 2d       	mov	r30, r0
    2edc:	19 94       	eijmp

00002ede <memcpy>:
    2ede:	fb 01       	movw	r30, r22
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	02 c0       	rjmp	.+4      	; 0x2ee8 <memcpy+0xa>
    2ee4:	01 90       	ld	r0, Z+
    2ee6:	0d 92       	st	X+, r0
    2ee8:	41 50       	subi	r20, 0x01	; 1
    2eea:	50 40       	sbci	r21, 0x00	; 0
    2eec:	d8 f7       	brcc	.-10     	; 0x2ee4 <memcpy+0x6>
    2eee:	08 95       	ret

00002ef0 <_exit>:
    2ef0:	f8 94       	cli

00002ef2 <__stop_program>:
    2ef2:	ff cf       	rjmp	.-2      	; 0x2ef2 <__stop_program>
