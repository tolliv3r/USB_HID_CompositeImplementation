
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000192  00802000  00002b34  00002bc8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000268  00802192  00802192  00002d5a  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002d5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005d8  00000000  00000000  00002dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b33d  00000000  00000000  000033a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000535d  00000000  00000000  0000e6e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009a69  00000000  00000000  00013a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d70  00000000  00000000  0001d4ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036ea7  00000000  00000000  0001e21c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003175  00000000  00000000  000550c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000640  00000000  00000000  00058238  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd8d  00000000  00000000  00058878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__vector_125>
     1f8:	0c 94 35 14 	jmp	0x286a	; 0x286a <__vector_126>
     1fc:	ab 04       	cpc	r10, r11
     1fe:	ea 04       	cpc	r14, r10
     200:	a1 04       	cpc	r10, r1
     202:	ec 04       	cpc	r14, r12
     204:	a3 04       	cpc	r10, r3
     206:	a5 04       	cpc	r10, r5
     208:	a7 04       	cpc	r10, r7
     20a:	a9 04       	cpc	r10, r9
     20c:	ab 04       	cpc	r10, r11
     20e:	64 0e       	add	r6, r20
     210:	67 0e       	add	r6, r23
     212:	6a 0e       	add	r6, r26
     214:	6d 0e       	add	r6, r29
     216:	70 0e       	add	r7, r16
     218:	73 0e       	add	r7, r19
     21a:	76 0e       	add	r7, r22

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	e4 e3       	ldi	r30, 0x34	; 52
     234:	fb e2       	ldi	r31, 0x2B	; 43
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a2 39       	cpi	r26, 0x92	; 146
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a2 e9       	ldi	r26, 0x92	; 146
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	aa 3f       	cpi	r26, 0xFA	; 250
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <main>
     25a:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     264:	30 91 ec 23 	lds	r19, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x2>
     268:	20 91 ed 23 	lds	r18, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     278:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
     27c:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
     280:	02 97       	sbiw	r24, 0x02	; 2
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     284:	ea ee       	ldi	r30, 0xEA	; 234
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	82 e9       	ldi	r24, 0x92	; 146
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     298:	8b e7       	ldi	r24, 0x7B	; 123
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
	}
	return false;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_in_sent>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep) {
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_led_b_report_in_free = true;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <udi_hid_led_b_report_in_free>
     2b6:	08 95       	ret

000002b8 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2bc:	0b e7       	ldi	r16, 0x7B	; 123
     2be:	11 e0       	ldi	r17, 0x01	; 1
     2c0:	22 e0       	ldi	r18, 0x02	; 2
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	42 e9       	ldi	r20, 0x92	; 146
     2c6:	51 e2       	ldi	r21, 0x21	; 33
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	0e 94 25 12 	call	0x244a	; 0x244a <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
}
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	08 95       	ret

000002d6 <udi_hid_led_enable>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep);

/* --------------------------------------------------------------------- */

bool udi_hid_led_enable(void) {
     2d6:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d8:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2dc:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <udi_hid_led_protocol>
	udi_hid_led_b_report_in_free = true;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <udi_hid_led_b_report_in_free>

	if(!udi_hid_led_report_out_enable())
     2e6:	e8 df       	rcall	.-48     	; 0x2b8 <udi_hid_led_report_out_enable>
     2e8:	c8 2f       	mov	r28, r24
     2ea:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2ec:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <main_led_enable>
	return true;
}
     2f0:	8c 2f       	mov	r24, r28
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2f6:	81 11       	cpse	r24, r1
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <udi_hid_led_report_out_received+0x10>
     2fa:	62 30       	cpi	r22, 0x02	; 2
     2fc:	71 05       	cpc	r23, r1
     2fe:	19 f4       	brne	.+6      	; 0x306 <udi_hid_led_report_out_received+0x10>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     300:	82 e9       	ldi	r24, 0x92	; 146
     302:	91 e2       	ldi	r25, 0x21	; 33
     304:	f6 d4       	rcall	.+2540   	; 0xcf2 <led_ui_report>
	}
	udi_hid_led_report_out_enable();
     306:	d8 cf       	rjmp	.-80     	; 0x2b8 <udi_hid_led_report_out_enable>
     308:	08 95       	ret

0000030a <udi_hid_led_disable>:
     30a:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <main_led_disable>
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     30e:	08 95       	ret

00000310 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     310:	22 e3       	ldi	r18, 0x32	; 50
     312:	31 e0       	ldi	r19, 0x01	; 1
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e2       	ldi	r21, 0x20	; 32
     318:	6e e9       	ldi	r22, 0x9E	; 158
     31a:	71 e2       	ldi	r23, 0x21	; 33
     31c:	80 ea       	ldi	r24, 0xA0	; 160
     31e:	91 e2       	ldi	r25, 0x21	; 33
     320:	3f c7       	rjmp	.+3710   	; 0x11a0 <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     322:	08 95       	ret

00000324 <udi_hid_led_send_report_in>:
		              udi_hid_led_report_out_received);
}


bool udi_hid_led_send_report_in(uint8_t *data)
{
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	fc 01       	movw	r30, r24
	if (!udi_hid_led_b_report_in_free)
     336:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <udi_hid_led_b_report_in_free>
     33a:	88 23       	and	r24, r24
     33c:	19 f1       	breq	.+70     	; 0x384 <udi_hid_led_send_report_in+0x60>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     33e:	8f b7       	in	r24, 0x3f	; 63
     340:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     342:	f8 94       	cli
	return flags;
     344:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();

	memset(&udi_hid_led_report_in,
     346:	87 e0       	ldi	r24, 0x07	; 7
     348:	24 e9       	ldi	r18, 0x94	; 148
     34a:	31 e2       	ldi	r19, 0x21	; 33
     34c:	d9 01       	movw	r26, r18
     34e:	1d 92       	st	X+, r1
     350:	8a 95       	dec	r24
     352:	e9 f7       	brne	.-6      	; 0x34e <udi_hid_led_send_report_in+0x2a>
		   0,
		   sizeof(udi_hid_led_report_in));
	memcpy(&udi_hid_led_report_in,
     354:	87 e0       	ldi	r24, 0x07	; 7
     356:	d9 01       	movw	r26, r18
     358:	01 90       	ld	r0, Z+
     35a:	0d 92       	st	X+, r0
     35c:	8a 95       	dec	r24
     35e:	e1 f7       	brne	.-8      	; 0x358 <udi_hid_led_send_report_in+0x34>
		   data,
		   sizeof(udi_hid_led_report_in));
	udi_hid_led_b_report_in_free = !udd_ep_run(UDI_HID_LED_EP_IN,
     360:	08 e5       	ldi	r16, 0x58	; 88
     362:	11 e0       	ldi	r17, 0x01	; 1
     364:	27 e0       	ldi	r18, 0x07	; 7
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	44 e9       	ldi	r20, 0x94	; 148
     36a:	51 e2       	ldi	r21, 0x21	; 33
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	84 e8       	ldi	r24, 0x84	; 132
     370:	0e 94 25 12 	call	0x244a	; 0x244a <udd_ep_run>
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	89 27       	eor	r24, r25
     378:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <udi_hid_led_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     37c:	ff be       	out	0x3f, r15	; 63
		                                       false,
		                                       (uint8_t *) & udi_hid_led_report_in,
		                                       sizeof(udi_hid_led_report_in),
		                                       udi_hid_led_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_led_b_report_in_free;
     37e:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <udi_hid_led_b_report_in_free>
     382:	89 27       	eor	r24, r25
}
     384:	0f 90       	pop	r0
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	08 95       	ret

00000392 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     392:	e0 e0       	ldi	r30, 0x00	; 0
     394:	f6 e0       	ldi	r31, 0x06	; 6
     396:	9f ef       	ldi	r25, 0xFF	; 255
     398:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     39a:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     39c:	e0 e2       	ldi	r30, 0x20	; 32
     39e:	f6 e0       	ldi	r31, 0x06	; 6
     3a0:	3f e3       	ldi	r19, 0x3F	; 63
     3a2:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3a4:	88 e1       	ldi	r24, 0x18	; 24
     3a6:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3a8:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3aa:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3ac:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3ae:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3b0:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     3b2:	20 ec       	ldi	r18, 0xC0	; 192
     3b4:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     3b6:	40 e4       	ldi	r20, 0x40	; 64
     3b8:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     3ba:	40 e8       	ldi	r20, 0x80	; 128
     3bc:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     3be:	e0 e4       	ldi	r30, 0x40	; 64
     3c0:	f6 e0       	ldi	r31, 0x06	; 6
     3c2:	4c ef       	ldi	r20, 0xFC	; 252
     3c4:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3c6:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3c8:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ca:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3cc:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ce:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d0:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     3d2:	43 e0       	ldi	r20, 0x03	; 3
     3d4:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     3d6:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     3d8:	e0 e6       	ldi	r30, 0x60	; 96
     3da:	f6 e0       	ldi	r31, 0x06	; 6
     3dc:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3de:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e0:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e2:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e4:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e6:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e8:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     3ea:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     3ec:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     3ee:	e0 e8       	ldi	r30, 0x80	; 128
     3f0:	f6 e0       	ldi	r31, 0x06	; 6
     3f2:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f4:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f6:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f8:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3fa:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3fc:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3fe:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     400:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     402:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     404:	e0 ea       	ldi	r30, 0xA0	; 160
     406:	f6 e0       	ldi	r31, 0x06	; 6
     408:	90 ef       	ldi	r25, 0xF0	; 240
     40a:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40c:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40e:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     410:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     412:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     414:	8f e0       	ldi	r24, 0x0F	; 15
     416:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     418:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     41a:	fa d2       	rcall	.+1524   	; 0xa10 <led_init>
	keypad_init();
     41c:	2a d1       	rcall	.+596    	; 0x672 <keypad_init>
	idle_start();
     41e:	a0 c3       	rjmp	.+1856   	; 0xb60 <idle_start>
     420:	08 95       	ret

00000422 <jstk_readVertIndex>:
     422:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     426:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	92 2b       	or	r25, r18
     42e:	96 95       	lsr	r25
     430:	87 95       	ror	r24
     432:	96 95       	lsr	r25
     434:	87 95       	ror	r24
     436:	bc 01       	movw	r22, r24
     438:	7f 70       	andi	r23, 0x0F	; 15
     43a:	80 ff       	sbrs	r24, 0
     43c:	17 c0       	rjmp	.+46     	; 0x46c <jstk_readVertIndex+0x4a>
     43e:	21 e0       	ldi	r18, 0x01	; 1
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	e1 e0       	ldi	r30, 0x01	; 1
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	82 2f       	mov	r24, r18
     448:	af 01       	movw	r20, r30
     44a:	02 2e       	mov	r0, r18
     44c:	02 c0       	rjmp	.+4      	; 0x452 <jstk_readVertIndex+0x30>
     44e:	44 0f       	add	r20, r20
     450:	55 1f       	adc	r21, r21
     452:	0a 94       	dec	r0
     454:	e2 f7       	brpl	.-8      	; 0x44e <jstk_readVertIndex+0x2c>
     456:	46 23       	and	r20, r22
     458:	57 23       	and	r21, r23
     45a:	45 2b       	or	r20, r21
     45c:	41 f0       	breq	.+16     	; 0x46e <jstk_readVertIndex+0x4c>
     45e:	2f 5f       	subi	r18, 0xFF	; 255
     460:	3f 4f       	sbci	r19, 0xFF	; 255
     462:	2c 30       	cpi	r18, 0x0C	; 12
     464:	31 05       	cpc	r19, r1
     466:	79 f7       	brne	.-34     	; 0x446 <jstk_readVertIndex+0x24>
     468:	8f ef       	ldi	r24, 0xFF	; 255
     46a:	08 95       	ret
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	08 95       	ret

00000470 <jstk_readHoriIndex>:
     470:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     474:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	92 2b       	or	r25, r18
     47c:	bc 01       	movw	r22, r24
     47e:	7f 70       	andi	r23, 0x0F	; 15
     480:	80 ff       	sbrs	r24, 0
     482:	17 c0       	rjmp	.+46     	; 0x4b2 <jstk_readHoriIndex+0x42>
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	e1 e0       	ldi	r30, 0x01	; 1
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	82 2f       	mov	r24, r18
     48e:	af 01       	movw	r20, r30
     490:	02 2e       	mov	r0, r18
     492:	02 c0       	rjmp	.+4      	; 0x498 <jstk_readHoriIndex+0x28>
     494:	44 0f       	add	r20, r20
     496:	55 1f       	adc	r21, r21
     498:	0a 94       	dec	r0
     49a:	e2 f7       	brpl	.-8      	; 0x494 <jstk_readHoriIndex+0x24>
     49c:	46 23       	and	r20, r22
     49e:	57 23       	and	r21, r23
     4a0:	45 2b       	or	r20, r21
     4a2:	41 f0       	breq	.+16     	; 0x4b4 <jstk_readHoriIndex+0x44>
     4a4:	2f 5f       	subi	r18, 0xFF	; 255
     4a6:	3f 4f       	sbci	r19, 0xFF	; 255
     4a8:	2c 30       	cpi	r18, 0x0C	; 12
     4aa:	31 05       	cpc	r19, r1
     4ac:	79 f7       	brne	.-34     	; 0x48c <jstk_readHoriIndex+0x1c>
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	08 95       	ret
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	08 95       	ret

000004b6 <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     4b6:	88 23       	and	r24, r24
     4b8:	f4 f1       	brlt	.+124    	; 0x536 <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     4ba:	9b ef       	ldi	r25, 0xFB	; 251
     4bc:	98 0f       	add	r25, r24
     4be:	92 30       	cpi	r25, 0x02	; 2
     4c0:	e0 f1       	brcs	.+120    	; 0x53a <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     4c2:	85 30       	cpi	r24, 0x05	; 5
     4c4:	34 f4       	brge	.+12     	; 0x4d2 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4c6:	95 e0       	ldi	r25, 0x05	; 5
     4c8:	98 1b       	sub	r25, r24
     4ca:	92 30       	cpi	r25, 0x02	; 2
     4cc:	08 f0       	brcs	.+2      	; 0x4d0 <jstk_ledMask+0x1a>
     4ce:	42 c0       	rjmp	.+132    	; 0x554 <jstk_ledMask+0x9e>
     4d0:	36 c0       	rjmp	.+108    	; 0x53e <jstk_ledMask+0x88>
     4d2:	9a ef       	ldi	r25, 0xFA	; 250
     4d4:	98 0f       	add	r25, r24
     4d6:	92 30       	cpi	r25, 0x02	; 2
     4d8:	b0 f5       	brcc	.+108    	; 0x546 <jstk_ledMask+0x90>
     4da:	31 c0       	rjmp	.+98     	; 0x53e <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4dc:	62 e0       	ldi	r22, 0x02	; 2
     4de:	23 e0       	ldi	r18, 0x03	; 3
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     4e6:	e1 e0       	ldi	r30, 0x01	; 1
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	af 01       	movw	r20, r30
     4ec:	02 2e       	mov	r0, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <jstk_ledMask+0x3e>
     4f0:	44 0f       	add	r20, r20
     4f2:	55 1f       	adc	r21, r21
     4f4:	0a 94       	dec	r0
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <jstk_ledMask+0x3a>
     4f8:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     4fa:	9f 5f       	subi	r25, 0xFF	; 255
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	31 09       	sbc	r19, r1
     500:	96 17       	cp	r25, r22
     502:	98 f3       	brcs	.-26     	; 0x4ea <jstk_ledMask+0x34>
     504:	08 95       	ret
     506:	81 50       	subi	r24, 0x01	; 1
     508:	48 2f       	mov	r20, r24
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	4b 5f       	subi	r20, 0xFB	; 251
     50e:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     510:	24 e0       	ldi	r18, 0x04	; 4
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     516:	e1 e0       	ldi	r30, 0x01	; 1
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	bf 01       	movw	r22, r30
     51c:	02 2e       	mov	r0, r18
     51e:	02 c0       	rjmp	.+4      	; 0x524 <jstk_ledMask+0x6e>
     520:	66 0f       	add	r22, r22
     522:	77 1f       	adc	r23, r23
     524:	0a 94       	dec	r0
     526:	e2 f7       	brpl	.-8      	; 0x520 <jstk_ledMask+0x6a>
     528:	86 2b       	or	r24, r22
     52a:	2f 5f       	subi	r18, 0xFF	; 255
     52c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     52e:	24 17       	cp	r18, r20
     530:	35 07       	cpc	r19, r21
     532:	99 f7       	brne	.-26     	; 0x51a <jstk_ledMask+0x64>
     534:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     53a:	88 e1       	ldi	r24, 0x18	; 24
     53c:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     53e:	85 30       	cpi	r24, 0x05	; 5
     540:	6c f2       	brlt	.-102    	; 0x4dc <jstk_ledMask+0x26>
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	e0 cf       	rjmp	.-64     	; 0x506 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     546:	85 50       	subi	r24, 0x05	; 5
     548:	85 30       	cpi	r24, 0x05	; 5
     54a:	08 f0       	brcs	.+2      	; 0x54e <jstk_ledMask+0x98>
     54c:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     54e:	81 11       	cpse	r24, r1
     550:	da cf       	rjmp	.-76     	; 0x506 <jstk_ledMask+0x50>
     552:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     554:	66 e0       	ldi	r22, 0x06	; 6
     556:	68 1b       	sub	r22, r24
     558:	65 30       	cpi	r22, 0x05	; 5
     55a:	08 f0       	brcs	.+2      	; 0x55e <jstk_ledMask+0xa8>
     55c:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     55e:	61 11       	cpse	r22, r1
     560:	be cf       	rjmp	.-132    	; 0x4de <jstk_ledMask+0x28>
     562:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     564:	08 95       	ret

00000566 <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     566:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     568:	5c df       	rcall	.-328    	; 0x422 <jstk_readVertIndex>
     56a:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     56c:	81 df       	rcall	.-254    	; 0x470 <jstk_readHoriIndex>
     56e:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     570:	24 f4       	brge	.+8      	; 0x57a <jstk_readMask+0x14>
     572:	88 23       	and	r24, r24
     574:	c4 f0       	brlt	.+48     	; 0x5a6 <jstk_readMask+0x40>
     576:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     578:	09 c0       	rjmp	.+18     	; 0x58c <jstk_readMask+0x26>
     57a:	c6 30       	cpi	r28, 0x06	; 6
     57c:	1c f0       	brlt	.+6      	; 0x584 <jstk_readMask+0x1e>
     57e:	9b ef       	ldi	r25, 0xFB	; 251
     580:	9c 0f       	add	r25, r28
     582:	02 c0       	rjmp	.+4      	; 0x588 <jstk_readMask+0x22>
     584:	95 e0       	ldi	r25, 0x05	; 5
     586:	9c 1b       	sub	r25, r28
     588:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     58a:	54 f0       	brlt	.+20     	; 0x5a0 <jstk_readMask+0x3a>
     58c:	86 30       	cpi	r24, 0x06	; 6
     58e:	1c f0       	brlt	.+6      	; 0x596 <jstk_readMask+0x30>
     590:	2b ef       	ldi	r18, 0xFB	; 251
     592:	28 0f       	add	r18, r24
     594:	02 c0       	rjmp	.+4      	; 0x59a <jstk_readMask+0x34>
     596:	25 e0       	ldi	r18, 0x05	; 5
     598:	28 1b       	sub	r18, r24
     59a:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     59c:	08 f4       	brcc	.+2      	; 0x5a0 <jstk_readMask+0x3a>
     59e:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     5a0:	8c 2f       	mov	r24, r28
     5a2:	89 df       	rcall	.-238    	; 0x4b6 <jstk_ledMask>
     5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <jstk_readMask+0x42>
     5a6:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     5a8:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     5aa:	08 95       	ret

000005ac <jstk_usbTask>:
     5ac:	61 df       	rcall	.-318    	; 0x470 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5ae:	88 23       	and	r24, r24
     5b0:	3c f0       	brlt	.+14     	; 0x5c0 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5b2:	e8 2f       	mov	r30, r24
     5b4:	88 0f       	add	r24, r24
     5b6:	ff 0b       	sbc	r31, r31
     5b8:	ee 58       	subi	r30, 0x8E	; 142
     5ba:	fe 4d       	sbci	r31, 0xDE	; 222
     5bc:	80 81       	ld	r24, Z
     5be:	01 c0       	rjmp	.+2      	; 0x5c2 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5c0:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     5c2:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5c6:	2d df       	rcall	.-422    	; 0x422 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5c8:	88 23       	and	r24, r24
     5ca:	3c f0       	brlt	.+14     	; 0x5da <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5cc:	e8 2f       	mov	r30, r24
     5ce:	88 0f       	add	r24, r24
     5d0:	ff 0b       	sbc	r31, r31
     5d2:	ee 58       	subi	r30, 0x8E	; 142
     5d4:	fe 4d       	sbci	r31, 0xDE	; 222
     5d6:	80 81       	ld	r24, Z
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5da:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5dc:	e2 ea       	ldi	r30, 0xA2	; 162
     5de:	f1 e2       	ldi	r31, 0x21	; 33
     5e0:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     5e2:	20 81       	ld	r18, Z
     5e4:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     5e8:	29 13       	cpse	r18, r25
     5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <jstk_usbTask+0x48>
     5ec:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     5f0:	98 17       	cp	r25, r24
     5f2:	71 f0       	breq	.+28     	; 0x610 <jstk_usbTask+0x64>
        if (udi_hid_joystick_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     5f4:	82 ea       	ldi	r24, 0xA2	; 162
     5f6:	91 e2       	ldi	r25, 0x21	; 33
     5f8:	e2 d4       	rcall	.+2500   	; 0xfbe <udi_hid_joystick_send_report_in>
     5fa:	88 23       	and	r24, r24
     5fc:	49 f0       	breq	.+18     	; 0x610 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     5fe:	e6 e2       	ldi	r30, 0x26	; 38
     600:	f0 e2       	ldi	r31, 0x20	; 32
     602:	a2 ea       	ldi	r26, 0xA2	; 162
     604:	b1 e2       	ldi	r27, 0x21	; 33
     606:	8c 91       	ld	r24, X
     608:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     60a:	11 96       	adiw	r26, 0x01	; 1
     60c:	8c 91       	ld	r24, X
     60e:	81 83       	std	Z+1, r24	; 0x01
     610:	08 95       	ret

00000612 <jstk_getMap>:
        }
    }
}

uint32_t jstk_getMap(void) {
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
 * Similar to sweeping your fingers across the keys of a piano.
 */

// vertical slider
static uint16_t jstk_readVertRaw(void) {
    uint8_t jstk_c = PORTC.IN;
     616:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>
    uint8_t jstk_d = PORTD.IN;
     61a:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
    uint16_t jstk_w = ((uint16_t)jstk_d << 8) | jstk_c; // build 16 bit word
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	92 2b       	or	r25, r18
    return idx;
}

// horizontal slider
static uint16_t jstk_readHoriRaw(void) {
    uint8_t jstk_e = PORTE.IN;
     622:	40 91 88 06 	lds	r20, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
    uint8_t jstk_b = PORTB.IN;
     626:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
    // invert & mask (1 = pressed, 0 = released)
    uint16_t mapV = (~rawV) & SLIDER_MASK;
    uint16_t mapH = (~rawH) & SLIDER_MASK;

    // pack vertical into 0-11 bits, horizontal in 12-23 bits
    return ((uint32_t)mapH << SLIDER_COUNT) | mapV; // 24-31 bits unused
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	52 2b       	or	r21, r18
     62e:	40 95       	com	r20
     630:	50 95       	com	r21
     632:	5f 70       	andi	r21, 0x0F	; 15
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	03 2e       	mov	r0, r19
     63a:	3c e0       	ldi	r19, 0x0C	; 12
     63c:	44 0f       	add	r20, r20
     63e:	55 1f       	adc	r21, r21
     640:	66 1f       	adc	r22, r22
     642:	77 1f       	adc	r23, r23
     644:	3a 95       	dec	r19
     646:	d1 f7       	brne	.-12     	; 0x63c <jstk_getMap+0x2a>
     648:	30 2d       	mov	r19, r0
     64a:	96 95       	lsr	r25
     64c:	87 95       	ror	r24
     64e:	96 95       	lsr	r25
     650:	87 95       	ror	r24
     652:	80 95       	com	r24
     654:	90 95       	com	r25
     656:	9f 70       	andi	r25, 0x0F	; 15
     658:	a0 e0       	ldi	r26, 0x00	; 0
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	8a 01       	movw	r16, r20
     65e:	9b 01       	movw	r18, r22
     660:	08 2b       	or	r16, r24
     662:	19 2b       	or	r17, r25
     664:	2a 2b       	or	r18, r26
     666:	3b 2b       	or	r19, r27
     668:	c9 01       	movw	r24, r18
     66a:	b8 01       	movw	r22, r16
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	08 95       	ret

00000672 <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     672:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <kpd_keyPressed>
     676:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <kpd_currState>
     67a:	10 92 bd 21 	sts	0x21BD, r1	; 0x8021bd <kpd_prevState>
     67e:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <kpd_exitTestMode>
     682:	10 92 c0 21 	sts	0x21C0, r1	; 0x8021c0 <kpd_rowVal>
     686:	10 92 be 21 	sts	0x21BE, r1	; 0x8021be <kpd_code>
     68a:	e6 ec       	ldi	r30, 0xC6	; 198
     68c:	f1 e2       	ldi	r31, 0x21	; 33
     68e:	81 e6       	ldi	r24, 0x61	; 97
     690:	80 83       	st	Z, r24
     692:	80 e6       	ldi	r24, 0x60	; 96
     694:	81 83       	std	Z+1, r24	; 0x01
     696:	12 82       	std	Z+2, r1	; 0x02
     698:	13 82       	std	Z+3, r1	; 0x03
     69a:	8f e5       	ldi	r24, 0x5F	; 95
     69c:	84 83       	std	Z+4, r24	; 0x04
     69e:	8e e5       	ldi	r24, 0x5E	; 94
     6a0:	85 83       	std	Z+5, r24	; 0x05
     6a2:	16 82       	std	Z+6, r1	; 0x06
     6a4:	17 82       	std	Z+7, r1	; 0x07
     6a6:	8d e5       	ldi	r24, 0x5D	; 93
     6a8:	80 87       	std	Z+8, r24	; 0x08
     6aa:	11 86       	std	Z+9, r1	; 0x09
     6ac:	12 86       	std	Z+10, r1	; 0x0a
     6ae:	13 86       	std	Z+11, r1	; 0x0b
     6b0:	14 86       	std	Z+12, r1	; 0x0c
     6b2:	15 86       	std	Z+13, r1	; 0x0d
     6b4:	89 e5       	ldi	r24, 0x59	; 89
     6b6:	86 87       	std	Z+14, r24	; 0x0e
     6b8:	8b e5       	ldi	r24, 0x5B	; 91
     6ba:	87 87       	std	Z+15, r24	; 0x0f
     6bc:	10 8a       	std	Z+16, r1	; 0x10
     6be:	11 8a       	std	Z+17, r1	; 0x11
     6c0:	8a e5       	ldi	r24, 0x5A	; 90
     6c2:	82 8b       	std	Z+18, r24	; 0x12
     6c4:	8c e5       	ldi	r24, 0x5C	; 92
     6c6:	83 8b       	std	Z+19, r24	; 0x13
     6c8:	e1 ec       	ldi	r30, 0xC1	; 193
     6ca:	f1 e2       	ldi	r31, 0x21	; 33
     6cc:	8e e0       	ldi	r24, 0x0E	; 14
     6ce:	80 83       	st	Z, r24
     6d0:	8d e0       	ldi	r24, 0x0D	; 13
     6d2:	81 83       	std	Z+1, r24	; 0x01
     6d4:	8b e0       	ldi	r24, 0x0B	; 11
     6d6:	82 83       	std	Z+2, r24	; 0x02
     6d8:	87 e0       	ldi	r24, 0x07	; 7
     6da:	83 83       	std	Z+3, r24	; 0x03
     6dc:	8f ef       	ldi	r24, 0xFF	; 255
     6de:	84 83       	std	Z+4, r24	; 0x04
     6e0:	08 95       	ret

000006e2 <keypad_poll>:
     6e2:	4f 92       	push	r4
     6e4:	5f 92       	push	r5
     6e6:	6f 92       	push	r6
     6e8:	7f 92       	push	r7
     6ea:	8f 92       	push	r8
     6ec:	9f 92       	push	r9
     6ee:	af 92       	push	r10
     6f0:	bf 92       	push	r11
     6f2:	cf 92       	push	r12
     6f4:	df 92       	push	r13
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	e8 ea       	ldi	r30, 0xA8	; 168
     704:	f1 e2       	ldi	r31, 0x21	; 33
     706:	81 eb       	ldi	r24, 0xB1	; 177
     708:	91 e2       	ldi	r25, 0x21	; 33
     70a:	11 92       	st	Z+, r1
     70c:	8e 17       	cp	r24, r30
     70e:	9f 07       	cpc	r25, r31
     710:	e1 f7       	brne	.-8      	; 0x70a <keypad_poll+0x28>
     712:	40 90 a7 21 	lds	r4, 0x21A7	; 0x8021a7 <prevRowMask.5348>
     716:	0e e7       	ldi	r16, 0x7E	; 126
     718:	11 e2       	ldi	r17, 0x21	; 33
     71a:	c0 e0       	ldi	r28, 0x00	; 0
     71c:	d0 e0       	ldi	r29, 0x00	; 0
     71e:	b1 2c       	mov	r11, r1
     720:	0f 2e       	mov	r0, r31
     722:	f5 e0       	ldi	r31, 0x05	; 5
     724:	6f 2e       	mov	r6, r31
     726:	f0 2d       	mov	r31, r0
     728:	68 94       	set
     72a:	77 24       	eor	r7, r7
     72c:	72 f8       	bld	r7, 2
     72e:	0f 2e       	mov	r0, r31
     730:	f0 ea       	ldi	r31, 0xA0	; 160
     732:	ef 2e       	mov	r14, r31
     734:	f6 e0       	ldi	r31, 0x06	; 6
     736:	ff 2e       	mov	r15, r31
     738:	f0 2d       	mov	r31, r0
     73a:	0f 2e       	mov	r0, r31
     73c:	f0 e2       	ldi	r31, 0x20	; 32
     73e:	cf 2e       	mov	r12, r31
     740:	f6 e0       	ldi	r31, 0x06	; 6
     742:	df 2e       	mov	r13, r31
     744:	f0 2d       	mov	r31, r0
     746:	68 94       	set
     748:	88 24       	eor	r8, r8
     74a:	87 f8       	bld	r8, 7
     74c:	99 24       	eor	r9, r9
     74e:	93 94       	inc	r9
     750:	ac 2e       	mov	r10, r28
     752:	fe 01       	movw	r30, r28
     754:	ef 53       	subi	r30, 0x3F	; 63
     756:	fe 4d       	sbci	r31, 0xDE	; 222
     758:	80 81       	ld	r24, Z
     75a:	d7 01       	movw	r26, r14
     75c:	14 96       	adiw	r26, 0x04	; 4
     75e:	8c 93       	st	X, r24
     760:	b4 e0       	ldi	r27, 0x04	; 4
     762:	cb 13       	cpse	r28, r27
     764:	03 c0       	rjmp	.+6      	; 0x76c <keypad_poll+0x8a>
     766:	f6 01       	movw	r30, r12
     768:	86 82       	std	Z+6, r8	; 0x06
     76a:	03 c0       	rjmp	.+6      	; 0x772 <keypad_poll+0x90>
     76c:	d6 01       	movw	r26, r12
     76e:	15 96       	adiw	r26, 0x05	; 5
     770:	8c 92       	st	X, r8
     772:	f7 01       	movw	r30, r14
     774:	80 85       	ldd	r24, Z+8	; 0x08
     776:	80 7f       	andi	r24, 0xF0	; 240
     778:	80 95       	com	r24
     77a:	f8 2f       	mov	r31, r24
     77c:	f0 7f       	andi	r31, 0xF0	; 240
     77e:	5f 2e       	mov	r5, r31
     780:	84 fd       	sbrc	r24, 4
     782:	b3 94       	inc	r11
     784:	85 fd       	sbrc	r24, 5
     786:	b3 94       	inc	r11
     788:	86 fd       	sbrc	r24, 6
     78a:	b3 94       	inc	r11
     78c:	55 20       	and	r5, r5
     78e:	0c f4       	brge	.+2      	; 0x792 <keypad_poll+0xb0>
     790:	b3 94       	inc	r11
     792:	f8 01       	movw	r30, r16
     794:	84 e0       	ldi	r24, 0x04	; 4
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	25 2d       	mov	r18, r5
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	a9 01       	movw	r20, r18
     79e:	b9 01       	movw	r22, r18
     7a0:	08 2e       	mov	r0, r24
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <keypad_poll+0xc6>
     7a4:	75 95       	asr	r23
     7a6:	67 95       	ror	r22
     7a8:	0a 94       	dec	r0
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <keypad_poll+0xc2>
     7ac:	60 ff       	sbrs	r22, 0
     7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <keypad_poll+0xe2>
     7b0:	60 81       	ld	r22, Z
     7b2:	69 30       	cpi	r22, 0x09	; 9
     7b4:	38 f4       	brcc	.+14     	; 0x7c4 <keypad_poll+0xe2>
     7b6:	06 2e       	mov	r0, r22
     7b8:	00 0c       	add	r0, r0
     7ba:	77 0b       	sbc	r23, r23
     7bc:	68 55       	subi	r22, 0x58	; 88
     7be:	7e 4d       	sbci	r23, 0xDE	; 222
     7c0:	db 01       	movw	r26, r22
     7c2:	9c 92       	st	X, r9
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	31 96       	adiw	r30, 0x01	; 1
     7c8:	88 30       	cpi	r24, 0x08	; 8
     7ca:	91 05       	cpc	r25, r1
     7cc:	39 f7       	brne	.-50     	; 0x79c <keypad_poll+0xba>
     7ce:	ca 01       	movw	r24, r20
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	48 23       	and	r20, r24
     7d4:	59 23       	and	r21, r25
     7d6:	45 2b       	or	r20, r21
     7d8:	49 f0       	breq	.+18     	; 0x7ec <keypad_poll+0x10a>
     7da:	b4 2d       	mov	r27, r4
     7dc:	b0 95       	com	r27
     7de:	b5 21       	and	r27, r5
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <keypad_poll+0x102>
     7e2:	b5 2d       	mov	r27, r5
     7e4:	8b 2f       	mov	r24, r27
     7e6:	81 95       	neg	r24
     7e8:	b8 23       	and	r27, r24
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <keypad_poll+0x10c>
     7ec:	b5 2d       	mov	r27, r5
     7ee:	b0 32       	cpi	r27, 0x20	; 32
     7f0:	79 f0       	breq	.+30     	; 0x810 <keypad_poll+0x12e>
     7f2:	20 f4       	brcc	.+8      	; 0x7fc <keypad_poll+0x11a>
     7f4:	b0 31       	cpi	r27, 0x10	; 16
     7f6:	09 f4       	brne	.+2      	; 0x7fa <keypad_poll+0x118>
     7f8:	48 c0       	rjmp	.+144    	; 0x88a <keypad_poll+0x1a8>
     7fa:	0e c0       	rjmp	.+28     	; 0x818 <keypad_poll+0x136>
     7fc:	b0 34       	cpi	r27, 0x40	; 64
     7fe:	09 f4       	brne	.+2      	; 0x802 <keypad_poll+0x120>
     800:	46 c0       	rjmp	.+140    	; 0x88e <keypad_poll+0x1ac>
     802:	b0 38       	cpi	r27, 0x80	; 128
     804:	49 f4       	brne	.+18     	; 0x818 <keypad_poll+0x136>
     806:	0f 2e       	mov	r0, r31
     808:	f3 e0       	ldi	r31, 0x03	; 3
     80a:	7f 2e       	mov	r7, r31
     80c:	f0 2d       	mov	r31, r0
     80e:	42 c0       	rjmp	.+132    	; 0x894 <keypad_poll+0x1b2>
     810:	bb 23       	and	r27, r27
     812:	11 f0       	breq	.+4      	; 0x818 <keypad_poll+0x136>
     814:	6a 2c       	mov	r6, r10
     816:	79 2c       	mov	r7, r9
     818:	21 96       	adiw	r28, 0x01	; 1
     81a:	0c 5f       	subi	r16, 0xFC	; 252
     81c:	1f 4f       	sbci	r17, 0xFF	; 255
     81e:	45 2c       	mov	r4, r5
     820:	c5 30       	cpi	r28, 0x05	; 5
     822:	d1 05       	cpc	r29, r1
     824:	09 f0       	breq	.+2      	; 0x828 <keypad_poll+0x146>
     826:	94 cf       	rjmp	.-216    	; 0x750 <keypad_poll+0x6e>
     828:	50 92 a7 21 	sts	0x21A7, r5	; 0x8021a7 <prevRowMask.5348>
     82c:	80 e8       	ldi	r24, 0x80	; 128
     82e:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     832:	b3 e0       	ldi	r27, 0x03	; 3
     834:	b7 15       	cp	r27, r7
     836:	e0 f0       	brcs	.+56     	; 0x870 <keypad_poll+0x18e>
     838:	e6 2d       	mov	r30, r6
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ea 53       	subi	r30, 0x3A	; 58
     846:	fe 4d       	sbci	r31, 0xDE	; 222
     848:	e7 0d       	add	r30, r7
     84a:	f1 1d       	adc	r31, r1
     84c:	80 81       	ld	r24, Z
     84e:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <kpd_keyPressed>
     852:	91 11       	cpse	r25, r1
     854:	06 c0       	rjmp	.+12     	; 0x862 <keypad_poll+0x180>
     856:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <kpd_code>
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <kpd_keyPressed>
     860:	0d c0       	rjmp	.+26     	; 0x87c <keypad_poll+0x19a>
     862:	90 91 be 21 	lds	r25, 0x21BE	; 0x8021be <kpd_code>
     866:	89 17       	cp	r24, r25
     868:	49 f0       	breq	.+18     	; 0x87c <keypad_poll+0x19a>
     86a:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <kpd_code>
     86e:	06 c0       	rjmp	.+12     	; 0x87c <keypad_poll+0x19a>
     870:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <kpd_keyPressed>
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	11 f4       	brne	.+4      	; 0x87c <keypad_poll+0x19a>
     878:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <kpd_keyPressed>
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	8b 15       	cp	r24, r11
     880:	08 f0       	brcs	.+2      	; 0x884 <keypad_poll+0x1a2>
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	80 93 ba 21 	sts	0x21BA, r24	; 0x8021ba <kpd_multiPress>
     888:	07 c0       	rjmp	.+14     	; 0x898 <keypad_poll+0x1b6>
     88a:	71 2c       	mov	r7, r1
     88c:	03 c0       	rjmp	.+6      	; 0x894 <keypad_poll+0x1b2>
     88e:	68 94       	set
     890:	77 24       	eor	r7, r7
     892:	71 f8       	bld	r7, 1
     894:	6a 2c       	mov	r6, r10
     896:	c0 cf       	rjmp	.-128    	; 0x818 <keypad_poll+0x136>
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	df 90       	pop	r13
     8a6:	cf 90       	pop	r12
     8a8:	bf 90       	pop	r11
     8aa:	af 90       	pop	r10
     8ac:	9f 90       	pop	r9
     8ae:	8f 90       	pop	r8
     8b0:	7f 90       	pop	r7
     8b2:	6f 90       	pop	r6
     8b4:	5f 90       	pop	r5
     8b6:	4f 90       	pop	r4
     8b8:	08 95       	ret

000008ba <kbd_getMap>:

uint16_t kbd_getMap(void) {
     8ba:	e8 ea       	ldi	r30, 0xA8	; 168
     8bc:	f1 e2       	ldi	r31, 0x21	; 33
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t bits = 0;
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	50 e0       	ldi	r21, 0x00	; 0

	for (uint8_t i = 0; i < 9; ++i) {
		if (keyMap[i]) {
			bits |= (1 << i);
     8c6:	61 e0       	ldi	r22, 0x01	; 1
     8c8:	70 e0       	ldi	r23, 0x00	; 0

uint16_t kbd_getMap(void) {
	uint16_t bits = 0;

	for (uint8_t i = 0; i < 9; ++i) {
		if (keyMap[i]) {
     8ca:	91 91       	ld	r25, Z+
     8cc:	99 23       	and	r25, r25
     8ce:	49 f0       	breq	.+18     	; 0x8e2 <kbd_getMap+0x28>
			bits |= (1 << i);
     8d0:	cb 01       	movw	r24, r22
     8d2:	02 2e       	mov	r0, r18
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <kbd_getMap+0x20>
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	0a 94       	dec	r0
     8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <kbd_getMap+0x1c>
     8de:	48 2b       	or	r20, r24
     8e0:	59 2b       	or	r21, r25
     8e2:	2f 5f       	subi	r18, 0xFF	; 255
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint16_t kbd_getMap(void) {
	uint16_t bits = 0;

	for (uint8_t i = 0; i < 9; ++i) {
     8e6:	29 30       	cpi	r18, 0x09	; 9
     8e8:	31 05       	cpc	r19, r1
     8ea:	79 f7       	brne	.-34     	; 0x8ca <kbd_getMap+0x10>
			bits |= (1 << i);
		}
	}

	return bits;
}
     8ec:	ca 01       	movw	r24, r20
     8ee:	08 95       	ret

000008f0 <keypad_report>:


// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     8f0:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     8f4:	80 93 b8 21 	sts	0x21B8, r24	; 0x8021b8 <kpd_testMode>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     8f8:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     8fc:	80 93 bc 21 	sts	0x21BC, r24	; 0x8021bc <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     900:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_currentCode = keypad_getCode();    // current code to be outputed
     904:	80 93 bb 21 	sts	0x21BB, r24	; 0x8021bb <kpd_currentCode>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     908:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <kpd_testMode>
     90c:	84 fd       	sbrc	r24, 4
     90e:	29 c0       	rjmp	.+82     	; 0x962 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     910:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <kpd_currState>
     914:	81 30       	cpi	r24, 0x01	; 1
     916:	09 f0       	breq	.+2      	; 0x91a <keypad_report+0x2a>
     918:	4d c0       	rjmp	.+154    	; 0x9b4 <keypad_report+0xc4>
     91a:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <kpd_prevState>
     91e:	81 11       	cpse	r24, r1
     920:	49 c0       	rjmp	.+146    	; 0x9b4 <keypad_report+0xc4>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
     922:	e0 91 bb 21 	lds	r30, 0x21BB	; 0x8021bb <kpd_currentCode>
     926:	8e 2f       	mov	r24, r30
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	fc 01       	movw	r30, r24
     92c:	e9 55       	subi	r30, 0x59	; 89
     92e:	f1 09       	sbc	r31, r1
     930:	e9 30       	cpi	r30, 0x09	; 9
     932:	f1 05       	cpc	r31, r1
     934:	90 f4       	brcc	.+36     	; 0x95a <keypad_report+0x6a>
     936:	88 27       	eor	r24, r24
     938:	e2 50       	subi	r30, 0x02	; 2
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	8f 4f       	sbci	r24, 0xFF	; 255
     93e:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     942:	84 e0       	ldi	r24, 0x04	; 4
     944:	09 c0       	rjmp	.+18     	; 0x958 <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     946:	80 e1       	ldi	r24, 0x10	; 16
     948:	07 c0       	rjmp	.+14     	; 0x958 <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     94a:	80 e2       	ldi	r24, 0x20	; 32
     94c:	05 c0       	rjmp	.+10     	; 0x958 <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     94e:	80 e4       	ldi	r24, 0x40	; 64
     950:	03 c0       	rjmp	.+6      	; 0x958 <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     952:	80 e8       	ldi	r24, 0x80	; 128
     954:	01 c0       	rjmp	.+2      	; 0x958 <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     956:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     958:	73 d0       	rcall	.+230    	; 0xa40 <led_toggle>

			// activityEnable();
			kpd_exitTestMode = 1;	// flag for exiting test mode
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	80 93 b9 21 	sts	0x21B9, r24	; 0x8021b9 <kpd_exitTestMode>
     960:	29 c0       	rjmp	.+82     	; 0x9b4 <keypad_report+0xc4>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     962:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <kpd_keyPressed>

		static bool    kpd_firstKey  = false;
		static uint8_t kpd_firstCode = 0;
		static bool    kpd_block     = false;

		if (!kpd_firstKey) {
     966:	90 91 a6 21 	lds	r25, 0x21A6	; 0x8021a6 <kpd_firstKey.5404>
     96a:	91 11       	cpse	r25, r1
     96c:	0b c0       	rjmp	.+22     	; 0x984 <keypad_report+0x94>
			if (kpd_anyPressed) {
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	09 f5       	brne	.+66     	; 0x9b4 <keypad_report+0xc4>
				kpd_firstKey = true;
     972:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <kpd_firstKey.5404>
				kpd_firstCode = kpd_currentCode;
     976:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <kpd_currentCode>
     97a:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <kpd_firstCode.5405>
				kpd_block = false;
     97e:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <kpd_block.5406>
     982:	18 c0       	rjmp	.+48     	; 0x9b4 <keypad_report+0xc4>
			}
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
     984:	81 30       	cpi	r24, 0x01	; 1
     986:	51 f5       	brne	.+84     	; 0x9dc <keypad_report+0xec>
     988:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_block.5406>
     98c:	81 11       	cpse	r24, r1
     98e:	12 c0       	rjmp	.+36     	; 0x9b4 <keypad_report+0xc4>
     990:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <kpd_multiPress>
     994:	88 23       	and	r24, r24
     996:	71 f0       	breq	.+28     	; 0x9b4 <keypad_report+0xc4>
				kpd_block = true;
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <kpd_block.5406>
     99e:	0a c0       	rjmp	.+20     	; 0x9b4 <keypad_report+0xc4>
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
					udi_hid_kbd_down(kpd_firstCode);
     9a0:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <kpd_firstCode.5405>
     9a4:	c9 d3       	rcall	.+1938   	; 0x1138 <udi_hid_kbd_down>
					udi_hid_kbd_up(kpd_firstCode);
     9a6:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <kpd_firstCode.5405>
     9aa:	8a d3       	rcall	.+1812   	; 0x10c0 <udi_hid_kbd_up>
				}
				kpd_firstKey = false;
     9ac:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <kpd_firstKey.5404>
				kpd_block = false;
     9b0:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <kpd_block.5406>
			}
		}
	}

	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     9b4:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <kpd_testMode>
     9b8:	84 ff       	sbrs	r24, 4
     9ba:	07 c0       	rjmp	.+14     	; 0x9ca <keypad_report+0xda>
     9bc:	80 91 b9 21 	lds	r24, 0x21B9	; 0x8021b9 <kpd_exitTestMode>
     9c0:	81 30       	cpi	r24, 0x01	; 1
		led_quiet_allOff();
     9c2:	19 f4       	brne	.+6      	; 0x9ca <keypad_report+0xda>
     9c4:	74 d0       	rcall	.+232    	; 0xaae <led_quiet_allOff>
		kpd_exitTestMode = 0;
     9c6:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <kpd_exitTestMode>
	}
	kpd_prevState = kpd_currState;
     9ca:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <kpd_currState>
     9ce:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <kpd_prevState>
     9d2:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	c0 cf       	rjmp	.-128    	; 0x958 <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     9d8:	88 e0       	ldi	r24, 0x08	; 8
     9da:	be cf       	rjmp	.-132    	; 0x958 <keypad_report+0x68>
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
				kpd_block = true;
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
     9dc:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_block.5406>
     9e0:	81 11       	cpse	r24, r1
     9e2:	e4 cf       	rjmp	.-56     	; 0x9ac <keypad_report+0xbc>
     9e4:	dd cf       	rjmp	.-70     	; 0x9a0 <keypad_report+0xb0>

000009e6 <led_updateState>:

void led_off(uint8_t mask) {	// LED off
    LED_PORT.OUTSET = mask;		// drive high (off)

    led_updateState(mask, false);
    activityEnable();
     9e6:	ea ed       	ldi	r30, 0xDA	; 218
     9e8:	f1 e2       	ldi	r31, 0x21	; 33
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	ac 01       	movw	r20, r24
     9f2:	02 2e       	mov	r0, r18
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <led_updateState+0x14>
     9f6:	55 95       	asr	r21
     9f8:	47 95       	ror	r20
     9fa:	0a 94       	dec	r0
     9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <led_updateState+0x10>
     9fe:	40 fd       	sbrc	r20, 0
     a00:	60 83       	st	Z, r22
     a02:	2f 5f       	subi	r18, 0xFF	; 255
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
     a06:	31 96       	adiw	r30, 0x01	; 1
     a08:	28 30       	cpi	r18, 0x08	; 8
     a0a:	31 05       	cpc	r19, r1
     a0c:	89 f7       	brne	.-30     	; 0x9f0 <led_updateState+0xa>
     a0e:	08 95       	ret

00000a10 <led_init>:
     a10:	e0 e0       	ldi	r30, 0x00	; 0
     a12:	f6 e0       	ldi	r31, 0x06	; 6
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	81 83       	std	Z+1, r24	; 0x01
     a18:	85 83       	std	Z+5, r24	; 0x05
     a1a:	e0 e2       	ldi	r30, 0x20	; 32
     a1c:	f6 e0       	ldi	r31, 0x06	; 6
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	81 83       	std	Z+1, r24	; 0x01
     a22:	85 83       	std	Z+5, r24	; 0x05
     a24:	08 95       	ret

00000a26 <led_allOff>:
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	db df       	rcall	.-74     	; 0x9e6 <led_updateState>
     a30:	ab c1       	rjmp	.+854    	; 0xd88 <activityEnable>
     a32:	08 95       	ret

00000a34 <led_on>:
     a34:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	d5 df       	rcall	.-86     	; 0x9e6 <led_updateState>
     a3c:	a5 c1       	rjmp	.+842    	; 0xd88 <activityEnable>
     a3e:	08 95       	ret

00000a40 <led_toggle>:
}

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;
     a40:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     a44:	ea ed       	ldi	r30, 0xDA	; 218
     a46:	f1 e2       	ldi	r31, 0x21	; 33

    for (int i = 0; i < 8; i++) {
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
        if (mask & (1 << i)) {
     a4c:	68 2f       	mov	r22, r24
     a4e:	70 e0       	ldi	r23, 0x00	; 0
            ledMap[i] = !ledMap[i];
     a50:	81 e0       	ldi	r24, 0x01	; 1

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;

    for (int i = 0; i < 8; i++) {
        if (mask & (1 << i)) {
     a52:	ab 01       	movw	r20, r22
     a54:	02 2e       	mov	r0, r18
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <led_toggle+0x1c>
     a58:	55 95       	asr	r21
     a5a:	47 95       	ror	r20
     a5c:	0a 94       	dec	r0
     a5e:	e2 f7       	brpl	.-8      	; 0xa58 <led_toggle+0x18>
     a60:	40 ff       	sbrs	r20, 0
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <led_toggle+0x2a>
            ledMap[i] = !ledMap[i];
     a64:	90 81       	ld	r25, Z
     a66:	98 27       	eor	r25, r24
     a68:	90 83       	st	Z, r25
}

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;

    for (int i = 0; i < 8; i++) {
     a6a:	2f 5f       	subi	r18, 0xFF	; 255
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	31 96       	adiw	r30, 0x01	; 1
     a70:	28 30       	cpi	r18, 0x08	; 8
     a72:	31 05       	cpc	r19, r1
     a74:	71 f7       	brne	.-36     	; 0xa52 <led_toggle+0x12>
        if (mask & (1 << i)) {
            ledMap[i] = !ledMap[i];
        }
    }
    activityEnable();
     a76:	88 c1       	rjmp	.+784    	; 0xd88 <activityEnable>
     a78:	08 95       	ret

00000a7a <led_setState>:
}

void led_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
     a7a:	e0 e0       	ldi	r30, 0x00	; 0
     a7c:	f6 e0       	ldi	r31, 0x06	; 6
     a7e:	9f ef       	ldi	r25, 0xFF	; 255
     a80:	95 83       	std	Z+5, r25	; 0x05
    LED_PORT.OUTCLR = mask;
     a82:	86 83       	std	Z+6, r24	; 0x06
     a84:	ea ed       	ldi	r30, 0xDA	; 218
     a86:	f1 e2       	ldi	r31, 0x21	; 33

    for (int i = 0; i < 8; i++) {
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
        ledMap[i] = (mask & (1 << i)) != 0;
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	ac 01       	movw	r20, r24
     a90:	02 2e       	mov	r0, r18
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <led_setState+0x1e>
     a94:	55 95       	asr	r21
     a96:	47 95       	ror	r20
     a98:	0a 94       	dec	r0
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <led_setState+0x1a>
     a9c:	41 70       	andi	r20, 0x01	; 1
     a9e:	41 93       	st	Z+, r20

void led_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
    LED_PORT.OUTCLR = mask;

    for (int i = 0; i < 8; i++) {
     aa0:	2f 5f       	subi	r18, 0xFF	; 255
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
     aa4:	28 30       	cpi	r18, 0x08	; 8
     aa6:	31 05       	cpc	r19, r1
     aa8:	91 f7       	brne	.-28     	; 0xa8e <led_setState+0x14>
        ledMap[i] = (mask & (1 << i)) != 0;
    }
    activityEnable();
     aaa:	6e c1       	rjmp	.+732    	; 0xd88 <activityEnable>
     aac:	08 95       	ret

00000aae <led_quiet_allOff>:

    led_updateState(LED_MASK, true);
}

void led_quiet_allOff(void) {         // turns all LED's off
    LED_PORT.OUTSET = LED_MASK;
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>

    led_updateState(LED_MASK, false);
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	97 cf       	rjmp	.-210    	; 0x9e6 <led_updateState>
     ab8:	08 95       	ret

00000aba <led_getMap>:
            ledMap[i] = state;
        }
    }
}

uint16_t led_getMap(void) {
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	aa ed       	ldi	r26, 0xDA	; 218
     ac0:	b1 e2       	ldi	r27, 0x21	; 33
     ac2:	6a ee       	ldi	r22, 0xEA	; 234
     ac4:	71 e2       	ldi	r23, 0x21	; 33
     ac6:	fd 01       	movw	r30, r26
    uint16_t map = 0;
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	50 e0       	ldi	r21, 0x00	; 0
    for (uint8_t i = 0; i < 16; i++) {
        if (ledMap[i]) {
            map |= (1 << i);
     acc:	c1 e0       	ldi	r28, 0x01	; 1
     ace:	d0 e0       	ldi	r29, 0x00	; 0
     ad0:	9f 01       	movw	r18, r30
     ad2:	2a 1b       	sub	r18, r26
     ad4:	3b 0b       	sbc	r19, r27
}

uint16_t led_getMap(void) {
    uint16_t map = 0;
    for (uint8_t i = 0; i < 16; i++) {
        if (ledMap[i]) {
     ad6:	91 91       	ld	r25, Z+
     ad8:	99 23       	and	r25, r25
     ada:	41 f0       	breq	.+16     	; 0xaec <led_getMap+0x32>
            map |= (1 << i);
     adc:	ce 01       	movw	r24, r28
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <led_getMap+0x2a>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	2a 95       	dec	r18
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <led_getMap+0x26>
     ae8:	48 2b       	or	r20, r24
     aea:	59 2b       	or	r21, r25
    }
}

uint16_t led_getMap(void) {
    uint16_t map = 0;
    for (uint8_t i = 0; i < 16; i++) {
     aec:	e6 17       	cp	r30, r22
     aee:	f7 07       	cpc	r31, r23
     af0:	79 f7       	brne	.-34     	; 0xad0 <led_getMap+0x16>
        if (ledMap[i]) {
            map |= (1 << i);
        }
    }
    return map;
}
     af2:	ca 01       	movw	r24, r20
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <led_statusOn>:

/* ---------------------------------------------------------------------- */
/* ----------------------------- Status LED ----------------------------- */
/* ---------------------------------------------------------------------- */
void led_statusOn(void) { // status LED on
    STATUS_LED_PORT.OUTCLR = LEDS_PIN;
     afa:	80 e4       	ldi	r24, 0x40	; 64
     afc:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>

    ledMap[8] = true;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	80 93 e2 21 	sts	0x21E2, r24	; 0x8021e2 <ledMap+0x8>
     b06:	08 95       	ret

00000b08 <led_statusOff>:
}

void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
     b08:	80 e4       	ldi	r24, 0x40	; 64
     b0a:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>

    ledMap[8] = false;
     b0e:	10 92 e2 21 	sts	0x21E2, r1	; 0x8021e2 <ledMap+0x8>
     b12:	08 95       	ret

00000b14 <led_statusToggle>:
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     b14:	80 e4       	ldi	r24, 0x40	; 64
     b16:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>

    ledMap[8] = !ledMap[8];
     b1a:	ea ed       	ldi	r30, 0xDA	; 218
     b1c:	f1 e2       	ldi	r31, 0x21	; 33
     b1e:	90 85       	ldd	r25, Z+8	; 0x08
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	89 27       	eor	r24, r25
     b24:	80 87       	std	Z+8, r24	; 0x08
     b26:	08 95       	ret

00000b28 <startupSequence>:

/* ---------------------------------------------------------------------- */
/* ------------------------- Silent LED Control ------------------------- */
/* ---------------------------------------------------------------------- */
static void led_quiet_allOn(void) {   // turns all LED's on
    LED_PORT.OUTCLR = LED_MASK;
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>

    led_updateState(LED_MASK, true);
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	5a df       	rcall	.-332    	; 0x9e6 <led_updateState>
/* ---------------------------------------------------------------------- */
/* --------------------------- startup & idle --------------------------- */
/* ---------------------------------------------------------------------- */
bool startupSequence(void) {
    led_quiet_allOn();
    led_statusOn();
     b32:	e3 df       	rcall	.-58     	; 0xafa <led_statusOn>
     b34:	2f eb       	ldi	r18, 0xBF	; 191
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b36:	86 ec       	ldi	r24, 0xC6	; 198
     b38:	9d e2       	ldi	r25, 0x2D	; 45
     b3a:	21 50       	subi	r18, 0x01	; 1
     b3c:	80 40       	sbci	r24, 0x00	; 0
     b3e:	90 40       	sbci	r25, 0x00	; 0
     b40:	e1 f7       	brne	.-8      	; 0xb3a <startupSequence+0x12>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <startupSequence+0x1c>
     b44:	00 00       	nop
    _delay_ms(15000);
    led_quiet_allOff();
     b46:	b3 df       	rcall	.-154    	; 0xaae <led_quiet_allOff>
     b48:	df df       	rcall	.-66     	; 0xb08 <led_statusOff>
    led_statusOff();
     b4a:	2f e1       	ldi	r18, 0x1F	; 31
     b4c:	81 ea       	ldi	r24, 0xA1	; 161
     b4e:	97 e0       	ldi	r25, 0x07	; 7
     b50:	21 50       	subi	r18, 0x01	; 1
     b52:	80 40       	sbci	r24, 0x00	; 0
     b54:	90 40       	sbci	r25, 0x00	; 0
     b56:	e1 f7       	brne	.-8      	; 0xb50 <startupSequence+0x28>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <startupSequence+0x32>
     b5a:	00 00       	nop
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	08 95       	ret

00000b60 <idle_start>:
    _delay_ms(2500);

    return 0;
}
     b60:	ea ee       	ldi	r30, 0xEA	; 234
     b62:	f1 e2       	ldi	r31, 0x21	; 33

void idle_start(void) {
    idle.running   = true;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	80 83       	st	Z, r24
    idle.stage     = 0;
     b68:	11 82       	std	Z+1, r1	; 0x01
    idle.pass      = 0;
     b6a:	12 82       	std	Z+2, r1	; 0x02
    idle.step      = 0;
     b6c:	13 82       	std	Z+3, r1	; 0x03
    idle.timer     = 0;
     b6e:	14 82       	std	Z+4, r1	; 0x04
     b70:	15 82       	std	Z+5, r1	; 0x05
    idle.period    = 250;
     b72:	8a ef       	ldi	r24, 0xFA	; 250
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	86 83       	std	Z+6, r24	; 0x06
     b78:	97 83       	std	Z+7, r25	; 0x07
     b7a:	08 95       	ret

00000b7c <idle_stop>:
}

void idle_stop(void) {
    idle.running = false;
     b7c:	10 92 ea 21 	sts	0x21EA, r1	; 0x8021ea <idle>
    led_quiet_allOff();
     b80:	96 cf       	rjmp	.-212    	; 0xaae <led_quiet_allOff>
     b82:	08 95       	ret

00000b84 <idle_poll>:
}

void idle_poll(void) {
    if (!idle.running)
     b84:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <idle>
     b88:	88 23       	and	r24, r24
     b8a:	09 f4       	brne	.+2      	; 0xb8e <idle_poll+0xa>
     b8c:	5c c0       	rjmp	.+184    	; 0xc46 <idle_poll+0xc2>
        return;
    if (activityCheck()) {
     b8e:	00 d1       	rcall	.+512    	; 0xd90 <activityCheck>
     b90:	88 23       	and	r24, r24
     b92:	11 f0       	breq	.+4      	; 0xb98 <idle_poll+0x14>
        idle_stop();
     b94:	f3 cf       	rjmp	.-26     	; 0xb7c <idle_stop>
     b96:	08 95       	ret
        return;
     b98:	ea ee       	ldi	r30, 0xEA	; 234
    }

    if (++idle.timer < idle.period)
     b9a:	f1 e2       	ldi	r31, 0x21	; 33
     b9c:	84 81       	ldd	r24, Z+4	; 0x04
     b9e:	95 81       	ldd	r25, Z+5	; 0x05
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	84 83       	std	Z+4, r24	; 0x04
     ba4:	95 83       	std	Z+5, r25	; 0x05
     ba6:	26 81       	ldd	r18, Z+6	; 0x06
     ba8:	37 81       	ldd	r19, Z+7	; 0x07
     baa:	82 17       	cp	r24, r18
     bac:	93 07       	cpc	r25, r19
     bae:	08 f4       	brcc	.+2      	; 0xbb2 <idle_poll+0x2e>
     bb0:	4a c0       	rjmp	.+148    	; 0xc46 <idle_poll+0xc2>
     bb2:	14 82       	std	Z+4, r1	; 0x04
        return;
    idle.timer = 0;
     bb4:	15 82       	std	Z+5, r1	; 0x05
     bb6:	83 81       	ldd	r24, Z+3	; 0x03

    if (idle.step >= 8) {
     bb8:	88 30       	cpi	r24, 0x08	; 8
     bba:	08 f1       	brcs	.+66     	; 0xbfe <idle_poll+0x7a>
     bbc:	13 82       	std	Z+3, r1	; 0x03
        idle.step = 0;
     bbe:	81 81       	ldd	r24, Z+1	; 0x01

        if (idle.stage == 0) {
     bc0:	81 11       	cpse	r24, r1
     bc2:	1d c0       	rjmp	.+58     	; 0xbfe <idle_poll+0x7a>
     bc4:	82 81       	ldd	r24, Z+2	; 0x02
            idle.pass++;
     bc6:	8f 5f       	subi	r24, 0xFF	; 255
     bc8:	82 83       	std	Z+2, r24	; 0x02
     bca:	25 36       	cpi	r18, 0x65	; 101

            if (idle.period > 100) {
     bcc:	31 05       	cpc	r19, r1
     bce:	38 f0       	brcs	.+14     	; 0xbde <idle_poll+0x5a>
     bd0:	2b 54       	subi	r18, 0x4B	; 75
                idle.period -= 75;
     bd2:	31 09       	sbc	r19, r1
     bd4:	20 93 f0 21 	sts	0x21F0, r18	; 0x8021f0 <idle+0x6>
     bd8:	30 93 f1 21 	sts	0x21F1, r19	; 0x8021f1 <idle+0x7>
     bdc:	06 c0       	rjmp	.+12     	; 0xbea <idle_poll+0x66>
     bde:	22 e3       	ldi	r18, 0x32	; 50
            } else {
                idle.period = 50;
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	20 93 f0 21 	sts	0x21F0, r18	; 0x8021f0 <idle+0x6>
     be6:	30 93 f1 21 	sts	0x21F1, r19	; 0x8021f1 <idle+0x7>
     bea:	84 30       	cpi	r24, 0x04	; 4
            }
            if (idle.pass >= 4) {
     bec:	40 f0       	brcs	.+16     	; 0xbfe <idle_poll+0x7a>
     bee:	ea ee       	ldi	r30, 0xEA	; 234
                idle.stage = 1;
     bf0:	f1 e2       	ldi	r31, 0x21	; 33
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	81 83       	std	Z+1, r24	; 0x01
     bf6:	82 e3       	ldi	r24, 0x32	; 50
                idle.period = 50;
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	86 83       	std	Z+6, r24	; 0x06
     bfc:	97 83       	std	Z+7, r25	; 0x07
     bfe:	60 91 ed 21 	lds	r22, 0x21ED	; 0x8021ed <idle+0x3>
            }
        }
    }

    led_quiet_setState(1 << idle.step);
     c02:	41 e0       	ldi	r20, 0x01	; 1
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	06 2e       	mov	r0, r22
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <idle_poll+0x8a>
     c0a:	44 0f       	add	r20, r20
     c0c:	55 1f       	adc	r21, r21
     c0e:	0a 94       	dec	r0
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <idle_poll+0x86>
     c12:	e0 e0       	ldi	r30, 0x00	; 0
//         }
//     }
// }

static void led_quiet_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
     c14:	f6 e0       	ldi	r31, 0x06	; 6
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	85 83       	std	Z+5, r24	; 0x05
     c1a:	46 83       	std	Z+6, r20	; 0x06
    LED_PORT.OUTCLR = mask;
     c1c:	ea ed       	ldi	r30, 0xDA	; 218
     c1e:	f1 e2       	ldi	r31, 0x21	; 33
     c20:	80 e0       	ldi	r24, 0x00	; 0

    for (int i = 0; i < 8; i++) {
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	55 27       	eor	r21, r21
        ledMap[i] = (mask & (1 << i)) != 0;
     c26:	9a 01       	movw	r18, r20
     c28:	08 2e       	mov	r0, r24
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <idle_poll+0xac>
     c2c:	35 95       	asr	r19
     c2e:	27 95       	ror	r18
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <idle_poll+0xa8>
     c34:	21 70       	andi	r18, 0x01	; 1
     c36:	21 93       	st	Z+, r18
     c38:	01 96       	adiw	r24, 0x01	; 1

static void led_quiet_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
    LED_PORT.OUTCLR = mask;

    for (int i = 0; i < 8; i++) {
     c3a:	88 30       	cpi	r24, 0x08	; 8
     c3c:	91 05       	cpc	r25, r1
     c3e:	99 f7       	brne	.-26     	; 0xc26 <idle_poll+0xa2>
     c40:	6f 5f       	subi	r22, 0xFF	; 255
            }
        }
    }

    led_quiet_setState(1 << idle.step);
    idle.step++;
     c42:	60 93 ed 21 	sts	0x21ED, r22	; 0x8021ed <idle+0x3>
     c46:	08 95       	ret

00000c48 <idleStatus>:
     c48:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <idle>
}

bool idleStatus(void) {
    return idle.running;
}
     c4c:	08 95       	ret

00000c4e <io_ui_process>:
void activityEnable(void) {
	userActive = 1;
}

void activityReset(void) {
	userActive = 0;
     c4e:	a1 cb       	rjmp	.-2238   	; 0x392 <io_init>
     c50:	08 95       	ret

00000c52 <gui_ui_process>:
     c52:	bf 92       	push	r11
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	27 97       	sbiw	r28, 0x07	; 7
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	25 df       	rcall	.-438    	; 0xaba <led_getMap>
     c70:	b8 2e       	mov	r11, r24
     c72:	19 2f       	mov	r17, r25
     c74:	22 de       	rcall	.-956    	; 0x8ba <kbd_getMap>
     c76:	c8 2e       	mov	r12, r24
     c78:	d9 2e       	mov	r13, r25
     c7a:	cb dc       	rcall	.-1642   	; 0x612 <jstk_getMap>
     c7c:	e6 2e       	mov	r14, r22
     c7e:	f7 2e       	mov	r15, r23
     c80:	08 2f       	mov	r16, r24
     c82:	b9 82       	std	Y+1, r11	; 0x01
     c84:	e1 df       	rcall	.-62     	; 0xc48 <idleStatus>
     c86:	81 11       	cpse	r24, r1
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	18 2b       	or	r17, r24
     c8c:	1a 83       	std	Y+2, r17	; 0x02
     c8e:	cb 82       	std	Y+3, r12	; 0x03
     c90:	dc 82       	std	Y+4, r13	; 0x04
     c92:	ed 82       	std	Y+5, r14	; 0x05
     c94:	fe 82       	std	Y+6, r15	; 0x06
     c96:	0f 83       	std	Y+7, r16	; 0x07
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	43 db       	rcall	.-2426   	; 0x324 <udi_hid_led_send_report_in>
     c9e:	27 96       	adiw	r28, 0x07	; 7
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	cf 90       	pop	r12
     cb4:	bf 90       	pop	r11
     cb6:	08 95       	ret

00000cb8 <kbd_ui_process>:
     cb8:	14 dd       	rcall	.-1496   	; 0x6e2 <keypad_poll>
     cba:	1a ce       	rjmp	.-972    	; 0x8f0 <keypad_report>
     cbc:	08 95       	ret

00000cbe <jstk_ui_process>:
     cbe:	cf 93       	push	r28
     cc0:	52 dc       	rcall	.-1884   	; 0x566 <jstk_readMask>
     cc2:	c8 2f       	mov	r28, r24
     cc4:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     cc8:	84 fd       	sbrc	r24, 4
     cca:	09 c0       	rjmp	.+18     	; 0xcde <jstk_ui_process+0x20>
     ccc:	cc 23       	and	r28, r28
     cce:	79 f0       	breq	.+30     	; 0xcee <jstk_ui_process+0x30>
     cd0:	aa de       	rcall	.-684    	; 0xa26 <led_allOff>
     cd2:	8c 2f       	mov	r24, r28
     cd4:	af de       	rcall	.-674    	; 0xa34 <led_on>
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	80 93 f3 21 	sts	0x21F3, r24	; 0x8021f3 <jstk_exitTestMode>
     cdc:	08 c0       	rjmp	.+16     	; 0xcee <jstk_ui_process+0x30>
     cde:	66 dc       	rcall	.-1844   	; 0x5ac <jstk_usbTask>
     ce0:	80 91 f3 21 	lds	r24, 0x21F3	; 0x8021f3 <jstk_exitTestMode>
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	19 f4       	brne	.+6      	; 0xcee <jstk_ui_process+0x30>
     ce8:	e2 de       	rcall	.-572    	; 0xaae <led_quiet_allOff>
     cea:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <jstk_exitTestMode>
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <led_ui_report>:
     cf2:	fc 01       	movw	r30, r24
     cf4:	91 81       	ldd	r25, Z+1	; 0x01
     cf6:	92 34       	cpi	r25, 0x42	; 66
     cf8:	21 f4       	brne	.+8      	; 0xd02 <led_ui_report+0x10>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <userActive>
     d00:	08 95       	ret
     d02:	95 34       	cpi	r25, 0x45	; 69
     d04:	21 f4       	brne	.+8      	; 0xd0e <led_ui_report+0x1c>
     d06:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <userActive>
     d0a:	2a cf       	rjmp	.-428    	; 0xb60 <idle_start>
     d0c:	08 95       	ret
     d0e:	98 34       	cpi	r25, 0x48	; 72
     d10:	11 f4       	brne	.+4      	; 0xd16 <led_ui_report+0x24>
     d12:	f3 ce       	rjmp	.-538    	; 0xafa <led_statusOn>
     d14:	08 95       	ret
     d16:	91 35       	cpi	r25, 0x51	; 81
     d18:	11 f4       	brne	.+4      	; 0xd1e <led_ui_report+0x2c>
     d1a:	f6 ce       	rjmp	.-532    	; 0xb08 <led_statusOff>
     d1c:	08 95       	ret
     d1e:	80 81       	ld	r24, Z
     d20:	ac ce       	rjmp	.-680    	; 0xa7a <led_setState>
     d22:	08 95       	ret

00000d24 <status_ui_process>:
     d24:	cf 93       	push	r28
     d26:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     d2a:	c1 e0       	ldi	r28, 0x01	; 1
     d2c:	28 2f       	mov	r18, r24
     d2e:	20 71       	andi	r18, 0x10	; 16
     d30:	84 fd       	sbrc	r24, 4
     d32:	c0 e0       	ldi	r28, 0x00	; 0
     d34:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <sof_ms>
     d38:	90 91 f6 21 	lds	r25, 0x21F6	; 0x8021f6 <sof_ms+0x1>
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	80 93 f5 21 	sts	0x21F5, r24	; 0x8021f5 <sof_ms>
     d42:	90 93 f6 21 	sts	0x21F6, r25	; 0x8021f6 <sof_ms+0x1>
     d46:	21 11       	cpse	r18, r1
     d48:	0d c0       	rjmp	.+26     	; 0xd64 <status_ui_process+0x40>
     d4a:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <sof_ms>
     d4e:	90 91 f6 21 	lds	r25, 0x21F6	; 0x8021f6 <sof_ms+0x1>
     d52:	84 3f       	cpi	r24, 0xF4	; 244
     d54:	91 40       	sbci	r25, 0x01	; 1
     d56:	70 f0       	brcs	.+28     	; 0xd74 <status_ui_process+0x50>
     d58:	dd de       	rcall	.-582    	; 0xb14 <led_statusToggle>
     d5a:	10 92 f5 21 	sts	0x21F5, r1	; 0x8021f5 <sof_ms>
     d5e:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <sof_ms+0x1>
     d62:	08 c0       	rjmp	.+16     	; 0xd74 <status_ui_process+0x50>
     d64:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <prevTM.5370>
     d68:	81 11       	cpse	r24, r1
     d6a:	ce de       	rcall	.-612    	; 0xb08 <led_statusOff>
     d6c:	10 92 f5 21 	sts	0x21F5, r1	; 0x8021f5 <sof_ms>
     d70:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <sof_ms+0x1>
     d74:	c0 93 f2 21 	sts	0x21F2, r28	; 0x8021f2 <prevTM.5370>
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <startup_ui_process>:
     d7c:	d5 de       	rcall	.-598    	; 0xb28 <startupSequence>
     d7e:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <startupCheck>
     d82:	08 95       	ret

00000d84 <idle_ui_process>:
     d84:	ff ce       	rjmp	.-514    	; 0xb84 <idle_poll>
     d86:	08 95       	ret

00000d88 <activityEnable>:
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <userActive>
     d8e:	08 95       	ret

00000d90 <activityCheck>:
}

bool activityCheck(void) {
	return userActive;
     d90:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <userActive>
     d94:	08 95       	ret

00000d96 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	27 97       	sbiw	r28, 0x07	; 7
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     dae:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     db2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     db6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     dba:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     dbe:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     dc2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     dc6:	65 e0       	ldi	r22, 0x05	; 5
     dc8:	81 e4       	ldi	r24, 0x41	; 65
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	7a d6       	rcall	.+3316   	; 0x1ac2 <ccp_write_io>
     dce:	6c e1       	ldi	r22, 0x1C	; 28
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	6c d6       	rcall	.+3288   	; 0x1aae <nvm_read_byte>
     dd6:	8a 83       	std	Y+2, r24	; 0x02
     dd8:	6d e1       	ldi	r22, 0x1D	; 29
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	67 d6       	rcall	.+3278   	; 0x1aae <nvm_read_byte>
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	21 f4       	brne	.+8      	; 0xdf2 <sysclk_init+0x5c>
     dea:	80 e4       	ldi	r24, 0x40	; 64
     dec:	93 e2       	ldi	r25, 0x23	; 35
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	8b 83       	std	Y+3, r24	; 0x03
     df8:	9c 83       	std	Y+4, r25	; 0x04
     dfa:	e0 e6       	ldi	r30, 0x60	; 96
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	82 83       	std	Z+2, r24	; 0x02
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	83 83       	std	Z+3, r24	; 0x03
     e04:	8f b7       	in	r24, 0x3f	; 63
     e06:	8e 83       	std	Y+6, r24	; 0x06
     e08:	f8 94       	cli
     e0a:	9e 81       	ldd	r25, Y+6	; 0x06
     e0c:	e0 e5       	ldi	r30, 0x50	; 80
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	82 60       	ori	r24, 0x02	; 2
     e14:	80 83       	st	Z, r24
     e16:	9f bf       	out	0x3f, r25	; 63
     e18:	81 81       	ldd	r24, Z+1	; 0x01
     e1a:	81 ff       	sbrs	r24, 1
     e1c:	fd cf       	rjmp	.-6      	; 0xe18 <sysclk_init+0x82>
     e1e:	8f b7       	in	r24, 0x3f	; 63
     e20:	8f 83       	std	Y+7, r24	; 0x07
     e22:	f8 94       	cli
     e24:	9f 81       	ldd	r25, Y+7	; 0x07
     e26:	00 e5       	ldi	r16, 0x50	; 80
     e28:	10 e0       	ldi	r17, 0x00	; 0
     e2a:	d8 01       	movw	r26, r16
     e2c:	16 96       	adiw	r26, 0x06	; 6
     e2e:	8c 91       	ld	r24, X
     e30:	16 97       	sbiw	r26, 0x06	; 6
     e32:	89 7f       	andi	r24, 0xF9	; 249
     e34:	16 96       	adiw	r26, 0x06	; 6
     e36:	8c 93       	st	X, r24
     e38:	16 97       	sbiw	r26, 0x06	; 6
     e3a:	e0 e6       	ldi	r30, 0x60	; 96
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 e8       	ldi	r24, 0x80	; 128
     e40:	85 83       	std	Z+5, r24	; 0x05
     e42:	8b eb       	ldi	r24, 0xBB	; 187
     e44:	86 83       	std	Z+6, r24	; 0x06
     e46:	16 96       	adiw	r26, 0x06	; 6
     e48:	8c 91       	ld	r24, X
     e4a:	16 97       	sbiw	r26, 0x06	; 6
     e4c:	84 60       	ori	r24, 0x04	; 4
     e4e:	16 96       	adiw	r26, 0x06	; 6
     e50:	8c 93       	st	X, r24
     e52:	80 81       	ld	r24, Z
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	80 83       	st	Z, r24
     e58:	9f bf       	out	0x3f, r25	; 63
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	80 e4       	ldi	r24, 0x40	; 64
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	30 d6       	rcall	.+3168   	; 0x1ac2 <ccp_write_io>
     e62:	8f b7       	in	r24, 0x3f	; 63
     e64:	8d 83       	std	Y+5, r24	; 0x05
     e66:	f8 94       	cli
     e68:	9d 81       	ldd	r25, Y+5	; 0x05
     e6a:	f8 01       	movw	r30, r16
     e6c:	80 81       	ld	r24, Z
     e6e:	8e 7f       	andi	r24, 0xFE	; 254
     e70:	80 83       	st	Z, r24
     e72:	9f bf       	out	0x3f, r25	; 63
     e74:	27 96       	adiw	r28, 0x07	; 7
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <sysclk_enable_module>:
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	1f 92       	push	r1
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	9f b7       	in	r25, 0x3f	; 63
     e90:	99 83       	std	Y+1, r25	; 0x01
     e92:	f8 94       	cli
     e94:	99 81       	ldd	r25, Y+1	; 0x01
     e96:	e8 2f       	mov	r30, r24
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	e0 59       	subi	r30, 0x90	; 144
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	60 95       	com	r22
     ea0:	80 81       	ld	r24, Z
     ea2:	68 23       	and	r22, r24
     ea4:	60 83       	st	Z, r22
     ea6:	9f bf       	out	0x3f, r25	; 63
     ea8:	0f 90       	pop	r0
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	1f 92       	push	r1
     eb6:	1f 92       	push	r1
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     ebc:	86 30       	cpi	r24, 0x06	; 6
     ebe:	11 f0       	breq	.+4      	; 0xec4 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     ec4:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     ec6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     eca:	81 fd       	sbrc	r24, 1
     ecc:	2a c0       	rjmp	.+84     	; 0xf22 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ece:	8f b7       	in	r24, 0x3f	; 63
     ed0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     ed2:	f8 94       	cli
	return flags;
     ed4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     ed6:	e0 e5       	ldi	r30, 0x50	; 80
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	82 60       	ori	r24, 0x02	; 2
     ede:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ee0:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     ee2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     ee4:	81 ff       	sbrs	r24, 1
     ee6:	fd cf       	rjmp	.-6      	; 0xee2 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ee8:	8f b7       	in	r24, 0x3f	; 63
     eea:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     eec:	f8 94       	cli
	return flags;
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     ef0:	a0 e5       	ldi	r26, 0x50	; 80
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	16 96       	adiw	r26, 0x06	; 6
     ef6:	8c 91       	ld	r24, X
     ef8:	16 97       	sbiw	r26, 0x06	; 6
     efa:	89 7f       	andi	r24, 0xF9	; 249
     efc:	16 96       	adiw	r26, 0x06	; 6
     efe:	8c 93       	st	X, r24
     f00:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     f02:	e0 e6       	ldi	r30, 0x60	; 96
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 e8       	ldi	r24, 0x80	; 128
     f08:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     f0a:	8b eb       	ldi	r24, 0xBB	; 187
     f0c:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     f0e:	16 96       	adiw	r26, 0x06	; 6
     f10:	8c 91       	ld	r24, X
     f12:	16 97       	sbiw	r26, 0x06	; 6
     f14:	84 60       	ori	r24, 0x04	; 4
     f16:	16 96       	adiw	r26, 0x06	; 6
     f18:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     f1a:	80 81       	ld	r24, Z
     f1c:	81 60       	ori	r24, 0x01	; 1
     f1e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f20:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     f22:	63 60       	ori	r22, 0x03	; 3
     f24:	84 e4       	ldi	r24, 0x44	; 68
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	cc d5       	rcall	.+2968   	; 0x1ac2 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     f2a:	60 e4       	ldi	r22, 0x40	; 64
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	aa df       	rcall	.-172    	; 0xe84 <sysclk_enable_module>
}
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <udi_hid_joystick_getsetting>:


uint8_t udi_hid_joystick_getsetting(void)
{
	return 0;
}
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	08 95       	ret

00000f3e <udi_hid_joystick_setreport>:


static bool udi_hid_joystick_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     f3e:	30 91 ec 23 	lds	r19, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x2>
     f42:	20 91 ed 23 	lds	r18, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x3>
     f46:	82 2f       	mov	r24, r18
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	03 97       	sbiw	r24, 0x03	; 3
     f4c:	b1 f4       	brne	.+44     	; 0xf7a <udi_hid_joystick_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     f4e:	31 11       	cpse	r19, r1
     f50:	16 c0       	rjmp	.+44     	; 0xf7e <udi_hid_joystick_setreport+0x40>
			&& (sizeof(udi_hid_joystick_report_feature) ==
     f52:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
     f56:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
     f5a:	89 2b       	or	r24, r25
     f5c:	91 f4       	brne	.+36     	; 0xf82 <udi_hid_joystick_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     f5e:	ea ee       	ldi	r30, 0xEA	; 234
     f60:	f3 e2       	ldi	r31, 0x23	; 35
     f62:	88 ef       	ldi	r24, 0xF8	; 248
     f64:	91 e2       	ldi	r25, 0x21	; 33
     f66:	80 87       	std	Z+8, r24	; 0x08
     f68:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_joystick_report_feature;
		udd_g_ctrlreq.callback = udi_hid_joystick_setfeature_valid;
     f6a:	83 ec       	ldi	r24, 0xC3	; 195
     f6c:	97 e0       	ldi	r25, 0x07	; 7
     f6e:	84 87       	std	Z+12, r24	; 0x0c
     f70:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
     f72:	12 86       	std	Z+10, r1	; 0x0a
     f74:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_joystick_report_feature);
		return true;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	08 95       	ret
	}
	return false;
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	08 95       	ret
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	08 95       	ret
     f82:	80 e0       	ldi	r24, 0x00	; 0
}
     f84:	08 95       	ret

00000f86 <udi_hid_joystick_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_joystick_setfeature_valid(void)
{
     f86:	08 95       	ret

00000f88 <udi_hid_joystick_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_joystick_b_report_in_free = true;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <udi_hid_joystick_b_report_in_free>
     f8e:	08 95       	ret

00000f90 <udi_hid_joystick_enable>:
//------ Interface for UDI HID level

bool udi_hid_joystick_enable(void)
{
	// Initialize internal values
	udi_hid_joystick_rate = 0;
     f90:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udi_hid_joystick_rate>
	udi_hid_joystick_protocol = 0;
     f94:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udi_hid_joystick_protocol>
	udi_hid_joystick_b_report_in_free = true;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <udi_hid_joystick_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_JOYSTICK_ENABLE_EXT();
     f9e:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <main_joystick_enable>
}
     fa2:	08 95       	ret

00000fa4 <udi_hid_joystick_disable>:


void udi_hid_joystick_disable(void)
{
	UDI_HID_JOYSTICK_DISABLE_EXT();
     fa4:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <main_joystick_disable>
     fa8:	08 95       	ret

00000faa <udi_hid_joystick_setup>:
}


bool udi_hid_joystick_setup(void)
{
	return udi_hid_setup(&udi_hid_joystick_rate,
     faa:	2f e9       	ldi	r18, 0x9F	; 159
     fac:	37 e0       	ldi	r19, 0x07	; 7
     fae:	48 ea       	ldi	r20, 0xA8	; 168
     fb0:	50 e2       	ldi	r21, 0x20	; 32
     fb2:	6c ef       	ldi	r22, 0xFC	; 252
     fb4:	71 e2       	ldi	r23, 0x21	; 33
     fb6:	8e ef       	ldi	r24, 0xFE	; 254
     fb8:	91 e2       	ldi	r25, 0x21	; 33
     fba:	f2 c0       	rjmp	.+484    	; 0x11a0 <udi_hid_setup>
								&udi_hid_joystick_protocol,
								(uint8_t *) &udi_hid_joystick_report_desc,
								udi_hid_joystick_setreport);
}
     fbc:	08 95       	ret

00000fbe <udi_hid_joystick_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_joystick_send_report_in(uint8_t *data)
{
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	1f 92       	push	r1
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	9c 01       	movw	r18, r24
	if (!udi_hid_joystick_b_report_in_free)
     fd0:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <udi_hid_joystick_b_report_in_free>
     fd4:	88 23       	and	r24, r24
     fd6:	09 f1       	breq	.+66     	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
     fd8:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fda:	8f b7       	in	r24, 0x3f	; 63
     fdc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     fde:	f8 94       	cli
	return flags;
     fe0:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_joystick_report_in, 0,
     fe2:	10 92 f8 21 	sts	0x21F8, r1	; 0x8021f8 <udi_hid_joystick_report_feature>
     fe6:	10 92 f9 21 	sts	0x21F9, r1	; 0x8021f9 <udi_hid_joystick_report_feature+0x1>
			sizeof(udi_hid_joystick_report_in));
	memcpy(&udi_hid_joystick_report_in, data,
     fea:	80 81       	ld	r24, Z
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	80 93 f8 21 	sts	0x21F8, r24	; 0x8021f8 <udi_hid_joystick_report_feature>
     ff2:	90 93 f9 21 	sts	0x21F9, r25	; 0x8021f9 <udi_hid_joystick_report_feature+0x1>
	      		sizeof(udi_hid_joystick_report_in));
	udi_hid_joystick_b_report_in_free =
			!udd_ep_run(UDI_HID_JOYSTICK_EP_IN,
     ff6:	04 ec       	ldi	r16, 0xC4	; 196
     ff8:	17 e0       	ldi	r17, 0x07	; 7
     ffa:	22 e0       	ldi	r18, 0x02	; 2
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	48 ef       	ldi	r20, 0xF8	; 248
    1000:	51 e2       	ldi	r21, 0x21	; 33
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	82 e8       	ldi	r24, 0x82	; 130
    1006:	0e 94 25 12 	call	0x244a	; 0x244a <udd_ep_run>
	// Fill report
	memset(&udi_hid_joystick_report_in, 0,
			sizeof(udi_hid_joystick_report_in));
	memcpy(&udi_hid_joystick_report_in, data,
	      		sizeof(udi_hid_joystick_report_in));
	udi_hid_joystick_b_report_in_free =
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	89 27       	eor	r24, r25
    100e:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <udi_hid_joystick_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1012:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_joystick_report_in,
							sizeof(udi_hid_joystick_report_in),
							udi_hid_joystick_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_joystick_b_report_in_free;
    1014:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <udi_hid_joystick_b_report_in_free>
    1018:	89 27       	eor	r24, r25

}
    101a:	0f 90       	pop	r0
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	08 95       	ret

00001028 <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	08 95       	ret

0000102c <udi_hid_kbd_setreport>:
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	08 95       	ret

00001030 <udi_hid_kbd_enable>:
    1030:	10 92 14 22 	sts	0x2214, r1	; 0x802214 <udi_hid_kbd_rate>
    1034:	10 92 12 22 	sts	0x2212, r1	; 0x802212 <udi_hid_kbd_protocol>
    1038:	10 92 08 22 	sts	0x2208, r1	; 0x802208 <udi_hid_kbd_b_report_trans_ongoing>
    103c:	88 e0       	ldi	r24, 0x08	; 8
    103e:	e9 e0       	ldi	r30, 0x09	; 9
    1040:	f2 e2       	ldi	r31, 0x22	; 34
    1042:	df 01       	movw	r26, r30
    1044:	1d 92       	st	X+, r1
    1046:	8a 95       	dec	r24
    1048:	e9 f7       	brne	.-6      	; 0x1044 <udi_hid_kbd_enable+0x14>
    104a:	10 92 11 22 	sts	0x2211, r1	; 0x802211 <udi_hid_kbd_b_report_valid>
    104e:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <main_kbd_enable>
    1052:	08 95       	ret

00001054 <udi_hid_kbd_disable>:
    1054:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <main_kbd_disable>
    1058:	08 95       	ret

0000105a <udi_hid_kbd_setup>:
    105a:	26 e1       	ldi	r18, 0x16	; 22
    105c:	38 e0       	ldi	r19, 0x08	; 8
    105e:	4a ec       	ldi	r20, 0xCA	; 202
    1060:	50 e2       	ldi	r21, 0x20	; 32
    1062:	62 e1       	ldi	r22, 0x12	; 18
    1064:	72 e2       	ldi	r23, 0x22	; 34
    1066:	84 e1       	ldi	r24, 0x14	; 20
    1068:	92 e2       	ldi	r25, 0x22	; 34
    106a:	9a c0       	rjmp	.+308    	; 0x11a0 <udi_hid_setup>
    106c:	08 95       	ret

0000106e <udi_hid_kbd_send_report>:
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	80 91 08 22 	lds	r24, 0x2208	; 0x802208 <udi_hid_kbd_b_report_trans_ongoing>
    1076:	81 11       	cpse	r24, r1
    1078:	18 c0       	rjmp	.+48     	; 0x10aa <udi_hid_kbd_send_report+0x3c>
    107a:	88 e0       	ldi	r24, 0x08	; 8
    107c:	e9 e0       	ldi	r30, 0x09	; 9
    107e:	f2 e2       	ldi	r31, 0x22	; 34
    1080:	a0 e0       	ldi	r26, 0x00	; 0
    1082:	b2 e2       	ldi	r27, 0x22	; 34
    1084:	01 90       	ld	r0, Z+
    1086:	0d 92       	st	X+, r0
    1088:	8a 95       	dec	r24
    108a:	e1 f7       	brne	.-8      	; 0x1084 <udi_hid_kbd_send_report+0x16>
    108c:	10 92 11 22 	sts	0x2211, r1	; 0x802211 <udi_hid_kbd_b_report_valid>
    1090:	09 e5       	ldi	r16, 0x59	; 89
    1092:	18 e0       	ldi	r17, 0x08	; 8
    1094:	28 e0       	ldi	r18, 0x08	; 8
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	52 e2       	ldi	r21, 0x22	; 34
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	81 e8       	ldi	r24, 0x81	; 129
    10a0:	0e 94 25 12 	call	0x244a	; 0x244a <udd_ep_run>
    10a4:	80 93 08 22 	sts	0x2208, r24	; 0x802208 <udi_hid_kbd_b_report_trans_ongoing>
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <udi_hid_kbd_send_report+0x3e>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	08 95       	ret

000010b2 <udi_hid_kbd_report_sent>:
    10b2:	10 92 08 22 	sts	0x2208, r1	; 0x802208 <udi_hid_kbd_b_report_trans_ongoing>
    10b6:	80 91 11 22 	lds	r24, 0x2211	; 0x802211 <udi_hid_kbd_b_report_valid>
    10ba:	81 11       	cpse	r24, r1
    10bc:	d8 cf       	rjmp	.-80     	; 0x106e <udi_hid_kbd_send_report>
    10be:	08 95       	ret

000010c0 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	1f 92       	push	r1
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10cc:	9f b7       	in	r25, 0x3f	; 63
    10ce:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    10d0:	f8 94       	cli
	return flags;
    10d2:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    10d4:	90 91 0b 22 	lds	r25, 0x220B	; 0x80220b <udi_hid_kbd_report+0x2>
    10d8:	99 23       	and	r25, r25
    10da:	41 f0       	breq	.+16     	; 0x10ec <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    10dc:	89 17       	cp	r24, r25
    10de:	a9 f0       	breq	.+42     	; 0x110a <udi_hid_kbd_up+0x4a>
    10e0:	ec e0       	ldi	r30, 0x0C	; 12
    10e2:	f2 e2       	ldi	r31, 0x22	; 34
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10e4:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    10e6:	21 91       	ld	r18, Z+
    10e8:	21 11       	cpse	r18, r1
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10ec:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    10ee:	1e c0       	rjmp	.+60     	; 0x112c <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    10f0:	28 17       	cp	r18, r24
    10f2:	21 f0       	breq	.+8      	; 0x10fc <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10f4:	9f 5f       	subi	r25, 0xFF	; 255
    10f6:	98 30       	cpi	r25, 0x08	; 8
    10f8:	b1 f7       	brne	.-20     	; 0x10e6 <udi_hid_kbd_up+0x26>
    10fa:	05 c0       	rjmp	.+10     	; 0x1106 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    10fc:	98 30       	cpi	r25, 0x08	; 8
    10fe:	19 f0       	breq	.+6      	; 0x1106 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    1100:	97 30       	cpi	r25, 0x07	; 7
    1102:	20 f0       	brcs	.+8      	; 0x110c <udi_hid_kbd_up+0x4c>
    1104:	0c c0       	rjmp	.+24     	; 0x111e <udi_hid_kbd_up+0x5e>
    1106:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    1108:	11 c0       	rjmp	.+34     	; 0x112c <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    110a:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    110c:	e9 2f       	mov	r30, r25
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	e7 5f       	subi	r30, 0xF7	; 247
    1112:	fd 4d       	sbci	r31, 0xDD	; 221
    1114:	81 81       	ldd	r24, Z+1	; 0x01
    1116:	80 83       	st	Z, r24
		i++;
    1118:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    111a:	97 30       	cpi	r25, 0x07	; 7
    111c:	b9 f7       	brne	.-18     	; 0x110c <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    111e:	10 92 10 22 	sts	0x2210, r1	; 0x802210 <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1128:	a2 df       	rcall	.-188    	; 0x106e <udi_hid_kbd_send_report>
    112a:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	0f 90       	pop	r0
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	08 95       	ret

00001138 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	1f 92       	push	r1
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1144:	9f b7       	in	r25, 0x3f	; 63
    1146:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1148:	f8 94       	cli
	return flags;
    114a:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    114c:	90 91 0b 22 	lds	r25, 0x220B	; 0x80220b <udi_hid_kbd_report+0x2>
    1150:	99 23       	and	r25, r25
    1152:	b1 f0       	breq	.+44     	; 0x1180 <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1154:	89 17       	cp	r24, r25
    1156:	41 f0       	breq	.+16     	; 0x1168 <udi_hid_kbd_down+0x30>
    1158:	ac e0       	ldi	r26, 0x0C	; 12
    115a:	b2 e2       	ldi	r27, 0x22	; 34
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    115c:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    115e:	9d 91       	ld	r25, X+
    1160:	99 23       	and	r25, r25
    1162:	49 f0       	breq	.+18     	; 0x1176 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1164:	98 13       	cpse	r25, r24
    1166:	03 c0       	rjmp	.+6      	; 0x116e <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1168:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	14 c0       	rjmp	.+40     	; 0x1196 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    116e:	ef 5f       	subi	r30, 0xFF	; 255
    1170:	e8 30       	cpi	r30, 0x08	; 8
    1172:	a9 f7       	brne	.-22     	; 0x115e <udi_hid_kbd_down+0x26>
    1174:	02 c0       	rjmp	.+4      	; 0x117a <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    1176:	e8 30       	cpi	r30, 0x08	; 8
    1178:	21 f4       	brne	.+8      	; 0x1182 <udi_hid_kbd_down+0x4a>
    117a:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	0b c0       	rjmp	.+22     	; 0x1196 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1180:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	e7 5f       	subi	r30, 0xF7	; 247
    1186:	fd 4d       	sbci	r31, 0xDD	; 221
    1188:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1190:	6e df       	rcall	.-292    	; 0x106e <udi_hid_kbd_send_report>
    1192:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    1194:	81 e0       	ldi	r24, 0x01	; 1
}
    1196:	0f 90       	pop	r0
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	08 95       	ret

000011a0 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	dc 01       	movw	r26, r24
    11a6:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    11a8:	90 91 ea 23 	lds	r25, 0x23EA	; 0x8023ea <udd_g_ctrlreq>
    11ac:	99 23       	and	r25, r25
    11ae:	0c f0       	brlt	.+2      	; 0x11b2 <udi_hid_setup+0x12>
    11b0:	68 c0       	rjmp	.+208    	; 0x1282 <udi_hid_setup+0xe2>
    11b2:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <udi_hid_setup+0x18>
    11b6:	45 c0       	rjmp	.+138    	; 0x1242 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    11b8:	80 91 eb 23 	lds	r24, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x1>
    11bc:	86 30       	cpi	r24, 0x06	; 6
    11be:	09 f0       	breq	.+2      	; 0x11c2 <udi_hid_setup+0x22>
    11c0:	40 c0       	rjmp	.+128    	; 0x1242 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    11c2:	76 d1       	rcall	.+748    	; 0x14b0 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    11c4:	dc 01       	movw	r26, r24
    11c6:	1a 96       	adiw	r26, 0x0a	; 10
    11c8:	2c 91       	ld	r18, X
    11ca:	1a 97       	sbiw	r26, 0x0a	; 10
    11cc:	21 32       	cpi	r18, 0x21	; 33
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <udi_hid_setup+0x32>
    11d0:	77 c0       	rjmp	.+238    	; 0x12c0 <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    11d2:	20 91 ed 23 	lds	r18, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x3>
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	21 32       	cpi	r18, 0x21	; 33
    11da:	31 05       	cpc	r19, r1
    11dc:	b1 f4       	brne	.+44     	; 0x120a <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    11de:	9c 01       	movw	r18, r24
    11e0:	27 5f       	subi	r18, 0xF7	; 247
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	20 93 f2 23 	sts	0x23F2, r18	; 0x8023f2 <udd_g_ctrlreq+0x8>
    11e8:	30 93 f3 23 	sts	0x23F3, r19	; 0x8023f3 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    11ec:	ea ee       	ldi	r30, 0xEA	; 234
    11ee:	f3 e2       	ldi	r31, 0x23	; 35
    11f0:	19 96       	adiw	r26, 0x09	; 9
    11f2:	8c 91       	ld	r24, X
    11f4:	26 81       	ldd	r18, Z+6	; 0x06
    11f6:	37 81       	ldd	r19, Z+7	; 0x07
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	28 17       	cp	r18, r24
    11fc:	39 07       	cpc	r19, r25
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <udi_hid_setup+0x62>
    1200:	c9 01       	movw	r24, r18
    1202:	82 87       	std	Z+10, r24	; 0x0a
    1204:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	68 c0       	rjmp	.+208    	; 0x12da <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    120a:	fc 01       	movw	r30, r24
    120c:	47 85       	ldd	r20, Z+15	; 0x0f
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	42 17       	cp	r20, r18
    1212:	53 07       	cpc	r21, r19
    1214:	09 f0       	breq	.+2      	; 0x1218 <udi_hid_setup+0x78>
    1216:	56 c0       	rjmp	.+172    	; 0x12c4 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    1218:	c0 93 f2 23 	sts	0x23F2, r28	; 0x8023f2 <udd_g_ctrlreq+0x8>
    121c:	d0 93 f3 23 	sts	0x23F3, r29	; 0x8023f3 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    1220:	ea ee       	ldi	r30, 0xEA	; 234
    1222:	f3 e2       	ldi	r31, 0x23	; 35
    1224:	26 81       	ldd	r18, Z+6	; 0x06
    1226:	37 81       	ldd	r19, Z+7	; 0x07
    1228:	dc 01       	movw	r26, r24
    122a:	50 96       	adiw	r26, 0x10	; 16
    122c:	8d 91       	ld	r24, X+
    122e:	9c 91       	ld	r25, X
    1230:	51 97       	sbiw	r26, 0x11	; 17
    1232:	28 17       	cp	r18, r24
    1234:	39 07       	cpc	r19, r25
    1236:	08 f4       	brcc	.+2      	; 0x123a <udi_hid_setup+0x9a>
    1238:	c9 01       	movw	r24, r18
    123a:	82 87       	std	Z+10, r24	; 0x0a
    123c:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	4c c0       	rjmp	.+152    	; 0x12da <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1242:	90 32       	cpi	r25, 0x20	; 32
    1244:	09 f0       	breq	.+2      	; 0x1248 <udi_hid_setup+0xa8>
    1246:	40 c0       	rjmp	.+128    	; 0x12c8 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1248:	80 91 eb 23 	lds	r24, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x1>
    124c:	82 30       	cpi	r24, 0x02	; 2
    124e:	39 f0       	breq	.+14     	; 0x125e <udi_hid_setup+0xbe>
    1250:	83 30       	cpi	r24, 0x03	; 3
    1252:	71 f0       	breq	.+28     	; 0x1270 <udi_hid_setup+0xd0>
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	d1 f5       	brne	.+116    	; 0x12cc <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    1258:	f9 01       	movw	r30, r18
    125a:	19 95       	eicall
    125c:	3e c0       	rjmp	.+124    	; 0x12da <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    125e:	ea ee       	ldi	r30, 0xEA	; 234
    1260:	f3 e2       	ldi	r31, 0x23	; 35
    1262:	a0 87       	std	Z+8, r26	; 0x08
    1264:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	82 87       	std	Z+10, r24	; 0x0a
    126c:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    126e:	35 c0       	rjmp	.+106    	; 0x12da <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1270:	ea ee       	ldi	r30, 0xEA	; 234
    1272:	f3 e2       	ldi	r31, 0x23	; 35
    1274:	60 87       	std	Z+8, r22	; 0x08
    1276:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	82 87       	std	Z+10, r24	; 0x0a
    127e:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1280:	2c c0       	rjmp	.+88     	; 0x12da <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1282:	90 76       	andi	r25, 0x60	; 96
    1284:	90 32       	cpi	r25, 0x20	; 32
    1286:	21 f5       	brne	.+72     	; 0x12d0 <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1288:	80 91 eb 23 	lds	r24, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x1>
    128c:	8a 30       	cpi	r24, 0x0A	; 10
    128e:	39 f0       	breq	.+14     	; 0x129e <udi_hid_setup+0xfe>
    1290:	8b 30       	cpi	r24, 0x0B	; 11
    1292:	51 f0       	breq	.+20     	; 0x12a8 <udi_hid_setup+0x108>
    1294:	89 30       	cpi	r24, 0x09	; 9
    1296:	f1 f4       	brne	.+60     	; 0x12d4 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    1298:	f9 01       	movw	r30, r18
    129a:	19 95       	eicall
    129c:	1e c0       	rjmp	.+60     	; 0x12da <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    129e:	80 91 ed 23 	lds	r24, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x3>
    12a2:	8c 93       	st	X, r24
				return true;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	19 c0       	rjmp	.+50     	; 0x12da <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    12a8:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
    12ac:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
    12b0:	89 2b       	or	r24, r25
    12b2:	91 f4       	brne	.+36     	; 0x12d8 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    12b4:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x2>
    12b8:	db 01       	movw	r26, r22
    12ba:	8c 93       	st	X, r24
				return true;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	0d c0       	rjmp	.+26     	; 0x12da <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0b c0       	rjmp	.+22     	; 0x12da <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	09 c0       	rjmp	.+18     	; 0x12da <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	07 c0       	rjmp	.+14     	; 0x12da <udi_hid_setup+0x13a>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <udi_hid_setup+0x13a>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	03 c0       	rjmp	.+6      	; 0x12da <udi_hid_setup+0x13a>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    12d8:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    12e0:	e0 91 1a 22 	lds	r30, 0x221A	; 0x80221a <udc_ptr_conf>
    12e4:	f0 91 1b 22 	lds	r31, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    12e8:	01 90       	ld	r0, Z+
    12ea:	f0 81       	ld	r31, Z
    12ec:	e0 2d       	mov	r30, r0
    12ee:	22 81       	ldd	r18, Z+2	; 0x02
    12f0:	33 81       	ldd	r19, Z+3	; 0x03
    12f2:	2e 0f       	add	r18, r30
    12f4:	3f 1f       	adc	r19, r31
    12f6:	fc 01       	movw	r30, r24
    12f8:	40 81       	ld	r20, Z
    12fa:	e4 0f       	add	r30, r20
    12fc:	f1 1d       	adc	r31, r1
    12fe:	e2 17       	cp	r30, r18
    1300:	f3 07       	cpc	r31, r19
    1302:	a0 f4       	brcc	.+40     	; 0x132c <udc_next_desc_in_iface+0x4c>
    1304:	81 81       	ldd	r24, Z+1	; 0x01
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	a1 f0       	breq	.+40     	; 0x1332 <udc_next_desc_in_iface+0x52>
    130a:	86 13       	cpse	r24, r22
    130c:	06 c0       	rjmp	.+12     	; 0x131a <udc_next_desc_in_iface+0x3a>
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <udc_next_desc_in_iface+0x58>
    1310:	81 81       	ldd	r24, Z+1	; 0x01
    1312:	84 30       	cpi	r24, 0x04	; 4
    1314:	a1 f0       	breq	.+40     	; 0x133e <udc_next_desc_in_iface+0x5e>
    1316:	86 17       	cp	r24, r22
    1318:	a9 f0       	breq	.+42     	; 0x1344 <udc_next_desc_in_iface+0x64>
    131a:	80 81       	ld	r24, Z
    131c:	e8 0f       	add	r30, r24
    131e:	f1 1d       	adc	r31, r1
    1320:	e2 17       	cp	r30, r18
    1322:	f3 07       	cpc	r31, r19
    1324:	a8 f3       	brcs	.-22     	; 0x1310 <udc_next_desc_in_iface+0x30>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	08 95       	ret
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	08 95       	ret
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	08 95       	ret
    1338:	8e 2f       	mov	r24, r30
    133a:	9f 2f       	mov	r25, r31
    133c:	08 95       	ret
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	08 95       	ret
    1344:	8e 2f       	mov	r24, r30
    1346:	9f 2f       	mov	r25, r31
    1348:	08 95       	ret

0000134a <udc_valid_address>:
    134a:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x2>
    134e:	8f 77       	andi	r24, 0x7F	; 127
    1350:	95 c7       	rjmp	.+3882   	; 0x227c <udd_set_address>
    1352:	08 95       	ret

00001354 <udc_update_iface_desc>:
    1354:	90 91 1c 22 	lds	r25, 0x221C	; 0x80221c <udc_num_configuration>
    1358:	99 23       	and	r25, r25
    135a:	81 f1       	breq	.+96     	; 0x13bc <udc_update_iface_desc+0x68>
    135c:	e0 91 1a 22 	lds	r30, 0x221A	; 0x80221a <udc_ptr_conf>
    1360:	f0 91 1b 22 	lds	r31, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    1364:	01 90       	ld	r0, Z+
    1366:	f0 81       	ld	r31, Z
    1368:	e0 2d       	mov	r30, r0
    136a:	94 81       	ldd	r25, Z+4	; 0x04
    136c:	89 17       	cp	r24, r25
    136e:	40 f5       	brcc	.+80     	; 0x13c0 <udc_update_iface_desc+0x6c>
    1370:	e0 93 18 22 	sts	0x2218, r30	; 0x802218 <udc_ptr_iface>
    1374:	f0 93 19 22 	sts	0x2219, r31	; 0x802219 <udc_ptr_iface+0x1>
    1378:	22 81       	ldd	r18, Z+2	; 0x02
    137a:	33 81       	ldd	r19, Z+3	; 0x03
    137c:	2e 0f       	add	r18, r30
    137e:	3f 1f       	adc	r19, r31
    1380:	e2 17       	cp	r30, r18
    1382:	f3 07       	cpc	r31, r19
    1384:	f8 f4       	brcc	.+62     	; 0x13c4 <udc_update_iface_desc+0x70>
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	94 30       	cpi	r25, 0x04	; 4
    138a:	61 f4       	brne	.+24     	; 0x13a4 <udc_update_iface_desc+0x50>
    138c:	92 81       	ldd	r25, Z+2	; 0x02
    138e:	89 13       	cpse	r24, r25
    1390:	09 c0       	rjmp	.+18     	; 0x13a4 <udc_update_iface_desc+0x50>
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	96 13       	cpse	r25, r22
    1396:	06 c0       	rjmp	.+12     	; 0x13a4 <udc_update_iface_desc+0x50>
    1398:	e0 93 18 22 	sts	0x2218, r30	; 0x802218 <udc_ptr_iface>
    139c:	f0 93 19 22 	sts	0x2219, r31	; 0x802219 <udc_ptr_iface+0x1>
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	08 95       	ret
    13a4:	90 81       	ld	r25, Z
    13a6:	e9 0f       	add	r30, r25
    13a8:	f1 1d       	adc	r31, r1
    13aa:	e2 17       	cp	r30, r18
    13ac:	f3 07       	cpc	r31, r19
    13ae:	58 f3       	brcs	.-42     	; 0x1386 <udc_update_iface_desc+0x32>
    13b0:	e0 93 18 22 	sts	0x2218, r30	; 0x802218 <udc_ptr_iface>
    13b4:	f0 93 19 22 	sts	0x2219, r31	; 0x802219 <udc_ptr_iface+0x1>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	08 95       	ret
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	08 95       	ret
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	08 95       	ret
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	08 95       	ret

000013c8 <udc_iface_disable>:
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	1f 93       	push	r17
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	c8 2f       	mov	r28, r24
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	be df       	rcall	.-132    	; 0x1354 <udc_update_iface_desc>
    13d8:	18 2f       	mov	r17, r24
    13da:	88 23       	and	r24, r24
    13dc:	81 f1       	breq	.+96     	; 0x143e <udc_iface_disable+0x76>
    13de:	a0 91 1a 22 	lds	r26, 0x221A	; 0x80221a <udc_ptr_conf>
    13e2:	b0 91 1b 22 	lds	r27, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    13e6:	ec 2f       	mov	r30, r28
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	12 96       	adiw	r26, 0x02	; 2
    13f0:	8d 91       	ld	r24, X+
    13f2:	9c 91       	ld	r25, X
    13f4:	13 97       	sbiw	r26, 0x03	; 3
    13f6:	e8 0f       	add	r30, r24
    13f8:	f9 1f       	adc	r31, r25
    13fa:	e0 80       	ld	r14, Z
    13fc:	f1 80       	ldd	r15, Z+1	; 0x01
    13fe:	d7 01       	movw	r26, r14
    1400:	16 96       	adiw	r26, 0x06	; 6
    1402:	ed 91       	ld	r30, X+
    1404:	fc 91       	ld	r31, X
    1406:	17 97       	sbiw	r26, 0x07	; 7
    1408:	19 95       	eicall
    140a:	68 2f       	mov	r22, r24
    140c:	8c 2f       	mov	r24, r28
    140e:	a2 df       	rcall	.-188    	; 0x1354 <udc_update_iface_desc>
    1410:	18 2f       	mov	r17, r24
    1412:	88 23       	and	r24, r24
    1414:	a1 f0       	breq	.+40     	; 0x143e <udc_iface_disable+0x76>
    1416:	c0 91 18 22 	lds	r28, 0x2218	; 0x802218 <udc_ptr_iface>
    141a:	d0 91 19 22 	lds	r29, 0x2219	; 0x802219 <udc_ptr_iface+0x1>
    141e:	65 e0       	ldi	r22, 0x05	; 5
    1420:	ce 01       	movw	r24, r28
    1422:	5e df       	rcall	.-324    	; 0x12e0 <udc_next_desc_in_iface>
    1424:	ec 01       	movw	r28, r24
    1426:	89 2b       	or	r24, r25
    1428:	21 f0       	breq	.+8      	; 0x1432 <udc_iface_disable+0x6a>
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	0e 94 3e 13 	call	0x267c	; 0x267c <udd_ep_free>
    1430:	f6 cf       	rjmp	.-20     	; 0x141e <udc_iface_disable+0x56>
    1432:	d7 01       	movw	r26, r14
    1434:	12 96       	adiw	r26, 0x02	; 2
    1436:	ed 91       	ld	r30, X+
    1438:	fc 91       	ld	r31, X
    143a:	13 97       	sbiw	r26, 0x03	; 3
    143c:	19 95       	eicall
    143e:	81 2f       	mov	r24, r17
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	08 95       	ret

0000144c <udc_iface_enable>:
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	18 2f       	mov	r17, r24
    1454:	7f df       	rcall	.-258    	; 0x1354 <udc_update_iface_desc>
    1456:	88 23       	and	r24, r24
    1458:	39 f1       	breq	.+78     	; 0x14a8 <udc_iface_enable+0x5c>
    145a:	c0 91 18 22 	lds	r28, 0x2218	; 0x802218 <udc_ptr_iface>
    145e:	d0 91 19 22 	lds	r29, 0x2219	; 0x802219 <udc_ptr_iface+0x1>
    1462:	65 e0       	ldi	r22, 0x05	; 5
    1464:	ce 01       	movw	r24, r28
    1466:	3c df       	rcall	.-392    	; 0x12e0 <udc_next_desc_in_iface>
    1468:	ec 01       	movw	r28, r24
    146a:	89 2b       	or	r24, r25
    146c:	41 f0       	breq	.+16     	; 0x147e <udc_iface_enable+0x32>
    146e:	4c 81       	ldd	r20, Y+4	; 0x04
    1470:	5d 81       	ldd	r21, Y+5	; 0x05
    1472:	6b 81       	ldd	r22, Y+3	; 0x03
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	0f d7       	rcall	.+3614   	; 0x2296 <udd_ep_alloc>
    1478:	81 11       	cpse	r24, r1
    147a:	f3 cf       	rjmp	.-26     	; 0x1462 <udc_iface_enable+0x16>
    147c:	15 c0       	rjmp	.+42     	; 0x14a8 <udc_iface_enable+0x5c>
    147e:	a0 91 1a 22 	lds	r26, 0x221A	; 0x80221a <udc_ptr_conf>
    1482:	b0 91 1b 22 	lds	r27, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    1486:	e1 2f       	mov	r30, r17
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	12 96       	adiw	r26, 0x02	; 2
    1490:	8d 91       	ld	r24, X+
    1492:	9c 91       	ld	r25, X
    1494:	13 97       	sbiw	r26, 0x03	; 3
    1496:	e8 0f       	add	r30, r24
    1498:	f9 1f       	adc	r31, r25
    149a:	01 90       	ld	r0, Z+
    149c:	f0 81       	ld	r31, Z
    149e:	e0 2d       	mov	r30, r0
    14a0:	01 90       	ld	r0, Z+
    14a2:	f0 81       	ld	r31, Z
    14a4:	e0 2d       	mov	r30, r0
    14a6:	19 95       	eicall
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	08 95       	ret

000014b0 <udc_get_interface_desc>:
    14b0:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <udc_ptr_iface>
    14b4:	90 91 19 22 	lds	r25, 0x2219	; 0x802219 <udc_ptr_iface+0x1>
    14b8:	08 95       	ret

000014ba <udc_start>:
    14ba:	55 c6       	rjmp	.+3242   	; 0x2166 <udd_enable>
    14bc:	08 95       	ret

000014be <udc_reset>:
    14be:	cf 93       	push	r28
    14c0:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udc_num_configuration>
    14c4:	88 23       	and	r24, r24
    14c6:	c1 f0       	breq	.+48     	; 0x14f8 <udc_reset+0x3a>
    14c8:	e0 91 1a 22 	lds	r30, 0x221A	; 0x80221a <udc_ptr_conf>
    14cc:	f0 91 1b 22 	lds	r31, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    14d0:	01 90       	ld	r0, Z+
    14d2:	f0 81       	ld	r31, Z
    14d4:	e0 2d       	mov	r30, r0
    14d6:	84 81       	ldd	r24, Z+4	; 0x04
    14d8:	88 23       	and	r24, r24
    14da:	71 f0       	breq	.+28     	; 0x14f8 <udc_reset+0x3a>
    14dc:	c0 e0       	ldi	r28, 0x00	; 0
    14de:	8c 2f       	mov	r24, r28
    14e0:	73 df       	rcall	.-282    	; 0x13c8 <udc_iface_disable>
    14e2:	cf 5f       	subi	r28, 0xFF	; 255
    14e4:	e0 91 1a 22 	lds	r30, 0x221A	; 0x80221a <udc_ptr_conf>
    14e8:	f0 91 1b 22 	lds	r31, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    14ec:	01 90       	ld	r0, Z+
    14ee:	f0 81       	ld	r31, Z
    14f0:	e0 2d       	mov	r30, r0
    14f2:	84 81       	ldd	r24, Z+4	; 0x04
    14f4:	c8 17       	cp	r28, r24
    14f6:	98 f3       	brcs	.-26     	; 0x14de <udc_reset+0x20>
    14f8:	10 92 1c 22 	sts	0x221C, r1	; 0x80221c <udc_num_configuration>
    14fc:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <udc_device_status>
    1500:	81 fd       	sbrc	r24, 1
    1502:	0e 94 5d 15 	call	0x2aba	; 0x2aba <main_remotewakeup_disable>
    1506:	10 92 20 22 	sts	0x2220, r1	; 0x802220 <udc_device_status>
    150a:	10 92 21 22 	sts	0x2221, r1	; 0x802221 <udc_device_status+0x1>
    150e:	cf 91       	pop	r28
    1510:	08 95       	ret

00001512 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1512:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1514:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udc_num_configuration>
    1518:	88 23       	and	r24, r24
    151a:	49 f1       	breq	.+82     	; 0x156e <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    151c:	a0 91 1a 22 	lds	r26, 0x221A	; 0x80221a <udc_ptr_conf>
    1520:	b0 91 1b 22 	lds	r27, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    1524:	ed 91       	ld	r30, X+
    1526:	fc 91       	ld	r31, X
    1528:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    152a:	84 81       	ldd	r24, Z+4	; 0x04
    152c:	88 23       	and	r24, r24
    152e:	f9 f0       	breq	.+62     	; 0x156e <udc_sof_notify+0x5c>
    1530:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1532:	ec 2f       	mov	r30, r28
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	12 96       	adiw	r26, 0x02	; 2
    153c:	8d 91       	ld	r24, X+
    153e:	9c 91       	ld	r25, X
    1540:	13 97       	sbiw	r26, 0x03	; 3
    1542:	e8 0f       	add	r30, r24
    1544:	f9 1f       	adc	r31, r25
    1546:	01 90       	ld	r0, Z+
    1548:	f0 81       	ld	r31, Z
    154a:	e0 2d       	mov	r30, r0
    154c:	00 84       	ldd	r0, Z+8	; 0x08
    154e:	f1 85       	ldd	r31, Z+9	; 0x09
    1550:	e0 2d       	mov	r30, r0
    1552:	30 97       	sbiw	r30, 0x00	; 0
    1554:	09 f0       	breq	.+2      	; 0x1558 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1556:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1558:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    155a:	a0 91 1a 22 	lds	r26, 0x221A	; 0x80221a <udc_ptr_conf>
    155e:	b0 91 1b 22 	lds	r27, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    1562:	ed 91       	ld	r30, X+
    1564:	fc 91       	ld	r31, X
    1566:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1568:	84 81       	ldd	r24, Z+4	; 0x04
    156a:	c8 17       	cp	r28, r24
    156c:	10 f3       	brcs	.-60     	; 0x1532 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    157a:	ea ee       	ldi	r30, 0xEA	; 234
    157c:	f3 e2       	ldi	r31, 0x23	; 35
    157e:	12 86       	std	Z+10, r1	; 0x0a
    1580:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1582:	14 86       	std	Z+12, r1	; 0x0c
    1584:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1586:	16 86       	std	Z+14, r1	; 0x0e
    1588:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    158a:	80 81       	ld	r24, Z
    158c:	88 23       	and	r24, r24
    158e:	0c f0       	brlt	.+2      	; 0x1592 <udc_process_setup+0x20>
    1590:	7e c2       	rjmp	.+1276   	; 0x1a8e <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1592:	20 91 f0 23 	lds	r18, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
    1596:	30 91 f1 23 	lds	r19, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
    159a:	21 15       	cp	r18, r1
    159c:	31 05       	cpc	r19, r1
    159e:	09 f0       	breq	.+2      	; 0x15a2 <udc_process_setup+0x30>
    15a0:	7b c2       	rjmp	.+1270   	; 0x1a98 <udc_process_setup+0x526>
    15a2:	6d c2       	rjmp	.+1242   	; 0x1a7e <udc_process_setup+0x50c>
    15a4:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    15a6:	09 f0       	breq	.+2      	; 0x15aa <udc_process_setup+0x38>
    15a8:	a0 c0       	rjmp	.+320    	; 0x16ea <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    15aa:	90 91 eb 23 	lds	r25, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x1>
    15ae:	96 30       	cpi	r25, 0x06	; 6
    15b0:	79 f0       	breq	.+30     	; 0x15d0 <udc_process_setup+0x5e>
    15b2:	98 30       	cpi	r25, 0x08	; 8
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <udc_process_setup+0x46>
    15b6:	8f c0       	rjmp	.+286    	; 0x16d6 <udc_process_setup+0x164>
    15b8:	91 11       	cpse	r25, r1
    15ba:	97 c0       	rjmp	.+302    	; 0x16ea <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <udc_process_setup+0x52>
    15c2:	19 c2       	rjmp	.+1074   	; 0x19f6 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    15c4:	62 e0       	ldi	r22, 0x02	; 2
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	80 e2       	ldi	r24, 0x20	; 32
    15ca:	92 e2       	ldi	r25, 0x22	; 34
    15cc:	5d d6       	rcall	.+3258   	; 0x2288 <udd_set_setup_payload>
    15ce:	69 c2       	rjmp	.+1234   	; 0x1aa2 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    15d0:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x2>
    15d4:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    15d8:	29 2f       	mov	r18, r25
    15da:	33 27       	eor	r19, r19
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	a9 f0       	breq	.+42     	; 0x160c <udc_process_setup+0x9a>
    15e2:	20 f4       	brcc	.+8      	; 0x15ec <udc_process_setup+0x7a>
    15e4:	21 30       	cpi	r18, 0x01	; 1
    15e6:	31 05       	cpc	r19, r1
    15e8:	41 f0       	breq	.+16     	; 0x15fa <udc_process_setup+0x88>
    15ea:	c7 c1       	rjmp	.+910    	; 0x197a <udc_process_setup+0x408>
    15ec:	23 30       	cpi	r18, 0x03	; 3
    15ee:	31 05       	cpc	r19, r1
    15f0:	d9 f1       	breq	.+118    	; 0x1668 <udc_process_setup+0xf6>
    15f2:	2f 30       	cpi	r18, 0x0F	; 15
    15f4:	31 05       	cpc	r19, r1
    15f6:	51 f1       	breq	.+84     	; 0x164c <udc_process_setup+0xda>
    15f8:	c0 c1       	rjmp	.+896    	; 0x197a <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    15fa:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <udc_config>
    15fe:	90 91 2a 20 	lds	r25, 0x202A	; 0x80202a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1602:	dc 01       	movw	r26, r24
    1604:	6c 91       	ld	r22, X
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	3f d6       	rcall	.+3198   	; 0x2288 <udd_set_setup_payload>
    160a:	56 c0       	rjmp	.+172    	; 0x16b8 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    160c:	e0 91 29 20 	lds	r30, 0x2029	; 0x802029 <udc_config>
    1610:	f0 91 2a 20 	lds	r31, 0x202A	; 0x80202a <udc_config+0x1>
    1614:	21 89       	ldd	r18, Z+17	; 0x11
    1616:	82 17       	cp	r24, r18
    1618:	08 f0       	brcs	.+2      	; 0x161c <udc_process_setup+0xaa>
    161a:	ed c1       	rjmp	.+986    	; 0x19f6 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    161c:	99 27       	eor	r25, r25
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	e0 91 2b 20 	lds	r30, 0x202B	; 0x80202b <udc_config+0x2>
    162a:	f0 91 2c 20 	lds	r31, 0x202C	; 0x80202c <udc_config+0x3>
    162e:	e8 0f       	add	r30, r24
    1630:	f9 1f       	adc	r31, r25
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1636:	fc 01       	movw	r30, r24
    1638:	62 81       	ldd	r22, Z+2	; 0x02
    163a:	73 81       	ldd	r23, Z+3	; 0x03
    163c:	25 d6       	rcall	.+3146   	; 0x2288 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    163e:	e0 91 f2 23 	lds	r30, 0x23F2	; 0x8023f2 <udd_g_ctrlreq+0x8>
    1642:	f0 91 f3 23 	lds	r31, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0x9>
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	81 83       	std	Z+1, r24	; 0x01
    164a:	36 c0       	rjmp	.+108    	; 0x16b8 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    164c:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <udc_config+0x4>
    1650:	90 91 2e 20 	lds	r25, 0x202E	; 0x80202e <udc_config+0x5>
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	09 f4       	brne	.+2      	; 0x165a <udc_process_setup+0xe8>
    1658:	ce c1       	rjmp	.+924    	; 0x19f6 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    165a:	dc 01       	movw	r26, r24
    165c:	12 96       	adiw	r26, 0x02	; 2
    165e:	6d 91       	ld	r22, X+
    1660:	7c 91       	ld	r23, X
    1662:	13 97       	sbiw	r26, 0x03	; 3
    1664:	11 d6       	rcall	.+3106   	; 0x2288 <udd_set_setup_payload>
    1666:	28 c0       	rjmp	.+80     	; 0x16b8 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1668:	99 27       	eor	r25, r25
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	91 05       	cpc	r25, r1
    166e:	71 f0       	breq	.+28     	; 0x168c <udc_process_setup+0x11a>
    1670:	38 f0       	brcs	.+14     	; 0x1680 <udc_process_setup+0x10e>
    1672:	02 97       	sbiw	r24, 0x02	; 2
    1674:	09 f0       	breq	.+2      	; 0x1678 <udc_process_setup+0x106>
    1676:	8a c1       	rjmp	.+788    	; 0x198c <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1678:	e8 e4       	ldi	r30, 0x48	; 72
    167a:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    167c:	3b e1       	ldi	r19, 0x1B	; 27
    167e:	09 c0       	rjmp	.+18     	; 0x1692 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1680:	64 e0       	ldi	r22, 0x04	; 4
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	8e e6       	ldi	r24, 0x6E	; 110
    1686:	91 e2       	ldi	r25, 0x21	; 33
    1688:	ff d5       	rcall	.+3070   	; 0x2288 <udd_set_setup_payload>
    168a:	16 c0       	rjmp	.+44     	; 0x16b8 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    168c:	e4 e6       	ldi	r30, 0x64	; 100
    168e:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1690:	39 e0       	ldi	r19, 0x09	; 9
    1692:	a2 e1       	ldi	r26, 0x12	; 18
    1694:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1696:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1698:	81 91       	ld	r24, Z+
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	8d 93       	st	X+, r24
    169e:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    16a0:	2f 5f       	subi	r18, 0xFF	; 255
    16a2:	23 17       	cp	r18, r19
    16a4:	c8 f3       	brcs	.-14     	; 0x1698 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    16a6:	63 2f       	mov	r22, r19
    16a8:	66 0f       	add	r22, r22
    16aa:	6e 5f       	subi	r22, 0xFE	; 254
    16ac:	60 93 10 21 	sts	0x2110, r22	; 0x802110 <udc_string_desc>
		udd_set_setup_payload(
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	80 e1       	ldi	r24, 0x10	; 16
    16b4:	91 e2       	ldi	r25, 0x21	; 33
    16b6:	e8 d5       	rcall	.+3024   	; 0x2288 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    16b8:	ea ee       	ldi	r30, 0xEA	; 234
    16ba:	f3 e2       	ldi	r31, 0x23	; 35
    16bc:	86 81       	ldd	r24, Z+6	; 0x06
    16be:	97 81       	ldd	r25, Z+7	; 0x07
    16c0:	22 85       	ldd	r18, Z+10	; 0x0a
    16c2:	33 85       	ldd	r19, Z+11	; 0x0b
    16c4:	82 17       	cp	r24, r18
    16c6:	93 07       	cpc	r25, r19
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <udc_process_setup+0x15a>
    16ca:	eb c1       	rjmp	.+982    	; 0x1aa2 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    16cc:	80 93 f4 23 	sts	0x23F4, r24	; 0x8023f4 <udd_g_ctrlreq+0xa>
    16d0:	90 93 f5 23 	sts	0x23F5, r25	; 0x8023f5 <udd_g_ctrlreq+0xb>
    16d4:	e6 c1       	rjmp	.+972    	; 0x1aa2 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    16d6:	21 30       	cpi	r18, 0x01	; 1
    16d8:	31 05       	cpc	r19, r1
    16da:	09 f0       	breq	.+2      	; 0x16de <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    16dc:	8c c1       	rjmp	.+792    	; 0x19f6 <udc_process_setup+0x484>
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	8c e1       	ldi	r24, 0x1C	; 28
    16e4:	92 e2       	ldi	r25, 0x22	; 34
    16e6:	d0 d5       	rcall	.+2976   	; 0x2288 <udd_set_setup_payload>
    16e8:	dc c1       	rjmp	.+952    	; 0x1aa2 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	e1 f5       	brne	.+120    	; 0x1766 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    16ee:	90 91 eb 23 	lds	r25, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x1>
    16f2:	9a 30       	cpi	r25, 0x0A	; 10
    16f4:	c1 f5       	brne	.+112    	; 0x1766 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    16f6:	21 30       	cpi	r18, 0x01	; 1
    16f8:	31 05       	cpc	r19, r1
    16fa:	09 f0       	breq	.+2      	; 0x16fe <udc_process_setup+0x18c>
    16fc:	4c c1       	rjmp	.+664    	; 0x1996 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    16fe:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udc_num_configuration>
    1702:	88 23       	and	r24, r24
    1704:	09 f4       	brne	.+2      	; 0x1708 <udc_process_setup+0x196>
    1706:	47 c1       	rjmp	.+654    	; 0x1996 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1708:	c0 91 ee 23 	lds	r28, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0x4>
    170c:	d0 91 ef 23 	lds	r29, 0x23EF	; 0x8023ef <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1710:	00 91 1a 22 	lds	r16, 0x221A	; 0x80221a <udc_ptr_conf>
    1714:	10 91 1b 22 	lds	r17, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    1718:	d8 01       	movw	r26, r16
    171a:	ed 91       	ld	r30, X+
    171c:	fc 91       	ld	r31, X
    171e:	84 81       	ldd	r24, Z+4	; 0x04
    1720:	c8 17       	cp	r28, r24
    1722:	08 f0       	brcs	.+2      	; 0x1726 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1724:	38 c1       	rjmp	.+624    	; 0x1996 <udc_process_setup+0x424>
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	8c 2f       	mov	r24, r28
    172a:	14 de       	rcall	.-984    	; 0x1354 <udc_update_iface_desc>
    172c:	88 23       	and	r24, r24
    172e:	09 f4       	brne	.+2      	; 0x1732 <udc_process_setup+0x1c0>
    1730:	2d c1       	rjmp	.+602    	; 0x198c <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1732:	ce 01       	movw	r24, r28
    1734:	99 27       	eor	r25, r25
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	d8 01       	movw	r26, r16
    173c:	12 96       	adiw	r26, 0x02	; 2
    173e:	ed 91       	ld	r30, X+
    1740:	fc 91       	ld	r31, X
    1742:	13 97       	sbiw	r26, 0x03	; 3
    1744:	e8 0f       	add	r30, r24
    1746:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1748:	01 90       	ld	r0, Z+
    174a:	f0 81       	ld	r31, Z
    174c:	e0 2d       	mov	r30, r0
    174e:	86 81       	ldd	r24, Z+6	; 0x06
    1750:	97 81       	ldd	r25, Z+7	; 0x07
    1752:	fc 01       	movw	r30, r24
    1754:	19 95       	eicall
    1756:	80 93 1e 22 	sts	0x221E, r24	; 0x80221e <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    175a:	61 e0       	ldi	r22, 0x01	; 1
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	8e e1       	ldi	r24, 0x1E	; 30
    1760:	92 e2       	ldi	r25, 0x22	; 34
    1762:	92 d5       	rcall	.+2852   	; 0x2288 <udd_set_setup_payload>
    1764:	9e c1       	rjmp	.+828    	; 0x1aa2 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1766:	82 30       	cpi	r24, 0x02	; 2
    1768:	09 f0       	breq	.+2      	; 0x176c <udc_process_setup+0x1fa>
    176a:	10 c1       	rjmp	.+544    	; 0x198c <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    176c:	80 91 eb 23 	lds	r24, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x1>
    1770:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1772:	05 c1       	rjmp	.+522    	; 0x197e <udc_process_setup+0x40c>
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	09 f0       	breq	.+2      	; 0x177c <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    177a:	3d c1       	rjmp	.+634    	; 0x19f6 <udc_process_setup+0x484>
    177c:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0x4>
    1780:	12 d6       	rcall	.+3108   	; 0x23a6 <udd_ep_is_halted>
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	80 93 16 22 	sts	0x2216, r24	; 0x802216 <udc_ep_status.4585>
    1788:	90 93 17 22 	sts	0x2217, r25	; 0x802217 <udc_ep_status.4585+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    178c:	62 e0       	ldi	r22, 0x02	; 2
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	86 e1       	ldi	r24, 0x16	; 22
    1792:	92 e2       	ldi	r25, 0x22	; 34
    1794:	79 d5       	rcall	.+2802   	; 0x2288 <udd_set_setup_payload>
    1796:	85 c1       	rjmp	.+778    	; 0x1aa2 <udc_process_setup+0x530>
    1798:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    179a:	09 f0       	breq	.+2      	; 0x179e <udc_process_setup+0x22c>
    179c:	9f c0       	rjmp	.+318    	; 0x18dc <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    179e:	90 91 eb 23 	lds	r25, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x1>
    17a2:	93 30       	cpi	r25, 0x03	; 3
    17a4:	91 f1       	breq	.+100    	; 0x180a <udc_process_setup+0x298>
    17a6:	18 f4       	brcc	.+6      	; 0x17ae <udc_process_setup+0x23c>
    17a8:	91 30       	cpi	r25, 0x01	; 1
    17aa:	a9 f0       	breq	.+42     	; 0x17d6 <udc_process_setup+0x264>
    17ac:	97 c0       	rjmp	.+302    	; 0x18dc <udc_process_setup+0x36a>
    17ae:	95 30       	cpi	r25, 0x05	; 5
    17b0:	21 f0       	breq	.+8      	; 0x17ba <udc_process_setup+0x248>
    17b2:	99 30       	cpi	r25, 0x09	; 9
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <udc_process_setup+0x246>
    17b6:	43 c0       	rjmp	.+134    	; 0x183e <udc_process_setup+0x2cc>
    17b8:	91 c0       	rjmp	.+290    	; 0x18dc <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    17ba:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
    17be:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
    17c2:	89 2b       	or	r24, r25
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <udc_process_setup+0x256>
    17c6:	17 c1       	rjmp	.+558    	; 0x19f6 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    17c8:	85 ea       	ldi	r24, 0xA5	; 165
    17ca:	99 e0       	ldi	r25, 0x09	; 9
    17cc:	80 93 f6 23 	sts	0x23F6, r24	; 0x8023f6 <udd_g_ctrlreq+0xc>
    17d0:	90 93 f7 23 	sts	0x23F7, r25	; 0x8023f7 <udd_g_ctrlreq+0xd>
    17d4:	66 c1       	rjmp	.+716    	; 0x1aa2 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    17d6:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
    17da:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
    17de:	89 2b       	or	r24, r25
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <udc_process_setup+0x272>
    17e2:	09 c1       	rjmp	.+530    	; 0x19f6 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    17e4:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x2>
    17e8:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x3>
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <udc_process_setup+0x280>
    17f0:	02 c1       	rjmp	.+516    	; 0x19f6 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    17f2:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <udc_device_status>
    17f6:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <udc_device_status+0x1>
    17fa:	8d 7f       	andi	r24, 0xFD	; 253
    17fc:	80 93 20 22 	sts	0x2220, r24	; 0x802220 <udc_device_status>
    1800:	90 93 21 22 	sts	0x2221, r25	; 0x802221 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1804:	0e 94 5d 15 	call	0x2aba	; 0x2aba <main_remotewakeup_disable>
    1808:	4c c1       	rjmp	.+664    	; 0x1aa2 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    180a:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
    180e:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
    1812:	89 2b       	or	r24, r25
    1814:	09 f0       	breq	.+2      	; 0x1818 <udc_process_setup+0x2a6>
    1816:	ef c0       	rjmp	.+478    	; 0x19f6 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1818:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x2>
    181c:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x3>
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	09 f0       	breq	.+2      	; 0x1826 <udc_process_setup+0x2b4>
    1824:	ae c0       	rjmp	.+348    	; 0x1982 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1826:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <udc_device_status>
    182a:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <udc_device_status+0x1>
    182e:	82 60       	ori	r24, 0x02	; 2
    1830:	80 93 20 22 	sts	0x2220, r24	; 0x802220 <udc_device_status>
    1834:	90 93 21 22 	sts	0x2221, r25	; 0x802221 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1838:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    183c:	32 c1       	rjmp	.+612    	; 0x1aa2 <udc_process_setup+0x530>
    183e:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
    1842:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
    1846:	89 2b       	or	r24, r25
    1848:	09 f0       	breq	.+2      	; 0x184c <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    184a:	d5 c0       	rjmp	.+426    	; 0x19f6 <udc_process_setup+0x484>
    184c:	1a d5       	rcall	.+2612   	; 0x2282 <udd_getaddress>
    184e:	88 23       	and	r24, r24
    1850:	09 f4       	brne	.+2      	; 0x1854 <udc_process_setup+0x2e2>
    1852:	9c c0       	rjmp	.+312    	; 0x198c <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1854:	20 91 ec 23 	lds	r18, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x2>
    1858:	30 91 ed 23 	lds	r19, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    185c:	33 27       	eor	r19, r19
    185e:	e0 91 29 20 	lds	r30, 0x2029	; 0x802029 <udc_config>
    1862:	f0 91 2a 20 	lds	r31, 0x202A	; 0x80202a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1866:	81 89       	ldd	r24, Z+17	; 0x11
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	82 17       	cp	r24, r18
    186c:	93 07       	cpc	r25, r19
    186e:	08 f4       	brcc	.+2      	; 0x1872 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1870:	8d c0       	rjmp	.+282    	; 0x198c <udc_process_setup+0x41a>
    1872:	25 de       	rcall	.-950    	; 0x14be <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1874:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x2>
    1878:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x3>
    187c:	80 93 1c 22 	sts	0x221C, r24	; 0x80221c <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1880:	88 23       	and	r24, r24
    1882:	09 f4       	brne	.+2      	; 0x1886 <udc_process_setup+0x314>
    1884:	0e c1       	rjmp	.+540    	; 0x1aa2 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1886:	99 27       	eor	r25, r25
    1888:	81 50       	subi	r24, 0x01	; 1
    188a:	90 4c       	sbci	r25, 0xC0	; 192
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	e0 91 2b 20 	lds	r30, 0x202B	; 0x80202b <udc_config+0x2>
    1898:	f0 91 2c 20 	lds	r31, 0x202C	; 0x80202c <udc_config+0x3>
    189c:	e8 0f       	add	r30, r24
    189e:	f9 1f       	adc	r31, r25
    18a0:	e0 93 1a 22 	sts	0x221A, r30	; 0x80221a <udc_ptr_conf>
    18a4:	f0 93 1b 22 	sts	0x221B, r31	; 0x80221b <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18a8:	01 90       	ld	r0, Z+
    18aa:	f0 81       	ld	r31, Z
    18ac:	e0 2d       	mov	r30, r0
    18ae:	84 81       	ldd	r24, Z+4	; 0x04
    18b0:	88 23       	and	r24, r24
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <udc_process_setup+0x344>
    18b4:	f6 c0       	rjmp	.+492    	; 0x1aa2 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    18b6:	c0 e0       	ldi	r28, 0x00	; 0
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	8c 2f       	mov	r24, r28
    18bc:	c7 dd       	rcall	.-1138   	; 0x144c <udc_iface_enable>
    18be:	88 23       	and	r24, r24
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <udc_process_setup+0x352>
    18c2:	64 c0       	rjmp	.+200    	; 0x198c <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    18c4:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18c6:	e0 91 1a 22 	lds	r30, 0x221A	; 0x80221a <udc_ptr_conf>
    18ca:	f0 91 1b 22 	lds	r31, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    18ce:	01 90       	ld	r0, Z+
    18d0:	f0 81       	ld	r31, Z
    18d2:	e0 2d       	mov	r30, r0
    18d4:	84 81       	ldd	r24, Z+4	; 0x04
    18d6:	c8 17       	cp	r28, r24
    18d8:	78 f3       	brcs	.-34     	; 0x18b8 <udc_process_setup+0x346>
    18da:	e3 c0       	rjmp	.+454    	; 0x1aa2 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	e9 f4       	brne	.+58     	; 0x191a <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    18e0:	90 91 eb 23 	lds	r25, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x1>
    18e4:	9b 30       	cpi	r25, 0x0B	; 11
    18e6:	c9 f4       	brne	.+50     	; 0x191a <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    18e8:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
    18ec:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
    18f0:	89 2b       	or	r24, r25
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    18f4:	50 c0       	rjmp	.+160    	; 0x1996 <udc_process_setup+0x424>
    18f6:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udc_num_configuration>
    18fa:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18fc:	09 f4       	brne	.+2      	; 0x1900 <udc_process_setup+0x38e>
    18fe:	4b c0       	rjmp	.+150    	; 0x1996 <udc_process_setup+0x424>
    1900:	ea ee       	ldi	r30, 0xEA	; 234
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1902:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1904:	c4 81       	ldd	r28, Z+4	; 0x04
    1906:	d2 81       	ldd	r29, Z+2	; 0x02
    1908:	8c 2f       	mov	r24, r28
    190a:	5e dd       	rcall	.-1348   	; 0x13c8 <udc_iface_disable>
    190c:	88 23       	and	r24, r24
    190e:	09 f4       	brne	.+2      	; 0x1912 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1910:	3d c0       	rjmp	.+122    	; 0x198c <udc_process_setup+0x41a>
    1912:	6d 2f       	mov	r22, r29
    1914:	8c 2f       	mov	r24, r28
    1916:	9a dd       	rcall	.-1228   	; 0x144c <udc_iface_enable>
    1918:	37 c0       	rjmp	.+110    	; 0x1988 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    191a:	82 30       	cpi	r24, 0x02	; 2
    191c:	b9 f5       	brne	.+110    	; 0x198c <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    191e:	80 91 eb 23 	lds	r24, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x1>
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	19 f0       	breq	.+6      	; 0x192c <udc_process_setup+0x3ba>
    1926:	83 30       	cpi	r24, 0x03	; 3
    1928:	99 f0       	breq	.+38     	; 0x1950 <udc_process_setup+0x3de>
    192a:	2d c0       	rjmp	.+90     	; 0x1986 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    192c:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
    1930:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
    1934:	89 2b       	or	r24, r25
    1936:	09 f0       	breq	.+2      	; 0x193a <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1938:	5e c0       	rjmp	.+188    	; 0x19f6 <udc_process_setup+0x484>
    193a:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x2>
    193e:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x3>
    1942:	89 2b       	or	r24, r25
    1944:	09 f0       	breq	.+2      	; 0x1948 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1946:	57 c0       	rjmp	.+174    	; 0x19f6 <udc_process_setup+0x484>
    1948:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0x4>
    194c:	47 d5       	rcall	.+2702   	; 0x23dc <udd_ep_clear_halt>
    194e:	1c c0       	rjmp	.+56     	; 0x1988 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1950:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
    1954:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
    1958:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    195a:	09 f0       	breq	.+2      	; 0x195e <udc_process_setup+0x3ec>
    195c:	4c c0       	rjmp	.+152    	; 0x19f6 <udc_process_setup+0x484>
    195e:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x2>
    1962:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x3>
    1966:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1968:	09 f0       	breq	.+2      	; 0x196c <udc_process_setup+0x3fa>
    196a:	45 c0       	rjmp	.+138    	; 0x19f6 <udc_process_setup+0x484>
    196c:	ca ee       	ldi	r28, 0xEA	; 234
    196e:	d3 e2       	ldi	r29, 0x23	; 35
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1972:	35 d6       	rcall	.+3178   	; 0x25de <udd_ep_abort>
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9e d6       	rcall	.+3388   	; 0x26b4 <udd_ep_set_halt>
    1978:	07 c0       	rjmp	.+14     	; 0x1988 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	05 c0       	rjmp	.+10     	; 0x1988 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	03 c0       	rjmp	.+6      	; 0x1988 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1986:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1988:	81 11       	cpse	r24, r1
    198a:	8c c0       	rjmp	.+280    	; 0x1aa4 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    198c:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <udd_g_ctrlreq>
    1990:	8f 71       	andi	r24, 0x1F	; 31
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	81 f5       	brne	.+96     	; 0x19f6 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1996:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udc_num_configuration>
    199a:	88 23       	and	r24, r24
    199c:	09 f4       	brne	.+2      	; 0x19a0 <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    199e:	71 c0       	rjmp	.+226    	; 0x1a82 <udc_process_setup+0x510>
    19a0:	00 91 ee 23 	lds	r16, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0x4>
    19a4:	10 91 ef 23 	lds	r17, 0x23EF	; 0x8023ef <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    19a8:	c0 91 1a 22 	lds	r28, 0x221A	; 0x80221a <udc_ptr_conf>
    19ac:	d0 91 1b 22 	lds	r29, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    19b0:	e8 81       	ld	r30, Y
    19b2:	f9 81       	ldd	r31, Y+1	; 0x01
    19b4:	84 81       	ldd	r24, Z+4	; 0x04
    19b6:	08 17       	cp	r16, r24
    19b8:	08 f0       	brcs	.+2      	; 0x19bc <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    19ba:	65 c0       	rjmp	.+202    	; 0x1a86 <udc_process_setup+0x514>
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	80 2f       	mov	r24, r16
    19c0:	c9 dc       	rcall	.-1646   	; 0x1354 <udc_update_iface_desc>
    19c2:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    19c4:	c1 f0       	breq	.+48     	; 0x19f6 <udc_process_setup+0x484>
    19c6:	f8 01       	movw	r30, r16
    19c8:	ff 27       	eor	r31, r31
    19ca:	cf 01       	movw	r24, r30
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	ea 81       	ldd	r30, Y+2	; 0x02
    19d2:	fb 81       	ldd	r31, Y+3	; 0x03
    19d4:	e8 0f       	add	r30, r24
    19d6:	f9 1f       	adc	r31, r25
    19d8:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    19da:	d1 81       	ldd	r29, Z+1	; 0x01
    19dc:	ee 81       	ldd	r30, Y+6	; 0x06
    19de:	ff 81       	ldd	r31, Y+7	; 0x07
    19e0:	19 95       	eicall
    19e2:	68 2f       	mov	r22, r24
    19e4:	80 2f       	mov	r24, r16
    19e6:	b6 dc       	rcall	.-1684   	; 0x1354 <udc_update_iface_desc>
    19e8:	88 23       	and	r24, r24
    19ea:	29 f0       	breq	.+10     	; 0x19f6 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    19ec:	ec 81       	ldd	r30, Y+4	; 0x04
    19ee:	fd 81       	ldd	r31, Y+5	; 0x05
    19f0:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    19f2:	81 11       	cpse	r24, r1
    19f4:	57 c0       	rjmp	.+174    	; 0x1aa4 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    19f6:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <udd_g_ctrlreq>
    19fa:	8f 71       	andi	r24, 0x1F	; 31
    19fc:	82 30       	cpi	r24, 0x02	; 2
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <udc_process_setup+0x490>
    1a00:	44 c0       	rjmp	.+136    	; 0x1a8a <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1a02:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udc_num_configuration>
    1a06:	88 23       	and	r24, r24
    1a08:	b1 f1       	breq	.+108    	; 0x1a76 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a0a:	a0 91 1a 22 	lds	r26, 0x221A	; 0x80221a <udc_ptr_conf>
    1a0e:	b0 91 1b 22 	lds	r27, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    1a12:	ed 91       	ld	r30, X+
    1a14:	fc 91       	ld	r31, X
    1a16:	11 97       	sbiw	r26, 0x01	; 1
    1a18:	84 81       	ldd	r24, Z+4	; 0x04
    1a1a:	88 23       	and	r24, r24
    1a1c:	71 f1       	breq	.+92     	; 0x1a7a <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a1e:	c0 e0       	ldi	r28, 0x00	; 0
    1a20:	ec 2f       	mov	r30, r28
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	ee 0f       	add	r30, r30
    1a26:	ff 1f       	adc	r31, r31
    1a28:	12 96       	adiw	r26, 0x02	; 2
    1a2a:	8d 91       	ld	r24, X+
    1a2c:	9c 91       	ld	r25, X
    1a2e:	13 97       	sbiw	r26, 0x03	; 3
    1a30:	e8 0f       	add	r30, r24
    1a32:	f9 1f       	adc	r31, r25
    1a34:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1a36:	11 81       	ldd	r17, Z+1	; 0x01
    1a38:	d8 01       	movw	r26, r16
    1a3a:	16 96       	adiw	r26, 0x06	; 6
    1a3c:	ed 91       	ld	r30, X+
    1a3e:	fc 91       	ld	r31, X
    1a40:	17 97       	sbiw	r26, 0x07	; 7
    1a42:	19 95       	eicall
    1a44:	68 2f       	mov	r22, r24
    1a46:	8c 2f       	mov	r24, r28
    1a48:	85 dc       	rcall	.-1782   	; 0x1354 <udc_update_iface_desc>
    1a4a:	88 23       	and	r24, r24
    1a4c:	59 f1       	breq	.+86     	; 0x1aa4 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1a4e:	d8 01       	movw	r26, r16
    1a50:	14 96       	adiw	r26, 0x04	; 4
    1a52:	ed 91       	ld	r30, X+
    1a54:	fc 91       	ld	r31, X
    1a56:	15 97       	sbiw	r26, 0x05	; 5
    1a58:	19 95       	eicall
    1a5a:	81 11       	cpse	r24, r1
    1a5c:	23 c0       	rjmp	.+70     	; 0x1aa4 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1a5e:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a60:	a0 91 1a 22 	lds	r26, 0x221A	; 0x80221a <udc_ptr_conf>
    1a64:	b0 91 1b 22 	lds	r27, 0x221B	; 0x80221b <udc_ptr_conf+0x1>
    1a68:	ed 91       	ld	r30, X+
    1a6a:	fc 91       	ld	r31, X
    1a6c:	11 97       	sbiw	r26, 0x01	; 1
    1a6e:	94 81       	ldd	r25, Z+4	; 0x04
    1a70:	c9 17       	cp	r28, r25
    1a72:	b0 f2       	brcs	.-84     	; 0x1a20 <udc_process_setup+0x4ae>
    1a74:	17 c0       	rjmp	.+46     	; 0x1aa4 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	15 c0       	rjmp	.+42     	; 0x1aa4 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	13 c0       	rjmp	.+38     	; 0x1aa4 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	11 c0       	rjmp	.+34     	; 0x1aa4 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	0f c0       	rjmp	.+30     	; 0x1aa4 <udc_process_setup+0x532>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	0d c0       	rjmp	.+26     	; 0x1aa4 <udc_process_setup+0x532>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	0b c0       	rjmp	.+22     	; 0x1aa4 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1a8e:	98 2f       	mov	r25, r24
    1a90:	90 76       	andi	r25, 0x60	; 96
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <udc_process_setup+0x524>
    1a94:	7b cf       	rjmp	.-266    	; 0x198c <udc_process_setup+0x41a>
    1a96:	80 ce       	rjmp	.-768    	; 0x1798 <udc_process_setup+0x226>
    1a98:	98 2f       	mov	r25, r24
    1a9a:	90 76       	andi	r25, 0x60	; 96
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <udc_process_setup+0x52e>
    1a9e:	76 cf       	rjmp	.-276    	; 0x198c <udc_process_setup+0x41a>
    1aa0:	81 cd       	rjmp	.-1278   	; 0x15a4 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	08 95       	ret

00001aae <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1aae:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1ab2:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1ab4:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1ab6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1aba:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1abc:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1ac0:	08 95       	ret

00001ac2 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1ac2:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1ac4:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1ac6:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1ac8:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1aca:	60 83       	st	Z, r22
	ret                             // Return to caller
    1acc:	08 95       	ret

00001ace <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	1f 92       	push	r1
    1ad4:	1f 92       	push	r1
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	81 11       	cpse	r24, r1
    1adc:	26 c0       	rjmp	.+76     	; 0x1b2a <udd_sleep_mode+0x5c>
    1ade:	90 91 e0 23 	lds	r25, 0x23E0	; 0x8023e0 <udd_b_idle>
    1ae2:	99 23       	and	r25, r25
    1ae4:	f9 f0       	breq	.+62     	; 0x1b24 <udd_sleep_mode+0x56>
    1ae6:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <sleepmgr_locks+0x1>
    1aea:	91 11       	cpse	r25, r1
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <udd_sleep_mode+0x22>
    1aee:	ff cf       	rjmp	.-2      	; 0x1aee <udd_sleep_mode+0x20>
    1af0:	9f b7       	in	r25, 0x3f	; 63
    1af2:	9a 83       	std	Y+2, r25	; 0x02
    1af4:	f8 94       	cli
    1af6:	2a 81       	ldd	r18, Y+2	; 0x02
    1af8:	e4 ee       	ldi	r30, 0xE4	; 228
    1afa:	f3 e2       	ldi	r31, 0x23	; 35
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	91 50       	subi	r25, 0x01	; 1
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	2f bf       	out	0x3f, r18	; 63
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <udd_sleep_mode+0x56>
    1b06:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <sleepmgr_locks+0x1>
    1b0a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <udd_sleep_mode+0x42>
    1b0e:	ff cf       	rjmp	.-2      	; 0x1b0e <udd_sleep_mode+0x40>
    1b10:	9f b7       	in	r25, 0x3f	; 63
    1b12:	99 83       	std	Y+1, r25	; 0x01
    1b14:	f8 94       	cli
    1b16:	29 81       	ldd	r18, Y+1	; 0x01
    1b18:	e4 ee       	ldi	r30, 0xE4	; 228
    1b1a:	f3 e2       	ldi	r31, 0x23	; 35
    1b1c:	91 81       	ldd	r25, Z+1	; 0x01
    1b1e:	9f 5f       	subi	r25, 0xFF	; 255
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	2f bf       	out	0x3f, r18	; 63
    1b24:	80 93 e0 23 	sts	0x23E0, r24	; 0x8023e0 <udd_b_idle>
    1b28:	05 c0       	rjmp	.+10     	; 0x1b34 <udd_sleep_mode+0x66>
    1b2a:	90 91 e0 23 	lds	r25, 0x23E0	; 0x8023e0 <udd_b_idle>
    1b2e:	99 23       	and	r25, r25
    1b30:	51 f3       	breq	.-44     	; 0x1b06 <udd_sleep_mode+0x38>
    1b32:	f8 cf       	rjmp	.-16     	; 0x1b24 <udd_sleep_mode+0x56>
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	08 95       	ret

00001b3e <udd_ctrl_init>:
    1b3e:	0f 93       	push	r16
    1b40:	e8 ec       	ldi	r30, 0xC8	; 200
    1b42:	f4 e0       	ldi	r31, 0x04	; 4
    1b44:	80 81       	ld	r24, Z
    1b46:	8f 7d       	andi	r24, 0xDF	; 223
    1b48:	80 83       	st	Z, r24
    1b4a:	80 81       	ld	r24, Z
    1b4c:	8f 7d       	andi	r24, 0xDF	; 223
    1b4e:	80 83       	st	Z, r24
    1b50:	e4 e9       	ldi	r30, 0x94	; 148
    1b52:	f3 e2       	ldi	r31, 0x23	; 35
    1b54:	02 e0       	ldi	r16, 0x02	; 2
    1b56:	05 93       	las	Z, r16
    1b58:	10 92 96 23 	sts	0x2396, r1	; 0x802396 <udd_sram+0x1e>
    1b5c:	10 92 97 23 	sts	0x2397, r1	; 0x802397 <udd_sram+0x1f>
    1b60:	00 e2       	ldi	r16, 0x20	; 32
    1b62:	06 93       	lac	Z, r16
    1b64:	00 e4       	ldi	r16, 0x40	; 64
    1b66:	06 93       	lac	Z, r16
    1b68:	ec e8       	ldi	r30, 0x8C	; 140
    1b6a:	f3 e2       	ldi	r31, 0x23	; 35
    1b6c:	00 e4       	ldi	r16, 0x40	; 64
    1b6e:	06 93       	lac	Z, r16
    1b70:	ea ee       	ldi	r30, 0xEA	; 234
    1b72:	f3 e2       	ldi	r31, 0x23	; 35
    1b74:	14 86       	std	Z+12, r1	; 0x0c
    1b76:	15 86       	std	Z+13, r1	; 0x0d
    1b78:	16 86       	std	Z+14, r1	; 0x0e
    1b7a:	17 86       	std	Z+15, r1	; 0x0f
    1b7c:	12 86       	std	Z+10, r1	; 0x0a
    1b7e:	13 86       	std	Z+11, r1	; 0x0b
    1b80:	10 92 77 23 	sts	0x2377, r1	; 0x802377 <udd_ep_control_state>
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <udd_ctrl_stall_data>:
    1b88:	0f 93       	push	r16
    1b8a:	85 e0       	ldi	r24, 0x05	; 5
    1b8c:	80 93 77 23 	sts	0x2377, r24	; 0x802377 <udd_ep_control_state>
    1b90:	e5 e9       	ldi	r30, 0x95	; 149
    1b92:	f3 e2       	ldi	r31, 0x23	; 35
    1b94:	04 e0       	ldi	r16, 0x04	; 4
    1b96:	05 93       	las	Z, r16
    1b98:	ed e8       	ldi	r30, 0x8D	; 141
    1b9a:	f3 e2       	ldi	r31, 0x23	; 35
    1b9c:	04 e0       	ldi	r16, 0x04	; 4
    1b9e:	05 93       	las	Z, r16
    1ba0:	0f 91       	pop	r16
    1ba2:	08 95       	ret

00001ba4 <udd_ctrl_send_zlp_in>:
    1ba4:	0f 93       	push	r16
    1ba6:	83 e0       	ldi	r24, 0x03	; 3
    1ba8:	80 93 77 23 	sts	0x2377, r24	; 0x802377 <udd_ep_control_state>
    1bac:	10 92 96 23 	sts	0x2396, r1	; 0x802396 <udd_sram+0x1e>
    1bb0:	10 92 97 23 	sts	0x2397, r1	; 0x802397 <udd_sram+0x1f>
    1bb4:	e4 e9       	ldi	r30, 0x94	; 148
    1bb6:	f3 e2       	ldi	r31, 0x23	; 35
    1bb8:	02 e0       	ldi	r16, 0x02	; 2
    1bba:	06 93       	lac	Z, r16
    1bbc:	0f 91       	pop	r16
    1bbe:	08 95       	ret

00001bc0 <udd_ctrl_endofrequest>:
    1bc0:	e0 91 f6 23 	lds	r30, 0x23F6	; 0x8023f6 <udd_g_ctrlreq+0xc>
    1bc4:	f0 91 f7 23 	lds	r31, 0x23F7	; 0x8023f7 <udd_g_ctrlreq+0xd>
    1bc8:	30 97       	sbiw	r30, 0x00	; 0
    1bca:	09 f0       	breq	.+2      	; 0x1bce <udd_ctrl_endofrequest+0xe>
    1bcc:	19 95       	eicall
    1bce:	08 95       	ret

00001bd0 <udd_ctrl_in_sent>:
    1bd0:	0f 93       	push	r16
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	80 91 77 23 	lds	r24, 0x2377	; 0x802377 <udd_ep_control_state>
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	19 f4       	brne	.+6      	; 0x1be4 <udd_ctrl_in_sent+0x14>
    1bde:	f0 df       	rcall	.-32     	; 0x1bc0 <udd_ctrl_endofrequest>
    1be0:	ae df       	rcall	.-164    	; 0x1b3e <udd_ctrl_init>
    1be2:	5e c0       	rjmp	.+188    	; 0x1ca0 <udd_ctrl_in_sent+0xd0>
    1be4:	80 91 73 23 	lds	r24, 0x2373	; 0x802373 <udd_ctrl_payload_nb_trans>
    1be8:	90 91 74 23 	lds	r25, 0x2374	; 0x802374 <udd_ctrl_payload_nb_trans+0x1>
    1bec:	c0 91 f4 23 	lds	r28, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0xa>
    1bf0:	d0 91 f5 23 	lds	r29, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0xb>
    1bf4:	c8 1b       	sub	r28, r24
    1bf6:	d9 0b       	sbc	r29, r25
    1bf8:	71 f5       	brne	.+92     	; 0x1c56 <udd_ctrl_in_sent+0x86>
    1bfa:	20 91 75 23 	lds	r18, 0x2375	; 0x802375 <udd_ctrl_prev_payload_nb_trans>
    1bfe:	30 91 76 23 	lds	r19, 0x2376	; 0x802376 <udd_ctrl_prev_payload_nb_trans+0x1>
    1c02:	82 0f       	add	r24, r18
    1c04:	93 1f       	adc	r25, r19
    1c06:	80 93 75 23 	sts	0x2375, r24	; 0x802375 <udd_ctrl_prev_payload_nb_trans>
    1c0a:	90 93 76 23 	sts	0x2376, r25	; 0x802376 <udd_ctrl_prev_payload_nb_trans+0x1>
    1c0e:	20 91 f0 23 	lds	r18, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
    1c12:	30 91 f1 23 	lds	r19, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
    1c16:	82 17       	cp	r24, r18
    1c18:	93 07       	cpc	r25, r19
    1c1a:	21 f0       	breq	.+8      	; 0x1c24 <udd_ctrl_in_sent+0x54>
    1c1c:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <b_shortpacket.5301>
    1c20:	88 23       	and	r24, r24
    1c22:	41 f0       	breq	.+16     	; 0x1c34 <udd_ctrl_in_sent+0x64>
    1c24:	84 e0       	ldi	r24, 0x04	; 4
    1c26:	80 93 77 23 	sts	0x2377, r24	; 0x802377 <udd_ep_control_state>
    1c2a:	ec e8       	ldi	r30, 0x8C	; 140
    1c2c:	f3 e2       	ldi	r31, 0x23	; 35
    1c2e:	02 e0       	ldi	r16, 0x02	; 2
    1c30:	06 93       	lac	Z, r16
    1c32:	36 c0       	rjmp	.+108    	; 0x1ca0 <udd_ctrl_in_sent+0xd0>
    1c34:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0xe>
    1c38:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0xf>
    1c3c:	30 97       	sbiw	r30, 0x00	; 0
    1c3e:	99 f0       	breq	.+38     	; 0x1c66 <udd_ctrl_in_sent+0x96>
    1c40:	19 95       	eicall
    1c42:	88 23       	and	r24, r24
    1c44:	81 f0       	breq	.+32     	; 0x1c66 <udd_ctrl_in_sent+0x96>
    1c46:	10 92 73 23 	sts	0x2373, r1	; 0x802373 <udd_ctrl_payload_nb_trans>
    1c4a:	10 92 74 23 	sts	0x2374, r1	; 0x802374 <udd_ctrl_payload_nb_trans+0x1>
    1c4e:	c0 91 f4 23 	lds	r28, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0xa>
    1c52:	d0 91 f5 23 	lds	r29, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0xb>
    1c56:	c8 30       	cpi	r28, 0x08	; 8
    1c58:	d1 05       	cpc	r29, r1
    1c5a:	28 f0       	brcs	.+10     	; 0x1c66 <udd_ctrl_in_sent+0x96>
    1c5c:	10 92 22 22 	sts	0x2222, r1	; 0x802222 <b_shortpacket.5301>
    1c60:	c8 e0       	ldi	r28, 0x08	; 8
    1c62:	d0 e0       	ldi	r29, 0x00	; 0
    1c64:	03 c0       	rjmp	.+6      	; 0x1c6c <udd_ctrl_in_sent+0x9c>
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	80 93 22 22 	sts	0x2222, r24	; 0x802222 <b_shortpacket.5301>
    1c6c:	e8 e7       	ldi	r30, 0x78	; 120
    1c6e:	f3 e2       	ldi	r31, 0x23	; 35
    1c70:	c6 8f       	std	Z+30, r28	; 0x1e
    1c72:	d7 8f       	std	Z+31, r29	; 0x1f
    1c74:	80 91 73 23 	lds	r24, 0x2373	; 0x802373 <udd_ctrl_payload_nb_trans>
    1c78:	90 91 74 23 	lds	r25, 0x2374	; 0x802374 <udd_ctrl_payload_nb_trans+0x1>
    1c7c:	20 91 f2 23 	lds	r18, 0x23F2	; 0x8023f2 <udd_g_ctrlreq+0x8>
    1c80:	30 91 f3 23 	lds	r19, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0x9>
    1c84:	28 0f       	add	r18, r24
    1c86:	39 1f       	adc	r19, r25
    1c88:	20 a3       	std	Z+32, r18	; 0x20
    1c8a:	31 a3       	std	Z+33, r19	; 0x21
    1c8c:	c8 0f       	add	r28, r24
    1c8e:	d9 1f       	adc	r29, r25
    1c90:	c0 93 73 23 	sts	0x2373, r28	; 0x802373 <udd_ctrl_payload_nb_trans>
    1c94:	d0 93 74 23 	sts	0x2374, r29	; 0x802374 <udd_ctrl_payload_nb_trans+0x1>
    1c98:	e4 e9       	ldi	r30, 0x94	; 148
    1c9a:	f3 e2       	ldi	r31, 0x23	; 35
    1c9c:	02 e0       	ldi	r16, 0x02	; 2
    1c9e:	06 93       	lac	Z, r16
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	0f 91       	pop	r16
    1ca6:	08 95       	ret

00001ca8 <udd_ep_get_size>:
    1ca8:	fc 01       	movw	r30, r24
    1caa:	81 81       	ldd	r24, Z+1	; 0x01
    1cac:	e8 2f       	mov	r30, r24
    1cae:	e7 70       	andi	r30, 0x07	; 7
    1cb0:	8e 2f       	mov	r24, r30
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	31 97       	sbiw	r30, 0x01	; 1
    1cb8:	e7 30       	cpi	r30, 0x07	; 7
    1cba:	f1 05       	cpc	r31, r1
    1cbc:	d0 f4       	brcc	.+52     	; 0x1cf2 <udd_ep_get_size+0x4a>
    1cbe:	88 27       	eor	r24, r24
    1cc0:	e9 5f       	subi	r30, 0xF9	; 249
    1cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc6:	23 c7       	rjmp	.+3654   	; 0x2b0e <__tablejump2__>
    1cc8:	80 e1       	ldi	r24, 0x10	; 16
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	08 95       	ret
    1cce:	80 e2       	ldi	r24, 0x20	; 32
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	08 95       	ret
    1cd4:	80 e4       	ldi	r24, 0x40	; 64
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	08 95       	ret
    1cda:	80 e8       	ldi	r24, 0x80	; 128
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	08 95       	ret
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	08 95       	ret
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	92 e0       	ldi	r25, 0x02	; 2
    1cea:	08 95       	ret
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	93 e0       	ldi	r25, 0x03	; 3
    1cf0:	08 95       	ret
    1cf2:	88 e0       	ldi	r24, 0x08	; 8
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	08 95       	ret

00001cf8 <udd_ep_get_job>:
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	2f 70       	andi	r18, 0x0F	; 15
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	22 0f       	add	r18, r18
    1d00:	33 1f       	adc	r19, r19
    1d02:	08 2e       	mov	r0, r24
    1d04:	00 0c       	add	r0, r0
    1d06:	99 0b       	sbc	r25, r25
    1d08:	88 27       	eor	r24, r24
    1d0a:	99 0f       	add	r25, r25
    1d0c:	88 1f       	adc	r24, r24
    1d0e:	99 27       	eor	r25, r25
    1d10:	82 0f       	add	r24, r18
    1d12:	93 1f       	adc	r25, r19
    1d14:	02 97       	sbiw	r24, 0x02	; 2
    1d16:	9c 01       	movw	r18, r24
    1d18:	22 0f       	add	r18, r18
    1d1a:	33 1f       	adc	r19, r19
    1d1c:	22 0f       	add	r18, r18
    1d1e:	33 1f       	adc	r19, r19
    1d20:	22 0f       	add	r18, r18
    1d22:	33 1f       	adc	r19, r19
    1d24:	82 0f       	add	r24, r18
    1d26:	93 1f       	adc	r25, r19
    1d28:	8d 5d       	subi	r24, 0xDD	; 221
    1d2a:	9c 4d       	sbci	r25, 0xDC	; 220
    1d2c:	08 95       	ret

00001d2e <udd_ctrl_interrupt_tc_setup>:
    1d2e:	0f 93       	push	r16
    1d30:	cf 93       	push	r28
    1d32:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1d36:	80 ff       	sbrs	r24, 0
    1d38:	64 c0       	rjmp	.+200    	; 0x1e02 <udd_ctrl_interrupt_tc_setup+0xd4>
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1d40:	ec e8       	ldi	r30, 0x8C	; 140
    1d42:	f3 e2       	ldi	r31, 0x23	; 35
    1d44:	00 e8       	ldi	r16, 0x80	; 128
    1d46:	06 93       	lac	Z, r16
    1d48:	e4 e9       	ldi	r30, 0x94	; 148
    1d4a:	f3 e2       	ldi	r31, 0x23	; 35
    1d4c:	00 e8       	ldi	r16, 0x80	; 128
    1d4e:	06 93       	lac	Z, r16
    1d50:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1d54:	ec e8       	ldi	r30, 0x8C	; 140
    1d56:	f3 e2       	ldi	r31, 0x23	; 35
    1d58:	00 e1       	ldi	r16, 0x10	; 16
    1d5a:	06 93       	lac	Z, r16
    1d5c:	80 91 77 23 	lds	r24, 0x2377	; 0x802377 <udd_ep_control_state>
    1d60:	88 23       	and	r24, r24
    1d62:	29 f0       	breq	.+10     	; 0x1d6e <udd_ctrl_interrupt_tc_setup+0x40>
    1d64:	83 50       	subi	r24, 0x03	; 3
    1d66:	82 30       	cpi	r24, 0x02	; 2
    1d68:	08 f4       	brcc	.+2      	; 0x1d6c <udd_ctrl_interrupt_tc_setup+0x3e>
    1d6a:	2a df       	rcall	.-428    	; 0x1bc0 <udd_ctrl_endofrequest>
    1d6c:	e8 de       	rcall	.-560    	; 0x1b3e <udd_ctrl_init>
    1d6e:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_sram+0x16>
    1d72:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <udd_sram+0x17>
    1d76:	08 97       	sbiw	r24, 0x08	; 8
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <udd_ctrl_interrupt_tc_setup+0x4e>
    1d7a:	45 c0       	rjmp	.+138    	; 0x1e06 <udd_ctrl_interrupt_tc_setup+0xd8>
    1d7c:	88 e0       	ldi	r24, 0x08	; 8
    1d7e:	eb e6       	ldi	r30, 0x6B	; 107
    1d80:	f3 e2       	ldi	r31, 0x23	; 35
    1d82:	aa ee       	ldi	r26, 0xEA	; 234
    1d84:	b3 e2       	ldi	r27, 0x23	; 35
    1d86:	01 90       	ld	r0, Z+
    1d88:	0d 92       	st	X+, r0
    1d8a:	8a 95       	dec	r24
    1d8c:	e1 f7       	brne	.-8      	; 0x1d86 <udd_ctrl_interrupt_tc_setup+0x58>
    1d8e:	e8 ec       	ldi	r30, 0xC8	; 200
    1d90:	f4 e0       	ldi	r31, 0x04	; 4
    1d92:	80 81       	ld	r24, Z
    1d94:	80 62       	ori	r24, 0x20	; 32
    1d96:	80 83       	st	Z, r24
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 62       	ori	r24, 0x20	; 32
    1d9c:	80 83       	st	Z, r24
    1d9e:	e9 db       	rcall	.-2094   	; 0x1572 <udc_process_setup>
    1da0:	c8 2f       	mov	r28, r24
    1da2:	81 11       	cpse	r24, r1
    1da4:	03 c0       	rjmp	.+6      	; 0x1dac <udd_ctrl_interrupt_tc_setup+0x7e>
    1da6:	f0 de       	rcall	.-544    	; 0x1b88 <udd_ctrl_stall_data>
    1da8:	c1 e0       	ldi	r28, 0x01	; 1
    1daa:	2e c0       	rjmp	.+92     	; 0x1e08 <udd_ctrl_interrupt_tc_setup+0xda>
    1dac:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <udd_g_ctrlreq>
    1db0:	88 23       	and	r24, r24
    1db2:	6c f4       	brge	.+26     	; 0x1dce <udd_ctrl_interrupt_tc_setup+0xa0>
    1db4:	10 92 75 23 	sts	0x2375, r1	; 0x802375 <udd_ctrl_prev_payload_nb_trans>
    1db8:	10 92 76 23 	sts	0x2376, r1	; 0x802376 <udd_ctrl_prev_payload_nb_trans+0x1>
    1dbc:	10 92 73 23 	sts	0x2373, r1	; 0x802373 <udd_ctrl_payload_nb_trans>
    1dc0:	10 92 74 23 	sts	0x2374, r1	; 0x802374 <udd_ctrl_payload_nb_trans+0x1>
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	80 93 77 23 	sts	0x2377, r24	; 0x802377 <udd_ep_control_state>
    1dca:	02 df       	rcall	.-508    	; 0x1bd0 <udd_ctrl_in_sent>
    1dcc:	1d c0       	rjmp	.+58     	; 0x1e08 <udd_ctrl_interrupt_tc_setup+0xda>
    1dce:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
    1dd2:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
    1dd6:	89 2b       	or	r24, r25
    1dd8:	11 f4       	brne	.+4      	; 0x1dde <udd_ctrl_interrupt_tc_setup+0xb0>
    1dda:	e4 de       	rcall	.-568    	; 0x1ba4 <udd_ctrl_send_zlp_in>
    1ddc:	15 c0       	rjmp	.+42     	; 0x1e08 <udd_ctrl_interrupt_tc_setup+0xda>
    1dde:	10 92 75 23 	sts	0x2375, r1	; 0x802375 <udd_ctrl_prev_payload_nb_trans>
    1de2:	10 92 76 23 	sts	0x2376, r1	; 0x802376 <udd_ctrl_prev_payload_nb_trans+0x1>
    1de6:	10 92 73 23 	sts	0x2373, r1	; 0x802373 <udd_ctrl_payload_nb_trans>
    1dea:	10 92 74 23 	sts	0x2374, r1	; 0x802374 <udd_ctrl_payload_nb_trans+0x1>
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	80 93 77 23 	sts	0x2377, r24	; 0x802377 <udd_ep_control_state>
    1df4:	ec e8       	ldi	r30, 0x8C	; 140
    1df6:	f3 e2       	ldi	r31, 0x23	; 35
    1df8:	02 e0       	ldi	r16, 0x02	; 2
    1dfa:	06 93       	lac	Z, r16
    1dfc:	00 e2       	ldi	r16, 0x20	; 32
    1dfe:	06 93       	lac	Z, r16
    1e00:	03 c0       	rjmp	.+6      	; 0x1e08 <udd_ctrl_interrupt_tc_setup+0xda>
    1e02:	c0 e0       	ldi	r28, 0x00	; 0
    1e04:	01 c0       	rjmp	.+2      	; 0x1e08 <udd_ctrl_interrupt_tc_setup+0xda>
    1e06:	c1 e0       	ldi	r28, 0x01	; 1
    1e08:	8c 2f       	mov	r24, r28
    1e0a:	cf 91       	pop	r28
    1e0c:	0f 91       	pop	r16
    1e0e:	08 95       	ret

00001e10 <udd_ep_trans_complet>:
    1e10:	8f 92       	push	r8
    1e12:	9f 92       	push	r9
    1e14:	af 92       	push	r10
    1e16:	bf 92       	push	r11
    1e18:	df 92       	push	r13
    1e1a:	ef 92       	push	r14
    1e1c:	ff 92       	push	r15
    1e1e:	0f 93       	push	r16
    1e20:	1f 93       	push	r17
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	d8 2e       	mov	r13, r24
    1e28:	67 df       	rcall	.-306    	; 0x1cf8 <udd_ep_get_job>
    1e2a:	8c 01       	movw	r16, r24
    1e2c:	cd 2d       	mov	r28, r13
    1e2e:	cf 70       	andi	r28, 0x0F	; 15
    1e30:	d0 e0       	ldi	r29, 0x00	; 0
    1e32:	ce 01       	movw	r24, r28
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	cd 2d       	mov	r28, r13
    1e3a:	0d 2c       	mov	r0, r13
    1e3c:	00 0c       	add	r0, r0
    1e3e:	dd 0b       	sbc	r29, r29
    1e40:	cc 27       	eor	r28, r28
    1e42:	dd 0f       	add	r29, r29
    1e44:	cc 1f       	adc	r28, r28
    1e46:	dd 27       	eor	r29, r29
    1e48:	c8 0f       	add	r28, r24
    1e4a:	d9 1f       	adc	r29, r25
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	9c 01       	movw	r18, r24
    1e5c:	24 57       	subi	r18, 0x74	; 116
    1e5e:	3c 4d       	sbci	r19, 0xDC	; 220
    1e60:	79 01       	movw	r14, r18
    1e62:	c9 01       	movw	r24, r18
    1e64:	21 df       	rcall	.-446    	; 0x1ca8 <udd_ep_get_size>
    1e66:	4c 01       	movw	r8, r24
    1e68:	dd 20       	and	r13, r13
    1e6a:	0c f0       	brlt	.+2      	; 0x1e6e <udd_ep_trans_complet+0x5e>
    1e6c:	79 c0       	rjmp	.+242    	; 0x1f60 <udd_ep_trans_complet+0x150>
    1e6e:	fe 01       	movw	r30, r28
    1e70:	ee 0f       	add	r30, r30
    1e72:	ff 1f       	adc	r31, r31
    1e74:	ee 0f       	add	r30, r30
    1e76:	ff 1f       	adc	r31, r31
    1e78:	ee 0f       	add	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
    1e7c:	e8 58       	subi	r30, 0x88	; 136
    1e7e:	fc 4d       	sbci	r31, 0xDC	; 220
    1e80:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e82:	33 8d       	ldd	r19, Z+27	; 0x1b
    1e84:	d8 01       	movw	r26, r16
    1e86:	15 96       	adiw	r26, 0x05	; 5
    1e88:	8d 91       	ld	r24, X+
    1e8a:	9c 91       	ld	r25, X
    1e8c:	16 97       	sbiw	r26, 0x06	; 6
    1e8e:	82 0f       	add	r24, r18
    1e90:	93 1f       	adc	r25, r19
    1e92:	15 96       	adiw	r26, 0x05	; 5
    1e94:	8d 93       	st	X+, r24
    1e96:	9c 93       	st	X, r25
    1e98:	16 97       	sbiw	r26, 0x06	; 6
    1e9a:	13 96       	adiw	r26, 0x03	; 3
    1e9c:	2d 91       	ld	r18, X+
    1e9e:	3c 91       	ld	r19, X
    1ea0:	14 97       	sbiw	r26, 0x04	; 4
    1ea2:	82 17       	cp	r24, r18
    1ea4:	93 07       	cpc	r25, r19
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <udd_ep_trans_complet+0x9a>
    1ea8:	45 c0       	rjmp	.+138    	; 0x1f34 <udd_ep_trans_complet+0x124>
    1eaa:	28 1b       	sub	r18, r24
    1eac:	39 0b       	sbc	r19, r25
    1eae:	21 15       	cp	r18, r1
    1eb0:	b4 e0       	ldi	r27, 0x04	; 4
    1eb2:	3b 07       	cpc	r19, r27
    1eb4:	38 f0       	brcs	.+14     	; 0x1ec4 <udd_ep_trans_complet+0xb4>
    1eb6:	2f ef       	ldi	r18, 0xFF	; 255
    1eb8:	33 e0       	ldi	r19, 0x03	; 3
    1eba:	c9 01       	movw	r24, r18
    1ebc:	b4 01       	movw	r22, r8
    1ebe:	13 d6       	rcall	.+3110   	; 0x2ae6 <__udivmodhi4>
    1ec0:	28 1b       	sub	r18, r24
    1ec2:	39 0b       	sbc	r19, r25
    1ec4:	f8 01       	movw	r30, r16
    1ec6:	80 81       	ld	r24, Z
    1ec8:	81 ff       	sbrs	r24, 1
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <udd_ep_trans_complet+0xce>
    1ecc:	c9 01       	movw	r24, r18
    1ece:	b4 01       	movw	r22, r8
    1ed0:	0a d6       	rcall	.+3092   	; 0x2ae6 <__udivmodhi4>
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	89 2b       	or	r24, r25
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <udd_ep_trans_complet+0xca>
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	84 2f       	mov	r24, r20
    1edc:	01 c0       	rjmp	.+2      	; 0x1ee0 <udd_ep_trans_complet+0xd0>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	d8 01       	movw	r26, r16
    1ee2:	9c 91       	ld	r25, X
    1ee4:	80 fb       	bst	r24, 0
    1ee6:	91 f9       	bld	r25, 1
    1ee8:	9c 93       	st	X, r25
    1eea:	fe 01       	movw	r30, r28
    1eec:	ee 0f       	add	r30, r30
    1eee:	ff 1f       	adc	r31, r31
    1ef0:	ee 0f       	add	r30, r30
    1ef2:	ff 1f       	adc	r31, r31
    1ef4:	ee 0f       	add	r30, r30
    1ef6:	ff 1f       	adc	r31, r31
    1ef8:	e8 58       	subi	r30, 0x88	; 136
    1efa:	fc 4d       	sbci	r31, 0xDC	; 220
    1efc:	12 8e       	std	Z+26, r1	; 0x1a
    1efe:	13 8e       	std	Z+27, r1	; 0x1b
    1f00:	26 8b       	std	Z+22, r18	; 0x16
    1f02:	37 8b       	std	Z+23, r19	; 0x17
    1f04:	11 96       	adiw	r26, 0x01	; 1
    1f06:	2d 91       	ld	r18, X+
    1f08:	3c 91       	ld	r19, X
    1f0a:	12 97       	sbiw	r26, 0x02	; 2
    1f0c:	15 96       	adiw	r26, 0x05	; 5
    1f0e:	8d 91       	ld	r24, X+
    1f10:	9c 91       	ld	r25, X
    1f12:	16 97       	sbiw	r26, 0x06	; 6
    1f14:	82 0f       	add	r24, r18
    1f16:	93 1f       	adc	r25, r19
    1f18:	cc 0f       	add	r28, r28
    1f1a:	dd 1f       	adc	r29, r29
    1f1c:	cc 0f       	add	r28, r28
    1f1e:	dd 1f       	adc	r29, r29
    1f20:	cc 0f       	add	r28, r28
    1f22:	dd 1f       	adc	r29, r29
    1f24:	c0 57       	subi	r28, 0x70	; 112
    1f26:	dc 4d       	sbci	r29, 0xDC	; 220
    1f28:	88 83       	st	Y, r24
    1f2a:	99 83       	std	Y+1, r25	; 0x01
    1f2c:	f7 01       	movw	r30, r14
    1f2e:	02 e0       	ldi	r16, 0x02	; 2
    1f30:	06 93       	lac	Z, r16
    1f32:	e0 c0       	rjmp	.+448    	; 0x20f4 <udd_ep_trans_complet+0x2e4>
    1f34:	d8 01       	movw	r26, r16
    1f36:	8c 91       	ld	r24, X
    1f38:	81 ff       	sbrs	r24, 1
    1f3a:	c9 c0       	rjmp	.+402    	; 0x20ce <udd_ep_trans_complet+0x2be>
    1f3c:	8d 7f       	andi	r24, 0xFD	; 253
    1f3e:	8c 93       	st	X, r24
    1f40:	cc 0f       	add	r28, r28
    1f42:	dd 1f       	adc	r29, r29
    1f44:	cc 0f       	add	r28, r28
    1f46:	dd 1f       	adc	r29, r29
    1f48:	cc 0f       	add	r28, r28
    1f4a:	dd 1f       	adc	r29, r29
    1f4c:	c8 58       	subi	r28, 0x88	; 136
    1f4e:	dc 4d       	sbci	r29, 0xDC	; 220
    1f50:	1a 8e       	std	Y+26, r1	; 0x1a
    1f52:	1b 8e       	std	Y+27, r1	; 0x1b
    1f54:	1e 8a       	std	Y+22, r1	; 0x16
    1f56:	1f 8a       	std	Y+23, r1	; 0x17
    1f58:	f7 01       	movw	r30, r14
    1f5a:	02 e0       	ldi	r16, 0x02	; 2
    1f5c:	06 93       	lac	Z, r16
    1f5e:	ca c0       	rjmp	.+404    	; 0x20f4 <udd_ep_trans_complet+0x2e4>
    1f60:	fe 01       	movw	r30, r28
    1f62:	ee 0f       	add	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	ee 0f       	add	r30, r30
    1f68:	ff 1f       	adc	r31, r31
    1f6a:	ee 0f       	add	r30, r30
    1f6c:	ff 1f       	adc	r31, r31
    1f6e:	e8 58       	subi	r30, 0x88	; 136
    1f70:	fc 4d       	sbci	r31, 0xDC	; 220
    1f72:	a6 88       	ldd	r10, Z+22	; 0x16
    1f74:	b7 88       	ldd	r11, Z+23	; 0x17
    1f76:	d8 01       	movw	r26, r16
    1f78:	8c 91       	ld	r24, X
    1f7a:	82 ff       	sbrs	r24, 2
    1f7c:	19 c0       	rjmp	.+50     	; 0x1fb0 <udd_ep_trans_complet+0x1a0>
    1f7e:	11 96       	adiw	r26, 0x01	; 1
    1f80:	ed 91       	ld	r30, X+
    1f82:	fc 91       	ld	r31, X
    1f84:	12 97       	sbiw	r26, 0x02	; 2
    1f86:	15 96       	adiw	r26, 0x05	; 5
    1f88:	2d 91       	ld	r18, X+
    1f8a:	3c 91       	ld	r19, X
    1f8c:	16 97       	sbiw	r26, 0x06	; 6
    1f8e:	13 96       	adiw	r26, 0x03	; 3
    1f90:	8d 91       	ld	r24, X+
    1f92:	9c 91       	ld	r25, X
    1f94:	14 97       	sbiw	r26, 0x04	; 4
    1f96:	b4 01       	movw	r22, r8
    1f98:	a6 d5       	rcall	.+2892   	; 0x2ae6 <__udivmodhi4>
    1f9a:	b0 e4       	ldi	r27, 0x40	; 64
    1f9c:	db 9e       	mul	r13, r27
    1f9e:	b0 01       	movw	r22, r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	6d 51       	subi	r22, 0x1D	; 29
    1fa4:	7e 4d       	sbci	r23, 0xDE	; 222
    1fa6:	ac 01       	movw	r20, r24
    1fa8:	cf 01       	movw	r24, r30
    1faa:	82 0f       	add	r24, r18
    1fac:	93 1f       	adc	r25, r19
    1fae:	b7 d5       	rcall	.+2926   	; 0x2b1e <memcpy>
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	25 81       	ldd	r18, Z+5	; 0x05
    1fb4:	36 81       	ldd	r19, Z+6	; 0x06
    1fb6:	2a 0d       	add	r18, r10
    1fb8:	3b 1d       	adc	r19, r11
    1fba:	25 83       	std	Z+5, r18	; 0x05
    1fbc:	36 83       	std	Z+6, r19	; 0x06
    1fbe:	83 81       	ldd	r24, Z+3	; 0x03
    1fc0:	94 81       	ldd	r25, Z+4	; 0x04
    1fc2:	82 17       	cp	r24, r18
    1fc4:	93 07       	cpc	r25, r19
    1fc6:	68 f4       	brcc	.+26     	; 0x1fe2 <udd_ep_trans_complet+0x1d2>
    1fc8:	85 83       	std	Z+5, r24	; 0x05
    1fca:	96 83       	std	Z+6, r25	; 0x06
    1fcc:	cc 0f       	add	r28, r28
    1fce:	dd 1f       	adc	r29, r29
    1fd0:	cc 0f       	add	r28, r28
    1fd2:	dd 1f       	adc	r29, r29
    1fd4:	cc 0f       	add	r28, r28
    1fd6:	dd 1f       	adc	r29, r29
    1fd8:	c8 58       	subi	r28, 0x88	; 136
    1fda:	dc 4d       	sbci	r29, 0xDC	; 220
    1fdc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fde:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fe0:	76 c0       	rjmp	.+236    	; 0x20ce <udd_ep_trans_complet+0x2be>
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	e8 58       	subi	r30, 0x88	; 136
    1ff2:	fc 4d       	sbci	r31, 0xDC	; 220
    1ff4:	42 8d       	ldd	r20, Z+26	; 0x1a
    1ff6:	53 8d       	ldd	r21, Z+27	; 0x1b
    1ff8:	a4 16       	cp	r10, r20
    1ffa:	b5 06       	cpc	r11, r21
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <udd_ep_trans_complet+0x1f0>
    1ffe:	67 c0       	rjmp	.+206    	; 0x20ce <udd_ep_trans_complet+0x2be>
    2000:	28 17       	cp	r18, r24
    2002:	39 07       	cpc	r19, r25
    2004:	09 f4       	brne	.+2      	; 0x2008 <udd_ep_trans_complet+0x1f8>
    2006:	63 c0       	rjmp	.+198    	; 0x20ce <udd_ep_trans_complet+0x2be>
    2008:	ac 01       	movw	r20, r24
    200a:	42 1b       	sub	r20, r18
    200c:	53 0b       	sbc	r21, r19
    200e:	9a 01       	movw	r18, r20
    2010:	21 15       	cp	r18, r1
    2012:	54 e0       	ldi	r21, 0x04	; 4
    2014:	35 07       	cpc	r19, r21
    2016:	40 f0       	brcs	.+16     	; 0x2028 <udd_ep_trans_complet+0x218>
    2018:	2f ef       	ldi	r18, 0xFF	; 255
    201a:	33 e0       	ldi	r19, 0x03	; 3
    201c:	c9 01       	movw	r24, r18
    201e:	b4 01       	movw	r22, r8
    2020:	62 d5       	rcall	.+2756   	; 0x2ae6 <__udivmodhi4>
    2022:	28 1b       	sub	r18, r24
    2024:	39 0b       	sbc	r19, r25
    2026:	05 c0       	rjmp	.+10     	; 0x2032 <udd_ep_trans_complet+0x222>
    2028:	c9 01       	movw	r24, r18
    202a:	b4 01       	movw	r22, r8
    202c:	5c d5       	rcall	.+2744   	; 0x2ae6 <__udivmodhi4>
    202e:	28 1b       	sub	r18, r24
    2030:	39 0b       	sbc	r19, r25
    2032:	fe 01       	movw	r30, r28
    2034:	ee 0f       	add	r30, r30
    2036:	ff 1f       	adc	r31, r31
    2038:	ee 0f       	add	r30, r30
    203a:	ff 1f       	adc	r31, r31
    203c:	ee 0f       	add	r30, r30
    203e:	ff 1f       	adc	r31, r31
    2040:	e8 58       	subi	r30, 0x88	; 136
    2042:	fc 4d       	sbci	r31, 0xDC	; 220
    2044:	16 8a       	std	Z+22, r1	; 0x16
    2046:	17 8a       	std	Z+23, r1	; 0x17
    2048:	28 15       	cp	r18, r8
    204a:	39 05       	cpc	r19, r9
    204c:	00 f5       	brcc	.+64     	; 0x208e <udd_ep_trans_complet+0x27e>
    204e:	d8 01       	movw	r26, r16
    2050:	8c 91       	ld	r24, X
    2052:	84 60       	ori	r24, 0x04	; 4
    2054:	8c 93       	st	X, r24
    2056:	b0 e4       	ldi	r27, 0x40	; 64
    2058:	db 9e       	mul	r13, r27
    205a:	c0 01       	movw	r24, r0
    205c:	11 24       	eor	r1, r1
    205e:	8d 51       	subi	r24, 0x1D	; 29
    2060:	9e 4d       	sbci	r25, 0xDE	; 222
    2062:	fe 01       	movw	r30, r28
    2064:	ee 0f       	add	r30, r30
    2066:	ff 1f       	adc	r31, r31
    2068:	ee 0f       	add	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	e0 57       	subi	r30, 0x70	; 112
    2072:	fc 4d       	sbci	r31, 0xDC	; 220
    2074:	80 83       	st	Z, r24
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	cc 0f       	add	r28, r28
    207a:	dd 1f       	adc	r29, r29
    207c:	cc 0f       	add	r28, r28
    207e:	dd 1f       	adc	r29, r29
    2080:	cc 0f       	add	r28, r28
    2082:	dd 1f       	adc	r29, r29
    2084:	c8 58       	subi	r28, 0x88	; 136
    2086:	dc 4d       	sbci	r29, 0xDC	; 220
    2088:	8a 8e       	std	Y+26, r8	; 0x1a
    208a:	9b 8e       	std	Y+27, r9	; 0x1b
    208c:	1c c0       	rjmp	.+56     	; 0x20c6 <udd_ep_trans_complet+0x2b6>
    208e:	f8 01       	movw	r30, r16
    2090:	41 81       	ldd	r20, Z+1	; 0x01
    2092:	52 81       	ldd	r21, Z+2	; 0x02
    2094:	85 81       	ldd	r24, Z+5	; 0x05
    2096:	96 81       	ldd	r25, Z+6	; 0x06
    2098:	84 0f       	add	r24, r20
    209a:	95 1f       	adc	r25, r21
    209c:	fe 01       	movw	r30, r28
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	e0 57       	subi	r30, 0x70	; 112
    20ac:	fc 4d       	sbci	r31, 0xDC	; 220
    20ae:	80 83       	st	Z, r24
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	cc 0f       	add	r28, r28
    20b4:	dd 1f       	adc	r29, r29
    20b6:	cc 0f       	add	r28, r28
    20b8:	dd 1f       	adc	r29, r29
    20ba:	cc 0f       	add	r28, r28
    20bc:	dd 1f       	adc	r29, r29
    20be:	c8 58       	subi	r28, 0x88	; 136
    20c0:	dc 4d       	sbci	r29, 0xDC	; 220
    20c2:	2a 8f       	std	Y+26, r18	; 0x1a
    20c4:	3b 8f       	std	Y+27, r19	; 0x1b
    20c6:	f7 01       	movw	r30, r14
    20c8:	02 e0       	ldi	r16, 0x02	; 2
    20ca:	06 93       	lac	Z, r16
    20cc:	13 c0       	rjmp	.+38     	; 0x20f4 <udd_ep_trans_complet+0x2e4>
    20ce:	d8 01       	movw	r26, r16
    20d0:	8c 91       	ld	r24, X
    20d2:	80 ff       	sbrs	r24, 0
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <udd_ep_trans_complet+0x2e4>
    20d6:	8e 7f       	andi	r24, 0xFE	; 254
    20d8:	8c 93       	st	X, r24
    20da:	17 96       	adiw	r26, 0x07	; 7
    20dc:	ed 91       	ld	r30, X+
    20de:	fc 91       	ld	r31, X
    20e0:	18 97       	sbiw	r26, 0x08	; 8
    20e2:	30 97       	sbiw	r30, 0x00	; 0
    20e4:	39 f0       	breq	.+14     	; 0x20f4 <udd_ep_trans_complet+0x2e4>
    20e6:	15 96       	adiw	r26, 0x05	; 5
    20e8:	6d 91       	ld	r22, X+
    20ea:	7c 91       	ld	r23, X
    20ec:	16 97       	sbiw	r26, 0x06	; 6
    20ee:	4d 2d       	mov	r20, r13
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	19 95       	eicall
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	df 90       	pop	r13
    2102:	bf 90       	pop	r11
    2104:	af 90       	pop	r10
    2106:	9f 90       	pop	r9
    2108:	8f 90       	pop	r8
    210a:	08 95       	ret

0000210c <udd_attach>:
    210c:	1f 93       	push	r17
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	1f 92       	push	r1
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	8f b7       	in	r24, 0x3f	; 63
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	f8 94       	cli
    211e:	19 81       	ldd	r17, Y+1	; 0x01
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	d5 dc       	rcall	.-1622   	; 0x1ace <udd_sleep_mode>
    2124:	ea ec       	ldi	r30, 0xCA	; 202
    2126:	f4 e0       	ldi	r31, 0x04	; 4
    2128:	80 e4       	ldi	r24, 0x40	; 64
    212a:	80 83       	st	Z, r24
    212c:	80 e2       	ldi	r24, 0x20	; 32
    212e:	80 83       	st	Z, r24
    2130:	e1 ec       	ldi	r30, 0xC1	; 193
    2132:	f4 e0       	ldi	r31, 0x04	; 4
    2134:	80 81       	ld	r24, Z
    2136:	81 60       	ori	r24, 0x01	; 1
    2138:	80 83       	st	Z, r24
    213a:	a9 ec       	ldi	r26, 0xC9	; 201
    213c:	b4 e0       	ldi	r27, 0x04	; 4
    213e:	8c 91       	ld	r24, X
    2140:	82 60       	ori	r24, 0x02	; 2
    2142:	8c 93       	st	X, r24
    2144:	e8 ec       	ldi	r30, 0xC8	; 200
    2146:	f4 e0       	ldi	r31, 0x04	; 4
    2148:	80 81       	ld	r24, Z
    214a:	80 64       	ori	r24, 0x40	; 64
    214c:	80 83       	st	Z, r24
    214e:	8c 91       	ld	r24, X
    2150:	81 60       	ori	r24, 0x01	; 1
    2152:	8c 93       	st	X, r24
    2154:	80 81       	ld	r24, Z
    2156:	80 68       	ori	r24, 0x80	; 128
    2158:	80 83       	st	Z, r24
    215a:	1f bf       	out	0x3f, r17	; 63
    215c:	0f 90       	pop	r0
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	1f 91       	pop	r17
    2164:	08 95       	ret

00002166 <udd_enable>:
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	1f 92       	push	r1
    2170:	1f 92       	push	r1
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	00 e6       	ldi	r16, 0x60	; 96
    2178:	10 e0       	ldi	r17, 0x00	; 0
    217a:	f8 01       	movw	r30, r16
    217c:	10 82       	st	Z, r1
    217e:	80 e3       	ldi	r24, 0x30	; 48
    2180:	0e 94 58 07 	call	0xeb0	; 0xeb0 <sysclk_enable_usb>
    2184:	e0 ec       	ldi	r30, 0xC0	; 192
    2186:	f4 e0       	ldi	r31, 0x04	; 4
    2188:	80 81       	ld	r24, Z
    218a:	80 64       	ori	r24, 0x40	; 64
    218c:	80 83       	st	Z, r24
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	f8 01       	movw	r30, r16
    2192:	80 83       	st	Z, r24
    2194:	8f b7       	in	r24, 0x3f	; 63
    2196:	8a 83       	std	Y+2, r24	; 0x02
    2198:	f8 94       	cli
    219a:	1a 81       	ldd	r17, Y+2	; 0x02
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	fc 01       	movw	r30, r24
    21a2:	ee 0f       	add	r30, r30
    21a4:	ff 1f       	adc	r31, r31
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	ee 0f       	add	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	e8 58       	subi	r30, 0x88	; 136
    21b0:	fc 4d       	sbci	r31, 0xDC	; 220
    21b2:	15 8a       	std	Z+21, r1	; 0x15
    21b4:	01 96       	adiw	r24, 0x01	; 1
    21b6:	8a 30       	cpi	r24, 0x0A	; 10
    21b8:	91 05       	cpc	r25, r1
    21ba:	91 f7       	brne	.-28     	; 0x21a0 <udd_enable+0x3a>
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	fc 01       	movw	r30, r24
    21c2:	ee 0f       	add	r30, r30
    21c4:	ff 1f       	adc	r31, r31
    21c6:	ee 0f       	add	r30, r30
    21c8:	ff 1f       	adc	r31, r31
    21ca:	ee 0f       	add	r30, r30
    21cc:	ff 1f       	adc	r31, r31
    21ce:	e8 0f       	add	r30, r24
    21d0:	f9 1f       	adc	r31, r25
    21d2:	ed 5d       	subi	r30, 0xDD	; 221
    21d4:	fc 4d       	sbci	r31, 0xDC	; 220
    21d6:	20 81       	ld	r18, Z
    21d8:	2e 7f       	andi	r18, 0xFE	; 254
    21da:	20 83       	st	Z, r18
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	88 30       	cpi	r24, 0x08	; 8
    21e0:	91 05       	cpc	r25, r1
    21e2:	71 f7       	brne	.-36     	; 0x21c0 <udd_enable+0x5a>
    21e4:	6a e1       	ldi	r22, 0x1A	; 26
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	82 e0       	ldi	r24, 0x02	; 2
    21ea:	61 dc       	rcall	.-1854   	; 0x1aae <nvm_read_byte>
    21ec:	8f 3f       	cpi	r24, 0xFF	; 255
    21ee:	19 f0       	breq	.+6      	; 0x21f6 <udd_enable+0x90>
    21f0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <udd_enable+0x96>
    21f6:	8f e1       	ldi	r24, 0x1F	; 31
    21f8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    21fc:	6b e1       	ldi	r22, 0x1B	; 27
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	82 e0       	ldi	r24, 0x02	; 2
    2202:	55 dc       	rcall	.-1878   	; 0x1aae <nvm_read_byte>
    2204:	8f 3f       	cpi	r24, 0xFF	; 255
    2206:	19 f0       	breq	.+6      	; 0x220e <udd_enable+0xa8>
    2208:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    220c:	03 c0       	rjmp	.+6      	; 0x2214 <udd_enable+0xae>
    220e:	8f e1       	ldi	r24, 0x1F	; 31
    2210:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    2214:	e0 ec       	ldi	r30, 0xC0	; 192
    2216:	f4 e0       	ldi	r31, 0x04	; 4
    2218:	80 81       	ld	r24, Z
    221a:	84 60       	ori	r24, 0x04	; 4
    221c:	80 83       	st	Z, r24
    221e:	80 81       	ld	r24, Z
    2220:	80 68       	ori	r24, 0x80	; 128
    2222:	80 83       	st	Z, r24
    2224:	80 81       	ld	r24, Z
    2226:	80 61       	ori	r24, 0x10	; 16
    2228:	80 83       	st	Z, r24
    222a:	8c e8       	ldi	r24, 0x8C	; 140
    222c:	93 e2       	ldi	r25, 0x23	; 35
    222e:	86 83       	std	Z+6, r24	; 0x06
    2230:	97 83       	std	Z+7, r25	; 0x07
    2232:	80 81       	ld	r24, Z
    2234:	80 62       	ori	r24, 0x20	; 32
    2236:	80 83       	st	Z, r24
    2238:	8f ef       	ldi	r24, 0xFF	; 255
    223a:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    223e:	e8 ec       	ldi	r30, 0xC8	; 200
    2240:	f4 e0       	ldi	r31, 0x04	; 4
    2242:	80 81       	ld	r24, Z
    2244:	81 60       	ori	r24, 0x01	; 1
    2246:	80 83       	st	Z, r24
    2248:	10 92 e0 23 	sts	0x23E0, r1	; 0x8023e0 <udd_b_idle>
    224c:	80 91 e9 23 	lds	r24, 0x23E9	; 0x8023e9 <sleepmgr_locks+0x5>
    2250:	8f 3f       	cpi	r24, 0xFF	; 255
    2252:	09 f4       	brne	.+2      	; 0x2256 <udd_enable+0xf0>
    2254:	ff cf       	rjmp	.-2      	; 0x2254 <udd_enable+0xee>
    2256:	8f b7       	in	r24, 0x3f	; 63
    2258:	89 83       	std	Y+1, r24	; 0x01
    225a:	f8 94       	cli
    225c:	99 81       	ldd	r25, Y+1	; 0x01
    225e:	e4 ee       	ldi	r30, 0xE4	; 228
    2260:	f3 e2       	ldi	r31, 0x23	; 35
    2262:	85 81       	ldd	r24, Z+5	; 0x05
    2264:	8f 5f       	subi	r24, 0xFF	; 255
    2266:	85 83       	std	Z+5, r24	; 0x05
    2268:	9f bf       	out	0x3f, r25	; 63
    226a:	50 df       	rcall	.-352    	; 0x210c <udd_attach>
    226c:	1f bf       	out	0x3f, r17	; 63
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	08 95       	ret

0000227c <udd_set_address>:
    227c:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2280:	08 95       	ret

00002282 <udd_getaddress>:
    2282:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2286:	08 95       	ret

00002288 <udd_set_setup_payload>:
    2288:	ea ee       	ldi	r30, 0xEA	; 234
    228a:	f3 e2       	ldi	r31, 0x23	; 35
    228c:	80 87       	std	Z+8, r24	; 0x08
    228e:	91 87       	std	Z+9, r25	; 0x09
    2290:	62 87       	std	Z+10, r22	; 0x0a
    2292:	73 87       	std	Z+11, r23	; 0x0b
    2294:	08 95       	ret

00002296 <udd_ep_alloc>:
    2296:	28 2f       	mov	r18, r24
    2298:	2f 70       	andi	r18, 0x0F	; 15
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	22 0f       	add	r18, r18
    229e:	33 1f       	adc	r19, r19
    22a0:	08 2e       	mov	r0, r24
    22a2:	00 0c       	add	r0, r0
    22a4:	99 0b       	sbc	r25, r25
    22a6:	88 27       	eor	r24, r24
    22a8:	99 0f       	add	r25, r25
    22aa:	88 1f       	adc	r24, r24
    22ac:	99 27       	eor	r25, r25
    22ae:	82 0f       	add	r24, r18
    22b0:	93 1f       	adc	r25, r19
    22b2:	fc 01       	movw	r30, r24
    22b4:	ee 0f       	add	r30, r30
    22b6:	ff 1f       	adc	r31, r31
    22b8:	ee 0f       	add	r30, r30
    22ba:	ff 1f       	adc	r31, r31
    22bc:	ee 0f       	add	r30, r30
    22be:	ff 1f       	adc	r31, r31
    22c0:	e8 58       	subi	r30, 0x88	; 136
    22c2:	fc 4d       	sbci	r31, 0xDC	; 220
    22c4:	25 89       	ldd	r18, Z+21	; 0x15
    22c6:	20 7c       	andi	r18, 0xC0	; 192
    22c8:	09 f0       	breq	.+2      	; 0x22cc <udd_ep_alloc+0x36>
    22ca:	69 c0       	rjmp	.+210    	; 0x239e <udd_ep_alloc+0x108>
    22cc:	63 70       	andi	r22, 0x03	; 3
    22ce:	61 30       	cpi	r22, 0x01	; 1
    22d0:	11 f0       	breq	.+4      	; 0x22d6 <udd_ep_alloc+0x40>
    22d2:	18 f4       	brcc	.+6      	; 0x22da <udd_ep_alloc+0x44>
    22d4:	04 c0       	rjmp	.+8      	; 0x22de <udd_ep_alloc+0x48>
    22d6:	60 ec       	ldi	r22, 0xC0	; 192
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <udd_ep_alloc+0x4a>
    22da:	60 e8       	ldi	r22, 0x80	; 128
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <udd_ep_alloc+0x4a>
    22de:	60 e4       	ldi	r22, 0x40	; 64
    22e0:	40 38       	cpi	r20, 0x80	; 128
    22e2:	51 05       	cpc	r21, r1
    22e4:	e9 f0       	breq	.+58     	; 0x2320 <udd_ep_alloc+0x8a>
    22e6:	50 f4       	brcc	.+20     	; 0x22fc <udd_ep_alloc+0x66>
    22e8:	40 32       	cpi	r20, 0x20	; 32
    22ea:	51 05       	cpc	r21, r1
    22ec:	a9 f0       	breq	.+42     	; 0x2318 <udd_ep_alloc+0x82>
    22ee:	40 34       	cpi	r20, 0x40	; 64
    22f0:	51 05       	cpc	r21, r1
    22f2:	a1 f0       	breq	.+40     	; 0x231c <udd_ep_alloc+0x86>
    22f4:	40 31       	cpi	r20, 0x10	; 16
    22f6:	51 05       	cpc	r21, r1
    22f8:	d9 f4       	brne	.+54     	; 0x2330 <udd_ep_alloc+0x9a>
    22fa:	0c c0       	rjmp	.+24     	; 0x2314 <udd_ep_alloc+0x7e>
    22fc:	41 15       	cp	r20, r1
    22fe:	22 e0       	ldi	r18, 0x02	; 2
    2300:	52 07       	cpc	r21, r18
    2302:	91 f0       	breq	.+36     	; 0x2328 <udd_ep_alloc+0x92>
    2304:	4f 3f       	cpi	r20, 0xFF	; 255
    2306:	23 e0       	ldi	r18, 0x03	; 3
    2308:	52 07       	cpc	r21, r18
    230a:	81 f0       	breq	.+32     	; 0x232c <udd_ep_alloc+0x96>
    230c:	41 15       	cp	r20, r1
    230e:	51 40       	sbci	r21, 0x01	; 1
    2310:	79 f4       	brne	.+30     	; 0x2330 <udd_ep_alloc+0x9a>
    2312:	08 c0       	rjmp	.+16     	; 0x2324 <udd_ep_alloc+0x8e>
    2314:	21 e0       	ldi	r18, 0x01	; 1
    2316:	0d c0       	rjmp	.+26     	; 0x2332 <udd_ep_alloc+0x9c>
    2318:	22 e0       	ldi	r18, 0x02	; 2
    231a:	0b c0       	rjmp	.+22     	; 0x2332 <udd_ep_alloc+0x9c>
    231c:	23 e0       	ldi	r18, 0x03	; 3
    231e:	09 c0       	rjmp	.+18     	; 0x2332 <udd_ep_alloc+0x9c>
    2320:	24 e0       	ldi	r18, 0x04	; 4
    2322:	07 c0       	rjmp	.+14     	; 0x2332 <udd_ep_alloc+0x9c>
    2324:	25 e0       	ldi	r18, 0x05	; 5
    2326:	05 c0       	rjmp	.+10     	; 0x2332 <udd_ep_alloc+0x9c>
    2328:	26 e0       	ldi	r18, 0x06	; 6
    232a:	03 c0       	rjmp	.+6      	; 0x2332 <udd_ep_alloc+0x9c>
    232c:	27 e0       	ldi	r18, 0x07	; 7
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <udd_ep_alloc+0x9c>
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	fc 01       	movw	r30, r24
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	ee 0f       	add	r30, r30
    233a:	ff 1f       	adc	r31, r31
    233c:	ee 0f       	add	r30, r30
    233e:	ff 1f       	adc	r31, r31
    2340:	e8 58       	subi	r30, 0x88	; 136
    2342:	fc 4d       	sbci	r31, 0xDC	; 220
    2344:	15 8a       	std	Z+21, r1	; 0x15
    2346:	36 e0       	ldi	r19, 0x06	; 6
    2348:	34 8b       	std	Z+20, r19	; 0x14
    234a:	26 2b       	or	r18, r22
    234c:	25 8b       	std	Z+21, r18	; 0x15
    234e:	fc 01       	movw	r30, r24
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	ee 0f       	add	r30, r30
    2356:	ff 1f       	adc	r31, r31
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	e8 58       	subi	r30, 0x88	; 136
    235e:	fc 4d       	sbci	r31, 0xDC	; 220
    2360:	25 89       	ldd	r18, Z+21	; 0x15
    2362:	20 7c       	andi	r18, 0xC0	; 192
    2364:	20 3c       	cpi	r18, 0xC0	; 192
    2366:	69 f4       	brne	.+26     	; 0x2382 <udd_ep_alloc+0xec>
    2368:	fc 01       	movw	r30, r24
    236a:	ee 0f       	add	r30, r30
    236c:	ff 1f       	adc	r31, r31
    236e:	ee 0f       	add	r30, r30
    2370:	ff 1f       	adc	r31, r31
    2372:	ee 0f       	add	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	e8 58       	subi	r30, 0x88	; 136
    2378:	fc 4d       	sbci	r31, 0xDC	; 220
    237a:	25 89       	ldd	r18, Z+21	; 0x15
    237c:	27 70       	andi	r18, 0x07	; 7
    237e:	27 30       	cpi	r18, 0x07	; 7
    2380:	81 f0       	breq	.+32     	; 0x23a2 <udd_ep_alloc+0x10c>
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	fc 01       	movw	r30, r24
    2390:	e8 58       	subi	r30, 0x88	; 136
    2392:	fc 4d       	sbci	r31, 0xDC	; 220
    2394:	85 89       	ldd	r24, Z+21	; 0x15
    2396:	80 62       	ori	r24, 0x20	; 32
    2398:	85 8b       	std	Z+21, r24	; 0x15
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	08 95       	ret
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	08 95       	ret
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	08 95       	ret

000023a6 <udd_ep_is_halted>:
    23a6:	e8 2f       	mov	r30, r24
    23a8:	ef 70       	andi	r30, 0x0F	; 15
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	ee 0f       	add	r30, r30
    23ae:	ff 1f       	adc	r31, r31
    23b0:	08 2e       	mov	r0, r24
    23b2:	00 0c       	add	r0, r0
    23b4:	99 0b       	sbc	r25, r25
    23b6:	88 27       	eor	r24, r24
    23b8:	99 0f       	add	r25, r25
    23ba:	88 1f       	adc	r24, r24
    23bc:	99 27       	eor	r25, r25
    23be:	e8 0f       	add	r30, r24
    23c0:	f9 1f       	adc	r31, r25
    23c2:	ee 0f       	add	r30, r30
    23c4:	ff 1f       	adc	r31, r31
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	ee 0f       	add	r30, r30
    23cc:	ff 1f       	adc	r31, r31
    23ce:	e8 58       	subi	r30, 0x88	; 136
    23d0:	fc 4d       	sbci	r31, 0xDC	; 220
    23d2:	85 89       	ldd	r24, Z+21	; 0x15
    23d4:	82 fb       	bst	r24, 2
    23d6:	88 27       	eor	r24, r24
    23d8:	80 f9       	bld	r24, 0
    23da:	08 95       	ret

000023dc <udd_ep_clear_halt>:
    23dc:	0f 93       	push	r16
    23de:	28 2f       	mov	r18, r24
    23e0:	2f 70       	andi	r18, 0x0F	; 15
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	a9 01       	movw	r20, r18
    23e6:	44 0f       	add	r20, r20
    23e8:	55 1f       	adc	r21, r21
    23ea:	28 2f       	mov	r18, r24
    23ec:	08 2e       	mov	r0, r24
    23ee:	00 0c       	add	r0, r0
    23f0:	33 0b       	sbc	r19, r19
    23f2:	22 27       	eor	r18, r18
    23f4:	33 0f       	add	r19, r19
    23f6:	22 1f       	adc	r18, r18
    23f8:	33 27       	eor	r19, r19
    23fa:	24 0f       	add	r18, r20
    23fc:	35 1f       	adc	r19, r21
    23fe:	a9 01       	movw	r20, r18
    2400:	44 0f       	add	r20, r20
    2402:	55 1f       	adc	r21, r21
    2404:	44 0f       	add	r20, r20
    2406:	55 1f       	adc	r21, r21
    2408:	44 0f       	add	r20, r20
    240a:	55 1f       	adc	r21, r21
    240c:	fa 01       	movw	r30, r20
    240e:	e4 57       	subi	r30, 0x74	; 116
    2410:	fc 4d       	sbci	r31, 0xDC	; 220
    2412:	01 e0       	ldi	r16, 0x01	; 1
    2414:	06 93       	lac	Z, r16
    2416:	fa 01       	movw	r30, r20
    2418:	e8 58       	subi	r30, 0x88	; 136
    241a:	fc 4d       	sbci	r31, 0xDC	; 220
    241c:	95 89       	ldd	r25, Z+21	; 0x15
    241e:	92 ff       	sbrs	r25, 2
    2420:	11 c0       	rjmp	.+34     	; 0x2444 <udd_ep_clear_halt+0x68>
    2422:	fa 01       	movw	r30, r20
    2424:	e8 58       	subi	r30, 0x88	; 136
    2426:	fc 4d       	sbci	r31, 0xDC	; 220
    2428:	95 89       	ldd	r25, Z+21	; 0x15
    242a:	9b 7f       	andi	r25, 0xFB	; 251
    242c:	95 8b       	std	Z+21, r25	; 0x15
    242e:	64 dc       	rcall	.-1848   	; 0x1cf8 <udd_ep_get_job>
    2430:	fc 01       	movw	r30, r24
    2432:	80 81       	ld	r24, Z
    2434:	80 ff       	sbrs	r24, 0
    2436:	06 c0       	rjmp	.+12     	; 0x2444 <udd_ep_clear_halt+0x68>
    2438:	8e 7f       	andi	r24, 0xFE	; 254
    243a:	80 83       	st	Z, r24
    243c:	07 80       	ldd	r0, Z+7	; 0x07
    243e:	f0 85       	ldd	r31, Z+8	; 0x08
    2440:	e0 2d       	mov	r30, r0
    2442:	19 95       	eicall
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	0f 91       	pop	r16
    2448:	08 95       	ret

0000244a <udd_ep_run>:
    244a:	6f 92       	push	r6
    244c:	7f 92       	push	r7
    244e:	8f 92       	push	r8
    2450:	9f 92       	push	r9
    2452:	af 92       	push	r10
    2454:	bf 92       	push	r11
    2456:	cf 92       	push	r12
    2458:	df 92       	push	r13
    245a:	ef 92       	push	r14
    245c:	ff 92       	push	r15
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	1f 92       	push	r1
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	78 2e       	mov	r7, r24
    246e:	66 2e       	mov	r6, r22
    2470:	4a 01       	movw	r8, r20
    2472:	59 01       	movw	r10, r18
    2474:	41 dc       	rcall	.-1918   	; 0x1cf8 <udd_ep_get_job>
    2476:	6c 01       	movw	r12, r24
    2478:	27 2d       	mov	r18, r7
    247a:	87 2d       	mov	r24, r7
    247c:	8f 70       	andi	r24, 0x0F	; 15
    247e:	e8 2e       	mov	r14, r24
    2480:	f1 2c       	mov	r15, r1
    2482:	c7 01       	movw	r24, r14
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	e7 2c       	mov	r14, r7
    248a:	07 2c       	mov	r0, r7
    248c:	00 0c       	add	r0, r0
    248e:	ff 08       	sbc	r15, r15
    2490:	ee 24       	eor	r14, r14
    2492:	ff 0c       	add	r15, r15
    2494:	ee 1c       	adc	r14, r14
    2496:	ff 24       	eor	r15, r15
    2498:	e8 0e       	add	r14, r24
    249a:	f9 1e       	adc	r15, r25
    249c:	f7 01       	movw	r30, r14
    249e:	ee 0f       	add	r30, r30
    24a0:	ff 1f       	adc	r31, r31
    24a2:	ee 0f       	add	r30, r30
    24a4:	ff 1f       	adc	r31, r31
    24a6:	ee 0f       	add	r30, r30
    24a8:	ff 1f       	adc	r31, r31
    24aa:	e8 58       	subi	r30, 0x88	; 136
    24ac:	fc 4d       	sbci	r31, 0xDC	; 220
    24ae:	85 89       	ldd	r24, Z+21	; 0x15
    24b0:	80 7c       	andi	r24, 0xC0	; 192
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <udd_ep_run+0x6c>
    24b4:	81 c0       	rjmp	.+258    	; 0x25b8 <udd_ep_run+0x16e>
    24b6:	f7 01       	movw	r30, r14
    24b8:	ee 0f       	add	r30, r30
    24ba:	ff 1f       	adc	r31, r31
    24bc:	ee 0f       	add	r30, r30
    24be:	ff 1f       	adc	r31, r31
    24c0:	ee 0f       	add	r30, r30
    24c2:	ff 1f       	adc	r31, r31
    24c4:	e8 58       	subi	r30, 0x88	; 136
    24c6:	fc 4d       	sbci	r31, 0xDC	; 220
    24c8:	85 89       	ldd	r24, Z+21	; 0x15
    24ca:	80 7c       	andi	r24, 0xC0	; 192
    24cc:	80 3c       	cpi	r24, 0xC0	; 192
    24ce:	61 f0       	breq	.+24     	; 0x24e8 <udd_ep_run+0x9e>
    24d0:	f7 01       	movw	r30, r14
    24d2:	ee 0f       	add	r30, r30
    24d4:	ff 1f       	adc	r31, r31
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	ee 0f       	add	r30, r30
    24dc:	ff 1f       	adc	r31, r31
    24de:	e8 58       	subi	r30, 0x88	; 136
    24e0:	fc 4d       	sbci	r31, 0xDC	; 220
    24e2:	85 89       	ldd	r24, Z+21	; 0x15
    24e4:	82 fd       	sbrc	r24, 2
    24e6:	6a c0       	rjmp	.+212    	; 0x25bc <udd_ep_run+0x172>
    24e8:	8f b7       	in	r24, 0x3f	; 63
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	f8 94       	cli
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	f6 01       	movw	r30, r12
    24f2:	90 81       	ld	r25, Z
    24f4:	90 ff       	sbrs	r25, 0
    24f6:	03 c0       	rjmp	.+6      	; 0x24fe <udd_ep_run+0xb4>
    24f8:	8f bf       	out	0x3f, r24	; 63
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	60 c0       	rjmp	.+192    	; 0x25be <udd_ep_run+0x174>
    24fe:	f6 01       	movw	r30, r12
    2500:	90 81       	ld	r25, Z
    2502:	91 60       	ori	r25, 0x01	; 1
    2504:	90 83       	st	Z, r25
    2506:	8f bf       	out	0x3f, r24	; 63
    2508:	81 82       	std	Z+1, r8	; 0x01
    250a:	92 82       	std	Z+2, r9	; 0x02
    250c:	a3 82       	std	Z+3, r10	; 0x03
    250e:	b4 82       	std	Z+4, r11	; 0x04
    2510:	15 82       	std	Z+5, r1	; 0x05
    2512:	16 82       	std	Z+6, r1	; 0x06
    2514:	07 83       	std	Z+7, r16	; 0x07
    2516:	10 87       	std	Z+8, r17	; 0x08
    2518:	61 10       	cpse	r6, r1
    251a:	06 c0       	rjmp	.+12     	; 0x2528 <udd_ep_run+0xde>
    251c:	91 e0       	ldi	r25, 0x01	; 1
    251e:	a1 14       	cp	r10, r1
    2520:	b1 04       	cpc	r11, r1
    2522:	19 f0       	breq	.+6      	; 0x252a <udd_ep_run+0xe0>
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	01 c0       	rjmp	.+2      	; 0x252a <udd_ep_run+0xe0>
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	f6 01       	movw	r30, r12
    252c:	80 81       	ld	r24, Z
    252e:	90 fb       	bst	r25, 0
    2530:	81 f9       	bld	r24, 1
    2532:	8b 7f       	andi	r24, 0xFB	; 251
    2534:	80 83       	st	Z, r24
    2536:	22 23       	and	r18, r18
    2538:	64 f4       	brge	.+24     	; 0x2552 <udd_ep_run+0x108>
    253a:	f7 01       	movw	r30, r14
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	ee 0f       	add	r30, r30
    2542:	ff 1f       	adc	r31, r31
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	e8 58       	subi	r30, 0x88	; 136
    254a:	fc 4d       	sbci	r31, 0xDC	; 220
    254c:	12 8e       	std	Z+26, r1	; 0x1a
    254e:	13 8e       	std	Z+27, r1	; 0x1b
    2550:	2f c0       	rjmp	.+94     	; 0x25b0 <udd_ep_run+0x166>
    2552:	f7 01       	movw	r30, r14
    2554:	ee 0f       	add	r30, r30
    2556:	ff 1f       	adc	r31, r31
    2558:	ee 0f       	add	r30, r30
    255a:	ff 1f       	adc	r31, r31
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	e8 58       	subi	r30, 0x88	; 136
    2562:	fc 4d       	sbci	r31, 0xDC	; 220
    2564:	85 89       	ldd	r24, Z+21	; 0x15
    2566:	80 7c       	andi	r24, 0xC0	; 192
    2568:	80 3c       	cpi	r24, 0xC0	; 192
    256a:	a9 f4       	brne	.+42     	; 0x2596 <udd_ep_run+0x14c>
    256c:	c7 01       	movw	r24, r14
    256e:	88 0f       	add	r24, r24
    2570:	99 1f       	adc	r25, r25
    2572:	88 0f       	add	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	84 57       	subi	r24, 0x74	; 116
    257c:	9c 4d       	sbci	r25, 0xDC	; 220
    257e:	94 db       	rcall	.-2264   	; 0x1ca8 <udd_ep_get_size>
    2580:	bc 01       	movw	r22, r24
    2582:	c5 01       	movw	r24, r10
    2584:	b0 d2       	rcall	.+1376   	; 0x2ae6 <__udivmodhi4>
    2586:	89 2b       	or	r24, r25
    2588:	31 f0       	breq	.+12     	; 0x2596 <udd_ep_run+0x14c>
    258a:	f6 01       	movw	r30, r12
    258c:	80 81       	ld	r24, Z
    258e:	8e 7f       	andi	r24, 0xFE	; 254
    2590:	80 83       	st	Z, r24
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	14 c0       	rjmp	.+40     	; 0x25be <udd_ep_run+0x174>
    2596:	f7 01       	movw	r30, r14
    2598:	ee 0f       	add	r30, r30
    259a:	ff 1f       	adc	r31, r31
    259c:	ee 0f       	add	r30, r30
    259e:	ff 1f       	adc	r31, r31
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	e8 58       	subi	r30, 0x88	; 136
    25a6:	fc 4d       	sbci	r31, 0xDC	; 220
    25a8:	16 8a       	std	Z+22, r1	; 0x16
    25aa:	17 8a       	std	Z+23, r1	; 0x17
    25ac:	12 8e       	std	Z+26, r1	; 0x1a
    25ae:	13 8e       	std	Z+27, r1	; 0x1b
    25b0:	87 2d       	mov	r24, r7
    25b2:	2e dc       	rcall	.-1956   	; 0x1e10 <udd_ep_trans_complet>
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <udd_ep_run+0x174>
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <udd_ep_run+0x174>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	0f 90       	pop	r0
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	1f 91       	pop	r17
    25c6:	0f 91       	pop	r16
    25c8:	ff 90       	pop	r15
    25ca:	ef 90       	pop	r14
    25cc:	df 90       	pop	r13
    25ce:	cf 90       	pop	r12
    25d0:	bf 90       	pop	r11
    25d2:	af 90       	pop	r10
    25d4:	9f 90       	pop	r9
    25d6:	8f 90       	pop	r8
    25d8:	7f 90       	pop	r7
    25da:	6f 90       	pop	r6
    25dc:	08 95       	ret

000025de <udd_ep_abort>:
    25de:	ff 92       	push	r15
    25e0:	0f 93       	push	r16
    25e2:	1f 93       	push	r17
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	18 2f       	mov	r17, r24
    25ea:	c8 2f       	mov	r28, r24
    25ec:	cf 70       	andi	r28, 0x0F	; 15
    25ee:	d0 e0       	ldi	r29, 0x00	; 0
    25f0:	ce 01       	movw	r24, r28
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	c1 2f       	mov	r28, r17
    25f8:	01 2e       	mov	r0, r17
    25fa:	00 0c       	add	r0, r0
    25fc:	dd 0b       	sbc	r29, r29
    25fe:	cc 27       	eor	r28, r28
    2600:	dd 0f       	add	r29, r29
    2602:	cc 1f       	adc	r28, r28
    2604:	dd 27       	eor	r29, r29
    2606:	c8 0f       	add	r28, r24
    2608:	d9 1f       	adc	r29, r25
    260a:	81 2f       	mov	r24, r17
    260c:	75 db       	rcall	.-2326   	; 0x1cf8 <udd_ep_get_job>
    260e:	dc 01       	movw	r26, r24
    2610:	fe 01       	movw	r30, r28
    2612:	ee 0f       	add	r30, r30
    2614:	ff 1f       	adc	r31, r31
    2616:	ee 0f       	add	r30, r30
    2618:	ff 1f       	adc	r31, r31
    261a:	ee 0f       	add	r30, r30
    261c:	ff 1f       	adc	r31, r31
    261e:	e4 57       	subi	r30, 0x74	; 116
    2620:	fc 4d       	sbci	r31, 0xDC	; 220
    2622:	02 e0       	ldi	r16, 0x02	; 2
    2624:	05 93       	las	Z, r16
    2626:	8c 91       	ld	r24, X
    2628:	80 ff       	sbrs	r24, 0
    262a:	22 c0       	rjmp	.+68     	; 0x2670 <udd_ep_abort+0x92>
    262c:	8e 7f       	andi	r24, 0xFE	; 254
    262e:	8c 93       	st	X, r24
    2630:	17 96       	adiw	r26, 0x07	; 7
    2632:	ed 91       	ld	r30, X+
    2634:	fc 91       	ld	r31, X
    2636:	18 97       	sbiw	r26, 0x08	; 8
    2638:	30 97       	sbiw	r30, 0x00	; 0
    263a:	d1 f0       	breq	.+52     	; 0x2670 <udd_ep_abort+0x92>
    263c:	11 23       	and	r17, r17
    263e:	5c f4       	brge	.+22     	; 0x2656 <udd_ep_abort+0x78>
    2640:	cc 0f       	add	r28, r28
    2642:	dd 1f       	adc	r29, r29
    2644:	cc 0f       	add	r28, r28
    2646:	dd 1f       	adc	r29, r29
    2648:	cc 0f       	add	r28, r28
    264a:	dd 1f       	adc	r29, r29
    264c:	c8 58       	subi	r28, 0x88	; 136
    264e:	dc 4d       	sbci	r29, 0xDC	; 220
    2650:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2652:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2654:	0a c0       	rjmp	.+20     	; 0x266a <udd_ep_abort+0x8c>
    2656:	cc 0f       	add	r28, r28
    2658:	dd 1f       	adc	r29, r29
    265a:	cc 0f       	add	r28, r28
    265c:	dd 1f       	adc	r29, r29
    265e:	cc 0f       	add	r28, r28
    2660:	dd 1f       	adc	r29, r29
    2662:	c8 58       	subi	r28, 0x88	; 136
    2664:	dc 4d       	sbci	r29, 0xDC	; 220
    2666:	6e 89       	ldd	r22, Y+22	; 0x16
    2668:	7f 89       	ldd	r23, Y+23	; 0x17
    266a:	41 2f       	mov	r20, r17
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	19 95       	eicall
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	ff 90       	pop	r15
    267a:	08 95       	ret

0000267c <udd_ep_free>:
    267c:	cf 93       	push	r28
    267e:	c8 2f       	mov	r28, r24
    2680:	ae df       	rcall	.-164    	; 0x25de <udd_ep_abort>
    2682:	ec 2f       	mov	r30, r28
    2684:	ef 70       	andi	r30, 0x0F	; 15
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	ee 0f       	add	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	8c 2f       	mov	r24, r28
    268e:	cc 0f       	add	r28, r28
    2690:	99 0b       	sbc	r25, r25
    2692:	88 27       	eor	r24, r24
    2694:	99 0f       	add	r25, r25
    2696:	88 1f       	adc	r24, r24
    2698:	99 27       	eor	r25, r25
    269a:	e8 0f       	add	r30, r24
    269c:	f9 1f       	adc	r31, r25
    269e:	ee 0f       	add	r30, r30
    26a0:	ff 1f       	adc	r31, r31
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	ee 0f       	add	r30, r30
    26a8:	ff 1f       	adc	r31, r31
    26aa:	e8 58       	subi	r30, 0x88	; 136
    26ac:	fc 4d       	sbci	r31, 0xDC	; 220
    26ae:	15 8a       	std	Z+21, r1	; 0x15
    26b0:	cf 91       	pop	r28
    26b2:	08 95       	ret

000026b4 <udd_ep_set_halt>:
    26b4:	e8 2f       	mov	r30, r24
    26b6:	ef 70       	andi	r30, 0x0F	; 15
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	ee 0f       	add	r30, r30
    26bc:	ff 1f       	adc	r31, r31
    26be:	28 2f       	mov	r18, r24
    26c0:	08 2e       	mov	r0, r24
    26c2:	00 0c       	add	r0, r0
    26c4:	33 0b       	sbc	r19, r19
    26c6:	22 27       	eor	r18, r18
    26c8:	33 0f       	add	r19, r19
    26ca:	22 1f       	adc	r18, r18
    26cc:	33 27       	eor	r19, r19
    26ce:	e2 0f       	add	r30, r18
    26d0:	f3 1f       	adc	r31, r19
    26d2:	ee 0f       	add	r30, r30
    26d4:	ff 1f       	adc	r31, r31
    26d6:	ee 0f       	add	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	ee 0f       	add	r30, r30
    26dc:	ff 1f       	adc	r31, r31
    26de:	e8 58       	subi	r30, 0x88	; 136
    26e0:	fc 4d       	sbci	r31, 0xDC	; 220
    26e2:	95 89       	ldd	r25, Z+21	; 0x15
    26e4:	94 60       	ori	r25, 0x04	; 4
    26e6:	95 8b       	std	Z+21, r25	; 0x15
    26e8:	7a df       	rcall	.-268    	; 0x25de <udd_ep_abort>
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	08 95       	ret

000026ee <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    26ee:	1f 92       	push	r1
    26f0:	0f 92       	push	r0
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	0f 92       	push	r0
    26f6:	11 24       	eor	r1, r1
    26f8:	0b b6       	in	r0, 0x3b	; 59
    26fa:	0f 92       	push	r0
    26fc:	0f 93       	push	r16
    26fe:	2f 93       	push	r18
    2700:	3f 93       	push	r19
    2702:	4f 93       	push	r20
    2704:	5f 93       	push	r21
    2706:	6f 93       	push	r22
    2708:	7f 93       	push	r23
    270a:	8f 93       	push	r24
    270c:	9f 93       	push	r25
    270e:	af 93       	push	r26
    2710:	bf 93       	push	r27
    2712:	cf 93       	push	r28
    2714:	ef 93       	push	r30
    2716:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2718:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    271c:	88 23       	and	r24, r24
    271e:	3c f4       	brge	.+14     	; 0x272e <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    2720:	80 e8       	ldi	r24, 0x80	; 128
    2722:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    2726:	0e 94 89 0a 	call	0x1512	; 0x1512 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    272a:	af d1       	rcall	.+862    	; 0x2a8a <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    272c:	89 c0       	rjmp	.+274    	; 0x2840 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    272e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2732:	82 ff       	sbrs	r24, 2
    2734:	20 c0       	rjmp	.+64     	; 0x2776 <__vector_125+0x88>
		udd_ack_underflow_event();
    2736:	84 e0       	ldi	r24, 0x04	; 4
    2738:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    273c:	80 91 94 23 	lds	r24, 0x2394	; 0x802394 <udd_sram+0x1c>
    2740:	86 ff       	sbrs	r24, 6
    2742:	7e c0       	rjmp	.+252    	; 0x2840 <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2744:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2748:	81 fd       	sbrc	r24, 1
    274a:	7a c0       	rjmp	.+244    	; 0x2840 <__vector_125+0x152>
    274c:	f0 da       	rcall	.-2592   	; 0x1d2e <udd_ctrl_interrupt_tc_setup>
    274e:	81 11       	cpse	r24, r1
    2750:	77 c0       	rjmp	.+238    	; 0x2840 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2752:	80 91 77 23 	lds	r24, 0x2377	; 0x802377 <udd_ep_control_state>
    2756:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2758:	11 f4       	brne	.+4      	; 0x275e <__vector_125+0x70>
    275a:	24 da       	rcall	.-3000   	; 0x1ba4 <udd_ctrl_send_zlp_in>
    275c:	71 c0       	rjmp	.+226    	; 0x2840 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    275e:	84 30       	cpi	r24, 0x04	; 4
    2760:	09 f0       	breq	.+2      	; 0x2764 <__vector_125+0x76>
    2762:	6e c0       	rjmp	.+220    	; 0x2840 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2764:	e5 e9       	ldi	r30, 0x95	; 149
    2766:	f3 e2       	ldi	r31, 0x23	; 35
    2768:	04 e0       	ldi	r16, 0x04	; 4
    276a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    276c:	ed e8       	ldi	r30, 0x8D	; 141
    276e:	f3 e2       	ldi	r31, 0x23	; 35
    2770:	04 e0       	ldi	r16, 0x04	; 4
    2772:	05 93       	las	Z, r16
    2774:	65 c0       	rjmp	.+202    	; 0x2840 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2776:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    277a:	81 ff       	sbrs	r24, 1
    277c:	5c c0       	rjmp	.+184    	; 0x2836 <__vector_125+0x148>
		udd_ack_overflow_event();
    277e:	82 e0       	ldi	r24, 0x02	; 2
    2780:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    2784:	80 91 8c 23 	lds	r24, 0x238C	; 0x80238c <udd_sram+0x14>
    2788:	86 ff       	sbrs	r24, 6
    278a:	5a c0       	rjmp	.+180    	; 0x2840 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    278c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2790:	81 fd       	sbrc	r24, 1
    2792:	56 c0       	rjmp	.+172    	; 0x2840 <__vector_125+0x152>
    2794:	cc da       	rcall	.-2664   	; 0x1d2e <udd_ctrl_interrupt_tc_setup>
    2796:	81 11       	cpse	r24, r1
    2798:	53 c0       	rjmp	.+166    	; 0x2840 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    279a:	80 91 77 23 	lds	r24, 0x2377	; 0x802377 <udd_ep_control_state>
    279e:	82 30       	cpi	r24, 0x02	; 2
    27a0:	41 f4       	brne	.+16     	; 0x27b2 <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    27a2:	84 e0       	ldi	r24, 0x04	; 4
    27a4:	80 93 77 23 	sts	0x2377, r24	; 0x802377 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    27a8:	ec e8       	ldi	r30, 0x8C	; 140
    27aa:	f3 e2       	ldi	r31, 0x23	; 35
    27ac:	02 e0       	ldi	r16, 0x02	; 2
    27ae:	06 93       	lac	Z, r16
    27b0:	47 c0       	rjmp	.+142    	; 0x2840 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    27b2:	83 30       	cpi	r24, 0x03	; 3
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <__vector_125+0xca>
    27b6:	44 c0       	rjmp	.+136    	; 0x2840 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    27b8:	e5 e9       	ldi	r30, 0x95	; 149
    27ba:	f3 e2       	ldi	r31, 0x23	; 35
    27bc:	04 e0       	ldi	r16, 0x04	; 4
    27be:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    27c0:	ed e8       	ldi	r30, 0x8D	; 141
    27c2:	f3 e2       	ldi	r31, 0x23	; 35
    27c4:	04 e0       	ldi	r16, 0x04	; 4
    27c6:	05 93       	las	Z, r16
    27c8:	3b c0       	rjmp	.+118    	; 0x2840 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    27ca:	80 e1       	ldi	r24, 0x10	; 16
    27cc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    27d0:	c1 e0       	ldi	r28, 0x01	; 1
    27d2:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    27d4:	04 df       	rcall	.-504    	; 0x25de <udd_ep_abort>
    27d6:	8c 2f       	mov	r24, r28
    27d8:	80 68       	ori	r24, 0x80	; 128
    27da:	01 df       	rcall	.-510    	; 0x25de <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    27dc:	cf 5f       	subi	r28, 0xFF	; 255
    27de:	c5 30       	cpi	r28, 0x05	; 5
    27e0:	c1 f7       	brne	.-16     	; 0x27d2 <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    27e2:	0e 94 5f 0a 	call	0x14be	; 0x14be <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    27e6:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    27ea:	e8 e7       	ldi	r30, 0x78	; 120
    27ec:	f3 e2       	ldi	r31, 0x23	; 35
    27ee:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    27f0:	96 e0       	ldi	r25, 0x06	; 6
    27f2:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    27f4:	80 e4       	ldi	r24, 0x40	; 64
    27f6:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    27f8:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    27fa:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    27fc:	85 8f       	std	Z+29, r24	; 0x1d
    27fe:	8b e6       	ldi	r24, 0x6B	; 107
    2800:	93 e2       	ldi	r25, 0x23	; 35
    2802:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    2804:	91 8f       	std	Z+25, r25	; 0x19
    2806:	9b d9       	rcall	.-3274   	; 0x1b3e <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2808:	1b c0       	rjmp	.+54     	; 0x2840 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    280a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    280e:	86 ff       	sbrs	r24, 6
    2810:	07 c0       	rjmp	.+14     	; 0x2820 <__vector_125+0x132>
    2812:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2814:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2818:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    281a:	59 d9       	rcall	.-3406   	; 0x1ace <udd_sleep_mode>
    281c:	34 d1       	rcall	.+616    	; 0x2a86 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    281e:	10 c0       	rjmp	.+32     	; 0x2840 <__vector_125+0x152>
    2820:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    2824:	85 ff       	sbrs	r24, 5
    2826:	0c c0       	rjmp	.+24     	; 0x2840 <__vector_125+0x152>
    2828:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    282a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    282e:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2830:	4e d9       	rcall	.-3428   	; 0x1ace <udd_sleep_mode>
    2832:	2a d1       	rcall	.+596    	; 0x2a88 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2834:	05 c0       	rjmp	.+10     	; 0x2840 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2836:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    283a:	84 fd       	sbrc	r24, 4
    283c:	c6 cf       	rjmp	.-116    	; 0x27ca <__vector_125+0xdc>
    283e:	e5 cf       	rjmp	.-54     	; 0x280a <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2840:	ff 91       	pop	r31
    2842:	ef 91       	pop	r30
    2844:	cf 91       	pop	r28
    2846:	bf 91       	pop	r27
    2848:	af 91       	pop	r26
    284a:	9f 91       	pop	r25
    284c:	8f 91       	pop	r24
    284e:	7f 91       	pop	r23
    2850:	6f 91       	pop	r22
    2852:	5f 91       	pop	r21
    2854:	4f 91       	pop	r20
    2856:	3f 91       	pop	r19
    2858:	2f 91       	pop	r18
    285a:	0f 91       	pop	r16
    285c:	0f 90       	pop	r0
    285e:	0b be       	out	0x3b, r0	; 59
    2860:	0f 90       	pop	r0
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	0f 90       	pop	r0
    2866:	1f 90       	pop	r1
    2868:	18 95       	reti

0000286a <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    286a:	1f 92       	push	r1
    286c:	0f 92       	push	r0
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	0f 92       	push	r0
    2872:	11 24       	eor	r1, r1
    2874:	0b b6       	in	r0, 0x3b	; 59
    2876:	0f 92       	push	r0
    2878:	0f 93       	push	r16
    287a:	1f 93       	push	r17
    287c:	2f 93       	push	r18
    287e:	3f 93       	push	r19
    2880:	4f 93       	push	r20
    2882:	5f 93       	push	r21
    2884:	6f 93       	push	r22
    2886:	7f 93       	push	r23
    2888:	8f 93       	push	r24
    288a:	9f 93       	push	r25
    288c:	af 93       	push	r26
    288e:	bf 93       	push	r27
    2890:	cf 93       	push	r28
    2892:	df 93       	push	r29
    2894:	ef 93       	push	r30
    2896:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2898:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    289c:	81 fd       	sbrc	r24, 1
    289e:	03 c0       	rjmp	.+6      	; 0x28a6 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    28a0:	46 da       	rcall	.-2932   	; 0x1d2e <udd_ctrl_interrupt_tc_setup>
    28a2:	81 11       	cpse	r24, r1
    28a4:	c3 c0       	rjmp	.+390    	; 0x2a2c <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    28a6:	82 e0       	ldi	r24, 0x02	; 2
    28a8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    28ac:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    28b0:	81 95       	neg	r24
    28b2:	88 0f       	add	r24, r24
    28b4:	ec e8       	ldi	r30, 0x8C	; 140
    28b6:	f3 e2       	ldi	r31, 0x23	; 35
    28b8:	e8 1b       	sub	r30, r24
    28ba:	f1 09       	sbc	r31, r1
    28bc:	20 81       	ld	r18, Z
    28be:	31 81       	ldd	r19, Z+1	; 0x01
    28c0:	2c 58       	subi	r18, 0x8C	; 140
    28c2:	33 42       	sbci	r19, 0x23	; 35
    28c4:	36 95       	lsr	r19
    28c6:	27 95       	ror	r18
    28c8:	36 95       	lsr	r19
    28ca:	27 95       	ror	r18
    28cc:	36 95       	lsr	r19
    28ce:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    28d0:	82 2f       	mov	r24, r18
    28d2:	86 95       	lsr	r24
    28d4:	20 fd       	sbrc	r18, 0
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <__vector_126+0x72>
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	01 c0       	rjmp	.+2      	; 0x28de <__vector_126+0x74>
    28dc:	90 e8       	ldi	r25, 0x80	; 128
    28de:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    28e0:	e8 2f       	mov	r30, r24
    28e2:	ef 70       	andi	r30, 0x0F	; 15
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	ee 0f       	add	r30, r30
    28e8:	ff 1f       	adc	r31, r31
    28ea:	28 2f       	mov	r18, r24
    28ec:	08 2e       	mov	r0, r24
    28ee:	00 0c       	add	r0, r0
    28f0:	33 0b       	sbc	r19, r19
    28f2:	22 27       	eor	r18, r18
    28f4:	33 0f       	add	r19, r19
    28f6:	22 1f       	adc	r18, r18
    28f8:	33 27       	eor	r19, r19
    28fa:	e2 0f       	add	r30, r18
    28fc:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    28fe:	df 01       	movw	r26, r30
    2900:	aa 0f       	add	r26, r26
    2902:	bb 1f       	adc	r27, r27
    2904:	aa 0f       	add	r26, r26
    2906:	bb 1f       	adc	r27, r27
    2908:	aa 0f       	add	r26, r26
    290a:	bb 1f       	adc	r27, r27
    290c:	a8 58       	subi	r26, 0x88	; 136
    290e:	bc 4d       	sbci	r27, 0xDC	; 220
    2910:	54 96       	adiw	r26, 0x14	; 20
    2912:	9c 91       	ld	r25, X
    2914:	95 ff       	sbrs	r25, 5
    2916:	8a c0       	rjmp	.+276    	; 0x2a2c <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2918:	ee 0f       	add	r30, r30
    291a:	ff 1f       	adc	r31, r31
    291c:	ee 0f       	add	r30, r30
    291e:	ff 1f       	adc	r31, r31
    2920:	ee 0f       	add	r30, r30
    2922:	ff 1f       	adc	r31, r31
    2924:	e4 57       	subi	r30, 0x74	; 116
    2926:	fc 4d       	sbci	r31, 0xDC	; 220
    2928:	00 e2       	ldi	r16, 0x20	; 32
    292a:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    292c:	81 11       	cpse	r24, r1
    292e:	79 c0       	rjmp	.+242    	; 0x2a22 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2930:	80 91 77 23 	lds	r24, 0x2377	; 0x802377 <udd_ep_control_state>
    2934:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2936:	19 f4       	brne	.+6      	; 0x293e <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2938:	43 d9       	rcall	.-3450   	; 0x1bc0 <udd_ctrl_endofrequest>
    293a:	01 d9       	rcall	.-3582   	; 0x1b3e <udd_ctrl_init>
    293c:	77 c0       	rjmp	.+238    	; 0x2a2c <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    293e:	00 91 8e 23 	lds	r16, 0x238E	; 0x80238e <udd_sram+0x16>
    2942:	10 91 8f 23 	lds	r17, 0x238F	; 0x80238f <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2946:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0xa>
    294a:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0xb>
    294e:	c0 91 73 23 	lds	r28, 0x2373	; 0x802373 <udd_ctrl_payload_nb_trans>
    2952:	d0 91 74 23 	lds	r29, 0x2374	; 0x802374 <udd_ctrl_payload_nb_trans+0x1>
    2956:	98 01       	movw	r18, r16
    2958:	2c 0f       	add	r18, r28
    295a:	3d 1f       	adc	r19, r29
    295c:	82 17       	cp	r24, r18
    295e:	93 07       	cpc	r25, r19
    2960:	18 f4       	brcc	.+6      	; 0x2968 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2962:	8c 01       	movw	r16, r24
    2964:	0c 1b       	sub	r16, r28
    2966:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2968:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <udd_g_ctrlreq+0x8>
    296c:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0x9>
    2970:	a8 01       	movw	r20, r16
    2972:	6b e6       	ldi	r22, 0x6B	; 107
    2974:	73 e2       	ldi	r23, 0x23	; 35
    2976:	8c 0f       	add	r24, r28
    2978:	9d 1f       	adc	r25, r29
    297a:	d1 d0       	rcall	.+418    	; 0x2b1e <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    297c:	c0 0f       	add	r28, r16
    297e:	d1 1f       	adc	r29, r17
    2980:	c0 93 73 23 	sts	0x2373, r28	; 0x802373 <udd_ctrl_payload_nb_trans>
    2984:	d0 93 74 23 	sts	0x2374, r29	; 0x802374 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2988:	08 30       	cpi	r16, 0x08	; 8
    298a:	11 05       	cpc	r17, r1
    298c:	69 f4       	brne	.+26     	; 0x29a8 <__vector_126+0x13e>
    298e:	80 91 75 23 	lds	r24, 0x2375	; 0x802375 <udd_ctrl_prev_payload_nb_trans>
    2992:	90 91 76 23 	lds	r25, 0x2376	; 0x802376 <udd_ctrl_prev_payload_nb_trans+0x1>
    2996:	8c 0f       	add	r24, r28
    2998:	9d 1f       	adc	r25, r29
    299a:	20 91 f0 23 	lds	r18, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0x6>
    299e:	30 91 f1 23 	lds	r19, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0x7>
    29a2:	82 17       	cp	r24, r18
    29a4:	93 07       	cpc	r25, r19
    29a6:	80 f0       	brcs	.+32     	; 0x29c8 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    29a8:	ea ee       	ldi	r30, 0xEA	; 234
    29aa:	f3 e2       	ldi	r31, 0x23	; 35
    29ac:	c2 87       	std	Z+10, r28	; 0x0a
    29ae:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    29b0:	06 84       	ldd	r0, Z+14	; 0x0e
    29b2:	f7 85       	ldd	r31, Z+15	; 0x0f
    29b4:	e0 2d       	mov	r30, r0
    29b6:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    29b8:	29 f0       	breq	.+10     	; 0x29c4 <__vector_126+0x15a>
    29ba:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    29bc:	81 11       	cpse	r24, r1
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <__vector_126+0x15a>
    29c0:	e3 d8       	rcall	.-3642   	; 0x1b88 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    29c2:	34 c0       	rjmp	.+104    	; 0x2a2c <__vector_126+0x1c2>
    29c4:	ef d8       	rcall	.-3618   	; 0x1ba4 <udd_ctrl_send_zlp_in>
    29c6:	32 c0       	rjmp	.+100    	; 0x2a2c <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    29c8:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0xa>
    29cc:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0xb>
    29d0:	c8 17       	cp	r28, r24
    29d2:	d9 07       	cpc	r29, r25
    29d4:	f9 f4       	brne	.+62     	; 0x2a14 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    29d6:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0xe>
    29da:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0xf>
    29de:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    29e0:	11 f4       	brne	.+4      	; 0x29e6 <__vector_126+0x17c>
    29e2:	d2 d8       	rcall	.-3676   	; 0x1b88 <udd_ctrl_stall_data>
    29e4:	23 c0       	rjmp	.+70     	; 0x2a2c <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    29e6:	19 95       	eicall
    29e8:	81 11       	cpse	r24, r1
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    29ec:	cd d8       	rcall	.-3686   	; 0x1b88 <udd_ctrl_stall_data>
    29ee:	1e c0       	rjmp	.+60     	; 0x2a2c <__vector_126+0x1c2>
    29f0:	20 91 75 23 	lds	r18, 0x2375	; 0x802375 <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    29f4:	30 91 76 23 	lds	r19, 0x2376	; 0x802376 <udd_ctrl_prev_payload_nb_trans+0x1>
    29f8:	80 91 73 23 	lds	r24, 0x2373	; 0x802373 <udd_ctrl_payload_nb_trans>
    29fc:	90 91 74 23 	lds	r25, 0x2374	; 0x802374 <udd_ctrl_payload_nb_trans+0x1>
    2a00:	82 0f       	add	r24, r18
    2a02:	93 1f       	adc	r25, r19
    2a04:	80 93 75 23 	sts	0x2375, r24	; 0x802375 <udd_ctrl_prev_payload_nb_trans>
    2a08:	90 93 76 23 	sts	0x2376, r25	; 0x802376 <udd_ctrl_prev_payload_nb_trans+0x1>
    2a0c:	10 92 73 23 	sts	0x2373, r1	; 0x802373 <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2a10:	10 92 74 23 	sts	0x2374, r1	; 0x802374 <udd_ctrl_payload_nb_trans+0x1>
    2a14:	ec e8       	ldi	r30, 0x8C	; 140
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2a16:	f3 e2       	ldi	r31, 0x23	; 35
    2a18:	02 e0       	ldi	r16, 0x02	; 2
    2a1a:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2a1c:	00 e2       	ldi	r16, 0x20	; 32
    2a1e:	06 93       	lac	Z, r16
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2a20:	05 c0       	rjmp	.+10     	; 0x2a2c <__vector_126+0x1c2>
    2a22:	80 38       	cpi	r24, 0x80	; 128
		udd_ctrl_in_sent();
    2a24:	11 f4       	brne	.+4      	; 0x2a2a <__vector_126+0x1c0>
    2a26:	d4 d8       	rcall	.-3672   	; 0x1bd0 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2a28:	01 c0       	rjmp	.+2      	; 0x2a2c <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2a2a:	f2 d9       	rcall	.-3100   	; 0x1e10 <udd_ep_trans_complet>
    2a2c:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2a2e:	ef 91       	pop	r30
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	bf 91       	pop	r27
    2a36:	af 91       	pop	r26
    2a38:	9f 91       	pop	r25
    2a3a:	8f 91       	pop	r24
    2a3c:	7f 91       	pop	r23
    2a3e:	6f 91       	pop	r22
    2a40:	5f 91       	pop	r21
    2a42:	4f 91       	pop	r20
    2a44:	3f 91       	pop	r19
    2a46:	2f 91       	pop	r18
    2a48:	1f 91       	pop	r17
    2a4a:	0f 91       	pop	r16
    2a4c:	0f 90       	pop	r0
    2a4e:	0b be       	out	0x3b, r0	; 59
    2a50:	0f 90       	pop	r0
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	0f 90       	pop	r0
    2a56:	1f 90       	pop	r1
    2a58:	18 95       	reti

00002a5a <main>:


int main (void)
{
	// initializes vector table
	irq_initialize_vectors();
    2a5a:	87 e0       	ldi	r24, 0x07	; 7
    2a5c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	// enables CPU interrupts
	cpu_irq_enable();
    2a60:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2a62:	e4 ee       	ldi	r30, 0xE4	; 228
    2a64:	f3 e2       	ldi	r31, 0x23	; 35
    2a66:	10 82       	st	Z, r1
    2a68:	11 82       	std	Z+1, r1	; 0x01
    2a6a:	12 82       	std	Z+2, r1	; 0x02
    2a6c:	13 82       	std	Z+3, r1	; 0x03
    2a6e:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	85 83       	std	Z+5, r24	; 0x05
	// initialize sleep manager
	sleepmgr_init();
	// initialize clock
	sysclk_init();
    2a74:	0e 94 cb 06 	call	0xd96	; 0xd96 <sysclk_init>

	// initializes i/o pins & sub-devices
	io_ui_process();
    2a78:	0e 94 27 06 	call	0xc4e	; 0xc4e <io_ui_process>

	// starts USB device controller
	udc_start();
    2a7c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <udc_start>

	// startup sequence (blocking)
	startup_ui_process();
    2a80:	0e 94 be 06 	call	0xd7c	; 0xd7c <startup_ui_process>
    2a84:	ff cf       	rjmp	.-2      	; 0x2a84 <main+0x2a>

00002a86 <main_suspend_action>:


/* -------------------------------------- */
/* ----------------- USB ---------------- */
/* -------------------------------------- */
void main_suspend_action(void) { }
    2a86:	08 95       	ret

00002a88 <main_resume_action>:
void main_resume_action(void) { }
    2a88:	08 95       	ret

00002a8a <main_sof_action>:

void main_sof_action(void) {
	if (!main_b_kbd_enable)
    2a8a:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <main_b_kbd_enable>
    2a8e:	88 23       	and	r24, r24
    2a90:	91 f0       	breq	.+36     	; 0x2ab6 <main_sof_action+0x2c>
		return;
	kbd_ui_process();
    2a92:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <kbd_ui_process>

	if (!main_b_joystick_enable)
    2a96:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <main_b_joystick_enable>
    2a9a:	88 23       	and	r24, r24
    2a9c:	61 f0       	breq	.+24     	; 0x2ab6 <main_sof_action+0x2c>
		return;
	jstk_ui_process();
    2a9e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <jstk_ui_process>

	if (!main_b_led_enable)
    2aa2:	80 91 e1 23 	lds	r24, 0x23E1	; 0x8023e1 <main_b_led_enable>
    2aa6:	88 23       	and	r24, r24
    2aa8:	31 f0       	breq	.+12     	; 0x2ab6 <main_sof_action+0x2c>
		return;

	gui_ui_process();
    2aaa:	0e 94 29 06 	call	0xc52	; 0xc52 <gui_ui_process>
	status_ui_process();
    2aae:	0e 94 92 06 	call	0xd24	; 0xd24 <status_ui_process>

	idle_ui_process();
    2ab2:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <idle_ui_process>
    2ab6:	08 95       	ret

00002ab8 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2ab8:	08 95       	ret

00002aba <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2aba:	08 95       	ret

00002abc <main_kbd_enable>:

/* -------------------------------------- */
/* -------------- Keyboard -------------- */
/* -------------------------------------- */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	80 93 e3 23 	sts	0x23E3, r24	; 0x8023e3 <main_b_kbd_enable>
	return true;
}
    2ac2:	08 95       	ret

00002ac4 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2ac4:	10 92 e3 23 	sts	0x23E3, r1	; 0x8023e3 <main_b_kbd_enable>
    2ac8:	08 95       	ret

00002aca <main_joystick_enable>:

/* -------------------------------------- */
/* -------------- Joystick -------------- */
/* -------------------------------------- */
bool main_joystick_enable(void) {
	main_b_joystick_enable = true;
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	80 93 e2 23 	sts	0x23E2, r24	; 0x8023e2 <main_b_joystick_enable>
	return true;
}
    2ad0:	08 95       	ret

00002ad2 <main_joystick_disable>:

void main_joystick_disable(void) {
	main_b_joystick_enable = false;
    2ad2:	10 92 e2 23 	sts	0x23E2, r1	; 0x8023e2 <main_b_joystick_enable>
    2ad6:	08 95       	ret

00002ad8 <main_led_enable>:

/* -------------------------------------- */
/* ---------------- LEDs ---------------- */
/* -------------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	80 93 e1 23 	sts	0x23E1, r24	; 0x8023e1 <main_b_led_enable>
	return true;
}
    2ade:	08 95       	ret

00002ae0 <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2ae0:	10 92 e1 23 	sts	0x23E1, r1	; 0x8023e1 <main_b_led_enable>
    2ae4:	08 95       	ret

00002ae6 <__udivmodhi4>:
    2ae6:	aa 1b       	sub	r26, r26
    2ae8:	bb 1b       	sub	r27, r27
    2aea:	51 e1       	ldi	r21, 0x11	; 17
    2aec:	07 c0       	rjmp	.+14     	; 0x2afc <__udivmodhi4_ep>

00002aee <__udivmodhi4_loop>:
    2aee:	aa 1f       	adc	r26, r26
    2af0:	bb 1f       	adc	r27, r27
    2af2:	a6 17       	cp	r26, r22
    2af4:	b7 07       	cpc	r27, r23
    2af6:	10 f0       	brcs	.+4      	; 0x2afc <__udivmodhi4_ep>
    2af8:	a6 1b       	sub	r26, r22
    2afa:	b7 0b       	sbc	r27, r23

00002afc <__udivmodhi4_ep>:
    2afc:	88 1f       	adc	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	5a 95       	dec	r21
    2b02:	a9 f7       	brne	.-22     	; 0x2aee <__udivmodhi4_loop>
    2b04:	80 95       	com	r24
    2b06:	90 95       	com	r25
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	08 95       	ret

00002b0e <__tablejump2__>:
    2b0e:	ee 0f       	add	r30, r30
    2b10:	ff 1f       	adc	r31, r31
    2b12:	88 1f       	adc	r24, r24
    2b14:	8b bf       	out	0x3b, r24	; 59
    2b16:	07 90       	elpm	r0, Z+
    2b18:	f6 91       	elpm	r31, Z
    2b1a:	e0 2d       	mov	r30, r0
    2b1c:	19 94       	eijmp

00002b1e <memcpy>:
    2b1e:	fb 01       	movw	r30, r22
    2b20:	dc 01       	movw	r26, r24
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <memcpy+0xa>
    2b24:	01 90       	ld	r0, Z+
    2b26:	0d 92       	st	X+, r0
    2b28:	41 50       	subi	r20, 0x01	; 1
    2b2a:	50 40       	sbci	r21, 0x00	; 0
    2b2c:	d8 f7       	brcc	.-10     	; 0x2b24 <memcpy+0x6>
    2b2e:	08 95       	ret

00002b30 <_exit>:
    2b30:	f8 94       	cli

00002b32 <__stop_program>:
    2b32:	ff cf       	rjmp	.-2      	; 0x2b32 <__stop_program>
