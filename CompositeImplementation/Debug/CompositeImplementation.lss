
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000192  00802000  00002a94  00002b28  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000264  00802192  00802192  00002cba  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002cba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005c0  00000000  00000000  00002d30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b1bd  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005326  00000000  00000000  0000e4ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000997c  00000000  00000000  000137d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d24  00000000  00000000  0001d150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036daf  00000000  00000000  0001de74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f8a  00000000  00000000  00054c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  00057bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd69  00000000  00000000  000581d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 27 13 	jmp	0x264e	; 0x264e <__vector_125>
     1f8:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__vector_126>
     1fc:	83 04       	cpc	r8, r3
     1fe:	c2 04       	cpc	r12, r2
     200:	79 04       	cpc	r7, r9
     202:	c4 04       	cpc	r12, r4
     204:	7b 04       	cpc	r7, r11
     206:	7d 04       	cpc	r7, r13
     208:	7f 04       	cpc	r7, r15
     20a:	81 04       	cpc	r8, r1
     20c:	83 04       	cpc	r8, r3
     20e:	14 0e       	add	r1, r20
     210:	17 0e       	add	r1, r23
     212:	1a 0e       	add	r1, r26
     214:	1d 0e       	add	r1, r29
     216:	20 0e       	add	r2, r16
     218:	23 0e       	add	r2, r19
     21a:	26 0e       	add	r2, r22

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	e4 e9       	ldi	r30, 0x94	; 148
     234:	fa e2       	ldi	r31, 0x2A	; 42
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a2 39       	cpi	r26, 0x92	; 146
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a2 e9       	ldi	r26, 0x92	; 146
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a6 3f       	cpi	r26, 0xF6	; 246
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 dd 14 	call	0x29ba	; 0x29ba <main>
     25a:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     264:	30 91 e8 23 	lds	r19, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
     268:	20 91 e9 23 	lds	r18, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     278:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
     27c:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     284:	e6 ee       	ldi	r30, 0xE6	; 230
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	82 e9       	ldi	r24, 0x92	; 146
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     298:	8b e7       	ldi	r24, 0x7B	; 123
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
	}
	return false;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_in_sent>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep) {
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_led_b_report_in_free = true;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <udi_hid_led_b_report_in_free>
     2b6:	08 95       	ret

000002b8 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2bc:	0b e7       	ldi	r16, 0x7B	; 123
     2be:	11 e0       	ldi	r17, 0x01	; 1
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	42 e9       	ldi	r20, 0x92	; 146
     2c6:	51 e2       	ldi	r21, 0x21	; 33
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	0e 94 d5 11 	call	0x23aa	; 0x23aa <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
}
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	08 95       	ret

000002d6 <udi_hid_led_enable>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep);

/* --------------------------------------------------------------------- */

bool udi_hid_led_enable(void) {
     2d6:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d8:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2dc:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <udi_hid_led_protocol>
	udi_hid_led_b_report_in_free = true;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <udi_hid_led_b_report_in_free>

	if(!udi_hid_led_report_out_enable())
     2e6:	e8 df       	rcall	.-48     	; 0x2b8 <udi_hid_led_report_out_enable>
     2e8:	c8 2f       	mov	r28, r24
     2ea:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2ec:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <main_led_enable>
	return true;
}
     2f0:	8c 2f       	mov	r24, r28
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2f6:	81 11       	cpse	r24, r1
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <udi_hid_led_report_out_received+0x10>
     2fa:	61 30       	cpi	r22, 0x01	; 1
     2fc:	71 05       	cpc	r23, r1
     2fe:	19 f4       	brne	.+6      	; 0x306 <udi_hid_led_report_out_received+0x10>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     300:	82 e9       	ldi	r24, 0x92	; 146
     302:	91 e2       	ldi	r25, 0x21	; 33
     304:	97 d4       	rcall	.+2350   	; 0xc34 <led_ui_report>
	}
	udi_hid_led_report_out_enable();
     306:	d8 cf       	rjmp	.-80     	; 0x2b8 <udi_hid_led_report_out_enable>
     308:	08 95       	ret

0000030a <udi_hid_led_disable>:
     30a:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <main_led_disable>
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     30e:	08 95       	ret

00000310 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     310:	22 e3       	ldi	r18, 0x32	; 50
     312:	31 e0       	ldi	r19, 0x01	; 1
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e2       	ldi	r21, 0x20	; 32
     318:	6a e9       	ldi	r22, 0x9A	; 154
     31a:	71 e2       	ldi	r23, 0x21	; 33
     31c:	8c e9       	ldi	r24, 0x9C	; 156
     31e:	91 e2       	ldi	r25, 0x21	; 33
     320:	ef c6       	rjmp	.+3550   	; 0x1100 <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     322:	08 95       	ret

00000324 <udi_hid_led_send_report_in>:
		              udi_hid_led_report_out_received);
}


bool udi_hid_led_send_report_in(uint8_t *data)
{
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	9c 01       	movw	r18, r24
	if (!udi_hid_led_b_report_in_free)
     336:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <udi_hid_led_b_report_in_free>
     33a:	88 23       	and	r24, r24
     33c:	59 f1       	breq	.+86     	; 0x394 <udi_hid_led_send_report_in+0x70>
     33e:	d9 01       	movw	r26, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     340:	8f b7       	in	r24, 0x3f	; 63
     342:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     344:	f8 94       	cli
	return flags;
     346:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();

	memset(&udi_hid_led_report_in,
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	24 e9       	ldi	r18, 0x94	; 148
     34c:	31 e2       	ldi	r19, 0x21	; 33
     34e:	f9 01       	movw	r30, r18
     350:	11 92       	st	Z+, r1
     352:	8a 95       	dec	r24
     354:	e9 f7       	brne	.-6      	; 0x350 <udi_hid_led_send_report_in+0x2c>
		   0,
		   sizeof(udi_hid_led_report_in));
	memcpy(&udi_hid_led_report_in,
     356:	8d 91       	ld	r24, X+
     358:	9d 91       	ld	r25, X+
     35a:	0d 90       	ld	r0, X+
     35c:	bc 91       	ld	r27, X
     35e:	a0 2d       	mov	r26, r0
     360:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <udi_hid_led_report_in>
     364:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <udi_hid_led_report_in+0x1>
     368:	a0 93 96 21 	sts	0x2196, r26	; 0x802196 <udi_hid_led_report_in+0x2>
     36c:	b0 93 97 21 	sts	0x2197, r27	; 0x802197 <udi_hid_led_report_in+0x3>
		   data,
		   sizeof(udi_hid_led_report_in));
	udi_hid_led_b_report_in_free = !udd_ep_run(UDI_HID_LED_EP_IN,
     370:	08 e5       	ldi	r16, 0x58	; 88
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	24 e0       	ldi	r18, 0x04	; 4
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	44 e9       	ldi	r20, 0x94	; 148
     37a:	51 e2       	ldi	r21, 0x21	; 33
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	84 e8       	ldi	r24, 0x84	; 132
     380:	0e 94 d5 11 	call	0x23aa	; 0x23aa <udd_ep_run>
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	89 27       	eor	r24, r25
     388:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <udi_hid_led_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     38c:	ff be       	out	0x3f, r15	; 63
		                                       false,
		                                       (uint8_t *) & udi_hid_led_report_in,
		                                       sizeof(udi_hid_led_report_in),
		                                       udi_hid_led_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_led_b_report_in_free;
     38e:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <udi_hid_led_b_report_in_free>
     392:	89 27       	eor	r24, r25
}
     394:	0f 90       	pop	r0
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	08 95       	ret

000003a2 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     3a2:	e0 e0       	ldi	r30, 0x00	; 0
     3a4:	f6 e0       	ldi	r31, 0x06	; 6
     3a6:	9f ef       	ldi	r25, 0xFF	; 255
     3a8:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     3aa:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     3ac:	e0 e2       	ldi	r30, 0x20	; 32
     3ae:	f6 e0       	ldi	r31, 0x06	; 6
     3b0:	3f e3       	ldi	r19, 0x3F	; 63
     3b2:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3b4:	88 e1       	ldi	r24, 0x18	; 24
     3b6:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3b8:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3ba:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3bc:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3be:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3c0:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     3c2:	20 ec       	ldi	r18, 0xC0	; 192
     3c4:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     3c6:	40 e4       	ldi	r20, 0x40	; 64
     3c8:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     3ca:	40 e8       	ldi	r20, 0x80	; 128
     3cc:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     3ce:	e0 e4       	ldi	r30, 0x40	; 64
     3d0:	f6 e0       	ldi	r31, 0x06	; 6
     3d2:	4c ef       	ldi	r20, 0xFC	; 252
     3d4:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d6:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d8:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3da:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3dc:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3de:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e0:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     3e2:	43 e0       	ldi	r20, 0x03	; 3
     3e4:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     3e6:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     3e8:	e0 e6       	ldi	r30, 0x60	; 96
     3ea:	f6 e0       	ldi	r31, 0x06	; 6
     3ec:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ee:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f0:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f2:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f4:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f6:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f8:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     3fa:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     3fc:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     3fe:	e0 e8       	ldi	r30, 0x80	; 128
     400:	f6 e0       	ldi	r31, 0x06	; 6
     402:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     404:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     406:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     408:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40a:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40c:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40e:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     410:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     412:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     414:	e0 ea       	ldi	r30, 0xA0	; 160
     416:	f6 e0       	ldi	r31, 0x06	; 6
     418:	90 ef       	ldi	r25, 0xF0	; 240
     41a:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41c:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41e:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     420:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     422:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     428:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     42a:	ca d2       	rcall	.+1428   	; 0x9c0 <led_init>
	keypad_init();
     42c:	fa d0       	rcall	.+500    	; 0x622 <keypad_init>
	idle_start();
     42e:	75 c3       	rjmp	.+1770   	; 0xb1a <idle_start>
     430:	08 95       	ret

00000432 <jstk_readVertIndex>:
     432:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     436:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	92 2b       	or	r25, r18
     43e:	96 95       	lsr	r25
     440:	87 95       	ror	r24
     442:	96 95       	lsr	r25
     444:	87 95       	ror	r24
     446:	bc 01       	movw	r22, r24
     448:	7f 70       	andi	r23, 0x0F	; 15
     44a:	80 ff       	sbrs	r24, 0
     44c:	17 c0       	rjmp	.+46     	; 0x47c <jstk_readVertIndex+0x4a>
     44e:	21 e0       	ldi	r18, 0x01	; 1
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	e1 e0       	ldi	r30, 0x01	; 1
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	82 2f       	mov	r24, r18
     458:	af 01       	movw	r20, r30
     45a:	02 2e       	mov	r0, r18
     45c:	02 c0       	rjmp	.+4      	; 0x462 <jstk_readVertIndex+0x30>
     45e:	44 0f       	add	r20, r20
     460:	55 1f       	adc	r21, r21
     462:	0a 94       	dec	r0
     464:	e2 f7       	brpl	.-8      	; 0x45e <jstk_readVertIndex+0x2c>
     466:	46 23       	and	r20, r22
     468:	57 23       	and	r21, r23
     46a:	45 2b       	or	r20, r21
     46c:	41 f0       	breq	.+16     	; 0x47e <jstk_readVertIndex+0x4c>
     46e:	2f 5f       	subi	r18, 0xFF	; 255
     470:	3f 4f       	sbci	r19, 0xFF	; 255
     472:	2c 30       	cpi	r18, 0x0C	; 12
     474:	31 05       	cpc	r19, r1
     476:	79 f7       	brne	.-34     	; 0x456 <jstk_readVertIndex+0x24>
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	08 95       	ret
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	08 95       	ret

00000480 <jstk_readHoriIndex>:
     480:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     484:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	92 2b       	or	r25, r18
     48c:	bc 01       	movw	r22, r24
     48e:	7f 70       	andi	r23, 0x0F	; 15
     490:	80 ff       	sbrs	r24, 0
     492:	17 c0       	rjmp	.+46     	; 0x4c2 <jstk_readHoriIndex+0x42>
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	e1 e0       	ldi	r30, 0x01	; 1
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	82 2f       	mov	r24, r18
     49e:	af 01       	movw	r20, r30
     4a0:	02 2e       	mov	r0, r18
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <jstk_readHoriIndex+0x28>
     4a4:	44 0f       	add	r20, r20
     4a6:	55 1f       	adc	r21, r21
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <jstk_readHoriIndex+0x24>
     4ac:	46 23       	and	r20, r22
     4ae:	57 23       	and	r21, r23
     4b0:	45 2b       	or	r20, r21
     4b2:	41 f0       	breq	.+16     	; 0x4c4 <jstk_readHoriIndex+0x44>
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	2c 30       	cpi	r18, 0x0C	; 12
     4ba:	31 05       	cpc	r19, r1
     4bc:	79 f7       	brne	.-34     	; 0x49c <jstk_readHoriIndex+0x1c>
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	08 95       	ret
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	08 95       	ret

000004c6 <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     4c6:	88 23       	and	r24, r24
     4c8:	f4 f1       	brlt	.+124    	; 0x546 <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     4ca:	9b ef       	ldi	r25, 0xFB	; 251
     4cc:	98 0f       	add	r25, r24
     4ce:	92 30       	cpi	r25, 0x02	; 2
     4d0:	e0 f1       	brcs	.+120    	; 0x54a <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     4d2:	85 30       	cpi	r24, 0x05	; 5
     4d4:	34 f4       	brge	.+12     	; 0x4e2 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4d6:	95 e0       	ldi	r25, 0x05	; 5
     4d8:	98 1b       	sub	r25, r24
     4da:	92 30       	cpi	r25, 0x02	; 2
     4dc:	08 f0       	brcs	.+2      	; 0x4e0 <jstk_ledMask+0x1a>
     4de:	42 c0       	rjmp	.+132    	; 0x564 <jstk_ledMask+0x9e>
     4e0:	36 c0       	rjmp	.+108    	; 0x54e <jstk_ledMask+0x88>
     4e2:	9a ef       	ldi	r25, 0xFA	; 250
     4e4:	98 0f       	add	r25, r24
     4e6:	92 30       	cpi	r25, 0x02	; 2
     4e8:	b0 f5       	brcc	.+108    	; 0x556 <jstk_ledMask+0x90>
     4ea:	31 c0       	rjmp	.+98     	; 0x54e <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4ec:	62 e0       	ldi	r22, 0x02	; 2
     4ee:	23 e0       	ldi	r18, 0x03	; 3
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     4f6:	e1 e0       	ldi	r30, 0x01	; 1
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	af 01       	movw	r20, r30
     4fc:	02 2e       	mov	r0, r18
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <jstk_ledMask+0x3e>
     500:	44 0f       	add	r20, r20
     502:	55 1f       	adc	r21, r21
     504:	0a 94       	dec	r0
     506:	e2 f7       	brpl	.-8      	; 0x500 <jstk_ledMask+0x3a>
     508:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     50a:	9f 5f       	subi	r25, 0xFF	; 255
     50c:	21 50       	subi	r18, 0x01	; 1
     50e:	31 09       	sbc	r19, r1
     510:	96 17       	cp	r25, r22
     512:	98 f3       	brcs	.-26     	; 0x4fa <jstk_ledMask+0x34>
     514:	08 95       	ret
     516:	81 50       	subi	r24, 0x01	; 1
     518:	48 2f       	mov	r20, r24
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	4b 5f       	subi	r20, 0xFB	; 251
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     520:	24 e0       	ldi	r18, 0x04	; 4
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     526:	e1 e0       	ldi	r30, 0x01	; 1
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	bf 01       	movw	r22, r30
     52c:	02 2e       	mov	r0, r18
     52e:	02 c0       	rjmp	.+4      	; 0x534 <jstk_ledMask+0x6e>
     530:	66 0f       	add	r22, r22
     532:	77 1f       	adc	r23, r23
     534:	0a 94       	dec	r0
     536:	e2 f7       	brpl	.-8      	; 0x530 <jstk_ledMask+0x6a>
     538:	86 2b       	or	r24, r22
     53a:	2f 5f       	subi	r18, 0xFF	; 255
     53c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     53e:	24 17       	cp	r18, r20
     540:	35 07       	cpc	r19, r21
     542:	99 f7       	brne	.-26     	; 0x52a <jstk_ledMask+0x64>
     544:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     54a:	88 e1       	ldi	r24, 0x18	; 24
     54c:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     54e:	85 30       	cpi	r24, 0x05	; 5
     550:	6c f2       	brlt	.-102    	; 0x4ec <jstk_ledMask+0x26>
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	e0 cf       	rjmp	.-64     	; 0x516 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     556:	85 50       	subi	r24, 0x05	; 5
     558:	85 30       	cpi	r24, 0x05	; 5
     55a:	08 f0       	brcs	.+2      	; 0x55e <jstk_ledMask+0x98>
     55c:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     55e:	81 11       	cpse	r24, r1
     560:	da cf       	rjmp	.-76     	; 0x516 <jstk_ledMask+0x50>
     562:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     564:	66 e0       	ldi	r22, 0x06	; 6
     566:	68 1b       	sub	r22, r24
     568:	65 30       	cpi	r22, 0x05	; 5
     56a:	08 f0       	brcs	.+2      	; 0x56e <jstk_ledMask+0xa8>
     56c:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     56e:	61 11       	cpse	r22, r1
     570:	be cf       	rjmp	.-132    	; 0x4ee <jstk_ledMask+0x28>
     572:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     574:	08 95       	ret

00000576 <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     576:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     578:	5c df       	rcall	.-328    	; 0x432 <jstk_readVertIndex>
     57a:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     57c:	81 df       	rcall	.-254    	; 0x480 <jstk_readHoriIndex>
     57e:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     580:	24 f4       	brge	.+8      	; 0x58a <jstk_readMask+0x14>
     582:	88 23       	and	r24, r24
     584:	c4 f0       	brlt	.+48     	; 0x5b6 <jstk_readMask+0x40>
     586:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     588:	09 c0       	rjmp	.+18     	; 0x59c <jstk_readMask+0x26>
     58a:	c6 30       	cpi	r28, 0x06	; 6
     58c:	1c f0       	brlt	.+6      	; 0x594 <jstk_readMask+0x1e>
     58e:	9b ef       	ldi	r25, 0xFB	; 251
     590:	9c 0f       	add	r25, r28
     592:	02 c0       	rjmp	.+4      	; 0x598 <jstk_readMask+0x22>
     594:	95 e0       	ldi	r25, 0x05	; 5
     596:	9c 1b       	sub	r25, r28
     598:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     59a:	54 f0       	brlt	.+20     	; 0x5b0 <jstk_readMask+0x3a>
     59c:	86 30       	cpi	r24, 0x06	; 6
     59e:	1c f0       	brlt	.+6      	; 0x5a6 <jstk_readMask+0x30>
     5a0:	2b ef       	ldi	r18, 0xFB	; 251
     5a2:	28 0f       	add	r18, r24
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <jstk_readMask+0x34>
     5a6:	25 e0       	ldi	r18, 0x05	; 5
     5a8:	28 1b       	sub	r18, r24
     5aa:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     5ac:	08 f4       	brcc	.+2      	; 0x5b0 <jstk_readMask+0x3a>
     5ae:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     5b0:	8c 2f       	mov	r24, r28
     5b2:	89 df       	rcall	.-238    	; 0x4c6 <jstk_ledMask>
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <jstk_readMask+0x42>
     5b6:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     5b8:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     5ba:	08 95       	ret

000005bc <jstk_usbTask>:
     5bc:	61 df       	rcall	.-318    	; 0x480 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5be:	88 23       	and	r24, r24
     5c0:	3c f0       	brlt	.+14     	; 0x5d0 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5c2:	e8 2f       	mov	r30, r24
     5c4:	88 0f       	add	r24, r24
     5c6:	ff 0b       	sbc	r31, r31
     5c8:	ee 58       	subi	r30, 0x8E	; 142
     5ca:	fe 4d       	sbci	r31, 0xDE	; 222
     5cc:	80 81       	ld	r24, Z
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5d0:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     5d2:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5d6:	2d df       	rcall	.-422    	; 0x432 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5d8:	88 23       	and	r24, r24
     5da:	3c f0       	brlt	.+14     	; 0x5ea <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5dc:	e8 2f       	mov	r30, r24
     5de:	88 0f       	add	r24, r24
     5e0:	ff 0b       	sbc	r31, r31
     5e2:	ee 58       	subi	r30, 0x8E	; 142
     5e4:	fe 4d       	sbci	r31, 0xDE	; 222
     5e6:	80 81       	ld	r24, Z
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5ea:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5ec:	ee e9       	ldi	r30, 0x9E	; 158
     5ee:	f1 e2       	ldi	r31, 0x21	; 33
     5f0:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     5f2:	20 81       	ld	r18, Z
     5f4:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     5f8:	29 13       	cpse	r18, r25
     5fa:	04 c0       	rjmp	.+8      	; 0x604 <jstk_usbTask+0x48>
     5fc:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     600:	98 17       	cp	r25, r24
     602:	71 f0       	breq	.+28     	; 0x620 <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     604:	8e e9       	ldi	r24, 0x9E	; 158
     606:	91 e2       	ldi	r25, 0x21	; 33
     608:	8a d4       	rcall	.+2324   	; 0xf1e <udi_hid_generic_send_report_in>
     60a:	88 23       	and	r24, r24
     60c:	49 f0       	breq	.+18     	; 0x620 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     60e:	e6 e2       	ldi	r30, 0x26	; 38
     610:	f0 e2       	ldi	r31, 0x20	; 32
     612:	ae e9       	ldi	r26, 0x9E	; 158
     614:	b1 e2       	ldi	r27, 0x21	; 33
     616:	8c 91       	ld	r24, X
     618:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     61a:	11 96       	adiw	r26, 0x01	; 1
     61c:	8c 91       	ld	r24, X
     61e:	81 83       	std	Z+1, r24	; 0x01
     620:	08 95       	ret

00000622 <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     622:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <kpd_keyPressed>
     626:	10 92 b8 21 	sts	0x21B8, r1	; 0x8021b8 <kpd_currState>
     62a:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <kpd_prevState>
     62e:	10 92 b5 21 	sts	0x21B5, r1	; 0x8021b5 <kpd_exitTestMode>
     632:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <kpd_rowVal>
     636:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <kpd_code>
     63a:	e2 ec       	ldi	r30, 0xC2	; 194
     63c:	f1 e2       	ldi	r31, 0x21	; 33
     63e:	81 e6       	ldi	r24, 0x61	; 97
     640:	80 83       	st	Z, r24
     642:	80 e6       	ldi	r24, 0x60	; 96
     644:	81 83       	std	Z+1, r24	; 0x01
     646:	12 82       	std	Z+2, r1	; 0x02
     648:	13 82       	std	Z+3, r1	; 0x03
     64a:	8f e5       	ldi	r24, 0x5F	; 95
     64c:	84 83       	std	Z+4, r24	; 0x04
     64e:	8e e5       	ldi	r24, 0x5E	; 94
     650:	85 83       	std	Z+5, r24	; 0x05
     652:	16 82       	std	Z+6, r1	; 0x06
     654:	17 82       	std	Z+7, r1	; 0x07
     656:	8d e5       	ldi	r24, 0x5D	; 93
     658:	80 87       	std	Z+8, r24	; 0x08
     65a:	11 86       	std	Z+9, r1	; 0x09
     65c:	12 86       	std	Z+10, r1	; 0x0a
     65e:	13 86       	std	Z+11, r1	; 0x0b
     660:	14 86       	std	Z+12, r1	; 0x0c
     662:	15 86       	std	Z+13, r1	; 0x0d
     664:	89 e5       	ldi	r24, 0x59	; 89
     666:	86 87       	std	Z+14, r24	; 0x0e
     668:	8b e5       	ldi	r24, 0x5B	; 91
     66a:	87 87       	std	Z+15, r24	; 0x0f
     66c:	10 8a       	std	Z+16, r1	; 0x10
     66e:	11 8a       	std	Z+17, r1	; 0x11
     670:	8a e5       	ldi	r24, 0x5A	; 90
     672:	82 8b       	std	Z+18, r24	; 0x12
     674:	8c e5       	ldi	r24, 0x5C	; 92
     676:	83 8b       	std	Z+19, r24	; 0x13
     678:	ed eb       	ldi	r30, 0xBD	; 189
     67a:	f1 e2       	ldi	r31, 0x21	; 33
     67c:	8e e0       	ldi	r24, 0x0E	; 14
     67e:	80 83       	st	Z, r24
     680:	8d e0       	ldi	r24, 0x0D	; 13
     682:	81 83       	std	Z+1, r24	; 0x01
     684:	8b e0       	ldi	r24, 0x0B	; 11
     686:	82 83       	std	Z+2, r24	; 0x02
     688:	87 e0       	ldi	r24, 0x07	; 7
     68a:	83 83       	std	Z+3, r24	; 0x03
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	84 83       	std	Z+4, r24	; 0x04
     690:	08 95       	ret

00000692 <keypad_poll>:
     692:	4f 92       	push	r4
     694:	5f 92       	push	r5
     696:	6f 92       	push	r6
     698:	7f 92       	push	r7
     69a:	8f 92       	push	r8
     69c:	9f 92       	push	r9
     69e:	af 92       	push	r10
     6a0:	bf 92       	push	r11
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	e4 ea       	ldi	r30, 0xA4	; 164
     6b4:	f1 e2       	ldi	r31, 0x21	; 33
     6b6:	8d ea       	ldi	r24, 0xAD	; 173
     6b8:	91 e2       	ldi	r25, 0x21	; 33
     6ba:	11 92       	st	Z+, r1
     6bc:	8e 17       	cp	r24, r30
     6be:	9f 07       	cpc	r25, r31
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <keypad_poll+0x28>
     6c2:	40 90 a3 21 	lds	r4, 0x21A3	; 0x8021a3 <prevRowMask.5344>
     6c6:	0e e7       	ldi	r16, 0x7E	; 126
     6c8:	11 e2       	ldi	r17, 0x21	; 33
     6ca:	c0 e0       	ldi	r28, 0x00	; 0
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
     6ce:	b1 2c       	mov	r11, r1
     6d0:	0f 2e       	mov	r0, r31
     6d2:	f5 e0       	ldi	r31, 0x05	; 5
     6d4:	6f 2e       	mov	r6, r31
     6d6:	f0 2d       	mov	r31, r0
     6d8:	68 94       	set
     6da:	77 24       	eor	r7, r7
     6dc:	72 f8       	bld	r7, 2
     6de:	0f 2e       	mov	r0, r31
     6e0:	f0 ea       	ldi	r31, 0xA0	; 160
     6e2:	ef 2e       	mov	r14, r31
     6e4:	f6 e0       	ldi	r31, 0x06	; 6
     6e6:	ff 2e       	mov	r15, r31
     6e8:	f0 2d       	mov	r31, r0
     6ea:	0f 2e       	mov	r0, r31
     6ec:	f0 e2       	ldi	r31, 0x20	; 32
     6ee:	cf 2e       	mov	r12, r31
     6f0:	f6 e0       	ldi	r31, 0x06	; 6
     6f2:	df 2e       	mov	r13, r31
     6f4:	f0 2d       	mov	r31, r0
     6f6:	68 94       	set
     6f8:	88 24       	eor	r8, r8
     6fa:	87 f8       	bld	r8, 7
     6fc:	99 24       	eor	r9, r9
     6fe:	93 94       	inc	r9
     700:	ac 2e       	mov	r10, r28
     702:	fe 01       	movw	r30, r28
     704:	e3 54       	subi	r30, 0x43	; 67
     706:	fe 4d       	sbci	r31, 0xDE	; 222
     708:	80 81       	ld	r24, Z
     70a:	d7 01       	movw	r26, r14
     70c:	14 96       	adiw	r26, 0x04	; 4
     70e:	8c 93       	st	X, r24
     710:	b4 e0       	ldi	r27, 0x04	; 4
     712:	cb 13       	cpse	r28, r27
     714:	03 c0       	rjmp	.+6      	; 0x71c <keypad_poll+0x8a>
     716:	f6 01       	movw	r30, r12
     718:	86 82       	std	Z+6, r8	; 0x06
     71a:	03 c0       	rjmp	.+6      	; 0x722 <keypad_poll+0x90>
     71c:	d6 01       	movw	r26, r12
     71e:	15 96       	adiw	r26, 0x05	; 5
     720:	8c 92       	st	X, r8
     722:	f7 01       	movw	r30, r14
     724:	80 85       	ldd	r24, Z+8	; 0x08
     726:	80 7f       	andi	r24, 0xF0	; 240
     728:	80 95       	com	r24
     72a:	f8 2f       	mov	r31, r24
     72c:	f0 7f       	andi	r31, 0xF0	; 240
     72e:	5f 2e       	mov	r5, r31
     730:	84 fd       	sbrc	r24, 4
     732:	b3 94       	inc	r11
     734:	85 fd       	sbrc	r24, 5
     736:	b3 94       	inc	r11
     738:	86 fd       	sbrc	r24, 6
     73a:	b3 94       	inc	r11
     73c:	55 20       	and	r5, r5
     73e:	0c f4       	brge	.+2      	; 0x742 <keypad_poll+0xb0>
     740:	b3 94       	inc	r11
     742:	f8 01       	movw	r30, r16
     744:	84 e0       	ldi	r24, 0x04	; 4
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	25 2d       	mov	r18, r5
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	a9 01       	movw	r20, r18
     74e:	b9 01       	movw	r22, r18
     750:	08 2e       	mov	r0, r24
     752:	02 c0       	rjmp	.+4      	; 0x758 <keypad_poll+0xc6>
     754:	75 95       	asr	r23
     756:	67 95       	ror	r22
     758:	0a 94       	dec	r0
     75a:	e2 f7       	brpl	.-8      	; 0x754 <keypad_poll+0xc2>
     75c:	60 ff       	sbrs	r22, 0
     75e:	0a c0       	rjmp	.+20     	; 0x774 <keypad_poll+0xe2>
     760:	60 81       	ld	r22, Z
     762:	69 30       	cpi	r22, 0x09	; 9
     764:	38 f4       	brcc	.+14     	; 0x774 <keypad_poll+0xe2>
     766:	06 2e       	mov	r0, r22
     768:	00 0c       	add	r0, r0
     76a:	77 0b       	sbc	r23, r23
     76c:	6c 55       	subi	r22, 0x5C	; 92
     76e:	7e 4d       	sbci	r23, 0xDE	; 222
     770:	db 01       	movw	r26, r22
     772:	9c 92       	st	X, r9
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	31 96       	adiw	r30, 0x01	; 1
     778:	88 30       	cpi	r24, 0x08	; 8
     77a:	91 05       	cpc	r25, r1
     77c:	39 f7       	brne	.-50     	; 0x74c <keypad_poll+0xba>
     77e:	ca 01       	movw	r24, r20
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	48 23       	and	r20, r24
     784:	59 23       	and	r21, r25
     786:	45 2b       	or	r20, r21
     788:	49 f0       	breq	.+18     	; 0x79c <keypad_poll+0x10a>
     78a:	b4 2d       	mov	r27, r4
     78c:	b0 95       	com	r27
     78e:	b5 21       	and	r27, r5
     790:	09 f4       	brne	.+2      	; 0x794 <keypad_poll+0x102>
     792:	b5 2d       	mov	r27, r5
     794:	8b 2f       	mov	r24, r27
     796:	81 95       	neg	r24
     798:	b8 23       	and	r27, r24
     79a:	01 c0       	rjmp	.+2      	; 0x79e <keypad_poll+0x10c>
     79c:	b5 2d       	mov	r27, r5
     79e:	b0 32       	cpi	r27, 0x20	; 32
     7a0:	79 f0       	breq	.+30     	; 0x7c0 <keypad_poll+0x12e>
     7a2:	20 f4       	brcc	.+8      	; 0x7ac <keypad_poll+0x11a>
     7a4:	b0 31       	cpi	r27, 0x10	; 16
     7a6:	09 f4       	brne	.+2      	; 0x7aa <keypad_poll+0x118>
     7a8:	48 c0       	rjmp	.+144    	; 0x83a <keypad_poll+0x1a8>
     7aa:	0e c0       	rjmp	.+28     	; 0x7c8 <keypad_poll+0x136>
     7ac:	b0 34       	cpi	r27, 0x40	; 64
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <keypad_poll+0x120>
     7b0:	46 c0       	rjmp	.+140    	; 0x83e <keypad_poll+0x1ac>
     7b2:	b0 38       	cpi	r27, 0x80	; 128
     7b4:	49 f4       	brne	.+18     	; 0x7c8 <keypad_poll+0x136>
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	7f 2e       	mov	r7, r31
     7bc:	f0 2d       	mov	r31, r0
     7be:	42 c0       	rjmp	.+132    	; 0x844 <keypad_poll+0x1b2>
     7c0:	bb 23       	and	r27, r27
     7c2:	11 f0       	breq	.+4      	; 0x7c8 <keypad_poll+0x136>
     7c4:	6a 2c       	mov	r6, r10
     7c6:	79 2c       	mov	r7, r9
     7c8:	21 96       	adiw	r28, 0x01	; 1
     7ca:	0c 5f       	subi	r16, 0xFC	; 252
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
     7ce:	45 2c       	mov	r4, r5
     7d0:	c5 30       	cpi	r28, 0x05	; 5
     7d2:	d1 05       	cpc	r29, r1
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <keypad_poll+0x146>
     7d6:	94 cf       	rjmp	.-216    	; 0x700 <keypad_poll+0x6e>
     7d8:	50 92 a3 21 	sts	0x21A3, r5	; 0x8021a3 <prevRowMask.5344>
     7dc:	80 e8       	ldi	r24, 0x80	; 128
     7de:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     7e2:	b3 e0       	ldi	r27, 0x03	; 3
     7e4:	b7 15       	cp	r27, r7
     7e6:	e0 f0       	brcs	.+56     	; 0x820 <keypad_poll+0x18e>
     7e8:	e6 2d       	mov	r30, r6
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	ee 53       	subi	r30, 0x3E	; 62
     7f6:	fe 4d       	sbci	r31, 0xDE	; 222
     7f8:	e7 0d       	add	r30, r7
     7fa:	f1 1d       	adc	r31, r1
     7fc:	80 81       	ld	r24, Z
     7fe:	90 91 bb 21 	lds	r25, 0x21BB	; 0x8021bb <kpd_keyPressed>
     802:	91 11       	cpse	r25, r1
     804:	06 c0       	rjmp	.+12     	; 0x812 <keypad_poll+0x180>
     806:	80 93 ba 21 	sts	0x21BA, r24	; 0x8021ba <kpd_code>
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	80 93 bb 21 	sts	0x21BB, r24	; 0x8021bb <kpd_keyPressed>
     810:	0d c0       	rjmp	.+26     	; 0x82c <keypad_poll+0x19a>
     812:	90 91 ba 21 	lds	r25, 0x21BA	; 0x8021ba <kpd_code>
     816:	89 17       	cp	r24, r25
     818:	49 f0       	breq	.+18     	; 0x82c <keypad_poll+0x19a>
     81a:	80 93 ba 21 	sts	0x21BA, r24	; 0x8021ba <kpd_code>
     81e:	06 c0       	rjmp	.+12     	; 0x82c <keypad_poll+0x19a>
     820:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <kpd_keyPressed>
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	11 f4       	brne	.+4      	; 0x82c <keypad_poll+0x19a>
     828:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <kpd_keyPressed>
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	8b 15       	cp	r24, r11
     830:	08 f0       	brcs	.+2      	; 0x834 <keypad_poll+0x1a2>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <kpd_multiPress>
     838:	07 c0       	rjmp	.+14     	; 0x848 <keypad_poll+0x1b6>
     83a:	71 2c       	mov	r7, r1
     83c:	03 c0       	rjmp	.+6      	; 0x844 <keypad_poll+0x1b2>
     83e:	68 94       	set
     840:	77 24       	eor	r7, r7
     842:	71 f8       	bld	r7, 1
     844:	6a 2c       	mov	r6, r10
     846:	c0 cf       	rjmp	.-128    	; 0x7c8 <keypad_poll+0x136>
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	bf 90       	pop	r11
     85a:	af 90       	pop	r10
     85c:	9f 90       	pop	r9
     85e:	8f 90       	pop	r8
     860:	7f 90       	pop	r7
     862:	6f 90       	pop	r6
     864:	5f 90       	pop	r5
     866:	4f 90       	pop	r4
     868:	08 95       	ret

0000086a <kbd_getMap>:

uint16_t kbd_getMap(void) {
     86a:	e4 ea       	ldi	r30, 0xA4	; 164
     86c:	f1 e2       	ldi	r31, 0x21	; 33
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t bits = 0;
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	50 e0       	ldi	r21, 0x00	; 0

	for (uint8_t i = 0; i < 9; ++i) {
		if (keyMap[i]) {
			bits |= (1 << i);
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	70 e0       	ldi	r23, 0x00	; 0

uint16_t kbd_getMap(void) {
	uint16_t bits = 0;

	for (uint8_t i = 0; i < 9; ++i) {
		if (keyMap[i]) {
     87a:	91 91       	ld	r25, Z+
     87c:	99 23       	and	r25, r25
     87e:	49 f0       	breq	.+18     	; 0x892 <kbd_getMap+0x28>
			bits |= (1 << i);
     880:	cb 01       	movw	r24, r22
     882:	02 2e       	mov	r0, r18
     884:	02 c0       	rjmp	.+4      	; 0x88a <kbd_getMap+0x20>
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	0a 94       	dec	r0
     88c:	e2 f7       	brpl	.-8      	; 0x886 <kbd_getMap+0x1c>
     88e:	48 2b       	or	r20, r24
     890:	59 2b       	or	r21, r25
     892:	2f 5f       	subi	r18, 0xFF	; 255
     894:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint16_t kbd_getMap(void) {
	uint16_t bits = 0;

	for (uint8_t i = 0; i < 9; ++i) {
     896:	29 30       	cpi	r18, 0x09	; 9
     898:	31 05       	cpc	r19, r1
     89a:	79 f7       	brne	.-34     	; 0x87a <kbd_getMap+0x10>
			bits |= (1 << i);
		}
	}

	return bits;
}
     89c:	ca 01       	movw	r24, r20
     89e:	08 95       	ret

000008a0 <keypad_report>:


// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     8a0:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     8a4:	80 93 b4 21 	sts	0x21B4, r24	; 0x8021b4 <kpd_testMode>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     8a8:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     8ac:	80 93 b8 21 	sts	0x21B8, r24	; 0x8021b8 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     8b0:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_currentCode = keypad_getCode();    // current code to be outputed
     8b4:	80 93 b7 21 	sts	0x21B7, r24	; 0x8021b7 <kpd_currentCode>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     8b8:	80 91 b4 21 	lds	r24, 0x21B4	; 0x8021b4 <kpd_testMode>
     8bc:	84 fd       	sbrc	r24, 4
     8be:	29 c0       	rjmp	.+82     	; 0x912 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     8c0:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <kpd_currState>
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	09 f0       	breq	.+2      	; 0x8ca <keypad_report+0x2a>
     8c8:	4d c0       	rjmp	.+154    	; 0x964 <keypad_report+0xc4>
     8ca:	80 91 b9 21 	lds	r24, 0x21B9	; 0x8021b9 <kpd_prevState>
     8ce:	81 11       	cpse	r24, r1
     8d0:	49 c0       	rjmp	.+146    	; 0x964 <keypad_report+0xc4>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
     8d2:	e0 91 b7 21 	lds	r30, 0x21B7	; 0x8021b7 <kpd_currentCode>
     8d6:	8e 2f       	mov	r24, r30
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	e9 55       	subi	r30, 0x59	; 89
     8de:	f1 09       	sbc	r31, r1
     8e0:	e9 30       	cpi	r30, 0x09	; 9
     8e2:	f1 05       	cpc	r31, r1
     8e4:	90 f4       	brcc	.+36     	; 0x90a <keypad_report+0x6a>
     8e6:	88 27       	eor	r24, r24
     8e8:	e2 50       	subi	r30, 0x02	; 2
     8ea:	ff 4f       	sbci	r31, 0xFF	; 255
     8ec:	8f 4f       	sbci	r24, 0xFF	; 255
     8ee:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     8f2:	84 e0       	ldi	r24, 0x04	; 4
     8f4:	09 c0       	rjmp	.+18     	; 0x908 <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     8f6:	80 e1       	ldi	r24, 0x10	; 16
     8f8:	07 c0       	rjmp	.+14     	; 0x908 <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     8fa:	80 e2       	ldi	r24, 0x20	; 32
     8fc:	05 c0       	rjmp	.+10     	; 0x908 <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     8fe:	80 e4       	ldi	r24, 0x40	; 64
     900:	03 c0       	rjmp	.+6      	; 0x908 <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     902:	80 e8       	ldi	r24, 0x80	; 128
     904:	01 c0       	rjmp	.+2      	; 0x908 <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     906:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     908:	73 d0       	rcall	.+230    	; 0x9f0 <led_toggle>

			// activityEnable();
			kpd_exitTestMode = 1;	// flag for exiting test mode
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <kpd_exitTestMode>
     910:	29 c0       	rjmp	.+82     	; 0x964 <keypad_report+0xc4>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     912:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <kpd_keyPressed>

		static bool    kpd_firstKey  = false;
		static uint8_t kpd_firstCode = 0;
		static bool    kpd_block     = false;

		if (!kpd_firstKey) {
     916:	90 91 a2 21 	lds	r25, 0x21A2	; 0x8021a2 <kpd_firstKey.5400>
     91a:	91 11       	cpse	r25, r1
     91c:	0b c0       	rjmp	.+22     	; 0x934 <keypad_report+0x94>
			if (kpd_anyPressed) {
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	09 f5       	brne	.+66     	; 0x964 <keypad_report+0xc4>
				kpd_firstKey = true;
     922:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <kpd_firstKey.5400>
				kpd_firstCode = kpd_currentCode;
     926:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <kpd_currentCode>
     92a:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <kpd_firstCode.5401>
				kpd_block = false;
     92e:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <kpd_block.5402>
     932:	18 c0       	rjmp	.+48     	; 0x964 <keypad_report+0xc4>
			}
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	51 f5       	brne	.+84     	; 0x98c <keypad_report+0xec>
     938:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <kpd_block.5402>
     93c:	81 11       	cpse	r24, r1
     93e:	12 c0       	rjmp	.+36     	; 0x964 <keypad_report+0xc4>
     940:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <kpd_multiPress>
     944:	88 23       	and	r24, r24
     946:	71 f0       	breq	.+28     	; 0x964 <keypad_report+0xc4>
				kpd_block = true;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <kpd_block.5402>
     94e:	0a c0       	rjmp	.+20     	; 0x964 <keypad_report+0xc4>
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
					udi_hid_kbd_down(kpd_firstCode);
     950:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_firstCode.5401>
     954:	a1 d3       	rcall	.+1858   	; 0x1098 <udi_hid_kbd_down>
					udi_hid_kbd_up(kpd_firstCode);
     956:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_firstCode.5401>
     95a:	62 d3       	rcall	.+1732   	; 0x1020 <udi_hid_kbd_up>
				}
				kpd_firstKey = false;
     95c:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <kpd_firstKey.5400>
				kpd_block = false;
     960:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <kpd_block.5402>
			}
		}
	}

	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     964:	80 91 b4 21 	lds	r24, 0x21B4	; 0x8021b4 <kpd_testMode>
     968:	84 ff       	sbrs	r24, 4
     96a:	07 c0       	rjmp	.+14     	; 0x97a <keypad_report+0xda>
     96c:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <kpd_exitTestMode>
     970:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     972:	19 f4       	brne	.+6      	; 0x97a <keypad_report+0xda>
     974:	30 d0       	rcall	.+96     	; 0x9d6 <led_allOff>
		kpd_exitTestMode = 0;
     976:	10 92 b5 21 	sts	0x21B5, r1	; 0x8021b5 <kpd_exitTestMode>
	}
	kpd_prevState = kpd_currState;
     97a:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <kpd_currState>
     97e:	80 93 b9 21 	sts	0x21B9, r24	; 0x8021b9 <kpd_prevState>
     982:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	c0 cf       	rjmp	.-128    	; 0x908 <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     988:	88 e0       	ldi	r24, 0x08	; 8
     98a:	be cf       	rjmp	.-132    	; 0x908 <keypad_report+0x68>
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
				kpd_block = true;
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
     98c:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <kpd_block.5402>
     990:	81 11       	cpse	r24, r1
     992:	e4 cf       	rjmp	.-56     	; 0x95c <keypad_report+0xbc>
     994:	dd cf       	rjmp	.-70     	; 0x950 <keypad_report+0xb0>

00000996 <led_updateState>:

void led_off(uint8_t mask) {	// LED off
    LED_PORT.OUTSET = mask;		// drive high (off)

    led_updateState(mask, false);
    activityEnable();
     996:	e6 ed       	ldi	r30, 0xD6	; 214
     998:	f1 e2       	ldi	r31, 0x21	; 33
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	ac 01       	movw	r20, r24
     9a2:	02 2e       	mov	r0, r18
     9a4:	02 c0       	rjmp	.+4      	; 0x9aa <led_updateState+0x14>
     9a6:	55 95       	asr	r21
     9a8:	47 95       	ror	r20
     9aa:	0a 94       	dec	r0
     9ac:	e2 f7       	brpl	.-8      	; 0x9a6 <led_updateState+0x10>
     9ae:	40 fd       	sbrc	r20, 0
     9b0:	60 83       	st	Z, r22
     9b2:	2f 5f       	subi	r18, 0xFF	; 255
     9b4:	3f 4f       	sbci	r19, 0xFF	; 255
     9b6:	31 96       	adiw	r30, 0x01	; 1
     9b8:	28 30       	cpi	r18, 0x08	; 8
     9ba:	31 05       	cpc	r19, r1
     9bc:	89 f7       	brne	.-30     	; 0x9a0 <led_updateState+0xa>
     9be:	08 95       	ret

000009c0 <led_init>:
     9c0:	e0 e0       	ldi	r30, 0x00	; 0
     9c2:	f6 e0       	ldi	r31, 0x06	; 6
     9c4:	8f ef       	ldi	r24, 0xFF	; 255
     9c6:	81 83       	std	Z+1, r24	; 0x01
     9c8:	85 83       	std	Z+5, r24	; 0x05
     9ca:	e0 e2       	ldi	r30, 0x20	; 32
     9cc:	f6 e0       	ldi	r31, 0x06	; 6
     9ce:	80 e4       	ldi	r24, 0x40	; 64
     9d0:	81 83       	std	Z+1, r24	; 0x01
     9d2:	85 83       	std	Z+5, r24	; 0x05
     9d4:	08 95       	ret

000009d6 <led_allOff>:
     9d6:	8f ef       	ldi	r24, 0xFF	; 255
     9d8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	db df       	rcall	.-74     	; 0x996 <led_updateState>
     9e0:	83 c1       	rjmp	.+774    	; 0xce8 <activityEnable>
     9e2:	08 95       	ret

000009e4 <led_on>:
     9e4:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	d5 df       	rcall	.-86     	; 0x996 <led_updateState>
     9ec:	7d c1       	rjmp	.+762    	; 0xce8 <activityEnable>
     9ee:	08 95       	ret

000009f0 <led_toggle>:
}

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;
     9f0:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     9f4:	e6 ed       	ldi	r30, 0xD6	; 214
     9f6:	f1 e2       	ldi	r31, 0x21	; 33

    for (int i = 0; i < 8; i++) {
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
        if (mask & (1 << i)) {
     9fc:	68 2f       	mov	r22, r24
     9fe:	70 e0       	ldi	r23, 0x00	; 0
            ledMap[i] = !ledMap[i];
     a00:	81 e0       	ldi	r24, 0x01	; 1

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;

    for (int i = 0; i < 8; i++) {
        if (mask & (1 << i)) {
     a02:	ab 01       	movw	r20, r22
     a04:	02 2e       	mov	r0, r18
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <led_toggle+0x1c>
     a08:	55 95       	asr	r21
     a0a:	47 95       	ror	r20
     a0c:	0a 94       	dec	r0
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <led_toggle+0x18>
     a10:	40 ff       	sbrs	r20, 0
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <led_toggle+0x2a>
            ledMap[i] = !ledMap[i];
     a14:	90 81       	ld	r25, Z
     a16:	98 27       	eor	r25, r24
     a18:	90 83       	st	Z, r25
}

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;

    for (int i = 0; i < 8; i++) {
     a1a:	2f 5f       	subi	r18, 0xFF	; 255
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	31 96       	adiw	r30, 0x01	; 1
     a20:	28 30       	cpi	r18, 0x08	; 8
     a22:	31 05       	cpc	r19, r1
     a24:	71 f7       	brne	.-36     	; 0xa02 <led_toggle+0x12>
        if (mask & (1 << i)) {
            ledMap[i] = !ledMap[i];
        }
    }
    activityEnable();
     a26:	60 c1       	rjmp	.+704    	; 0xce8 <activityEnable>
     a28:	08 95       	ret

00000a2a <led_setState>:
}

void led_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
     a2a:	e0 e0       	ldi	r30, 0x00	; 0
     a2c:	f6 e0       	ldi	r31, 0x06	; 6
     a2e:	9f ef       	ldi	r25, 0xFF	; 255
     a30:	95 83       	std	Z+5, r25	; 0x05
    LED_PORT.OUTCLR = mask;
     a32:	86 83       	std	Z+6, r24	; 0x06
     a34:	e6 ed       	ldi	r30, 0xD6	; 214
     a36:	f1 e2       	ldi	r31, 0x21	; 33

    for (int i = 0; i < 8; i++) {
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
        ledMap[i] = (mask & (1 << i)) != 0;
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	ac 01       	movw	r20, r24
     a40:	02 2e       	mov	r0, r18
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <led_setState+0x1e>
     a44:	55 95       	asr	r21
     a46:	47 95       	ror	r20
     a48:	0a 94       	dec	r0
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <led_setState+0x1a>
     a4c:	41 70       	andi	r20, 0x01	; 1
     a4e:	41 93       	st	Z+, r20

void led_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
    LED_PORT.OUTCLR = mask;

    for (int i = 0; i < 8; i++) {
     a50:	2f 5f       	subi	r18, 0xFF	; 255
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	28 30       	cpi	r18, 0x08	; 8
     a56:	31 05       	cpc	r19, r1
     a58:	91 f7       	brne	.-28     	; 0xa3e <led_setState+0x14>
        ledMap[i] = (mask & (1 << i)) != 0;
    }
    activityEnable();
     a5a:	46 c1       	rjmp	.+652    	; 0xce8 <activityEnable>
     a5c:	08 95       	ret

00000a5e <led_getMap>:
            ledMap[i] = state;
        }
    }
}

uint16_t led_getMap(void) {
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	a6 ed       	ldi	r26, 0xD6	; 214
     a64:	b1 e2       	ldi	r27, 0x21	; 33
     a66:	66 ee       	ldi	r22, 0xE6	; 230
     a68:	71 e2       	ldi	r23, 0x21	; 33
     a6a:	fd 01       	movw	r30, r26
    uint16_t map = 0;
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	50 e0       	ldi	r21, 0x00	; 0
    for (uint8_t i = 0; i < 16; i++) {
        if (ledMap[i]) {
            map |= (1 << i);
     a70:	c1 e0       	ldi	r28, 0x01	; 1
     a72:	d0 e0       	ldi	r29, 0x00	; 0
     a74:	9f 01       	movw	r18, r30
     a76:	2a 1b       	sub	r18, r26
     a78:	3b 0b       	sbc	r19, r27
}

uint16_t led_getMap(void) {
    uint16_t map = 0;
    for (uint8_t i = 0; i < 16; i++) {
        if (ledMap[i]) {
     a7a:	91 91       	ld	r25, Z+
     a7c:	99 23       	and	r25, r25
     a7e:	41 f0       	breq	.+16     	; 0xa90 <led_getMap+0x32>
            map |= (1 << i);
     a80:	ce 01       	movw	r24, r28
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <led_getMap+0x2a>
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	2a 95       	dec	r18
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <led_getMap+0x26>
     a8c:	48 2b       	or	r20, r24
     a8e:	59 2b       	or	r21, r25
    }
}

uint16_t led_getMap(void) {
    uint16_t map = 0;
    for (uint8_t i = 0; i < 16; i++) {
     a90:	e6 17       	cp	r30, r22
     a92:	f7 07       	cpc	r31, r23
     a94:	79 f7       	brne	.-34     	; 0xa74 <led_getMap+0x16>
        if (ledMap[i]) {
            map |= (1 << i);
        }
    }
    return map;
}
     a96:	ca 01       	movw	r24, r20
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <led_statusOn>:

/* ---------------------------------------------------------------------- */
/* ----------------------------- Status LED ----------------------------- */
/* ---------------------------------------------------------------------- */
void led_statusOn(void) { // status LED on
    STATUS_LED_PORT.OUTCLR = LEDS_PIN;
     a9e:	80 e4       	ldi	r24, 0x40	; 64
     aa0:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>

    ledMap[8] = true;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	80 93 de 21 	sts	0x21DE, r24	; 0x8021de <ledMap+0x8>
     aaa:	08 95       	ret

00000aac <led_statusOff>:
}

void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
     aac:	80 e4       	ldi	r24, 0x40	; 64
     aae:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>

    ledMap[8] = false;
     ab2:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <ledMap+0x8>
     ab6:	08 95       	ret

00000ab8 <led_statusToggle>:
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     ab8:	80 e4       	ldi	r24, 0x40	; 64
     aba:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>

    ledMap[8] = !ledMap[8];
     abe:	e6 ed       	ldi	r30, 0xD6	; 214
     ac0:	f1 e2       	ldi	r31, 0x21	; 33
     ac2:	90 85       	ldd	r25, Z+8	; 0x08
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	89 27       	eor	r24, r25
     ac8:	80 87       	std	Z+8, r24	; 0x08
     aca:	08 95       	ret

00000acc <startupSequence>:
}

/* ---------------------------------------------------------------------- */
/* --------------------------- startup & idle --------------------------- */
/* ---------------------------------------------------------------------- */
bool startupSequence(void) {
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29

/* ---------------------------------------------------------------------- */
/* ------------------------- Silent LED Control ------------------------- */
/* ---------------------------------------------------------------------- */
static void led_quiet_allOn(void) {          // turns all LED's on
    LED_PORT.OUTCLR = LED_MASK;
     ad2:	c0 e0       	ldi	r28, 0x00	; 0
     ad4:	d6 e0       	ldi	r29, 0x06	; 6
     ad6:	1f ef       	ldi	r17, 0xFF	; 255
     ad8:	1e 83       	std	Y+6, r17	; 0x06

    led_updateState(LED_MASK, true);
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	5b df       	rcall	.-330    	; 0x996 <led_updateState>
/* ---------------------------------------------------------------------- */
/* --------------------------- startup & idle --------------------------- */
/* ---------------------------------------------------------------------- */
bool startupSequence(void) {
    led_quiet_allOn();
    led_statusOn();
     ae0:	de df       	rcall	.-68     	; 0xa9e <led_statusOn>
     ae2:	2f eb       	ldi	r18, 0xBF	; 191
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae4:	86 ec       	ldi	r24, 0xC6	; 198
     ae6:	9d e2       	ldi	r25, 0x2D	; 45
     ae8:	21 50       	subi	r18, 0x01	; 1
     aea:	80 40       	sbci	r24, 0x00	; 0
     aec:	90 40       	sbci	r25, 0x00	; 0
     aee:	e1 f7       	brne	.-8      	; 0xae8 <startupSequence+0x1c>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <startupSequence+0x26>
     af2:	00 00       	nop
     af4:	1d 83       	std	Y+5, r17	; 0x05

    led_updateState(LED_MASK, true);
}

static void led_quiet_allOff(void) {         // turns all LED's off
    LED_PORT.OUTSET = LED_MASK;
     af6:	60 e0       	ldi	r22, 0x00	; 0

    led_updateState(LED_MASK, false);
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	4d df       	rcall	.-358    	; 0x996 <led_updateState>
bool startupSequence(void) {
    led_quiet_allOn();
    led_statusOn();
    _delay_ms(15000);
    led_quiet_allOff();
    led_statusOff();
     afc:	d7 df       	rcall	.-82     	; 0xaac <led_statusOff>
     afe:	2f e1       	ldi	r18, 0x1F	; 31
     b00:	81 ea       	ldi	r24, 0xA1	; 161
     b02:	97 e0       	ldi	r25, 0x07	; 7
     b04:	21 50       	subi	r18, 0x01	; 1
     b06:	80 40       	sbci	r24, 0x00	; 0
     b08:	90 40       	sbci	r25, 0x00	; 0
     b0a:	e1 f7       	brne	.-8      	; 0xb04 <startupSequence+0x38>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <startupSequence+0x42>
     b0e:	00 00       	nop
     b10:	80 e0       	ldi	r24, 0x00	; 0
    _delay_ms(2500);

    return 0;
}
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	08 95       	ret

00000b1a <idle_start>:
     b1a:	e6 ee       	ldi	r30, 0xE6	; 230

void idle_start(void) {
    idle.running   = true;
     b1c:	f1 e2       	ldi	r31, 0x21	; 33
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	80 83       	st	Z, r24
    idle.stage     = 0;
     b22:	11 82       	std	Z+1, r1	; 0x01
    idle.pass      = 0;
     b24:	12 82       	std	Z+2, r1	; 0x02
    idle.step      = 0;
     b26:	13 82       	std	Z+3, r1	; 0x03
    idle.timer     = 0;
     b28:	14 82       	std	Z+4, r1	; 0x04
     b2a:	15 82       	std	Z+5, r1	; 0x05
    idle.period    = 250;
     b2c:	8a ef       	ldi	r24, 0xFA	; 250
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	86 83       	std	Z+6, r24	; 0x06
     b32:	97 83       	std	Z+7, r25	; 0x07
     b34:	08 95       	ret

00000b36 <idle_stop>:
    // led_quiet_setState(1 << idle.step);
}

void idle_stop(void) {
    idle.running = false;
     b36:	10 92 e6 21 	sts	0x21E6, r1	; 0x8021e6 <idle>

    led_updateState(LED_MASK, true);
}

static void led_quiet_allOff(void) {         // turns all LED's off
    LED_PORT.OUTSET = LED_MASK;
     b3a:	8f ef       	ldi	r24, 0xFF	; 255
     b3c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>

    led_updateState(LED_MASK, false);
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	29 cf       	rjmp	.-430    	; 0x996 <led_updateState>
     b44:	08 95       	ret

00000b46 <idle_poll>:
    idle.running = false;
    led_quiet_allOff();
}

void idle_poll(void) {
    if (!idle.running)
     b46:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <idle>
     b4a:	88 23       	and	r24, r24
     b4c:	09 f4       	brne	.+2      	; 0xb50 <idle_poll+0xa>
     b4e:	5c c0       	rjmp	.+184    	; 0xc08 <idle_poll+0xc2>
        return;
    if (activityCheck()) {
     b50:	cf d0       	rcall	.+414    	; 0xcf0 <activityCheck>
     b52:	88 23       	and	r24, r24
     b54:	11 f0       	breq	.+4      	; 0xb5a <idle_poll+0x14>
        idle_stop();
     b56:	ef cf       	rjmp	.-34     	; 0xb36 <idle_stop>
     b58:	08 95       	ret
        return;
     b5a:	e6 ee       	ldi	r30, 0xE6	; 230
    }

    if (++idle.timer < idle.period)
     b5c:	f1 e2       	ldi	r31, 0x21	; 33
     b5e:	84 81       	ldd	r24, Z+4	; 0x04
     b60:	95 81       	ldd	r25, Z+5	; 0x05
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	84 83       	std	Z+4, r24	; 0x04
     b66:	95 83       	std	Z+5, r25	; 0x05
     b68:	26 81       	ldd	r18, Z+6	; 0x06
     b6a:	37 81       	ldd	r19, Z+7	; 0x07
     b6c:	82 17       	cp	r24, r18
     b6e:	93 07       	cpc	r25, r19
     b70:	08 f4       	brcc	.+2      	; 0xb74 <idle_poll+0x2e>
     b72:	4a c0       	rjmp	.+148    	; 0xc08 <idle_poll+0xc2>
     b74:	14 82       	std	Z+4, r1	; 0x04
        return;
    idle.timer = 0;
     b76:	15 82       	std	Z+5, r1	; 0x05
     b78:	83 81       	ldd	r24, Z+3	; 0x03

    if (idle.step >= 8) {
     b7a:	88 30       	cpi	r24, 0x08	; 8
     b7c:	08 f1       	brcs	.+66     	; 0xbc0 <idle_poll+0x7a>
     b7e:	13 82       	std	Z+3, r1	; 0x03
        idle.step = 0;
     b80:	81 81       	ldd	r24, Z+1	; 0x01

        if (idle.stage == 0) {
     b82:	81 11       	cpse	r24, r1
     b84:	1d c0       	rjmp	.+58     	; 0xbc0 <idle_poll+0x7a>
     b86:	82 81       	ldd	r24, Z+2	; 0x02
            idle.pass++;
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	82 83       	std	Z+2, r24	; 0x02
     b8c:	25 36       	cpi	r18, 0x65	; 101

            if (idle.period > 100) {
     b8e:	31 05       	cpc	r19, r1
     b90:	38 f0       	brcs	.+14     	; 0xba0 <idle_poll+0x5a>
     b92:	2b 54       	subi	r18, 0x4B	; 75
                idle.period -= 75;
     b94:	31 09       	sbc	r19, r1
     b96:	20 93 ec 21 	sts	0x21EC, r18	; 0x8021ec <idle+0x6>
     b9a:	30 93 ed 21 	sts	0x21ED, r19	; 0x8021ed <idle+0x7>
     b9e:	06 c0       	rjmp	.+12     	; 0xbac <idle_poll+0x66>
     ba0:	22 e3       	ldi	r18, 0x32	; 50
            } else {
                idle.period = 50;
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	20 93 ec 21 	sts	0x21EC, r18	; 0x8021ec <idle+0x6>
     ba8:	30 93 ed 21 	sts	0x21ED, r19	; 0x8021ed <idle+0x7>
     bac:	84 30       	cpi	r24, 0x04	; 4
            }
            if (idle.pass >= 4) {
     bae:	40 f0       	brcs	.+16     	; 0xbc0 <idle_poll+0x7a>
     bb0:	e6 ee       	ldi	r30, 0xE6	; 230
                idle.stage = 1;
     bb2:	f1 e2       	ldi	r31, 0x21	; 33
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	81 83       	std	Z+1, r24	; 0x01
     bb8:	82 e3       	ldi	r24, 0x32	; 50
                idle.period = 50;
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	86 83       	std	Z+6, r24	; 0x06
     bbe:	97 83       	std	Z+7, r25	; 0x07
     bc0:	60 91 e9 21 	lds	r22, 0x21E9	; 0x8021e9 <idle+0x3>
            }
        }
    }

    led_quiet_setState(1 << idle.step);
     bc4:	41 e0       	ldi	r20, 0x01	; 1
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	06 2e       	mov	r0, r22
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <idle_poll+0x8a>
     bcc:	44 0f       	add	r20, r20
     bce:	55 1f       	adc	r21, r21
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <idle_poll+0x86>
     bd4:	e0 e0       	ldi	r30, 0x00	; 0
//         }
//     }
// }

static void led_quiet_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
     bd6:	f6 e0       	ldi	r31, 0x06	; 6
     bd8:	8f ef       	ldi	r24, 0xFF	; 255
     bda:	85 83       	std	Z+5, r24	; 0x05
     bdc:	46 83       	std	Z+6, r20	; 0x06
    LED_PORT.OUTCLR = mask;
     bde:	e6 ed       	ldi	r30, 0xD6	; 214
     be0:	f1 e2       	ldi	r31, 0x21	; 33
     be2:	80 e0       	ldi	r24, 0x00	; 0

    for (int i = 0; i < 8; i++) {
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	55 27       	eor	r21, r21
        ledMap[i] = (mask & (1 << i)) != 0;
     be8:	9a 01       	movw	r18, r20
     bea:	08 2e       	mov	r0, r24
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <idle_poll+0xac>
     bee:	35 95       	asr	r19
     bf0:	27 95       	ror	r18
     bf2:	0a 94       	dec	r0
     bf4:	e2 f7       	brpl	.-8      	; 0xbee <idle_poll+0xa8>
     bf6:	21 70       	andi	r18, 0x01	; 1
     bf8:	21 93       	st	Z+, r18
     bfa:	01 96       	adiw	r24, 0x01	; 1

static void led_quiet_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
    LED_PORT.OUTCLR = mask;

    for (int i = 0; i < 8; i++) {
     bfc:	88 30       	cpi	r24, 0x08	; 8
     bfe:	91 05       	cpc	r25, r1
     c00:	99 f7       	brne	.-26     	; 0xbe8 <idle_poll+0xa2>
     c02:	6f 5f       	subi	r22, 0xFF	; 255
            }
        }
    }

    led_quiet_setState(1 << idle.step);
    idle.step++;
     c04:	60 93 e9 21 	sts	0x21E9, r22	; 0x8021e9 <idle+0x3>
     c08:	08 95       	ret

00000c0a <io_ui_process>:
     c0a:	cb cb       	rjmp	.-2154   	; 0x3a2 <io_init>
void activityEnable(void) {
	userActive = 1;
}

void activityReset(void) {
	userActive = 0;
     c0c:	08 95       	ret

00000c0e <jstk_ui_process>:
     c0e:	cf 93       	push	r28
     c10:	b2 dc       	rcall	.-1692   	; 0x576 <jstk_readMask>
     c12:	c8 2f       	mov	r28, r24
     c14:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     c18:	84 fd       	sbrc	r24, 4
     c1a:	06 c0       	rjmp	.+12     	; 0xc28 <jstk_ui_process+0x1a>
     c1c:	cc 23       	and	r28, r28
     c1e:	29 f0       	breq	.+10     	; 0xc2a <jstk_ui_process+0x1c>
     c20:	da de       	rcall	.-588    	; 0x9d6 <led_allOff>
     c22:	8c 2f       	mov	r24, r28
     c24:	df de       	rcall	.-578    	; 0x9e4 <led_on>
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <jstk_ui_process+0x1c>
     c28:	c9 dc       	rcall	.-1646   	; 0x5bc <jstk_usbTask>
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <kbd_ui_process>:
     c2e:	31 dd       	rcall	.-1438   	; 0x692 <keypad_poll>
     c30:	37 ce       	rjmp	.-914    	; 0x8a0 <keypad_report>
     c32:	08 95       	ret

00000c34 <led_ui_report>:
     c34:	fc 01       	movw	r30, r24
     c36:	80 81       	ld	r24, Z
     c38:	80 38       	cpi	r24, 0x80	; 128
     c3a:	21 f4       	brne	.+8      	; 0xc44 <led_ui_report+0x10>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <userActive>
     c42:	08 95       	ret
     c44:	81 38       	cpi	r24, 0x81	; 129
     c46:	21 f4       	brne	.+8      	; 0xc50 <led_ui_report+0x1c>
     c48:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <userActive>
     c4c:	66 cf       	rjmp	.-308    	; 0xb1a <idle_start>
     c4e:	08 95       	ret
     c50:	ec ce       	rjmp	.-552    	; 0xa2a <led_setState>
     c52:	08 95       	ret

00000c54 <startup_ui_process>:
     c54:	3b df       	rcall	.-394    	; 0xacc <startupSequence>
     c56:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <startupCheck>
     c5a:	08 95       	ret

00000c5c <idle_ui_process>:
     c5c:	74 cf       	rjmp	.-280    	; 0xb46 <idle_poll>
     c5e:	08 95       	ret

00000c60 <gui_ui_process>:
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	00 d0       	rcall	.+0      	; 0xc6a <gui_ui_process+0xa>
     c6a:	1f 92       	push	r1
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	f6 de       	rcall	.-532    	; 0xa5e <led_getMap>
     c72:	08 2f       	mov	r16, r24
     c74:	19 2f       	mov	r17, r25
     c76:	f9 dd       	rcall	.-1038   	; 0x86a <kbd_getMap>
     c78:	09 83       	std	Y+1, r16	; 0x01
     c7a:	1a 83       	std	Y+2, r17	; 0x02
     c7c:	8b 83       	std	Y+3, r24	; 0x03
     c7e:	9c 83       	std	Y+4, r25	; 0x04
     c80:	ce 01       	movw	r24, r28
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	4f db       	rcall	.-2402   	; 0x324 <udi_hid_led_send_report_in>
     c86:	24 96       	adiw	r28, 0x04	; 4
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <status_ui_process>:
     c96:	80 91 ef 21 	lds	r24, 0x21EF	; 0x8021ef <sof_ms>
     c9a:	90 91 f0 21 	lds	r25, 0x21F0	; 0x8021f0 <sof_ms+0x1>
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	80 93 ef 21 	sts	0x21EF, r24	; 0x8021ef <sof_ms>
     ca4:	90 93 f0 21 	sts	0x21F0, r25	; 0x8021f0 <sof_ms+0x1>
     ca8:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     cac:	84 fd       	sbrc	r24, 4
     cae:	0d c0       	rjmp	.+26     	; 0xcca <status_ui_process+0x34>
     cb0:	80 91 ef 21 	lds	r24, 0x21EF	; 0x8021ef <sof_ms>
     cb4:	90 91 f0 21 	lds	r25, 0x21F0	; 0x8021f0 <sof_ms+0x1>
     cb8:	84 3f       	cpi	r24, 0xF4	; 244
     cba:	91 40       	sbci	r25, 0x01	; 1
     cbc:	a0 f0       	brcs	.+40     	; 0xce6 <status_ui_process+0x50>
     cbe:	fc de       	rcall	.-520    	; 0xab8 <led_statusToggle>
     cc0:	10 92 ef 21 	sts	0x21EF, r1	; 0x8021ef <sof_ms>
     cc4:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <sof_ms+0x1>
     cc8:	08 95       	ret
     cca:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <startupCheck>
     cce:	81 11       	cpse	r24, r1
     cd0:	06 c0       	rjmp	.+12     	; 0xcde <status_ui_process+0x48>
     cd2:	ec de       	rcall	.-552    	; 0xaac <led_statusOff>
     cd4:	10 92 ef 21 	sts	0x21EF, r1	; 0x8021ef <sof_ms>
     cd8:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <sof_ms+0x1>
     cdc:	08 95       	ret
     cde:	10 92 ef 21 	sts	0x21EF, r1	; 0x8021ef <sof_ms>
     ce2:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <sof_ms+0x1>
     ce6:	08 95       	ret

00000ce8 <activityEnable>:
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <userActive>
     cee:	08 95       	ret

00000cf0 <activityCheck>:
}

bool activityCheck(void) {
	return userActive;
     cf0:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <userActive>
     cf4:	08 95       	ret

00000cf6 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	27 97       	sbiw	r28, 0x07	; 7
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     d0e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     d12:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     d16:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     d1a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     d1e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     d22:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     d26:	65 e0       	ldi	r22, 0x05	; 5
     d28:	81 e4       	ldi	r24, 0x41	; 65
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	7a d6       	rcall	.+3316   	; 0x1a22 <ccp_write_io>
     d2e:	6c e1       	ldi	r22, 0x1C	; 28
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	6c d6       	rcall	.+3288   	; 0x1a0e <nvm_read_byte>
     d36:	8a 83       	std	Y+2, r24	; 0x02
     d38:	6d e1       	ldi	r22, 0x1D	; 29
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	67 d6       	rcall	.+3278   	; 0x1a0e <nvm_read_byte>
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	21 f4       	brne	.+8      	; 0xd52 <sysclk_init+0x5c>
     d4a:	80 e4       	ldi	r24, 0x40	; 64
     d4c:	93 e2       	ldi	r25, 0x23	; 35
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	9a 83       	std	Y+2, r25	; 0x02
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	8b 83       	std	Y+3, r24	; 0x03
     d58:	9c 83       	std	Y+4, r25	; 0x04
     d5a:	e0 e6       	ldi	r30, 0x60	; 96
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	82 83       	std	Z+2, r24	; 0x02
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	83 83       	std	Z+3, r24	; 0x03
     d64:	8f b7       	in	r24, 0x3f	; 63
     d66:	8e 83       	std	Y+6, r24	; 0x06
     d68:	f8 94       	cli
     d6a:	9e 81       	ldd	r25, Y+6	; 0x06
     d6c:	e0 e5       	ldi	r30, 0x50	; 80
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	82 60       	ori	r24, 0x02	; 2
     d74:	80 83       	st	Z, r24
     d76:	9f bf       	out	0x3f, r25	; 63
     d78:	81 81       	ldd	r24, Z+1	; 0x01
     d7a:	81 ff       	sbrs	r24, 1
     d7c:	fd cf       	rjmp	.-6      	; 0xd78 <sysclk_init+0x82>
     d7e:	8f b7       	in	r24, 0x3f	; 63
     d80:	8f 83       	std	Y+7, r24	; 0x07
     d82:	f8 94       	cli
     d84:	9f 81       	ldd	r25, Y+7	; 0x07
     d86:	00 e5       	ldi	r16, 0x50	; 80
     d88:	10 e0       	ldi	r17, 0x00	; 0
     d8a:	d8 01       	movw	r26, r16
     d8c:	16 96       	adiw	r26, 0x06	; 6
     d8e:	8c 91       	ld	r24, X
     d90:	16 97       	sbiw	r26, 0x06	; 6
     d92:	89 7f       	andi	r24, 0xF9	; 249
     d94:	16 96       	adiw	r26, 0x06	; 6
     d96:	8c 93       	st	X, r24
     d98:	16 97       	sbiw	r26, 0x06	; 6
     d9a:	e0 e6       	ldi	r30, 0x60	; 96
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 e8       	ldi	r24, 0x80	; 128
     da0:	85 83       	std	Z+5, r24	; 0x05
     da2:	8b eb       	ldi	r24, 0xBB	; 187
     da4:	86 83       	std	Z+6, r24	; 0x06
     da6:	16 96       	adiw	r26, 0x06	; 6
     da8:	8c 91       	ld	r24, X
     daa:	16 97       	sbiw	r26, 0x06	; 6
     dac:	84 60       	ori	r24, 0x04	; 4
     dae:	16 96       	adiw	r26, 0x06	; 6
     db0:	8c 93       	st	X, r24
     db2:	80 81       	ld	r24, Z
     db4:	81 60       	ori	r24, 0x01	; 1
     db6:	80 83       	st	Z, r24
     db8:	9f bf       	out	0x3f, r25	; 63
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	80 e4       	ldi	r24, 0x40	; 64
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	30 d6       	rcall	.+3168   	; 0x1a22 <ccp_write_io>
     dc2:	8f b7       	in	r24, 0x3f	; 63
     dc4:	8d 83       	std	Y+5, r24	; 0x05
     dc6:	f8 94       	cli
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	f8 01       	movw	r30, r16
     dcc:	80 81       	ld	r24, Z
     dce:	8e 7f       	andi	r24, 0xFE	; 254
     dd0:	80 83       	st	Z, r24
     dd2:	9f bf       	out	0x3f, r25	; 63
     dd4:	27 96       	adiw	r28, 0x07	; 7
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	08 95       	ret

00000de4 <sysclk_enable_module>:
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	1f 92       	push	r1
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9f b7       	in	r25, 0x3f	; 63
     df0:	99 83       	std	Y+1, r25	; 0x01
     df2:	f8 94       	cli
     df4:	99 81       	ldd	r25, Y+1	; 0x01
     df6:	e8 2f       	mov	r30, r24
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	e0 59       	subi	r30, 0x90	; 144
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	60 95       	com	r22
     e00:	80 81       	ld	r24, Z
     e02:	68 23       	and	r22, r24
     e04:	60 83       	st	Z, r22
     e06:	9f bf       	out	0x3f, r25	; 63
     e08:	0f 90       	pop	r0
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	1f 92       	push	r1
     e16:	1f 92       	push	r1
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     e1c:	86 30       	cpi	r24, 0x06	; 6
     e1e:	11 f0       	breq	.+4      	; 0xe24 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     e24:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e26:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     e2a:	81 fd       	sbrc	r24, 1
     e2c:	2a c0       	rjmp	.+84     	; 0xe82 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e2e:	8f b7       	in	r24, 0x3f	; 63
     e30:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e32:	f8 94       	cli
	return flags;
     e34:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     e36:	e0 e5       	ldi	r30, 0x50	; 80
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	82 60       	ori	r24, 0x02	; 2
     e3e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e40:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e42:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     e44:	81 ff       	sbrs	r24, 1
     e46:	fd cf       	rjmp	.-6      	; 0xe42 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e48:	8f b7       	in	r24, 0x3f	; 63
     e4a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     e4c:	f8 94       	cli
	return flags;
     e4e:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     e50:	a0 e5       	ldi	r26, 0x50	; 80
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	16 96       	adiw	r26, 0x06	; 6
     e56:	8c 91       	ld	r24, X
     e58:	16 97       	sbiw	r26, 0x06	; 6
     e5a:	89 7f       	andi	r24, 0xF9	; 249
     e5c:	16 96       	adiw	r26, 0x06	; 6
     e5e:	8c 93       	st	X, r24
     e60:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     e62:	e0 e6       	ldi	r30, 0x60	; 96
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 e8       	ldi	r24, 0x80	; 128
     e68:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     e6a:	8b eb       	ldi	r24, 0xBB	; 187
     e6c:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     e6e:	16 96       	adiw	r26, 0x06	; 6
     e70:	8c 91       	ld	r24, X
     e72:	16 97       	sbiw	r26, 0x06	; 6
     e74:	84 60       	ori	r24, 0x04	; 4
     e76:	16 96       	adiw	r26, 0x06	; 6
     e78:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     e7a:	80 81       	ld	r24, Z
     e7c:	81 60       	ori	r24, 0x01	; 1
     e7e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e80:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     e82:	63 60       	ori	r22, 0x03	; 3
     e84:	84 e4       	ldi	r24, 0x44	; 68
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	cc d5       	rcall	.+2968   	; 0x1a22 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     e8a:	60 e4       	ldi	r22, 0x40	; 64
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	aa df       	rcall	.-172    	; 0xde4 <sysclk_enable_module>
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	08 95       	ret

00000e9e <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     e9e:	30 91 e8 23 	lds	r19, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
     ea2:	20 91 e9 23 	lds	r18, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
     ea6:	82 2f       	mov	r24, r18
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	03 97       	sbiw	r24, 0x03	; 3
     eac:	b1 f4       	brne	.+44     	; 0xeda <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     eae:	31 11       	cpse	r19, r1
     eb0:	16 c0       	rjmp	.+44     	; 0xede <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
     eb2:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
     eb6:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
     eba:	89 2b       	or	r24, r25
     ebc:	91 f4       	brne	.+36     	; 0xee2 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     ebe:	e6 ee       	ldi	r30, 0xE6	; 230
     ec0:	f3 e2       	ldi	r31, 0x23	; 35
     ec2:	82 ef       	ldi	r24, 0xF2	; 242
     ec4:	91 e2       	ldi	r25, 0x21	; 33
     ec6:	80 87       	std	Z+8, r24	; 0x08
     ec8:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     eca:	83 e7       	ldi	r24, 0x73	; 115
     ecc:	97 e0       	ldi	r25, 0x07	; 7
     ece:	84 87       	std	Z+12, r24	; 0x0c
     ed0:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
     ed2:	12 86       	std	Z+10, r1	; 0x0a
     ed4:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	08 95       	ret
	}
	return false;
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	08 95       	ret
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	08 95       	ret
     ee2:	80 e0       	ldi	r24, 0x00	; 0
}
     ee4:	08 95       	ret

00000ee6 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
     ee6:	08 95       	ret

00000ee8 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udi_hid_generic_b_report_in_free>
     eee:	08 95       	ret

00000ef0 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     ef0:	10 92 f8 21 	sts	0x21F8, r1	; 0x8021f8 <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
     ef4:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     efe:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <main_generic_enable>
}
     f02:	08 95       	ret

00000f04 <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     f04:	0c 94 19 15 	jmp	0x2a32	; 0x2a32 <main_generic_disable>
     f08:	08 95       	ret

00000f0a <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     f0a:	2f e4       	ldi	r18, 0x4F	; 79
     f0c:	37 e0       	ldi	r19, 0x07	; 7
     f0e:	48 ea       	ldi	r20, 0xA8	; 168
     f10:	50 e2       	ldi	r21, 0x20	; 32
     f12:	66 ef       	ldi	r22, 0xF6	; 246
     f14:	71 e2       	ldi	r23, 0x21	; 33
     f16:	88 ef       	ldi	r24, 0xF8	; 248
     f18:	91 e2       	ldi	r25, 0x21	; 33
     f1a:	f2 c0       	rjmp	.+484    	; 0x1100 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     f1c:	08 95       	ret

00000f1e <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	1f 92       	push	r1
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
     f30:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udi_hid_generic_b_report_in_free>
     f34:	88 23       	and	r24, r24
     f36:	09 f1       	breq	.+66     	; 0xf7a <udi_hid_generic_send_report_in+0x5c>
     f38:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f3a:	8f b7       	in	r24, 0x3f	; 63
     f3c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f3e:	f8 94       	cli
	return flags;
     f40:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     f42:	10 92 f2 21 	sts	0x21F2, r1	; 0x8021f2 <udi_hid_generic_report_feature>
     f46:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     f4a:	80 81       	ld	r24, Z
     f4c:	91 81       	ldd	r25, Z+1	; 0x01
     f4e:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udi_hid_generic_report_feature>
     f52:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     f56:	04 e7       	ldi	r16, 0x74	; 116
     f58:	17 e0       	ldi	r17, 0x07	; 7
     f5a:	22 e0       	ldi	r18, 0x02	; 2
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	42 ef       	ldi	r20, 0xF2	; 242
     f60:	51 e2       	ldi	r21, 0x21	; 33
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	82 e8       	ldi	r24, 0x82	; 130
     f66:	0e 94 d5 11 	call	0x23aa	; 0x23aa <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	89 27       	eor	r24, r25
     f6e:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f72:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     f74:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udi_hid_generic_b_report_in_free>
     f78:	89 27       	eor	r24, r25

}
     f7a:	0f 90       	pop	r0
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	ff 90       	pop	r15
     f86:	08 95       	ret

00000f88 <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	08 95       	ret

00000f8c <udi_hid_kbd_setreport>:
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	08 95       	ret

00000f90 <udi_hid_kbd_enable>:
     f90:	10 92 0e 22 	sts	0x220E, r1	; 0x80220e <udi_hid_kbd_rate>
     f94:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <udi_hid_kbd_protocol>
     f98:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <udi_hid_kbd_b_report_trans_ongoing>
     f9c:	88 e0       	ldi	r24, 0x08	; 8
     f9e:	e3 e0       	ldi	r30, 0x03	; 3
     fa0:	f2 e2       	ldi	r31, 0x22	; 34
     fa2:	df 01       	movw	r26, r30
     fa4:	1d 92       	st	X+, r1
     fa6:	8a 95       	dec	r24
     fa8:	e9 f7       	brne	.-6      	; 0xfa4 <udi_hid_kbd_enable+0x14>
     faa:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udi_hid_kbd_b_report_valid>
     fae:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <main_kbd_enable>
     fb2:	08 95       	ret

00000fb4 <udi_hid_kbd_disable>:
     fb4:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <main_kbd_disable>
     fb8:	08 95       	ret

00000fba <udi_hid_kbd_setup>:
     fba:	26 ec       	ldi	r18, 0xC6	; 198
     fbc:	37 e0       	ldi	r19, 0x07	; 7
     fbe:	4a ec       	ldi	r20, 0xCA	; 202
     fc0:	50 e2       	ldi	r21, 0x20	; 32
     fc2:	6c e0       	ldi	r22, 0x0C	; 12
     fc4:	72 e2       	ldi	r23, 0x22	; 34
     fc6:	8e e0       	ldi	r24, 0x0E	; 14
     fc8:	92 e2       	ldi	r25, 0x22	; 34
     fca:	9a c0       	rjmp	.+308    	; 0x1100 <udi_hid_setup>
     fcc:	08 95       	ret

00000fce <udi_hid_kbd_send_report>:
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <udi_hid_kbd_b_report_trans_ongoing>
     fd6:	81 11       	cpse	r24, r1
     fd8:	18 c0       	rjmp	.+48     	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
     fda:	88 e0       	ldi	r24, 0x08	; 8
     fdc:	e3 e0       	ldi	r30, 0x03	; 3
     fde:	f2 e2       	ldi	r31, 0x22	; 34
     fe0:	aa ef       	ldi	r26, 0xFA	; 250
     fe2:	b1 e2       	ldi	r27, 0x21	; 33
     fe4:	01 90       	ld	r0, Z+
     fe6:	0d 92       	st	X+, r0
     fe8:	8a 95       	dec	r24
     fea:	e1 f7       	brne	.-8      	; 0xfe4 <udi_hid_kbd_send_report+0x16>
     fec:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udi_hid_kbd_b_report_valid>
     ff0:	09 e0       	ldi	r16, 0x09	; 9
     ff2:	18 e0       	ldi	r17, 0x08	; 8
     ff4:	28 e0       	ldi	r18, 0x08	; 8
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	4a ef       	ldi	r20, 0xFA	; 250
     ffa:	51 e2       	ldi	r21, 0x21	; 33
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	81 e8       	ldi	r24, 0x81	; 129
    1000:	0e 94 d5 11 	call	0x23aa	; 0x23aa <udd_ep_run>
    1004:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <udi_hid_kbd_b_report_trans_ongoing>
    1008:	01 c0       	rjmp	.+2      	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	08 95       	ret

00001012 <udi_hid_kbd_report_sent>:
    1012:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <udi_hid_kbd_b_report_trans_ongoing>
    1016:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udi_hid_kbd_b_report_valid>
    101a:	81 11       	cpse	r24, r1
    101c:	d8 cf       	rjmp	.-80     	; 0xfce <udi_hid_kbd_send_report>
    101e:	08 95       	ret

00001020 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	1f 92       	push	r1
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    102c:	9f b7       	in	r25, 0x3f	; 63
    102e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1030:	f8 94       	cli
	return flags;
    1032:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    1034:	90 91 05 22 	lds	r25, 0x2205	; 0x802205 <udi_hid_kbd_report+0x2>
    1038:	99 23       	and	r25, r25
    103a:	41 f0       	breq	.+16     	; 0x104c <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    103c:	89 17       	cp	r24, r25
    103e:	a9 f0       	breq	.+42     	; 0x106a <udi_hid_kbd_up+0x4a>
    1040:	e6 e0       	ldi	r30, 0x06	; 6
    1042:	f2 e2       	ldi	r31, 0x22	; 34
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1044:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    1046:	21 91       	ld	r18, Z+
    1048:	21 11       	cpse	r18, r1
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    104c:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    104e:	1e c0       	rjmp	.+60     	; 0x108c <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    1050:	28 17       	cp	r18, r24
    1052:	21 f0       	breq	.+8      	; 0x105c <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1054:	9f 5f       	subi	r25, 0xFF	; 255
    1056:	98 30       	cpi	r25, 0x08	; 8
    1058:	b1 f7       	brne	.-20     	; 0x1046 <udi_hid_kbd_up+0x26>
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    105c:	98 30       	cpi	r25, 0x08	; 8
    105e:	19 f0       	breq	.+6      	; 0x1066 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    1060:	97 30       	cpi	r25, 0x07	; 7
    1062:	20 f0       	brcs	.+8      	; 0x106c <udi_hid_kbd_up+0x4c>
    1064:	0c c0       	rjmp	.+24     	; 0x107e <udi_hid_kbd_up+0x5e>
    1066:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    1068:	11 c0       	rjmp	.+34     	; 0x108c <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    106a:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    106c:	e9 2f       	mov	r30, r25
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	ed 5f       	subi	r30, 0xFD	; 253
    1072:	fd 4d       	sbci	r31, 0xDD	; 221
    1074:	81 81       	ldd	r24, Z+1	; 0x01
    1076:	80 83       	st	Z, r24
		i++;
    1078:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    107a:	97 30       	cpi	r25, 0x07	; 7
    107c:	b9 f7       	brne	.-18     	; 0x106c <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    107e:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1088:	a2 df       	rcall	.-188    	; 0xfce <udi_hid_kbd_send_report>
    108a:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	08 95       	ret

00001098 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	1f 92       	push	r1
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10a4:	9f b7       	in	r25, 0x3f	; 63
    10a6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    10a8:	f8 94       	cli
	return flags;
    10aa:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    10ac:	90 91 05 22 	lds	r25, 0x2205	; 0x802205 <udi_hid_kbd_report+0x2>
    10b0:	99 23       	and	r25, r25
    10b2:	b1 f0       	breq	.+44     	; 0x10e0 <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    10b4:	89 17       	cp	r24, r25
    10b6:	41 f0       	breq	.+16     	; 0x10c8 <udi_hid_kbd_down+0x30>
    10b8:	a6 e0       	ldi	r26, 0x06	; 6
    10ba:	b2 e2       	ldi	r27, 0x22	; 34
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10bc:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    10be:	9d 91       	ld	r25, X+
    10c0:	99 23       	and	r25, r25
    10c2:	49 f0       	breq	.+18     	; 0x10d6 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    10c4:	98 13       	cpse	r25, r24
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10c8:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	14 c0       	rjmp	.+40     	; 0x10f6 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10ce:	ef 5f       	subi	r30, 0xFF	; 255
    10d0:	e8 30       	cpi	r30, 0x08	; 8
    10d2:	a9 f7       	brne	.-22     	; 0x10be <udi_hid_kbd_down+0x26>
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    10d6:	e8 30       	cpi	r30, 0x08	; 8
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <udi_hid_kbd_down+0x4a>
    10da:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0b c0       	rjmp	.+22     	; 0x10f6 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10e0:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	ed 5f       	subi	r30, 0xFD	; 253
    10e6:	fd 4d       	sbci	r31, 0xDD	; 221
    10e8:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    10f0:	6e df       	rcall	.-292    	; 0xfce <udi_hid_kbd_send_report>
    10f2:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
}
    10f6:	0f 90       	pop	r0
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	08 95       	ret

00001100 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	dc 01       	movw	r26, r24
    1106:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    1108:	90 91 e6 23 	lds	r25, 0x23E6	; 0x8023e6 <udd_g_ctrlreq>
    110c:	99 23       	and	r25, r25
    110e:	0c f0       	brlt	.+2      	; 0x1112 <udi_hid_setup+0x12>
    1110:	68 c0       	rjmp	.+208    	; 0x11e2 <udi_hid_setup+0xe2>
    1112:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1114:	09 f0       	breq	.+2      	; 0x1118 <udi_hid_setup+0x18>
    1116:	45 c0       	rjmp	.+138    	; 0x11a2 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1118:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    111c:	86 30       	cpi	r24, 0x06	; 6
    111e:	09 f0       	breq	.+2      	; 0x1122 <udi_hid_setup+0x22>
    1120:	40 c0       	rjmp	.+128    	; 0x11a2 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1122:	76 d1       	rcall	.+748    	; 0x1410 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1124:	dc 01       	movw	r26, r24
    1126:	1a 96       	adiw	r26, 0x0a	; 10
    1128:	2c 91       	ld	r18, X
    112a:	1a 97       	sbiw	r26, 0x0a	; 10
    112c:	21 32       	cpi	r18, 0x21	; 33
    112e:	09 f0       	breq	.+2      	; 0x1132 <udi_hid_setup+0x32>
    1130:	77 c0       	rjmp	.+238    	; 0x1220 <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1132:	20 91 e9 23 	lds	r18, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	21 32       	cpi	r18, 0x21	; 33
    113a:	31 05       	cpc	r19, r1
    113c:	b1 f4       	brne	.+44     	; 0x116a <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    113e:	9c 01       	movw	r18, r24
    1140:	27 5f       	subi	r18, 0xF7	; 247
    1142:	3f 4f       	sbci	r19, 0xFF	; 255
    1144:	20 93 ee 23 	sts	0x23EE, r18	; 0x8023ee <udd_g_ctrlreq+0x8>
    1148:	30 93 ef 23 	sts	0x23EF, r19	; 0x8023ef <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    114c:	e6 ee       	ldi	r30, 0xE6	; 230
    114e:	f3 e2       	ldi	r31, 0x23	; 35
    1150:	19 96       	adiw	r26, 0x09	; 9
    1152:	8c 91       	ld	r24, X
    1154:	26 81       	ldd	r18, Z+6	; 0x06
    1156:	37 81       	ldd	r19, Z+7	; 0x07
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	28 17       	cp	r18, r24
    115c:	39 07       	cpc	r19, r25
    115e:	08 f4       	brcc	.+2      	; 0x1162 <udi_hid_setup+0x62>
    1160:	c9 01       	movw	r24, r18
    1162:	82 87       	std	Z+10, r24	; 0x0a
    1164:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	68 c0       	rjmp	.+208    	; 0x123a <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    116a:	fc 01       	movw	r30, r24
    116c:	47 85       	ldd	r20, Z+15	; 0x0f
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	42 17       	cp	r20, r18
    1172:	53 07       	cpc	r21, r19
    1174:	09 f0       	breq	.+2      	; 0x1178 <udi_hid_setup+0x78>
    1176:	56 c0       	rjmp	.+172    	; 0x1224 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    1178:	c0 93 ee 23 	sts	0x23EE, r28	; 0x8023ee <udd_g_ctrlreq+0x8>
    117c:	d0 93 ef 23 	sts	0x23EF, r29	; 0x8023ef <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    1180:	e6 ee       	ldi	r30, 0xE6	; 230
    1182:	f3 e2       	ldi	r31, 0x23	; 35
    1184:	26 81       	ldd	r18, Z+6	; 0x06
    1186:	37 81       	ldd	r19, Z+7	; 0x07
    1188:	dc 01       	movw	r26, r24
    118a:	50 96       	adiw	r26, 0x10	; 16
    118c:	8d 91       	ld	r24, X+
    118e:	9c 91       	ld	r25, X
    1190:	51 97       	sbiw	r26, 0x11	; 17
    1192:	28 17       	cp	r18, r24
    1194:	39 07       	cpc	r19, r25
    1196:	08 f4       	brcc	.+2      	; 0x119a <udi_hid_setup+0x9a>
    1198:	c9 01       	movw	r24, r18
    119a:	82 87       	std	Z+10, r24	; 0x0a
    119c:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	4c c0       	rjmp	.+152    	; 0x123a <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    11a2:	90 32       	cpi	r25, 0x20	; 32
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <udi_hid_setup+0xa8>
    11a6:	40 c0       	rjmp	.+128    	; 0x1228 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    11a8:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	39 f0       	breq	.+14     	; 0x11be <udi_hid_setup+0xbe>
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	71 f0       	breq	.+28     	; 0x11d0 <udi_hid_setup+0xd0>
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	d1 f5       	brne	.+116    	; 0x122c <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    11b8:	f9 01       	movw	r30, r18
    11ba:	19 95       	eicall
    11bc:	3e c0       	rjmp	.+124    	; 0x123a <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    11be:	e6 ee       	ldi	r30, 0xE6	; 230
    11c0:	f3 e2       	ldi	r31, 0x23	; 35
    11c2:	a0 87       	std	Z+8, r26	; 0x08
    11c4:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	82 87       	std	Z+10, r24	; 0x0a
    11cc:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    11ce:	35 c0       	rjmp	.+106    	; 0x123a <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    11d0:	e6 ee       	ldi	r30, 0xE6	; 230
    11d2:	f3 e2       	ldi	r31, 0x23	; 35
    11d4:	60 87       	std	Z+8, r22	; 0x08
    11d6:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	82 87       	std	Z+10, r24	; 0x0a
    11de:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    11e0:	2c c0       	rjmp	.+88     	; 0x123a <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    11e2:	90 76       	andi	r25, 0x60	; 96
    11e4:	90 32       	cpi	r25, 0x20	; 32
    11e6:	21 f5       	brne	.+72     	; 0x1230 <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    11e8:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    11ec:	8a 30       	cpi	r24, 0x0A	; 10
    11ee:	39 f0       	breq	.+14     	; 0x11fe <udi_hid_setup+0xfe>
    11f0:	8b 30       	cpi	r24, 0x0B	; 11
    11f2:	51 f0       	breq	.+20     	; 0x1208 <udi_hid_setup+0x108>
    11f4:	89 30       	cpi	r24, 0x09	; 9
    11f6:	f1 f4       	brne	.+60     	; 0x1234 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    11f8:	f9 01       	movw	r30, r18
    11fa:	19 95       	eicall
    11fc:	1e c0       	rjmp	.+60     	; 0x123a <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    11fe:	80 91 e9 23 	lds	r24, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    1202:	8c 93       	st	X, r24
				return true;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	19 c0       	rjmp	.+50     	; 0x123a <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    1208:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    120c:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    1210:	89 2b       	or	r24, r25
    1212:	91 f4       	brne	.+36     	; 0x1238 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    1214:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    1218:	db 01       	movw	r26, r22
    121a:	8c 93       	st	X, r24
				return true;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	0d c0       	rjmp	.+26     	; 0x123a <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0b c0       	rjmp	.+22     	; 0x123a <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	09 c0       	rjmp	.+18     	; 0x123a <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	07 c0       	rjmp	.+14     	; 0x123a <udi_hid_setup+0x13a>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	05 c0       	rjmp	.+10     	; 0x123a <udi_hid_setup+0x13a>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	03 c0       	rjmp	.+6      	; 0x123a <udi_hid_setup+0x13a>
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	01 c0       	rjmp	.+2      	; 0x123a <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    1238:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1240:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <udc_ptr_conf>
    1244:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    1248:	01 90       	ld	r0, Z+
    124a:	f0 81       	ld	r31, Z
    124c:	e0 2d       	mov	r30, r0
    124e:	22 81       	ldd	r18, Z+2	; 0x02
    1250:	33 81       	ldd	r19, Z+3	; 0x03
    1252:	2e 0f       	add	r18, r30
    1254:	3f 1f       	adc	r19, r31
    1256:	fc 01       	movw	r30, r24
    1258:	40 81       	ld	r20, Z
    125a:	e4 0f       	add	r30, r20
    125c:	f1 1d       	adc	r31, r1
    125e:	e2 17       	cp	r30, r18
    1260:	f3 07       	cpc	r31, r19
    1262:	a0 f4       	brcc	.+40     	; 0x128c <udc_next_desc_in_iface+0x4c>
    1264:	81 81       	ldd	r24, Z+1	; 0x01
    1266:	84 30       	cpi	r24, 0x04	; 4
    1268:	a1 f0       	breq	.+40     	; 0x1292 <udc_next_desc_in_iface+0x52>
    126a:	86 13       	cpse	r24, r22
    126c:	06 c0       	rjmp	.+12     	; 0x127a <udc_next_desc_in_iface+0x3a>
    126e:	14 c0       	rjmp	.+40     	; 0x1298 <udc_next_desc_in_iface+0x58>
    1270:	81 81       	ldd	r24, Z+1	; 0x01
    1272:	84 30       	cpi	r24, 0x04	; 4
    1274:	a1 f0       	breq	.+40     	; 0x129e <udc_next_desc_in_iface+0x5e>
    1276:	86 17       	cp	r24, r22
    1278:	a9 f0       	breq	.+42     	; 0x12a4 <udc_next_desc_in_iface+0x64>
    127a:	80 81       	ld	r24, Z
    127c:	e8 0f       	add	r30, r24
    127e:	f1 1d       	adc	r31, r1
    1280:	e2 17       	cp	r30, r18
    1282:	f3 07       	cpc	r31, r19
    1284:	a8 f3       	brcs	.-22     	; 0x1270 <udc_next_desc_in_iface+0x30>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	08 95       	ret
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	08 95       	ret
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	08 95       	ret
    1298:	8e 2f       	mov	r24, r30
    129a:	9f 2f       	mov	r25, r31
    129c:	08 95       	ret
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	08 95       	ret
    12a4:	8e 2f       	mov	r24, r30
    12a6:	9f 2f       	mov	r25, r31
    12a8:	08 95       	ret

000012aa <udc_valid_address>:
    12aa:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    12ae:	8f 77       	andi	r24, 0x7F	; 127
    12b0:	95 c7       	rjmp	.+3882   	; 0x21dc <udd_set_address>
    12b2:	08 95       	ret

000012b4 <udc_update_iface_desc>:
    12b4:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <udc_num_configuration>
    12b8:	99 23       	and	r25, r25
    12ba:	81 f1       	breq	.+96     	; 0x131c <udc_update_iface_desc+0x68>
    12bc:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <udc_ptr_conf>
    12c0:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    12c4:	01 90       	ld	r0, Z+
    12c6:	f0 81       	ld	r31, Z
    12c8:	e0 2d       	mov	r30, r0
    12ca:	94 81       	ldd	r25, Z+4	; 0x04
    12cc:	89 17       	cp	r24, r25
    12ce:	40 f5       	brcc	.+80     	; 0x1320 <udc_update_iface_desc+0x6c>
    12d0:	e0 93 12 22 	sts	0x2212, r30	; 0x802212 <udc_ptr_iface>
    12d4:	f0 93 13 22 	sts	0x2213, r31	; 0x802213 <udc_ptr_iface+0x1>
    12d8:	22 81       	ldd	r18, Z+2	; 0x02
    12da:	33 81       	ldd	r19, Z+3	; 0x03
    12dc:	2e 0f       	add	r18, r30
    12de:	3f 1f       	adc	r19, r31
    12e0:	e2 17       	cp	r30, r18
    12e2:	f3 07       	cpc	r31, r19
    12e4:	f8 f4       	brcc	.+62     	; 0x1324 <udc_update_iface_desc+0x70>
    12e6:	91 81       	ldd	r25, Z+1	; 0x01
    12e8:	94 30       	cpi	r25, 0x04	; 4
    12ea:	61 f4       	brne	.+24     	; 0x1304 <udc_update_iface_desc+0x50>
    12ec:	92 81       	ldd	r25, Z+2	; 0x02
    12ee:	89 13       	cpse	r24, r25
    12f0:	09 c0       	rjmp	.+18     	; 0x1304 <udc_update_iface_desc+0x50>
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	96 13       	cpse	r25, r22
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <udc_update_iface_desc+0x50>
    12f8:	e0 93 12 22 	sts	0x2212, r30	; 0x802212 <udc_ptr_iface>
    12fc:	f0 93 13 22 	sts	0x2213, r31	; 0x802213 <udc_ptr_iface+0x1>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	08 95       	ret
    1304:	90 81       	ld	r25, Z
    1306:	e9 0f       	add	r30, r25
    1308:	f1 1d       	adc	r31, r1
    130a:	e2 17       	cp	r30, r18
    130c:	f3 07       	cpc	r31, r19
    130e:	58 f3       	brcs	.-42     	; 0x12e6 <udc_update_iface_desc+0x32>
    1310:	e0 93 12 22 	sts	0x2212, r30	; 0x802212 <udc_ptr_iface>
    1314:	f0 93 13 22 	sts	0x2213, r31	; 0x802213 <udc_ptr_iface+0x1>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	08 95       	ret
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	08 95       	ret
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	08 95       	ret
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	08 95       	ret

00001328 <udc_iface_disable>:
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	c8 2f       	mov	r28, r24
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	be df       	rcall	.-132    	; 0x12b4 <udc_update_iface_desc>
    1338:	18 2f       	mov	r17, r24
    133a:	88 23       	and	r24, r24
    133c:	81 f1       	breq	.+96     	; 0x139e <udc_iface_disable+0x76>
    133e:	a0 91 14 22 	lds	r26, 0x2214	; 0x802214 <udc_ptr_conf>
    1342:	b0 91 15 22 	lds	r27, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    1346:	ec 2f       	mov	r30, r28
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	12 96       	adiw	r26, 0x02	; 2
    1350:	8d 91       	ld	r24, X+
    1352:	9c 91       	ld	r25, X
    1354:	13 97       	sbiw	r26, 0x03	; 3
    1356:	e8 0f       	add	r30, r24
    1358:	f9 1f       	adc	r31, r25
    135a:	e0 80       	ld	r14, Z
    135c:	f1 80       	ldd	r15, Z+1	; 0x01
    135e:	d7 01       	movw	r26, r14
    1360:	16 96       	adiw	r26, 0x06	; 6
    1362:	ed 91       	ld	r30, X+
    1364:	fc 91       	ld	r31, X
    1366:	17 97       	sbiw	r26, 0x07	; 7
    1368:	19 95       	eicall
    136a:	68 2f       	mov	r22, r24
    136c:	8c 2f       	mov	r24, r28
    136e:	a2 df       	rcall	.-188    	; 0x12b4 <udc_update_iface_desc>
    1370:	18 2f       	mov	r17, r24
    1372:	88 23       	and	r24, r24
    1374:	a1 f0       	breq	.+40     	; 0x139e <udc_iface_disable+0x76>
    1376:	c0 91 12 22 	lds	r28, 0x2212	; 0x802212 <udc_ptr_iface>
    137a:	d0 91 13 22 	lds	r29, 0x2213	; 0x802213 <udc_ptr_iface+0x1>
    137e:	65 e0       	ldi	r22, 0x05	; 5
    1380:	ce 01       	movw	r24, r28
    1382:	5e df       	rcall	.-324    	; 0x1240 <udc_next_desc_in_iface>
    1384:	ec 01       	movw	r28, r24
    1386:	89 2b       	or	r24, r25
    1388:	21 f0       	breq	.+8      	; 0x1392 <udc_iface_disable+0x6a>
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	0e 94 ee 12 	call	0x25dc	; 0x25dc <udd_ep_free>
    1390:	f6 cf       	rjmp	.-20     	; 0x137e <udc_iface_disable+0x56>
    1392:	d7 01       	movw	r26, r14
    1394:	12 96       	adiw	r26, 0x02	; 2
    1396:	ed 91       	ld	r30, X+
    1398:	fc 91       	ld	r31, X
    139a:	13 97       	sbiw	r26, 0x03	; 3
    139c:	19 95       	eicall
    139e:	81 2f       	mov	r24, r17
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	08 95       	ret

000013ac <udc_iface_enable>:
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	18 2f       	mov	r17, r24
    13b4:	7f df       	rcall	.-258    	; 0x12b4 <udc_update_iface_desc>
    13b6:	88 23       	and	r24, r24
    13b8:	39 f1       	breq	.+78     	; 0x1408 <udc_iface_enable+0x5c>
    13ba:	c0 91 12 22 	lds	r28, 0x2212	; 0x802212 <udc_ptr_iface>
    13be:	d0 91 13 22 	lds	r29, 0x2213	; 0x802213 <udc_ptr_iface+0x1>
    13c2:	65 e0       	ldi	r22, 0x05	; 5
    13c4:	ce 01       	movw	r24, r28
    13c6:	3c df       	rcall	.-392    	; 0x1240 <udc_next_desc_in_iface>
    13c8:	ec 01       	movw	r28, r24
    13ca:	89 2b       	or	r24, r25
    13cc:	41 f0       	breq	.+16     	; 0x13de <udc_iface_enable+0x32>
    13ce:	4c 81       	ldd	r20, Y+4	; 0x04
    13d0:	5d 81       	ldd	r21, Y+5	; 0x05
    13d2:	6b 81       	ldd	r22, Y+3	; 0x03
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	0f d7       	rcall	.+3614   	; 0x21f6 <udd_ep_alloc>
    13d8:	81 11       	cpse	r24, r1
    13da:	f3 cf       	rjmp	.-26     	; 0x13c2 <udc_iface_enable+0x16>
    13dc:	15 c0       	rjmp	.+42     	; 0x1408 <udc_iface_enable+0x5c>
    13de:	a0 91 14 22 	lds	r26, 0x2214	; 0x802214 <udc_ptr_conf>
    13e2:	b0 91 15 22 	lds	r27, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    13e6:	e1 2f       	mov	r30, r17
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	12 96       	adiw	r26, 0x02	; 2
    13f0:	8d 91       	ld	r24, X+
    13f2:	9c 91       	ld	r25, X
    13f4:	13 97       	sbiw	r26, 0x03	; 3
    13f6:	e8 0f       	add	r30, r24
    13f8:	f9 1f       	adc	r31, r25
    13fa:	01 90       	ld	r0, Z+
    13fc:	f0 81       	ld	r31, Z
    13fe:	e0 2d       	mov	r30, r0
    1400:	01 90       	ld	r0, Z+
    1402:	f0 81       	ld	r31, Z
    1404:	e0 2d       	mov	r30, r0
    1406:	19 95       	eicall
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	08 95       	ret

00001410 <udc_get_interface_desc>:
    1410:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <udc_ptr_iface>
    1414:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <udc_ptr_iface+0x1>
    1418:	08 95       	ret

0000141a <udc_start>:
    141a:	55 c6       	rjmp	.+3242   	; 0x20c6 <udd_enable>
    141c:	08 95       	ret

0000141e <udc_reset>:
    141e:	cf 93       	push	r28
    1420:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udc_num_configuration>
    1424:	88 23       	and	r24, r24
    1426:	c1 f0       	breq	.+48     	; 0x1458 <udc_reset+0x3a>
    1428:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <udc_ptr_conf>
    142c:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    1430:	01 90       	ld	r0, Z+
    1432:	f0 81       	ld	r31, Z
    1434:	e0 2d       	mov	r30, r0
    1436:	84 81       	ldd	r24, Z+4	; 0x04
    1438:	88 23       	and	r24, r24
    143a:	71 f0       	breq	.+28     	; 0x1458 <udc_reset+0x3a>
    143c:	c0 e0       	ldi	r28, 0x00	; 0
    143e:	8c 2f       	mov	r24, r28
    1440:	73 df       	rcall	.-282    	; 0x1328 <udc_iface_disable>
    1442:	cf 5f       	subi	r28, 0xFF	; 255
    1444:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <udc_ptr_conf>
    1448:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    144c:	01 90       	ld	r0, Z+
    144e:	f0 81       	ld	r31, Z
    1450:	e0 2d       	mov	r30, r0
    1452:	84 81       	ldd	r24, Z+4	; 0x04
    1454:	c8 17       	cp	r28, r24
    1456:	98 f3       	brcs	.-26     	; 0x143e <udc_reset+0x20>
    1458:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <udc_num_configuration>
    145c:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <udc_device_status>
    1460:	81 fd       	sbrc	r24, 1
    1462:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <main_remotewakeup_disable>
    1466:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <udc_device_status>
    146a:	10 92 1b 22 	sts	0x221B, r1	; 0x80221b <udc_device_status+0x1>
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1472:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1474:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udc_num_configuration>
    1478:	88 23       	and	r24, r24
    147a:	49 f1       	breq	.+82     	; 0x14ce <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    147c:	a0 91 14 22 	lds	r26, 0x2214	; 0x802214 <udc_ptr_conf>
    1480:	b0 91 15 22 	lds	r27, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    1484:	ed 91       	ld	r30, X+
    1486:	fc 91       	ld	r31, X
    1488:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    148a:	84 81       	ldd	r24, Z+4	; 0x04
    148c:	88 23       	and	r24, r24
    148e:	f9 f0       	breq	.+62     	; 0x14ce <udc_sof_notify+0x5c>
    1490:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1492:	ec 2f       	mov	r30, r28
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	12 96       	adiw	r26, 0x02	; 2
    149c:	8d 91       	ld	r24, X+
    149e:	9c 91       	ld	r25, X
    14a0:	13 97       	sbiw	r26, 0x03	; 3
    14a2:	e8 0f       	add	r30, r24
    14a4:	f9 1f       	adc	r31, r25
    14a6:	01 90       	ld	r0, Z+
    14a8:	f0 81       	ld	r31, Z
    14aa:	e0 2d       	mov	r30, r0
    14ac:	00 84       	ldd	r0, Z+8	; 0x08
    14ae:	f1 85       	ldd	r31, Z+9	; 0x09
    14b0:	e0 2d       	mov	r30, r0
    14b2:	30 97       	sbiw	r30, 0x00	; 0
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    14b6:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    14b8:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14ba:	a0 91 14 22 	lds	r26, 0x2214	; 0x802214 <udc_ptr_conf>
    14be:	b0 91 15 22 	lds	r27, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    14c2:	ed 91       	ld	r30, X+
    14c4:	fc 91       	ld	r31, X
    14c6:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    14c8:	84 81       	ldd	r24, Z+4	; 0x04
    14ca:	c8 17       	cp	r28, r24
    14cc:	10 f3       	brcs	.-60     	; 0x1492 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    14ce:	cf 91       	pop	r28
    14d0:	08 95       	ret

000014d2 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    14da:	e6 ee       	ldi	r30, 0xE6	; 230
    14dc:	f3 e2       	ldi	r31, 0x23	; 35
    14de:	12 86       	std	Z+10, r1	; 0x0a
    14e0:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    14e2:	14 86       	std	Z+12, r1	; 0x0c
    14e4:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    14e6:	16 86       	std	Z+14, r1	; 0x0e
    14e8:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    14ea:	80 81       	ld	r24, Z
    14ec:	88 23       	and	r24, r24
    14ee:	0c f0       	brlt	.+2      	; 0x14f2 <udc_process_setup+0x20>
    14f0:	7e c2       	rjmp	.+1276   	; 0x19ee <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    14f2:	20 91 ec 23 	lds	r18, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    14f6:	30 91 ed 23 	lds	r19, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    14fa:	21 15       	cp	r18, r1
    14fc:	31 05       	cpc	r19, r1
    14fe:	09 f0       	breq	.+2      	; 0x1502 <udc_process_setup+0x30>
    1500:	7b c2       	rjmp	.+1270   	; 0x19f8 <udc_process_setup+0x526>
    1502:	6d c2       	rjmp	.+1242   	; 0x19de <udc_process_setup+0x50c>
    1504:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1506:	09 f0       	breq	.+2      	; 0x150a <udc_process_setup+0x38>
    1508:	a0 c0       	rjmp	.+320    	; 0x164a <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    150a:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    150e:	96 30       	cpi	r25, 0x06	; 6
    1510:	79 f0       	breq	.+30     	; 0x1530 <udc_process_setup+0x5e>
    1512:	98 30       	cpi	r25, 0x08	; 8
    1514:	09 f4       	brne	.+2      	; 0x1518 <udc_process_setup+0x46>
    1516:	8f c0       	rjmp	.+286    	; 0x1636 <udc_process_setup+0x164>
    1518:	91 11       	cpse	r25, r1
    151a:	97 c0       	rjmp	.+302    	; 0x164a <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	09 f0       	breq	.+2      	; 0x1524 <udc_process_setup+0x52>
    1522:	19 c2       	rjmp	.+1074   	; 0x1956 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1524:	62 e0       	ldi	r22, 0x02	; 2
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	8a e1       	ldi	r24, 0x1A	; 26
    152a:	92 e2       	ldi	r25, 0x22	; 34
    152c:	5d d6       	rcall	.+3258   	; 0x21e8 <udd_set_setup_payload>
    152e:	69 c2       	rjmp	.+1234   	; 0x1a02 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1530:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    1534:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1538:	29 2f       	mov	r18, r25
    153a:	33 27       	eor	r19, r19
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	a9 f0       	breq	.+42     	; 0x156c <udc_process_setup+0x9a>
    1542:	20 f4       	brcc	.+8      	; 0x154c <udc_process_setup+0x7a>
    1544:	21 30       	cpi	r18, 0x01	; 1
    1546:	31 05       	cpc	r19, r1
    1548:	41 f0       	breq	.+16     	; 0x155a <udc_process_setup+0x88>
    154a:	c7 c1       	rjmp	.+910    	; 0x18da <udc_process_setup+0x408>
    154c:	23 30       	cpi	r18, 0x03	; 3
    154e:	31 05       	cpc	r19, r1
    1550:	d9 f1       	breq	.+118    	; 0x15c8 <udc_process_setup+0xf6>
    1552:	2f 30       	cpi	r18, 0x0F	; 15
    1554:	31 05       	cpc	r19, r1
    1556:	51 f1       	breq	.+84     	; 0x15ac <udc_process_setup+0xda>
    1558:	c0 c1       	rjmp	.+896    	; 0x18da <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    155a:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <udc_config>
    155e:	90 91 2a 20 	lds	r25, 0x202A	; 0x80202a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1562:	dc 01       	movw	r26, r24
    1564:	6c 91       	ld	r22, X
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	3f d6       	rcall	.+3198   	; 0x21e8 <udd_set_setup_payload>
    156a:	56 c0       	rjmp	.+172    	; 0x1618 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    156c:	e0 91 29 20 	lds	r30, 0x2029	; 0x802029 <udc_config>
    1570:	f0 91 2a 20 	lds	r31, 0x202A	; 0x80202a <udc_config+0x1>
    1574:	21 89       	ldd	r18, Z+17	; 0x11
    1576:	82 17       	cp	r24, r18
    1578:	08 f0       	brcs	.+2      	; 0x157c <udc_process_setup+0xaa>
    157a:	ed c1       	rjmp	.+986    	; 0x1956 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    157c:	99 27       	eor	r25, r25
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	e0 91 2b 20 	lds	r30, 0x202B	; 0x80202b <udc_config+0x2>
    158a:	f0 91 2c 20 	lds	r31, 0x202C	; 0x80202c <udc_config+0x3>
    158e:	e8 0f       	add	r30, r24
    1590:	f9 1f       	adc	r31, r25
    1592:	80 81       	ld	r24, Z
    1594:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1596:	fc 01       	movw	r30, r24
    1598:	62 81       	ldd	r22, Z+2	; 0x02
    159a:	73 81       	ldd	r23, Z+3	; 0x03
    159c:	25 d6       	rcall	.+3146   	; 0x21e8 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    159e:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0x8>
    15a2:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udd_g_ctrlreq+0x9>
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	81 83       	std	Z+1, r24	; 0x01
    15aa:	36 c0       	rjmp	.+108    	; 0x1618 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    15ac:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <udc_config+0x4>
    15b0:	90 91 2e 20 	lds	r25, 0x202E	; 0x80202e <udc_config+0x5>
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	09 f4       	brne	.+2      	; 0x15ba <udc_process_setup+0xe8>
    15b8:	ce c1       	rjmp	.+924    	; 0x1956 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    15ba:	dc 01       	movw	r26, r24
    15bc:	12 96       	adiw	r26, 0x02	; 2
    15be:	6d 91       	ld	r22, X+
    15c0:	7c 91       	ld	r23, X
    15c2:	13 97       	sbiw	r26, 0x03	; 3
    15c4:	11 d6       	rcall	.+3106   	; 0x21e8 <udd_set_setup_payload>
    15c6:	28 c0       	rjmp	.+80     	; 0x1618 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    15c8:	99 27       	eor	r25, r25
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	91 05       	cpc	r25, r1
    15ce:	71 f0       	breq	.+28     	; 0x15ec <udc_process_setup+0x11a>
    15d0:	38 f0       	brcs	.+14     	; 0x15e0 <udc_process_setup+0x10e>
    15d2:	02 97       	sbiw	r24, 0x02	; 2
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <udc_process_setup+0x106>
    15d6:	8a c1       	rjmp	.+788    	; 0x18ec <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    15d8:	e8 e4       	ldi	r30, 0x48	; 72
    15da:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    15dc:	3b e1       	ldi	r19, 0x1B	; 27
    15de:	09 c0       	rjmp	.+18     	; 0x15f2 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    15e0:	64 e0       	ldi	r22, 0x04	; 4
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	8e e6       	ldi	r24, 0x6E	; 110
    15e6:	91 e2       	ldi	r25, 0x21	; 33
    15e8:	ff d5       	rcall	.+3070   	; 0x21e8 <udd_set_setup_payload>
    15ea:	16 c0       	rjmp	.+44     	; 0x1618 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    15ec:	e4 e6       	ldi	r30, 0x64	; 100
    15ee:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    15f0:	39 e0       	ldi	r19, 0x09	; 9
    15f2:	a2 e1       	ldi	r26, 0x12	; 18
    15f4:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    15f6:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    15f8:	81 91       	ld	r24, Z+
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	8d 93       	st	X+, r24
    15fe:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1600:	2f 5f       	subi	r18, 0xFF	; 255
    1602:	23 17       	cp	r18, r19
    1604:	c8 f3       	brcs	.-14     	; 0x15f8 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1606:	63 2f       	mov	r22, r19
    1608:	66 0f       	add	r22, r22
    160a:	6e 5f       	subi	r22, 0xFE	; 254
    160c:	60 93 10 21 	sts	0x2110, r22	; 0x802110 <udc_string_desc>
		udd_set_setup_payload(
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	80 e1       	ldi	r24, 0x10	; 16
    1614:	91 e2       	ldi	r25, 0x21	; 33
    1616:	e8 d5       	rcall	.+3024   	; 0x21e8 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1618:	e6 ee       	ldi	r30, 0xE6	; 230
    161a:	f3 e2       	ldi	r31, 0x23	; 35
    161c:	86 81       	ldd	r24, Z+6	; 0x06
    161e:	97 81       	ldd	r25, Z+7	; 0x07
    1620:	22 85       	ldd	r18, Z+10	; 0x0a
    1622:	33 85       	ldd	r19, Z+11	; 0x0b
    1624:	82 17       	cp	r24, r18
    1626:	93 07       	cpc	r25, r19
    1628:	08 f0       	brcs	.+2      	; 0x162c <udc_process_setup+0x15a>
    162a:	eb c1       	rjmp	.+982    	; 0x1a02 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    162c:	80 93 f0 23 	sts	0x23F0, r24	; 0x8023f0 <udd_g_ctrlreq+0xa>
    1630:	90 93 f1 23 	sts	0x23F1, r25	; 0x8023f1 <udd_g_ctrlreq+0xb>
    1634:	e6 c1       	rjmp	.+972    	; 0x1a02 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1636:	21 30       	cpi	r18, 0x01	; 1
    1638:	31 05       	cpc	r19, r1
    163a:	09 f0       	breq	.+2      	; 0x163e <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    163c:	8c c1       	rjmp	.+792    	; 0x1956 <udc_process_setup+0x484>
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	86 e1       	ldi	r24, 0x16	; 22
    1644:	92 e2       	ldi	r25, 0x22	; 34
    1646:	d0 d5       	rcall	.+2976   	; 0x21e8 <udd_set_setup_payload>
    1648:	dc c1       	rjmp	.+952    	; 0x1a02 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	e1 f5       	brne	.+120    	; 0x16c6 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    164e:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    1652:	9a 30       	cpi	r25, 0x0A	; 10
    1654:	c1 f5       	brne	.+112    	; 0x16c6 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1656:	21 30       	cpi	r18, 0x01	; 1
    1658:	31 05       	cpc	r19, r1
    165a:	09 f0       	breq	.+2      	; 0x165e <udc_process_setup+0x18c>
    165c:	4c c1       	rjmp	.+664    	; 0x18f6 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    165e:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udc_num_configuration>
    1662:	88 23       	and	r24, r24
    1664:	09 f4       	brne	.+2      	; 0x1668 <udc_process_setup+0x196>
    1666:	47 c1       	rjmp	.+654    	; 0x18f6 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1668:	c0 91 ea 23 	lds	r28, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x4>
    166c:	d0 91 eb 23 	lds	r29, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1670:	00 91 14 22 	lds	r16, 0x2214	; 0x802214 <udc_ptr_conf>
    1674:	10 91 15 22 	lds	r17, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    1678:	d8 01       	movw	r26, r16
    167a:	ed 91       	ld	r30, X+
    167c:	fc 91       	ld	r31, X
    167e:	84 81       	ldd	r24, Z+4	; 0x04
    1680:	c8 17       	cp	r28, r24
    1682:	08 f0       	brcs	.+2      	; 0x1686 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1684:	38 c1       	rjmp	.+624    	; 0x18f6 <udc_process_setup+0x424>
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	8c 2f       	mov	r24, r28
    168a:	14 de       	rcall	.-984    	; 0x12b4 <udc_update_iface_desc>
    168c:	88 23       	and	r24, r24
    168e:	09 f4       	brne	.+2      	; 0x1692 <udc_process_setup+0x1c0>
    1690:	2d c1       	rjmp	.+602    	; 0x18ec <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1692:	ce 01       	movw	r24, r28
    1694:	99 27       	eor	r25, r25
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	d8 01       	movw	r26, r16
    169c:	12 96       	adiw	r26, 0x02	; 2
    169e:	ed 91       	ld	r30, X+
    16a0:	fc 91       	ld	r31, X
    16a2:	13 97       	sbiw	r26, 0x03	; 3
    16a4:	e8 0f       	add	r30, r24
    16a6:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    16a8:	01 90       	ld	r0, Z+
    16aa:	f0 81       	ld	r31, Z
    16ac:	e0 2d       	mov	r30, r0
    16ae:	86 81       	ldd	r24, Z+6	; 0x06
    16b0:	97 81       	ldd	r25, Z+7	; 0x07
    16b2:	fc 01       	movw	r30, r24
    16b4:	19 95       	eicall
    16b6:	80 93 18 22 	sts	0x2218, r24	; 0x802218 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    16ba:	61 e0       	ldi	r22, 0x01	; 1
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	88 e1       	ldi	r24, 0x18	; 24
    16c0:	92 e2       	ldi	r25, 0x22	; 34
    16c2:	92 d5       	rcall	.+2852   	; 0x21e8 <udd_set_setup_payload>
    16c4:	9e c1       	rjmp	.+828    	; 0x1a02 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    16c6:	82 30       	cpi	r24, 0x02	; 2
    16c8:	09 f0       	breq	.+2      	; 0x16cc <udc_process_setup+0x1fa>
    16ca:	10 c1       	rjmp	.+544    	; 0x18ec <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    16cc:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    16d0:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    16d2:	05 c1       	rjmp	.+522    	; 0x18de <udc_process_setup+0x40c>
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	09 f0       	breq	.+2      	; 0x16dc <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    16da:	3d c1       	rjmp	.+634    	; 0x1956 <udc_process_setup+0x484>
    16dc:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x4>
    16e0:	12 d6       	rcall	.+3108   	; 0x2306 <udd_ep_is_halted>
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <udc_ep_status.4585>
    16e8:	90 93 11 22 	sts	0x2211, r25	; 0x802211 <udc_ep_status.4585+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    16ec:	62 e0       	ldi	r22, 0x02	; 2
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	80 e1       	ldi	r24, 0x10	; 16
    16f2:	92 e2       	ldi	r25, 0x22	; 34
    16f4:	79 d5       	rcall	.+2802   	; 0x21e8 <udd_set_setup_payload>
    16f6:	85 c1       	rjmp	.+778    	; 0x1a02 <udc_process_setup+0x530>
    16f8:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    16fa:	09 f0       	breq	.+2      	; 0x16fe <udc_process_setup+0x22c>
    16fc:	9f c0       	rjmp	.+318    	; 0x183c <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    16fe:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    1702:	93 30       	cpi	r25, 0x03	; 3
    1704:	91 f1       	breq	.+100    	; 0x176a <udc_process_setup+0x298>
    1706:	18 f4       	brcc	.+6      	; 0x170e <udc_process_setup+0x23c>
    1708:	91 30       	cpi	r25, 0x01	; 1
    170a:	a9 f0       	breq	.+42     	; 0x1736 <udc_process_setup+0x264>
    170c:	97 c0       	rjmp	.+302    	; 0x183c <udc_process_setup+0x36a>
    170e:	95 30       	cpi	r25, 0x05	; 5
    1710:	21 f0       	breq	.+8      	; 0x171a <udc_process_setup+0x248>
    1712:	99 30       	cpi	r25, 0x09	; 9
    1714:	09 f4       	brne	.+2      	; 0x1718 <udc_process_setup+0x246>
    1716:	43 c0       	rjmp	.+134    	; 0x179e <udc_process_setup+0x2cc>
    1718:	91 c0       	rjmp	.+290    	; 0x183c <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    171a:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    171e:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    1722:	89 2b       	or	r24, r25
    1724:	09 f0       	breq	.+2      	; 0x1728 <udc_process_setup+0x256>
    1726:	17 c1       	rjmp	.+558    	; 0x1956 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1728:	85 e5       	ldi	r24, 0x55	; 85
    172a:	99 e0       	ldi	r25, 0x09	; 9
    172c:	80 93 f2 23 	sts	0x23F2, r24	; 0x8023f2 <udd_g_ctrlreq+0xc>
    1730:	90 93 f3 23 	sts	0x23F3, r25	; 0x8023f3 <udd_g_ctrlreq+0xd>
    1734:	66 c1       	rjmp	.+716    	; 0x1a02 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1736:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    173a:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    173e:	89 2b       	or	r24, r25
    1740:	09 f0       	breq	.+2      	; 0x1744 <udc_process_setup+0x272>
    1742:	09 c1       	rjmp	.+530    	; 0x1956 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1744:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    1748:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	09 f0       	breq	.+2      	; 0x1752 <udc_process_setup+0x280>
    1750:	02 c1       	rjmp	.+516    	; 0x1956 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1752:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <udc_device_status>
    1756:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <udc_device_status+0x1>
    175a:	8d 7f       	andi	r24, 0xFD	; 253
    175c:	80 93 1a 22 	sts	0x221A, r24	; 0x80221a <udc_device_status>
    1760:	90 93 1b 22 	sts	0x221B, r25	; 0x80221b <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1764:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <main_remotewakeup_disable>
    1768:	4c c1       	rjmp	.+664    	; 0x1a02 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    176a:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    176e:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    1772:	89 2b       	or	r24, r25
    1774:	09 f0       	breq	.+2      	; 0x1778 <udc_process_setup+0x2a6>
    1776:	ef c0       	rjmp	.+478    	; 0x1956 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1778:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    177c:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	09 f0       	breq	.+2      	; 0x1786 <udc_process_setup+0x2b4>
    1784:	ae c0       	rjmp	.+348    	; 0x18e2 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1786:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <udc_device_status>
    178a:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <udc_device_status+0x1>
    178e:	82 60       	ori	r24, 0x02	; 2
    1790:	80 93 1a 22 	sts	0x221A, r24	; 0x80221a <udc_device_status>
    1794:	90 93 1b 22 	sts	0x221B, r25	; 0x80221b <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1798:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    179c:	32 c1       	rjmp	.+612    	; 0x1a02 <udc_process_setup+0x530>
    179e:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    17a2:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    17a6:	89 2b       	or	r24, r25
    17a8:	09 f0       	breq	.+2      	; 0x17ac <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    17aa:	d5 c0       	rjmp	.+426    	; 0x1956 <udc_process_setup+0x484>
    17ac:	1a d5       	rcall	.+2612   	; 0x21e2 <udd_getaddress>
    17ae:	88 23       	and	r24, r24
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <udc_process_setup+0x2e2>
    17b2:	9c c0       	rjmp	.+312    	; 0x18ec <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17b4:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    17b8:	30 91 e9 23 	lds	r19, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    17bc:	33 27       	eor	r19, r19
    17be:	e0 91 29 20 	lds	r30, 0x2029	; 0x802029 <udc_config>
    17c2:	f0 91 2a 20 	lds	r31, 0x202A	; 0x80202a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17c6:	81 89       	ldd	r24, Z+17	; 0x11
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	82 17       	cp	r24, r18
    17cc:	93 07       	cpc	r25, r19
    17ce:	08 f4       	brcc	.+2      	; 0x17d2 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    17d0:	8d c0       	rjmp	.+282    	; 0x18ec <udc_process_setup+0x41a>
    17d2:	25 de       	rcall	.-950    	; 0x141e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    17d4:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    17d8:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    17dc:	80 93 16 22 	sts	0x2216, r24	; 0x802216 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    17e0:	88 23       	and	r24, r24
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <udc_process_setup+0x314>
    17e4:	0e c1       	rjmp	.+540    	; 0x1a02 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    17e6:	99 27       	eor	r25, r25
    17e8:	81 50       	subi	r24, 0x01	; 1
    17ea:	90 4c       	sbci	r25, 0xC0	; 192
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	e0 91 2b 20 	lds	r30, 0x202B	; 0x80202b <udc_config+0x2>
    17f8:	f0 91 2c 20 	lds	r31, 0x202C	; 0x80202c <udc_config+0x3>
    17fc:	e8 0f       	add	r30, r24
    17fe:	f9 1f       	adc	r31, r25
    1800:	e0 93 14 22 	sts	0x2214, r30	; 0x802214 <udc_ptr_conf>
    1804:	f0 93 15 22 	sts	0x2215, r31	; 0x802215 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1808:	01 90       	ld	r0, Z+
    180a:	f0 81       	ld	r31, Z
    180c:	e0 2d       	mov	r30, r0
    180e:	84 81       	ldd	r24, Z+4	; 0x04
    1810:	88 23       	and	r24, r24
    1812:	09 f4       	brne	.+2      	; 0x1816 <udc_process_setup+0x344>
    1814:	f6 c0       	rjmp	.+492    	; 0x1a02 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1816:	c0 e0       	ldi	r28, 0x00	; 0
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	8c 2f       	mov	r24, r28
    181c:	c7 dd       	rcall	.-1138   	; 0x13ac <udc_iface_enable>
    181e:	88 23       	and	r24, r24
    1820:	09 f4       	brne	.+2      	; 0x1824 <udc_process_setup+0x352>
    1822:	64 c0       	rjmp	.+200    	; 0x18ec <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1824:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1826:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <udc_ptr_conf>
    182a:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    182e:	01 90       	ld	r0, Z+
    1830:	f0 81       	ld	r31, Z
    1832:	e0 2d       	mov	r30, r0
    1834:	84 81       	ldd	r24, Z+4	; 0x04
    1836:	c8 17       	cp	r28, r24
    1838:	78 f3       	brcs	.-34     	; 0x1818 <udc_process_setup+0x346>
    183a:	e3 c0       	rjmp	.+454    	; 0x1a02 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	e9 f4       	brne	.+58     	; 0x187a <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1840:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    1844:	9b 30       	cpi	r25, 0x0B	; 11
    1846:	c9 f4       	brne	.+50     	; 0x187a <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1848:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    184c:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    1850:	89 2b       	or	r24, r25
    1852:	09 f0       	breq	.+2      	; 0x1856 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1854:	50 c0       	rjmp	.+160    	; 0x18f6 <udc_process_setup+0x424>
    1856:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udc_num_configuration>
    185a:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    185c:	09 f4       	brne	.+2      	; 0x1860 <udc_process_setup+0x38e>
    185e:	4b c0       	rjmp	.+150    	; 0x18f6 <udc_process_setup+0x424>
    1860:	e6 ee       	ldi	r30, 0xE6	; 230
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1862:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1864:	c4 81       	ldd	r28, Z+4	; 0x04
    1866:	d2 81       	ldd	r29, Z+2	; 0x02
    1868:	8c 2f       	mov	r24, r28
    186a:	5e dd       	rcall	.-1348   	; 0x1328 <udc_iface_disable>
    186c:	88 23       	and	r24, r24
    186e:	09 f4       	brne	.+2      	; 0x1872 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1870:	3d c0       	rjmp	.+122    	; 0x18ec <udc_process_setup+0x41a>
    1872:	6d 2f       	mov	r22, r29
    1874:	8c 2f       	mov	r24, r28
    1876:	9a dd       	rcall	.-1228   	; 0x13ac <udc_iface_enable>
    1878:	37 c0       	rjmp	.+110    	; 0x18e8 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    187a:	82 30       	cpi	r24, 0x02	; 2
    187c:	b9 f5       	brne	.+110    	; 0x18ec <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    187e:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	19 f0       	breq	.+6      	; 0x188c <udc_process_setup+0x3ba>
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	99 f0       	breq	.+38     	; 0x18b0 <udc_process_setup+0x3de>
    188a:	2d c0       	rjmp	.+90     	; 0x18e6 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    188c:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    1890:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    1894:	89 2b       	or	r24, r25
    1896:	09 f0       	breq	.+2      	; 0x189a <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1898:	5e c0       	rjmp	.+188    	; 0x1956 <udc_process_setup+0x484>
    189a:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    189e:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    18a2:	89 2b       	or	r24, r25
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18a6:	57 c0       	rjmp	.+174    	; 0x1956 <udc_process_setup+0x484>
    18a8:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x4>
    18ac:	47 d5       	rcall	.+2702   	; 0x233c <udd_ep_clear_halt>
    18ae:	1c c0       	rjmp	.+56     	; 0x18e8 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18b0:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    18b4:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    18b8:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18ba:	09 f0       	breq	.+2      	; 0x18be <udc_process_setup+0x3ec>
    18bc:	4c c0       	rjmp	.+152    	; 0x1956 <udc_process_setup+0x484>
    18be:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    18c2:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    18c6:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    18c8:	09 f0       	breq	.+2      	; 0x18cc <udc_process_setup+0x3fa>
    18ca:	45 c0       	rjmp	.+138    	; 0x1956 <udc_process_setup+0x484>
    18cc:	c6 ee       	ldi	r28, 0xE6	; 230
    18ce:	d3 e2       	ldi	r29, 0x23	; 35
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18d2:	35 d6       	rcall	.+3178   	; 0x253e <udd_ep_abort>
    18d4:	8c 81       	ldd	r24, Y+4	; 0x04
    18d6:	9e d6       	rcall	.+3388   	; 0x2614 <udd_ep_set_halt>
    18d8:	07 c0       	rjmp	.+14     	; 0x18e8 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	05 c0       	rjmp	.+10     	; 0x18e8 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    18e6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    18e8:	81 11       	cpse	r24, r1
    18ea:	8c c0       	rjmp	.+280    	; 0x1a04 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    18ec:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <udd_g_ctrlreq>
    18f0:	8f 71       	andi	r24, 0x1F	; 31
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	81 f5       	brne	.+96     	; 0x1956 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    18f6:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udc_num_configuration>
    18fa:	88 23       	and	r24, r24
    18fc:	09 f4       	brne	.+2      	; 0x1900 <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18fe:	71 c0       	rjmp	.+226    	; 0x19e2 <udc_process_setup+0x510>
    1900:	00 91 ea 23 	lds	r16, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x4>
    1904:	10 91 eb 23 	lds	r17, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1908:	c0 91 14 22 	lds	r28, 0x2214	; 0x802214 <udc_ptr_conf>
    190c:	d0 91 15 22 	lds	r29, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    1910:	e8 81       	ld	r30, Y
    1912:	f9 81       	ldd	r31, Y+1	; 0x01
    1914:	84 81       	ldd	r24, Z+4	; 0x04
    1916:	08 17       	cp	r16, r24
    1918:	08 f0       	brcs	.+2      	; 0x191c <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    191a:	65 c0       	rjmp	.+202    	; 0x19e6 <udc_process_setup+0x514>
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	80 2f       	mov	r24, r16
    1920:	c9 dc       	rcall	.-1646   	; 0x12b4 <udc_update_iface_desc>
    1922:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1924:	c1 f0       	breq	.+48     	; 0x1956 <udc_process_setup+0x484>
    1926:	f8 01       	movw	r30, r16
    1928:	ff 27       	eor	r31, r31
    192a:	cf 01       	movw	r24, r30
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	ea 81       	ldd	r30, Y+2	; 0x02
    1932:	fb 81       	ldd	r31, Y+3	; 0x03
    1934:	e8 0f       	add	r30, r24
    1936:	f9 1f       	adc	r31, r25
    1938:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    193a:	d1 81       	ldd	r29, Z+1	; 0x01
    193c:	ee 81       	ldd	r30, Y+6	; 0x06
    193e:	ff 81       	ldd	r31, Y+7	; 0x07
    1940:	19 95       	eicall
    1942:	68 2f       	mov	r22, r24
    1944:	80 2f       	mov	r24, r16
    1946:	b6 dc       	rcall	.-1684   	; 0x12b4 <udc_update_iface_desc>
    1948:	88 23       	and	r24, r24
    194a:	29 f0       	breq	.+10     	; 0x1956 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    194c:	ec 81       	ldd	r30, Y+4	; 0x04
    194e:	fd 81       	ldd	r31, Y+5	; 0x05
    1950:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1952:	81 11       	cpse	r24, r1
    1954:	57 c0       	rjmp	.+174    	; 0x1a04 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1956:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <udd_g_ctrlreq>
    195a:	8f 71       	andi	r24, 0x1F	; 31
    195c:	82 30       	cpi	r24, 0x02	; 2
    195e:	09 f0       	breq	.+2      	; 0x1962 <udc_process_setup+0x490>
    1960:	44 c0       	rjmp	.+136    	; 0x19ea <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1962:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udc_num_configuration>
    1966:	88 23       	and	r24, r24
    1968:	b1 f1       	breq	.+108    	; 0x19d6 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    196a:	a0 91 14 22 	lds	r26, 0x2214	; 0x802214 <udc_ptr_conf>
    196e:	b0 91 15 22 	lds	r27, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    1972:	ed 91       	ld	r30, X+
    1974:	fc 91       	ld	r31, X
    1976:	11 97       	sbiw	r26, 0x01	; 1
    1978:	84 81       	ldd	r24, Z+4	; 0x04
    197a:	88 23       	and	r24, r24
    197c:	71 f1       	breq	.+92     	; 0x19da <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    197e:	c0 e0       	ldi	r28, 0x00	; 0
    1980:	ec 2f       	mov	r30, r28
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	12 96       	adiw	r26, 0x02	; 2
    198a:	8d 91       	ld	r24, X+
    198c:	9c 91       	ld	r25, X
    198e:	13 97       	sbiw	r26, 0x03	; 3
    1990:	e8 0f       	add	r30, r24
    1992:	f9 1f       	adc	r31, r25
    1994:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1996:	11 81       	ldd	r17, Z+1	; 0x01
    1998:	d8 01       	movw	r26, r16
    199a:	16 96       	adiw	r26, 0x06	; 6
    199c:	ed 91       	ld	r30, X+
    199e:	fc 91       	ld	r31, X
    19a0:	17 97       	sbiw	r26, 0x07	; 7
    19a2:	19 95       	eicall
    19a4:	68 2f       	mov	r22, r24
    19a6:	8c 2f       	mov	r24, r28
    19a8:	85 dc       	rcall	.-1782   	; 0x12b4 <udc_update_iface_desc>
    19aa:	88 23       	and	r24, r24
    19ac:	59 f1       	breq	.+86     	; 0x1a04 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    19ae:	d8 01       	movw	r26, r16
    19b0:	14 96       	adiw	r26, 0x04	; 4
    19b2:	ed 91       	ld	r30, X+
    19b4:	fc 91       	ld	r31, X
    19b6:	15 97       	sbiw	r26, 0x05	; 5
    19b8:	19 95       	eicall
    19ba:	81 11       	cpse	r24, r1
    19bc:	23 c0       	rjmp	.+70     	; 0x1a04 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    19be:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19c0:	a0 91 14 22 	lds	r26, 0x2214	; 0x802214 <udc_ptr_conf>
    19c4:	b0 91 15 22 	lds	r27, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    19c8:	ed 91       	ld	r30, X+
    19ca:	fc 91       	ld	r31, X
    19cc:	11 97       	sbiw	r26, 0x01	; 1
    19ce:	94 81       	ldd	r25, Z+4	; 0x04
    19d0:	c9 17       	cp	r28, r25
    19d2:	b0 f2       	brcs	.-84     	; 0x1980 <udc_process_setup+0x4ae>
    19d4:	17 c0       	rjmp	.+46     	; 0x1a04 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	15 c0       	rjmp	.+42     	; 0x1a04 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	13 c0       	rjmp	.+38     	; 0x1a04 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	11 c0       	rjmp	.+34     	; 0x1a04 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	0f c0       	rjmp	.+30     	; 0x1a04 <udc_process_setup+0x532>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	0d c0       	rjmp	.+26     	; 0x1a04 <udc_process_setup+0x532>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	0b c0       	rjmp	.+22     	; 0x1a04 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    19ee:	98 2f       	mov	r25, r24
    19f0:	90 76       	andi	r25, 0x60	; 96
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <udc_process_setup+0x524>
    19f4:	7b cf       	rjmp	.-266    	; 0x18ec <udc_process_setup+0x41a>
    19f6:	80 ce       	rjmp	.-768    	; 0x16f8 <udc_process_setup+0x226>
    19f8:	98 2f       	mov	r25, r24
    19fa:	90 76       	andi	r25, 0x60	; 96
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <udc_process_setup+0x52e>
    19fe:	76 cf       	rjmp	.-276    	; 0x18ec <udc_process_setup+0x41a>
    1a00:	81 cd       	rjmp	.-1278   	; 0x1504 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	08 95       	ret

00001a0e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1a0e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1a12:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1a14:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1a16:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1a1a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1a1c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1a20:	08 95       	ret

00001a22 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1a22:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1a24:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1a26:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1a28:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1a2a:	60 83       	st	Z, r22
	ret                             // Return to caller
    1a2c:	08 95       	ret

00001a2e <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	1f 92       	push	r1
    1a34:	1f 92       	push	r1
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	81 11       	cpse	r24, r1
    1a3c:	26 c0       	rjmp	.+76     	; 0x1a8a <udd_sleep_mode+0x5c>
    1a3e:	90 91 dc 23 	lds	r25, 0x23DC	; 0x8023dc <udd_b_idle>
    1a42:	99 23       	and	r25, r25
    1a44:	f9 f0       	breq	.+62     	; 0x1a84 <udd_sleep_mode+0x56>
    1a46:	90 91 e1 23 	lds	r25, 0x23E1	; 0x8023e1 <sleepmgr_locks+0x1>
    1a4a:	91 11       	cpse	r25, r1
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <udd_sleep_mode+0x22>
    1a4e:	ff cf       	rjmp	.-2      	; 0x1a4e <udd_sleep_mode+0x20>
    1a50:	9f b7       	in	r25, 0x3f	; 63
    1a52:	9a 83       	std	Y+2, r25	; 0x02
    1a54:	f8 94       	cli
    1a56:	2a 81       	ldd	r18, Y+2	; 0x02
    1a58:	e0 ee       	ldi	r30, 0xE0	; 224
    1a5a:	f3 e2       	ldi	r31, 0x23	; 35
    1a5c:	91 81       	ldd	r25, Z+1	; 0x01
    1a5e:	91 50       	subi	r25, 0x01	; 1
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	2f bf       	out	0x3f, r18	; 63
    1a64:	0f c0       	rjmp	.+30     	; 0x1a84 <udd_sleep_mode+0x56>
    1a66:	90 91 e1 23 	lds	r25, 0x23E1	; 0x8023e1 <sleepmgr_locks+0x1>
    1a6a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <udd_sleep_mode+0x42>
    1a6e:	ff cf       	rjmp	.-2      	; 0x1a6e <udd_sleep_mode+0x40>
    1a70:	9f b7       	in	r25, 0x3f	; 63
    1a72:	99 83       	std	Y+1, r25	; 0x01
    1a74:	f8 94       	cli
    1a76:	29 81       	ldd	r18, Y+1	; 0x01
    1a78:	e0 ee       	ldi	r30, 0xE0	; 224
    1a7a:	f3 e2       	ldi	r31, 0x23	; 35
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	9f 5f       	subi	r25, 0xFF	; 255
    1a80:	91 83       	std	Z+1, r25	; 0x01
    1a82:	2f bf       	out	0x3f, r18	; 63
    1a84:	80 93 dc 23 	sts	0x23DC, r24	; 0x8023dc <udd_b_idle>
    1a88:	05 c0       	rjmp	.+10     	; 0x1a94 <udd_sleep_mode+0x66>
    1a8a:	90 91 dc 23 	lds	r25, 0x23DC	; 0x8023dc <udd_b_idle>
    1a8e:	99 23       	and	r25, r25
    1a90:	51 f3       	breq	.-44     	; 0x1a66 <udd_sleep_mode+0x38>
    1a92:	f8 cf       	rjmp	.-16     	; 0x1a84 <udd_sleep_mode+0x56>
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <udd_ctrl_init>:
    1a9e:	0f 93       	push	r16
    1aa0:	e8 ec       	ldi	r30, 0xC8	; 200
    1aa2:	f4 e0       	ldi	r31, 0x04	; 4
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8f 7d       	andi	r24, 0xDF	; 223
    1aa8:	80 83       	st	Z, r24
    1aaa:	80 81       	ld	r24, Z
    1aac:	8f 7d       	andi	r24, 0xDF	; 223
    1aae:	80 83       	st	Z, r24
    1ab0:	e0 e9       	ldi	r30, 0x90	; 144
    1ab2:	f3 e2       	ldi	r31, 0x23	; 35
    1ab4:	02 e0       	ldi	r16, 0x02	; 2
    1ab6:	05 93       	las	Z, r16
    1ab8:	10 92 92 23 	sts	0x2392, r1	; 0x802392 <udd_sram+0x1e>
    1abc:	10 92 93 23 	sts	0x2393, r1	; 0x802393 <udd_sram+0x1f>
    1ac0:	00 e2       	ldi	r16, 0x20	; 32
    1ac2:	06 93       	lac	Z, r16
    1ac4:	00 e4       	ldi	r16, 0x40	; 64
    1ac6:	06 93       	lac	Z, r16
    1ac8:	e8 e8       	ldi	r30, 0x88	; 136
    1aca:	f3 e2       	ldi	r31, 0x23	; 35
    1acc:	00 e4       	ldi	r16, 0x40	; 64
    1ace:	06 93       	lac	Z, r16
    1ad0:	e6 ee       	ldi	r30, 0xE6	; 230
    1ad2:	f3 e2       	ldi	r31, 0x23	; 35
    1ad4:	14 86       	std	Z+12, r1	; 0x0c
    1ad6:	15 86       	std	Z+13, r1	; 0x0d
    1ad8:	16 86       	std	Z+14, r1	; 0x0e
    1ada:	17 86       	std	Z+15, r1	; 0x0f
    1adc:	12 86       	std	Z+10, r1	; 0x0a
    1ade:	13 86       	std	Z+11, r1	; 0x0b
    1ae0:	10 92 71 23 	sts	0x2371, r1	; 0x802371 <udd_ep_control_state>
    1ae4:	0f 91       	pop	r16
    1ae6:	08 95       	ret

00001ae8 <udd_ctrl_stall_data>:
    1ae8:	0f 93       	push	r16
    1aea:	85 e0       	ldi	r24, 0x05	; 5
    1aec:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udd_ep_control_state>
    1af0:	e1 e9       	ldi	r30, 0x91	; 145
    1af2:	f3 e2       	ldi	r31, 0x23	; 35
    1af4:	04 e0       	ldi	r16, 0x04	; 4
    1af6:	05 93       	las	Z, r16
    1af8:	e9 e8       	ldi	r30, 0x89	; 137
    1afa:	f3 e2       	ldi	r31, 0x23	; 35
    1afc:	04 e0       	ldi	r16, 0x04	; 4
    1afe:	05 93       	las	Z, r16
    1b00:	0f 91       	pop	r16
    1b02:	08 95       	ret

00001b04 <udd_ctrl_send_zlp_in>:
    1b04:	0f 93       	push	r16
    1b06:	83 e0       	ldi	r24, 0x03	; 3
    1b08:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udd_ep_control_state>
    1b0c:	10 92 92 23 	sts	0x2392, r1	; 0x802392 <udd_sram+0x1e>
    1b10:	10 92 93 23 	sts	0x2393, r1	; 0x802393 <udd_sram+0x1f>
    1b14:	e0 e9       	ldi	r30, 0x90	; 144
    1b16:	f3 e2       	ldi	r31, 0x23	; 35
    1b18:	02 e0       	ldi	r16, 0x02	; 2
    1b1a:	06 93       	lac	Z, r16
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <udd_ctrl_endofrequest>:
    1b20:	e0 91 f2 23 	lds	r30, 0x23F2	; 0x8023f2 <udd_g_ctrlreq+0xc>
    1b24:	f0 91 f3 23 	lds	r31, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0xd>
    1b28:	30 97       	sbiw	r30, 0x00	; 0
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <udd_ctrl_endofrequest+0xe>
    1b2c:	19 95       	eicall
    1b2e:	08 95       	ret

00001b30 <udd_ctrl_in_sent>:
    1b30:	0f 93       	push	r16
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udd_ep_control_state>
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	19 f4       	brne	.+6      	; 0x1b44 <udd_ctrl_in_sent+0x14>
    1b3e:	f0 df       	rcall	.-32     	; 0x1b20 <udd_ctrl_endofrequest>
    1b40:	ae df       	rcall	.-164    	; 0x1a9e <udd_ctrl_init>
    1b42:	5e c0       	rjmp	.+188    	; 0x1c00 <udd_ctrl_in_sent+0xd0>
    1b44:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <udd_ctrl_payload_nb_trans>
    1b48:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    1b4c:	c0 91 f0 23 	lds	r28, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xa>
    1b50:	d0 91 f1 23 	lds	r29, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xb>
    1b54:	c8 1b       	sub	r28, r24
    1b56:	d9 0b       	sbc	r29, r25
    1b58:	71 f5       	brne	.+92     	; 0x1bb6 <udd_ctrl_in_sent+0x86>
    1b5a:	20 91 6f 23 	lds	r18, 0x236F	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
    1b5e:	30 91 70 23 	lds	r19, 0x2370	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    1b62:	82 0f       	add	r24, r18
    1b64:	93 1f       	adc	r25, r19
    1b66:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
    1b6a:	90 93 70 23 	sts	0x2370, r25	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    1b6e:	20 91 ec 23 	lds	r18, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    1b72:	30 91 ed 23 	lds	r19, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    1b76:	82 17       	cp	r24, r18
    1b78:	93 07       	cpc	r25, r19
    1b7a:	21 f0       	breq	.+8      	; 0x1b84 <udd_ctrl_in_sent+0x54>
    1b7c:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <b_shortpacket.5301>
    1b80:	88 23       	and	r24, r24
    1b82:	41 f0       	breq	.+16     	; 0x1b94 <udd_ctrl_in_sent+0x64>
    1b84:	84 e0       	ldi	r24, 0x04	; 4
    1b86:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udd_ep_control_state>
    1b8a:	e8 e8       	ldi	r30, 0x88	; 136
    1b8c:	f3 e2       	ldi	r31, 0x23	; 35
    1b8e:	02 e0       	ldi	r16, 0x02	; 2
    1b90:	06 93       	lac	Z, r16
    1b92:	36 c0       	rjmp	.+108    	; 0x1c00 <udd_ctrl_in_sent+0xd0>
    1b94:	e0 91 f4 23 	lds	r30, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0xe>
    1b98:	f0 91 f5 23 	lds	r31, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0xf>
    1b9c:	30 97       	sbiw	r30, 0x00	; 0
    1b9e:	99 f0       	breq	.+38     	; 0x1bc6 <udd_ctrl_in_sent+0x96>
    1ba0:	19 95       	eicall
    1ba2:	88 23       	and	r24, r24
    1ba4:	81 f0       	breq	.+32     	; 0x1bc6 <udd_ctrl_in_sent+0x96>
    1ba6:	10 92 6d 23 	sts	0x236D, r1	; 0x80236d <udd_ctrl_payload_nb_trans>
    1baa:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    1bae:	c0 91 f0 23 	lds	r28, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xa>
    1bb2:	d0 91 f1 23 	lds	r29, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xb>
    1bb6:	c8 30       	cpi	r28, 0x08	; 8
    1bb8:	d1 05       	cpc	r29, r1
    1bba:	28 f0       	brcs	.+10     	; 0x1bc6 <udd_ctrl_in_sent+0x96>
    1bbc:	10 92 1c 22 	sts	0x221C, r1	; 0x80221c <b_shortpacket.5301>
    1bc0:	c8 e0       	ldi	r28, 0x08	; 8
    1bc2:	d0 e0       	ldi	r29, 0x00	; 0
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <udd_ctrl_in_sent+0x9c>
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	80 93 1c 22 	sts	0x221C, r24	; 0x80221c <b_shortpacket.5301>
    1bcc:	e4 e7       	ldi	r30, 0x74	; 116
    1bce:	f3 e2       	ldi	r31, 0x23	; 35
    1bd0:	c6 8f       	std	Z+30, r28	; 0x1e
    1bd2:	d7 8f       	std	Z+31, r29	; 0x1f
    1bd4:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <udd_ctrl_payload_nb_trans>
    1bd8:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    1bdc:	20 91 ee 23 	lds	r18, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0x8>
    1be0:	30 91 ef 23 	lds	r19, 0x23EF	; 0x8023ef <udd_g_ctrlreq+0x9>
    1be4:	28 0f       	add	r18, r24
    1be6:	39 1f       	adc	r19, r25
    1be8:	20 a3       	std	Z+32, r18	; 0x20
    1bea:	31 a3       	std	Z+33, r19	; 0x21
    1bec:	c8 0f       	add	r28, r24
    1bee:	d9 1f       	adc	r29, r25
    1bf0:	c0 93 6d 23 	sts	0x236D, r28	; 0x80236d <udd_ctrl_payload_nb_trans>
    1bf4:	d0 93 6e 23 	sts	0x236E, r29	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    1bf8:	e0 e9       	ldi	r30, 0x90	; 144
    1bfa:	f3 e2       	ldi	r31, 0x23	; 35
    1bfc:	02 e0       	ldi	r16, 0x02	; 2
    1bfe:	06 93       	lac	Z, r16
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	0f 91       	pop	r16
    1c06:	08 95       	ret

00001c08 <udd_ep_get_size>:
    1c08:	fc 01       	movw	r30, r24
    1c0a:	81 81       	ldd	r24, Z+1	; 0x01
    1c0c:	e8 2f       	mov	r30, r24
    1c0e:	e7 70       	andi	r30, 0x07	; 7
    1c10:	8e 2f       	mov	r24, r30
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	fc 01       	movw	r30, r24
    1c16:	31 97       	sbiw	r30, 0x01	; 1
    1c18:	e7 30       	cpi	r30, 0x07	; 7
    1c1a:	f1 05       	cpc	r31, r1
    1c1c:	d0 f4       	brcc	.+52     	; 0x1c52 <udd_ep_get_size+0x4a>
    1c1e:	88 27       	eor	r24, r24
    1c20:	e9 5f       	subi	r30, 0xF9	; 249
    1c22:	fe 4f       	sbci	r31, 0xFE	; 254
    1c24:	8f 4f       	sbci	r24, 0xFF	; 255
    1c26:	23 c7       	rjmp	.+3654   	; 0x2a6e <__tablejump2__>
    1c28:	80 e1       	ldi	r24, 0x10	; 16
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	08 95       	ret
    1c2e:	80 e2       	ldi	r24, 0x20	; 32
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	08 95       	ret
    1c34:	80 e4       	ldi	r24, 0x40	; 64
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	08 95       	ret
    1c3a:	80 e8       	ldi	r24, 0x80	; 128
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	08 95       	ret
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	08 95       	ret
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	92 e0       	ldi	r25, 0x02	; 2
    1c4a:	08 95       	ret
    1c4c:	8f ef       	ldi	r24, 0xFF	; 255
    1c4e:	93 e0       	ldi	r25, 0x03	; 3
    1c50:	08 95       	ret
    1c52:	88 e0       	ldi	r24, 0x08	; 8
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	08 95       	ret

00001c58 <udd_ep_get_job>:
    1c58:	28 2f       	mov	r18, r24
    1c5a:	2f 70       	andi	r18, 0x0F	; 15
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	22 0f       	add	r18, r18
    1c60:	33 1f       	adc	r19, r19
    1c62:	08 2e       	mov	r0, r24
    1c64:	00 0c       	add	r0, r0
    1c66:	99 0b       	sbc	r25, r25
    1c68:	88 27       	eor	r24, r24
    1c6a:	99 0f       	add	r25, r25
    1c6c:	88 1f       	adc	r24, r24
    1c6e:	99 27       	eor	r25, r25
    1c70:	82 0f       	add	r24, r18
    1c72:	93 1f       	adc	r25, r19
    1c74:	02 97       	sbiw	r24, 0x02	; 2
    1c76:	9c 01       	movw	r18, r24
    1c78:	22 0f       	add	r18, r18
    1c7a:	33 1f       	adc	r19, r19
    1c7c:	22 0f       	add	r18, r18
    1c7e:	33 1f       	adc	r19, r19
    1c80:	22 0f       	add	r18, r18
    1c82:	33 1f       	adc	r19, r19
    1c84:	82 0f       	add	r24, r18
    1c86:	93 1f       	adc	r25, r19
    1c88:	83 5e       	subi	r24, 0xE3	; 227
    1c8a:	9c 4d       	sbci	r25, 0xDC	; 220
    1c8c:	08 95       	ret

00001c8e <udd_ctrl_interrupt_tc_setup>:
    1c8e:	0f 93       	push	r16
    1c90:	cf 93       	push	r28
    1c92:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1c96:	80 ff       	sbrs	r24, 0
    1c98:	64 c0       	rjmp	.+200    	; 0x1d62 <udd_ctrl_interrupt_tc_setup+0xd4>
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1ca0:	e8 e8       	ldi	r30, 0x88	; 136
    1ca2:	f3 e2       	ldi	r31, 0x23	; 35
    1ca4:	00 e8       	ldi	r16, 0x80	; 128
    1ca6:	06 93       	lac	Z, r16
    1ca8:	e0 e9       	ldi	r30, 0x90	; 144
    1caa:	f3 e2       	ldi	r31, 0x23	; 35
    1cac:	00 e8       	ldi	r16, 0x80	; 128
    1cae:	06 93       	lac	Z, r16
    1cb0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1cb4:	e8 e8       	ldi	r30, 0x88	; 136
    1cb6:	f3 e2       	ldi	r31, 0x23	; 35
    1cb8:	00 e1       	ldi	r16, 0x10	; 16
    1cba:	06 93       	lac	Z, r16
    1cbc:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udd_ep_control_state>
    1cc0:	88 23       	and	r24, r24
    1cc2:	29 f0       	breq	.+10     	; 0x1cce <udd_ctrl_interrupt_tc_setup+0x40>
    1cc4:	83 50       	subi	r24, 0x03	; 3
    1cc6:	82 30       	cpi	r24, 0x02	; 2
    1cc8:	08 f4       	brcc	.+2      	; 0x1ccc <udd_ctrl_interrupt_tc_setup+0x3e>
    1cca:	2a df       	rcall	.-428    	; 0x1b20 <udd_ctrl_endofrequest>
    1ccc:	e8 de       	rcall	.-560    	; 0x1a9e <udd_ctrl_init>
    1cce:	80 91 8a 23 	lds	r24, 0x238A	; 0x80238a <udd_sram+0x16>
    1cd2:	90 91 8b 23 	lds	r25, 0x238B	; 0x80238b <udd_sram+0x17>
    1cd6:	08 97       	sbiw	r24, 0x08	; 8
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <udd_ctrl_interrupt_tc_setup+0x4e>
    1cda:	45 c0       	rjmp	.+138    	; 0x1d66 <udd_ctrl_interrupt_tc_setup+0xd8>
    1cdc:	88 e0       	ldi	r24, 0x08	; 8
    1cde:	e5 e6       	ldi	r30, 0x65	; 101
    1ce0:	f3 e2       	ldi	r31, 0x23	; 35
    1ce2:	a6 ee       	ldi	r26, 0xE6	; 230
    1ce4:	b3 e2       	ldi	r27, 0x23	; 35
    1ce6:	01 90       	ld	r0, Z+
    1ce8:	0d 92       	st	X+, r0
    1cea:	8a 95       	dec	r24
    1cec:	e1 f7       	brne	.-8      	; 0x1ce6 <udd_ctrl_interrupt_tc_setup+0x58>
    1cee:	e8 ec       	ldi	r30, 0xC8	; 200
    1cf0:	f4 e0       	ldi	r31, 0x04	; 4
    1cf2:	80 81       	ld	r24, Z
    1cf4:	80 62       	ori	r24, 0x20	; 32
    1cf6:	80 83       	st	Z, r24
    1cf8:	80 81       	ld	r24, Z
    1cfa:	80 62       	ori	r24, 0x20	; 32
    1cfc:	80 83       	st	Z, r24
    1cfe:	e9 db       	rcall	.-2094   	; 0x14d2 <udc_process_setup>
    1d00:	c8 2f       	mov	r28, r24
    1d02:	81 11       	cpse	r24, r1
    1d04:	03 c0       	rjmp	.+6      	; 0x1d0c <udd_ctrl_interrupt_tc_setup+0x7e>
    1d06:	f0 de       	rcall	.-544    	; 0x1ae8 <udd_ctrl_stall_data>
    1d08:	c1 e0       	ldi	r28, 0x01	; 1
    1d0a:	2e c0       	rjmp	.+92     	; 0x1d68 <udd_ctrl_interrupt_tc_setup+0xda>
    1d0c:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <udd_g_ctrlreq>
    1d10:	88 23       	and	r24, r24
    1d12:	6c f4       	brge	.+26     	; 0x1d2e <udd_ctrl_interrupt_tc_setup+0xa0>
    1d14:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
    1d18:	10 92 70 23 	sts	0x2370, r1	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d1c:	10 92 6d 23 	sts	0x236D, r1	; 0x80236d <udd_ctrl_payload_nb_trans>
    1d20:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udd_ep_control_state>
    1d2a:	02 df       	rcall	.-508    	; 0x1b30 <udd_ctrl_in_sent>
    1d2c:	1d c0       	rjmp	.+58     	; 0x1d68 <udd_ctrl_interrupt_tc_setup+0xda>
    1d2e:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    1d32:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    1d36:	89 2b       	or	r24, r25
    1d38:	11 f4       	brne	.+4      	; 0x1d3e <udd_ctrl_interrupt_tc_setup+0xb0>
    1d3a:	e4 de       	rcall	.-568    	; 0x1b04 <udd_ctrl_send_zlp_in>
    1d3c:	15 c0       	rjmp	.+42     	; 0x1d68 <udd_ctrl_interrupt_tc_setup+0xda>
    1d3e:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
    1d42:	10 92 70 23 	sts	0x2370, r1	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d46:	10 92 6d 23 	sts	0x236D, r1	; 0x80236d <udd_ctrl_payload_nb_trans>
    1d4a:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udd_ep_control_state>
    1d54:	e8 e8       	ldi	r30, 0x88	; 136
    1d56:	f3 e2       	ldi	r31, 0x23	; 35
    1d58:	02 e0       	ldi	r16, 0x02	; 2
    1d5a:	06 93       	lac	Z, r16
    1d5c:	00 e2       	ldi	r16, 0x20	; 32
    1d5e:	06 93       	lac	Z, r16
    1d60:	03 c0       	rjmp	.+6      	; 0x1d68 <udd_ctrl_interrupt_tc_setup+0xda>
    1d62:	c0 e0       	ldi	r28, 0x00	; 0
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <udd_ctrl_interrupt_tc_setup+0xda>
    1d66:	c1 e0       	ldi	r28, 0x01	; 1
    1d68:	8c 2f       	mov	r24, r28
    1d6a:	cf 91       	pop	r28
    1d6c:	0f 91       	pop	r16
    1d6e:	08 95       	ret

00001d70 <udd_ep_trans_complet>:
    1d70:	8f 92       	push	r8
    1d72:	9f 92       	push	r9
    1d74:	af 92       	push	r10
    1d76:	bf 92       	push	r11
    1d78:	df 92       	push	r13
    1d7a:	ef 92       	push	r14
    1d7c:	ff 92       	push	r15
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	d8 2e       	mov	r13, r24
    1d88:	67 df       	rcall	.-306    	; 0x1c58 <udd_ep_get_job>
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	cd 2d       	mov	r28, r13
    1d8e:	cf 70       	andi	r28, 0x0F	; 15
    1d90:	d0 e0       	ldi	r29, 0x00	; 0
    1d92:	ce 01       	movw	r24, r28
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	cd 2d       	mov	r28, r13
    1d9a:	0d 2c       	mov	r0, r13
    1d9c:	00 0c       	add	r0, r0
    1d9e:	dd 0b       	sbc	r29, r29
    1da0:	cc 27       	eor	r28, r28
    1da2:	dd 0f       	add	r29, r29
    1da4:	cc 1f       	adc	r28, r28
    1da6:	dd 27       	eor	r29, r29
    1da8:	c8 0f       	add	r28, r24
    1daa:	d9 1f       	adc	r29, r25
    1dac:	ce 01       	movw	r24, r28
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	9c 01       	movw	r18, r24
    1dbc:	28 57       	subi	r18, 0x78	; 120
    1dbe:	3c 4d       	sbci	r19, 0xDC	; 220
    1dc0:	79 01       	movw	r14, r18
    1dc2:	c9 01       	movw	r24, r18
    1dc4:	21 df       	rcall	.-446    	; 0x1c08 <udd_ep_get_size>
    1dc6:	4c 01       	movw	r8, r24
    1dc8:	dd 20       	and	r13, r13
    1dca:	0c f0       	brlt	.+2      	; 0x1dce <udd_ep_trans_complet+0x5e>
    1dcc:	79 c0       	rjmp	.+242    	; 0x1ec0 <udd_ep_trans_complet+0x150>
    1dce:	fe 01       	movw	r30, r28
    1dd0:	ee 0f       	add	r30, r30
    1dd2:	ff 1f       	adc	r31, r31
    1dd4:	ee 0f       	add	r30, r30
    1dd6:	ff 1f       	adc	r31, r31
    1dd8:	ee 0f       	add	r30, r30
    1dda:	ff 1f       	adc	r31, r31
    1ddc:	ec 58       	subi	r30, 0x8C	; 140
    1dde:	fc 4d       	sbci	r31, 0xDC	; 220
    1de0:	22 8d       	ldd	r18, Z+26	; 0x1a
    1de2:	33 8d       	ldd	r19, Z+27	; 0x1b
    1de4:	d8 01       	movw	r26, r16
    1de6:	15 96       	adiw	r26, 0x05	; 5
    1de8:	8d 91       	ld	r24, X+
    1dea:	9c 91       	ld	r25, X
    1dec:	16 97       	sbiw	r26, 0x06	; 6
    1dee:	82 0f       	add	r24, r18
    1df0:	93 1f       	adc	r25, r19
    1df2:	15 96       	adiw	r26, 0x05	; 5
    1df4:	8d 93       	st	X+, r24
    1df6:	9c 93       	st	X, r25
    1df8:	16 97       	sbiw	r26, 0x06	; 6
    1dfa:	13 96       	adiw	r26, 0x03	; 3
    1dfc:	2d 91       	ld	r18, X+
    1dfe:	3c 91       	ld	r19, X
    1e00:	14 97       	sbiw	r26, 0x04	; 4
    1e02:	82 17       	cp	r24, r18
    1e04:	93 07       	cpc	r25, r19
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <udd_ep_trans_complet+0x9a>
    1e08:	45 c0       	rjmp	.+138    	; 0x1e94 <udd_ep_trans_complet+0x124>
    1e0a:	28 1b       	sub	r18, r24
    1e0c:	39 0b       	sbc	r19, r25
    1e0e:	21 15       	cp	r18, r1
    1e10:	b4 e0       	ldi	r27, 0x04	; 4
    1e12:	3b 07       	cpc	r19, r27
    1e14:	38 f0       	brcs	.+14     	; 0x1e24 <udd_ep_trans_complet+0xb4>
    1e16:	2f ef       	ldi	r18, 0xFF	; 255
    1e18:	33 e0       	ldi	r19, 0x03	; 3
    1e1a:	c9 01       	movw	r24, r18
    1e1c:	b4 01       	movw	r22, r8
    1e1e:	13 d6       	rcall	.+3110   	; 0x2a46 <__udivmodhi4>
    1e20:	28 1b       	sub	r18, r24
    1e22:	39 0b       	sbc	r19, r25
    1e24:	f8 01       	movw	r30, r16
    1e26:	80 81       	ld	r24, Z
    1e28:	81 ff       	sbrs	r24, 1
    1e2a:	09 c0       	rjmp	.+18     	; 0x1e3e <udd_ep_trans_complet+0xce>
    1e2c:	c9 01       	movw	r24, r18
    1e2e:	b4 01       	movw	r22, r8
    1e30:	0a d6       	rcall	.+3092   	; 0x2a46 <__udivmodhi4>
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	89 2b       	or	r24, r25
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <udd_ep_trans_complet+0xca>
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	84 2f       	mov	r24, r20
    1e3c:	01 c0       	rjmp	.+2      	; 0x1e40 <udd_ep_trans_complet+0xd0>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	d8 01       	movw	r26, r16
    1e42:	9c 91       	ld	r25, X
    1e44:	80 fb       	bst	r24, 0
    1e46:	91 f9       	bld	r25, 1
    1e48:	9c 93       	st	X, r25
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ee 0f       	add	r30, r30
    1e4e:	ff 1f       	adc	r31, r31
    1e50:	ee 0f       	add	r30, r30
    1e52:	ff 1f       	adc	r31, r31
    1e54:	ee 0f       	add	r30, r30
    1e56:	ff 1f       	adc	r31, r31
    1e58:	ec 58       	subi	r30, 0x8C	; 140
    1e5a:	fc 4d       	sbci	r31, 0xDC	; 220
    1e5c:	12 8e       	std	Z+26, r1	; 0x1a
    1e5e:	13 8e       	std	Z+27, r1	; 0x1b
    1e60:	26 8b       	std	Z+22, r18	; 0x16
    1e62:	37 8b       	std	Z+23, r19	; 0x17
    1e64:	11 96       	adiw	r26, 0x01	; 1
    1e66:	2d 91       	ld	r18, X+
    1e68:	3c 91       	ld	r19, X
    1e6a:	12 97       	sbiw	r26, 0x02	; 2
    1e6c:	15 96       	adiw	r26, 0x05	; 5
    1e6e:	8d 91       	ld	r24, X+
    1e70:	9c 91       	ld	r25, X
    1e72:	16 97       	sbiw	r26, 0x06	; 6
    1e74:	82 0f       	add	r24, r18
    1e76:	93 1f       	adc	r25, r19
    1e78:	cc 0f       	add	r28, r28
    1e7a:	dd 1f       	adc	r29, r29
    1e7c:	cc 0f       	add	r28, r28
    1e7e:	dd 1f       	adc	r29, r29
    1e80:	cc 0f       	add	r28, r28
    1e82:	dd 1f       	adc	r29, r29
    1e84:	c4 57       	subi	r28, 0x74	; 116
    1e86:	dc 4d       	sbci	r29, 0xDC	; 220
    1e88:	88 83       	st	Y, r24
    1e8a:	99 83       	std	Y+1, r25	; 0x01
    1e8c:	f7 01       	movw	r30, r14
    1e8e:	02 e0       	ldi	r16, 0x02	; 2
    1e90:	06 93       	lac	Z, r16
    1e92:	e0 c0       	rjmp	.+448    	; 0x2054 <udd_ep_trans_complet+0x2e4>
    1e94:	d8 01       	movw	r26, r16
    1e96:	8c 91       	ld	r24, X
    1e98:	81 ff       	sbrs	r24, 1
    1e9a:	c9 c0       	rjmp	.+402    	; 0x202e <udd_ep_trans_complet+0x2be>
    1e9c:	8d 7f       	andi	r24, 0xFD	; 253
    1e9e:	8c 93       	st	X, r24
    1ea0:	cc 0f       	add	r28, r28
    1ea2:	dd 1f       	adc	r29, r29
    1ea4:	cc 0f       	add	r28, r28
    1ea6:	dd 1f       	adc	r29, r29
    1ea8:	cc 0f       	add	r28, r28
    1eaa:	dd 1f       	adc	r29, r29
    1eac:	cc 58       	subi	r28, 0x8C	; 140
    1eae:	dc 4d       	sbci	r29, 0xDC	; 220
    1eb0:	1a 8e       	std	Y+26, r1	; 0x1a
    1eb2:	1b 8e       	std	Y+27, r1	; 0x1b
    1eb4:	1e 8a       	std	Y+22, r1	; 0x16
    1eb6:	1f 8a       	std	Y+23, r1	; 0x17
    1eb8:	f7 01       	movw	r30, r14
    1eba:	02 e0       	ldi	r16, 0x02	; 2
    1ebc:	06 93       	lac	Z, r16
    1ebe:	ca c0       	rjmp	.+404    	; 0x2054 <udd_ep_trans_complet+0x2e4>
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	ee 0f       	add	r30, r30
    1ec4:	ff 1f       	adc	r31, r31
    1ec6:	ee 0f       	add	r30, r30
    1ec8:	ff 1f       	adc	r31, r31
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	ec 58       	subi	r30, 0x8C	; 140
    1ed0:	fc 4d       	sbci	r31, 0xDC	; 220
    1ed2:	a6 88       	ldd	r10, Z+22	; 0x16
    1ed4:	b7 88       	ldd	r11, Z+23	; 0x17
    1ed6:	d8 01       	movw	r26, r16
    1ed8:	8c 91       	ld	r24, X
    1eda:	82 ff       	sbrs	r24, 2
    1edc:	19 c0       	rjmp	.+50     	; 0x1f10 <udd_ep_trans_complet+0x1a0>
    1ede:	11 96       	adiw	r26, 0x01	; 1
    1ee0:	ed 91       	ld	r30, X+
    1ee2:	fc 91       	ld	r31, X
    1ee4:	12 97       	sbiw	r26, 0x02	; 2
    1ee6:	15 96       	adiw	r26, 0x05	; 5
    1ee8:	2d 91       	ld	r18, X+
    1eea:	3c 91       	ld	r19, X
    1eec:	16 97       	sbiw	r26, 0x06	; 6
    1eee:	13 96       	adiw	r26, 0x03	; 3
    1ef0:	8d 91       	ld	r24, X+
    1ef2:	9c 91       	ld	r25, X
    1ef4:	14 97       	sbiw	r26, 0x04	; 4
    1ef6:	b4 01       	movw	r22, r8
    1ef8:	a6 d5       	rcall	.+2892   	; 0x2a46 <__udivmodhi4>
    1efa:	b0 e4       	ldi	r27, 0x40	; 64
    1efc:	db 9e       	mul	r13, r27
    1efe:	b0 01       	movw	r22, r0
    1f00:	11 24       	eor	r1, r1
    1f02:	63 52       	subi	r22, 0x23	; 35
    1f04:	7e 4d       	sbci	r23, 0xDE	; 222
    1f06:	ac 01       	movw	r20, r24
    1f08:	cf 01       	movw	r24, r30
    1f0a:	82 0f       	add	r24, r18
    1f0c:	93 1f       	adc	r25, r19
    1f0e:	b7 d5       	rcall	.+2926   	; 0x2a7e <memcpy>
    1f10:	f8 01       	movw	r30, r16
    1f12:	25 81       	ldd	r18, Z+5	; 0x05
    1f14:	36 81       	ldd	r19, Z+6	; 0x06
    1f16:	2a 0d       	add	r18, r10
    1f18:	3b 1d       	adc	r19, r11
    1f1a:	25 83       	std	Z+5, r18	; 0x05
    1f1c:	36 83       	std	Z+6, r19	; 0x06
    1f1e:	83 81       	ldd	r24, Z+3	; 0x03
    1f20:	94 81       	ldd	r25, Z+4	; 0x04
    1f22:	82 17       	cp	r24, r18
    1f24:	93 07       	cpc	r25, r19
    1f26:	68 f4       	brcc	.+26     	; 0x1f42 <udd_ep_trans_complet+0x1d2>
    1f28:	85 83       	std	Z+5, r24	; 0x05
    1f2a:	96 83       	std	Z+6, r25	; 0x06
    1f2c:	cc 0f       	add	r28, r28
    1f2e:	dd 1f       	adc	r29, r29
    1f30:	cc 0f       	add	r28, r28
    1f32:	dd 1f       	adc	r29, r29
    1f34:	cc 0f       	add	r28, r28
    1f36:	dd 1f       	adc	r29, r29
    1f38:	cc 58       	subi	r28, 0x8C	; 140
    1f3a:	dc 4d       	sbci	r29, 0xDC	; 220
    1f3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f3e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f40:	76 c0       	rjmp	.+236    	; 0x202e <udd_ep_trans_complet+0x2be>
    1f42:	fe 01       	movw	r30, r28
    1f44:	ee 0f       	add	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	ee 0f       	add	r30, r30
    1f4a:	ff 1f       	adc	r31, r31
    1f4c:	ee 0f       	add	r30, r30
    1f4e:	ff 1f       	adc	r31, r31
    1f50:	ec 58       	subi	r30, 0x8C	; 140
    1f52:	fc 4d       	sbci	r31, 0xDC	; 220
    1f54:	42 8d       	ldd	r20, Z+26	; 0x1a
    1f56:	53 8d       	ldd	r21, Z+27	; 0x1b
    1f58:	a4 16       	cp	r10, r20
    1f5a:	b5 06       	cpc	r11, r21
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <udd_ep_trans_complet+0x1f0>
    1f5e:	67 c0       	rjmp	.+206    	; 0x202e <udd_ep_trans_complet+0x2be>
    1f60:	28 17       	cp	r18, r24
    1f62:	39 07       	cpc	r19, r25
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <udd_ep_trans_complet+0x1f8>
    1f66:	63 c0       	rjmp	.+198    	; 0x202e <udd_ep_trans_complet+0x2be>
    1f68:	ac 01       	movw	r20, r24
    1f6a:	42 1b       	sub	r20, r18
    1f6c:	53 0b       	sbc	r21, r19
    1f6e:	9a 01       	movw	r18, r20
    1f70:	21 15       	cp	r18, r1
    1f72:	54 e0       	ldi	r21, 0x04	; 4
    1f74:	35 07       	cpc	r19, r21
    1f76:	40 f0       	brcs	.+16     	; 0x1f88 <udd_ep_trans_complet+0x218>
    1f78:	2f ef       	ldi	r18, 0xFF	; 255
    1f7a:	33 e0       	ldi	r19, 0x03	; 3
    1f7c:	c9 01       	movw	r24, r18
    1f7e:	b4 01       	movw	r22, r8
    1f80:	62 d5       	rcall	.+2756   	; 0x2a46 <__udivmodhi4>
    1f82:	28 1b       	sub	r18, r24
    1f84:	39 0b       	sbc	r19, r25
    1f86:	05 c0       	rjmp	.+10     	; 0x1f92 <udd_ep_trans_complet+0x222>
    1f88:	c9 01       	movw	r24, r18
    1f8a:	b4 01       	movw	r22, r8
    1f8c:	5c d5       	rcall	.+2744   	; 0x2a46 <__udivmodhi4>
    1f8e:	28 1b       	sub	r18, r24
    1f90:	39 0b       	sbc	r19, r25
    1f92:	fe 01       	movw	r30, r28
    1f94:	ee 0f       	add	r30, r30
    1f96:	ff 1f       	adc	r31, r31
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	ee 0f       	add	r30, r30
    1f9e:	ff 1f       	adc	r31, r31
    1fa0:	ec 58       	subi	r30, 0x8C	; 140
    1fa2:	fc 4d       	sbci	r31, 0xDC	; 220
    1fa4:	16 8a       	std	Z+22, r1	; 0x16
    1fa6:	17 8a       	std	Z+23, r1	; 0x17
    1fa8:	28 15       	cp	r18, r8
    1faa:	39 05       	cpc	r19, r9
    1fac:	00 f5       	brcc	.+64     	; 0x1fee <udd_ep_trans_complet+0x27e>
    1fae:	d8 01       	movw	r26, r16
    1fb0:	8c 91       	ld	r24, X
    1fb2:	84 60       	ori	r24, 0x04	; 4
    1fb4:	8c 93       	st	X, r24
    1fb6:	b0 e4       	ldi	r27, 0x40	; 64
    1fb8:	db 9e       	mul	r13, r27
    1fba:	c0 01       	movw	r24, r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	83 52       	subi	r24, 0x23	; 35
    1fc0:	9e 4d       	sbci	r25, 0xDE	; 222
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	ee 0f       	add	r30, r30
    1fca:	ff 1f       	adc	r31, r31
    1fcc:	ee 0f       	add	r30, r30
    1fce:	ff 1f       	adc	r31, r31
    1fd0:	e4 57       	subi	r30, 0x74	; 116
    1fd2:	fc 4d       	sbci	r31, 0xDC	; 220
    1fd4:	80 83       	st	Z, r24
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	cc 0f       	add	r28, r28
    1fda:	dd 1f       	adc	r29, r29
    1fdc:	cc 0f       	add	r28, r28
    1fde:	dd 1f       	adc	r29, r29
    1fe0:	cc 0f       	add	r28, r28
    1fe2:	dd 1f       	adc	r29, r29
    1fe4:	cc 58       	subi	r28, 0x8C	; 140
    1fe6:	dc 4d       	sbci	r29, 0xDC	; 220
    1fe8:	8a 8e       	std	Y+26, r8	; 0x1a
    1fea:	9b 8e       	std	Y+27, r9	; 0x1b
    1fec:	1c c0       	rjmp	.+56     	; 0x2026 <udd_ep_trans_complet+0x2b6>
    1fee:	f8 01       	movw	r30, r16
    1ff0:	41 81       	ldd	r20, Z+1	; 0x01
    1ff2:	52 81       	ldd	r21, Z+2	; 0x02
    1ff4:	85 81       	ldd	r24, Z+5	; 0x05
    1ff6:	96 81       	ldd	r25, Z+6	; 0x06
    1ff8:	84 0f       	add	r24, r20
    1ffa:	95 1f       	adc	r25, r21
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	ee 0f       	add	r30, r30
    2004:	ff 1f       	adc	r31, r31
    2006:	ee 0f       	add	r30, r30
    2008:	ff 1f       	adc	r31, r31
    200a:	e4 57       	subi	r30, 0x74	; 116
    200c:	fc 4d       	sbci	r31, 0xDC	; 220
    200e:	80 83       	st	Z, r24
    2010:	91 83       	std	Z+1, r25	; 0x01
    2012:	cc 0f       	add	r28, r28
    2014:	dd 1f       	adc	r29, r29
    2016:	cc 0f       	add	r28, r28
    2018:	dd 1f       	adc	r29, r29
    201a:	cc 0f       	add	r28, r28
    201c:	dd 1f       	adc	r29, r29
    201e:	cc 58       	subi	r28, 0x8C	; 140
    2020:	dc 4d       	sbci	r29, 0xDC	; 220
    2022:	2a 8f       	std	Y+26, r18	; 0x1a
    2024:	3b 8f       	std	Y+27, r19	; 0x1b
    2026:	f7 01       	movw	r30, r14
    2028:	02 e0       	ldi	r16, 0x02	; 2
    202a:	06 93       	lac	Z, r16
    202c:	13 c0       	rjmp	.+38     	; 0x2054 <udd_ep_trans_complet+0x2e4>
    202e:	d8 01       	movw	r26, r16
    2030:	8c 91       	ld	r24, X
    2032:	80 ff       	sbrs	r24, 0
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <udd_ep_trans_complet+0x2e4>
    2036:	8e 7f       	andi	r24, 0xFE	; 254
    2038:	8c 93       	st	X, r24
    203a:	17 96       	adiw	r26, 0x07	; 7
    203c:	ed 91       	ld	r30, X+
    203e:	fc 91       	ld	r31, X
    2040:	18 97       	sbiw	r26, 0x08	; 8
    2042:	30 97       	sbiw	r30, 0x00	; 0
    2044:	39 f0       	breq	.+14     	; 0x2054 <udd_ep_trans_complet+0x2e4>
    2046:	15 96       	adiw	r26, 0x05	; 5
    2048:	6d 91       	ld	r22, X+
    204a:	7c 91       	ld	r23, X
    204c:	16 97       	sbiw	r26, 0x06	; 6
    204e:	4d 2d       	mov	r20, r13
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	19 95       	eicall
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	1f 91       	pop	r17
    205a:	0f 91       	pop	r16
    205c:	ff 90       	pop	r15
    205e:	ef 90       	pop	r14
    2060:	df 90       	pop	r13
    2062:	bf 90       	pop	r11
    2064:	af 90       	pop	r10
    2066:	9f 90       	pop	r9
    2068:	8f 90       	pop	r8
    206a:	08 95       	ret

0000206c <udd_attach>:
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	1f 92       	push	r1
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	8f b7       	in	r24, 0x3f	; 63
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	f8 94       	cli
    207e:	19 81       	ldd	r17, Y+1	; 0x01
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	d5 dc       	rcall	.-1622   	; 0x1a2e <udd_sleep_mode>
    2084:	ea ec       	ldi	r30, 0xCA	; 202
    2086:	f4 e0       	ldi	r31, 0x04	; 4
    2088:	80 e4       	ldi	r24, 0x40	; 64
    208a:	80 83       	st	Z, r24
    208c:	80 e2       	ldi	r24, 0x20	; 32
    208e:	80 83       	st	Z, r24
    2090:	e1 ec       	ldi	r30, 0xC1	; 193
    2092:	f4 e0       	ldi	r31, 0x04	; 4
    2094:	80 81       	ld	r24, Z
    2096:	81 60       	ori	r24, 0x01	; 1
    2098:	80 83       	st	Z, r24
    209a:	a9 ec       	ldi	r26, 0xC9	; 201
    209c:	b4 e0       	ldi	r27, 0x04	; 4
    209e:	8c 91       	ld	r24, X
    20a0:	82 60       	ori	r24, 0x02	; 2
    20a2:	8c 93       	st	X, r24
    20a4:	e8 ec       	ldi	r30, 0xC8	; 200
    20a6:	f4 e0       	ldi	r31, 0x04	; 4
    20a8:	80 81       	ld	r24, Z
    20aa:	80 64       	ori	r24, 0x40	; 64
    20ac:	80 83       	st	Z, r24
    20ae:	8c 91       	ld	r24, X
    20b0:	81 60       	ori	r24, 0x01	; 1
    20b2:	8c 93       	st	X, r24
    20b4:	80 81       	ld	r24, Z
    20b6:	80 68       	ori	r24, 0x80	; 128
    20b8:	80 83       	st	Z, r24
    20ba:	1f bf       	out	0x3f, r17	; 63
    20bc:	0f 90       	pop	r0
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	1f 91       	pop	r17
    20c4:	08 95       	ret

000020c6 <udd_enable>:
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	1f 92       	push	r1
    20d0:	1f 92       	push	r1
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	00 e6       	ldi	r16, 0x60	; 96
    20d8:	10 e0       	ldi	r17, 0x00	; 0
    20da:	f8 01       	movw	r30, r16
    20dc:	10 82       	st	Z, r1
    20de:	80 e3       	ldi	r24, 0x30	; 48
    20e0:	0e 94 08 07 	call	0xe10	; 0xe10 <sysclk_enable_usb>
    20e4:	e0 ec       	ldi	r30, 0xC0	; 192
    20e6:	f4 e0       	ldi	r31, 0x04	; 4
    20e8:	80 81       	ld	r24, Z
    20ea:	80 64       	ori	r24, 0x40	; 64
    20ec:	80 83       	st	Z, r24
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	f8 01       	movw	r30, r16
    20f2:	80 83       	st	Z, r24
    20f4:	8f b7       	in	r24, 0x3f	; 63
    20f6:	8a 83       	std	Y+2, r24	; 0x02
    20f8:	f8 94       	cli
    20fa:	1a 81       	ldd	r17, Y+2	; 0x02
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	fc 01       	movw	r30, r24
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	ec 58       	subi	r30, 0x8C	; 140
    2110:	fc 4d       	sbci	r31, 0xDC	; 220
    2112:	15 8a       	std	Z+21, r1	; 0x15
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	8a 30       	cpi	r24, 0x0A	; 10
    2118:	91 05       	cpc	r25, r1
    211a:	91 f7       	brne	.-28     	; 0x2100 <udd_enable+0x3a>
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	fc 01       	movw	r30, r24
    2122:	ee 0f       	add	r30, r30
    2124:	ff 1f       	adc	r31, r31
    2126:	ee 0f       	add	r30, r30
    2128:	ff 1f       	adc	r31, r31
    212a:	ee 0f       	add	r30, r30
    212c:	ff 1f       	adc	r31, r31
    212e:	e8 0f       	add	r30, r24
    2130:	f9 1f       	adc	r31, r25
    2132:	e3 5e       	subi	r30, 0xE3	; 227
    2134:	fc 4d       	sbci	r31, 0xDC	; 220
    2136:	20 81       	ld	r18, Z
    2138:	2e 7f       	andi	r18, 0xFE	; 254
    213a:	20 83       	st	Z, r18
    213c:	01 96       	adiw	r24, 0x01	; 1
    213e:	88 30       	cpi	r24, 0x08	; 8
    2140:	91 05       	cpc	r25, r1
    2142:	71 f7       	brne	.-36     	; 0x2120 <udd_enable+0x5a>
    2144:	6a e1       	ldi	r22, 0x1A	; 26
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	61 dc       	rcall	.-1854   	; 0x1a0e <nvm_read_byte>
    214c:	8f 3f       	cpi	r24, 0xFF	; 255
    214e:	19 f0       	breq	.+6      	; 0x2156 <udd_enable+0x90>
    2150:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    2154:	03 c0       	rjmp	.+6      	; 0x215c <udd_enable+0x96>
    2156:	8f e1       	ldi	r24, 0x1F	; 31
    2158:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    215c:	6b e1       	ldi	r22, 0x1B	; 27
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	55 dc       	rcall	.-1878   	; 0x1a0e <nvm_read_byte>
    2164:	8f 3f       	cpi	r24, 0xFF	; 255
    2166:	19 f0       	breq	.+6      	; 0x216e <udd_enable+0xa8>
    2168:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    216c:	03 c0       	rjmp	.+6      	; 0x2174 <udd_enable+0xae>
    216e:	8f e1       	ldi	r24, 0x1F	; 31
    2170:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    2174:	e0 ec       	ldi	r30, 0xC0	; 192
    2176:	f4 e0       	ldi	r31, 0x04	; 4
    2178:	80 81       	ld	r24, Z
    217a:	84 60       	ori	r24, 0x04	; 4
    217c:	80 83       	st	Z, r24
    217e:	80 81       	ld	r24, Z
    2180:	80 68       	ori	r24, 0x80	; 128
    2182:	80 83       	st	Z, r24
    2184:	80 81       	ld	r24, Z
    2186:	80 61       	ori	r24, 0x10	; 16
    2188:	80 83       	st	Z, r24
    218a:	88 e8       	ldi	r24, 0x88	; 136
    218c:	93 e2       	ldi	r25, 0x23	; 35
    218e:	86 83       	std	Z+6, r24	; 0x06
    2190:	97 83       	std	Z+7, r25	; 0x07
    2192:	80 81       	ld	r24, Z
    2194:	80 62       	ori	r24, 0x20	; 32
    2196:	80 83       	st	Z, r24
    2198:	8f ef       	ldi	r24, 0xFF	; 255
    219a:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    219e:	e8 ec       	ldi	r30, 0xC8	; 200
    21a0:	f4 e0       	ldi	r31, 0x04	; 4
    21a2:	80 81       	ld	r24, Z
    21a4:	81 60       	ori	r24, 0x01	; 1
    21a6:	80 83       	st	Z, r24
    21a8:	10 92 dc 23 	sts	0x23DC, r1	; 0x8023dc <udd_b_idle>
    21ac:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <sleepmgr_locks+0x5>
    21b0:	8f 3f       	cpi	r24, 0xFF	; 255
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <udd_enable+0xf0>
    21b4:	ff cf       	rjmp	.-2      	; 0x21b4 <udd_enable+0xee>
    21b6:	8f b7       	in	r24, 0x3f	; 63
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	f8 94       	cli
    21bc:	99 81       	ldd	r25, Y+1	; 0x01
    21be:	e0 ee       	ldi	r30, 0xE0	; 224
    21c0:	f3 e2       	ldi	r31, 0x23	; 35
    21c2:	85 81       	ldd	r24, Z+5	; 0x05
    21c4:	8f 5f       	subi	r24, 0xFF	; 255
    21c6:	85 83       	std	Z+5, r24	; 0x05
    21c8:	9f bf       	out	0x3f, r25	; 63
    21ca:	50 df       	rcall	.-352    	; 0x206c <udd_attach>
    21cc:	1f bf       	out	0x3f, r17	; 63
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	1f 91       	pop	r17
    21d8:	0f 91       	pop	r16
    21da:	08 95       	ret

000021dc <udd_set_address>:
    21dc:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    21e0:	08 95       	ret

000021e2 <udd_getaddress>:
    21e2:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    21e6:	08 95       	ret

000021e8 <udd_set_setup_payload>:
    21e8:	e6 ee       	ldi	r30, 0xE6	; 230
    21ea:	f3 e2       	ldi	r31, 0x23	; 35
    21ec:	80 87       	std	Z+8, r24	; 0x08
    21ee:	91 87       	std	Z+9, r25	; 0x09
    21f0:	62 87       	std	Z+10, r22	; 0x0a
    21f2:	73 87       	std	Z+11, r23	; 0x0b
    21f4:	08 95       	ret

000021f6 <udd_ep_alloc>:
    21f6:	28 2f       	mov	r18, r24
    21f8:	2f 70       	andi	r18, 0x0F	; 15
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	22 0f       	add	r18, r18
    21fe:	33 1f       	adc	r19, r19
    2200:	08 2e       	mov	r0, r24
    2202:	00 0c       	add	r0, r0
    2204:	99 0b       	sbc	r25, r25
    2206:	88 27       	eor	r24, r24
    2208:	99 0f       	add	r25, r25
    220a:	88 1f       	adc	r24, r24
    220c:	99 27       	eor	r25, r25
    220e:	82 0f       	add	r24, r18
    2210:	93 1f       	adc	r25, r19
    2212:	fc 01       	movw	r30, r24
    2214:	ee 0f       	add	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	ee 0f       	add	r30, r30
    221e:	ff 1f       	adc	r31, r31
    2220:	ec 58       	subi	r30, 0x8C	; 140
    2222:	fc 4d       	sbci	r31, 0xDC	; 220
    2224:	25 89       	ldd	r18, Z+21	; 0x15
    2226:	20 7c       	andi	r18, 0xC0	; 192
    2228:	09 f0       	breq	.+2      	; 0x222c <udd_ep_alloc+0x36>
    222a:	69 c0       	rjmp	.+210    	; 0x22fe <udd_ep_alloc+0x108>
    222c:	63 70       	andi	r22, 0x03	; 3
    222e:	61 30       	cpi	r22, 0x01	; 1
    2230:	11 f0       	breq	.+4      	; 0x2236 <udd_ep_alloc+0x40>
    2232:	18 f4       	brcc	.+6      	; 0x223a <udd_ep_alloc+0x44>
    2234:	04 c0       	rjmp	.+8      	; 0x223e <udd_ep_alloc+0x48>
    2236:	60 ec       	ldi	r22, 0xC0	; 192
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <udd_ep_alloc+0x4a>
    223a:	60 e8       	ldi	r22, 0x80	; 128
    223c:	01 c0       	rjmp	.+2      	; 0x2240 <udd_ep_alloc+0x4a>
    223e:	60 e4       	ldi	r22, 0x40	; 64
    2240:	40 38       	cpi	r20, 0x80	; 128
    2242:	51 05       	cpc	r21, r1
    2244:	e9 f0       	breq	.+58     	; 0x2280 <udd_ep_alloc+0x8a>
    2246:	50 f4       	brcc	.+20     	; 0x225c <udd_ep_alloc+0x66>
    2248:	40 32       	cpi	r20, 0x20	; 32
    224a:	51 05       	cpc	r21, r1
    224c:	a9 f0       	breq	.+42     	; 0x2278 <udd_ep_alloc+0x82>
    224e:	40 34       	cpi	r20, 0x40	; 64
    2250:	51 05       	cpc	r21, r1
    2252:	a1 f0       	breq	.+40     	; 0x227c <udd_ep_alloc+0x86>
    2254:	40 31       	cpi	r20, 0x10	; 16
    2256:	51 05       	cpc	r21, r1
    2258:	d9 f4       	brne	.+54     	; 0x2290 <udd_ep_alloc+0x9a>
    225a:	0c c0       	rjmp	.+24     	; 0x2274 <udd_ep_alloc+0x7e>
    225c:	41 15       	cp	r20, r1
    225e:	22 e0       	ldi	r18, 0x02	; 2
    2260:	52 07       	cpc	r21, r18
    2262:	91 f0       	breq	.+36     	; 0x2288 <udd_ep_alloc+0x92>
    2264:	4f 3f       	cpi	r20, 0xFF	; 255
    2266:	23 e0       	ldi	r18, 0x03	; 3
    2268:	52 07       	cpc	r21, r18
    226a:	81 f0       	breq	.+32     	; 0x228c <udd_ep_alloc+0x96>
    226c:	41 15       	cp	r20, r1
    226e:	51 40       	sbci	r21, 0x01	; 1
    2270:	79 f4       	brne	.+30     	; 0x2290 <udd_ep_alloc+0x9a>
    2272:	08 c0       	rjmp	.+16     	; 0x2284 <udd_ep_alloc+0x8e>
    2274:	21 e0       	ldi	r18, 0x01	; 1
    2276:	0d c0       	rjmp	.+26     	; 0x2292 <udd_ep_alloc+0x9c>
    2278:	22 e0       	ldi	r18, 0x02	; 2
    227a:	0b c0       	rjmp	.+22     	; 0x2292 <udd_ep_alloc+0x9c>
    227c:	23 e0       	ldi	r18, 0x03	; 3
    227e:	09 c0       	rjmp	.+18     	; 0x2292 <udd_ep_alloc+0x9c>
    2280:	24 e0       	ldi	r18, 0x04	; 4
    2282:	07 c0       	rjmp	.+14     	; 0x2292 <udd_ep_alloc+0x9c>
    2284:	25 e0       	ldi	r18, 0x05	; 5
    2286:	05 c0       	rjmp	.+10     	; 0x2292 <udd_ep_alloc+0x9c>
    2288:	26 e0       	ldi	r18, 0x06	; 6
    228a:	03 c0       	rjmp	.+6      	; 0x2292 <udd_ep_alloc+0x9c>
    228c:	27 e0       	ldi	r18, 0x07	; 7
    228e:	01 c0       	rjmp	.+2      	; 0x2292 <udd_ep_alloc+0x9c>
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	fc 01       	movw	r30, r24
    2294:	ee 0f       	add	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	ee 0f       	add	r30, r30
    229a:	ff 1f       	adc	r31, r31
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	ec 58       	subi	r30, 0x8C	; 140
    22a2:	fc 4d       	sbci	r31, 0xDC	; 220
    22a4:	15 8a       	std	Z+21, r1	; 0x15
    22a6:	36 e0       	ldi	r19, 0x06	; 6
    22a8:	34 8b       	std	Z+20, r19	; 0x14
    22aa:	26 2b       	or	r18, r22
    22ac:	25 8b       	std	Z+21, r18	; 0x15
    22ae:	fc 01       	movw	r30, r24
    22b0:	ee 0f       	add	r30, r30
    22b2:	ff 1f       	adc	r31, r31
    22b4:	ee 0f       	add	r30, r30
    22b6:	ff 1f       	adc	r31, r31
    22b8:	ee 0f       	add	r30, r30
    22ba:	ff 1f       	adc	r31, r31
    22bc:	ec 58       	subi	r30, 0x8C	; 140
    22be:	fc 4d       	sbci	r31, 0xDC	; 220
    22c0:	25 89       	ldd	r18, Z+21	; 0x15
    22c2:	20 7c       	andi	r18, 0xC0	; 192
    22c4:	20 3c       	cpi	r18, 0xC0	; 192
    22c6:	69 f4       	brne	.+26     	; 0x22e2 <udd_ep_alloc+0xec>
    22c8:	fc 01       	movw	r30, r24
    22ca:	ee 0f       	add	r30, r30
    22cc:	ff 1f       	adc	r31, r31
    22ce:	ee 0f       	add	r30, r30
    22d0:	ff 1f       	adc	r31, r31
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	ec 58       	subi	r30, 0x8C	; 140
    22d8:	fc 4d       	sbci	r31, 0xDC	; 220
    22da:	25 89       	ldd	r18, Z+21	; 0x15
    22dc:	27 70       	andi	r18, 0x07	; 7
    22de:	27 30       	cpi	r18, 0x07	; 7
    22e0:	81 f0       	breq	.+32     	; 0x2302 <udd_ep_alloc+0x10c>
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	88 0f       	add	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	fc 01       	movw	r30, r24
    22f0:	ec 58       	subi	r30, 0x8C	; 140
    22f2:	fc 4d       	sbci	r31, 0xDC	; 220
    22f4:	85 89       	ldd	r24, Z+21	; 0x15
    22f6:	80 62       	ori	r24, 0x20	; 32
    22f8:	85 8b       	std	Z+21, r24	; 0x15
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	08 95       	ret
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	08 95       	ret
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	08 95       	ret

00002306 <udd_ep_is_halted>:
    2306:	e8 2f       	mov	r30, r24
    2308:	ef 70       	andi	r30, 0x0F	; 15
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	ee 0f       	add	r30, r30
    230e:	ff 1f       	adc	r31, r31
    2310:	08 2e       	mov	r0, r24
    2312:	00 0c       	add	r0, r0
    2314:	99 0b       	sbc	r25, r25
    2316:	88 27       	eor	r24, r24
    2318:	99 0f       	add	r25, r25
    231a:	88 1f       	adc	r24, r24
    231c:	99 27       	eor	r25, r25
    231e:	e8 0f       	add	r30, r24
    2320:	f9 1f       	adc	r31, r25
    2322:	ee 0f       	add	r30, r30
    2324:	ff 1f       	adc	r31, r31
    2326:	ee 0f       	add	r30, r30
    2328:	ff 1f       	adc	r31, r31
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	ec 58       	subi	r30, 0x8C	; 140
    2330:	fc 4d       	sbci	r31, 0xDC	; 220
    2332:	85 89       	ldd	r24, Z+21	; 0x15
    2334:	82 fb       	bst	r24, 2
    2336:	88 27       	eor	r24, r24
    2338:	80 f9       	bld	r24, 0
    233a:	08 95       	ret

0000233c <udd_ep_clear_halt>:
    233c:	0f 93       	push	r16
    233e:	28 2f       	mov	r18, r24
    2340:	2f 70       	andi	r18, 0x0F	; 15
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	a9 01       	movw	r20, r18
    2346:	44 0f       	add	r20, r20
    2348:	55 1f       	adc	r21, r21
    234a:	28 2f       	mov	r18, r24
    234c:	08 2e       	mov	r0, r24
    234e:	00 0c       	add	r0, r0
    2350:	33 0b       	sbc	r19, r19
    2352:	22 27       	eor	r18, r18
    2354:	33 0f       	add	r19, r19
    2356:	22 1f       	adc	r18, r18
    2358:	33 27       	eor	r19, r19
    235a:	24 0f       	add	r18, r20
    235c:	35 1f       	adc	r19, r21
    235e:	a9 01       	movw	r20, r18
    2360:	44 0f       	add	r20, r20
    2362:	55 1f       	adc	r21, r21
    2364:	44 0f       	add	r20, r20
    2366:	55 1f       	adc	r21, r21
    2368:	44 0f       	add	r20, r20
    236a:	55 1f       	adc	r21, r21
    236c:	fa 01       	movw	r30, r20
    236e:	e8 57       	subi	r30, 0x78	; 120
    2370:	fc 4d       	sbci	r31, 0xDC	; 220
    2372:	01 e0       	ldi	r16, 0x01	; 1
    2374:	06 93       	lac	Z, r16
    2376:	fa 01       	movw	r30, r20
    2378:	ec 58       	subi	r30, 0x8C	; 140
    237a:	fc 4d       	sbci	r31, 0xDC	; 220
    237c:	95 89       	ldd	r25, Z+21	; 0x15
    237e:	92 ff       	sbrs	r25, 2
    2380:	11 c0       	rjmp	.+34     	; 0x23a4 <udd_ep_clear_halt+0x68>
    2382:	fa 01       	movw	r30, r20
    2384:	ec 58       	subi	r30, 0x8C	; 140
    2386:	fc 4d       	sbci	r31, 0xDC	; 220
    2388:	95 89       	ldd	r25, Z+21	; 0x15
    238a:	9b 7f       	andi	r25, 0xFB	; 251
    238c:	95 8b       	std	Z+21, r25	; 0x15
    238e:	64 dc       	rcall	.-1848   	; 0x1c58 <udd_ep_get_job>
    2390:	fc 01       	movw	r30, r24
    2392:	80 81       	ld	r24, Z
    2394:	80 ff       	sbrs	r24, 0
    2396:	06 c0       	rjmp	.+12     	; 0x23a4 <udd_ep_clear_halt+0x68>
    2398:	8e 7f       	andi	r24, 0xFE	; 254
    239a:	80 83       	st	Z, r24
    239c:	07 80       	ldd	r0, Z+7	; 0x07
    239e:	f0 85       	ldd	r31, Z+8	; 0x08
    23a0:	e0 2d       	mov	r30, r0
    23a2:	19 95       	eicall
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	0f 91       	pop	r16
    23a8:	08 95       	ret

000023aa <udd_ep_run>:
    23aa:	6f 92       	push	r6
    23ac:	7f 92       	push	r7
    23ae:	8f 92       	push	r8
    23b0:	9f 92       	push	r9
    23b2:	af 92       	push	r10
    23b4:	bf 92       	push	r11
    23b6:	cf 92       	push	r12
    23b8:	df 92       	push	r13
    23ba:	ef 92       	push	r14
    23bc:	ff 92       	push	r15
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	1f 92       	push	r1
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	78 2e       	mov	r7, r24
    23ce:	66 2e       	mov	r6, r22
    23d0:	4a 01       	movw	r8, r20
    23d2:	59 01       	movw	r10, r18
    23d4:	41 dc       	rcall	.-1918   	; 0x1c58 <udd_ep_get_job>
    23d6:	6c 01       	movw	r12, r24
    23d8:	27 2d       	mov	r18, r7
    23da:	87 2d       	mov	r24, r7
    23dc:	8f 70       	andi	r24, 0x0F	; 15
    23de:	e8 2e       	mov	r14, r24
    23e0:	f1 2c       	mov	r15, r1
    23e2:	c7 01       	movw	r24, r14
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	e7 2c       	mov	r14, r7
    23ea:	07 2c       	mov	r0, r7
    23ec:	00 0c       	add	r0, r0
    23ee:	ff 08       	sbc	r15, r15
    23f0:	ee 24       	eor	r14, r14
    23f2:	ff 0c       	add	r15, r15
    23f4:	ee 1c       	adc	r14, r14
    23f6:	ff 24       	eor	r15, r15
    23f8:	e8 0e       	add	r14, r24
    23fa:	f9 1e       	adc	r15, r25
    23fc:	f7 01       	movw	r30, r14
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	ee 0f       	add	r30, r30
    2404:	ff 1f       	adc	r31, r31
    2406:	ee 0f       	add	r30, r30
    2408:	ff 1f       	adc	r31, r31
    240a:	ec 58       	subi	r30, 0x8C	; 140
    240c:	fc 4d       	sbci	r31, 0xDC	; 220
    240e:	85 89       	ldd	r24, Z+21	; 0x15
    2410:	80 7c       	andi	r24, 0xC0	; 192
    2412:	09 f4       	brne	.+2      	; 0x2416 <udd_ep_run+0x6c>
    2414:	81 c0       	rjmp	.+258    	; 0x2518 <udd_ep_run+0x16e>
    2416:	f7 01       	movw	r30, r14
    2418:	ee 0f       	add	r30, r30
    241a:	ff 1f       	adc	r31, r31
    241c:	ee 0f       	add	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	ee 0f       	add	r30, r30
    2422:	ff 1f       	adc	r31, r31
    2424:	ec 58       	subi	r30, 0x8C	; 140
    2426:	fc 4d       	sbci	r31, 0xDC	; 220
    2428:	85 89       	ldd	r24, Z+21	; 0x15
    242a:	80 7c       	andi	r24, 0xC0	; 192
    242c:	80 3c       	cpi	r24, 0xC0	; 192
    242e:	61 f0       	breq	.+24     	; 0x2448 <udd_ep_run+0x9e>
    2430:	f7 01       	movw	r30, r14
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	ec 58       	subi	r30, 0x8C	; 140
    2440:	fc 4d       	sbci	r31, 0xDC	; 220
    2442:	85 89       	ldd	r24, Z+21	; 0x15
    2444:	82 fd       	sbrc	r24, 2
    2446:	6a c0       	rjmp	.+212    	; 0x251c <udd_ep_run+0x172>
    2448:	8f b7       	in	r24, 0x3f	; 63
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	f8 94       	cli
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	f6 01       	movw	r30, r12
    2452:	90 81       	ld	r25, Z
    2454:	90 ff       	sbrs	r25, 0
    2456:	03 c0       	rjmp	.+6      	; 0x245e <udd_ep_run+0xb4>
    2458:	8f bf       	out	0x3f, r24	; 63
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	60 c0       	rjmp	.+192    	; 0x251e <udd_ep_run+0x174>
    245e:	f6 01       	movw	r30, r12
    2460:	90 81       	ld	r25, Z
    2462:	91 60       	ori	r25, 0x01	; 1
    2464:	90 83       	st	Z, r25
    2466:	8f bf       	out	0x3f, r24	; 63
    2468:	81 82       	std	Z+1, r8	; 0x01
    246a:	92 82       	std	Z+2, r9	; 0x02
    246c:	a3 82       	std	Z+3, r10	; 0x03
    246e:	b4 82       	std	Z+4, r11	; 0x04
    2470:	15 82       	std	Z+5, r1	; 0x05
    2472:	16 82       	std	Z+6, r1	; 0x06
    2474:	07 83       	std	Z+7, r16	; 0x07
    2476:	10 87       	std	Z+8, r17	; 0x08
    2478:	61 10       	cpse	r6, r1
    247a:	06 c0       	rjmp	.+12     	; 0x2488 <udd_ep_run+0xde>
    247c:	91 e0       	ldi	r25, 0x01	; 1
    247e:	a1 14       	cp	r10, r1
    2480:	b1 04       	cpc	r11, r1
    2482:	19 f0       	breq	.+6      	; 0x248a <udd_ep_run+0xe0>
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	01 c0       	rjmp	.+2      	; 0x248a <udd_ep_run+0xe0>
    2488:	91 e0       	ldi	r25, 0x01	; 1
    248a:	f6 01       	movw	r30, r12
    248c:	80 81       	ld	r24, Z
    248e:	90 fb       	bst	r25, 0
    2490:	81 f9       	bld	r24, 1
    2492:	8b 7f       	andi	r24, 0xFB	; 251
    2494:	80 83       	st	Z, r24
    2496:	22 23       	and	r18, r18
    2498:	64 f4       	brge	.+24     	; 0x24b2 <udd_ep_run+0x108>
    249a:	f7 01       	movw	r30, r14
    249c:	ee 0f       	add	r30, r30
    249e:	ff 1f       	adc	r31, r31
    24a0:	ee 0f       	add	r30, r30
    24a2:	ff 1f       	adc	r31, r31
    24a4:	ee 0f       	add	r30, r30
    24a6:	ff 1f       	adc	r31, r31
    24a8:	ec 58       	subi	r30, 0x8C	; 140
    24aa:	fc 4d       	sbci	r31, 0xDC	; 220
    24ac:	12 8e       	std	Z+26, r1	; 0x1a
    24ae:	13 8e       	std	Z+27, r1	; 0x1b
    24b0:	2f c0       	rjmp	.+94     	; 0x2510 <udd_ep_run+0x166>
    24b2:	f7 01       	movw	r30, r14
    24b4:	ee 0f       	add	r30, r30
    24b6:	ff 1f       	adc	r31, r31
    24b8:	ee 0f       	add	r30, r30
    24ba:	ff 1f       	adc	r31, r31
    24bc:	ee 0f       	add	r30, r30
    24be:	ff 1f       	adc	r31, r31
    24c0:	ec 58       	subi	r30, 0x8C	; 140
    24c2:	fc 4d       	sbci	r31, 0xDC	; 220
    24c4:	85 89       	ldd	r24, Z+21	; 0x15
    24c6:	80 7c       	andi	r24, 0xC0	; 192
    24c8:	80 3c       	cpi	r24, 0xC0	; 192
    24ca:	a9 f4       	brne	.+42     	; 0x24f6 <udd_ep_run+0x14c>
    24cc:	c7 01       	movw	r24, r14
    24ce:	88 0f       	add	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	88 57       	subi	r24, 0x78	; 120
    24dc:	9c 4d       	sbci	r25, 0xDC	; 220
    24de:	94 db       	rcall	.-2264   	; 0x1c08 <udd_ep_get_size>
    24e0:	bc 01       	movw	r22, r24
    24e2:	c5 01       	movw	r24, r10
    24e4:	b0 d2       	rcall	.+1376   	; 0x2a46 <__udivmodhi4>
    24e6:	89 2b       	or	r24, r25
    24e8:	31 f0       	breq	.+12     	; 0x24f6 <udd_ep_run+0x14c>
    24ea:	f6 01       	movw	r30, r12
    24ec:	80 81       	ld	r24, Z
    24ee:	8e 7f       	andi	r24, 0xFE	; 254
    24f0:	80 83       	st	Z, r24
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	14 c0       	rjmp	.+40     	; 0x251e <udd_ep_run+0x174>
    24f6:	f7 01       	movw	r30, r14
    24f8:	ee 0f       	add	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	ee 0f       	add	r30, r30
    24fe:	ff 1f       	adc	r31, r31
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	ec 58       	subi	r30, 0x8C	; 140
    2506:	fc 4d       	sbci	r31, 0xDC	; 220
    2508:	16 8a       	std	Z+22, r1	; 0x16
    250a:	17 8a       	std	Z+23, r1	; 0x17
    250c:	12 8e       	std	Z+26, r1	; 0x1a
    250e:	13 8e       	std	Z+27, r1	; 0x1b
    2510:	87 2d       	mov	r24, r7
    2512:	2e dc       	rcall	.-1956   	; 0x1d70 <udd_ep_trans_complet>
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	03 c0       	rjmp	.+6      	; 0x251e <udd_ep_run+0x174>
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	01 c0       	rjmp	.+2      	; 0x251e <udd_ep_run+0x174>
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	0f 90       	pop	r0
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	ff 90       	pop	r15
    252a:	ef 90       	pop	r14
    252c:	df 90       	pop	r13
    252e:	cf 90       	pop	r12
    2530:	bf 90       	pop	r11
    2532:	af 90       	pop	r10
    2534:	9f 90       	pop	r9
    2536:	8f 90       	pop	r8
    2538:	7f 90       	pop	r7
    253a:	6f 90       	pop	r6
    253c:	08 95       	ret

0000253e <udd_ep_abort>:
    253e:	ff 92       	push	r15
    2540:	0f 93       	push	r16
    2542:	1f 93       	push	r17
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	18 2f       	mov	r17, r24
    254a:	c8 2f       	mov	r28, r24
    254c:	cf 70       	andi	r28, 0x0F	; 15
    254e:	d0 e0       	ldi	r29, 0x00	; 0
    2550:	ce 01       	movw	r24, r28
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	c1 2f       	mov	r28, r17
    2558:	01 2e       	mov	r0, r17
    255a:	00 0c       	add	r0, r0
    255c:	dd 0b       	sbc	r29, r29
    255e:	cc 27       	eor	r28, r28
    2560:	dd 0f       	add	r29, r29
    2562:	cc 1f       	adc	r28, r28
    2564:	dd 27       	eor	r29, r29
    2566:	c8 0f       	add	r28, r24
    2568:	d9 1f       	adc	r29, r25
    256a:	81 2f       	mov	r24, r17
    256c:	75 db       	rcall	.-2326   	; 0x1c58 <udd_ep_get_job>
    256e:	dc 01       	movw	r26, r24
    2570:	fe 01       	movw	r30, r28
    2572:	ee 0f       	add	r30, r30
    2574:	ff 1f       	adc	r31, r31
    2576:	ee 0f       	add	r30, r30
    2578:	ff 1f       	adc	r31, r31
    257a:	ee 0f       	add	r30, r30
    257c:	ff 1f       	adc	r31, r31
    257e:	e8 57       	subi	r30, 0x78	; 120
    2580:	fc 4d       	sbci	r31, 0xDC	; 220
    2582:	02 e0       	ldi	r16, 0x02	; 2
    2584:	05 93       	las	Z, r16
    2586:	8c 91       	ld	r24, X
    2588:	80 ff       	sbrs	r24, 0
    258a:	22 c0       	rjmp	.+68     	; 0x25d0 <udd_ep_abort+0x92>
    258c:	8e 7f       	andi	r24, 0xFE	; 254
    258e:	8c 93       	st	X, r24
    2590:	17 96       	adiw	r26, 0x07	; 7
    2592:	ed 91       	ld	r30, X+
    2594:	fc 91       	ld	r31, X
    2596:	18 97       	sbiw	r26, 0x08	; 8
    2598:	30 97       	sbiw	r30, 0x00	; 0
    259a:	d1 f0       	breq	.+52     	; 0x25d0 <udd_ep_abort+0x92>
    259c:	11 23       	and	r17, r17
    259e:	5c f4       	brge	.+22     	; 0x25b6 <udd_ep_abort+0x78>
    25a0:	cc 0f       	add	r28, r28
    25a2:	dd 1f       	adc	r29, r29
    25a4:	cc 0f       	add	r28, r28
    25a6:	dd 1f       	adc	r29, r29
    25a8:	cc 0f       	add	r28, r28
    25aa:	dd 1f       	adc	r29, r29
    25ac:	cc 58       	subi	r28, 0x8C	; 140
    25ae:	dc 4d       	sbci	r29, 0xDC	; 220
    25b0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    25b2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    25b4:	0a c0       	rjmp	.+20     	; 0x25ca <udd_ep_abort+0x8c>
    25b6:	cc 0f       	add	r28, r28
    25b8:	dd 1f       	adc	r29, r29
    25ba:	cc 0f       	add	r28, r28
    25bc:	dd 1f       	adc	r29, r29
    25be:	cc 0f       	add	r28, r28
    25c0:	dd 1f       	adc	r29, r29
    25c2:	cc 58       	subi	r28, 0x8C	; 140
    25c4:	dc 4d       	sbci	r29, 0xDC	; 220
    25c6:	6e 89       	ldd	r22, Y+22	; 0x16
    25c8:	7f 89       	ldd	r23, Y+23	; 0x17
    25ca:	41 2f       	mov	r20, r17
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	19 95       	eicall
    25d0:	df 91       	pop	r29
    25d2:	cf 91       	pop	r28
    25d4:	1f 91       	pop	r17
    25d6:	0f 91       	pop	r16
    25d8:	ff 90       	pop	r15
    25da:	08 95       	ret

000025dc <udd_ep_free>:
    25dc:	cf 93       	push	r28
    25de:	c8 2f       	mov	r28, r24
    25e0:	ae df       	rcall	.-164    	; 0x253e <udd_ep_abort>
    25e2:	ec 2f       	mov	r30, r28
    25e4:	ef 70       	andi	r30, 0x0F	; 15
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	ee 0f       	add	r30, r30
    25ea:	ff 1f       	adc	r31, r31
    25ec:	8c 2f       	mov	r24, r28
    25ee:	cc 0f       	add	r28, r28
    25f0:	99 0b       	sbc	r25, r25
    25f2:	88 27       	eor	r24, r24
    25f4:	99 0f       	add	r25, r25
    25f6:	88 1f       	adc	r24, r24
    25f8:	99 27       	eor	r25, r25
    25fa:	e8 0f       	add	r30, r24
    25fc:	f9 1f       	adc	r31, r25
    25fe:	ee 0f       	add	r30, r30
    2600:	ff 1f       	adc	r31, r31
    2602:	ee 0f       	add	r30, r30
    2604:	ff 1f       	adc	r31, r31
    2606:	ee 0f       	add	r30, r30
    2608:	ff 1f       	adc	r31, r31
    260a:	ec 58       	subi	r30, 0x8C	; 140
    260c:	fc 4d       	sbci	r31, 0xDC	; 220
    260e:	15 8a       	std	Z+21, r1	; 0x15
    2610:	cf 91       	pop	r28
    2612:	08 95       	ret

00002614 <udd_ep_set_halt>:
    2614:	e8 2f       	mov	r30, r24
    2616:	ef 70       	andi	r30, 0x0F	; 15
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	ee 0f       	add	r30, r30
    261c:	ff 1f       	adc	r31, r31
    261e:	28 2f       	mov	r18, r24
    2620:	08 2e       	mov	r0, r24
    2622:	00 0c       	add	r0, r0
    2624:	33 0b       	sbc	r19, r19
    2626:	22 27       	eor	r18, r18
    2628:	33 0f       	add	r19, r19
    262a:	22 1f       	adc	r18, r18
    262c:	33 27       	eor	r19, r19
    262e:	e2 0f       	add	r30, r18
    2630:	f3 1f       	adc	r31, r19
    2632:	ee 0f       	add	r30, r30
    2634:	ff 1f       	adc	r31, r31
    2636:	ee 0f       	add	r30, r30
    2638:	ff 1f       	adc	r31, r31
    263a:	ee 0f       	add	r30, r30
    263c:	ff 1f       	adc	r31, r31
    263e:	ec 58       	subi	r30, 0x8C	; 140
    2640:	fc 4d       	sbci	r31, 0xDC	; 220
    2642:	95 89       	ldd	r25, Z+21	; 0x15
    2644:	94 60       	ori	r25, 0x04	; 4
    2646:	95 8b       	std	Z+21, r25	; 0x15
    2648:	7a df       	rcall	.-268    	; 0x253e <udd_ep_abort>
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	08 95       	ret

0000264e <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    264e:	1f 92       	push	r1
    2650:	0f 92       	push	r0
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	0f 92       	push	r0
    2656:	11 24       	eor	r1, r1
    2658:	0b b6       	in	r0, 0x3b	; 59
    265a:	0f 92       	push	r0
    265c:	0f 93       	push	r16
    265e:	2f 93       	push	r18
    2660:	3f 93       	push	r19
    2662:	4f 93       	push	r20
    2664:	5f 93       	push	r21
    2666:	6f 93       	push	r22
    2668:	7f 93       	push	r23
    266a:	8f 93       	push	r24
    266c:	9f 93       	push	r25
    266e:	af 93       	push	r26
    2670:	bf 93       	push	r27
    2672:	cf 93       	push	r28
    2674:	ef 93       	push	r30
    2676:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2678:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    267c:	88 23       	and	r24, r24
    267e:	3c f4       	brge	.+14     	; 0x268e <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    2680:	80 e8       	ldi	r24, 0x80	; 128
    2682:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    2686:	0e 94 39 0a 	call	0x1472	; 0x1472 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    268a:	af d1       	rcall	.+862    	; 0x29ea <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    268c:	89 c0       	rjmp	.+274    	; 0x27a0 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    268e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2692:	82 ff       	sbrs	r24, 2
    2694:	20 c0       	rjmp	.+64     	; 0x26d6 <__vector_125+0x88>
		udd_ack_underflow_event();
    2696:	84 e0       	ldi	r24, 0x04	; 4
    2698:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    269c:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <udd_sram+0x1c>
    26a0:	86 ff       	sbrs	r24, 6
    26a2:	7e c0       	rjmp	.+252    	; 0x27a0 <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    26a4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    26a8:	81 fd       	sbrc	r24, 1
    26aa:	7a c0       	rjmp	.+244    	; 0x27a0 <__vector_125+0x152>
    26ac:	f0 da       	rcall	.-2592   	; 0x1c8e <udd_ctrl_interrupt_tc_setup>
    26ae:	81 11       	cpse	r24, r1
    26b0:	77 c0       	rjmp	.+238    	; 0x27a0 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    26b2:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udd_ep_control_state>
    26b6:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    26b8:	11 f4       	brne	.+4      	; 0x26be <__vector_125+0x70>
    26ba:	24 da       	rcall	.-3000   	; 0x1b04 <udd_ctrl_send_zlp_in>
    26bc:	71 c0       	rjmp	.+226    	; 0x27a0 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    26be:	84 30       	cpi	r24, 0x04	; 4
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <__vector_125+0x76>
    26c2:	6e c0       	rjmp	.+220    	; 0x27a0 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    26c4:	e1 e9       	ldi	r30, 0x91	; 145
    26c6:	f3 e2       	ldi	r31, 0x23	; 35
    26c8:	04 e0       	ldi	r16, 0x04	; 4
    26ca:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    26cc:	e9 e8       	ldi	r30, 0x89	; 137
    26ce:	f3 e2       	ldi	r31, 0x23	; 35
    26d0:	04 e0       	ldi	r16, 0x04	; 4
    26d2:	05 93       	las	Z, r16
    26d4:	65 c0       	rjmp	.+202    	; 0x27a0 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    26d6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    26da:	81 ff       	sbrs	r24, 1
    26dc:	5c c0       	rjmp	.+184    	; 0x2796 <__vector_125+0x148>
		udd_ack_overflow_event();
    26de:	82 e0       	ldi	r24, 0x02	; 2
    26e0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    26e4:	80 91 88 23 	lds	r24, 0x2388	; 0x802388 <udd_sram+0x14>
    26e8:	86 ff       	sbrs	r24, 6
    26ea:	5a c0       	rjmp	.+180    	; 0x27a0 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    26ec:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    26f0:	81 fd       	sbrc	r24, 1
    26f2:	56 c0       	rjmp	.+172    	; 0x27a0 <__vector_125+0x152>
    26f4:	cc da       	rcall	.-2664   	; 0x1c8e <udd_ctrl_interrupt_tc_setup>
    26f6:	81 11       	cpse	r24, r1
    26f8:	53 c0       	rjmp	.+166    	; 0x27a0 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    26fa:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udd_ep_control_state>
    26fe:	82 30       	cpi	r24, 0x02	; 2
    2700:	41 f4       	brne	.+16     	; 0x2712 <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2702:	84 e0       	ldi	r24, 0x04	; 4
    2704:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2708:	e8 e8       	ldi	r30, 0x88	; 136
    270a:	f3 e2       	ldi	r31, 0x23	; 35
    270c:	02 e0       	ldi	r16, 0x02	; 2
    270e:	06 93       	lac	Z, r16
    2710:	47 c0       	rjmp	.+142    	; 0x27a0 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2712:	83 30       	cpi	r24, 0x03	; 3
    2714:	09 f0       	breq	.+2      	; 0x2718 <__vector_125+0xca>
    2716:	44 c0       	rjmp	.+136    	; 0x27a0 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2718:	e1 e9       	ldi	r30, 0x91	; 145
    271a:	f3 e2       	ldi	r31, 0x23	; 35
    271c:	04 e0       	ldi	r16, 0x04	; 4
    271e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2720:	e9 e8       	ldi	r30, 0x89	; 137
    2722:	f3 e2       	ldi	r31, 0x23	; 35
    2724:	04 e0       	ldi	r16, 0x04	; 4
    2726:	05 93       	las	Z, r16
    2728:	3b c0       	rjmp	.+118    	; 0x27a0 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    272a:	80 e1       	ldi	r24, 0x10	; 16
    272c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2730:	c1 e0       	ldi	r28, 0x01	; 1
    2732:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    2734:	04 df       	rcall	.-504    	; 0x253e <udd_ep_abort>
    2736:	8c 2f       	mov	r24, r28
    2738:	80 68       	ori	r24, 0x80	; 128
    273a:	01 df       	rcall	.-510    	; 0x253e <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    273c:	cf 5f       	subi	r28, 0xFF	; 255
    273e:	c5 30       	cpi	r28, 0x05	; 5
    2740:	c1 f7       	brne	.-16     	; 0x2732 <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2742:	0e 94 0f 0a 	call	0x141e	; 0x141e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2746:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    274a:	e4 e7       	ldi	r30, 0x74	; 116
    274c:	f3 e2       	ldi	r31, 0x23	; 35
    274e:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2750:	96 e0       	ldi	r25, 0x06	; 6
    2752:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2754:	80 e4       	ldi	r24, 0x40	; 64
    2756:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2758:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    275a:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    275c:	85 8f       	std	Z+29, r24	; 0x1d
    275e:	85 e6       	ldi	r24, 0x65	; 101
    2760:	93 e2       	ldi	r25, 0x23	; 35
    2762:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    2764:	91 8f       	std	Z+25, r25	; 0x19
    2766:	9b d9       	rcall	.-3274   	; 0x1a9e <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2768:	1b c0       	rjmp	.+54     	; 0x27a0 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    276a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    276e:	86 ff       	sbrs	r24, 6
    2770:	07 c0       	rjmp	.+14     	; 0x2780 <__vector_125+0x132>
    2772:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2774:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2778:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    277a:	59 d9       	rcall	.-3406   	; 0x1a2e <udd_sleep_mode>
    277c:	34 d1       	rcall	.+616    	; 0x29e6 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    277e:	10 c0       	rjmp	.+32     	; 0x27a0 <__vector_125+0x152>
    2780:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    2784:	85 ff       	sbrs	r24, 5
    2786:	0c c0       	rjmp	.+24     	; 0x27a0 <__vector_125+0x152>
    2788:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    278a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    278e:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2790:	4e d9       	rcall	.-3428   	; 0x1a2e <udd_sleep_mode>
    2792:	2a d1       	rcall	.+596    	; 0x29e8 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2794:	05 c0       	rjmp	.+10     	; 0x27a0 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2796:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    279a:	84 fd       	sbrc	r24, 4
    279c:	c6 cf       	rjmp	.-116    	; 0x272a <__vector_125+0xdc>
    279e:	e5 cf       	rjmp	.-54     	; 0x276a <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    27a0:	ff 91       	pop	r31
    27a2:	ef 91       	pop	r30
    27a4:	cf 91       	pop	r28
    27a6:	bf 91       	pop	r27
    27a8:	af 91       	pop	r26
    27aa:	9f 91       	pop	r25
    27ac:	8f 91       	pop	r24
    27ae:	7f 91       	pop	r23
    27b0:	6f 91       	pop	r22
    27b2:	5f 91       	pop	r21
    27b4:	4f 91       	pop	r20
    27b6:	3f 91       	pop	r19
    27b8:	2f 91       	pop	r18
    27ba:	0f 91       	pop	r16
    27bc:	0f 90       	pop	r0
    27be:	0b be       	out	0x3b, r0	; 59
    27c0:	0f 90       	pop	r0
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	0f 90       	pop	r0
    27c6:	1f 90       	pop	r1
    27c8:	18 95       	reti

000027ca <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    27ca:	1f 92       	push	r1
    27cc:	0f 92       	push	r0
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	0f 92       	push	r0
    27d2:	11 24       	eor	r1, r1
    27d4:	0b b6       	in	r0, 0x3b	; 59
    27d6:	0f 92       	push	r0
    27d8:	0f 93       	push	r16
    27da:	1f 93       	push	r17
    27dc:	2f 93       	push	r18
    27de:	3f 93       	push	r19
    27e0:	4f 93       	push	r20
    27e2:	5f 93       	push	r21
    27e4:	6f 93       	push	r22
    27e6:	7f 93       	push	r23
    27e8:	8f 93       	push	r24
    27ea:	9f 93       	push	r25
    27ec:	af 93       	push	r26
    27ee:	bf 93       	push	r27
    27f0:	cf 93       	push	r28
    27f2:	df 93       	push	r29
    27f4:	ef 93       	push	r30
    27f6:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    27f8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    27fc:	81 fd       	sbrc	r24, 1
    27fe:	03 c0       	rjmp	.+6      	; 0x2806 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2800:	46 da       	rcall	.-2932   	; 0x1c8e <udd_ctrl_interrupt_tc_setup>
    2802:	81 11       	cpse	r24, r1
    2804:	c3 c0       	rjmp	.+390    	; 0x298c <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2806:	82 e0       	ldi	r24, 0x02	; 2
    2808:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    280c:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2810:	81 95       	neg	r24
    2812:	88 0f       	add	r24, r24
    2814:	e8 e8       	ldi	r30, 0x88	; 136
    2816:	f3 e2       	ldi	r31, 0x23	; 35
    2818:	e8 1b       	sub	r30, r24
    281a:	f1 09       	sbc	r31, r1
    281c:	20 81       	ld	r18, Z
    281e:	31 81       	ldd	r19, Z+1	; 0x01
    2820:	28 58       	subi	r18, 0x88	; 136
    2822:	33 42       	sbci	r19, 0x23	; 35
    2824:	36 95       	lsr	r19
    2826:	27 95       	ror	r18
    2828:	36 95       	lsr	r19
    282a:	27 95       	ror	r18
    282c:	36 95       	lsr	r19
    282e:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2830:	82 2f       	mov	r24, r18
    2832:	86 95       	lsr	r24
    2834:	20 fd       	sbrc	r18, 0
    2836:	02 c0       	rjmp	.+4      	; 0x283c <__vector_126+0x72>
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	01 c0       	rjmp	.+2      	; 0x283e <__vector_126+0x74>
    283c:	90 e8       	ldi	r25, 0x80	; 128
    283e:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2840:	e8 2f       	mov	r30, r24
    2842:	ef 70       	andi	r30, 0x0F	; 15
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	ee 0f       	add	r30, r30
    2848:	ff 1f       	adc	r31, r31
    284a:	28 2f       	mov	r18, r24
    284c:	08 2e       	mov	r0, r24
    284e:	00 0c       	add	r0, r0
    2850:	33 0b       	sbc	r19, r19
    2852:	22 27       	eor	r18, r18
    2854:	33 0f       	add	r19, r19
    2856:	22 1f       	adc	r18, r18
    2858:	33 27       	eor	r19, r19
    285a:	e2 0f       	add	r30, r18
    285c:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    285e:	df 01       	movw	r26, r30
    2860:	aa 0f       	add	r26, r26
    2862:	bb 1f       	adc	r27, r27
    2864:	aa 0f       	add	r26, r26
    2866:	bb 1f       	adc	r27, r27
    2868:	aa 0f       	add	r26, r26
    286a:	bb 1f       	adc	r27, r27
    286c:	ac 58       	subi	r26, 0x8C	; 140
    286e:	bc 4d       	sbci	r27, 0xDC	; 220
    2870:	54 96       	adiw	r26, 0x14	; 20
    2872:	9c 91       	ld	r25, X
    2874:	95 ff       	sbrs	r25, 5
    2876:	8a c0       	rjmp	.+276    	; 0x298c <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2878:	ee 0f       	add	r30, r30
    287a:	ff 1f       	adc	r31, r31
    287c:	ee 0f       	add	r30, r30
    287e:	ff 1f       	adc	r31, r31
    2880:	ee 0f       	add	r30, r30
    2882:	ff 1f       	adc	r31, r31
    2884:	e8 57       	subi	r30, 0x78	; 120
    2886:	fc 4d       	sbci	r31, 0xDC	; 220
    2888:	00 e2       	ldi	r16, 0x20	; 32
    288a:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    288c:	81 11       	cpse	r24, r1
    288e:	79 c0       	rjmp	.+242    	; 0x2982 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2890:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udd_ep_control_state>
    2894:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2896:	19 f4       	brne	.+6      	; 0x289e <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2898:	43 d9       	rcall	.-3450   	; 0x1b20 <udd_ctrl_endofrequest>
    289a:	01 d9       	rcall	.-3582   	; 0x1a9e <udd_ctrl_init>
    289c:	77 c0       	rjmp	.+238    	; 0x298c <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    289e:	00 91 8a 23 	lds	r16, 0x238A	; 0x80238a <udd_sram+0x16>
    28a2:	10 91 8b 23 	lds	r17, 0x238B	; 0x80238b <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    28a6:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xa>
    28aa:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xb>
    28ae:	c0 91 6d 23 	lds	r28, 0x236D	; 0x80236d <udd_ctrl_payload_nb_trans>
    28b2:	d0 91 6e 23 	lds	r29, 0x236E	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    28b6:	98 01       	movw	r18, r16
    28b8:	2c 0f       	add	r18, r28
    28ba:	3d 1f       	adc	r19, r29
    28bc:	82 17       	cp	r24, r18
    28be:	93 07       	cpc	r25, r19
    28c0:	18 f4       	brcc	.+6      	; 0x28c8 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    28c2:	8c 01       	movw	r16, r24
    28c4:	0c 1b       	sub	r16, r28
    28c6:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    28c8:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0x8>
    28cc:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <udd_g_ctrlreq+0x9>
    28d0:	a8 01       	movw	r20, r16
    28d2:	65 e6       	ldi	r22, 0x65	; 101
    28d4:	73 e2       	ldi	r23, 0x23	; 35
    28d6:	8c 0f       	add	r24, r28
    28d8:	9d 1f       	adc	r25, r29
    28da:	d1 d0       	rcall	.+418    	; 0x2a7e <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    28dc:	c0 0f       	add	r28, r16
    28de:	d1 1f       	adc	r29, r17
    28e0:	c0 93 6d 23 	sts	0x236D, r28	; 0x80236d <udd_ctrl_payload_nb_trans>
    28e4:	d0 93 6e 23 	sts	0x236E, r29	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    28e8:	08 30       	cpi	r16, 0x08	; 8
    28ea:	11 05       	cpc	r17, r1
    28ec:	69 f4       	brne	.+26     	; 0x2908 <__vector_126+0x13e>
    28ee:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
    28f2:	90 91 70 23 	lds	r25, 0x2370	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    28f6:	8c 0f       	add	r24, r28
    28f8:	9d 1f       	adc	r25, r29
    28fa:	20 91 ec 23 	lds	r18, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    28fe:	30 91 ed 23 	lds	r19, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    2902:	82 17       	cp	r24, r18
    2904:	93 07       	cpc	r25, r19
    2906:	80 f0       	brcs	.+32     	; 0x2928 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2908:	e6 ee       	ldi	r30, 0xE6	; 230
    290a:	f3 e2       	ldi	r31, 0x23	; 35
    290c:	c2 87       	std	Z+10, r28	; 0x0a
    290e:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2910:	06 84       	ldd	r0, Z+14	; 0x0e
    2912:	f7 85       	ldd	r31, Z+15	; 0x0f
    2914:	e0 2d       	mov	r30, r0
    2916:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2918:	29 f0       	breq	.+10     	; 0x2924 <__vector_126+0x15a>
    291a:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    291c:	81 11       	cpse	r24, r1
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <__vector_126+0x15a>
    2920:	e3 d8       	rcall	.-3642   	; 0x1ae8 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2922:	34 c0       	rjmp	.+104    	; 0x298c <__vector_126+0x1c2>
    2924:	ef d8       	rcall	.-3618   	; 0x1b04 <udd_ctrl_send_zlp_in>
    2926:	32 c0       	rjmp	.+100    	; 0x298c <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2928:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xa>
    292c:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xb>
    2930:	c8 17       	cp	r28, r24
    2932:	d9 07       	cpc	r29, r25
    2934:	f9 f4       	brne	.+62     	; 0x2974 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2936:	e0 91 f4 23 	lds	r30, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0xe>
    293a:	f0 91 f5 23 	lds	r31, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0xf>
    293e:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2940:	11 f4       	brne	.+4      	; 0x2946 <__vector_126+0x17c>
    2942:	d2 d8       	rcall	.-3676   	; 0x1ae8 <udd_ctrl_stall_data>
    2944:	23 c0       	rjmp	.+70     	; 0x298c <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2946:	19 95       	eicall
    2948:	81 11       	cpse	r24, r1
    294a:	02 c0       	rjmp	.+4      	; 0x2950 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    294c:	cd d8       	rcall	.-3686   	; 0x1ae8 <udd_ctrl_stall_data>
    294e:	1e c0       	rjmp	.+60     	; 0x298c <__vector_126+0x1c2>
    2950:	20 91 6f 23 	lds	r18, 0x236F	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2954:	30 91 70 23 	lds	r19, 0x2370	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    2958:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <udd_ctrl_payload_nb_trans>
    295c:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    2960:	82 0f       	add	r24, r18
    2962:	93 1f       	adc	r25, r19
    2964:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
    2968:	90 93 70 23 	sts	0x2370, r25	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    296c:	10 92 6d 23 	sts	0x236D, r1	; 0x80236d <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2970:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    2974:	e8 e8       	ldi	r30, 0x88	; 136
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2976:	f3 e2       	ldi	r31, 0x23	; 35
    2978:	02 e0       	ldi	r16, 0x02	; 2
    297a:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    297c:	00 e2       	ldi	r16, 0x20	; 32
    297e:	06 93       	lac	Z, r16
    2980:	05 c0       	rjmp	.+10     	; 0x298c <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2982:	80 38       	cpi	r24, 0x80	; 128
    2984:	11 f4       	brne	.+4      	; 0x298a <__vector_126+0x1c0>
		udd_ctrl_in_sent();
    2986:	d4 d8       	rcall	.-3672   	; 0x1b30 <udd_ctrl_in_sent>
    2988:	01 c0       	rjmp	.+2      	; 0x298c <__vector_126+0x1c2>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    298a:	f2 d9       	rcall	.-3100   	; 0x1d70 <udd_ep_trans_complet>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    298c:	ff 91       	pop	r31
    298e:	ef 91       	pop	r30
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	bf 91       	pop	r27
    2996:	af 91       	pop	r26
    2998:	9f 91       	pop	r25
    299a:	8f 91       	pop	r24
    299c:	7f 91       	pop	r23
    299e:	6f 91       	pop	r22
    29a0:	5f 91       	pop	r21
    29a2:	4f 91       	pop	r20
    29a4:	3f 91       	pop	r19
    29a6:	2f 91       	pop	r18
    29a8:	1f 91       	pop	r17
    29aa:	0f 91       	pop	r16
    29ac:	0f 90       	pop	r0
    29ae:	0b be       	out	0x3b, r0	; 59
    29b0:	0f 90       	pop	r0
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	0f 90       	pop	r0
    29b6:	1f 90       	pop	r1
    29b8:	18 95       	reti

000029ba <main>:
static volatile bool main_b_generic_enable = false;
static volatile bool main_b_led_enable = false;

int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    29ba:	87 e0       	ldi	r24, 0x07	; 7
    29bc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    29c0:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    29c2:	e0 ee       	ldi	r30, 0xE0	; 224
    29c4:	f3 e2       	ldi	r31, 0x23	; 35
    29c6:	10 82       	st	Z, r1
    29c8:	11 82       	std	Z+1, r1	; 0x01
    29ca:	12 82       	std	Z+2, r1	; 0x02
    29cc:	13 82       	std	Z+3, r1	; 0x03
    29ce:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    29d4:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <sysclk_init>

	io_ui_process();           // initializes board i/o pins & sub-devices
    29d8:	0e 94 05 06 	call	0xc0a	; 0xc0a <io_ui_process>

	udc_start();               // starts USB device controller
    29dc:	0e 94 0d 0a 	call	0x141a	; 0x141a <udc_start>

	startup_ui_process();
    29e0:	0e 94 2a 06 	call	0xc54	; 0xc54 <startup_ui_process>
    29e4:	ff cf       	rjmp	.-2      	; 0x29e4 <main+0x2a>

000029e6 <main_suspend_action>:
}

/* --------------------------------------------------------------------- */
/* -------------------------------- USB -------------------------------- */
/* --------------------------------------------------------------------- */
void main_suspend_action(void) { }
    29e6:	08 95       	ret

000029e8 <main_resume_action>:
void main_resume_action(void) { }
    29e8:	08 95       	ret

000029ea <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    29ea:	80 91 df 23 	lds	r24, 0x23DF	; 0x8023df <main_b_kbd_enable>
    29ee:	88 23       	and	r24, r24
    29f0:	91 f0       	breq	.+36     	; 0x2a16 <main_sof_action+0x2c>
		return;
	kbd_ui_process();
    29f2:	0e 94 17 06 	call	0xc2e	; 0xc2e <kbd_ui_process>

	if (!main_b_generic_enable)
    29f6:	80 91 de 23 	lds	r24, 0x23DE	; 0x8023de <main_b_generic_enable>
    29fa:	88 23       	and	r24, r24
    29fc:	61 f0       	breq	.+24     	; 0x2a16 <main_sof_action+0x2c>
		return;
	jstk_ui_process();
    29fe:	0e 94 07 06 	call	0xc0e	; 0xc0e <jstk_ui_process>

	if (!main_b_led_enable)
    2a02:	80 91 dd 23 	lds	r24, 0x23DD	; 0x8023dd <main_b_led_enable>
    2a06:	88 23       	and	r24, r24
    2a08:	31 f0       	breq	.+12     	; 0x2a16 <main_sof_action+0x2c>
		return;

	gui_ui_process();
    2a0a:	0e 94 30 06 	call	0xc60	; 0xc60 <gui_ui_process>
	status_ui_process();
    2a0e:	0e 94 4b 06 	call	0xc96	; 0xc96 <status_ui_process>

	idle_ui_process();
    2a12:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <idle_ui_process>
    2a16:	08 95       	ret

00002a18 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2a18:	08 95       	ret

00002a1a <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2a1a:	08 95       	ret

00002a1c <main_kbd_enable>:

/* --------------------------------------------------------------------- */
/* ----------------------------- keyboard ------------------------------ */
/* --------------------------------------------------------------------- */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	80 93 df 23 	sts	0x23DF, r24	; 0x8023df <main_b_kbd_enable>
	return true;
}
    2a22:	08 95       	ret

00002a24 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2a24:	10 92 df 23 	sts	0x23DF, r1	; 0x8023df <main_b_kbd_enable>
    2a28:	08 95       	ret

00002a2a <main_generic_enable>:

/* --------------------------------------------------------------------- */
/* ----------------------------- joystick ------------------------------ */
/* --------------------------------------------------------------------- */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	80 93 de 23 	sts	0x23DE, r24	; 0x8023de <main_b_generic_enable>
	return true;
}
    2a30:	08 95       	ret

00002a32 <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2a32:	10 92 de 23 	sts	0x23DE, r1	; 0x8023de <main_b_generic_enable>
    2a36:	08 95       	ret

00002a38 <main_led_enable>:

/* --------------------------------------------------------------------- */
/* ------------------------------- LEDs -------------------------------- */
/* --------------------------------------------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	80 93 dd 23 	sts	0x23DD, r24	; 0x8023dd <main_b_led_enable>
	return true;
}
    2a3e:	08 95       	ret

00002a40 <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2a40:	10 92 dd 23 	sts	0x23DD, r1	; 0x8023dd <main_b_led_enable>
    2a44:	08 95       	ret

00002a46 <__udivmodhi4>:
    2a46:	aa 1b       	sub	r26, r26
    2a48:	bb 1b       	sub	r27, r27
    2a4a:	51 e1       	ldi	r21, 0x11	; 17
    2a4c:	07 c0       	rjmp	.+14     	; 0x2a5c <__udivmodhi4_ep>

00002a4e <__udivmodhi4_loop>:
    2a4e:	aa 1f       	adc	r26, r26
    2a50:	bb 1f       	adc	r27, r27
    2a52:	a6 17       	cp	r26, r22
    2a54:	b7 07       	cpc	r27, r23
    2a56:	10 f0       	brcs	.+4      	; 0x2a5c <__udivmodhi4_ep>
    2a58:	a6 1b       	sub	r26, r22
    2a5a:	b7 0b       	sbc	r27, r23

00002a5c <__udivmodhi4_ep>:
    2a5c:	88 1f       	adc	r24, r24
    2a5e:	99 1f       	adc	r25, r25
    2a60:	5a 95       	dec	r21
    2a62:	a9 f7       	brne	.-22     	; 0x2a4e <__udivmodhi4_loop>
    2a64:	80 95       	com	r24
    2a66:	90 95       	com	r25
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	08 95       	ret

00002a6e <__tablejump2__>:
    2a6e:	ee 0f       	add	r30, r30
    2a70:	ff 1f       	adc	r31, r31
    2a72:	88 1f       	adc	r24, r24
    2a74:	8b bf       	out	0x3b, r24	; 59
    2a76:	07 90       	elpm	r0, Z+
    2a78:	f6 91       	elpm	r31, Z
    2a7a:	e0 2d       	mov	r30, r0
    2a7c:	19 94       	eijmp

00002a7e <memcpy>:
    2a7e:	fb 01       	movw	r30, r22
    2a80:	dc 01       	movw	r26, r24
    2a82:	02 c0       	rjmp	.+4      	; 0x2a88 <memcpy+0xa>
    2a84:	01 90       	ld	r0, Z+
    2a86:	0d 92       	st	X+, r0
    2a88:	41 50       	subi	r20, 0x01	; 1
    2a8a:	50 40       	sbci	r21, 0x00	; 0
    2a8c:	d8 f7       	brcc	.-10     	; 0x2a84 <memcpy+0x6>
    2a8e:	08 95       	ret

00002a90 <_exit>:
    2a90:	f8 94       	cli

00002a92 <__stop_program>:
    2a92:	ff cf       	rjmp	.-2      	; 0x2a92 <__stop_program>
