
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000184  00802000  00002d04  00002d98  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000245  00802184  00802184  00002f1c  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a8  00000000  00000000  00002f90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b332  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052aa  00000000  00000000  0000e86a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009bcb  00000000  00000000  00013b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ce8  00000000  00000000  0001d6e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036d03  00000000  00000000  0001e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036b3  00000000  00000000  000550cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000768  00000000  00000000  00058780  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd69  00000000  00000000  00058ee8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__vector_125>
     1f8:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__vector_126>
     1fc:	28 04       	cpc	r2, r8
     1fe:	67 04       	cpc	r6, r7
     200:	1e 04       	cpc	r1, r14
     202:	69 04       	cpc	r6, r9
     204:	20 04       	cpc	r2, r0
     206:	22 04       	cpc	r2, r2
     208:	24 04       	cpc	r2, r4
     20a:	26 04       	cpc	r2, r6
     20c:	28 04       	cpc	r2, r8
     20e:	4d 0f       	add	r20, r29
     210:	50 0f       	add	r21, r16
     212:	53 0f       	add	r21, r19
     214:	56 0f       	add	r21, r22
     216:	59 0f       	add	r21, r25
     218:	5c 0f       	add	r21, r28
     21a:	5f 0f       	add	r21, r31

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	e4 e0       	ldi	r30, 0x04	; 4
     234:	fd e2       	ldi	r31, 0x2D	; 45
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a4 38       	cpi	r26, 0x84	; 132
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a4 e8       	ldi	r26, 0x84	; 132
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a9 3c       	cpi	r26, 0xC9	; 201
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <main>
     25a:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     264:	30 91 bb 23 	lds	r19, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
     268:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     278:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
     27c:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     284:	e9 eb       	ldi	r30, 0xB9	; 185
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	84 e8       	ldi	r24, 0x84	; 132
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     298:	8b e7       	ldi	r24, 0x7B	; 123
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
	}
	return false;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_in_sent>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep) {
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_led_b_report_in_free = true;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <udi_hid_led_b_report_in_free>
     2b6:	08 95       	ret

000002b8 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2bc:	0b e7       	ldi	r16, 0x7B	; 123
     2be:	11 e0       	ldi	r17, 0x01	; 1
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	44 e8       	ldi	r20, 0x84	; 132
     2c6:	51 e2       	ldi	r21, 0x21	; 33
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	0e 94 0e 13 	call	0x261c	; 0x261c <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
}
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	08 95       	ret

000002d6 <udi_hid_led_enable>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep);

/* --------------------------------------------------------------------- */

bool udi_hid_led_enable(void) {
     2d6:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d8:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2dc:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <udi_hid_led_protocol>
	udi_hid_led_b_report_in_free = true;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <udi_hid_led_b_report_in_free>

	if(!udi_hid_led_report_out_enable())
     2e6:	e8 df       	rcall	.-48     	; 0x2b8 <udi_hid_led_report_out_enable>
     2e8:	c8 2f       	mov	r28, r24
     2ea:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2ec:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <main_led_enable>
	return true;
}
     2f0:	8c 2f       	mov	r24, r28
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2f6:	81 11       	cpse	r24, r1
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <udi_hid_led_report_out_received+0x10>
     2fa:	61 30       	cpi	r22, 0x01	; 1
     2fc:	71 05       	cpc	r23, r1
     2fe:	19 f4       	brne	.+6      	; 0x306 <udi_hid_led_report_out_received+0x10>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     300:	84 e8       	ldi	r24, 0x84	; 132
     302:	91 e2       	ldi	r25, 0x21	; 33
     304:	29 d6       	rcall	.+3154   	; 0xf58 <ui_led_report>
	}
	udi_hid_led_report_out_enable();
     306:	d8 cf       	rjmp	.-80     	; 0x2b8 <udi_hid_led_report_out_enable>
     308:	08 95       	ret

0000030a <udi_hid_led_disable>:
     30a:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <main_led_disable>
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     30e:	08 95       	ret

00000310 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     310:	22 e3       	ldi	r18, 0x32	; 50
     312:	31 e0       	ldi	r19, 0x01	; 1
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e2       	ldi	r21, 0x20	; 32
     318:	6a e8       	ldi	r22, 0x8A	; 138
     31a:	71 e2       	ldi	r23, 0x21	; 33
     31c:	8c e8       	ldi	r24, 0x8C	; 140
     31e:	91 e2       	ldi	r25, 0x21	; 33
     320:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     324:	08 95       	ret

00000326 <udi_hid_led_send_report_in>:
		              udi_hid_led_report_out_received);
}


bool udi_hid_led_send_report_in(uint8_t *data)
{
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	1f 92       	push	r1
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	9c 01       	movw	r18, r24
	if (!udi_hid_led_b_report_in_free)
     338:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <udi_hid_led_b_report_in_free>
     33c:	88 23       	and	r24, r24
     33e:	d9 f0       	breq	.+54     	; 0x376 <udi_hid_led_send_report_in+0x50>
     340:	d9 01       	movw	r26, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     342:	8f b7       	in	r24, 0x3f	; 63
     344:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     346:	f8 94       	cli
	return flags;
     348:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();

	memset(&udi_hid_led_report_in,
     34a:	e6 e8       	ldi	r30, 0x86	; 134
     34c:	f1 e2       	ldi	r31, 0x21	; 33
     34e:	10 82       	st	Z, r1
		   0,
		   sizeof(udi_hid_led_report_in));
	memcpy(&udi_hid_led_report_in,
     350:	8c 91       	ld	r24, X
     352:	80 83       	st	Z, r24
		   data,
		   sizeof(udi_hid_led_report_in));
	udi_hid_led_b_report_in_free = !udd_ep_run(UDI_HID_LED_EP_IN,
     354:	08 e5       	ldi	r16, 0x58	; 88
     356:	11 e0       	ldi	r17, 0x01	; 1
     358:	21 e0       	ldi	r18, 0x01	; 1
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	af 01       	movw	r20, r30
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	84 e8       	ldi	r24, 0x84	; 132
     362:	0e 94 0e 13 	call	0x261c	; 0x261c <udd_ep_run>
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	89 27       	eor	r24, r25
     36a:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <udi_hid_led_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     36e:	ff be       	out	0x3f, r15	; 63
		                                       false,
		                                       (uint8_t *) & udi_hid_led_report_in,
		                                       sizeof(udi_hid_led_report_in),
		                                       udi_hid_led_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_led_b_report_in_free;
     370:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <udi_hid_led_b_report_in_free>
     374:	89 27       	eor	r24, r25
}
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	08 95       	ret

00000384 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     384:	e0 e0       	ldi	r30, 0x00	; 0
     386:	f6 e0       	ldi	r31, 0x06	; 6
     388:	9f ef       	ldi	r25, 0xFF	; 255
     38a:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     38c:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     38e:	e0 e2       	ldi	r30, 0x20	; 32
     390:	f6 e0       	ldi	r31, 0x06	; 6
     392:	3f e3       	ldi	r19, 0x3F	; 63
     394:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     396:	88 e1       	ldi	r24, 0x18	; 24
     398:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     39a:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     39c:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     39e:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3a0:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3a2:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     3a4:	20 ec       	ldi	r18, 0xC0	; 192
     3a6:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     3a8:	40 e4       	ldi	r20, 0x40	; 64
     3aa:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     3ac:	40 e8       	ldi	r20, 0x80	; 128
     3ae:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     3b0:	e0 e4       	ldi	r30, 0x40	; 64
     3b2:	f6 e0       	ldi	r31, 0x06	; 6
     3b4:	4c ef       	ldi	r20, 0xFC	; 252
     3b6:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3b8:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ba:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3bc:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3be:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3c0:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3c2:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     3c4:	43 e0       	ldi	r20, 0x03	; 3
     3c6:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     3c8:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     3ca:	e0 e6       	ldi	r30, 0x60	; 96
     3cc:	f6 e0       	ldi	r31, 0x06	; 6
     3ce:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d0:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d2:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d4:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d6:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d8:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3da:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     3dc:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     3de:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     3e0:	e0 e8       	ldi	r30, 0x80	; 128
     3e2:	f6 e0       	ldi	r31, 0x06	; 6
     3e4:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e6:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e8:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ea:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ec:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ee:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f0:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f2:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f4:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     3f6:	e0 ea       	ldi	r30, 0xA0	; 160
     3f8:	f6 e0       	ldi	r31, 0x06	; 6
     3fa:	90 ef       	ldi	r25, 0xF0	; 240
     3fc:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3fe:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     400:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     402:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     404:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     406:	8f e0       	ldi	r24, 0x0F	; 15
     408:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     40a:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     40c:	99 d2       	rcall	.+1330   	; 0x940 <led_init>
	keypad_init();
     40e:	0d c1       	rjmp	.+538    	; 0x62a <keypad_init>
     410:	08 95       	ret

00000412 <jstk_readVertIndex>:
     412:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     416:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	92 2b       	or	r25, r18
     41e:	96 95       	lsr	r25
     420:	87 95       	ror	r24
     422:	96 95       	lsr	r25
     424:	87 95       	ror	r24
     426:	bc 01       	movw	r22, r24
     428:	7f 70       	andi	r23, 0x0F	; 15
     42a:	80 ff       	sbrs	r24, 0
     42c:	17 c0       	rjmp	.+46     	; 0x45c <jstk_readVertIndex+0x4a>
     42e:	21 e0       	ldi	r18, 0x01	; 1
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	e1 e0       	ldi	r30, 0x01	; 1
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	82 2f       	mov	r24, r18
     438:	af 01       	movw	r20, r30
     43a:	02 2e       	mov	r0, r18
     43c:	02 c0       	rjmp	.+4      	; 0x442 <jstk_readVertIndex+0x30>
     43e:	44 0f       	add	r20, r20
     440:	55 1f       	adc	r21, r21
     442:	0a 94       	dec	r0
     444:	e2 f7       	brpl	.-8      	; 0x43e <jstk_readVertIndex+0x2c>
     446:	46 23       	and	r20, r22
     448:	57 23       	and	r21, r23
     44a:	45 2b       	or	r20, r21
     44c:	41 f0       	breq	.+16     	; 0x45e <jstk_readVertIndex+0x4c>
     44e:	2f 5f       	subi	r18, 0xFF	; 255
     450:	3f 4f       	sbci	r19, 0xFF	; 255
     452:	2c 30       	cpi	r18, 0x0C	; 12
     454:	31 05       	cpc	r19, r1
     456:	79 f7       	brne	.-34     	; 0x436 <jstk_readVertIndex+0x24>
     458:	8f ef       	ldi	r24, 0xFF	; 255
     45a:	08 95       	ret
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	08 95       	ret

00000460 <jstk_readHoriIndex>:
     460:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     464:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	92 2b       	or	r25, r18
     46c:	bc 01       	movw	r22, r24
     46e:	7f 70       	andi	r23, 0x0F	; 15
     470:	80 ff       	sbrs	r24, 0
     472:	17 c0       	rjmp	.+46     	; 0x4a2 <jstk_readHoriIndex+0x42>
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	e1 e0       	ldi	r30, 0x01	; 1
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	82 2f       	mov	r24, r18
     47e:	af 01       	movw	r20, r30
     480:	02 2e       	mov	r0, r18
     482:	02 c0       	rjmp	.+4      	; 0x488 <jstk_readHoriIndex+0x28>
     484:	44 0f       	add	r20, r20
     486:	55 1f       	adc	r21, r21
     488:	0a 94       	dec	r0
     48a:	e2 f7       	brpl	.-8      	; 0x484 <jstk_readHoriIndex+0x24>
     48c:	46 23       	and	r20, r22
     48e:	57 23       	and	r21, r23
     490:	45 2b       	or	r20, r21
     492:	41 f0       	breq	.+16     	; 0x4a4 <jstk_readHoriIndex+0x44>
     494:	2f 5f       	subi	r18, 0xFF	; 255
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	2c 30       	cpi	r18, 0x0C	; 12
     49a:	31 05       	cpc	r19, r1
     49c:	79 f7       	brne	.-34     	; 0x47c <jstk_readHoriIndex+0x1c>
     49e:	8f ef       	ldi	r24, 0xFF	; 255
     4a0:	08 95       	ret
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	08 95       	ret

000004a6 <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     4a6:	88 23       	and	r24, r24
     4a8:	f4 f1       	brlt	.+124    	; 0x526 <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     4aa:	9b ef       	ldi	r25, 0xFB	; 251
     4ac:	98 0f       	add	r25, r24
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	e0 f1       	brcs	.+120    	; 0x52a <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     4b2:	85 30       	cpi	r24, 0x05	; 5
     4b4:	34 f4       	brge	.+12     	; 0x4c2 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4b6:	95 e0       	ldi	r25, 0x05	; 5
     4b8:	98 1b       	sub	r25, r24
     4ba:	92 30       	cpi	r25, 0x02	; 2
     4bc:	08 f0       	brcs	.+2      	; 0x4c0 <jstk_ledMask+0x1a>
     4be:	42 c0       	rjmp	.+132    	; 0x544 <jstk_ledMask+0x9e>
     4c0:	36 c0       	rjmp	.+108    	; 0x52e <jstk_ledMask+0x88>
     4c2:	9a ef       	ldi	r25, 0xFA	; 250
     4c4:	98 0f       	add	r25, r24
     4c6:	92 30       	cpi	r25, 0x02	; 2
     4c8:	b0 f5       	brcc	.+108    	; 0x536 <jstk_ledMask+0x90>
     4ca:	31 c0       	rjmp	.+98     	; 0x52e <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4cc:	62 e0       	ldi	r22, 0x02	; 2
     4ce:	23 e0       	ldi	r18, 0x03	; 3
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     4d6:	e1 e0       	ldi	r30, 0x01	; 1
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	af 01       	movw	r20, r30
     4dc:	02 2e       	mov	r0, r18
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <jstk_ledMask+0x3e>
     4e0:	44 0f       	add	r20, r20
     4e2:	55 1f       	adc	r21, r21
     4e4:	0a 94       	dec	r0
     4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <jstk_ledMask+0x3a>
     4e8:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     4ea:	9f 5f       	subi	r25, 0xFF	; 255
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	31 09       	sbc	r19, r1
     4f0:	96 17       	cp	r25, r22
     4f2:	98 f3       	brcs	.-26     	; 0x4da <jstk_ledMask+0x34>
     4f4:	08 95       	ret
     4f6:	81 50       	subi	r24, 0x01	; 1
     4f8:	48 2f       	mov	r20, r24
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	4b 5f       	subi	r20, 0xFB	; 251
     4fe:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     500:	24 e0       	ldi	r18, 0x04	; 4
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     506:	e1 e0       	ldi	r30, 0x01	; 1
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	bf 01       	movw	r22, r30
     50c:	02 2e       	mov	r0, r18
     50e:	02 c0       	rjmp	.+4      	; 0x514 <jstk_ledMask+0x6e>
     510:	66 0f       	add	r22, r22
     512:	77 1f       	adc	r23, r23
     514:	0a 94       	dec	r0
     516:	e2 f7       	brpl	.-8      	; 0x510 <jstk_ledMask+0x6a>
     518:	86 2b       	or	r24, r22
     51a:	2f 5f       	subi	r18, 0xFF	; 255
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     51e:	24 17       	cp	r18, r20
     520:	35 07       	cpc	r19, r21
     522:	99 f7       	brne	.-26     	; 0x50a <jstk_ledMask+0x64>
     524:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     52a:	88 e1       	ldi	r24, 0x18	; 24
     52c:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     52e:	85 30       	cpi	r24, 0x05	; 5
     530:	6c f2       	brlt	.-102    	; 0x4cc <jstk_ledMask+0x26>
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	e0 cf       	rjmp	.-64     	; 0x4f6 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     536:	85 50       	subi	r24, 0x05	; 5
     538:	85 30       	cpi	r24, 0x05	; 5
     53a:	08 f0       	brcs	.+2      	; 0x53e <jstk_ledMask+0x98>
     53c:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     53e:	81 11       	cpse	r24, r1
     540:	da cf       	rjmp	.-76     	; 0x4f6 <jstk_ledMask+0x50>
     542:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     544:	66 e0       	ldi	r22, 0x06	; 6
     546:	68 1b       	sub	r22, r24
     548:	65 30       	cpi	r22, 0x05	; 5
     54a:	08 f0       	brcs	.+2      	; 0x54e <jstk_ledMask+0xa8>
     54c:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     54e:	61 11       	cpse	r22, r1
     550:	be cf       	rjmp	.-132    	; 0x4ce <jstk_ledMask+0x28>
     552:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     554:	08 95       	ret

00000556 <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     556:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     558:	5c df       	rcall	.-328    	; 0x412 <jstk_readVertIndex>
     55a:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     55c:	81 df       	rcall	.-254    	; 0x460 <jstk_readHoriIndex>
     55e:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     560:	24 f4       	brge	.+8      	; 0x56a <jstk_readMask+0x14>
     562:	88 23       	and	r24, r24
     564:	c4 f0       	brlt	.+48     	; 0x596 <jstk_readMask+0x40>
     566:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     568:	09 c0       	rjmp	.+18     	; 0x57c <jstk_readMask+0x26>
     56a:	c6 30       	cpi	r28, 0x06	; 6
     56c:	1c f0       	brlt	.+6      	; 0x574 <jstk_readMask+0x1e>
     56e:	9b ef       	ldi	r25, 0xFB	; 251
     570:	9c 0f       	add	r25, r28
     572:	02 c0       	rjmp	.+4      	; 0x578 <jstk_readMask+0x22>
     574:	95 e0       	ldi	r25, 0x05	; 5
     576:	9c 1b       	sub	r25, r28
     578:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     57a:	54 f0       	brlt	.+20     	; 0x590 <jstk_readMask+0x3a>
     57c:	86 30       	cpi	r24, 0x06	; 6
     57e:	1c f0       	brlt	.+6      	; 0x586 <jstk_readMask+0x30>
     580:	2b ef       	ldi	r18, 0xFB	; 251
     582:	28 0f       	add	r18, r24
     584:	02 c0       	rjmp	.+4      	; 0x58a <jstk_readMask+0x34>
     586:	25 e0       	ldi	r18, 0x05	; 5
     588:	28 1b       	sub	r18, r24
     58a:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     58c:	08 f4       	brcc	.+2      	; 0x590 <jstk_readMask+0x3a>
     58e:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     590:	8c 2f       	mov	r24, r28
     592:	89 df       	rcall	.-238    	; 0x4a6 <jstk_ledMask>
     594:	01 c0       	rjmp	.+2      	; 0x598 <jstk_readMask+0x42>
     596:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     598:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     59a:	08 95       	ret

0000059c <jstk_usbTask>:
     59c:	61 df       	rcall	.-318    	; 0x460 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     59e:	88 23       	and	r24, r24
     5a0:	3c f0       	brlt	.+14     	; 0x5b0 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5a2:	e8 2f       	mov	r30, r24
     5a4:	88 0f       	add	r24, r24
     5a6:	ff 0b       	sbc	r31, r31
     5a8:	e8 58       	subi	r30, 0x88	; 136
     5aa:	fe 4d       	sbci	r31, 0xDE	; 222
     5ac:	80 81       	ld	r24, Z
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5b0:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     5b2:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5b6:	2d df       	rcall	.-422    	; 0x412 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5b8:	88 23       	and	r24, r24
     5ba:	3c f0       	brlt	.+14     	; 0x5ca <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5bc:	e8 2f       	mov	r30, r24
     5be:	88 0f       	add	r24, r24
     5c0:	ff 0b       	sbc	r31, r31
     5c2:	e8 58       	subi	r30, 0x88	; 136
     5c4:	fe 4d       	sbci	r31, 0xDE	; 222
     5c6:	80 81       	ld	r24, Z
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5ca:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5cc:	ee e8       	ldi	r30, 0x8E	; 142
     5ce:	f1 e2       	ldi	r31, 0x21	; 33
     5d0:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     5d2:	20 81       	ld	r18, Z
     5d4:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     5d8:	29 13       	cpse	r18, r25
     5da:	04 c0       	rjmp	.+8      	; 0x5e4 <jstk_usbTask+0x48>
     5dc:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     5e0:	98 17       	cp	r25, r24
     5e2:	71 f0       	breq	.+28     	; 0x600 <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     5e4:	8e e8       	ldi	r24, 0x8E	; 142
     5e6:	91 e2       	ldi	r25, 0x21	; 33
     5e8:	d3 d5       	rcall	.+2982   	; 0x1190 <udi_hid_generic_send_report_in>
     5ea:	88 23       	and	r24, r24
     5ec:	49 f0       	breq	.+18     	; 0x600 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     5ee:	e6 e2       	ldi	r30, 0x26	; 38
     5f0:	f0 e2       	ldi	r31, 0x20	; 32
     5f2:	ae e8       	ldi	r26, 0x8E	; 142
     5f4:	b1 e2       	ldi	r27, 0x21	; 33
     5f6:	8c 91       	ld	r24, X
     5f8:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     5fa:	11 96       	adiw	r26, 0x01	; 1
     5fc:	8c 91       	ld	r24, X
     5fe:	81 83       	std	Z+1, r24	; 0x01
     600:	08 95       	ret

00000602 <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     602:	a9 df       	rcall	.-174    	; 0x556 <jstk_readMask>
     604:	80 93 b0 23 	sts	0x23B0, r24	; 0x8023b0 <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     608:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     60c:	90 93 b1 23 	sts	0x23B1, r25	; 0x8023b1 <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     610:	90 91 b1 23 	lds	r25, 0x23B1	; 0x8023b1 <jstk_testMode>
     614:	94 fd       	sbrc	r25, 4
     616:	07 c0       	rjmp	.+14     	; 0x626 <joystick+0x24>
        if (jstk_mask) {
     618:	88 23       	and	r24, r24
            led_allOff();
     61a:	31 f0       	breq	.+12     	; 0x628 <joystick+0x26>
     61c:	9c d1       	rcall	.+824    	; 0x956 <led_allOff>
            led_on(jstk_mask);
     61e:	80 91 b0 23 	lds	r24, 0x23B0	; 0x8023b0 <jstk_mask>
     622:	9f c1       	rjmp	.+830    	; 0x962 <led_on>
        }
    } else {                                // normal mode
        // led_allOff();                       // for testing
        jstk_usbTask();                     // send to USB
     624:	08 95       	ret
     626:	ba cf       	rjmp	.-140    	; 0x59c <jstk_usbTask>
     628:	08 95       	ret

0000062a <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     62a:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <kpd_keyPressed>
     62e:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <kpd_currState>
     632:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <kpd_prevState>
     636:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <kpd_exitTestMode>
     63a:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <kpd_rowVal>
     63e:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <kpd_code>
     642:	e1 ea       	ldi	r30, 0xA1	; 161
     644:	f1 e2       	ldi	r31, 0x21	; 33
     646:	81 e6       	ldi	r24, 0x61	; 97
     648:	80 83       	st	Z, r24
     64a:	80 e6       	ldi	r24, 0x60	; 96
     64c:	81 83       	std	Z+1, r24	; 0x01
     64e:	12 82       	std	Z+2, r1	; 0x02
     650:	13 82       	std	Z+3, r1	; 0x03
     652:	8f e5       	ldi	r24, 0x5F	; 95
     654:	84 83       	std	Z+4, r24	; 0x04
     656:	8e e5       	ldi	r24, 0x5E	; 94
     658:	85 83       	std	Z+5, r24	; 0x05
     65a:	16 82       	std	Z+6, r1	; 0x06
     65c:	17 82       	std	Z+7, r1	; 0x07
     65e:	8d e5       	ldi	r24, 0x5D	; 93
     660:	80 87       	std	Z+8, r24	; 0x08
     662:	11 86       	std	Z+9, r1	; 0x09
     664:	12 86       	std	Z+10, r1	; 0x0a
     666:	13 86       	std	Z+11, r1	; 0x0b
     668:	14 86       	std	Z+12, r1	; 0x0c
     66a:	15 86       	std	Z+13, r1	; 0x0d
     66c:	89 e5       	ldi	r24, 0x59	; 89
     66e:	86 87       	std	Z+14, r24	; 0x0e
     670:	8b e5       	ldi	r24, 0x5B	; 91
     672:	87 87       	std	Z+15, r24	; 0x0f
     674:	10 8a       	std	Z+16, r1	; 0x10
     676:	11 8a       	std	Z+17, r1	; 0x11
     678:	8a e5       	ldi	r24, 0x5A	; 90
     67a:	82 8b       	std	Z+18, r24	; 0x12
     67c:	8c e5       	ldi	r24, 0x5C	; 92
     67e:	83 8b       	std	Z+19, r24	; 0x13
     680:	ec e9       	ldi	r30, 0x9C	; 156
     682:	f1 e2       	ldi	r31, 0x21	; 33
     684:	8e e0       	ldi	r24, 0x0E	; 14
     686:	80 83       	st	Z, r24
     688:	8d e0       	ldi	r24, 0x0D	; 13
     68a:	81 83       	std	Z+1, r24	; 0x01
     68c:	8b e0       	ldi	r24, 0x0B	; 11
     68e:	82 83       	std	Z+2, r24	; 0x02
     690:	87 e0       	ldi	r24, 0x07	; 7
     692:	83 83       	std	Z+3, r24	; 0x03
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	84 83       	std	Z+4, r24	; 0x04
     698:	08 95       	ret

0000069a <keypad_poll>:
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	60 91 93 21 	lds	r22, 0x2193	; 0x802193 <prevRowMask.5328>
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	0f 2e       	mov	r0, r31
     6b6:	f5 e0       	ldi	r31, 0x05	; 5
     6b8:	ff 2e       	mov	r15, r31
     6ba:	f0 2d       	mov	r31, r0
     6bc:	d4 e0       	ldi	r29, 0x04	; 4
     6be:	e0 ea       	ldi	r30, 0xA0	; 160
     6c0:	f6 e0       	ldi	r31, 0x06	; 6
     6c2:	0f 2e       	mov	r0, r31
     6c4:	f0 e2       	ldi	r31, 0x20	; 32
     6c6:	cf 2e       	mov	r12, r31
     6c8:	f6 e0       	ldi	r31, 0x06	; 6
     6ca:	df 2e       	mov	r13, r31
     6cc:	f0 2d       	mov	r31, r0
     6ce:	68 94       	set
     6d0:	ee 24       	eor	r14, r14
     6d2:	e7 f8       	bld	r14, 7
     6d4:	c2 2f       	mov	r28, r18
     6d6:	c9 01       	movw	r24, r18
     6d8:	84 56       	subi	r24, 0x64	; 100
     6da:	9e 4d       	sbci	r25, 0xDE	; 222
     6dc:	dc 01       	movw	r26, r24
     6de:	8c 91       	ld	r24, X
     6e0:	84 83       	std	Z+4, r24	; 0x04
     6e2:	24 30       	cpi	r18, 0x04	; 4
     6e4:	21 f4       	brne	.+8      	; 0x6ee <keypad_poll+0x54>
     6e6:	d6 01       	movw	r26, r12
     6e8:	16 96       	adiw	r26, 0x06	; 6
     6ea:	ec 92       	st	X, r14
     6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <keypad_poll+0x5a>
     6ee:	d6 01       	movw	r26, r12
     6f0:	15 96       	adiw	r26, 0x05	; 5
     6f2:	ec 92       	st	X, r14
     6f4:	80 85       	ldd	r24, Z+8	; 0x08
     6f6:	80 7f       	andi	r24, 0xF0	; 240
     6f8:	80 95       	com	r24
     6fa:	98 2f       	mov	r25, r24
     6fc:	90 7f       	andi	r25, 0xF0	; 240
     6fe:	84 fd       	sbrc	r24, 4
     700:	7f 5f       	subi	r23, 0xFF	; 255
     702:	85 fd       	sbrc	r24, 5
     704:	7f 5f       	subi	r23, 0xFF	; 255
     706:	86 fd       	sbrc	r24, 6
     708:	7f 5f       	subi	r23, 0xFF	; 255
     70a:	99 23       	and	r25, r25
     70c:	0c f4       	brge	.+2      	; 0x710 <keypad_poll+0x76>
     70e:	7f 5f       	subi	r23, 0xFF	; 255
     710:	49 2f       	mov	r20, r25
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	8a 01       	movw	r16, r20
     716:	01 50       	subi	r16, 0x01	; 1
     718:	11 09       	sbc	r17, r1
     71a:	40 23       	and	r20, r16
     71c:	51 23       	and	r21, r17
     71e:	45 2b       	or	r20, r21
     720:	49 f0       	breq	.+18     	; 0x734 <keypad_poll+0x9a>
     722:	86 2f       	mov	r24, r22
     724:	80 95       	com	r24
     726:	89 23       	and	r24, r25
     728:	09 f4       	brne	.+2      	; 0x72c <keypad_poll+0x92>
     72a:	89 2f       	mov	r24, r25
     72c:	48 2f       	mov	r20, r24
     72e:	41 95       	neg	r20
     730:	84 23       	and	r24, r20
     732:	01 c0       	rjmp	.+2      	; 0x736 <keypad_poll+0x9c>
     734:	89 2f       	mov	r24, r25
     736:	80 32       	cpi	r24, 0x20	; 32
     738:	61 f0       	breq	.+24     	; 0x752 <keypad_poll+0xb8>
     73a:	20 f4       	brcc	.+8      	; 0x744 <keypad_poll+0xaa>
     73c:	80 31       	cpi	r24, 0x10	; 16
     73e:	09 f4       	brne	.+2      	; 0x742 <keypad_poll+0xa8>
     740:	43 c0       	rjmp	.+134    	; 0x7c8 <keypad_poll+0x12e>
     742:	0b c0       	rjmp	.+22     	; 0x75a <keypad_poll+0xc0>
     744:	80 34       	cpi	r24, 0x40	; 64
     746:	09 f4       	brne	.+2      	; 0x74a <keypad_poll+0xb0>
     748:	41 c0       	rjmp	.+130    	; 0x7cc <keypad_poll+0x132>
     74a:	80 38       	cpi	r24, 0x80	; 128
     74c:	31 f4       	brne	.+12     	; 0x75a <keypad_poll+0xc0>
     74e:	d3 e0       	ldi	r29, 0x03	; 3
     750:	3e c0       	rjmp	.+124    	; 0x7ce <keypad_poll+0x134>
     752:	88 23       	and	r24, r24
     754:	11 f0       	breq	.+4      	; 0x75a <keypad_poll+0xc0>
     756:	fc 2e       	mov	r15, r28
     758:	d1 e0       	ldi	r29, 0x01	; 1
     75a:	2f 5f       	subi	r18, 0xFF	; 255
     75c:	3f 4f       	sbci	r19, 0xFF	; 255
     75e:	69 2f       	mov	r22, r25
     760:	25 30       	cpi	r18, 0x05	; 5
     762:	31 05       	cpc	r19, r1
     764:	09 f0       	breq	.+2      	; 0x768 <keypad_poll+0xce>
     766:	b6 cf       	rjmp	.-148    	; 0x6d4 <keypad_poll+0x3a>
     768:	90 93 93 21 	sts	0x2193, r25	; 0x802193 <prevRowMask.5328>
     76c:	80 e8       	ldi	r24, 0x80	; 128
     76e:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     772:	d4 30       	cpi	r29, 0x04	; 4
     774:	e0 f4       	brcc	.+56     	; 0x7ae <keypad_poll+0x114>
     776:	ef 2d       	mov	r30, r15
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	ef 55       	subi	r30, 0x5F	; 95
     784:	fe 4d       	sbci	r31, 0xDE	; 222
     786:	ed 0f       	add	r30, r29
     788:	f1 1d       	adc	r31, r1
     78a:	80 81       	ld	r24, Z
     78c:	90 91 9a 21 	lds	r25, 0x219A	; 0x80219a <kpd_keyPressed>
     790:	91 11       	cpse	r25, r1
     792:	06 c0       	rjmp	.+12     	; 0x7a0 <keypad_poll+0x106>
     794:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <kpd_code>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <kpd_keyPressed>
     79e:	0d c0       	rjmp	.+26     	; 0x7ba <keypad_poll+0x120>
     7a0:	90 91 99 21 	lds	r25, 0x2199	; 0x802199 <kpd_code>
     7a4:	89 17       	cp	r24, r25
     7a6:	49 f0       	breq	.+18     	; 0x7ba <keypad_poll+0x120>
     7a8:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <kpd_code>
     7ac:	06 c0       	rjmp	.+12     	; 0x7ba <keypad_poll+0x120>
     7ae:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_keyPressed>
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	11 f4       	brne	.+4      	; 0x7ba <keypad_poll+0x120>
     7b6:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <kpd_keyPressed>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	72 30       	cpi	r23, 0x02	; 2
     7be:	08 f4       	brcc	.+2      	; 0x7c2 <keypad_poll+0x128>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <kpd_multiPress>
     7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <keypad_poll+0x138>
     7c8:	d0 e0       	ldi	r29, 0x00	; 0
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <keypad_poll+0x134>
     7cc:	d2 e0       	ldi	r29, 0x02	; 2
     7ce:	fc 2e       	mov	r15, r28
     7d0:	c4 cf       	rjmp	.-120    	; 0x75a <keypad_poll+0xc0>
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	08 95       	ret

000007e4 <keypad_getState>:
     7e4:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_keyPressed>
     7e8:	08 95       	ret

000007ea <keypad_report>:

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     7ea:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     7ee:	80 93 b2 23 	sts	0x23B2, r24	; 0x8023b2 <kpd_testMode>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     7f2:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     7f6:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     7fa:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_currentCode = keypad_getCode();    // current code to be outputed
     7fe:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <kpd_currentCode>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     802:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <kpd_testMode>
     806:	84 fd       	sbrc	r24, 4
     808:	29 c0       	rjmp	.+82     	; 0x85c <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     80a:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <kpd_currState>
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	09 f0       	breq	.+2      	; 0x814 <keypad_report+0x2a>
     812:	4d c0       	rjmp	.+154    	; 0x8ae <keypad_report+0xc4>
     814:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <kpd_prevState>
     818:	81 11       	cpse	r24, r1
     81a:	49 c0       	rjmp	.+146    	; 0x8ae <keypad_report+0xc4>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
     81c:	e0 91 96 21 	lds	r30, 0x2196	; 0x802196 <kpd_currentCode>
     820:	8e 2f       	mov	r24, r30
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	fc 01       	movw	r30, r24
     826:	e9 55       	subi	r30, 0x59	; 89
     828:	f1 09       	sbc	r31, r1
     82a:	e9 30       	cpi	r30, 0x09	; 9
     82c:	f1 05       	cpc	r31, r1
     82e:	90 f4       	brcc	.+36     	; 0x854 <keypad_report+0x6a>
     830:	88 27       	eor	r24, r24
     832:	e2 50       	subi	r30, 0x02	; 2
     834:	ff 4f       	sbci	r31, 0xFF	; 255
     836:	8f 4f       	sbci	r24, 0xFF	; 255
     838:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     83c:	84 e0       	ldi	r24, 0x04	; 4
     83e:	09 c0       	rjmp	.+18     	; 0x852 <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     840:	80 e1       	ldi	r24, 0x10	; 16
     842:	07 c0       	rjmp	.+14     	; 0x852 <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     844:	80 e2       	ldi	r24, 0x20	; 32
     846:	05 c0       	rjmp	.+10     	; 0x852 <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     848:	80 e4       	ldi	r24, 0x40	; 64
     84a:	03 c0       	rjmp	.+6      	; 0x852 <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     84c:	80 e8       	ldi	r24, 0x80	; 128
     84e:	01 c0       	rjmp	.+2      	; 0x852 <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     850:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     852:	91 d0       	rcall	.+290    	; 0x976 <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <kpd_exitTestMode>
     85a:	29 c0       	rjmp	.+82     	; 0x8ae <keypad_report+0xc4>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     85c:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_keyPressed>

		static bool kpd_firstKey = false;
		static uint8_t kpd_firstCode = 0;
		static bool kpd_block = false;

		if (!kpd_firstKey) {
     860:	90 91 92 21 	lds	r25, 0x2192	; 0x802192 <kpd_firstKey.5371>
     864:	91 11       	cpse	r25, r1
     866:	0b c0       	rjmp	.+22     	; 0x87e <keypad_report+0x94>
			if (kpd_anyPressed) {
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	09 f5       	brne	.+66     	; 0x8ae <keypad_report+0xc4>
				kpd_firstKey = true;
     86c:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <kpd_firstKey.5371>
				kpd_firstCode = kpd_currentCode;
     870:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <kpd_currentCode>
     874:	80 93 91 21 	sts	0x2191, r24	; 0x802191 <kpd_firstCode.5372>
				kpd_block = false;
     878:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <kpd_block.5373>
     87c:	18 c0       	rjmp	.+48     	; 0x8ae <keypad_report+0xc4>
			}
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	51 f5       	brne	.+84     	; 0x8d6 <keypad_report+0xec>
     882:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <kpd_block.5373>
     886:	81 11       	cpse	r24, r1
     888:	12 c0       	rjmp	.+36     	; 0x8ae <keypad_report+0xc4>
     88a:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <kpd_multiPress>
     88e:	88 23       	and	r24, r24
     890:	71 f0       	breq	.+28     	; 0x8ae <keypad_report+0xc4>
				kpd_block = true;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <kpd_block.5373>
     898:	0a c0       	rjmp	.+20     	; 0x8ae <keypad_report+0xc4>
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
					udi_hid_kbd_down(kpd_firstCode);
     89a:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <kpd_firstCode.5372>
     89e:	35 d5       	rcall	.+2666   	; 0x130a <udi_hid_kbd_down>
					udi_hid_kbd_up(kpd_firstCode);
     8a0:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <kpd_firstCode.5372>
     8a4:	f6 d4       	rcall	.+2540   	; 0x1292 <udi_hid_kbd_up>
				}
				kpd_firstKey = false;
     8a6:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <kpd_firstKey.5371>
				kpd_block = false;
     8aa:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <kpd_block.5373>
			}
		}
	}

	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     8ae:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <kpd_testMode>
     8b2:	84 ff       	sbrs	r24, 4
     8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <keypad_report+0xda>
     8b6:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <kpd_exitTestMode>
     8ba:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     8bc:	19 f4       	brne	.+6      	; 0x8c4 <keypad_report+0xda>
     8be:	4b d0       	rcall	.+150    	; 0x956 <led_allOff>
		kpd_exitTestMode = 0;
     8c0:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <kpd_exitTestMode>
	}
	kpd_prevState = kpd_currState;
     8c4:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <kpd_currState>
     8c8:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <kpd_prevState>
}
     8cc:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	c0 cf       	rjmp	.-128    	; 0x852 <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	be cf       	rjmp	.-132    	; 0x852 <keypad_report+0x68>
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
				kpd_block = true;
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
     8d6:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <kpd_block.5373>
     8da:	81 11       	cpse	r24, r1
     8dc:	e4 cf       	rjmp	.-56     	; 0x8a6 <keypad_report+0xbc>
     8de:	dd cf       	rjmp	.-70     	; 0x89a <keypad_report+0xb0>

000008e0 <keypad>:
	kpd_prevState = kpd_currState;
}

void keypad(void)
{
	keypad_poll();
     8e0:	dc de       	rcall	.-584    	; 0x69a <keypad_poll>
	keypad_report();
     8e2:	83 cf       	rjmp	.-250    	; 0x7ea <keypad_report>
     8e4:	08 95       	ret

000008e6 <led_updateState>:
     8e6:	e6 eb       	ldi	r30, 0xB6	; 182
void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     8e8:	f1 e2       	ldi	r31, 0x21	; 33
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	ac 01       	movw	r20, r24
     8f2:	02 2e       	mov	r0, r18
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <led_updateState+0x14>
     8f6:	55 95       	asr	r21
     8f8:	47 95       	ror	r20
     8fa:	0a 94       	dec	r0
     8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <led_updateState+0x10>
     8fe:	40 fd       	sbrc	r20, 0
     900:	60 83       	st	Z, r22
     902:	2f 5f       	subi	r18, 0xFF	; 255
     904:	3f 4f       	sbci	r19, 0xFF	; 255
     906:	31 96       	adiw	r30, 0x01	; 1
     908:	28 30       	cpi	r18, 0x08	; 8
     90a:	31 05       	cpc	r19, r1
     90c:	89 f7       	brne	.-30     	; 0x8f0 <led_updateState+0xa>
     90e:	08 95       	ret

00000910 <userActivity>:
     910:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     914:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <testMode>
     918:	c0 de       	rcall	.-640    	; 0x69a <keypad_poll>
     91a:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <testMode>
     91e:	84 ff       	sbrs	r24, 4
     920:	0a c0       	rjmp	.+20     	; 0x936 <userActivity+0x26>
     922:	60 df       	rcall	.-320    	; 0x7e4 <keypad_getState>
     924:	81 30       	cpi	r24, 0x01	; 1
     926:	49 f0       	breq	.+18     	; 0x93a <userActivity+0x2a>
     928:	16 de       	rcall	.-980    	; 0x556 <jstk_readMask>
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	81 11       	cpse	r24, r1
     92e:	01 c0       	rjmp	.+2      	; 0x932 <userActivity+0x22>
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	89 2f       	mov	r24, r25
     934:	03 c0       	rjmp	.+6      	; 0x93c <userActivity+0x2c>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	01 c0       	rjmp	.+2      	; 0x93c <userActivity+0x2c>
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	81 70       	andi	r24, 0x01	; 1
     93e:	08 95       	ret

00000940 <led_init>:
     940:	e0 e0       	ldi	r30, 0x00	; 0
     942:	f6 e0       	ldi	r31, 0x06	; 6
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	81 83       	std	Z+1, r24	; 0x01
     948:	85 83       	std	Z+5, r24	; 0x05
     94a:	e0 e2       	ldi	r30, 0x20	; 32
     94c:	f6 e0       	ldi	r31, 0x06	; 6
     94e:	80 e4       	ldi	r24, 0x40	; 64
     950:	81 83       	std	Z+1, r24	; 0x01
     952:	86 83       	std	Z+6, r24	; 0x06
     954:	08 95       	ret

00000956 <led_allOff>:
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	c3 cf       	rjmp	.-122    	; 0x8e6 <led_updateState>
     960:	08 95       	ret

00000962 <led_on>:
     962:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	be cf       	rjmp	.-132    	; 0x8e6 <led_updateState>
     96a:	08 95       	ret

0000096c <led_off>:
     96c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	b9 cf       	rjmp	.-142    	; 0x8e6 <led_updateState>
     974:	08 95       	ret

00000976 <led_toggle>:
     976:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     97a:	e6 eb       	ldi	r30, 0xB6	; 182
     97c:	f1 e2       	ldi	r31, 0x21	; 33
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	68 2f       	mov	r22, r24
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	ab 01       	movw	r20, r22
     98a:	02 2e       	mov	r0, r18
     98c:	02 c0       	rjmp	.+4      	; 0x992 <led_toggle+0x1c>
     98e:	55 95       	asr	r21
     990:	47 95       	ror	r20
     992:	0a 94       	dec	r0
     994:	e2 f7       	brpl	.-8      	; 0x98e <led_toggle+0x18>
     996:	40 ff       	sbrs	r20, 0
     998:	03 c0       	rjmp	.+6      	; 0x9a0 <led_toggle+0x2a>
     99a:	90 81       	ld	r25, Z
     99c:	98 27       	eor	r25, r24
     99e:	90 83       	st	Z, r25
     9a0:	2f 5f       	subi	r18, 0xFF	; 255
     9a2:	3f 4f       	sbci	r19, 0xFF	; 255
     9a4:	31 96       	adiw	r30, 0x01	; 1
     9a6:	28 30       	cpi	r18, 0x08	; 8
     9a8:	31 05       	cpc	r19, r1
     9aa:	71 f7       	brne	.-36     	; 0x988 <led_toggle+0x12>
     9ac:	08 95       	ret

000009ae <led_setState>:
     9ae:	e0 e0       	ldi	r30, 0x00	; 0
     9b0:	f6 e0       	ldi	r31, 0x06	; 6
     9b2:	9f ef       	ldi	r25, 0xFF	; 255
     9b4:	95 83       	std	Z+5, r25	; 0x05
     9b6:	86 83       	std	Z+6, r24	; 0x06
     9b8:	e6 eb       	ldi	r30, 0xB6	; 182
     9ba:	f1 e2       	ldi	r31, 0x21	; 33
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	ac 01       	movw	r20, r24
     9c4:	02 2e       	mov	r0, r18
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <led_setState+0x1e>
     9c8:	55 95       	asr	r21
     9ca:	47 95       	ror	r20
     9cc:	0a 94       	dec	r0
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <led_setState+0x1a>
     9d0:	41 70       	andi	r20, 0x01	; 1
     9d2:	41 93       	st	Z+, r20
     9d4:	2f 5f       	subi	r18, 0xFF	; 255
     9d6:	3f 4f       	sbci	r19, 0xFF	; 255
     9d8:	28 30       	cpi	r18, 0x08	; 8
     9da:	31 05       	cpc	r19, r1
     9dc:	91 f7       	brne	.-28     	; 0x9c2 <led_setState+0x14>
     9de:	08 95       	ret

000009e0 <led_getMap>:
     9e0:	e6 eb       	ldi	r30, 0xB6	; 182
     9e2:	f1 e2       	ldi	r31, 0x21	; 33
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	61 e0       	ldi	r22, 0x01	; 1
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	91 91       	ld	r25, Z+
     9f0:	99 23       	and	r25, r25
     9f2:	41 f0       	breq	.+16     	; 0xa04 <led_getMap+0x24>
     9f4:	ab 01       	movw	r20, r22
     9f6:	02 2e       	mov	r0, r18
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <led_getMap+0x1e>
     9fa:	44 0f       	add	r20, r20
     9fc:	55 1f       	adc	r21, r21
     9fe:	0a 94       	dec	r0
     a00:	e2 f7       	brpl	.-8      	; 0x9fa <led_getMap+0x1a>
     a02:	84 2b       	or	r24, r20
     a04:	2f 5f       	subi	r18, 0xFF	; 255
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	28 30       	cpi	r18, 0x08	; 8
     a0a:	31 05       	cpc	r19, r1
     a0c:	81 f7       	brne	.-32     	; 0x9ee <led_getMap+0xe>
     a0e:	08 95       	ret

00000a10 <led_usbTask>:
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	1f 92       	push	r1
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	e2 df       	rcall	.-60     	; 0x9e0 <led_getMap>
     a1c:	89 83       	std	Y+1, r24	; 0x01
     a1e:	ce 01       	movw	r24, r28
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	81 dc       	rcall	.-1790   	; 0x326 <udi_hid_led_send_report_in>
     a24:	0f 90       	pop	r0
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <testIndicator>:
}

void testIndicator(void) { // blink status LED when in test mode
    sof_ms++;
     a2c:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <sof_ms>
     a30:	90 91 c0 21 	lds	r25, 0x21C0	; 0x8021c0 <sof_ms+0x1>
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <sof_ms>
     a3a:	90 93 c0 21 	sts	0x21C0, r25	; 0x8021c0 <sof_ms+0x1>

    if ((PORTB.IN & PIN4_bm) == 0) {
     a3e:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     a42:	84 fd       	sbrc	r24, 4
     a44:	0f c0       	rjmp	.+30     	; 0xa64 <testIndicator+0x38>
        if (sof_ms >= 500) {
     a46:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <sof_ms>
     a4a:	90 91 c0 21 	lds	r25, 0x21C0	; 0x8021c0 <sof_ms+0x1>
     a4e:	84 3f       	cpi	r24, 0xF4	; 244
     a50:	91 40       	sbci	r25, 0x01	; 1
     a52:	78 f0       	brcs	.+30     	; 0xa72 <testIndicator+0x46>
void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     a54:	80 e4       	ldi	r24, 0x40	; 64
     a56:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>
    sof_ms++;

    if ((PORTB.IN & PIN4_bm) == 0) {
        if (sof_ms >= 500) {
            led_statusToggle();
            sof_ms = 0;
     a5a:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <sof_ms>
     a5e:	10 92 c0 21 	sts	0x21C0, r1	; 0x8021c0 <sof_ms+0x1>
     a62:	08 95       	ret

/* ---------------------------------------------------------------------- */
/* ----------------------------- Status LED ----------------------------- */
/* ---------------------------------------------------------------------- */
void led_statusOn(void) { // status LED on
    STATUS_LED_PORT.OUTCLR = LEDS_PIN;
     a64:	80 e4       	ldi	r24, 0x40	; 64
     a66:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
            led_statusToggle();
            sof_ms = 0;
        }
    } else {
        led_statusOn();
        sof_ms = 0;
     a6a:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <sof_ms>
     a6e:	10 92 c0 21 	sts	0x21C0, r1	; 0x8021c0 <sof_ms+0x1>
     a72:	08 95       	ret

00000a74 <startupSequence>:
            (keypad_getState()   == KEYPAD_PRESSED) ||
            (jstk_readMask()     != 0);
}

void startupSequence(uint8_t sequence) // startup LED animation
{
     a74:	6f 92       	push	r6
     a76:	7f 92       	push	r7
     a78:	8f 92       	push	r8
     a7a:	9f 92       	push	r9
     a7c:	af 92       	push	r10
     a7e:	bf 92       	push	r11
     a80:	cf 92       	push	r12
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	28 97       	sbiw	r28, 0x08	; 8
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	de bf       	out	0x3e, r29	; 62
    const uint8_t seq[8] = {
     a9a:	98 e0       	ldi	r25, 0x08	; 8
     a9c:	e0 e7       	ldi	r30, 0x70	; 112
     a9e:	f1 e2       	ldi	r31, 0x21	; 33
     aa0:	de 01       	movw	r26, r28
     aa2:	11 96       	adiw	r26, 0x01	; 1
     aa4:	01 90       	ld	r0, Z+
     aa6:	0d 92       	st	X+, r0
     aa8:	9a 95       	dec	r25
     aaa:	e1 f7       	brne	.-8      	; 0xaa4 <startupSequence+0x30>
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
     aac:	83 30       	cpi	r24, 0x03	; 3
     aae:	09 f4       	brne	.+2      	; 0xab2 <startupSequence+0x3e>
     ab0:	0c c1       	rjmp	.+536    	; 0xcca <startupSequence+0x256>
     ab2:	38 f4       	brcc	.+14     	; 0xac2 <startupSequence+0x4e>
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	09 f4       	brne	.+2      	; 0xaba <startupSequence+0x46>
     ab8:	42 c0       	rjmp	.+132    	; 0xb3e <startupSequence+0xca>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	09 f4       	brne	.+2      	; 0xac0 <startupSequence+0x4c>
     abe:	a5 c0       	rjmp	.+330    	; 0xc0a <startupSequence+0x196>
     ac0:	31 c2       	rjmp	.+1122   	; 0xf24 <startupSequence+0x4b0>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	09 f4       	brne	.+2      	; 0xac8 <startupSequence+0x54>
     ac6:	61 c1       	rjmp	.+706    	; 0xd8a <startupSequence+0x316>
     ac8:	85 30       	cpi	r24, 0x05	; 5
     aca:	09 f4       	brne	.+2      	; 0xace <startupSequence+0x5a>
     acc:	ba c1       	rjmp	.+884    	; 0xe42 <startupSequence+0x3ce>
     ace:	2a c2       	rjmp	.+1108   	; 0xf24 <startupSequence+0x4b0>
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     ad0:	f8 01       	movw	r30, r16
     ad2:	f1 90       	ld	r15, Z+
     ad4:	8f 01       	movw	r16, r30
     ad6:	8f 2d       	mov	r24, r15
     ad8:	44 df       	rcall	.-376    	; 0x962 <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ada:	ff e0       	ldi	r31, 0x0F	; 15
     adc:	28 e9       	ldi	r18, 0x98	; 152
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	f1 50       	subi	r31, 0x01	; 1
     ae2:	20 40       	sbci	r18, 0x00	; 0
     ae4:	80 40       	sbci	r24, 0x00	; 0
     ae6:	e1 f7       	brne	.-8      	; 0xae0 <startupSequence+0x6c>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <startupSequence+0x76>
     aea:	00 00       	nop
                    _delay_ms(850);
                    led_off(seq[i]);
     aec:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     aee:	3e df       	rcall	.-388    	; 0x96c <led_off>
     af0:	0f df       	rcall	.-482    	; 0x910 <userActivity>
     af2:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5526>

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
     af6:	a0 16       	cp	r10, r16
     af8:	b1 06       	cpc	r11, r17
     afa:	09 f4       	brne	.+2      	; 0xafe <startupSequence+0x8a>
     afc:	b9 c1       	rjmp	.+882    	; 0xe70 <startupSequence+0x3fc>
     afe:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     b02:	88 23       	and	r24, r24
     b04:	29 f3       	breq	.-54     	; 0xad0 <startupSequence+0x5c>
     b06:	b4 c1       	rjmp	.+872    	; 0xe70 <startupSequence+0x3fc>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     b08:	f8 01       	movw	r30, r16
     b0a:	f2 90       	ld	r15, -Z
     b0c:	8f 01       	movw	r16, r30
     b0e:	8f 2d       	mov	r24, r15
     b10:	28 df       	rcall	.-432    	; 0x962 <led_on>
     b12:	ff e0       	ldi	r31, 0x0F	; 15
     b14:	28 e9       	ldi	r18, 0x98	; 152
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	f1 50       	subi	r31, 0x01	; 1
     b1a:	20 40       	sbci	r18, 0x00	; 0
     b1c:	80 40       	sbci	r24, 0x00	; 0
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <startupSequence+0xa4>
                    _delay_ms(850);
                    led_off(seq[i]);
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <startupSequence+0xae>
     b22:	00 00       	nop
     b24:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     b26:	22 df       	rcall	.-444    	; 0x96c <led_off>
     b28:	f3 de       	rcall	.-538    	; 0x910 <userActivity>
     b2a:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5526>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     b2e:	0c 15       	cp	r16, r12
     b30:	1d 05       	cpc	r17, r13
     b32:	61 f0       	breq	.+24     	; 0xb4c <startupSequence+0xd8>
     b34:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     b38:	88 23       	and	r24, r24
     b3a:	31 f3       	breq	.-52     	; 0xb08 <startupSequence+0x94>
     b3c:	07 c0       	rjmp	.+14     	; 0xb4c <startupSequence+0xd8>
     b3e:	5e 01       	movw	r10, r28
     b40:	99 e0       	ldi	r25, 0x09	; 9
     b42:	a9 0e       	add	r10, r25
     b44:	b1 1c       	adc	r11, r1
     b46:	fe 01       	movw	r30, r28
     b48:	31 96       	adiw	r30, 0x01	; 1
     b4a:	6f 01       	movw	r12, r30
    static volatile bool user_active = false;

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
     b4c:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     b50:	81 11       	cpse	r24, r1
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <startupSequence+0xec>
                for (int i = 0; i < 8 && !user_active; i++) {
     b54:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     b58:	88 23       	and	r24, r24
     b5a:	09 f4       	brne	.+2      	; 0xb5e <startupSequence+0xea>
     b5c:	ce c1       	rjmp	.+924    	; 0xefa <startupSequence+0x486>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
            }
            led_allOff();
     b5e:	88 c1       	rjmp	.+784    	; 0xe70 <startupSequence+0x3fc>
            break;
     b60:	fa de       	rcall	.-524    	; 0x956 <led_allOff>
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     b62:	e0 c1       	rjmp	.+960    	; 0xf24 <startupSequence+0x4b0>
     b64:	f8 01       	movw	r30, r16
     b66:	72 90       	ld	r7, -Z
     b68:	8f 01       	movw	r16, r30
     b6a:	87 2d       	mov	r24, r7
                    led_on(seq[right]);
     b6c:	fa de       	rcall	.-524    	; 0x962 <led_on>
     b6e:	f6 01       	movw	r30, r12
     b70:	f1 90       	ld	r15, Z+
     b72:	6f 01       	movw	r12, r30
     b74:	8f 2d       	mov	r24, r15
     b76:	f5 de       	rcall	.-534    	; 0x962 <led_on>
     b78:	ff e1       	ldi	r31, 0x1F	; 31
     b7a:	2f eb       	ldi	r18, 0xBF	; 191
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	f1 50       	subi	r31, 0x01	; 1
     b80:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     b82:	80 40       	sbci	r24, 0x00	; 0
     b84:	e1 f7       	brne	.-8      	; 0xb7e <startupSequence+0x10a>
                    led_off(seq[right]);
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <startupSequence+0x114>
     b88:	00 00       	nop
     b8a:	87 2d       	mov	r24, r7

                    keypad_poll();
     b8c:	ef de       	rcall	.-546    	; 0x96c <led_off>
     b8e:	8f 2d       	mov	r24, r15
                    if (keypad_getState() == KEYPAD_PRESSED)
     b90:	ed de       	rcall	.-550    	; 0x96c <led_off>
     b92:	83 dd       	rcall	.-1274   	; 0x69a <keypad_poll>
     b94:	27 de       	rcall	.-946    	; 0x7e4 <keypad_getState>
     b96:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     b98:	11 f4       	brne	.+4      	; 0xb9e <startupSequence+0x12a>
     b9a:	e0 92 b5 21 	sts	0x21B5, r14	; 0x8021b5 <user_active.5526>
                    if (jstk_readMask() != 0)
     b9e:	db dc       	rcall	.-1610   	; 0x556 <jstk_readMask>
     ba0:	81 11       	cpse	r24, r1
                        user_active = true;
     ba2:	e0 92 b5 21 	sts	0x21B5, r14	; 0x8021b5 <user_active.5526>
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     ba6:	08 15       	cp	r16, r8
     ba8:	19 05       	cpc	r17, r9
     baa:	09 f4       	brne	.+2      	; 0xbae <startupSequence+0x13a>
     bac:	66 c1       	rjmp	.+716    	; 0xe7a <startupSequence+0x406>
     bae:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     bb2:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     bb4:	b9 f2       	breq	.-82     	; 0xb64 <startupSequence+0xf0>
     bb6:	61 c1       	rjmp	.+706    	; 0xe7a <startupSequence+0x406>
     bb8:	f3 01       	movw	r30, r6
     bba:	d1 90       	ld	r13, Z+
     bbc:	3f 01       	movw	r6, r30
     bbe:	8d 2d       	mov	r24, r13
                    led_on(seq[right]);
     bc0:	d0 de       	rcall	.-608    	; 0x962 <led_on>
     bc2:	f8 01       	movw	r30, r16
     bc4:	f2 90       	ld	r15, -Z
     bc6:	8f 01       	movw	r16, r30
     bc8:	8f 2d       	mov	r24, r15
     bca:	cb de       	rcall	.-618    	; 0x962 <led_on>
     bcc:	ff e1       	ldi	r31, 0x1F	; 31
     bce:	2f eb       	ldi	r18, 0xBF	; 191
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	f1 50       	subi	r31, 0x01	; 1
     bd4:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     bd6:	80 40       	sbci	r24, 0x00	; 0
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <startupSequence+0x15e>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <startupSequence+0x168>
                    led_off(seq[right]);
     bdc:	00 00       	nop
     bde:	8d 2d       	mov	r24, r13
     be0:	c5 de       	rcall	.-630    	; 0x96c <led_off>

                    keypad_poll();
     be2:	8f 2d       	mov	r24, r15
     be4:	c3 de       	rcall	.-634    	; 0x96c <led_off>
                    if (keypad_getState() == KEYPAD_PRESSED)
     be6:	59 dd       	rcall	.-1358   	; 0x69a <keypad_poll>
     be8:	fd dd       	rcall	.-1030   	; 0x7e4 <keypad_getState>
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	11 f4       	brne	.+4      	; 0xbf2 <startupSequence+0x17e>
                        user_active = true;
     bee:	e0 92 b5 21 	sts	0x21B5, r14	; 0x8021b5 <user_active.5526>
                    if (jstk_readMask() != 0)
     bf2:	b1 dc       	rcall	.-1694   	; 0x556 <jstk_readMask>
     bf4:	81 11       	cpse	r24, r1
     bf6:	e0 92 b5 21 	sts	0x21B5, r14	; 0x8021b5 <user_active.5526>
                        user_active = true;
     bfa:	0a 15       	cp	r16, r10
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     bfc:	1b 05       	cpc	r17, r11
     bfe:	71 f0       	breq	.+28     	; 0xc1c <startupSequence+0x1a8>
     c00:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     c04:	88 23       	and	r24, r24
     c06:	c1 f2       	breq	.-80     	; 0xbb8 <startupSequence+0x144>
     c08:	09 c0       	rjmp	.+18     	; 0xc1c <startupSequence+0x1a8>
     c0a:	fe 01       	movw	r30, r28
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	4f 01       	movw	r8, r30

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     c10:	ee 24       	eor	r14, r14
     c12:	e3 94       	inc	r14
     c14:	5e 01       	movw	r10, r28
     c16:	f5 e0       	ldi	r31, 0x05	; 5
     c18:	af 0e       	add	r10, r31
            }
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
     c1a:	b1 1c       	adc	r11, r1
     c1c:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
                for (int i = 0; i < 4 && !user_active; i++) {
     c20:	81 11       	cpse	r24, r1
     c22:	0a c0       	rjmp	.+20     	; 0xc38 <startupSequence+0x1c4>
     c24:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     c28:	81 11       	cpse	r24, r1
     c2a:	27 c1       	rjmp	.+590    	; 0xe7a <startupSequence+0x406>
     c2c:	6e 01       	movw	r12, r28
     c2e:	25 e0       	ldi	r18, 0x05	; 5
     c30:	c2 0e       	add	r12, r18
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     c32:	d1 1c       	adc	r13, r1
     c34:	86 01       	movw	r16, r12
            break;
     c36:	96 cf       	rjmp	.-212    	; 0xb64 <startupSequence+0xf0>
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     c38:	8e de       	rcall	.-740    	; 0x956 <led_allOff>
     c3a:	74 c1       	rjmp	.+744    	; 0xf24 <startupSequence+0x4b0>
     c3c:	f8 01       	movw	r30, r16
     c3e:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     c40:	8f 01       	movw	r16, r30
     c42:	8f de       	rcall	.-738    	; 0x962 <led_on>
     c44:	f7 01       	movw	r30, r14
     c46:	81 91       	ld	r24, Z+
     c48:	7f 01       	movw	r14, r30
     c4a:	8b de       	rcall	.-746    	; 0x962 <led_on>
     c4c:	ff e2       	ldi	r31, 0x2F	; 47
     c4e:	27 e5       	ldi	r18, 0x57	; 87
     c50:	85 e0       	ldi	r24, 0x05	; 5
     c52:	f1 50       	subi	r31, 0x01	; 1
     c54:	20 40       	sbci	r18, 0x00	; 0
     c56:	80 40       	sbci	r24, 0x00	; 0
     c58:	e1 f7       	brne	.-8      	; 0xc52 <startupSequence+0x1de>
                    _delay_ms(1750);

                    keypad_poll();
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <startupSequence+0x1e8>
     c5c:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     c5e:	1d dd       	rcall	.-1478   	; 0x69a <keypad_poll>
     c60:	c1 dd       	rcall	.-1150   	; 0x7e4 <keypad_getState>
     c62:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     c64:	11 f4       	brne	.+4      	; 0xc6a <startupSequence+0x1f6>
     c66:	90 92 b5 21 	sts	0x21B5, r9	; 0x8021b5 <user_active.5526>
                    if (jstk_readMask() != 0)
     c6a:	75 dc       	rcall	.-1814   	; 0x556 <jstk_readMask>
     c6c:	81 11       	cpse	r24, r1
                        user_active = true;
     c6e:	90 92 b5 21 	sts	0x21B5, r9	; 0x8021b5 <user_active.5526>
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     c72:	a0 16       	cp	r10, r16
     c74:	b1 06       	cpc	r11, r17
     c76:	09 f4       	brne	.+2      	; 0xc7a <startupSequence+0x206>
     c78:	0b c1       	rjmp	.+534    	; 0xe90 <startupSequence+0x41c>
     c7a:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     c7e:	88 23       	and	r24, r24
     c80:	e9 f2       	breq	.-70     	; 0xc3c <startupSequence+0x1c8>
     c82:	06 c1       	rjmp	.+524    	; 0xe90 <startupSequence+0x41c>
     c84:	f7 01       	movw	r30, r14
     c86:	81 91       	ld	r24, Z+
                    led_off(seq[right]);
     c88:	7f 01       	movw	r14, r30
     c8a:	70 de       	rcall	.-800    	; 0x96c <led_off>
     c8c:	f8 01       	movw	r30, r16
     c8e:	82 91       	ld	r24, -Z
     c90:	8f 01       	movw	r16, r30
     c92:	6c de       	rcall	.-808    	; 0x96c <led_off>
     c94:	ff e2       	ldi	r31, 0x2F	; 47
     c96:	27 e5       	ldi	r18, 0x57	; 87
     c98:	85 e0       	ldi	r24, 0x05	; 5
     c9a:	f1 50       	subi	r31, 0x01	; 1
     c9c:	20 40       	sbci	r18, 0x00	; 0
     c9e:	80 40       	sbci	r24, 0x00	; 0
     ca0:	e1 f7       	brne	.-8      	; 0xc9a <startupSequence+0x226>
     ca2:	00 c0       	rjmp	.+0      	; 0xca4 <startupSequence+0x230>
                    _delay_ms(1750);

                    keypad_poll();
     ca4:	00 00       	nop
     ca6:	f9 dc       	rcall	.-1550   	; 0x69a <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     ca8:	9d dd       	rcall	.-1222   	; 0x7e4 <keypad_getState>
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	11 f4       	brne	.+4      	; 0xcb2 <startupSequence+0x23e>
     cae:	90 92 b5 21 	sts	0x21B5, r9	; 0x8021b5 <user_active.5526>
                        user_active = true;
     cb2:	51 dc       	rcall	.-1886   	; 0x556 <jstk_readMask>
                    if (jstk_readMask() != 0)
     cb4:	81 11       	cpse	r24, r1
     cb6:	90 92 b5 21 	sts	0x21B5, r9	; 0x8021b5 <user_active.5526>
                        user_active = true;
     cba:	c0 16       	cp	r12, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     cbc:	d1 06       	cpc	r13, r17
     cbe:	71 f0       	breq	.+28     	; 0xcdc <startupSequence+0x268>
     cc0:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     cc4:	88 23       	and	r24, r24
     cc6:	f1 f2       	breq	.-68     	; 0xc84 <startupSequence+0x210>
     cc8:	09 c0       	rjmp	.+18     	; 0xcdc <startupSequence+0x268>
     cca:	fe 01       	movw	r30, r28
     ccc:	31 96       	adiw	r30, 0x01	; 1

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     cce:	5f 01       	movw	r10, r30
     cd0:	99 24       	eor	r9, r9
     cd2:	93 94       	inc	r9
     cd4:	6e 01       	movw	r12, r28
     cd6:	f5 e0       	ldi	r31, 0x05	; 5
     cd8:	cf 0e       	add	r12, r31
            }
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
     cda:	d1 1c       	adc	r13, r1
     cdc:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
                for (int i = 0; i < 4 && !user_active; i++) {
     ce0:	81 11       	cpse	r24, r1
     ce2:	0a c0       	rjmp	.+20     	; 0xcf8 <startupSequence+0x284>
     ce4:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     ce8:	81 11       	cpse	r24, r1
     cea:	d2 c0       	rjmp	.+420    	; 0xe90 <startupSequence+0x41c>
     cec:	7e 01       	movw	r14, r28
     cee:	25 e0       	ldi	r18, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     cf0:	e2 0e       	add	r14, r18
     cf2:	f1 1c       	adc	r15, r1
            break;
     cf4:	87 01       	movw	r16, r14
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     cf6:	a2 cf       	rjmp	.-188    	; 0xc3c <startupSequence+0x1c8>
     cf8:	2e de       	rcall	.-932    	; 0x956 <led_allOff>
     cfa:	14 c1       	rjmp	.+552    	; 0xf24 <startupSequence+0x4b0>
     cfc:	f8 01       	movw	r30, r16
     cfe:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     d00:	8f 01       	movw	r16, r30
     d02:	2f de       	rcall	.-930    	; 0x962 <led_on>
     d04:	f7 01       	movw	r30, r14
     d06:	81 91       	ld	r24, Z+
     d08:	7f 01       	movw	r14, r30
     d0a:	2b de       	rcall	.-938    	; 0x962 <led_on>
     d0c:	ff e2       	ldi	r31, 0x2F	; 47
     d0e:	27 e5       	ldi	r18, 0x57	; 87
     d10:	85 e0       	ldi	r24, 0x05	; 5
     d12:	f1 50       	subi	r31, 0x01	; 1
     d14:	20 40       	sbci	r18, 0x00	; 0
     d16:	80 40       	sbci	r24, 0x00	; 0
                    _delay_ms(1750);

                    keypad_poll();
     d18:	e1 f7       	brne	.-8      	; 0xd12 <startupSequence+0x29e>
                    if (keypad_getState() == KEYPAD_PRESSED)
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <startupSequence+0x2a8>
     d1c:	00 00       	nop
     d1e:	bd dc       	rcall	.-1670   	; 0x69a <keypad_poll>
                        user_active = true;
     d20:	61 dd       	rcall	.-1342   	; 0x7e4 <keypad_getState>
                    if (jstk_readMask() != 0)
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	11 f4       	brne	.+4      	; 0xd2a <startupSequence+0x2b6>
     d26:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5526>
                        user_active = true;
     d2a:	15 dc       	rcall	.-2006   	; 0x556 <jstk_readMask>
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     d2c:	81 11       	cpse	r24, r1
     d2e:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5526>
     d32:	0c 15       	cp	r16, r12
     d34:	1d 05       	cpc	r17, r13
     d36:	09 f4       	brne	.+2      	; 0xd3a <startupSequence+0x2c6>
     d38:	b6 c0       	rjmp	.+364    	; 0xea6 <startupSequence+0x432>
     d3a:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     d3e:	88 23       	and	r24, r24
     d40:	e9 f2       	breq	.-70     	; 0xcfc <startupSequence+0x288>
     d42:	b1 c0       	rjmp	.+354    	; 0xea6 <startupSequence+0x432>
     d44:	f8 01       	movw	r30, r16
     d46:	82 91       	ld	r24, -Z
                    led_off(seq[right]);
     d48:	8f 01       	movw	r16, r30
     d4a:	10 de       	rcall	.-992    	; 0x96c <led_off>
     d4c:	f7 01       	movw	r30, r14
     d4e:	81 91       	ld	r24, Z+
     d50:	7f 01       	movw	r14, r30
     d52:	0c de       	rcall	.-1000   	; 0x96c <led_off>
     d54:	ff e2       	ldi	r31, 0x2F	; 47
     d56:	27 e5       	ldi	r18, 0x57	; 87
     d58:	85 e0       	ldi	r24, 0x05	; 5
     d5a:	f1 50       	subi	r31, 0x01	; 1
     d5c:	20 40       	sbci	r18, 0x00	; 0
     d5e:	80 40       	sbci	r24, 0x00	; 0
     d60:	e1 f7       	brne	.-8      	; 0xd5a <startupSequence+0x2e6>
                    _delay_ms(1750);

                    keypad_poll();
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <startupSequence+0x2f0>
     d64:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     d66:	99 dc       	rcall	.-1742   	; 0x69a <keypad_poll>
     d68:	3d dd       	rcall	.-1414   	; 0x7e4 <keypad_getState>
     d6a:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     d6c:	11 f4       	brne	.+4      	; 0xd72 <startupSequence+0x2fe>
                    if (jstk_readMask() != 0)
     d6e:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5526>
     d72:	f1 db       	rcall	.-2078   	; 0x556 <jstk_readMask>
                        user_active = true;
     d74:	81 11       	cpse	r24, r1
     d76:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5526>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     d7a:	c0 16       	cp	r12, r16
     d7c:	d1 06       	cpc	r13, r17
     d7e:	51 f0       	breq	.+20     	; 0xd94 <startupSequence+0x320>
     d80:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     d84:	88 23       	and	r24, r24
     d86:	f1 f2       	breq	.-68     	; 0xd44 <startupSequence+0x2d0>
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <startupSequence+0x320>

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     d8a:	fe 01       	movw	r30, r28
     d8c:	31 96       	adiw	r30, 0x01	; 1
            }
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
     d8e:	6f 01       	movw	r12, r30
     d90:	bb 24       	eor	r11, r11
     d92:	b3 94       	inc	r11
     d94:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
                for (int i = 0; i < 4 && !user_active; i++) {
     d98:	81 11       	cpse	r24, r1
     d9a:	0a c0       	rjmp	.+20     	; 0xdb0 <startupSequence+0x33c>
     d9c:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     da0:	81 11       	cpse	r24, r1
     da2:	81 c0       	rjmp	.+258    	; 0xea6 <startupSequence+0x432>
     da4:	7e 01       	movw	r14, r28
     da6:	f5 e0       	ldi	r31, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     da8:	ef 0e       	add	r14, r31
     daa:	f1 1c       	adc	r15, r1
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     dac:	87 01       	movw	r16, r14
     dae:	a6 cf       	rjmp	.-180    	; 0xcfc <startupSequence+0x288>
     db0:	d2 dd       	rcall	.-1116   	; 0x956 <led_allOff>
     db2:	b8 c0       	rjmp	.+368    	; 0xf24 <startupSequence+0x4b0>
     db4:	f7 01       	movw	r30, r14
                    led_on(seq[right]);
     db6:	81 91       	ld	r24, Z+
     db8:	7f 01       	movw	r14, r30
     dba:	d3 dd       	rcall	.-1114   	; 0x962 <led_on>
     dbc:	f8 01       	movw	r30, r16
     dbe:	82 91       	ld	r24, -Z
     dc0:	8f 01       	movw	r16, r30
     dc2:	cf dd       	rcall	.-1122   	; 0x962 <led_on>
     dc4:	ff e2       	ldi	r31, 0x2F	; 47
     dc6:	27 e5       	ldi	r18, 0x57	; 87
     dc8:	85 e0       	ldi	r24, 0x05	; 5
     dca:	f1 50       	subi	r31, 0x01	; 1
                    _delay_ms(1750);

                    keypad_poll();
     dcc:	20 40       	sbci	r18, 0x00	; 0
     dce:	80 40       	sbci	r24, 0x00	; 0
                    if (keypad_getState() == KEYPAD_PRESSED)
     dd0:	e1 f7       	brne	.-8      	; 0xdca <startupSequence+0x356>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <startupSequence+0x360>
     dd4:	00 00       	nop
     dd6:	61 dc       	rcall	.-1854   	; 0x69a <keypad_poll>
                        user_active = true;
     dd8:	05 dd       	rcall	.-1526   	; 0x7e4 <keypad_getState>
     dda:	81 30       	cpi	r24, 0x01	; 1
                    if (jstk_readMask() != 0)
     ddc:	11 f4       	brne	.+4      	; 0xde2 <startupSequence+0x36e>
     dde:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5526>
                        user_active = true;
     de2:	b9 db       	rcall	.-2190   	; 0x556 <jstk_readMask>
     de4:	81 11       	cpse	r24, r1
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
     de6:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5526>
     dea:	0c 15       	cp	r16, r12
     dec:	1d 05       	cpc	r17, r13
     dee:	09 f4       	brne	.+2      	; 0xdf2 <startupSequence+0x37e>
     df0:	64 c0       	rjmp	.+200    	; 0xeba <startupSequence+0x446>
     df2:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     df6:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     df8:	e9 f2       	breq	.-70     	; 0xdb4 <startupSequence+0x340>
     dfa:	5f c0       	rjmp	.+190    	; 0xeba <startupSequence+0x446>
     dfc:	f7 01       	movw	r30, r14
     dfe:	81 91       	ld	r24, Z+
     e00:	7f 01       	movw	r14, r30
                    led_off(seq[right]);
     e02:	b4 dd       	rcall	.-1176   	; 0x96c <led_off>
     e04:	f8 01       	movw	r30, r16
     e06:	82 91       	ld	r24, -Z
     e08:	8f 01       	movw	r16, r30
     e0a:	b0 dd       	rcall	.-1184   	; 0x96c <led_off>
     e0c:	ff e2       	ldi	r31, 0x2F	; 47
     e0e:	27 e5       	ldi	r18, 0x57	; 87
     e10:	85 e0       	ldi	r24, 0x05	; 5
     e12:	f1 50       	subi	r31, 0x01	; 1
     e14:	20 40       	sbci	r18, 0x00	; 0
     e16:	80 40       	sbci	r24, 0x00	; 0
     e18:	e1 f7       	brne	.-8      	; 0xe12 <startupSequence+0x39e>
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <startupSequence+0x3a8>
                    _delay_ms(1750);

                    keypad_poll();
     e1c:	00 00       	nop
     e1e:	3d dc       	rcall	.-1926   	; 0x69a <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     e20:	e1 dc       	rcall	.-1598   	; 0x7e4 <keypad_getState>
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	11 f4       	brne	.+4      	; 0xe2a <startupSequence+0x3b6>
     e26:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5526>
                        user_active = true;
     e2a:	95 db       	rcall	.-2262   	; 0x556 <jstk_readMask>
                    if (jstk_readMask() != 0)
     e2c:	81 11       	cpse	r24, r1
     e2e:	b0 92 b5 21 	sts	0x21B5, r11	; 0x8021b5 <user_active.5526>
                        user_active = true;
     e32:	0c 15       	cp	r16, r12
     e34:	1d 05       	cpc	r17, r13
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e36:	59 f0       	breq	.+22     	; 0xe4e <startupSequence+0x3da>
     e38:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     e3c:	88 23       	and	r24, r24
     e3e:	f1 f2       	breq	.-68     	; 0xdfc <startupSequence+0x388>
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <startupSequence+0x3da>
     e42:	6e 01       	movw	r12, r28
     e44:	95 e0       	ldi	r25, 0x05	; 5
     e46:	c9 0e       	add	r12, r25
     e48:	d1 1c       	adc	r13, r1
     e4a:	bb 24       	eor	r11, r11
     e4c:	b3 94       	inc	r11

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     e4e:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
            }
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
     e52:	81 11       	cpse	r24, r1
     e54:	0b c0       	rjmp	.+22     	; 0xe6c <startupSequence+0x3f8>
     e56:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
                for (int i = 3; i >= 0 && !user_active; i--) {
     e5a:	81 11       	cpse	r24, r1
     e5c:	2e c0       	rjmp	.+92     	; 0xeba <startupSequence+0x446>
     e5e:	fe 01       	movw	r30, r28
     e60:	31 96       	adiw	r30, 0x01	; 1
     e62:	7f 01       	movw	r14, r30
     e64:	8e 01       	movw	r16, r28
     e66:	07 5f       	subi	r16, 0xF7	; 247
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	a4 cf       	rjmp	.-184    	; 0xdb4 <startupSequence+0x340>
     e6c:	74 dd       	rcall	.-1304   	; 0x956 <led_allOff>
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     e6e:	5a c0       	rjmp	.+180    	; 0xf24 <startupSequence+0x4b0>
     e70:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     e74:	88 23       	and	r24, r24
     e76:	61 f1       	breq	.+88     	; 0xed0 <startupSequence+0x45c>
     e78:	69 ce       	rjmp	.-814    	; 0xb4c <startupSequence+0xd8>
     e7a:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e7e:	81 11       	cpse	r24, r1
     e80:	cd ce       	rjmp	.-614    	; 0xc1c <startupSequence+0x1a8>
     e82:	ce 01       	movw	r24, r28
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	3c 01       	movw	r6, r24
     e88:	8e 01       	movw	r16, r28
     e8a:	07 5f       	subi	r16, 0xF7	; 247
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	94 ce       	rjmp	.-728    	; 0xbb8 <startupSequence+0x144>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e90:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     e94:	81 11       	cpse	r24, r1
     e96:	22 cf       	rjmp	.-444    	; 0xcdc <startupSequence+0x268>
     e98:	fe 01       	movw	r30, r28
     e9a:	31 96       	adiw	r30, 0x01	; 1
     e9c:	7f 01       	movw	r14, r30
     e9e:	8e 01       	movw	r16, r28
     ea0:	07 5f       	subi	r16, 0xF7	; 247
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     ea4:	ef ce       	rjmp	.-546    	; 0xc84 <startupSequence+0x210>
     ea6:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     eaa:	81 11       	cpse	r24, r1
     eac:	73 cf       	rjmp	.-282    	; 0xd94 <startupSequence+0x320>
     eae:	7e 01       	movw	r14, r28
     eb0:	f5 e0       	ldi	r31, 0x05	; 5
     eb2:	ef 0e       	add	r14, r31
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     eb4:	f1 1c       	adc	r15, r1
     eb6:	87 01       	movw	r16, r14
     eb8:	45 cf       	rjmp	.-374    	; 0xd44 <startupSequence+0x2d0>
     eba:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <user_active.5526>
     ebe:	81 11       	cpse	r24, r1
     ec0:	c6 cf       	rjmp	.-116    	; 0xe4e <startupSequence+0x3da>
     ec2:	ce 01       	movw	r24, r28
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	7c 01       	movw	r14, r24
     ec8:	8e 01       	movw	r16, r28
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     eca:	07 5f       	subi	r16, 0xF7	; 247
     ecc:	1f 4f       	sbci	r17, 0xFF	; 255
     ece:	96 cf       	rjmp	.-212    	; 0xdfc <startupSequence+0x388>
     ed0:	18 85       	ldd	r17, Y+8	; 0x08
     ed2:	81 2f       	mov	r24, r17
     ed4:	46 dd       	rcall	.-1396   	; 0x962 <led_on>
     ed6:	9f e0       	ldi	r25, 0x0F	; 15
     ed8:	e8 e9       	ldi	r30, 0x98	; 152
     eda:	f2 e0       	ldi	r31, 0x02	; 2
     edc:	91 50       	subi	r25, 0x01	; 1
     ede:	e0 40       	sbci	r30, 0x00	; 0
     ee0:	f0 40       	sbci	r31, 0x00	; 0
     ee2:	e1 f7       	brne	.-8      	; 0xedc <startupSequence+0x468>
                    _delay_ms(850);
                    led_off(seq[i]);
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <startupSequence+0x472>
     ee6:	00 00       	nop
     ee8:	81 2f       	mov	r24, r17

                    user_active = userActivity();
     eea:	40 dd       	rcall	.-1408   	; 0x96c <led_off>
     eec:	11 dd       	rcall	.-1502   	; 0x910 <userActivity>
     eee:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5526>
     ef2:	8e 01       	movw	r16, r28
     ef4:	08 5f       	subi	r16, 0xF8	; 248
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	1d ce       	rjmp	.-966    	; 0xb34 <startupSequence+0xc0>
    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     efa:	19 81       	ldd	r17, Y+1	; 0x01
     efc:	81 2f       	mov	r24, r17
     efe:	31 dd       	rcall	.-1438   	; 0x962 <led_on>
     f00:	2f e0       	ldi	r18, 0x0F	; 15
     f02:	88 e9       	ldi	r24, 0x98	; 152
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	21 50       	subi	r18, 0x01	; 1
     f08:	80 40       	sbci	r24, 0x00	; 0
     f0a:	90 40       	sbci	r25, 0x00	; 0
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <startupSequence+0x492>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <startupSequence+0x49c>
     f10:	00 00       	nop
     f12:	81 2f       	mov	r24, r17
                    _delay_ms(850);
                    led_off(seq[i]);
     f14:	2b dd       	rcall	.-1450   	; 0x96c <led_off>
     f16:	fc dc       	rcall	.-1544   	; 0x910 <userActivity>
     f18:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <user_active.5526>

                    user_active = userActivity();
     f1c:	8e 01       	movw	r16, r28
     f1e:	0e 5f       	subi	r16, 0xFE	; 254
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
     f22:	ed cd       	rjmp	.-1062   	; 0xafe <startupSequence+0x8a>
     f24:	28 96       	adiw	r28, 0x08	; 8
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	de bf       	out	0x3e, r29	; 62
            led_allOff();
            break;
        default:
            break;
    }
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	cf 90       	pop	r12
     f3a:	bf 90       	pop	r11
     f3c:	af 90       	pop	r10
     f3e:	9f 90       	pop	r9
     f40:	8f 90       	pop	r8
     f42:	7f 90       	pop	r7
     f44:	6f 90       	pop	r6
     f46:	08 95       	ret

00000f48 <io_ui_process>:
#include "keypad.h"
#include "joystick.h"


void io_ui_process(void) {
	io_init();
     f48:	1d ca       	rjmp	.-3014   	; 0x384 <io_init>
     f4a:	08 95       	ret

00000f4c <startup_ui_process>:
}

void startup_ui_process(uint8_t sequence) {
	startupSequence(sequence);
     f4c:	93 cd       	rjmp	.-1242   	; 0xa74 <startupSequence>
     f4e:	08 95       	ret

00000f50 <jstk_ui_process>:
}

void jstk_ui_process(void) {
	joystick();
     f50:	58 cb       	rjmp	.-2384   	; 0x602 <joystick>
     f52:	08 95       	ret

00000f54 <kbd_ui_process>:
}

void kbd_ui_process(void) {
	keypad();
     f54:	c5 cc       	rjmp	.-1654   	; 0x8e0 <keypad>
     f56:	08 95       	ret

00000f58 <ui_led_report>:
}

void ui_led_report(uint8_t const *mask) {
	led_setState(mask[0]);
     f58:	fc 01       	movw	r30, r24
     f5a:	80 81       	ld	r24, Z
     f5c:	28 cd       	rjmp	.-1456   	; 0x9ae <led_setState>
     f5e:	08 95       	ret

00000f60 <led_ui_process>:
}

void led_ui_process(void) {
	led_usbTask();
     f60:	57 cd       	rjmp	.-1362   	; 0xa10 <led_usbTask>
     f62:	08 95       	ret

00000f64 <status_ui_process>:
}

void status_ui_process(void) {
	testIndicator();
     f64:	63 cd       	rjmp	.-1338   	; 0xa2c <testIndicator>
     f66:	08 95       	ret

00000f68 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	27 97       	sbiw	r28, 0x07	; 7
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     f80:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     f84:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     f88:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     f8c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     f90:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     f94:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     f98:	65 e0       	ldi	r22, 0x05	; 5
     f9a:	81 e4       	ldi	r24, 0x41	; 65
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	7a d6       	rcall	.+3316   	; 0x1c94 <ccp_write_io>
     fa0:	6c e1       	ldi	r22, 0x1C	; 28
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	6c d6       	rcall	.+3288   	; 0x1c80 <nvm_read_byte>
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	6d e1       	ldi	r22, 0x1D	; 29
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	67 d6       	rcall	.+3278   	; 0x1c80 <nvm_read_byte>
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	21 f4       	brne	.+8      	; 0xfc4 <sysclk_init+0x5c>
     fbc:	80 e4       	ldi	r24, 0x40	; 64
     fbe:	93 e2       	ldi	r25, 0x23	; 35
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	8b 83       	std	Y+3, r24	; 0x03
     fca:	9c 83       	std	Y+4, r25	; 0x04
     fcc:	e0 e6       	ldi	r30, 0x60	; 96
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	82 83       	std	Z+2, r24	; 0x02
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	83 83       	std	Z+3, r24	; 0x03
     fd6:	8f b7       	in	r24, 0x3f	; 63
     fd8:	8e 83       	std	Y+6, r24	; 0x06
     fda:	f8 94       	cli
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	e0 e5       	ldi	r30, 0x50	; 80
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	82 60       	ori	r24, 0x02	; 2
     fe6:	80 83       	st	Z, r24
     fe8:	9f bf       	out	0x3f, r25	; 63
     fea:	81 81       	ldd	r24, Z+1	; 0x01
     fec:	81 ff       	sbrs	r24, 1
     fee:	fd cf       	rjmp	.-6      	; 0xfea <sysclk_init+0x82>
     ff0:	8f b7       	in	r24, 0x3f	; 63
     ff2:	8f 83       	std	Y+7, r24	; 0x07
     ff4:	f8 94       	cli
     ff6:	9f 81       	ldd	r25, Y+7	; 0x07
     ff8:	00 e5       	ldi	r16, 0x50	; 80
     ffa:	10 e0       	ldi	r17, 0x00	; 0
     ffc:	d8 01       	movw	r26, r16
     ffe:	16 96       	adiw	r26, 0x06	; 6
    1000:	8c 91       	ld	r24, X
    1002:	16 97       	sbiw	r26, 0x06	; 6
    1004:	89 7f       	andi	r24, 0xF9	; 249
    1006:	16 96       	adiw	r26, 0x06	; 6
    1008:	8c 93       	st	X, r24
    100a:	16 97       	sbiw	r26, 0x06	; 6
    100c:	e0 e6       	ldi	r30, 0x60	; 96
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 e8       	ldi	r24, 0x80	; 128
    1012:	85 83       	std	Z+5, r24	; 0x05
    1014:	8b eb       	ldi	r24, 0xBB	; 187
    1016:	86 83       	std	Z+6, r24	; 0x06
    1018:	16 96       	adiw	r26, 0x06	; 6
    101a:	8c 91       	ld	r24, X
    101c:	16 97       	sbiw	r26, 0x06	; 6
    101e:	84 60       	ori	r24, 0x04	; 4
    1020:	16 96       	adiw	r26, 0x06	; 6
    1022:	8c 93       	st	X, r24
    1024:	80 81       	ld	r24, Z
    1026:	81 60       	ori	r24, 0x01	; 1
    1028:	80 83       	st	Z, r24
    102a:	9f bf       	out	0x3f, r25	; 63
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	80 e4       	ldi	r24, 0x40	; 64
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	30 d6       	rcall	.+3168   	; 0x1c94 <ccp_write_io>
    1034:	8f b7       	in	r24, 0x3f	; 63
    1036:	8d 83       	std	Y+5, r24	; 0x05
    1038:	f8 94       	cli
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	f8 01       	movw	r30, r16
    103e:	80 81       	ld	r24, Z
    1040:	8e 7f       	andi	r24, 0xFE	; 254
    1042:	80 83       	st	Z, r24
    1044:	9f bf       	out	0x3f, r25	; 63
    1046:	27 96       	adiw	r28, 0x07	; 7
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	08 95       	ret

00001056 <sysclk_enable_module>:
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	1f 92       	push	r1
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	9f b7       	in	r25, 0x3f	; 63
    1062:	99 83       	std	Y+1, r25	; 0x01
    1064:	f8 94       	cli
    1066:	99 81       	ldd	r25, Y+1	; 0x01
    1068:	e8 2f       	mov	r30, r24
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	e0 59       	subi	r30, 0x90	; 144
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	60 95       	com	r22
    1072:	80 81       	ld	r24, Z
    1074:	68 23       	and	r22, r24
    1076:	60 83       	st	Z, r22
    1078:	9f bf       	out	0x3f, r25	; 63
    107a:	0f 90       	pop	r0
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	1f 92       	push	r1
    1088:	1f 92       	push	r1
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    108e:	86 30       	cpi	r24, 0x06	; 6
    1090:	11 f0       	breq	.+4      	; 0x1096 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1096:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1098:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    109c:	81 fd       	sbrc	r24, 1
    109e:	2a c0       	rjmp	.+84     	; 0x10f4 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10a0:	8f b7       	in	r24, 0x3f	; 63
    10a2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    10a4:	f8 94       	cli
	return flags;
    10a6:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    10a8:	e0 e5       	ldi	r30, 0x50	; 80
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	82 60       	ori	r24, 0x02	; 2
    10b0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10b2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    10b4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    10b6:	81 ff       	sbrs	r24, 1
    10b8:	fd cf       	rjmp	.-6      	; 0x10b4 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10ba:	8f b7       	in	r24, 0x3f	; 63
    10bc:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    10be:	f8 94       	cli
	return flags;
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    10c2:	a0 e5       	ldi	r26, 0x50	; 80
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	16 96       	adiw	r26, 0x06	; 6
    10c8:	8c 91       	ld	r24, X
    10ca:	16 97       	sbiw	r26, 0x06	; 6
    10cc:	89 7f       	andi	r24, 0xF9	; 249
    10ce:	16 96       	adiw	r26, 0x06	; 6
    10d0:	8c 93       	st	X, r24
    10d2:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    10d4:	e0 e6       	ldi	r30, 0x60	; 96
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 e8       	ldi	r24, 0x80	; 128
    10da:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    10dc:	8b eb       	ldi	r24, 0xBB	; 187
    10de:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    10e0:	16 96       	adiw	r26, 0x06	; 6
    10e2:	8c 91       	ld	r24, X
    10e4:	16 97       	sbiw	r26, 0x06	; 6
    10e6:	84 60       	ori	r24, 0x04	; 4
    10e8:	16 96       	adiw	r26, 0x06	; 6
    10ea:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    10ec:	80 81       	ld	r24, Z
    10ee:	81 60       	ori	r24, 0x01	; 1
    10f0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10f2:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    10f4:	63 60       	ori	r22, 0x03	; 3
    10f6:	84 e4       	ldi	r24, 0x44	; 68
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	cc d5       	rcall	.+2968   	; 0x1c94 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    10fc:	60 e4       	ldi	r22, 0x40	; 64
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	aa df       	rcall	.-172    	; 0x1056 <sysclk_enable_module>
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	08 95       	ret

00001110 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    1110:	30 91 bb 23 	lds	r19, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1114:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1118:	82 2f       	mov	r24, r18
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	03 97       	sbiw	r24, 0x03	; 3
    111e:	b1 f4       	brne	.+44     	; 0x114c <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    1120:	31 11       	cpse	r19, r1
    1122:	16 c0       	rjmp	.+44     	; 0x1150 <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
    1124:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1128:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    112c:	89 2b       	or	r24, r25
    112e:	91 f4       	brne	.+36     	; 0x1154 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
    1130:	e9 eb       	ldi	r30, 0xB9	; 185
    1132:	f3 e2       	ldi	r31, 0x23	; 35
    1134:	82 ec       	ldi	r24, 0xC2	; 194
    1136:	91 e2       	ldi	r25, 0x21	; 33
    1138:	80 87       	std	Z+8, r24	; 0x08
    113a:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    113c:	8c ea       	ldi	r24, 0xAC	; 172
    113e:	98 e0       	ldi	r25, 0x08	; 8
    1140:	84 87       	std	Z+12, r24	; 0x0c
    1142:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
    1144:	12 86       	std	Z+10, r1	; 0x0a
    1146:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	08 95       	ret
	}
	return false;
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	08 95       	ret
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret
    1154:	80 e0       	ldi	r24, 0x00	; 0
}
    1156:	08 95       	ret

00001158 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
    1158:	08 95       	ret

0000115a <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <udi_hid_generic_b_report_in_free>
    1160:	08 95       	ret

00001162 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
    1162:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
    1166:	10 92 c6 21 	sts	0x21C6, r1	; 0x8021c6 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
    1170:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <main_generic_enable>
}
    1174:	08 95       	ret

00001176 <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
    1176:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <main_generic_disable>
    117a:	08 95       	ret

0000117c <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
    117c:	28 e8       	ldi	r18, 0x88	; 136
    117e:	38 e0       	ldi	r19, 0x08	; 8
    1180:	46 ea       	ldi	r20, 0xA6	; 166
    1182:	50 e2       	ldi	r21, 0x20	; 32
    1184:	66 ec       	ldi	r22, 0xC6	; 198
    1186:	71 e2       	ldi	r23, 0x21	; 33
    1188:	88 ec       	ldi	r24, 0xC8	; 200
    118a:	91 e2       	ldi	r25, 0x21	; 33
    118c:	f2 c0       	rjmp	.+484    	; 0x1372 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
    118e:	08 95       	ret

00001190 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
    1190:	ff 92       	push	r15
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	1f 92       	push	r1
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
    11a2:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <udi_hid_generic_b_report_in_free>
    11a6:	88 23       	and	r24, r24
    11a8:	09 f1       	breq	.+66     	; 0x11ec <udi_hid_generic_send_report_in+0x5c>
    11aa:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11ac:	8f b7       	in	r24, 0x3f	; 63
    11ae:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    11b0:	f8 94       	cli
	return flags;
    11b2:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
    11b4:	10 92 c2 21 	sts	0x21C2, r1	; 0x8021c2 <udi_hid_generic_report_feature>
    11b8:	10 92 c3 21 	sts	0x21C3, r1	; 0x8021c3 <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
    11bc:	80 81       	ld	r24, Z
    11be:	91 81       	ldd	r25, Z+1	; 0x01
    11c0:	80 93 c2 21 	sts	0x21C2, r24	; 0x8021c2 <udi_hid_generic_report_feature>
    11c4:	90 93 c3 21 	sts	0x21C3, r25	; 0x8021c3 <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    11c8:	0d ea       	ldi	r16, 0xAD	; 173
    11ca:	18 e0       	ldi	r17, 0x08	; 8
    11cc:	22 e0       	ldi	r18, 0x02	; 2
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	42 ec       	ldi	r20, 0xC2	; 194
    11d2:	51 e2       	ldi	r21, 0x21	; 33
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	82 e8       	ldi	r24, 0x82	; 130
    11d8:	0e 94 0e 13 	call	0x261c	; 0x261c <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	89 27       	eor	r24, r25
    11e0:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11e4:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
    11e6:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <udi_hid_generic_b_report_in_free>
    11ea:	89 27       	eor	r24, r25

}
    11ec:	0f 90       	pop	r0
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	08 95       	ret

000011fa <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	08 95       	ret

000011fe <udi_hid_kbd_setreport>:
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	08 95       	ret

00001202 <udi_hid_kbd_enable>:
    1202:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <udi_hid_kbd_rate>
    1206:	10 92 dc 21 	sts	0x21DC, r1	; 0x8021dc <udi_hid_kbd_protocol>
    120a:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <udi_hid_kbd_b_report_trans_ongoing>
    120e:	88 e0       	ldi	r24, 0x08	; 8
    1210:	e3 ed       	ldi	r30, 0xD3	; 211
    1212:	f1 e2       	ldi	r31, 0x21	; 33
    1214:	df 01       	movw	r26, r30
    1216:	1d 92       	st	X+, r1
    1218:	8a 95       	dec	r24
    121a:	e9 f7       	brne	.-6      	; 0x1216 <udi_hid_kbd_enable+0x14>
    121c:	10 92 db 21 	sts	0x21DB, r1	; 0x8021db <udi_hid_kbd_b_report_valid>
    1220:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <main_kbd_enable>
    1224:	08 95       	ret

00001226 <udi_hid_kbd_disable>:
    1226:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <main_kbd_disable>
    122a:	08 95       	ret

0000122c <udi_hid_kbd_setup>:
    122c:	2f ef       	ldi	r18, 0xFF	; 255
    122e:	38 e0       	ldi	r19, 0x08	; 8
    1230:	48 ec       	ldi	r20, 0xC8	; 200
    1232:	50 e2       	ldi	r21, 0x20	; 32
    1234:	6c ed       	ldi	r22, 0xDC	; 220
    1236:	71 e2       	ldi	r23, 0x21	; 33
    1238:	8e ed       	ldi	r24, 0xDE	; 222
    123a:	91 e2       	ldi	r25, 0x21	; 33
    123c:	9a c0       	rjmp	.+308    	; 0x1372 <udi_hid_setup>
    123e:	08 95       	ret

00001240 <udi_hid_kbd_send_report>:
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <udi_hid_kbd_b_report_trans_ongoing>
    1248:	81 11       	cpse	r24, r1
    124a:	18 c0       	rjmp	.+48     	; 0x127c <udi_hid_kbd_send_report+0x3c>
    124c:	88 e0       	ldi	r24, 0x08	; 8
    124e:	e3 ed       	ldi	r30, 0xD3	; 211
    1250:	f1 e2       	ldi	r31, 0x21	; 33
    1252:	aa ec       	ldi	r26, 0xCA	; 202
    1254:	b1 e2       	ldi	r27, 0x21	; 33
    1256:	01 90       	ld	r0, Z+
    1258:	0d 92       	st	X+, r0
    125a:	8a 95       	dec	r24
    125c:	e1 f7       	brne	.-8      	; 0x1256 <udi_hid_kbd_send_report+0x16>
    125e:	10 92 db 21 	sts	0x21DB, r1	; 0x8021db <udi_hid_kbd_b_report_valid>
    1262:	02 e4       	ldi	r16, 0x42	; 66
    1264:	19 e0       	ldi	r17, 0x09	; 9
    1266:	28 e0       	ldi	r18, 0x08	; 8
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	4a ec       	ldi	r20, 0xCA	; 202
    126c:	51 e2       	ldi	r21, 0x21	; 33
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	81 e8       	ldi	r24, 0x81	; 129
    1272:	0e 94 0e 13 	call	0x261c	; 0x261c <udd_ep_run>
    1276:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <udi_hid_kbd_b_report_trans_ongoing>
    127a:	01 c0       	rjmp	.+2      	; 0x127e <udi_hid_kbd_send_report+0x3e>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	08 95       	ret

00001284 <udi_hid_kbd_report_sent>:
    1284:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <udi_hid_kbd_b_report_trans_ongoing>
    1288:	80 91 db 21 	lds	r24, 0x21DB	; 0x8021db <udi_hid_kbd_b_report_valid>
    128c:	81 11       	cpse	r24, r1
    128e:	d8 cf       	rjmp	.-80     	; 0x1240 <udi_hid_kbd_send_report>
    1290:	08 95       	ret

00001292 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	1f 92       	push	r1
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    129e:	9f b7       	in	r25, 0x3f	; 63
    12a0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    12a2:	f8 94       	cli
	return flags;
    12a4:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    12a6:	90 91 d5 21 	lds	r25, 0x21D5	; 0x8021d5 <udi_hid_kbd_report+0x2>
    12aa:	99 23       	and	r25, r25
    12ac:	41 f0       	breq	.+16     	; 0x12be <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    12ae:	89 17       	cp	r24, r25
    12b0:	a9 f0       	breq	.+42     	; 0x12dc <udi_hid_kbd_up+0x4a>
    12b2:	e6 ed       	ldi	r30, 0xD6	; 214
    12b4:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    12b6:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    12b8:	21 91       	ld	r18, Z+
    12ba:	21 11       	cpse	r18, r1
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12be:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    12c0:	1e c0       	rjmp	.+60     	; 0x12fe <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    12c2:	28 17       	cp	r18, r24
    12c4:	21 f0       	breq	.+8      	; 0x12ce <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    12c6:	9f 5f       	subi	r25, 0xFF	; 255
    12c8:	98 30       	cpi	r25, 0x08	; 8
    12ca:	b1 f7       	brne	.-20     	; 0x12b8 <udi_hid_kbd_up+0x26>
    12cc:	05 c0       	rjmp	.+10     	; 0x12d8 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    12ce:	98 30       	cpi	r25, 0x08	; 8
    12d0:	19 f0       	breq	.+6      	; 0x12d8 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    12d2:	97 30       	cpi	r25, 0x07	; 7
    12d4:	20 f0       	brcs	.+8      	; 0x12de <udi_hid_kbd_up+0x4c>
    12d6:	0c c0       	rjmp	.+24     	; 0x12f0 <udi_hid_kbd_up+0x5e>
    12d8:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    12da:	11 c0       	rjmp	.+34     	; 0x12fe <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    12dc:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    12de:	e9 2f       	mov	r30, r25
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	ed 52       	subi	r30, 0x2D	; 45
    12e4:	fe 4d       	sbci	r31, 0xDE	; 222
    12e6:	81 81       	ldd	r24, Z+1	; 0x01
    12e8:	80 83       	st	Z, r24
		i++;
    12ea:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    12ec:	97 30       	cpi	r25, 0x07	; 7
    12ee:	b9 f7       	brne	.-18     	; 0x12de <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    12f0:	10 92 da 21 	sts	0x21DA, r1	; 0x8021da <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 db 21 	sts	0x21DB, r24	; 0x8021db <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    12fa:	a2 df       	rcall	.-188    	; 0x1240 <udi_hid_kbd_send_report>
    12fc:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	0f 90       	pop	r0
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	08 95       	ret

0000130a <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    130a:	1f 93       	push	r17
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	1f 92       	push	r1
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1316:	9f b7       	in	r25, 0x3f	; 63
    1318:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    131a:	f8 94       	cli
	return flags;
    131c:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    131e:	90 91 d5 21 	lds	r25, 0x21D5	; 0x8021d5 <udi_hid_kbd_report+0x2>
    1322:	99 23       	and	r25, r25
    1324:	b1 f0       	breq	.+44     	; 0x1352 <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1326:	89 17       	cp	r24, r25
    1328:	41 f0       	breq	.+16     	; 0x133a <udi_hid_kbd_down+0x30>
    132a:	a6 ed       	ldi	r26, 0xD6	; 214
    132c:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    132e:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    1330:	9d 91       	ld	r25, X+
    1332:	99 23       	and	r25, r25
    1334:	49 f0       	breq	.+18     	; 0x1348 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1336:	98 13       	cpse	r25, r24
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    133a:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1340:	ef 5f       	subi	r30, 0xFF	; 255
    1342:	e8 30       	cpi	r30, 0x08	; 8
    1344:	a9 f7       	brne	.-22     	; 0x1330 <udi_hid_kbd_down+0x26>
    1346:	02 c0       	rjmp	.+4      	; 0x134c <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    1348:	e8 30       	cpi	r30, 0x08	; 8
    134a:	21 f4       	brne	.+8      	; 0x1354 <udi_hid_kbd_down+0x4a>
    134c:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	0b c0       	rjmp	.+22     	; 0x1368 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1352:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	ed 52       	subi	r30, 0x2D	; 45
    1358:	fe 4d       	sbci	r31, 0xDE	; 222
    135a:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	80 93 db 21 	sts	0x21DB, r24	; 0x8021db <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1362:	6e df       	rcall	.-292    	; 0x1240 <udi_hid_kbd_send_report>
    1364:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    1366:	81 e0       	ldi	r24, 0x01	; 1
}
    1368:	0f 90       	pop	r0
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	08 95       	ret

00001372 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	dc 01       	movw	r26, r24
    1378:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    137a:	90 91 b9 23 	lds	r25, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    137e:	99 23       	and	r25, r25
    1380:	0c f0       	brlt	.+2      	; 0x1384 <udi_hid_setup+0x12>
    1382:	68 c0       	rjmp	.+208    	; 0x1454 <udi_hid_setup+0xe2>
    1384:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1386:	09 f0       	breq	.+2      	; 0x138a <udi_hid_setup+0x18>
    1388:	45 c0       	rjmp	.+138    	; 0x1414 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    138a:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    138e:	86 30       	cpi	r24, 0x06	; 6
    1390:	09 f0       	breq	.+2      	; 0x1394 <udi_hid_setup+0x22>
    1392:	40 c0       	rjmp	.+128    	; 0x1414 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1394:	76 d1       	rcall	.+748    	; 0x1682 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1396:	dc 01       	movw	r26, r24
    1398:	1a 96       	adiw	r26, 0x0a	; 10
    139a:	2c 91       	ld	r18, X
    139c:	1a 97       	sbiw	r26, 0x0a	; 10
    139e:	21 32       	cpi	r18, 0x21	; 33
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <udi_hid_setup+0x32>
    13a2:	77 c0       	rjmp	.+238    	; 0x1492 <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    13a4:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	21 32       	cpi	r18, 0x21	; 33
    13ac:	31 05       	cpc	r19, r1
    13ae:	b1 f4       	brne	.+44     	; 0x13dc <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    13b0:	9c 01       	movw	r18, r24
    13b2:	27 5f       	subi	r18, 0xF7	; 247
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	20 93 c1 23 	sts	0x23C1, r18	; 0x8023c1 <udd_g_ctrlreq+0x8>
    13ba:	30 93 c2 23 	sts	0x23C2, r19	; 0x8023c2 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    13be:	e9 eb       	ldi	r30, 0xB9	; 185
    13c0:	f3 e2       	ldi	r31, 0x23	; 35
    13c2:	19 96       	adiw	r26, 0x09	; 9
    13c4:	8c 91       	ld	r24, X
    13c6:	26 81       	ldd	r18, Z+6	; 0x06
    13c8:	37 81       	ldd	r19, Z+7	; 0x07
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	28 17       	cp	r18, r24
    13ce:	39 07       	cpc	r19, r25
    13d0:	08 f4       	brcc	.+2      	; 0x13d4 <udi_hid_setup+0x62>
    13d2:	c9 01       	movw	r24, r18
    13d4:	82 87       	std	Z+10, r24	; 0x0a
    13d6:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	68 c0       	rjmp	.+208    	; 0x14ac <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    13dc:	fc 01       	movw	r30, r24
    13de:	47 85       	ldd	r20, Z+15	; 0x0f
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	42 17       	cp	r20, r18
    13e4:	53 07       	cpc	r21, r19
    13e6:	09 f0       	breq	.+2      	; 0x13ea <udi_hid_setup+0x78>
    13e8:	56 c0       	rjmp	.+172    	; 0x1496 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    13ea:	c0 93 c1 23 	sts	0x23C1, r28	; 0x8023c1 <udd_g_ctrlreq+0x8>
    13ee:	d0 93 c2 23 	sts	0x23C2, r29	; 0x8023c2 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    13f2:	e9 eb       	ldi	r30, 0xB9	; 185
    13f4:	f3 e2       	ldi	r31, 0x23	; 35
    13f6:	26 81       	ldd	r18, Z+6	; 0x06
    13f8:	37 81       	ldd	r19, Z+7	; 0x07
    13fa:	dc 01       	movw	r26, r24
    13fc:	50 96       	adiw	r26, 0x10	; 16
    13fe:	8d 91       	ld	r24, X+
    1400:	9c 91       	ld	r25, X
    1402:	51 97       	sbiw	r26, 0x11	; 17
    1404:	28 17       	cp	r18, r24
    1406:	39 07       	cpc	r19, r25
    1408:	08 f4       	brcc	.+2      	; 0x140c <udi_hid_setup+0x9a>
    140a:	c9 01       	movw	r24, r18
    140c:	82 87       	std	Z+10, r24	; 0x0a
    140e:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	4c c0       	rjmp	.+152    	; 0x14ac <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1414:	90 32       	cpi	r25, 0x20	; 32
    1416:	09 f0       	breq	.+2      	; 0x141a <udi_hid_setup+0xa8>
    1418:	40 c0       	rjmp	.+128    	; 0x149a <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    141a:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    141e:	82 30       	cpi	r24, 0x02	; 2
    1420:	39 f0       	breq	.+14     	; 0x1430 <udi_hid_setup+0xbe>
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	71 f0       	breq	.+28     	; 0x1442 <udi_hid_setup+0xd0>
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	d1 f5       	brne	.+116    	; 0x149e <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    142a:	f9 01       	movw	r30, r18
    142c:	19 95       	eicall
    142e:	3e c0       	rjmp	.+124    	; 0x14ac <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    1430:	e9 eb       	ldi	r30, 0xB9	; 185
    1432:	f3 e2       	ldi	r31, 0x23	; 35
    1434:	a0 87       	std	Z+8, r26	; 0x08
    1436:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	82 87       	std	Z+10, r24	; 0x0a
    143e:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1440:	35 c0       	rjmp	.+106    	; 0x14ac <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1442:	e9 eb       	ldi	r30, 0xB9	; 185
    1444:	f3 e2       	ldi	r31, 0x23	; 35
    1446:	60 87       	std	Z+8, r22	; 0x08
    1448:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	82 87       	std	Z+10, r24	; 0x0a
    1450:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1452:	2c c0       	rjmp	.+88     	; 0x14ac <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1454:	90 76       	andi	r25, 0x60	; 96
    1456:	90 32       	cpi	r25, 0x20	; 32
    1458:	21 f5       	brne	.+72     	; 0x14a2 <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    145a:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    145e:	8a 30       	cpi	r24, 0x0A	; 10
    1460:	39 f0       	breq	.+14     	; 0x1470 <udi_hid_setup+0xfe>
    1462:	8b 30       	cpi	r24, 0x0B	; 11
    1464:	51 f0       	breq	.+20     	; 0x147a <udi_hid_setup+0x108>
    1466:	89 30       	cpi	r24, 0x09	; 9
    1468:	f1 f4       	brne	.+60     	; 0x14a6 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    146a:	f9 01       	movw	r30, r18
    146c:	19 95       	eicall
    146e:	1e c0       	rjmp	.+60     	; 0x14ac <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1470:	80 91 bc 23 	lds	r24, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1474:	8c 93       	st	X, r24
				return true;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	19 c0       	rjmp	.+50     	; 0x14ac <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    147a:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    147e:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1482:	89 2b       	or	r24, r25
    1484:	91 f4       	brne	.+36     	; 0x14aa <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    1486:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    148a:	db 01       	movw	r26, r22
    148c:	8c 93       	st	X, r24
				return true;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	0d c0       	rjmp	.+26     	; 0x14ac <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	0b c0       	rjmp	.+22     	; 0x14ac <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	09 c0       	rjmp	.+18     	; 0x14ac <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <udi_hid_setup+0x13a>
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	05 c0       	rjmp	.+10     	; 0x14ac <udi_hid_setup+0x13a>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <udi_hid_setup+0x13a>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    14aa:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    14b2:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    14b6:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    14ba:	01 90       	ld	r0, Z+
    14bc:	f0 81       	ld	r31, Z
    14be:	e0 2d       	mov	r30, r0
    14c0:	22 81       	ldd	r18, Z+2	; 0x02
    14c2:	33 81       	ldd	r19, Z+3	; 0x03
    14c4:	2e 0f       	add	r18, r30
    14c6:	3f 1f       	adc	r19, r31
    14c8:	fc 01       	movw	r30, r24
    14ca:	40 81       	ld	r20, Z
    14cc:	e4 0f       	add	r30, r20
    14ce:	f1 1d       	adc	r31, r1
    14d0:	e2 17       	cp	r30, r18
    14d2:	f3 07       	cpc	r31, r19
    14d4:	a0 f4       	brcc	.+40     	; 0x14fe <udc_next_desc_in_iface+0x4c>
    14d6:	81 81       	ldd	r24, Z+1	; 0x01
    14d8:	84 30       	cpi	r24, 0x04	; 4
    14da:	a1 f0       	breq	.+40     	; 0x1504 <udc_next_desc_in_iface+0x52>
    14dc:	86 13       	cpse	r24, r22
    14de:	06 c0       	rjmp	.+12     	; 0x14ec <udc_next_desc_in_iface+0x3a>
    14e0:	14 c0       	rjmp	.+40     	; 0x150a <udc_next_desc_in_iface+0x58>
    14e2:	81 81       	ldd	r24, Z+1	; 0x01
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	a1 f0       	breq	.+40     	; 0x1510 <udc_next_desc_in_iface+0x5e>
    14e8:	86 17       	cp	r24, r22
    14ea:	a9 f0       	breq	.+42     	; 0x1516 <udc_next_desc_in_iface+0x64>
    14ec:	80 81       	ld	r24, Z
    14ee:	e8 0f       	add	r30, r24
    14f0:	f1 1d       	adc	r31, r1
    14f2:	e2 17       	cp	r30, r18
    14f4:	f3 07       	cpc	r31, r19
    14f6:	a8 f3       	brcs	.-22     	; 0x14e2 <udc_next_desc_in_iface+0x30>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	08 95       	ret
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	08 95       	ret
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	08 95       	ret
    150a:	8e 2f       	mov	r24, r30
    150c:	9f 2f       	mov	r25, r31
    150e:	08 95       	ret
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	08 95       	ret
    1516:	8e 2f       	mov	r24, r30
    1518:	9f 2f       	mov	r25, r31
    151a:	08 95       	ret

0000151c <udc_valid_address>:
    151c:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1520:	8f 77       	andi	r24, 0x7F	; 127
    1522:	95 c7       	rjmp	.+3882   	; 0x244e <udd_set_address>
    1524:	08 95       	ret

00001526 <udc_update_iface_desc>:
    1526:	90 91 e6 21 	lds	r25, 0x21E6	; 0x8021e6 <udc_num_configuration>
    152a:	99 23       	and	r25, r25
    152c:	81 f1       	breq	.+96     	; 0x158e <udc_update_iface_desc+0x68>
    152e:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1532:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    1536:	01 90       	ld	r0, Z+
    1538:	f0 81       	ld	r31, Z
    153a:	e0 2d       	mov	r30, r0
    153c:	94 81       	ldd	r25, Z+4	; 0x04
    153e:	89 17       	cp	r24, r25
    1540:	40 f5       	brcc	.+80     	; 0x1592 <udc_update_iface_desc+0x6c>
    1542:	e0 93 e2 21 	sts	0x21E2, r30	; 0x8021e2 <udc_ptr_iface>
    1546:	f0 93 e3 21 	sts	0x21E3, r31	; 0x8021e3 <udc_ptr_iface+0x1>
    154a:	22 81       	ldd	r18, Z+2	; 0x02
    154c:	33 81       	ldd	r19, Z+3	; 0x03
    154e:	2e 0f       	add	r18, r30
    1550:	3f 1f       	adc	r19, r31
    1552:	e2 17       	cp	r30, r18
    1554:	f3 07       	cpc	r31, r19
    1556:	f8 f4       	brcc	.+62     	; 0x1596 <udc_update_iface_desc+0x70>
    1558:	91 81       	ldd	r25, Z+1	; 0x01
    155a:	94 30       	cpi	r25, 0x04	; 4
    155c:	61 f4       	brne	.+24     	; 0x1576 <udc_update_iface_desc+0x50>
    155e:	92 81       	ldd	r25, Z+2	; 0x02
    1560:	89 13       	cpse	r24, r25
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <udc_update_iface_desc+0x50>
    1564:	93 81       	ldd	r25, Z+3	; 0x03
    1566:	96 13       	cpse	r25, r22
    1568:	06 c0       	rjmp	.+12     	; 0x1576 <udc_update_iface_desc+0x50>
    156a:	e0 93 e2 21 	sts	0x21E2, r30	; 0x8021e2 <udc_ptr_iface>
    156e:	f0 93 e3 21 	sts	0x21E3, r31	; 0x8021e3 <udc_ptr_iface+0x1>
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	08 95       	ret
    1576:	90 81       	ld	r25, Z
    1578:	e9 0f       	add	r30, r25
    157a:	f1 1d       	adc	r31, r1
    157c:	e2 17       	cp	r30, r18
    157e:	f3 07       	cpc	r31, r19
    1580:	58 f3       	brcs	.-42     	; 0x1558 <udc_update_iface_desc+0x32>
    1582:	e0 93 e2 21 	sts	0x21E2, r30	; 0x8021e2 <udc_ptr_iface>
    1586:	f0 93 e3 21 	sts	0x21E3, r31	; 0x8021e3 <udc_ptr_iface+0x1>
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	08 95       	ret
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	08 95       	ret
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	08 95       	ret
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	08 95       	ret

0000159a <udc_iface_disable>:
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	c8 2f       	mov	r28, r24
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	be df       	rcall	.-132    	; 0x1526 <udc_update_iface_desc>
    15aa:	18 2f       	mov	r17, r24
    15ac:	88 23       	and	r24, r24
    15ae:	81 f1       	breq	.+96     	; 0x1610 <udc_iface_disable+0x76>
    15b0:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    15b4:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    15b8:	ec 2f       	mov	r30, r28
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	ee 0f       	add	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	12 96       	adiw	r26, 0x02	; 2
    15c2:	8d 91       	ld	r24, X+
    15c4:	9c 91       	ld	r25, X
    15c6:	13 97       	sbiw	r26, 0x03	; 3
    15c8:	e8 0f       	add	r30, r24
    15ca:	f9 1f       	adc	r31, r25
    15cc:	e0 80       	ld	r14, Z
    15ce:	f1 80       	ldd	r15, Z+1	; 0x01
    15d0:	d7 01       	movw	r26, r14
    15d2:	16 96       	adiw	r26, 0x06	; 6
    15d4:	ed 91       	ld	r30, X+
    15d6:	fc 91       	ld	r31, X
    15d8:	17 97       	sbiw	r26, 0x07	; 7
    15da:	19 95       	eicall
    15dc:	68 2f       	mov	r22, r24
    15de:	8c 2f       	mov	r24, r28
    15e0:	a2 df       	rcall	.-188    	; 0x1526 <udc_update_iface_desc>
    15e2:	18 2f       	mov	r17, r24
    15e4:	88 23       	and	r24, r24
    15e6:	a1 f0       	breq	.+40     	; 0x1610 <udc_iface_disable+0x76>
    15e8:	c0 91 e2 21 	lds	r28, 0x21E2	; 0x8021e2 <udc_ptr_iface>
    15ec:	d0 91 e3 21 	lds	r29, 0x21E3	; 0x8021e3 <udc_ptr_iface+0x1>
    15f0:	65 e0       	ldi	r22, 0x05	; 5
    15f2:	ce 01       	movw	r24, r28
    15f4:	5e df       	rcall	.-324    	; 0x14b2 <udc_next_desc_in_iface>
    15f6:	ec 01       	movw	r28, r24
    15f8:	89 2b       	or	r24, r25
    15fa:	21 f0       	breq	.+8      	; 0x1604 <udc_iface_disable+0x6a>
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	0e 94 27 14 	call	0x284e	; 0x284e <udd_ep_free>
    1602:	f6 cf       	rjmp	.-20     	; 0x15f0 <udc_iface_disable+0x56>
    1604:	d7 01       	movw	r26, r14
    1606:	12 96       	adiw	r26, 0x02	; 2
    1608:	ed 91       	ld	r30, X+
    160a:	fc 91       	ld	r31, X
    160c:	13 97       	sbiw	r26, 0x03	; 3
    160e:	19 95       	eicall
    1610:	81 2f       	mov	r24, r17
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	1f 91       	pop	r17
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
    161c:	08 95       	ret

0000161e <udc_iface_enable>:
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	18 2f       	mov	r17, r24
    1626:	7f df       	rcall	.-258    	; 0x1526 <udc_update_iface_desc>
    1628:	88 23       	and	r24, r24
    162a:	39 f1       	breq	.+78     	; 0x167a <udc_iface_enable+0x5c>
    162c:	c0 91 e2 21 	lds	r28, 0x21E2	; 0x8021e2 <udc_ptr_iface>
    1630:	d0 91 e3 21 	lds	r29, 0x21E3	; 0x8021e3 <udc_ptr_iface+0x1>
    1634:	65 e0       	ldi	r22, 0x05	; 5
    1636:	ce 01       	movw	r24, r28
    1638:	3c df       	rcall	.-392    	; 0x14b2 <udc_next_desc_in_iface>
    163a:	ec 01       	movw	r28, r24
    163c:	89 2b       	or	r24, r25
    163e:	41 f0       	breq	.+16     	; 0x1650 <udc_iface_enable+0x32>
    1640:	4c 81       	ldd	r20, Y+4	; 0x04
    1642:	5d 81       	ldd	r21, Y+5	; 0x05
    1644:	6b 81       	ldd	r22, Y+3	; 0x03
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	0f d7       	rcall	.+3614   	; 0x2468 <udd_ep_alloc>
    164a:	81 11       	cpse	r24, r1
    164c:	f3 cf       	rjmp	.-26     	; 0x1634 <udc_iface_enable+0x16>
    164e:	15 c0       	rjmp	.+42     	; 0x167a <udc_iface_enable+0x5c>
    1650:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1654:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    1658:	e1 2f       	mov	r30, r17
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	12 96       	adiw	r26, 0x02	; 2
    1662:	8d 91       	ld	r24, X+
    1664:	9c 91       	ld	r25, X
    1666:	13 97       	sbiw	r26, 0x03	; 3
    1668:	e8 0f       	add	r30, r24
    166a:	f9 1f       	adc	r31, r25
    166c:	01 90       	ld	r0, Z+
    166e:	f0 81       	ld	r31, Z
    1670:	e0 2d       	mov	r30, r0
    1672:	01 90       	ld	r0, Z+
    1674:	f0 81       	ld	r31, Z
    1676:	e0 2d       	mov	r30, r0
    1678:	19 95       	eicall
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	08 95       	ret

00001682 <udc_get_interface_desc>:
    1682:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <udc_ptr_iface>
    1686:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <udc_ptr_iface+0x1>
    168a:	08 95       	ret

0000168c <udc_start>:
    168c:	55 c6       	rjmp	.+3242   	; 0x2338 <udd_enable>
    168e:	08 95       	ret

00001690 <udc_reset>:
    1690:	cf 93       	push	r28
    1692:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udc_num_configuration>
    1696:	88 23       	and	r24, r24
    1698:	c1 f0       	breq	.+48     	; 0x16ca <udc_reset+0x3a>
    169a:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    169e:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    16a2:	01 90       	ld	r0, Z+
    16a4:	f0 81       	ld	r31, Z
    16a6:	e0 2d       	mov	r30, r0
    16a8:	84 81       	ldd	r24, Z+4	; 0x04
    16aa:	88 23       	and	r24, r24
    16ac:	71 f0       	breq	.+28     	; 0x16ca <udc_reset+0x3a>
    16ae:	c0 e0       	ldi	r28, 0x00	; 0
    16b0:	8c 2f       	mov	r24, r28
    16b2:	73 df       	rcall	.-282    	; 0x159a <udc_iface_disable>
    16b4:	cf 5f       	subi	r28, 0xFF	; 255
    16b6:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    16ba:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    16be:	01 90       	ld	r0, Z+
    16c0:	f0 81       	ld	r31, Z
    16c2:	e0 2d       	mov	r30, r0
    16c4:	84 81       	ldd	r24, Z+4	; 0x04
    16c6:	c8 17       	cp	r28, r24
    16c8:	98 f3       	brcs	.-26     	; 0x16b0 <udc_reset+0x20>
    16ca:	10 92 e6 21 	sts	0x21E6, r1	; 0x8021e6 <udc_num_configuration>
    16ce:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <udc_device_status>
    16d2:	81 fd       	sbrc	r24, 1
    16d4:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <main_remotewakeup_disable>
    16d8:	10 92 ea 21 	sts	0x21EA, r1	; 0x8021ea <udc_device_status>
    16dc:	10 92 eb 21 	sts	0x21EB, r1	; 0x8021eb <udc_device_status+0x1>
    16e0:	cf 91       	pop	r28
    16e2:	08 95       	ret

000016e4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    16e4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    16e6:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udc_num_configuration>
    16ea:	88 23       	and	r24, r24
    16ec:	49 f1       	breq	.+82     	; 0x1740 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    16ee:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    16f2:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    16f6:	ed 91       	ld	r30, X+
    16f8:	fc 91       	ld	r31, X
    16fa:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    16fc:	84 81       	ldd	r24, Z+4	; 0x04
    16fe:	88 23       	and	r24, r24
    1700:	f9 f0       	breq	.+62     	; 0x1740 <udc_sof_notify+0x5c>
    1702:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1704:	ec 2f       	mov	r30, r28
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	ee 0f       	add	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	12 96       	adiw	r26, 0x02	; 2
    170e:	8d 91       	ld	r24, X+
    1710:	9c 91       	ld	r25, X
    1712:	13 97       	sbiw	r26, 0x03	; 3
    1714:	e8 0f       	add	r30, r24
    1716:	f9 1f       	adc	r31, r25
    1718:	01 90       	ld	r0, Z+
    171a:	f0 81       	ld	r31, Z
    171c:	e0 2d       	mov	r30, r0
    171e:	00 84       	ldd	r0, Z+8	; 0x08
    1720:	f1 85       	ldd	r31, Z+9	; 0x09
    1722:	e0 2d       	mov	r30, r0
    1724:	30 97       	sbiw	r30, 0x00	; 0
    1726:	09 f0       	breq	.+2      	; 0x172a <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1728:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    172a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    172c:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1730:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    1734:	ed 91       	ld	r30, X+
    1736:	fc 91       	ld	r31, X
    1738:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    173a:	84 81       	ldd	r24, Z+4	; 0x04
    173c:	c8 17       	cp	r28, r24
    173e:	10 f3       	brcs	.-60     	; 0x1704 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    174c:	e9 eb       	ldi	r30, 0xB9	; 185
    174e:	f3 e2       	ldi	r31, 0x23	; 35
    1750:	12 86       	std	Z+10, r1	; 0x0a
    1752:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1754:	14 86       	std	Z+12, r1	; 0x0c
    1756:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1758:	16 86       	std	Z+14, r1	; 0x0e
    175a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    175c:	80 81       	ld	r24, Z
    175e:	88 23       	and	r24, r24
    1760:	0c f0       	brlt	.+2      	; 0x1764 <udc_process_setup+0x20>
    1762:	7e c2       	rjmp	.+1276   	; 0x1c60 <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1764:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1768:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    176c:	21 15       	cp	r18, r1
    176e:	31 05       	cpc	r19, r1
    1770:	09 f0       	breq	.+2      	; 0x1774 <udc_process_setup+0x30>
    1772:	7b c2       	rjmp	.+1270   	; 0x1c6a <udc_process_setup+0x526>
    1774:	6d c2       	rjmp	.+1242   	; 0x1c50 <udc_process_setup+0x50c>
    1776:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1778:	09 f0       	breq	.+2      	; 0x177c <udc_process_setup+0x38>
    177a:	a0 c0       	rjmp	.+320    	; 0x18bc <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    177c:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1780:	96 30       	cpi	r25, 0x06	; 6
    1782:	79 f0       	breq	.+30     	; 0x17a2 <udc_process_setup+0x5e>
    1784:	98 30       	cpi	r25, 0x08	; 8
    1786:	09 f4       	brne	.+2      	; 0x178a <udc_process_setup+0x46>
    1788:	8f c0       	rjmp	.+286    	; 0x18a8 <udc_process_setup+0x164>
    178a:	91 11       	cpse	r25, r1
    178c:	97 c0       	rjmp	.+302    	; 0x18bc <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	09 f0       	breq	.+2      	; 0x1796 <udc_process_setup+0x52>
    1794:	19 c2       	rjmp	.+1074   	; 0x1bc8 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1796:	62 e0       	ldi	r22, 0x02	; 2
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	8a ee       	ldi	r24, 0xEA	; 234
    179c:	91 e2       	ldi	r25, 0x21	; 33
    179e:	5d d6       	rcall	.+3258   	; 0x245a <udd_set_setup_payload>
    17a0:	69 c2       	rjmp	.+1234   	; 0x1c74 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    17a2:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    17a6:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    17aa:	29 2f       	mov	r18, r25
    17ac:	33 27       	eor	r19, r19
    17ae:	22 30       	cpi	r18, 0x02	; 2
    17b0:	31 05       	cpc	r19, r1
    17b2:	a9 f0       	breq	.+42     	; 0x17de <udc_process_setup+0x9a>
    17b4:	20 f4       	brcc	.+8      	; 0x17be <udc_process_setup+0x7a>
    17b6:	21 30       	cpi	r18, 0x01	; 1
    17b8:	31 05       	cpc	r19, r1
    17ba:	41 f0       	breq	.+16     	; 0x17cc <udc_process_setup+0x88>
    17bc:	c7 c1       	rjmp	.+910    	; 0x1b4c <udc_process_setup+0x408>
    17be:	23 30       	cpi	r18, 0x03	; 3
    17c0:	31 05       	cpc	r19, r1
    17c2:	d9 f1       	breq	.+118    	; 0x183a <udc_process_setup+0xf6>
    17c4:	2f 30       	cpi	r18, 0x0F	; 15
    17c6:	31 05       	cpc	r19, r1
    17c8:	51 f1       	breq	.+84     	; 0x181e <udc_process_setup+0xda>
    17ca:	c0 c1       	rjmp	.+896    	; 0x1b4c <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    17cc:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    17d0:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    17d4:	dc 01       	movw	r26, r24
    17d6:	6c 91       	ld	r22, X
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	3f d6       	rcall	.+3198   	; 0x245a <udd_set_setup_payload>
    17dc:	56 c0       	rjmp	.+172    	; 0x188a <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    17de:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    17e2:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    17e6:	21 89       	ldd	r18, Z+17	; 0x11
    17e8:	82 17       	cp	r24, r18
    17ea:	08 f0       	brcs	.+2      	; 0x17ee <udc_process_setup+0xaa>
    17ec:	ed c1       	rjmp	.+986    	; 0x1bc8 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    17ee:	99 27       	eor	r25, r25
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    17fc:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1800:	e8 0f       	add	r30, r24
    1802:	f9 1f       	adc	r31, r25
    1804:	80 81       	ld	r24, Z
    1806:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1808:	fc 01       	movw	r30, r24
    180a:	62 81       	ldd	r22, Z+2	; 0x02
    180c:	73 81       	ldd	r23, Z+3	; 0x03
    180e:	25 d6       	rcall	.+3146   	; 0x245a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1810:	e0 91 c1 23 	lds	r30, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    1814:	f0 91 c2 23 	lds	r31, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	81 83       	std	Z+1, r24	; 0x01
    181c:	36 c0       	rjmp	.+108    	; 0x188a <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    181e:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    1822:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	09 f4       	brne	.+2      	; 0x182c <udc_process_setup+0xe8>
    182a:	ce c1       	rjmp	.+924    	; 0x1bc8 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    182c:	dc 01       	movw	r26, r24
    182e:	12 96       	adiw	r26, 0x02	; 2
    1830:	6d 91       	ld	r22, X+
    1832:	7c 91       	ld	r23, X
    1834:	13 97       	sbiw	r26, 0x03	; 3
    1836:	11 d6       	rcall	.+3106   	; 0x245a <udd_set_setup_payload>
    1838:	28 c0       	rjmp	.+80     	; 0x188a <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    183a:	99 27       	eor	r25, r25
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	91 05       	cpc	r25, r1
    1840:	71 f0       	breq	.+28     	; 0x185e <udc_process_setup+0x11a>
    1842:	38 f0       	brcs	.+14     	; 0x1852 <udc_process_setup+0x10e>
    1844:	02 97       	sbiw	r24, 0x02	; 2
    1846:	09 f0       	breq	.+2      	; 0x184a <udc_process_setup+0x106>
    1848:	8a c1       	rjmp	.+788    	; 0x1b5e <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    184a:	e6 e4       	ldi	r30, 0x46	; 70
    184c:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    184e:	3b e1       	ldi	r19, 0x1B	; 27
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1852:	64 e0       	ldi	r22, 0x04	; 4
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	8c e6       	ldi	r24, 0x6C	; 108
    1858:	91 e2       	ldi	r25, 0x21	; 33
    185a:	ff d5       	rcall	.+3070   	; 0x245a <udd_set_setup_payload>
    185c:	16 c0       	rjmp	.+44     	; 0x188a <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    185e:	e2 e6       	ldi	r30, 0x62	; 98
    1860:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1862:	39 e0       	ldi	r19, 0x09	; 9
    1864:	a0 e1       	ldi	r26, 0x10	; 16
    1866:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1868:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    186a:	81 91       	ld	r24, Z+
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	8d 93       	st	X+, r24
    1870:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1872:	2f 5f       	subi	r18, 0xFF	; 255
    1874:	23 17       	cp	r18, r19
    1876:	c8 f3       	brcs	.-14     	; 0x186a <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1878:	63 2f       	mov	r22, r19
    187a:	66 0f       	add	r22, r22
    187c:	6e 5f       	subi	r22, 0xFE	; 254
    187e:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <udc_string_desc>
		udd_set_setup_payload(
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	8e e0       	ldi	r24, 0x0E	; 14
    1886:	91 e2       	ldi	r25, 0x21	; 33
    1888:	e8 d5       	rcall	.+3024   	; 0x245a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    188a:	e9 eb       	ldi	r30, 0xB9	; 185
    188c:	f3 e2       	ldi	r31, 0x23	; 35
    188e:	86 81       	ldd	r24, Z+6	; 0x06
    1890:	97 81       	ldd	r25, Z+7	; 0x07
    1892:	22 85       	ldd	r18, Z+10	; 0x0a
    1894:	33 85       	ldd	r19, Z+11	; 0x0b
    1896:	82 17       	cp	r24, r18
    1898:	93 07       	cpc	r25, r19
    189a:	08 f0       	brcs	.+2      	; 0x189e <udc_process_setup+0x15a>
    189c:	eb c1       	rjmp	.+982    	; 0x1c74 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    189e:	80 93 c3 23 	sts	0x23C3, r24	; 0x8023c3 <udd_g_ctrlreq+0xa>
    18a2:	90 93 c4 23 	sts	0x23C4, r25	; 0x8023c4 <udd_g_ctrlreq+0xb>
    18a6:	e6 c1       	rjmp	.+972    	; 0x1c74 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    18a8:	21 30       	cpi	r18, 0x01	; 1
    18aa:	31 05       	cpc	r19, r1
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    18ae:	8c c1       	rjmp	.+792    	; 0x1bc8 <udc_process_setup+0x484>
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	86 ee       	ldi	r24, 0xE6	; 230
    18b6:	91 e2       	ldi	r25, 0x21	; 33
    18b8:	d0 d5       	rcall	.+2976   	; 0x245a <udd_set_setup_payload>
    18ba:	dc c1       	rjmp	.+952    	; 0x1c74 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	e1 f5       	brne	.+120    	; 0x1938 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    18c0:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    18c4:	9a 30       	cpi	r25, 0x0A	; 10
    18c6:	c1 f5       	brne	.+112    	; 0x1938 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    18c8:	21 30       	cpi	r18, 0x01	; 1
    18ca:	31 05       	cpc	r19, r1
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <udc_process_setup+0x18c>
    18ce:	4c c1       	rjmp	.+664    	; 0x1b68 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    18d0:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udc_num_configuration>
    18d4:	88 23       	and	r24, r24
    18d6:	09 f4       	brne	.+2      	; 0x18da <udc_process_setup+0x196>
    18d8:	47 c1       	rjmp	.+654    	; 0x1b68 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18da:	c0 91 bd 23 	lds	r28, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    18de:	d0 91 be 23 	lds	r29, 0x23BE	; 0x8023be <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    18e2:	00 91 e4 21 	lds	r16, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    18e6:	10 91 e5 21 	lds	r17, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    18ea:	d8 01       	movw	r26, r16
    18ec:	ed 91       	ld	r30, X+
    18ee:	fc 91       	ld	r31, X
    18f0:	84 81       	ldd	r24, Z+4	; 0x04
    18f2:	c8 17       	cp	r28, r24
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    18f6:	38 c1       	rjmp	.+624    	; 0x1b68 <udc_process_setup+0x424>
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	8c 2f       	mov	r24, r28
    18fc:	14 de       	rcall	.-984    	; 0x1526 <udc_update_iface_desc>
    18fe:	88 23       	and	r24, r24
    1900:	09 f4       	brne	.+2      	; 0x1904 <udc_process_setup+0x1c0>
    1902:	2d c1       	rjmp	.+602    	; 0x1b5e <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1904:	ce 01       	movw	r24, r28
    1906:	99 27       	eor	r25, r25
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	d8 01       	movw	r26, r16
    190e:	12 96       	adiw	r26, 0x02	; 2
    1910:	ed 91       	ld	r30, X+
    1912:	fc 91       	ld	r31, X
    1914:	13 97       	sbiw	r26, 0x03	; 3
    1916:	e8 0f       	add	r30, r24
    1918:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    191a:	01 90       	ld	r0, Z+
    191c:	f0 81       	ld	r31, Z
    191e:	e0 2d       	mov	r30, r0
    1920:	86 81       	ldd	r24, Z+6	; 0x06
    1922:	97 81       	ldd	r25, Z+7	; 0x07
    1924:	fc 01       	movw	r30, r24
    1926:	19 95       	eicall
    1928:	80 93 e8 21 	sts	0x21E8, r24	; 0x8021e8 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    192c:	61 e0       	ldi	r22, 0x01	; 1
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	88 ee       	ldi	r24, 0xE8	; 232
    1932:	91 e2       	ldi	r25, 0x21	; 33
    1934:	92 d5       	rcall	.+2852   	; 0x245a <udd_set_setup_payload>
    1936:	9e c1       	rjmp	.+828    	; 0x1c74 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1938:	82 30       	cpi	r24, 0x02	; 2
    193a:	09 f0       	breq	.+2      	; 0x193e <udc_process_setup+0x1fa>
    193c:	10 c1       	rjmp	.+544    	; 0x1b5e <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    193e:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1942:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1944:	05 c1       	rjmp	.+522    	; 0x1b50 <udc_process_setup+0x40c>
    1946:	22 30       	cpi	r18, 0x02	; 2
    1948:	31 05       	cpc	r19, r1
    194a:	09 f0       	breq	.+2      	; 0x194e <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    194c:	3d c1       	rjmp	.+634    	; 0x1bc8 <udc_process_setup+0x484>
    194e:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    1952:	12 d6       	rcall	.+3108   	; 0x2578 <udd_ep_is_halted>
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	80 93 e0 21 	sts	0x21E0, r24	; 0x8021e0 <udc_ep_status.4577>
    195a:	90 93 e1 21 	sts	0x21E1, r25	; 0x8021e1 <udc_ep_status.4577+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    195e:	62 e0       	ldi	r22, 0x02	; 2
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	80 ee       	ldi	r24, 0xE0	; 224
    1964:	91 e2       	ldi	r25, 0x21	; 33
    1966:	79 d5       	rcall	.+2802   	; 0x245a <udd_set_setup_payload>
    1968:	85 c1       	rjmp	.+778    	; 0x1c74 <udc_process_setup+0x530>
    196a:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    196c:	09 f0       	breq	.+2      	; 0x1970 <udc_process_setup+0x22c>
    196e:	9f c0       	rjmp	.+318    	; 0x1aae <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1970:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1974:	93 30       	cpi	r25, 0x03	; 3
    1976:	91 f1       	breq	.+100    	; 0x19dc <udc_process_setup+0x298>
    1978:	18 f4       	brcc	.+6      	; 0x1980 <udc_process_setup+0x23c>
    197a:	91 30       	cpi	r25, 0x01	; 1
    197c:	a9 f0       	breq	.+42     	; 0x19a8 <udc_process_setup+0x264>
    197e:	97 c0       	rjmp	.+302    	; 0x1aae <udc_process_setup+0x36a>
    1980:	95 30       	cpi	r25, 0x05	; 5
    1982:	21 f0       	breq	.+8      	; 0x198c <udc_process_setup+0x248>
    1984:	99 30       	cpi	r25, 0x09	; 9
    1986:	09 f4       	brne	.+2      	; 0x198a <udc_process_setup+0x246>
    1988:	43 c0       	rjmp	.+134    	; 0x1a10 <udc_process_setup+0x2cc>
    198a:	91 c0       	rjmp	.+290    	; 0x1aae <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    198c:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1990:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1994:	89 2b       	or	r24, r25
    1996:	09 f0       	breq	.+2      	; 0x199a <udc_process_setup+0x256>
    1998:	17 c1       	rjmp	.+558    	; 0x1bc8 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    199a:	8e e8       	ldi	r24, 0x8E	; 142
    199c:	9a e0       	ldi	r25, 0x0A	; 10
    199e:	80 93 c5 23 	sts	0x23C5, r24	; 0x8023c5 <udd_g_ctrlreq+0xc>
    19a2:	90 93 c6 23 	sts	0x23C6, r25	; 0x8023c6 <udd_g_ctrlreq+0xd>
    19a6:	66 c1       	rjmp	.+716    	; 0x1c74 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19a8:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    19ac:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    19b0:	89 2b       	or	r24, r25
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <udc_process_setup+0x272>
    19b4:	09 c1       	rjmp	.+530    	; 0x1bc8 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    19b6:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    19ba:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <udc_process_setup+0x280>
    19c2:	02 c1       	rjmp	.+516    	; 0x1bc8 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    19c4:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <udc_device_status>
    19c8:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <udc_device_status+0x1>
    19cc:	8d 7f       	andi	r24, 0xFD	; 253
    19ce:	80 93 ea 21 	sts	0x21EA, r24	; 0x8021ea <udc_device_status>
    19d2:	90 93 eb 21 	sts	0x21EB, r25	; 0x8021eb <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    19d6:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <main_remotewakeup_disable>
    19da:	4c c1       	rjmp	.+664    	; 0x1c74 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19dc:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    19e0:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    19e4:	89 2b       	or	r24, r25
    19e6:	09 f0       	breq	.+2      	; 0x19ea <udc_process_setup+0x2a6>
    19e8:	ef c0       	rjmp	.+478    	; 0x1bc8 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    19ea:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    19ee:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <udc_process_setup+0x2b4>
    19f6:	ae c0       	rjmp	.+348    	; 0x1b54 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    19f8:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <udc_device_status>
    19fc:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <udc_device_status+0x1>
    1a00:	82 60       	ori	r24, 0x02	; 2
    1a02:	80 93 ea 21 	sts	0x21EA, r24	; 0x8021ea <udc_device_status>
    1a06:	90 93 eb 21 	sts	0x21EB, r25	; 0x8021eb <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1a0a:	0e 94 44 16 	call	0x2c88	; 0x2c88 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1a0e:	32 c1       	rjmp	.+612    	; 0x1c74 <udc_process_setup+0x530>
    1a10:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1a14:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1a18:	89 2b       	or	r24, r25
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1a1c:	d5 c0       	rjmp	.+426    	; 0x1bc8 <udc_process_setup+0x484>
    1a1e:	1a d5       	rcall	.+2612   	; 0x2454 <udd_getaddress>
    1a20:	88 23       	and	r24, r24
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <udc_process_setup+0x2e2>
    1a24:	9c c0       	rjmp	.+312    	; 0x1b5e <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a26:	20 91 bb 23 	lds	r18, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1a2a:	30 91 bc 23 	lds	r19, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1a2e:	33 27       	eor	r19, r19
    1a30:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1a34:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a38:	81 89       	ldd	r24, Z+17	; 0x11
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	82 17       	cp	r24, r18
    1a3e:	93 07       	cpc	r25, r19
    1a40:	08 f4       	brcc	.+2      	; 0x1a44 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1a42:	8d c0       	rjmp	.+282    	; 0x1b5e <udc_process_setup+0x41a>
    1a44:	25 de       	rcall	.-950    	; 0x1690 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1a46:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1a4a:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1a4e:	80 93 e6 21 	sts	0x21E6, r24	; 0x8021e6 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1a52:	88 23       	and	r24, r24
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <udc_process_setup+0x314>
    1a56:	0e c1       	rjmp	.+540    	; 0x1c74 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1a58:	99 27       	eor	r25, r25
    1a5a:	81 50       	subi	r24, 0x01	; 1
    1a5c:	90 4c       	sbci	r25, 0xC0	; 192
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1a6a:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1a6e:	e8 0f       	add	r30, r24
    1a70:	f9 1f       	adc	r31, r25
    1a72:	e0 93 e4 21 	sts	0x21E4, r30	; 0x8021e4 <udc_ptr_conf>
    1a76:	f0 93 e5 21 	sts	0x21E5, r31	; 0x8021e5 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a7a:	01 90       	ld	r0, Z+
    1a7c:	f0 81       	ld	r31, Z
    1a7e:	e0 2d       	mov	r30, r0
    1a80:	84 81       	ldd	r24, Z+4	; 0x04
    1a82:	88 23       	and	r24, r24
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <udc_process_setup+0x344>
    1a86:	f6 c0       	rjmp	.+492    	; 0x1c74 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1a88:	c0 e0       	ldi	r28, 0x00	; 0
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	8c 2f       	mov	r24, r28
    1a8e:	c7 dd       	rcall	.-1138   	; 0x161e <udc_iface_enable>
    1a90:	88 23       	and	r24, r24
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <udc_process_setup+0x352>
    1a94:	64 c0       	rjmp	.+200    	; 0x1b5e <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1a96:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a98:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1a9c:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    1aa0:	01 90       	ld	r0, Z+
    1aa2:	f0 81       	ld	r31, Z
    1aa4:	e0 2d       	mov	r30, r0
    1aa6:	84 81       	ldd	r24, Z+4	; 0x04
    1aa8:	c8 17       	cp	r28, r24
    1aaa:	78 f3       	brcs	.-34     	; 0x1a8a <udc_process_setup+0x346>
    1aac:	e3 c0       	rjmp	.+454    	; 0x1c74 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	e9 f4       	brne	.+58     	; 0x1aec <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ab2:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1ab6:	9b 30       	cpi	r25, 0x0B	; 11
    1ab8:	c9 f4       	brne	.+50     	; 0x1aec <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1aba:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1abe:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1ac2:	89 2b       	or	r24, r25
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1ac6:	50 c0       	rjmp	.+160    	; 0x1b68 <udc_process_setup+0x424>
    1ac8:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udc_num_configuration>
    1acc:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <udc_process_setup+0x38e>
    1ad0:	4b c0       	rjmp	.+150    	; 0x1b68 <udc_process_setup+0x424>
    1ad2:	e9 eb       	ldi	r30, 0xB9	; 185
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1ad4:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1ad6:	c4 81       	ldd	r28, Z+4	; 0x04
    1ad8:	d2 81       	ldd	r29, Z+2	; 0x02
    1ada:	8c 2f       	mov	r24, r28
    1adc:	5e dd       	rcall	.-1348   	; 0x159a <udc_iface_disable>
    1ade:	88 23       	and	r24, r24
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1ae2:	3d c0       	rjmp	.+122    	; 0x1b5e <udc_process_setup+0x41a>
    1ae4:	6d 2f       	mov	r22, r29
    1ae6:	8c 2f       	mov	r24, r28
    1ae8:	9a dd       	rcall	.-1228   	; 0x161e <udc_iface_enable>
    1aea:	37 c0       	rjmp	.+110    	; 0x1b5a <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1aec:	82 30       	cpi	r24, 0x02	; 2
    1aee:	b9 f5       	brne	.+110    	; 0x1b5e <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1af0:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	19 f0       	breq	.+6      	; 0x1afe <udc_process_setup+0x3ba>
    1af8:	83 30       	cpi	r24, 0x03	; 3
    1afa:	99 f0       	breq	.+38     	; 0x1b22 <udc_process_setup+0x3de>
    1afc:	2d c0       	rjmp	.+90     	; 0x1b58 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1afe:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1b02:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1b06:	89 2b       	or	r24, r25
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1b0a:	5e c0       	rjmp	.+188    	; 0x1bc8 <udc_process_setup+0x484>
    1b0c:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1b10:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1b14:	89 2b       	or	r24, r25
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b18:	57 c0       	rjmp	.+174    	; 0x1bc8 <udc_process_setup+0x484>
    1b1a:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    1b1e:	47 d5       	rcall	.+2702   	; 0x25ae <udd_ep_clear_halt>
    1b20:	1c c0       	rjmp	.+56     	; 0x1b5a <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b22:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1b26:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1b2a:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <udc_process_setup+0x3ec>
    1b2e:	4c c0       	rjmp	.+152    	; 0x1bc8 <udc_process_setup+0x484>
    1b30:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1b34:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1b38:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <udc_process_setup+0x3fa>
    1b3c:	45 c0       	rjmp	.+138    	; 0x1bc8 <udc_process_setup+0x484>
    1b3e:	c9 eb       	ldi	r28, 0xB9	; 185
    1b40:	d3 e2       	ldi	r29, 0x23	; 35
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b44:	35 d6       	rcall	.+3178   	; 0x27b0 <udd_ep_abort>
    1b46:	8c 81       	ldd	r24, Y+4	; 0x04
    1b48:	9e d6       	rcall	.+3388   	; 0x2886 <udd_ep_set_halt>
    1b4a:	07 c0       	rjmp	.+14     	; 0x1b5a <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	05 c0       	rjmp	.+10     	; 0x1b5a <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	01 c0       	rjmp	.+2      	; 0x1b5a <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1b58:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	8c c0       	rjmp	.+280    	; 0x1c76 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1b5e:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    1b62:	8f 71       	andi	r24, 0x1F	; 31
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	81 f5       	brne	.+96     	; 0x1bc8 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b68:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udc_num_configuration>
    1b6c:	88 23       	and	r24, r24
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b70:	71 c0       	rjmp	.+226    	; 0x1c54 <udc_process_setup+0x510>
    1b72:	00 91 bd 23 	lds	r16, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    1b76:	10 91 be 23 	lds	r17, 0x23BE	; 0x8023be <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b7a:	c0 91 e4 21 	lds	r28, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1b7e:	d0 91 e5 21 	lds	r29, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    1b82:	e8 81       	ld	r30, Y
    1b84:	f9 81       	ldd	r31, Y+1	; 0x01
    1b86:	84 81       	ldd	r24, Z+4	; 0x04
    1b88:	08 17       	cp	r16, r24
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b8c:	65 c0       	rjmp	.+202    	; 0x1c58 <udc_process_setup+0x514>
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	80 2f       	mov	r24, r16
    1b92:	c9 dc       	rcall	.-1646   	; 0x1526 <udc_update_iface_desc>
    1b94:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b96:	c1 f0       	breq	.+48     	; 0x1bc8 <udc_process_setup+0x484>
    1b98:	f8 01       	movw	r30, r16
    1b9a:	ff 27       	eor	r31, r31
    1b9c:	cf 01       	movw	r24, r30
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ba4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ba6:	e8 0f       	add	r30, r24
    1ba8:	f9 1f       	adc	r31, r25
    1baa:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1bac:	d1 81       	ldd	r29, Z+1	; 0x01
    1bae:	ee 81       	ldd	r30, Y+6	; 0x06
    1bb0:	ff 81       	ldd	r31, Y+7	; 0x07
    1bb2:	19 95       	eicall
    1bb4:	68 2f       	mov	r22, r24
    1bb6:	80 2f       	mov	r24, r16
    1bb8:	b6 dc       	rcall	.-1684   	; 0x1526 <udc_update_iface_desc>
    1bba:	88 23       	and	r24, r24
    1bbc:	29 f0       	breq	.+10     	; 0x1bc8 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1bbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1bc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1bc2:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1bc4:	81 11       	cpse	r24, r1
    1bc6:	57 c0       	rjmp	.+174    	; 0x1c76 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1bc8:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    1bcc:	8f 71       	andi	r24, 0x1F	; 31
    1bce:	82 30       	cpi	r24, 0x02	; 2
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <udc_process_setup+0x490>
    1bd2:	44 c0       	rjmp	.+136    	; 0x1c5c <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1bd4:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udc_num_configuration>
    1bd8:	88 23       	and	r24, r24
    1bda:	b1 f1       	breq	.+108    	; 0x1c48 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1bdc:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1be0:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    1be4:	ed 91       	ld	r30, X+
    1be6:	fc 91       	ld	r31, X
    1be8:	11 97       	sbiw	r26, 0x01	; 1
    1bea:	84 81       	ldd	r24, Z+4	; 0x04
    1bec:	88 23       	and	r24, r24
    1bee:	71 f1       	breq	.+92     	; 0x1c4c <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bf0:	c0 e0       	ldi	r28, 0x00	; 0
    1bf2:	ec 2f       	mov	r30, r28
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	ee 0f       	add	r30, r30
    1bf8:	ff 1f       	adc	r31, r31
    1bfa:	12 96       	adiw	r26, 0x02	; 2
    1bfc:	8d 91       	ld	r24, X+
    1bfe:	9c 91       	ld	r25, X
    1c00:	13 97       	sbiw	r26, 0x03	; 3
    1c02:	e8 0f       	add	r30, r24
    1c04:	f9 1f       	adc	r31, r25
    1c06:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c08:	11 81       	ldd	r17, Z+1	; 0x01
    1c0a:	d8 01       	movw	r26, r16
    1c0c:	16 96       	adiw	r26, 0x06	; 6
    1c0e:	ed 91       	ld	r30, X+
    1c10:	fc 91       	ld	r31, X
    1c12:	17 97       	sbiw	r26, 0x07	; 7
    1c14:	19 95       	eicall
    1c16:	68 2f       	mov	r22, r24
    1c18:	8c 2f       	mov	r24, r28
    1c1a:	85 dc       	rcall	.-1782   	; 0x1526 <udc_update_iface_desc>
    1c1c:	88 23       	and	r24, r24
    1c1e:	59 f1       	breq	.+86     	; 0x1c76 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1c20:	d8 01       	movw	r26, r16
    1c22:	14 96       	adiw	r26, 0x04	; 4
    1c24:	ed 91       	ld	r30, X+
    1c26:	fc 91       	ld	r31, X
    1c28:	15 97       	sbiw	r26, 0x05	; 5
    1c2a:	19 95       	eicall
    1c2c:	81 11       	cpse	r24, r1
    1c2e:	23 c0       	rjmp	.+70     	; 0x1c76 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c30:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c32:	a0 91 e4 21 	lds	r26, 0x21E4	; 0x8021e4 <udc_ptr_conf>
    1c36:	b0 91 e5 21 	lds	r27, 0x21E5	; 0x8021e5 <udc_ptr_conf+0x1>
    1c3a:	ed 91       	ld	r30, X+
    1c3c:	fc 91       	ld	r31, X
    1c3e:	11 97       	sbiw	r26, 0x01	; 1
    1c40:	94 81       	ldd	r25, Z+4	; 0x04
    1c42:	c9 17       	cp	r28, r25
    1c44:	b0 f2       	brcs	.-84     	; 0x1bf2 <udc_process_setup+0x4ae>
    1c46:	17 c0       	rjmp	.+46     	; 0x1c76 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	15 c0       	rjmp	.+42     	; 0x1c76 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	13 c0       	rjmp	.+38     	; 0x1c76 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	11 c0       	rjmp	.+34     	; 0x1c76 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	0f c0       	rjmp	.+30     	; 0x1c76 <udc_process_setup+0x532>
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	0d c0       	rjmp	.+26     	; 0x1c76 <udc_process_setup+0x532>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	0b c0       	rjmp	.+22     	; 0x1c76 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1c60:	98 2f       	mov	r25, r24
    1c62:	90 76       	andi	r25, 0x60	; 96
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <udc_process_setup+0x524>
    1c66:	7b cf       	rjmp	.-266    	; 0x1b5e <udc_process_setup+0x41a>
    1c68:	80 ce       	rjmp	.-768    	; 0x196a <udc_process_setup+0x226>
    1c6a:	98 2f       	mov	r25, r24
    1c6c:	90 76       	andi	r25, 0x60	; 96
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <udc_process_setup+0x52e>
    1c70:	76 cf       	rjmp	.-276    	; 0x1b5e <udc_process_setup+0x41a>
    1c72:	81 cd       	rjmp	.-1278   	; 0x1776 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	1f 91       	pop	r17
    1c7c:	0f 91       	pop	r16
    1c7e:	08 95       	ret

00001c80 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1c80:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1c84:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1c86:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1c88:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1c8c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1c8e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1c92:	08 95       	ret

00001c94 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1c94:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1c96:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1c98:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1c9a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1c9c:	60 83       	st	Z, r22
	ret                             // Return to caller
    1c9e:	08 95       	ret

00001ca0 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	1f 92       	push	r1
    1ca6:	1f 92       	push	r1
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	81 11       	cpse	r24, r1
    1cae:	26 c0       	rjmp	.+76     	; 0x1cfc <udd_sleep_mode+0x5c>
    1cb0:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <udd_b_idle>
    1cb4:	99 23       	and	r25, r25
    1cb6:	f9 f0       	breq	.+62     	; 0x1cf6 <udd_sleep_mode+0x56>
    1cb8:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <sleepmgr_locks+0x1>
    1cbc:	91 11       	cpse	r25, r1
    1cbe:	01 c0       	rjmp	.+2      	; 0x1cc2 <udd_sleep_mode+0x22>
    1cc0:	ff cf       	rjmp	.-2      	; 0x1cc0 <udd_sleep_mode+0x20>
    1cc2:	9f b7       	in	r25, 0x3f	; 63
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	f8 94       	cli
    1cc8:	2a 81       	ldd	r18, Y+2	; 0x02
    1cca:	e3 eb       	ldi	r30, 0xB3	; 179
    1ccc:	f3 e2       	ldi	r31, 0x23	; 35
    1cce:	91 81       	ldd	r25, Z+1	; 0x01
    1cd0:	91 50       	subi	r25, 0x01	; 1
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	2f bf       	out	0x3f, r18	; 63
    1cd6:	0f c0       	rjmp	.+30     	; 0x1cf6 <udd_sleep_mode+0x56>
    1cd8:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <sleepmgr_locks+0x1>
    1cdc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <udd_sleep_mode+0x42>
    1ce0:	ff cf       	rjmp	.-2      	; 0x1ce0 <udd_sleep_mode+0x40>
    1ce2:	9f b7       	in	r25, 0x3f	; 63
    1ce4:	99 83       	std	Y+1, r25	; 0x01
    1ce6:	f8 94       	cli
    1ce8:	29 81       	ldd	r18, Y+1	; 0x01
    1cea:	e3 eb       	ldi	r30, 0xB3	; 179
    1cec:	f3 e2       	ldi	r31, 0x23	; 35
    1cee:	91 81       	ldd	r25, Z+1	; 0x01
    1cf0:	9f 5f       	subi	r25, 0xFF	; 255
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	2f bf       	out	0x3f, r18	; 63
    1cf6:	80 93 ac 23 	sts	0x23AC, r24	; 0x8023ac <udd_b_idle>
    1cfa:	05 c0       	rjmp	.+10     	; 0x1d06 <udd_sleep_mode+0x66>
    1cfc:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <udd_b_idle>
    1d00:	99 23       	and	r25, r25
    1d02:	51 f3       	breq	.-44     	; 0x1cd8 <udd_sleep_mode+0x38>
    1d04:	f8 cf       	rjmp	.-16     	; 0x1cf6 <udd_sleep_mode+0x56>
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	08 95       	ret

00001d10 <udd_ctrl_init>:
    1d10:	0f 93       	push	r16
    1d12:	e8 ec       	ldi	r30, 0xC8	; 200
    1d14:	f4 e0       	ldi	r31, 0x04	; 4
    1d16:	80 81       	ld	r24, Z
    1d18:	8f 7d       	andi	r24, 0xDF	; 223
    1d1a:	80 83       	st	Z, r24
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8f 7d       	andi	r24, 0xDF	; 223
    1d20:	80 83       	st	Z, r24
    1d22:	e0 e6       	ldi	r30, 0x60	; 96
    1d24:	f3 e2       	ldi	r31, 0x23	; 35
    1d26:	02 e0       	ldi	r16, 0x02	; 2
    1d28:	05 93       	las	Z, r16
    1d2a:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <udd_sram+0x1e>
    1d2e:	10 92 63 23 	sts	0x2363, r1	; 0x802363 <udd_sram+0x1f>
    1d32:	00 e2       	ldi	r16, 0x20	; 32
    1d34:	06 93       	lac	Z, r16
    1d36:	00 e4       	ldi	r16, 0x40	; 64
    1d38:	06 93       	lac	Z, r16
    1d3a:	e8 e5       	ldi	r30, 0x58	; 88
    1d3c:	f3 e2       	ldi	r31, 0x23	; 35
    1d3e:	00 e4       	ldi	r16, 0x40	; 64
    1d40:	06 93       	lac	Z, r16
    1d42:	e9 eb       	ldi	r30, 0xB9	; 185
    1d44:	f3 e2       	ldi	r31, 0x23	; 35
    1d46:	14 86       	std	Z+12, r1	; 0x0c
    1d48:	15 86       	std	Z+13, r1	; 0x0d
    1d4a:	16 86       	std	Z+14, r1	; 0x0e
    1d4c:	17 86       	std	Z+15, r1	; 0x0f
    1d4e:	12 86       	std	Z+10, r1	; 0x0a
    1d50:	13 86       	std	Z+11, r1	; 0x0b
    1d52:	10 92 41 23 	sts	0x2341, r1	; 0x802341 <udd_ep_control_state>
    1d56:	0f 91       	pop	r16
    1d58:	08 95       	ret

00001d5a <udd_ctrl_stall_data>:
    1d5a:	0f 93       	push	r16
    1d5c:	85 e0       	ldi	r24, 0x05	; 5
    1d5e:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ep_control_state>
    1d62:	e1 e6       	ldi	r30, 0x61	; 97
    1d64:	f3 e2       	ldi	r31, 0x23	; 35
    1d66:	04 e0       	ldi	r16, 0x04	; 4
    1d68:	05 93       	las	Z, r16
    1d6a:	e9 e5       	ldi	r30, 0x59	; 89
    1d6c:	f3 e2       	ldi	r31, 0x23	; 35
    1d6e:	04 e0       	ldi	r16, 0x04	; 4
    1d70:	05 93       	las	Z, r16
    1d72:	0f 91       	pop	r16
    1d74:	08 95       	ret

00001d76 <udd_ctrl_send_zlp_in>:
    1d76:	0f 93       	push	r16
    1d78:	83 e0       	ldi	r24, 0x03	; 3
    1d7a:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ep_control_state>
    1d7e:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <udd_sram+0x1e>
    1d82:	10 92 63 23 	sts	0x2363, r1	; 0x802363 <udd_sram+0x1f>
    1d86:	e0 e6       	ldi	r30, 0x60	; 96
    1d88:	f3 e2       	ldi	r31, 0x23	; 35
    1d8a:	02 e0       	ldi	r16, 0x02	; 2
    1d8c:	06 93       	lac	Z, r16
    1d8e:	0f 91       	pop	r16
    1d90:	08 95       	ret

00001d92 <udd_ctrl_endofrequest>:
    1d92:	e0 91 c5 23 	lds	r30, 0x23C5	; 0x8023c5 <udd_g_ctrlreq+0xc>
    1d96:	f0 91 c6 23 	lds	r31, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0xd>
    1d9a:	30 97       	sbiw	r30, 0x00	; 0
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <udd_ctrl_endofrequest+0xe>
    1d9e:	19 95       	eicall
    1da0:	08 95       	ret

00001da2 <udd_ctrl_in_sent>:
    1da2:	0f 93       	push	r16
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ep_control_state>
    1dac:	83 30       	cpi	r24, 0x03	; 3
    1dae:	19 f4       	brne	.+6      	; 0x1db6 <udd_ctrl_in_sent+0x14>
    1db0:	f0 df       	rcall	.-32     	; 0x1d92 <udd_ctrl_endofrequest>
    1db2:	ae df       	rcall	.-164    	; 0x1d10 <udd_ctrl_init>
    1db4:	5e c0       	rjmp	.+188    	; 0x1e72 <udd_ctrl_in_sent+0xd0>
    1db6:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <udd_ctrl_payload_nb_trans>
    1dba:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    1dbe:	c0 91 c3 23 	lds	r28, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    1dc2:	d0 91 c4 23 	lds	r29, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1dc6:	c8 1b       	sub	r28, r24
    1dc8:	d9 0b       	sbc	r29, r25
    1dca:	71 f5       	brne	.+92     	; 0x1e28 <udd_ctrl_in_sent+0x86>
    1dcc:	20 91 3f 23 	lds	r18, 0x233F	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
    1dd0:	30 91 40 23 	lds	r19, 0x2340	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    1dd4:	82 0f       	add	r24, r18
    1dd6:	93 1f       	adc	r25, r19
    1dd8:	80 93 3f 23 	sts	0x233F, r24	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
    1ddc:	90 93 40 23 	sts	0x2340, r25	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    1de0:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1de4:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1de8:	82 17       	cp	r24, r18
    1dea:	93 07       	cpc	r25, r19
    1dec:	21 f0       	breq	.+8      	; 0x1df6 <udd_ctrl_in_sent+0x54>
    1dee:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <b_shortpacket.5293>
    1df2:	88 23       	and	r24, r24
    1df4:	41 f0       	breq	.+16     	; 0x1e06 <udd_ctrl_in_sent+0x64>
    1df6:	84 e0       	ldi	r24, 0x04	; 4
    1df8:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ep_control_state>
    1dfc:	e8 e5       	ldi	r30, 0x58	; 88
    1dfe:	f3 e2       	ldi	r31, 0x23	; 35
    1e00:	02 e0       	ldi	r16, 0x02	; 2
    1e02:	06 93       	lac	Z, r16
    1e04:	36 c0       	rjmp	.+108    	; 0x1e72 <udd_ctrl_in_sent+0xd0>
    1e06:	e0 91 c7 23 	lds	r30, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0xe>
    1e0a:	f0 91 c8 23 	lds	r31, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0xf>
    1e0e:	30 97       	sbiw	r30, 0x00	; 0
    1e10:	99 f0       	breq	.+38     	; 0x1e38 <udd_ctrl_in_sent+0x96>
    1e12:	19 95       	eicall
    1e14:	88 23       	and	r24, r24
    1e16:	81 f0       	breq	.+32     	; 0x1e38 <udd_ctrl_in_sent+0x96>
    1e18:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <udd_ctrl_payload_nb_trans>
    1e1c:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    1e20:	c0 91 c3 23 	lds	r28, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    1e24:	d0 91 c4 23 	lds	r29, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1e28:	c8 30       	cpi	r28, 0x08	; 8
    1e2a:	d1 05       	cpc	r29, r1
    1e2c:	28 f0       	brcs	.+10     	; 0x1e38 <udd_ctrl_in_sent+0x96>
    1e2e:	10 92 ec 21 	sts	0x21EC, r1	; 0x8021ec <b_shortpacket.5293>
    1e32:	c8 e0       	ldi	r28, 0x08	; 8
    1e34:	d0 e0       	ldi	r29, 0x00	; 0
    1e36:	03 c0       	rjmp	.+6      	; 0x1e3e <udd_ctrl_in_sent+0x9c>
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	80 93 ec 21 	sts	0x21EC, r24	; 0x8021ec <b_shortpacket.5293>
    1e3e:	e4 e4       	ldi	r30, 0x44	; 68
    1e40:	f3 e2       	ldi	r31, 0x23	; 35
    1e42:	c6 8f       	std	Z+30, r28	; 0x1e
    1e44:	d7 8f       	std	Z+31, r29	; 0x1f
    1e46:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <udd_ctrl_payload_nb_trans>
    1e4a:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    1e4e:	20 91 c1 23 	lds	r18, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    1e52:	30 91 c2 23 	lds	r19, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    1e56:	28 0f       	add	r18, r24
    1e58:	39 1f       	adc	r19, r25
    1e5a:	20 a3       	std	Z+32, r18	; 0x20
    1e5c:	31 a3       	std	Z+33, r19	; 0x21
    1e5e:	c8 0f       	add	r28, r24
    1e60:	d9 1f       	adc	r29, r25
    1e62:	c0 93 3d 23 	sts	0x233D, r28	; 0x80233d <udd_ctrl_payload_nb_trans>
    1e66:	d0 93 3e 23 	sts	0x233E, r29	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    1e6a:	e0 e6       	ldi	r30, 0x60	; 96
    1e6c:	f3 e2       	ldi	r31, 0x23	; 35
    1e6e:	02 e0       	ldi	r16, 0x02	; 2
    1e70:	06 93       	lac	Z, r16
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	0f 91       	pop	r16
    1e78:	08 95       	ret

00001e7a <udd_ep_get_size>:
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	81 81       	ldd	r24, Z+1	; 0x01
    1e7e:	e8 2f       	mov	r30, r24
    1e80:	e7 70       	andi	r30, 0x07	; 7
    1e82:	8e 2f       	mov	r24, r30
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	fc 01       	movw	r30, r24
    1e88:	31 97       	sbiw	r30, 0x01	; 1
    1e8a:	e7 30       	cpi	r30, 0x07	; 7
    1e8c:	f1 05       	cpc	r31, r1
    1e8e:	d0 f4       	brcc	.+52     	; 0x1ec4 <udd_ep_get_size+0x4a>
    1e90:	88 27       	eor	r24, r24
    1e92:	e9 5f       	subi	r30, 0xF9	; 249
    1e94:	fe 4f       	sbci	r31, 0xFE	; 254
    1e96:	8f 4f       	sbci	r24, 0xFF	; 255
    1e98:	22 c7       	rjmp	.+3652   	; 0x2cde <__tablejump2__>
    1e9a:	80 e1       	ldi	r24, 0x10	; 16
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	08 95       	ret
    1ea0:	80 e2       	ldi	r24, 0x20	; 32
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	08 95       	ret
    1ea6:	80 e4       	ldi	r24, 0x40	; 64
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	08 95       	ret
    1eac:	80 e8       	ldi	r24, 0x80	; 128
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	08 95       	ret
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	91 e0       	ldi	r25, 0x01	; 1
    1eb6:	08 95       	ret
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	92 e0       	ldi	r25, 0x02	; 2
    1ebc:	08 95       	ret
    1ebe:	8f ef       	ldi	r24, 0xFF	; 255
    1ec0:	93 e0       	ldi	r25, 0x03	; 3
    1ec2:	08 95       	ret
    1ec4:	88 e0       	ldi	r24, 0x08	; 8
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	08 95       	ret

00001eca <udd_ep_get_job>:
    1eca:	28 2f       	mov	r18, r24
    1ecc:	2f 70       	andi	r18, 0x0F	; 15
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	22 0f       	add	r18, r18
    1ed2:	33 1f       	adc	r19, r19
    1ed4:	08 2e       	mov	r0, r24
    1ed6:	00 0c       	add	r0, r0
    1ed8:	99 0b       	sbc	r25, r25
    1eda:	88 27       	eor	r24, r24
    1edc:	99 0f       	add	r25, r25
    1ede:	88 1f       	adc	r24, r24
    1ee0:	99 27       	eor	r25, r25
    1ee2:	82 0f       	add	r24, r18
    1ee4:	93 1f       	adc	r25, r19
    1ee6:	02 97       	sbiw	r24, 0x02	; 2
    1ee8:	9c 01       	movw	r18, r24
    1eea:	22 0f       	add	r18, r18
    1eec:	33 1f       	adc	r19, r19
    1eee:	22 0f       	add	r18, r18
    1ef0:	33 1f       	adc	r19, r19
    1ef2:	22 0f       	add	r18, r18
    1ef4:	33 1f       	adc	r19, r19
    1ef6:	82 0f       	add	r24, r18
    1ef8:	93 1f       	adc	r25, r19
    1efa:	83 51       	subi	r24, 0x13	; 19
    1efc:	9d 4d       	sbci	r25, 0xDD	; 221
    1efe:	08 95       	ret

00001f00 <udd_ctrl_interrupt_tc_setup>:
    1f00:	0f 93       	push	r16
    1f02:	cf 93       	push	r28
    1f04:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1f08:	80 ff       	sbrs	r24, 0
    1f0a:	64 c0       	rjmp	.+200    	; 0x1fd4 <udd_ctrl_interrupt_tc_setup+0xd4>
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1f12:	e8 e5       	ldi	r30, 0x58	; 88
    1f14:	f3 e2       	ldi	r31, 0x23	; 35
    1f16:	00 e8       	ldi	r16, 0x80	; 128
    1f18:	06 93       	lac	Z, r16
    1f1a:	e0 e6       	ldi	r30, 0x60	; 96
    1f1c:	f3 e2       	ldi	r31, 0x23	; 35
    1f1e:	00 e8       	ldi	r16, 0x80	; 128
    1f20:	06 93       	lac	Z, r16
    1f22:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1f26:	e8 e5       	ldi	r30, 0x58	; 88
    1f28:	f3 e2       	ldi	r31, 0x23	; 35
    1f2a:	00 e1       	ldi	r16, 0x10	; 16
    1f2c:	06 93       	lac	Z, r16
    1f2e:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ep_control_state>
    1f32:	88 23       	and	r24, r24
    1f34:	29 f0       	breq	.+10     	; 0x1f40 <udd_ctrl_interrupt_tc_setup+0x40>
    1f36:	83 50       	subi	r24, 0x03	; 3
    1f38:	82 30       	cpi	r24, 0x02	; 2
    1f3a:	08 f4       	brcc	.+2      	; 0x1f3e <udd_ctrl_interrupt_tc_setup+0x3e>
    1f3c:	2a df       	rcall	.-428    	; 0x1d92 <udd_ctrl_endofrequest>
    1f3e:	e8 de       	rcall	.-560    	; 0x1d10 <udd_ctrl_init>
    1f40:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <udd_sram+0x16>
    1f44:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <udd_sram+0x17>
    1f48:	08 97       	sbiw	r24, 0x08	; 8
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <udd_ctrl_interrupt_tc_setup+0x4e>
    1f4c:	45 c0       	rjmp	.+138    	; 0x1fd8 <udd_ctrl_interrupt_tc_setup+0xd8>
    1f4e:	88 e0       	ldi	r24, 0x08	; 8
    1f50:	e5 e3       	ldi	r30, 0x35	; 53
    1f52:	f3 e2       	ldi	r31, 0x23	; 35
    1f54:	a9 eb       	ldi	r26, 0xB9	; 185
    1f56:	b3 e2       	ldi	r27, 0x23	; 35
    1f58:	01 90       	ld	r0, Z+
    1f5a:	0d 92       	st	X+, r0
    1f5c:	8a 95       	dec	r24
    1f5e:	e1 f7       	brne	.-8      	; 0x1f58 <udd_ctrl_interrupt_tc_setup+0x58>
    1f60:	e8 ec       	ldi	r30, 0xC8	; 200
    1f62:	f4 e0       	ldi	r31, 0x04	; 4
    1f64:	80 81       	ld	r24, Z
    1f66:	80 62       	ori	r24, 0x20	; 32
    1f68:	80 83       	st	Z, r24
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 62       	ori	r24, 0x20	; 32
    1f6e:	80 83       	st	Z, r24
    1f70:	e9 db       	rcall	.-2094   	; 0x1744 <udc_process_setup>
    1f72:	c8 2f       	mov	r28, r24
    1f74:	81 11       	cpse	r24, r1
    1f76:	03 c0       	rjmp	.+6      	; 0x1f7e <udd_ctrl_interrupt_tc_setup+0x7e>
    1f78:	f0 de       	rcall	.-544    	; 0x1d5a <udd_ctrl_stall_data>
    1f7a:	c1 e0       	ldi	r28, 0x01	; 1
    1f7c:	2e c0       	rjmp	.+92     	; 0x1fda <udd_ctrl_interrupt_tc_setup+0xda>
    1f7e:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    1f82:	88 23       	and	r24, r24
    1f84:	6c f4       	brge	.+26     	; 0x1fa0 <udd_ctrl_interrupt_tc_setup+0xa0>
    1f86:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
    1f8a:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f8e:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <udd_ctrl_payload_nb_trans>
    1f92:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    1f96:	82 e0       	ldi	r24, 0x02	; 2
    1f98:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ep_control_state>
    1f9c:	02 df       	rcall	.-508    	; 0x1da2 <udd_ctrl_in_sent>
    1f9e:	1d c0       	rjmp	.+58     	; 0x1fda <udd_ctrl_interrupt_tc_setup+0xda>
    1fa0:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1fa4:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1fa8:	89 2b       	or	r24, r25
    1faa:	11 f4       	brne	.+4      	; 0x1fb0 <udd_ctrl_interrupt_tc_setup+0xb0>
    1fac:	e4 de       	rcall	.-568    	; 0x1d76 <udd_ctrl_send_zlp_in>
    1fae:	15 c0       	rjmp	.+42     	; 0x1fda <udd_ctrl_interrupt_tc_setup+0xda>
    1fb0:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
    1fb4:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fb8:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <udd_ctrl_payload_nb_trans>
    1fbc:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ep_control_state>
    1fc6:	e8 e5       	ldi	r30, 0x58	; 88
    1fc8:	f3 e2       	ldi	r31, 0x23	; 35
    1fca:	02 e0       	ldi	r16, 0x02	; 2
    1fcc:	06 93       	lac	Z, r16
    1fce:	00 e2       	ldi	r16, 0x20	; 32
    1fd0:	06 93       	lac	Z, r16
    1fd2:	03 c0       	rjmp	.+6      	; 0x1fda <udd_ctrl_interrupt_tc_setup+0xda>
    1fd4:	c0 e0       	ldi	r28, 0x00	; 0
    1fd6:	01 c0       	rjmp	.+2      	; 0x1fda <udd_ctrl_interrupt_tc_setup+0xda>
    1fd8:	c1 e0       	ldi	r28, 0x01	; 1
    1fda:	8c 2f       	mov	r24, r28
    1fdc:	cf 91       	pop	r28
    1fde:	0f 91       	pop	r16
    1fe0:	08 95       	ret

00001fe2 <udd_ep_trans_complet>:
    1fe2:	8f 92       	push	r8
    1fe4:	9f 92       	push	r9
    1fe6:	af 92       	push	r10
    1fe8:	bf 92       	push	r11
    1fea:	df 92       	push	r13
    1fec:	ef 92       	push	r14
    1fee:	ff 92       	push	r15
    1ff0:	0f 93       	push	r16
    1ff2:	1f 93       	push	r17
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	d8 2e       	mov	r13, r24
    1ffa:	67 df       	rcall	.-306    	; 0x1eca <udd_ep_get_job>
    1ffc:	8c 01       	movw	r16, r24
    1ffe:	cd 2d       	mov	r28, r13
    2000:	cf 70       	andi	r28, 0x0F	; 15
    2002:	d0 e0       	ldi	r29, 0x00	; 0
    2004:	ce 01       	movw	r24, r28
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	cd 2d       	mov	r28, r13
    200c:	0d 2c       	mov	r0, r13
    200e:	00 0c       	add	r0, r0
    2010:	dd 0b       	sbc	r29, r29
    2012:	cc 27       	eor	r28, r28
    2014:	dd 0f       	add	r29, r29
    2016:	cc 1f       	adc	r28, r28
    2018:	dd 27       	eor	r29, r29
    201a:	c8 0f       	add	r28, r24
    201c:	d9 1f       	adc	r29, r25
    201e:	ce 01       	movw	r24, r28
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	9c 01       	movw	r18, r24
    202e:	28 5a       	subi	r18, 0xA8	; 168
    2030:	3c 4d       	sbci	r19, 0xDC	; 220
    2032:	79 01       	movw	r14, r18
    2034:	c9 01       	movw	r24, r18
    2036:	21 df       	rcall	.-446    	; 0x1e7a <udd_ep_get_size>
    2038:	4c 01       	movw	r8, r24
    203a:	dd 20       	and	r13, r13
    203c:	0c f0       	brlt	.+2      	; 0x2040 <udd_ep_trans_complet+0x5e>
    203e:	79 c0       	rjmp	.+242    	; 0x2132 <udd_ep_trans_complet+0x150>
    2040:	fe 01       	movw	r30, r28
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	ee 0f       	add	r30, r30
    2048:	ff 1f       	adc	r31, r31
    204a:	ee 0f       	add	r30, r30
    204c:	ff 1f       	adc	r31, r31
    204e:	ec 5b       	subi	r30, 0xBC	; 188
    2050:	fc 4d       	sbci	r31, 0xDC	; 220
    2052:	22 8d       	ldd	r18, Z+26	; 0x1a
    2054:	33 8d       	ldd	r19, Z+27	; 0x1b
    2056:	d8 01       	movw	r26, r16
    2058:	15 96       	adiw	r26, 0x05	; 5
    205a:	8d 91       	ld	r24, X+
    205c:	9c 91       	ld	r25, X
    205e:	16 97       	sbiw	r26, 0x06	; 6
    2060:	82 0f       	add	r24, r18
    2062:	93 1f       	adc	r25, r19
    2064:	15 96       	adiw	r26, 0x05	; 5
    2066:	8d 93       	st	X+, r24
    2068:	9c 93       	st	X, r25
    206a:	16 97       	sbiw	r26, 0x06	; 6
    206c:	13 96       	adiw	r26, 0x03	; 3
    206e:	2d 91       	ld	r18, X+
    2070:	3c 91       	ld	r19, X
    2072:	14 97       	sbiw	r26, 0x04	; 4
    2074:	82 17       	cp	r24, r18
    2076:	93 07       	cpc	r25, r19
    2078:	09 f4       	brne	.+2      	; 0x207c <udd_ep_trans_complet+0x9a>
    207a:	45 c0       	rjmp	.+138    	; 0x2106 <udd_ep_trans_complet+0x124>
    207c:	28 1b       	sub	r18, r24
    207e:	39 0b       	sbc	r19, r25
    2080:	21 15       	cp	r18, r1
    2082:	b4 e0       	ldi	r27, 0x04	; 4
    2084:	3b 07       	cpc	r19, r27
    2086:	38 f0       	brcs	.+14     	; 0x2096 <udd_ep_trans_complet+0xb4>
    2088:	2f ef       	ldi	r18, 0xFF	; 255
    208a:	33 e0       	ldi	r19, 0x03	; 3
    208c:	c9 01       	movw	r24, r18
    208e:	b4 01       	movw	r22, r8
    2090:	12 d6       	rcall	.+3108   	; 0x2cb6 <__udivmodhi4>
    2092:	28 1b       	sub	r18, r24
    2094:	39 0b       	sbc	r19, r25
    2096:	f8 01       	movw	r30, r16
    2098:	80 81       	ld	r24, Z
    209a:	81 ff       	sbrs	r24, 1
    209c:	09 c0       	rjmp	.+18     	; 0x20b0 <udd_ep_trans_complet+0xce>
    209e:	c9 01       	movw	r24, r18
    20a0:	b4 01       	movw	r22, r8
    20a2:	09 d6       	rcall	.+3090   	; 0x2cb6 <__udivmodhi4>
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	89 2b       	or	r24, r25
    20a8:	09 f0       	breq	.+2      	; 0x20ac <udd_ep_trans_complet+0xca>
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	84 2f       	mov	r24, r20
    20ae:	01 c0       	rjmp	.+2      	; 0x20b2 <udd_ep_trans_complet+0xd0>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	d8 01       	movw	r26, r16
    20b4:	9c 91       	ld	r25, X
    20b6:	80 fb       	bst	r24, 0
    20b8:	91 f9       	bld	r25, 1
    20ba:	9c 93       	st	X, r25
    20bc:	fe 01       	movw	r30, r28
    20be:	ee 0f       	add	r30, r30
    20c0:	ff 1f       	adc	r31, r31
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	ec 5b       	subi	r30, 0xBC	; 188
    20cc:	fc 4d       	sbci	r31, 0xDC	; 220
    20ce:	12 8e       	std	Z+26, r1	; 0x1a
    20d0:	13 8e       	std	Z+27, r1	; 0x1b
    20d2:	26 8b       	std	Z+22, r18	; 0x16
    20d4:	37 8b       	std	Z+23, r19	; 0x17
    20d6:	11 96       	adiw	r26, 0x01	; 1
    20d8:	2d 91       	ld	r18, X+
    20da:	3c 91       	ld	r19, X
    20dc:	12 97       	sbiw	r26, 0x02	; 2
    20de:	15 96       	adiw	r26, 0x05	; 5
    20e0:	8d 91       	ld	r24, X+
    20e2:	9c 91       	ld	r25, X
    20e4:	16 97       	sbiw	r26, 0x06	; 6
    20e6:	82 0f       	add	r24, r18
    20e8:	93 1f       	adc	r25, r19
    20ea:	cc 0f       	add	r28, r28
    20ec:	dd 1f       	adc	r29, r29
    20ee:	cc 0f       	add	r28, r28
    20f0:	dd 1f       	adc	r29, r29
    20f2:	cc 0f       	add	r28, r28
    20f4:	dd 1f       	adc	r29, r29
    20f6:	c4 5a       	subi	r28, 0xA4	; 164
    20f8:	dc 4d       	sbci	r29, 0xDC	; 220
    20fa:	88 83       	st	Y, r24
    20fc:	99 83       	std	Y+1, r25	; 0x01
    20fe:	f7 01       	movw	r30, r14
    2100:	02 e0       	ldi	r16, 0x02	; 2
    2102:	06 93       	lac	Z, r16
    2104:	e0 c0       	rjmp	.+448    	; 0x22c6 <udd_ep_trans_complet+0x2e4>
    2106:	d8 01       	movw	r26, r16
    2108:	8c 91       	ld	r24, X
    210a:	81 ff       	sbrs	r24, 1
    210c:	c9 c0       	rjmp	.+402    	; 0x22a0 <udd_ep_trans_complet+0x2be>
    210e:	8d 7f       	andi	r24, 0xFD	; 253
    2110:	8c 93       	st	X, r24
    2112:	cc 0f       	add	r28, r28
    2114:	dd 1f       	adc	r29, r29
    2116:	cc 0f       	add	r28, r28
    2118:	dd 1f       	adc	r29, r29
    211a:	cc 0f       	add	r28, r28
    211c:	dd 1f       	adc	r29, r29
    211e:	cc 5b       	subi	r28, 0xBC	; 188
    2120:	dc 4d       	sbci	r29, 0xDC	; 220
    2122:	1a 8e       	std	Y+26, r1	; 0x1a
    2124:	1b 8e       	std	Y+27, r1	; 0x1b
    2126:	1e 8a       	std	Y+22, r1	; 0x16
    2128:	1f 8a       	std	Y+23, r1	; 0x17
    212a:	f7 01       	movw	r30, r14
    212c:	02 e0       	ldi	r16, 0x02	; 2
    212e:	06 93       	lac	Z, r16
    2130:	ca c0       	rjmp	.+404    	; 0x22c6 <udd_ep_trans_complet+0x2e4>
    2132:	fe 01       	movw	r30, r28
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	ee 0f       	add	r30, r30
    213a:	ff 1f       	adc	r31, r31
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	ec 5b       	subi	r30, 0xBC	; 188
    2142:	fc 4d       	sbci	r31, 0xDC	; 220
    2144:	a6 88       	ldd	r10, Z+22	; 0x16
    2146:	b7 88       	ldd	r11, Z+23	; 0x17
    2148:	d8 01       	movw	r26, r16
    214a:	8c 91       	ld	r24, X
    214c:	82 ff       	sbrs	r24, 2
    214e:	19 c0       	rjmp	.+50     	; 0x2182 <udd_ep_trans_complet+0x1a0>
    2150:	11 96       	adiw	r26, 0x01	; 1
    2152:	ed 91       	ld	r30, X+
    2154:	fc 91       	ld	r31, X
    2156:	12 97       	sbiw	r26, 0x02	; 2
    2158:	15 96       	adiw	r26, 0x05	; 5
    215a:	2d 91       	ld	r18, X+
    215c:	3c 91       	ld	r19, X
    215e:	16 97       	sbiw	r26, 0x06	; 6
    2160:	13 96       	adiw	r26, 0x03	; 3
    2162:	8d 91       	ld	r24, X+
    2164:	9c 91       	ld	r25, X
    2166:	14 97       	sbiw	r26, 0x04	; 4
    2168:	b4 01       	movw	r22, r8
    216a:	a5 d5       	rcall	.+2890   	; 0x2cb6 <__udivmodhi4>
    216c:	b0 e4       	ldi	r27, 0x40	; 64
    216e:	db 9e       	mul	r13, r27
    2170:	b0 01       	movw	r22, r0
    2172:	11 24       	eor	r1, r1
    2174:	63 55       	subi	r22, 0x53	; 83
    2176:	7e 4d       	sbci	r23, 0xDE	; 222
    2178:	ac 01       	movw	r20, r24
    217a:	cf 01       	movw	r24, r30
    217c:	82 0f       	add	r24, r18
    217e:	93 1f       	adc	r25, r19
    2180:	b6 d5       	rcall	.+2924   	; 0x2cee <memcpy>
    2182:	f8 01       	movw	r30, r16
    2184:	25 81       	ldd	r18, Z+5	; 0x05
    2186:	36 81       	ldd	r19, Z+6	; 0x06
    2188:	2a 0d       	add	r18, r10
    218a:	3b 1d       	adc	r19, r11
    218c:	25 83       	std	Z+5, r18	; 0x05
    218e:	36 83       	std	Z+6, r19	; 0x06
    2190:	83 81       	ldd	r24, Z+3	; 0x03
    2192:	94 81       	ldd	r25, Z+4	; 0x04
    2194:	82 17       	cp	r24, r18
    2196:	93 07       	cpc	r25, r19
    2198:	68 f4       	brcc	.+26     	; 0x21b4 <udd_ep_trans_complet+0x1d2>
    219a:	85 83       	std	Z+5, r24	; 0x05
    219c:	96 83       	std	Z+6, r25	; 0x06
    219e:	cc 0f       	add	r28, r28
    21a0:	dd 1f       	adc	r29, r29
    21a2:	cc 0f       	add	r28, r28
    21a4:	dd 1f       	adc	r29, r29
    21a6:	cc 0f       	add	r28, r28
    21a8:	dd 1f       	adc	r29, r29
    21aa:	cc 5b       	subi	r28, 0xBC	; 188
    21ac:	dc 4d       	sbci	r29, 0xDC	; 220
    21ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21b2:	76 c0       	rjmp	.+236    	; 0x22a0 <udd_ep_trans_complet+0x2be>
    21b4:	fe 01       	movw	r30, r28
    21b6:	ee 0f       	add	r30, r30
    21b8:	ff 1f       	adc	r31, r31
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	ee 0f       	add	r30, r30
    21c0:	ff 1f       	adc	r31, r31
    21c2:	ec 5b       	subi	r30, 0xBC	; 188
    21c4:	fc 4d       	sbci	r31, 0xDC	; 220
    21c6:	42 8d       	ldd	r20, Z+26	; 0x1a
    21c8:	53 8d       	ldd	r21, Z+27	; 0x1b
    21ca:	a4 16       	cp	r10, r20
    21cc:	b5 06       	cpc	r11, r21
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <udd_ep_trans_complet+0x1f0>
    21d0:	67 c0       	rjmp	.+206    	; 0x22a0 <udd_ep_trans_complet+0x2be>
    21d2:	28 17       	cp	r18, r24
    21d4:	39 07       	cpc	r19, r25
    21d6:	09 f4       	brne	.+2      	; 0x21da <udd_ep_trans_complet+0x1f8>
    21d8:	63 c0       	rjmp	.+198    	; 0x22a0 <udd_ep_trans_complet+0x2be>
    21da:	ac 01       	movw	r20, r24
    21dc:	42 1b       	sub	r20, r18
    21de:	53 0b       	sbc	r21, r19
    21e0:	9a 01       	movw	r18, r20
    21e2:	21 15       	cp	r18, r1
    21e4:	54 e0       	ldi	r21, 0x04	; 4
    21e6:	35 07       	cpc	r19, r21
    21e8:	40 f0       	brcs	.+16     	; 0x21fa <udd_ep_trans_complet+0x218>
    21ea:	2f ef       	ldi	r18, 0xFF	; 255
    21ec:	33 e0       	ldi	r19, 0x03	; 3
    21ee:	c9 01       	movw	r24, r18
    21f0:	b4 01       	movw	r22, r8
    21f2:	61 d5       	rcall	.+2754   	; 0x2cb6 <__udivmodhi4>
    21f4:	28 1b       	sub	r18, r24
    21f6:	39 0b       	sbc	r19, r25
    21f8:	05 c0       	rjmp	.+10     	; 0x2204 <udd_ep_trans_complet+0x222>
    21fa:	c9 01       	movw	r24, r18
    21fc:	b4 01       	movw	r22, r8
    21fe:	5b d5       	rcall	.+2742   	; 0x2cb6 <__udivmodhi4>
    2200:	28 1b       	sub	r18, r24
    2202:	39 0b       	sbc	r19, r25
    2204:	fe 01       	movw	r30, r28
    2206:	ee 0f       	add	r30, r30
    2208:	ff 1f       	adc	r31, r31
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	ee 0f       	add	r30, r30
    2210:	ff 1f       	adc	r31, r31
    2212:	ec 5b       	subi	r30, 0xBC	; 188
    2214:	fc 4d       	sbci	r31, 0xDC	; 220
    2216:	16 8a       	std	Z+22, r1	; 0x16
    2218:	17 8a       	std	Z+23, r1	; 0x17
    221a:	28 15       	cp	r18, r8
    221c:	39 05       	cpc	r19, r9
    221e:	00 f5       	brcc	.+64     	; 0x2260 <udd_ep_trans_complet+0x27e>
    2220:	d8 01       	movw	r26, r16
    2222:	8c 91       	ld	r24, X
    2224:	84 60       	ori	r24, 0x04	; 4
    2226:	8c 93       	st	X, r24
    2228:	b0 e4       	ldi	r27, 0x40	; 64
    222a:	db 9e       	mul	r13, r27
    222c:	c0 01       	movw	r24, r0
    222e:	11 24       	eor	r1, r1
    2230:	83 55       	subi	r24, 0x53	; 83
    2232:	9e 4d       	sbci	r25, 0xDE	; 222
    2234:	fe 01       	movw	r30, r28
    2236:	ee 0f       	add	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	ee 0f       	add	r30, r30
    223c:	ff 1f       	adc	r31, r31
    223e:	ee 0f       	add	r30, r30
    2240:	ff 1f       	adc	r31, r31
    2242:	e4 5a       	subi	r30, 0xA4	; 164
    2244:	fc 4d       	sbci	r31, 0xDC	; 220
    2246:	80 83       	st	Z, r24
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	cc 0f       	add	r28, r28
    224c:	dd 1f       	adc	r29, r29
    224e:	cc 0f       	add	r28, r28
    2250:	dd 1f       	adc	r29, r29
    2252:	cc 0f       	add	r28, r28
    2254:	dd 1f       	adc	r29, r29
    2256:	cc 5b       	subi	r28, 0xBC	; 188
    2258:	dc 4d       	sbci	r29, 0xDC	; 220
    225a:	8a 8e       	std	Y+26, r8	; 0x1a
    225c:	9b 8e       	std	Y+27, r9	; 0x1b
    225e:	1c c0       	rjmp	.+56     	; 0x2298 <udd_ep_trans_complet+0x2b6>
    2260:	f8 01       	movw	r30, r16
    2262:	41 81       	ldd	r20, Z+1	; 0x01
    2264:	52 81       	ldd	r21, Z+2	; 0x02
    2266:	85 81       	ldd	r24, Z+5	; 0x05
    2268:	96 81       	ldd	r25, Z+6	; 0x06
    226a:	84 0f       	add	r24, r20
    226c:	95 1f       	adc	r25, r21
    226e:	fe 01       	movw	r30, r28
    2270:	ee 0f       	add	r30, r30
    2272:	ff 1f       	adc	r31, r31
    2274:	ee 0f       	add	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	ee 0f       	add	r30, r30
    227a:	ff 1f       	adc	r31, r31
    227c:	e4 5a       	subi	r30, 0xA4	; 164
    227e:	fc 4d       	sbci	r31, 0xDC	; 220
    2280:	80 83       	st	Z, r24
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	cc 0f       	add	r28, r28
    2286:	dd 1f       	adc	r29, r29
    2288:	cc 0f       	add	r28, r28
    228a:	dd 1f       	adc	r29, r29
    228c:	cc 0f       	add	r28, r28
    228e:	dd 1f       	adc	r29, r29
    2290:	cc 5b       	subi	r28, 0xBC	; 188
    2292:	dc 4d       	sbci	r29, 0xDC	; 220
    2294:	2a 8f       	std	Y+26, r18	; 0x1a
    2296:	3b 8f       	std	Y+27, r19	; 0x1b
    2298:	f7 01       	movw	r30, r14
    229a:	02 e0       	ldi	r16, 0x02	; 2
    229c:	06 93       	lac	Z, r16
    229e:	13 c0       	rjmp	.+38     	; 0x22c6 <udd_ep_trans_complet+0x2e4>
    22a0:	d8 01       	movw	r26, r16
    22a2:	8c 91       	ld	r24, X
    22a4:	80 ff       	sbrs	r24, 0
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <udd_ep_trans_complet+0x2e4>
    22a8:	8e 7f       	andi	r24, 0xFE	; 254
    22aa:	8c 93       	st	X, r24
    22ac:	17 96       	adiw	r26, 0x07	; 7
    22ae:	ed 91       	ld	r30, X+
    22b0:	fc 91       	ld	r31, X
    22b2:	18 97       	sbiw	r26, 0x08	; 8
    22b4:	30 97       	sbiw	r30, 0x00	; 0
    22b6:	39 f0       	breq	.+14     	; 0x22c6 <udd_ep_trans_complet+0x2e4>
    22b8:	15 96       	adiw	r26, 0x05	; 5
    22ba:	6d 91       	ld	r22, X+
    22bc:	7c 91       	ld	r23, X
    22be:	16 97       	sbiw	r26, 0x06	; 6
    22c0:	4d 2d       	mov	r20, r13
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	19 95       	eicall
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	ff 90       	pop	r15
    22d0:	ef 90       	pop	r14
    22d2:	df 90       	pop	r13
    22d4:	bf 90       	pop	r11
    22d6:	af 90       	pop	r10
    22d8:	9f 90       	pop	r9
    22da:	8f 90       	pop	r8
    22dc:	08 95       	ret

000022de <udd_attach>:
    22de:	1f 93       	push	r17
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	1f 92       	push	r1
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	8f b7       	in	r24, 0x3f	; 63
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	f8 94       	cli
    22f0:	19 81       	ldd	r17, Y+1	; 0x01
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	d5 dc       	rcall	.-1622   	; 0x1ca0 <udd_sleep_mode>
    22f6:	ea ec       	ldi	r30, 0xCA	; 202
    22f8:	f4 e0       	ldi	r31, 0x04	; 4
    22fa:	80 e4       	ldi	r24, 0x40	; 64
    22fc:	80 83       	st	Z, r24
    22fe:	80 e2       	ldi	r24, 0x20	; 32
    2300:	80 83       	st	Z, r24
    2302:	e1 ec       	ldi	r30, 0xC1	; 193
    2304:	f4 e0       	ldi	r31, 0x04	; 4
    2306:	80 81       	ld	r24, Z
    2308:	81 60       	ori	r24, 0x01	; 1
    230a:	80 83       	st	Z, r24
    230c:	a9 ec       	ldi	r26, 0xC9	; 201
    230e:	b4 e0       	ldi	r27, 0x04	; 4
    2310:	8c 91       	ld	r24, X
    2312:	82 60       	ori	r24, 0x02	; 2
    2314:	8c 93       	st	X, r24
    2316:	e8 ec       	ldi	r30, 0xC8	; 200
    2318:	f4 e0       	ldi	r31, 0x04	; 4
    231a:	80 81       	ld	r24, Z
    231c:	80 64       	ori	r24, 0x40	; 64
    231e:	80 83       	st	Z, r24
    2320:	8c 91       	ld	r24, X
    2322:	81 60       	ori	r24, 0x01	; 1
    2324:	8c 93       	st	X, r24
    2326:	80 81       	ld	r24, Z
    2328:	80 68       	ori	r24, 0x80	; 128
    232a:	80 83       	st	Z, r24
    232c:	1f bf       	out	0x3f, r17	; 63
    232e:	0f 90       	pop	r0
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	08 95       	ret

00002338 <udd_enable>:
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	1f 92       	push	r1
    2342:	1f 92       	push	r1
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	00 e6       	ldi	r16, 0x60	; 96
    234a:	10 e0       	ldi	r17, 0x00	; 0
    234c:	f8 01       	movw	r30, r16
    234e:	10 82       	st	Z, r1
    2350:	80 e3       	ldi	r24, 0x30	; 48
    2352:	0e 94 41 08 	call	0x1082	; 0x1082 <sysclk_enable_usb>
    2356:	e0 ec       	ldi	r30, 0xC0	; 192
    2358:	f4 e0       	ldi	r31, 0x04	; 4
    235a:	80 81       	ld	r24, Z
    235c:	80 64       	ori	r24, 0x40	; 64
    235e:	80 83       	st	Z, r24
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	f8 01       	movw	r30, r16
    2364:	80 83       	st	Z, r24
    2366:	8f b7       	in	r24, 0x3f	; 63
    2368:	8a 83       	std	Y+2, r24	; 0x02
    236a:	f8 94       	cli
    236c:	1a 81       	ldd	r17, Y+2	; 0x02
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	fc 01       	movw	r30, r24
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	ee 0f       	add	r30, r30
    237e:	ff 1f       	adc	r31, r31
    2380:	ec 5b       	subi	r30, 0xBC	; 188
    2382:	fc 4d       	sbci	r31, 0xDC	; 220
    2384:	15 8a       	std	Z+21, r1	; 0x15
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	8a 30       	cpi	r24, 0x0A	; 10
    238a:	91 05       	cpc	r25, r1
    238c:	91 f7       	brne	.-28     	; 0x2372 <udd_enable+0x3a>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	fc 01       	movw	r30, r24
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	ee 0f       	add	r30, r30
    239e:	ff 1f       	adc	r31, r31
    23a0:	e8 0f       	add	r30, r24
    23a2:	f9 1f       	adc	r31, r25
    23a4:	e3 51       	subi	r30, 0x13	; 19
    23a6:	fd 4d       	sbci	r31, 0xDD	; 221
    23a8:	20 81       	ld	r18, Z
    23aa:	2e 7f       	andi	r18, 0xFE	; 254
    23ac:	20 83       	st	Z, r18
    23ae:	01 96       	adiw	r24, 0x01	; 1
    23b0:	88 30       	cpi	r24, 0x08	; 8
    23b2:	91 05       	cpc	r25, r1
    23b4:	71 f7       	brne	.-36     	; 0x2392 <udd_enable+0x5a>
    23b6:	6a e1       	ldi	r22, 0x1A	; 26
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	82 e0       	ldi	r24, 0x02	; 2
    23bc:	61 dc       	rcall	.-1854   	; 0x1c80 <nvm_read_byte>
    23be:	8f 3f       	cpi	r24, 0xFF	; 255
    23c0:	19 f0       	breq	.+6      	; 0x23c8 <udd_enable+0x90>
    23c2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    23c6:	03 c0       	rjmp	.+6      	; 0x23ce <udd_enable+0x96>
    23c8:	8f e1       	ldi	r24, 0x1F	; 31
    23ca:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    23ce:	6b e1       	ldi	r22, 0x1B	; 27
    23d0:	70 e0       	ldi	r23, 0x00	; 0
    23d2:	82 e0       	ldi	r24, 0x02	; 2
    23d4:	55 dc       	rcall	.-1878   	; 0x1c80 <nvm_read_byte>
    23d6:	8f 3f       	cpi	r24, 0xFF	; 255
    23d8:	19 f0       	breq	.+6      	; 0x23e0 <udd_enable+0xa8>
    23da:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    23de:	03 c0       	rjmp	.+6      	; 0x23e6 <udd_enable+0xae>
    23e0:	8f e1       	ldi	r24, 0x1F	; 31
    23e2:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    23e6:	e0 ec       	ldi	r30, 0xC0	; 192
    23e8:	f4 e0       	ldi	r31, 0x04	; 4
    23ea:	80 81       	ld	r24, Z
    23ec:	84 60       	ori	r24, 0x04	; 4
    23ee:	80 83       	st	Z, r24
    23f0:	80 81       	ld	r24, Z
    23f2:	80 68       	ori	r24, 0x80	; 128
    23f4:	80 83       	st	Z, r24
    23f6:	80 81       	ld	r24, Z
    23f8:	80 61       	ori	r24, 0x10	; 16
    23fa:	80 83       	st	Z, r24
    23fc:	88 e5       	ldi	r24, 0x58	; 88
    23fe:	93 e2       	ldi	r25, 0x23	; 35
    2400:	86 83       	std	Z+6, r24	; 0x06
    2402:	97 83       	std	Z+7, r25	; 0x07
    2404:	80 81       	ld	r24, Z
    2406:	80 62       	ori	r24, 0x20	; 32
    2408:	80 83       	st	Z, r24
    240a:	8f ef       	ldi	r24, 0xFF	; 255
    240c:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    2410:	e8 ec       	ldi	r30, 0xC8	; 200
    2412:	f4 e0       	ldi	r31, 0x04	; 4
    2414:	80 81       	ld	r24, Z
    2416:	81 60       	ori	r24, 0x01	; 1
    2418:	80 83       	st	Z, r24
    241a:	10 92 ac 23 	sts	0x23AC, r1	; 0x8023ac <udd_b_idle>
    241e:	80 91 b8 23 	lds	r24, 0x23B8	; 0x8023b8 <sleepmgr_locks+0x5>
    2422:	8f 3f       	cpi	r24, 0xFF	; 255
    2424:	09 f4       	brne	.+2      	; 0x2428 <udd_enable+0xf0>
    2426:	ff cf       	rjmp	.-2      	; 0x2426 <udd_enable+0xee>
    2428:	8f b7       	in	r24, 0x3f	; 63
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	f8 94       	cli
    242e:	99 81       	ldd	r25, Y+1	; 0x01
    2430:	e3 eb       	ldi	r30, 0xB3	; 179
    2432:	f3 e2       	ldi	r31, 0x23	; 35
    2434:	85 81       	ldd	r24, Z+5	; 0x05
    2436:	8f 5f       	subi	r24, 0xFF	; 255
    2438:	85 83       	std	Z+5, r24	; 0x05
    243a:	9f bf       	out	0x3f, r25	; 63
    243c:	50 df       	rcall	.-352    	; 0x22de <udd_attach>
    243e:	1f bf       	out	0x3f, r17	; 63
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	df 91       	pop	r29
    2446:	cf 91       	pop	r28
    2448:	1f 91       	pop	r17
    244a:	0f 91       	pop	r16
    244c:	08 95       	ret

0000244e <udd_set_address>:
    244e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2452:	08 95       	ret

00002454 <udd_getaddress>:
    2454:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2458:	08 95       	ret

0000245a <udd_set_setup_payload>:
    245a:	e9 eb       	ldi	r30, 0xB9	; 185
    245c:	f3 e2       	ldi	r31, 0x23	; 35
    245e:	80 87       	std	Z+8, r24	; 0x08
    2460:	91 87       	std	Z+9, r25	; 0x09
    2462:	62 87       	std	Z+10, r22	; 0x0a
    2464:	73 87       	std	Z+11, r23	; 0x0b
    2466:	08 95       	ret

00002468 <udd_ep_alloc>:
    2468:	28 2f       	mov	r18, r24
    246a:	2f 70       	andi	r18, 0x0F	; 15
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	22 0f       	add	r18, r18
    2470:	33 1f       	adc	r19, r19
    2472:	08 2e       	mov	r0, r24
    2474:	00 0c       	add	r0, r0
    2476:	99 0b       	sbc	r25, r25
    2478:	88 27       	eor	r24, r24
    247a:	99 0f       	add	r25, r25
    247c:	88 1f       	adc	r24, r24
    247e:	99 27       	eor	r25, r25
    2480:	82 0f       	add	r24, r18
    2482:	93 1f       	adc	r25, r19
    2484:	fc 01       	movw	r30, r24
    2486:	ee 0f       	add	r30, r30
    2488:	ff 1f       	adc	r31, r31
    248a:	ee 0f       	add	r30, r30
    248c:	ff 1f       	adc	r31, r31
    248e:	ee 0f       	add	r30, r30
    2490:	ff 1f       	adc	r31, r31
    2492:	ec 5b       	subi	r30, 0xBC	; 188
    2494:	fc 4d       	sbci	r31, 0xDC	; 220
    2496:	25 89       	ldd	r18, Z+21	; 0x15
    2498:	20 7c       	andi	r18, 0xC0	; 192
    249a:	09 f0       	breq	.+2      	; 0x249e <udd_ep_alloc+0x36>
    249c:	69 c0       	rjmp	.+210    	; 0x2570 <udd_ep_alloc+0x108>
    249e:	63 70       	andi	r22, 0x03	; 3
    24a0:	61 30       	cpi	r22, 0x01	; 1
    24a2:	11 f0       	breq	.+4      	; 0x24a8 <udd_ep_alloc+0x40>
    24a4:	18 f4       	brcc	.+6      	; 0x24ac <udd_ep_alloc+0x44>
    24a6:	04 c0       	rjmp	.+8      	; 0x24b0 <udd_ep_alloc+0x48>
    24a8:	60 ec       	ldi	r22, 0xC0	; 192
    24aa:	03 c0       	rjmp	.+6      	; 0x24b2 <udd_ep_alloc+0x4a>
    24ac:	60 e8       	ldi	r22, 0x80	; 128
    24ae:	01 c0       	rjmp	.+2      	; 0x24b2 <udd_ep_alloc+0x4a>
    24b0:	60 e4       	ldi	r22, 0x40	; 64
    24b2:	40 38       	cpi	r20, 0x80	; 128
    24b4:	51 05       	cpc	r21, r1
    24b6:	e9 f0       	breq	.+58     	; 0x24f2 <udd_ep_alloc+0x8a>
    24b8:	50 f4       	brcc	.+20     	; 0x24ce <udd_ep_alloc+0x66>
    24ba:	40 32       	cpi	r20, 0x20	; 32
    24bc:	51 05       	cpc	r21, r1
    24be:	a9 f0       	breq	.+42     	; 0x24ea <udd_ep_alloc+0x82>
    24c0:	40 34       	cpi	r20, 0x40	; 64
    24c2:	51 05       	cpc	r21, r1
    24c4:	a1 f0       	breq	.+40     	; 0x24ee <udd_ep_alloc+0x86>
    24c6:	40 31       	cpi	r20, 0x10	; 16
    24c8:	51 05       	cpc	r21, r1
    24ca:	d9 f4       	brne	.+54     	; 0x2502 <udd_ep_alloc+0x9a>
    24cc:	0c c0       	rjmp	.+24     	; 0x24e6 <udd_ep_alloc+0x7e>
    24ce:	41 15       	cp	r20, r1
    24d0:	22 e0       	ldi	r18, 0x02	; 2
    24d2:	52 07       	cpc	r21, r18
    24d4:	91 f0       	breq	.+36     	; 0x24fa <udd_ep_alloc+0x92>
    24d6:	4f 3f       	cpi	r20, 0xFF	; 255
    24d8:	23 e0       	ldi	r18, 0x03	; 3
    24da:	52 07       	cpc	r21, r18
    24dc:	81 f0       	breq	.+32     	; 0x24fe <udd_ep_alloc+0x96>
    24de:	41 15       	cp	r20, r1
    24e0:	51 40       	sbci	r21, 0x01	; 1
    24e2:	79 f4       	brne	.+30     	; 0x2502 <udd_ep_alloc+0x9a>
    24e4:	08 c0       	rjmp	.+16     	; 0x24f6 <udd_ep_alloc+0x8e>
    24e6:	21 e0       	ldi	r18, 0x01	; 1
    24e8:	0d c0       	rjmp	.+26     	; 0x2504 <udd_ep_alloc+0x9c>
    24ea:	22 e0       	ldi	r18, 0x02	; 2
    24ec:	0b c0       	rjmp	.+22     	; 0x2504 <udd_ep_alloc+0x9c>
    24ee:	23 e0       	ldi	r18, 0x03	; 3
    24f0:	09 c0       	rjmp	.+18     	; 0x2504 <udd_ep_alloc+0x9c>
    24f2:	24 e0       	ldi	r18, 0x04	; 4
    24f4:	07 c0       	rjmp	.+14     	; 0x2504 <udd_ep_alloc+0x9c>
    24f6:	25 e0       	ldi	r18, 0x05	; 5
    24f8:	05 c0       	rjmp	.+10     	; 0x2504 <udd_ep_alloc+0x9c>
    24fa:	26 e0       	ldi	r18, 0x06	; 6
    24fc:	03 c0       	rjmp	.+6      	; 0x2504 <udd_ep_alloc+0x9c>
    24fe:	27 e0       	ldi	r18, 0x07	; 7
    2500:	01 c0       	rjmp	.+2      	; 0x2504 <udd_ep_alloc+0x9c>
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	fc 01       	movw	r30, r24
    2506:	ee 0f       	add	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	ee 0f       	add	r30, r30
    250c:	ff 1f       	adc	r31, r31
    250e:	ee 0f       	add	r30, r30
    2510:	ff 1f       	adc	r31, r31
    2512:	ec 5b       	subi	r30, 0xBC	; 188
    2514:	fc 4d       	sbci	r31, 0xDC	; 220
    2516:	15 8a       	std	Z+21, r1	; 0x15
    2518:	36 e0       	ldi	r19, 0x06	; 6
    251a:	34 8b       	std	Z+20, r19	; 0x14
    251c:	26 2b       	or	r18, r22
    251e:	25 8b       	std	Z+21, r18	; 0x15
    2520:	fc 01       	movw	r30, r24
    2522:	ee 0f       	add	r30, r30
    2524:	ff 1f       	adc	r31, r31
    2526:	ee 0f       	add	r30, r30
    2528:	ff 1f       	adc	r31, r31
    252a:	ee 0f       	add	r30, r30
    252c:	ff 1f       	adc	r31, r31
    252e:	ec 5b       	subi	r30, 0xBC	; 188
    2530:	fc 4d       	sbci	r31, 0xDC	; 220
    2532:	25 89       	ldd	r18, Z+21	; 0x15
    2534:	20 7c       	andi	r18, 0xC0	; 192
    2536:	20 3c       	cpi	r18, 0xC0	; 192
    2538:	69 f4       	brne	.+26     	; 0x2554 <udd_ep_alloc+0xec>
    253a:	fc 01       	movw	r30, r24
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	ee 0f       	add	r30, r30
    2542:	ff 1f       	adc	r31, r31
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	ec 5b       	subi	r30, 0xBC	; 188
    254a:	fc 4d       	sbci	r31, 0xDC	; 220
    254c:	25 89       	ldd	r18, Z+21	; 0x15
    254e:	27 70       	andi	r18, 0x07	; 7
    2550:	27 30       	cpi	r18, 0x07	; 7
    2552:	81 f0       	breq	.+32     	; 0x2574 <udd_ep_alloc+0x10c>
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	fc 01       	movw	r30, r24
    2562:	ec 5b       	subi	r30, 0xBC	; 188
    2564:	fc 4d       	sbci	r31, 0xDC	; 220
    2566:	85 89       	ldd	r24, Z+21	; 0x15
    2568:	80 62       	ori	r24, 0x20	; 32
    256a:	85 8b       	std	Z+21, r24	; 0x15
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	08 95       	ret
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	08 95       	ret
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	08 95       	ret

00002578 <udd_ep_is_halted>:
    2578:	e8 2f       	mov	r30, r24
    257a:	ef 70       	andi	r30, 0x0F	; 15
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	ee 0f       	add	r30, r30
    2580:	ff 1f       	adc	r31, r31
    2582:	08 2e       	mov	r0, r24
    2584:	00 0c       	add	r0, r0
    2586:	99 0b       	sbc	r25, r25
    2588:	88 27       	eor	r24, r24
    258a:	99 0f       	add	r25, r25
    258c:	88 1f       	adc	r24, r24
    258e:	99 27       	eor	r25, r25
    2590:	e8 0f       	add	r30, r24
    2592:	f9 1f       	adc	r31, r25
    2594:	ee 0f       	add	r30, r30
    2596:	ff 1f       	adc	r31, r31
    2598:	ee 0f       	add	r30, r30
    259a:	ff 1f       	adc	r31, r31
    259c:	ee 0f       	add	r30, r30
    259e:	ff 1f       	adc	r31, r31
    25a0:	ec 5b       	subi	r30, 0xBC	; 188
    25a2:	fc 4d       	sbci	r31, 0xDC	; 220
    25a4:	85 89       	ldd	r24, Z+21	; 0x15
    25a6:	82 fb       	bst	r24, 2
    25a8:	88 27       	eor	r24, r24
    25aa:	80 f9       	bld	r24, 0
    25ac:	08 95       	ret

000025ae <udd_ep_clear_halt>:
    25ae:	0f 93       	push	r16
    25b0:	28 2f       	mov	r18, r24
    25b2:	2f 70       	andi	r18, 0x0F	; 15
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	a9 01       	movw	r20, r18
    25b8:	44 0f       	add	r20, r20
    25ba:	55 1f       	adc	r21, r21
    25bc:	28 2f       	mov	r18, r24
    25be:	08 2e       	mov	r0, r24
    25c0:	00 0c       	add	r0, r0
    25c2:	33 0b       	sbc	r19, r19
    25c4:	22 27       	eor	r18, r18
    25c6:	33 0f       	add	r19, r19
    25c8:	22 1f       	adc	r18, r18
    25ca:	33 27       	eor	r19, r19
    25cc:	24 0f       	add	r18, r20
    25ce:	35 1f       	adc	r19, r21
    25d0:	a9 01       	movw	r20, r18
    25d2:	44 0f       	add	r20, r20
    25d4:	55 1f       	adc	r21, r21
    25d6:	44 0f       	add	r20, r20
    25d8:	55 1f       	adc	r21, r21
    25da:	44 0f       	add	r20, r20
    25dc:	55 1f       	adc	r21, r21
    25de:	fa 01       	movw	r30, r20
    25e0:	e8 5a       	subi	r30, 0xA8	; 168
    25e2:	fc 4d       	sbci	r31, 0xDC	; 220
    25e4:	01 e0       	ldi	r16, 0x01	; 1
    25e6:	06 93       	lac	Z, r16
    25e8:	fa 01       	movw	r30, r20
    25ea:	ec 5b       	subi	r30, 0xBC	; 188
    25ec:	fc 4d       	sbci	r31, 0xDC	; 220
    25ee:	95 89       	ldd	r25, Z+21	; 0x15
    25f0:	92 ff       	sbrs	r25, 2
    25f2:	11 c0       	rjmp	.+34     	; 0x2616 <udd_ep_clear_halt+0x68>
    25f4:	fa 01       	movw	r30, r20
    25f6:	ec 5b       	subi	r30, 0xBC	; 188
    25f8:	fc 4d       	sbci	r31, 0xDC	; 220
    25fa:	95 89       	ldd	r25, Z+21	; 0x15
    25fc:	9b 7f       	andi	r25, 0xFB	; 251
    25fe:	95 8b       	std	Z+21, r25	; 0x15
    2600:	64 dc       	rcall	.-1848   	; 0x1eca <udd_ep_get_job>
    2602:	fc 01       	movw	r30, r24
    2604:	80 81       	ld	r24, Z
    2606:	80 ff       	sbrs	r24, 0
    2608:	06 c0       	rjmp	.+12     	; 0x2616 <udd_ep_clear_halt+0x68>
    260a:	8e 7f       	andi	r24, 0xFE	; 254
    260c:	80 83       	st	Z, r24
    260e:	07 80       	ldd	r0, Z+7	; 0x07
    2610:	f0 85       	ldd	r31, Z+8	; 0x08
    2612:	e0 2d       	mov	r30, r0
    2614:	19 95       	eicall
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	0f 91       	pop	r16
    261a:	08 95       	ret

0000261c <udd_ep_run>:
    261c:	6f 92       	push	r6
    261e:	7f 92       	push	r7
    2620:	8f 92       	push	r8
    2622:	9f 92       	push	r9
    2624:	af 92       	push	r10
    2626:	bf 92       	push	r11
    2628:	cf 92       	push	r12
    262a:	df 92       	push	r13
    262c:	ef 92       	push	r14
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	1f 92       	push	r1
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	78 2e       	mov	r7, r24
    2640:	66 2e       	mov	r6, r22
    2642:	4a 01       	movw	r8, r20
    2644:	59 01       	movw	r10, r18
    2646:	41 dc       	rcall	.-1918   	; 0x1eca <udd_ep_get_job>
    2648:	6c 01       	movw	r12, r24
    264a:	27 2d       	mov	r18, r7
    264c:	87 2d       	mov	r24, r7
    264e:	8f 70       	andi	r24, 0x0F	; 15
    2650:	e8 2e       	mov	r14, r24
    2652:	f1 2c       	mov	r15, r1
    2654:	c7 01       	movw	r24, r14
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	e7 2c       	mov	r14, r7
    265c:	07 2c       	mov	r0, r7
    265e:	00 0c       	add	r0, r0
    2660:	ff 08       	sbc	r15, r15
    2662:	ee 24       	eor	r14, r14
    2664:	ff 0c       	add	r15, r15
    2666:	ee 1c       	adc	r14, r14
    2668:	ff 24       	eor	r15, r15
    266a:	e8 0e       	add	r14, r24
    266c:	f9 1e       	adc	r15, r25
    266e:	f7 01       	movw	r30, r14
    2670:	ee 0f       	add	r30, r30
    2672:	ff 1f       	adc	r31, r31
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	ec 5b       	subi	r30, 0xBC	; 188
    267e:	fc 4d       	sbci	r31, 0xDC	; 220
    2680:	85 89       	ldd	r24, Z+21	; 0x15
    2682:	80 7c       	andi	r24, 0xC0	; 192
    2684:	09 f4       	brne	.+2      	; 0x2688 <udd_ep_run+0x6c>
    2686:	81 c0       	rjmp	.+258    	; 0x278a <udd_ep_run+0x16e>
    2688:	f7 01       	movw	r30, r14
    268a:	ee 0f       	add	r30, r30
    268c:	ff 1f       	adc	r31, r31
    268e:	ee 0f       	add	r30, r30
    2690:	ff 1f       	adc	r31, r31
    2692:	ee 0f       	add	r30, r30
    2694:	ff 1f       	adc	r31, r31
    2696:	ec 5b       	subi	r30, 0xBC	; 188
    2698:	fc 4d       	sbci	r31, 0xDC	; 220
    269a:	85 89       	ldd	r24, Z+21	; 0x15
    269c:	80 7c       	andi	r24, 0xC0	; 192
    269e:	80 3c       	cpi	r24, 0xC0	; 192
    26a0:	61 f0       	breq	.+24     	; 0x26ba <udd_ep_run+0x9e>
    26a2:	f7 01       	movw	r30, r14
    26a4:	ee 0f       	add	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	ee 0f       	add	r30, r30
    26aa:	ff 1f       	adc	r31, r31
    26ac:	ee 0f       	add	r30, r30
    26ae:	ff 1f       	adc	r31, r31
    26b0:	ec 5b       	subi	r30, 0xBC	; 188
    26b2:	fc 4d       	sbci	r31, 0xDC	; 220
    26b4:	85 89       	ldd	r24, Z+21	; 0x15
    26b6:	82 fd       	sbrc	r24, 2
    26b8:	6a c0       	rjmp	.+212    	; 0x278e <udd_ep_run+0x172>
    26ba:	8f b7       	in	r24, 0x3f	; 63
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	f8 94       	cli
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	f6 01       	movw	r30, r12
    26c4:	90 81       	ld	r25, Z
    26c6:	90 ff       	sbrs	r25, 0
    26c8:	03 c0       	rjmp	.+6      	; 0x26d0 <udd_ep_run+0xb4>
    26ca:	8f bf       	out	0x3f, r24	; 63
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	60 c0       	rjmp	.+192    	; 0x2790 <udd_ep_run+0x174>
    26d0:	f6 01       	movw	r30, r12
    26d2:	90 81       	ld	r25, Z
    26d4:	91 60       	ori	r25, 0x01	; 1
    26d6:	90 83       	st	Z, r25
    26d8:	8f bf       	out	0x3f, r24	; 63
    26da:	81 82       	std	Z+1, r8	; 0x01
    26dc:	92 82       	std	Z+2, r9	; 0x02
    26de:	a3 82       	std	Z+3, r10	; 0x03
    26e0:	b4 82       	std	Z+4, r11	; 0x04
    26e2:	15 82       	std	Z+5, r1	; 0x05
    26e4:	16 82       	std	Z+6, r1	; 0x06
    26e6:	07 83       	std	Z+7, r16	; 0x07
    26e8:	10 87       	std	Z+8, r17	; 0x08
    26ea:	61 10       	cpse	r6, r1
    26ec:	06 c0       	rjmp	.+12     	; 0x26fa <udd_ep_run+0xde>
    26ee:	91 e0       	ldi	r25, 0x01	; 1
    26f0:	a1 14       	cp	r10, r1
    26f2:	b1 04       	cpc	r11, r1
    26f4:	19 f0       	breq	.+6      	; 0x26fc <udd_ep_run+0xe0>
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	01 c0       	rjmp	.+2      	; 0x26fc <udd_ep_run+0xe0>
    26fa:	91 e0       	ldi	r25, 0x01	; 1
    26fc:	f6 01       	movw	r30, r12
    26fe:	80 81       	ld	r24, Z
    2700:	90 fb       	bst	r25, 0
    2702:	81 f9       	bld	r24, 1
    2704:	8b 7f       	andi	r24, 0xFB	; 251
    2706:	80 83       	st	Z, r24
    2708:	22 23       	and	r18, r18
    270a:	64 f4       	brge	.+24     	; 0x2724 <udd_ep_run+0x108>
    270c:	f7 01       	movw	r30, r14
    270e:	ee 0f       	add	r30, r30
    2710:	ff 1f       	adc	r31, r31
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	ee 0f       	add	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	ec 5b       	subi	r30, 0xBC	; 188
    271c:	fc 4d       	sbci	r31, 0xDC	; 220
    271e:	12 8e       	std	Z+26, r1	; 0x1a
    2720:	13 8e       	std	Z+27, r1	; 0x1b
    2722:	2f c0       	rjmp	.+94     	; 0x2782 <udd_ep_run+0x166>
    2724:	f7 01       	movw	r30, r14
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	ec 5b       	subi	r30, 0xBC	; 188
    2734:	fc 4d       	sbci	r31, 0xDC	; 220
    2736:	85 89       	ldd	r24, Z+21	; 0x15
    2738:	80 7c       	andi	r24, 0xC0	; 192
    273a:	80 3c       	cpi	r24, 0xC0	; 192
    273c:	a9 f4       	brne	.+42     	; 0x2768 <udd_ep_run+0x14c>
    273e:	c7 01       	movw	r24, r14
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	88 0f       	add	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	88 5a       	subi	r24, 0xA8	; 168
    274e:	9c 4d       	sbci	r25, 0xDC	; 220
    2750:	94 db       	rcall	.-2264   	; 0x1e7a <udd_ep_get_size>
    2752:	bc 01       	movw	r22, r24
    2754:	c5 01       	movw	r24, r10
    2756:	af d2       	rcall	.+1374   	; 0x2cb6 <__udivmodhi4>
    2758:	89 2b       	or	r24, r25
    275a:	31 f0       	breq	.+12     	; 0x2768 <udd_ep_run+0x14c>
    275c:	f6 01       	movw	r30, r12
    275e:	80 81       	ld	r24, Z
    2760:	8e 7f       	andi	r24, 0xFE	; 254
    2762:	80 83       	st	Z, r24
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	14 c0       	rjmp	.+40     	; 0x2790 <udd_ep_run+0x174>
    2768:	f7 01       	movw	r30, r14
    276a:	ee 0f       	add	r30, r30
    276c:	ff 1f       	adc	r31, r31
    276e:	ee 0f       	add	r30, r30
    2770:	ff 1f       	adc	r31, r31
    2772:	ee 0f       	add	r30, r30
    2774:	ff 1f       	adc	r31, r31
    2776:	ec 5b       	subi	r30, 0xBC	; 188
    2778:	fc 4d       	sbci	r31, 0xDC	; 220
    277a:	16 8a       	std	Z+22, r1	; 0x16
    277c:	17 8a       	std	Z+23, r1	; 0x17
    277e:	12 8e       	std	Z+26, r1	; 0x1a
    2780:	13 8e       	std	Z+27, r1	; 0x1b
    2782:	87 2d       	mov	r24, r7
    2784:	2e dc       	rcall	.-1956   	; 0x1fe2 <udd_ep_trans_complet>
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	03 c0       	rjmp	.+6      	; 0x2790 <udd_ep_run+0x174>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	01 c0       	rjmp	.+2      	; 0x2790 <udd_ep_run+0x174>
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	0f 90       	pop	r0
    2792:	df 91       	pop	r29
    2794:	cf 91       	pop	r28
    2796:	1f 91       	pop	r17
    2798:	0f 91       	pop	r16
    279a:	ff 90       	pop	r15
    279c:	ef 90       	pop	r14
    279e:	df 90       	pop	r13
    27a0:	cf 90       	pop	r12
    27a2:	bf 90       	pop	r11
    27a4:	af 90       	pop	r10
    27a6:	9f 90       	pop	r9
    27a8:	8f 90       	pop	r8
    27aa:	7f 90       	pop	r7
    27ac:	6f 90       	pop	r6
    27ae:	08 95       	ret

000027b0 <udd_ep_abort>:
    27b0:	ff 92       	push	r15
    27b2:	0f 93       	push	r16
    27b4:	1f 93       	push	r17
    27b6:	cf 93       	push	r28
    27b8:	df 93       	push	r29
    27ba:	18 2f       	mov	r17, r24
    27bc:	c8 2f       	mov	r28, r24
    27be:	cf 70       	andi	r28, 0x0F	; 15
    27c0:	d0 e0       	ldi	r29, 0x00	; 0
    27c2:	ce 01       	movw	r24, r28
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	c1 2f       	mov	r28, r17
    27ca:	01 2e       	mov	r0, r17
    27cc:	00 0c       	add	r0, r0
    27ce:	dd 0b       	sbc	r29, r29
    27d0:	cc 27       	eor	r28, r28
    27d2:	dd 0f       	add	r29, r29
    27d4:	cc 1f       	adc	r28, r28
    27d6:	dd 27       	eor	r29, r29
    27d8:	c8 0f       	add	r28, r24
    27da:	d9 1f       	adc	r29, r25
    27dc:	81 2f       	mov	r24, r17
    27de:	75 db       	rcall	.-2326   	; 0x1eca <udd_ep_get_job>
    27e0:	dc 01       	movw	r26, r24
    27e2:	fe 01       	movw	r30, r28
    27e4:	ee 0f       	add	r30, r30
    27e6:	ff 1f       	adc	r31, r31
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	e8 5a       	subi	r30, 0xA8	; 168
    27f2:	fc 4d       	sbci	r31, 0xDC	; 220
    27f4:	02 e0       	ldi	r16, 0x02	; 2
    27f6:	05 93       	las	Z, r16
    27f8:	8c 91       	ld	r24, X
    27fa:	80 ff       	sbrs	r24, 0
    27fc:	22 c0       	rjmp	.+68     	; 0x2842 <udd_ep_abort+0x92>
    27fe:	8e 7f       	andi	r24, 0xFE	; 254
    2800:	8c 93       	st	X, r24
    2802:	17 96       	adiw	r26, 0x07	; 7
    2804:	ed 91       	ld	r30, X+
    2806:	fc 91       	ld	r31, X
    2808:	18 97       	sbiw	r26, 0x08	; 8
    280a:	30 97       	sbiw	r30, 0x00	; 0
    280c:	d1 f0       	breq	.+52     	; 0x2842 <udd_ep_abort+0x92>
    280e:	11 23       	and	r17, r17
    2810:	5c f4       	brge	.+22     	; 0x2828 <udd_ep_abort+0x78>
    2812:	cc 0f       	add	r28, r28
    2814:	dd 1f       	adc	r29, r29
    2816:	cc 0f       	add	r28, r28
    2818:	dd 1f       	adc	r29, r29
    281a:	cc 0f       	add	r28, r28
    281c:	dd 1f       	adc	r29, r29
    281e:	cc 5b       	subi	r28, 0xBC	; 188
    2820:	dc 4d       	sbci	r29, 0xDC	; 220
    2822:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2824:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2826:	0a c0       	rjmp	.+20     	; 0x283c <udd_ep_abort+0x8c>
    2828:	cc 0f       	add	r28, r28
    282a:	dd 1f       	adc	r29, r29
    282c:	cc 0f       	add	r28, r28
    282e:	dd 1f       	adc	r29, r29
    2830:	cc 0f       	add	r28, r28
    2832:	dd 1f       	adc	r29, r29
    2834:	cc 5b       	subi	r28, 0xBC	; 188
    2836:	dc 4d       	sbci	r29, 0xDC	; 220
    2838:	6e 89       	ldd	r22, Y+22	; 0x16
    283a:	7f 89       	ldd	r23, Y+23	; 0x17
    283c:	41 2f       	mov	r20, r17
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	19 95       	eicall
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	ff 90       	pop	r15
    284c:	08 95       	ret

0000284e <udd_ep_free>:
    284e:	cf 93       	push	r28
    2850:	c8 2f       	mov	r28, r24
    2852:	ae df       	rcall	.-164    	; 0x27b0 <udd_ep_abort>
    2854:	ec 2f       	mov	r30, r28
    2856:	ef 70       	andi	r30, 0x0F	; 15
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	ee 0f       	add	r30, r30
    285c:	ff 1f       	adc	r31, r31
    285e:	8c 2f       	mov	r24, r28
    2860:	cc 0f       	add	r28, r28
    2862:	99 0b       	sbc	r25, r25
    2864:	88 27       	eor	r24, r24
    2866:	99 0f       	add	r25, r25
    2868:	88 1f       	adc	r24, r24
    286a:	99 27       	eor	r25, r25
    286c:	e8 0f       	add	r30, r24
    286e:	f9 1f       	adc	r31, r25
    2870:	ee 0f       	add	r30, r30
    2872:	ff 1f       	adc	r31, r31
    2874:	ee 0f       	add	r30, r30
    2876:	ff 1f       	adc	r31, r31
    2878:	ee 0f       	add	r30, r30
    287a:	ff 1f       	adc	r31, r31
    287c:	ec 5b       	subi	r30, 0xBC	; 188
    287e:	fc 4d       	sbci	r31, 0xDC	; 220
    2880:	15 8a       	std	Z+21, r1	; 0x15
    2882:	cf 91       	pop	r28
    2884:	08 95       	ret

00002886 <udd_ep_set_halt>:
    2886:	e8 2f       	mov	r30, r24
    2888:	ef 70       	andi	r30, 0x0F	; 15
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	ee 0f       	add	r30, r30
    288e:	ff 1f       	adc	r31, r31
    2890:	28 2f       	mov	r18, r24
    2892:	08 2e       	mov	r0, r24
    2894:	00 0c       	add	r0, r0
    2896:	33 0b       	sbc	r19, r19
    2898:	22 27       	eor	r18, r18
    289a:	33 0f       	add	r19, r19
    289c:	22 1f       	adc	r18, r18
    289e:	33 27       	eor	r19, r19
    28a0:	e2 0f       	add	r30, r18
    28a2:	f3 1f       	adc	r31, r19
    28a4:	ee 0f       	add	r30, r30
    28a6:	ff 1f       	adc	r31, r31
    28a8:	ee 0f       	add	r30, r30
    28aa:	ff 1f       	adc	r31, r31
    28ac:	ee 0f       	add	r30, r30
    28ae:	ff 1f       	adc	r31, r31
    28b0:	ec 5b       	subi	r30, 0xBC	; 188
    28b2:	fc 4d       	sbci	r31, 0xDC	; 220
    28b4:	95 89       	ldd	r25, Z+21	; 0x15
    28b6:	94 60       	ori	r25, 0x04	; 4
    28b8:	95 8b       	std	Z+21, r25	; 0x15
    28ba:	7a df       	rcall	.-268    	; 0x27b0 <udd_ep_abort>
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	08 95       	ret

000028c0 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    28c0:	1f 92       	push	r1
    28c2:	0f 92       	push	r0
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	0f 92       	push	r0
    28c8:	11 24       	eor	r1, r1
    28ca:	0b b6       	in	r0, 0x3b	; 59
    28cc:	0f 92       	push	r0
    28ce:	0f 93       	push	r16
    28d0:	2f 93       	push	r18
    28d2:	3f 93       	push	r19
    28d4:	4f 93       	push	r20
    28d6:	5f 93       	push	r21
    28d8:	6f 93       	push	r22
    28da:	7f 93       	push	r23
    28dc:	8f 93       	push	r24
    28de:	9f 93       	push	r25
    28e0:	af 93       	push	r26
    28e2:	bf 93       	push	r27
    28e4:	cf 93       	push	r28
    28e6:	ef 93       	push	r30
    28e8:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    28ea:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    28ee:	88 23       	and	r24, r24
    28f0:	3c f4       	brge	.+14     	; 0x2900 <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    28f2:	80 e8       	ldi	r24, 0x80	; 128
    28f4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    28f8:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    28fc:	b0 d1       	rcall	.+864    	; 0x2c5e <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    28fe:	89 c0       	rjmp	.+274    	; 0x2a12 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2900:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2904:	82 ff       	sbrs	r24, 2
    2906:	20 c0       	rjmp	.+64     	; 0x2948 <__vector_125+0x88>
		udd_ack_underflow_event();
    2908:	84 e0       	ldi	r24, 0x04	; 4
    290a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    290e:	80 91 60 23 	lds	r24, 0x2360	; 0x802360 <udd_sram+0x1c>
    2912:	86 ff       	sbrs	r24, 6
    2914:	7e c0       	rjmp	.+252    	; 0x2a12 <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2916:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    291a:	81 fd       	sbrc	r24, 1
    291c:	7a c0       	rjmp	.+244    	; 0x2a12 <__vector_125+0x152>
    291e:	f0 da       	rcall	.-2592   	; 0x1f00 <udd_ctrl_interrupt_tc_setup>
    2920:	81 11       	cpse	r24, r1
    2922:	77 c0       	rjmp	.+238    	; 0x2a12 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2924:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ep_control_state>
    2928:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    292a:	11 f4       	brne	.+4      	; 0x2930 <__vector_125+0x70>
    292c:	24 da       	rcall	.-3000   	; 0x1d76 <udd_ctrl_send_zlp_in>
    292e:	71 c0       	rjmp	.+226    	; 0x2a12 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2930:	84 30       	cpi	r24, 0x04	; 4
    2932:	09 f0       	breq	.+2      	; 0x2936 <__vector_125+0x76>
    2934:	6e c0       	rjmp	.+220    	; 0x2a12 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2936:	e1 e6       	ldi	r30, 0x61	; 97
    2938:	f3 e2       	ldi	r31, 0x23	; 35
    293a:	04 e0       	ldi	r16, 0x04	; 4
    293c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    293e:	e9 e5       	ldi	r30, 0x59	; 89
    2940:	f3 e2       	ldi	r31, 0x23	; 35
    2942:	04 e0       	ldi	r16, 0x04	; 4
    2944:	05 93       	las	Z, r16
    2946:	65 c0       	rjmp	.+202    	; 0x2a12 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2948:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    294c:	81 ff       	sbrs	r24, 1
    294e:	5c c0       	rjmp	.+184    	; 0x2a08 <__vector_125+0x148>
		udd_ack_overflow_event();
    2950:	82 e0       	ldi	r24, 0x02	; 2
    2952:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    2956:	80 91 58 23 	lds	r24, 0x2358	; 0x802358 <udd_sram+0x14>
    295a:	86 ff       	sbrs	r24, 6
    295c:	5a c0       	rjmp	.+180    	; 0x2a12 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    295e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2962:	81 fd       	sbrc	r24, 1
    2964:	56 c0       	rjmp	.+172    	; 0x2a12 <__vector_125+0x152>
    2966:	cc da       	rcall	.-2664   	; 0x1f00 <udd_ctrl_interrupt_tc_setup>
    2968:	81 11       	cpse	r24, r1
    296a:	53 c0       	rjmp	.+166    	; 0x2a12 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    296c:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ep_control_state>
    2970:	82 30       	cpi	r24, 0x02	; 2
    2972:	41 f4       	brne	.+16     	; 0x2984 <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2974:	84 e0       	ldi	r24, 0x04	; 4
    2976:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    297a:	e8 e5       	ldi	r30, 0x58	; 88
    297c:	f3 e2       	ldi	r31, 0x23	; 35
    297e:	02 e0       	ldi	r16, 0x02	; 2
    2980:	06 93       	lac	Z, r16
    2982:	47 c0       	rjmp	.+142    	; 0x2a12 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2984:	83 30       	cpi	r24, 0x03	; 3
    2986:	09 f0       	breq	.+2      	; 0x298a <__vector_125+0xca>
    2988:	44 c0       	rjmp	.+136    	; 0x2a12 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    298a:	e1 e6       	ldi	r30, 0x61	; 97
    298c:	f3 e2       	ldi	r31, 0x23	; 35
    298e:	04 e0       	ldi	r16, 0x04	; 4
    2990:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2992:	e9 e5       	ldi	r30, 0x59	; 89
    2994:	f3 e2       	ldi	r31, 0x23	; 35
    2996:	04 e0       	ldi	r16, 0x04	; 4
    2998:	05 93       	las	Z, r16
    299a:	3b c0       	rjmp	.+118    	; 0x2a12 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    299c:	80 e1       	ldi	r24, 0x10	; 16
    299e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    29a2:	c1 e0       	ldi	r28, 0x01	; 1
    29a4:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    29a6:	04 df       	rcall	.-504    	; 0x27b0 <udd_ep_abort>
    29a8:	8c 2f       	mov	r24, r28
    29aa:	80 68       	ori	r24, 0x80	; 128
    29ac:	01 df       	rcall	.-510    	; 0x27b0 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    29ae:	cf 5f       	subi	r28, 0xFF	; 255
    29b0:	c5 30       	cpi	r28, 0x05	; 5
    29b2:	c1 f7       	brne	.-16     	; 0x29a4 <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    29b4:	0e 94 48 0b 	call	0x1690	; 0x1690 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    29b8:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    29bc:	e4 e4       	ldi	r30, 0x44	; 68
    29be:	f3 e2       	ldi	r31, 0x23	; 35
    29c0:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    29c2:	96 e0       	ldi	r25, 0x06	; 6
    29c4:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    29c6:	80 e4       	ldi	r24, 0x40	; 64
    29c8:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    29ca:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    29cc:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    29ce:	85 8f       	std	Z+29, r24	; 0x1d
    29d0:	85 e3       	ldi	r24, 0x35	; 53
    29d2:	93 e2       	ldi	r25, 0x23	; 35
    29d4:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    29d6:	91 8f       	std	Z+25, r25	; 0x19
    29d8:	9b d9       	rcall	.-3274   	; 0x1d10 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    29da:	1b c0       	rjmp	.+54     	; 0x2a12 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    29dc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    29e0:	86 ff       	sbrs	r24, 6
    29e2:	07 c0       	rjmp	.+14     	; 0x29f2 <__vector_125+0x132>
    29e4:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    29e6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    29ea:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    29ec:	59 d9       	rcall	.-3406   	; 0x1ca0 <udd_sleep_mode>
    29ee:	35 d1       	rcall	.+618    	; 0x2c5a <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    29f0:	10 c0       	rjmp	.+32     	; 0x2a12 <__vector_125+0x152>
    29f2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    29f6:	85 ff       	sbrs	r24, 5
    29f8:	0c c0       	rjmp	.+24     	; 0x2a12 <__vector_125+0x152>
    29fa:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    29fc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2a00:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2a02:	4e d9       	rcall	.-3428   	; 0x1ca0 <udd_sleep_mode>
    2a04:	2b d1       	rcall	.+598    	; 0x2c5c <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2a06:	05 c0       	rjmp	.+10     	; 0x2a12 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2a08:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2a0c:	84 fd       	sbrc	r24, 4
    2a0e:	c6 cf       	rjmp	.-116    	; 0x299c <__vector_125+0xdc>
    2a10:	e5 cf       	rjmp	.-54     	; 0x29dc <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2a12:	ff 91       	pop	r31
    2a14:	ef 91       	pop	r30
    2a16:	cf 91       	pop	r28
    2a18:	bf 91       	pop	r27
    2a1a:	af 91       	pop	r26
    2a1c:	9f 91       	pop	r25
    2a1e:	8f 91       	pop	r24
    2a20:	7f 91       	pop	r23
    2a22:	6f 91       	pop	r22
    2a24:	5f 91       	pop	r21
    2a26:	4f 91       	pop	r20
    2a28:	3f 91       	pop	r19
    2a2a:	2f 91       	pop	r18
    2a2c:	0f 91       	pop	r16
    2a2e:	0f 90       	pop	r0
    2a30:	0b be       	out	0x3b, r0	; 59
    2a32:	0f 90       	pop	r0
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	0f 90       	pop	r0
    2a38:	1f 90       	pop	r1
    2a3a:	18 95       	reti

00002a3c <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2a3c:	1f 92       	push	r1
    2a3e:	0f 92       	push	r0
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	0f 92       	push	r0
    2a44:	11 24       	eor	r1, r1
    2a46:	0b b6       	in	r0, 0x3b	; 59
    2a48:	0f 92       	push	r0
    2a4a:	0f 93       	push	r16
    2a4c:	1f 93       	push	r17
    2a4e:	2f 93       	push	r18
    2a50:	3f 93       	push	r19
    2a52:	4f 93       	push	r20
    2a54:	5f 93       	push	r21
    2a56:	6f 93       	push	r22
    2a58:	7f 93       	push	r23
    2a5a:	8f 93       	push	r24
    2a5c:	9f 93       	push	r25
    2a5e:	af 93       	push	r26
    2a60:	bf 93       	push	r27
    2a62:	cf 93       	push	r28
    2a64:	df 93       	push	r29
    2a66:	ef 93       	push	r30
    2a68:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2a6a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2a6e:	81 fd       	sbrc	r24, 1
    2a70:	03 c0       	rjmp	.+6      	; 0x2a78 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2a72:	46 da       	rcall	.-2932   	; 0x1f00 <udd_ctrl_interrupt_tc_setup>
    2a74:	81 11       	cpse	r24, r1
    2a76:	c3 c0       	rjmp	.+390    	; 0x2bfe <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2a78:	82 e0       	ldi	r24, 0x02	; 2
    2a7a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2a7e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2a82:	81 95       	neg	r24
    2a84:	88 0f       	add	r24, r24
    2a86:	e8 e5       	ldi	r30, 0x58	; 88
    2a88:	f3 e2       	ldi	r31, 0x23	; 35
    2a8a:	e8 1b       	sub	r30, r24
    2a8c:	f1 09       	sbc	r31, r1
    2a8e:	20 81       	ld	r18, Z
    2a90:	31 81       	ldd	r19, Z+1	; 0x01
    2a92:	28 55       	subi	r18, 0x58	; 88
    2a94:	33 42       	sbci	r19, 0x23	; 35
    2a96:	36 95       	lsr	r19
    2a98:	27 95       	ror	r18
    2a9a:	36 95       	lsr	r19
    2a9c:	27 95       	ror	r18
    2a9e:	36 95       	lsr	r19
    2aa0:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2aa2:	82 2f       	mov	r24, r18
    2aa4:	86 95       	lsr	r24
    2aa6:	20 fd       	sbrc	r18, 0
    2aa8:	02 c0       	rjmp	.+4      	; 0x2aae <__vector_126+0x72>
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <__vector_126+0x74>
    2aae:	90 e8       	ldi	r25, 0x80	; 128
    2ab0:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2ab2:	e8 2f       	mov	r30, r24
    2ab4:	ef 70       	andi	r30, 0x0F	; 15
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	ee 0f       	add	r30, r30
    2aba:	ff 1f       	adc	r31, r31
    2abc:	28 2f       	mov	r18, r24
    2abe:	08 2e       	mov	r0, r24
    2ac0:	00 0c       	add	r0, r0
    2ac2:	33 0b       	sbc	r19, r19
    2ac4:	22 27       	eor	r18, r18
    2ac6:	33 0f       	add	r19, r19
    2ac8:	22 1f       	adc	r18, r18
    2aca:	33 27       	eor	r19, r19
    2acc:	e2 0f       	add	r30, r18
    2ace:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2ad0:	df 01       	movw	r26, r30
    2ad2:	aa 0f       	add	r26, r26
    2ad4:	bb 1f       	adc	r27, r27
    2ad6:	aa 0f       	add	r26, r26
    2ad8:	bb 1f       	adc	r27, r27
    2ada:	aa 0f       	add	r26, r26
    2adc:	bb 1f       	adc	r27, r27
    2ade:	ac 5b       	subi	r26, 0xBC	; 188
    2ae0:	bc 4d       	sbci	r27, 0xDC	; 220
    2ae2:	54 96       	adiw	r26, 0x14	; 20
    2ae4:	9c 91       	ld	r25, X
    2ae6:	95 ff       	sbrs	r25, 5
    2ae8:	8a c0       	rjmp	.+276    	; 0x2bfe <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2aea:	ee 0f       	add	r30, r30
    2aec:	ff 1f       	adc	r31, r31
    2aee:	ee 0f       	add	r30, r30
    2af0:	ff 1f       	adc	r31, r31
    2af2:	ee 0f       	add	r30, r30
    2af4:	ff 1f       	adc	r31, r31
    2af6:	e8 5a       	subi	r30, 0xA8	; 168
    2af8:	fc 4d       	sbci	r31, 0xDC	; 220
    2afa:	00 e2       	ldi	r16, 0x20	; 32
    2afc:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2afe:	81 11       	cpse	r24, r1
    2b00:	79 c0       	rjmp	.+242    	; 0x2bf4 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b02:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ep_control_state>
    2b06:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2b08:	19 f4       	brne	.+6      	; 0x2b10 <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2b0a:	43 d9       	rcall	.-3450   	; 0x1d92 <udd_ctrl_endofrequest>
    2b0c:	01 d9       	rcall	.-3582   	; 0x1d10 <udd_ctrl_init>
    2b0e:	77 c0       	rjmp	.+238    	; 0x2bfe <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2b10:	00 91 5a 23 	lds	r16, 0x235A	; 0x80235a <udd_sram+0x16>
    2b14:	10 91 5b 23 	lds	r17, 0x235B	; 0x80235b <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2b18:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    2b1c:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    2b20:	c0 91 3d 23 	lds	r28, 0x233D	; 0x80233d <udd_ctrl_payload_nb_trans>
    2b24:	d0 91 3e 23 	lds	r29, 0x233E	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    2b28:	98 01       	movw	r18, r16
    2b2a:	2c 0f       	add	r18, r28
    2b2c:	3d 1f       	adc	r19, r29
    2b2e:	82 17       	cp	r24, r18
    2b30:	93 07       	cpc	r25, r19
    2b32:	18 f4       	brcc	.+6      	; 0x2b3a <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2b34:	8c 01       	movw	r16, r24
    2b36:	0c 1b       	sub	r16, r28
    2b38:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2b3a:	80 91 c1 23 	lds	r24, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    2b3e:	90 91 c2 23 	lds	r25, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    2b42:	a8 01       	movw	r20, r16
    2b44:	65 e3       	ldi	r22, 0x35	; 53
    2b46:	73 e2       	ldi	r23, 0x23	; 35
    2b48:	8c 0f       	add	r24, r28
    2b4a:	9d 1f       	adc	r25, r29
    2b4c:	d0 d0       	rcall	.+416    	; 0x2cee <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2b4e:	c0 0f       	add	r28, r16
    2b50:	d1 1f       	adc	r29, r17
    2b52:	c0 93 3d 23 	sts	0x233D, r28	; 0x80233d <udd_ctrl_payload_nb_trans>
    2b56:	d0 93 3e 23 	sts	0x233E, r29	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2b5a:	08 30       	cpi	r16, 0x08	; 8
    2b5c:	11 05       	cpc	r17, r1
    2b5e:	69 f4       	brne	.+26     	; 0x2b7a <__vector_126+0x13e>
    2b60:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
    2b64:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    2b68:	8c 0f       	add	r24, r28
    2b6a:	9d 1f       	adc	r25, r29
    2b6c:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    2b70:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    2b74:	82 17       	cp	r24, r18
    2b76:	93 07       	cpc	r25, r19
    2b78:	80 f0       	brcs	.+32     	; 0x2b9a <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2b7a:	e9 eb       	ldi	r30, 0xB9	; 185
    2b7c:	f3 e2       	ldi	r31, 0x23	; 35
    2b7e:	c2 87       	std	Z+10, r28	; 0x0a
    2b80:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2b82:	06 84       	ldd	r0, Z+14	; 0x0e
    2b84:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b86:	e0 2d       	mov	r30, r0
    2b88:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2b8a:	29 f0       	breq	.+10     	; 0x2b96 <__vector_126+0x15a>
    2b8c:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2b8e:	81 11       	cpse	r24, r1
    2b90:	02 c0       	rjmp	.+4      	; 0x2b96 <__vector_126+0x15a>
    2b92:	e3 d8       	rcall	.-3642   	; 0x1d5a <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2b94:	34 c0       	rjmp	.+104    	; 0x2bfe <__vector_126+0x1c2>
    2b96:	ef d8       	rcall	.-3618   	; 0x1d76 <udd_ctrl_send_zlp_in>
    2b98:	32 c0       	rjmp	.+100    	; 0x2bfe <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2b9a:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    2b9e:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    2ba2:	c8 17       	cp	r28, r24
    2ba4:	d9 07       	cpc	r29, r25
    2ba6:	f9 f4       	brne	.+62     	; 0x2be6 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2ba8:	e0 91 c7 23 	lds	r30, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0xe>
    2bac:	f0 91 c8 23 	lds	r31, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0xf>
    2bb0:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2bb2:	11 f4       	brne	.+4      	; 0x2bb8 <__vector_126+0x17c>
    2bb4:	d2 d8       	rcall	.-3676   	; 0x1d5a <udd_ctrl_stall_data>
    2bb6:	23 c0       	rjmp	.+70     	; 0x2bfe <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2bb8:	19 95       	eicall
    2bba:	81 11       	cpse	r24, r1
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2bbe:	cd d8       	rcall	.-3686   	; 0x1d5a <udd_ctrl_stall_data>
    2bc0:	1e c0       	rjmp	.+60     	; 0x2bfe <__vector_126+0x1c2>
    2bc2:	20 91 3f 23 	lds	r18, 0x233F	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2bc6:	30 91 40 23 	lds	r19, 0x2340	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    2bca:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <udd_ctrl_payload_nb_trans>
    2bce:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    2bd2:	82 0f       	add	r24, r18
    2bd4:	93 1f       	adc	r25, r19
    2bd6:	80 93 3f 23 	sts	0x233F, r24	; 0x80233f <udd_ctrl_prev_payload_nb_trans>
    2bda:	90 93 40 23 	sts	0x2340, r25	; 0x802340 <udd_ctrl_prev_payload_nb_trans+0x1>
    2bde:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2be2:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <udd_ctrl_payload_nb_trans+0x1>
    2be6:	e8 e5       	ldi	r30, 0x58	; 88
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2be8:	f3 e2       	ldi	r31, 0x23	; 35
    2bea:	02 e0       	ldi	r16, 0x02	; 2
    2bec:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2bee:	00 e2       	ldi	r16, 0x20	; 32
    2bf0:	06 93       	lac	Z, r16
    2bf2:	05 c0       	rjmp	.+10     	; 0x2bfe <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2bf4:	80 38       	cpi	r24, 0x80	; 128
		udd_ctrl_in_sent();
    2bf6:	11 f4       	brne	.+4      	; 0x2bfc <__vector_126+0x1c0>
    2bf8:	d4 d8       	rcall	.-3672   	; 0x1da2 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2bfa:	01 c0       	rjmp	.+2      	; 0x2bfe <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2bfc:	f2 d9       	rcall	.-3100   	; 0x1fe2 <udd_ep_trans_complet>
    2bfe:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2c00:	ef 91       	pop	r30
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	bf 91       	pop	r27
    2c08:	af 91       	pop	r26
    2c0a:	9f 91       	pop	r25
    2c0c:	8f 91       	pop	r24
    2c0e:	7f 91       	pop	r23
    2c10:	6f 91       	pop	r22
    2c12:	5f 91       	pop	r21
    2c14:	4f 91       	pop	r20
    2c16:	3f 91       	pop	r19
    2c18:	2f 91       	pop	r18
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	0f 90       	pop	r0
    2c20:	0b be       	out	0x3b, r0	; 59
    2c22:	0f 90       	pop	r0
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	0f 90       	pop	r0
    2c28:	1f 90       	pop	r1
    2c2a:	18 95       	reti

00002c2c <main>:

static const uint8_t sequence = 1;

int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    2c2c:	87 e0       	ldi	r24, 0x07	; 7
    2c2e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    2c32:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2c34:	e3 eb       	ldi	r30, 0xB3	; 179
    2c36:	f3 e2       	ldi	r31, 0x23	; 35
    2c38:	10 82       	st	Z, r1
    2c3a:	11 82       	std	Z+1, r1	; 0x01
    2c3c:	12 82       	std	Z+2, r1	; 0x02
    2c3e:	13 82       	std	Z+3, r1	; 0x03
    2c40:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    2c46:	0e 94 b4 07 	call	0xf68	; 0xf68 <sysclk_init>

	io_ui_process(); // initializes board i/o pins
    2c4a:	0e 94 a4 07 	call	0xf48	; 0xf48 <io_ui_process>

	udc_start();               // starts USB device controller
    2c4e:	0e 94 46 0b 	call	0x168c	; 0x168c <udc_start>

	startup_ui_process(sequence); // pick preferred sequence (1-5)
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	0e 94 a6 07 	call	0xf4c	; 0xf4c <startup_ui_process>
    2c58:	ff cf       	rjmp	.-2      	; 0x2c58 <main+0x2c>

00002c5a <main_suspend_action>:
}

/* --------------------------------------------------------------------- */
/* -------------------------------- USB -------------------------------- */
/* --------------------------------------------------------------------- */
void main_suspend_action(void) { }
    2c5a:	08 95       	ret

00002c5c <main_resume_action>:
void main_resume_action(void) { }
    2c5c:	08 95       	ret

00002c5e <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    2c5e:	80 91 af 23 	lds	r24, 0x23AF	; 0x8023af <main_b_kbd_enable>
    2c62:	88 23       	and	r24, r24
    2c64:	81 f0       	breq	.+32     	; 0x2c86 <main_sof_action+0x28>
	return;
	kbd_ui_process();
    2c66:	0e 94 aa 07 	call	0xf54	; 0xf54 <kbd_ui_process>

	if (!main_b_generic_enable)
    2c6a:	80 91 ae 23 	lds	r24, 0x23AE	; 0x8023ae <main_b_generic_enable>
    2c6e:	88 23       	and	r24, r24
    2c70:	51 f0       	breq	.+20     	; 0x2c86 <main_sof_action+0x28>
		return;
	jstk_ui_process();
    2c72:	0e 94 a8 07 	call	0xf50	; 0xf50 <jstk_ui_process>

	if (!main_b_led_enable)
    2c76:	80 91 ad 23 	lds	r24, 0x23AD	; 0x8023ad <main_b_led_enable>
    2c7a:	88 23       	and	r24, r24
    2c7c:	21 f0       	breq	.+8      	; 0x2c86 <main_sof_action+0x28>
		return;
	led_ui_process();
    2c7e:	0e 94 b0 07 	call	0xf60	; 0xf60 <led_ui_process>

	status_ui_process();
    2c82:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <status_ui_process>
    2c86:	08 95       	ret

00002c88 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2c88:	08 95       	ret

00002c8a <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2c8a:	08 95       	ret

00002c8c <main_kbd_enable>:

/* --------------------------------------------------------------------- */
/* ----------------------------- keyboard ------------------------------ */
/* --------------------------------------------------------------------- */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	80 93 af 23 	sts	0x23AF, r24	; 0x8023af <main_b_kbd_enable>
	return true;
}
    2c92:	08 95       	ret

00002c94 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2c94:	10 92 af 23 	sts	0x23AF, r1	; 0x8023af <main_b_kbd_enable>
    2c98:	08 95       	ret

00002c9a <main_generic_enable>:

/* --------------------------------------------------------------------- */
/* ----------------------------- joystick ------------------------------ */
/* --------------------------------------------------------------------- */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	80 93 ae 23 	sts	0x23AE, r24	; 0x8023ae <main_b_generic_enable>
	return true;
}
    2ca0:	08 95       	ret

00002ca2 <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2ca2:	10 92 ae 23 	sts	0x23AE, r1	; 0x8023ae <main_b_generic_enable>
    2ca6:	08 95       	ret

00002ca8 <main_led_enable>:

/* --------------------------------------------------------------------- */
/* ------------------------------- LEDs -------------------------------- */
/* --------------------------------------------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	80 93 ad 23 	sts	0x23AD, r24	; 0x8023ad <main_b_led_enable>
	return true;
}
    2cae:	08 95       	ret

00002cb0 <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2cb0:	10 92 ad 23 	sts	0x23AD, r1	; 0x8023ad <main_b_led_enable>
    2cb4:	08 95       	ret

00002cb6 <__udivmodhi4>:
    2cb6:	aa 1b       	sub	r26, r26
    2cb8:	bb 1b       	sub	r27, r27
    2cba:	51 e1       	ldi	r21, 0x11	; 17
    2cbc:	07 c0       	rjmp	.+14     	; 0x2ccc <__udivmodhi4_ep>

00002cbe <__udivmodhi4_loop>:
    2cbe:	aa 1f       	adc	r26, r26
    2cc0:	bb 1f       	adc	r27, r27
    2cc2:	a6 17       	cp	r26, r22
    2cc4:	b7 07       	cpc	r27, r23
    2cc6:	10 f0       	brcs	.+4      	; 0x2ccc <__udivmodhi4_ep>
    2cc8:	a6 1b       	sub	r26, r22
    2cca:	b7 0b       	sbc	r27, r23

00002ccc <__udivmodhi4_ep>:
    2ccc:	88 1f       	adc	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	5a 95       	dec	r21
    2cd2:	a9 f7       	brne	.-22     	; 0x2cbe <__udivmodhi4_loop>
    2cd4:	80 95       	com	r24
    2cd6:	90 95       	com	r25
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	08 95       	ret

00002cde <__tablejump2__>:
    2cde:	ee 0f       	add	r30, r30
    2ce0:	ff 1f       	adc	r31, r31
    2ce2:	88 1f       	adc	r24, r24
    2ce4:	8b bf       	out	0x3b, r24	; 59
    2ce6:	07 90       	elpm	r0, Z+
    2ce8:	f6 91       	elpm	r31, Z
    2cea:	e0 2d       	mov	r30, r0
    2cec:	19 94       	eijmp

00002cee <memcpy>:
    2cee:	fb 01       	movw	r30, r22
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	02 c0       	rjmp	.+4      	; 0x2cf8 <memcpy+0xa>
    2cf4:	01 90       	ld	r0, Z+
    2cf6:	0d 92       	st	X+, r0
    2cf8:	41 50       	subi	r20, 0x01	; 1
    2cfa:	50 40       	sbci	r21, 0x00	; 0
    2cfc:	d8 f7       	brcc	.-10     	; 0x2cf4 <memcpy+0x6>
    2cfe:	08 95       	ret

00002d00 <_exit>:
    2d00:	f8 94       	cli

00002d02 <__stop_program>:
    2d02:	ff cf       	rjmp	.-2      	; 0x2d02 <__stop_program>
