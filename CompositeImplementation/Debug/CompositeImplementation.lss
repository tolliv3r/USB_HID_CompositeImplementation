
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ab0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000192  00802000  00002ab0  00002b44  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000264  00802192  00802192  00002cd6  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002cd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005d0  00000000  00000000  00002d48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b1ee  00000000  00000000  00003318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000534d  00000000  00000000  0000e506  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000099de  00000000  00000000  00013853  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d3c  00000000  00000000  0001d234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036def  00000000  00000000  0001df70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f57  00000000  00000000  00054d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  00057cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd7b  00000000  00000000  000582f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 35 13 	jmp	0x266a	; 0x266a <__vector_125>
     1f8:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__vector_126>
     1fc:	83 04       	cpc	r8, r3
     1fe:	c2 04       	cpc	r12, r2
     200:	79 04       	cpc	r7, r9
     202:	c4 04       	cpc	r12, r4
     204:	7b 04       	cpc	r7, r11
     206:	7d 04       	cpc	r7, r13
     208:	7f 04       	cpc	r7, r15
     20a:	81 04       	cpc	r8, r1
     20c:	83 04       	cpc	r8, r3
     20e:	22 0e       	add	r2, r18
     210:	25 0e       	add	r2, r21
     212:	28 0e       	add	r2, r24
     214:	2b 0e       	add	r2, r27
     216:	2e 0e       	add	r2, r30
     218:	31 0e       	add	r3, r17
     21a:	34 0e       	add	r3, r20

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	e0 eb       	ldi	r30, 0xB0	; 176
     234:	fa e2       	ldi	r31, 0x2A	; 42
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a2 39       	cpi	r26, 0x92	; 146
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a2 e9       	ldi	r26, 0x92	; 146
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a6 3f       	cpi	r26, 0xF6	; 246
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <main>
     25a:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     264:	30 91 e8 23 	lds	r19, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
     268:	20 91 e9 23 	lds	r18, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     278:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
     27c:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     284:	e6 ee       	ldi	r30, 0xE6	; 230
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	82 e9       	ldi	r24, 0x92	; 146
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     298:	8b e7       	ldi	r24, 0x7B	; 123
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
	}
	return false;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_in_sent>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep) {
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_led_b_report_in_free = true;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <udi_hid_led_b_report_in_free>
     2b6:	08 95       	ret

000002b8 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2bc:	0b e7       	ldi	r16, 0x7B	; 123
     2be:	11 e0       	ldi	r17, 0x01	; 1
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	42 e9       	ldi	r20, 0x92	; 146
     2c6:	51 e2       	ldi	r21, 0x21	; 33
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
}
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	08 95       	ret

000002d6 <udi_hid_led_enable>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep);

/* --------------------------------------------------------------------- */

bool udi_hid_led_enable(void) {
     2d6:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d8:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2dc:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <udi_hid_led_protocol>
	udi_hid_led_b_report_in_free = true;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <udi_hid_led_b_report_in_free>

	if(!udi_hid_led_report_out_enable())
     2e6:	e8 df       	rcall	.-48     	; 0x2b8 <udi_hid_led_report_out_enable>
     2e8:	c8 2f       	mov	r28, r24
     2ea:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2ec:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <main_led_enable>
	return true;
}
     2f0:	8c 2f       	mov	r24, r28
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2f6:	81 11       	cpse	r24, r1
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <udi_hid_led_report_out_received+0x10>
     2fa:	61 30       	cpi	r22, 0x01	; 1
     2fc:	71 05       	cpc	r23, r1
     2fe:	19 f4       	brne	.+6      	; 0x306 <udi_hid_led_report_out_received+0x10>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     300:	82 e9       	ldi	r24, 0x92	; 146
     302:	91 e2       	ldi	r25, 0x21	; 33
     304:	c0 d4       	rcall	.+2432   	; 0xc86 <led_ui_report>
	}
	udi_hid_led_report_out_enable();
     306:	d8 cf       	rjmp	.-80     	; 0x2b8 <udi_hid_led_report_out_enable>
     308:	08 95       	ret

0000030a <udi_hid_led_disable>:
     30a:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <main_led_disable>
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     30e:	08 95       	ret

00000310 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     310:	22 e3       	ldi	r18, 0x32	; 50
     312:	31 e0       	ldi	r19, 0x01	; 1
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e2       	ldi	r21, 0x20	; 32
     318:	6a e9       	ldi	r22, 0x9A	; 154
     31a:	71 e2       	ldi	r23, 0x21	; 33
     31c:	8c e9       	ldi	r24, 0x9C	; 156
     31e:	91 e2       	ldi	r25, 0x21	; 33
     320:	fd c6       	rjmp	.+3578   	; 0x111c <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     322:	08 95       	ret

00000324 <udi_hid_led_send_report_in>:
		              udi_hid_led_report_out_received);
}


bool udi_hid_led_send_report_in(uint8_t *data)
{
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	9c 01       	movw	r18, r24
	if (!udi_hid_led_b_report_in_free)
     336:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <udi_hid_led_b_report_in_free>
     33a:	88 23       	and	r24, r24
     33c:	59 f1       	breq	.+86     	; 0x394 <udi_hid_led_send_report_in+0x70>
     33e:	d9 01       	movw	r26, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     340:	8f b7       	in	r24, 0x3f	; 63
     342:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     344:	f8 94       	cli
	return flags;
     346:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();

	memset(&udi_hid_led_report_in,
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	24 e9       	ldi	r18, 0x94	; 148
     34c:	31 e2       	ldi	r19, 0x21	; 33
     34e:	f9 01       	movw	r30, r18
     350:	11 92       	st	Z+, r1
     352:	8a 95       	dec	r24
     354:	e9 f7       	brne	.-6      	; 0x350 <udi_hid_led_send_report_in+0x2c>
		   0,
		   sizeof(udi_hid_led_report_in));
	memcpy(&udi_hid_led_report_in,
     356:	8d 91       	ld	r24, X+
     358:	9d 91       	ld	r25, X+
     35a:	0d 90       	ld	r0, X+
     35c:	bc 91       	ld	r27, X
     35e:	a0 2d       	mov	r26, r0
     360:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <udi_hid_led_report_in>
     364:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <udi_hid_led_report_in+0x1>
     368:	a0 93 96 21 	sts	0x2196, r26	; 0x802196 <udi_hid_led_report_in+0x2>
     36c:	b0 93 97 21 	sts	0x2197, r27	; 0x802197 <udi_hid_led_report_in+0x3>
		   data,
		   sizeof(udi_hid_led_report_in));
	udi_hid_led_b_report_in_free = !udd_ep_run(UDI_HID_LED_EP_IN,
     370:	08 e5       	ldi	r16, 0x58	; 88
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	24 e0       	ldi	r18, 0x04	; 4
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	44 e9       	ldi	r20, 0x94	; 148
     37a:	51 e2       	ldi	r21, 0x21	; 33
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	84 e8       	ldi	r24, 0x84	; 132
     380:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <udd_ep_run>
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	89 27       	eor	r24, r25
     388:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <udi_hid_led_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     38c:	ff be       	out	0x3f, r15	; 63
		                                       false,
		                                       (uint8_t *) & udi_hid_led_report_in,
		                                       sizeof(udi_hid_led_report_in),
		                                       udi_hid_led_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_led_b_report_in_free;
     38e:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <udi_hid_led_b_report_in_free>
     392:	89 27       	eor	r24, r25
}
     394:	0f 90       	pop	r0
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	08 95       	ret

000003a2 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     3a2:	e0 e0       	ldi	r30, 0x00	; 0
     3a4:	f6 e0       	ldi	r31, 0x06	; 6
     3a6:	9f ef       	ldi	r25, 0xFF	; 255
     3a8:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     3aa:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     3ac:	e0 e2       	ldi	r30, 0x20	; 32
     3ae:	f6 e0       	ldi	r31, 0x06	; 6
     3b0:	3f e3       	ldi	r19, 0x3F	; 63
     3b2:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3b4:	88 e1       	ldi	r24, 0x18	; 24
     3b6:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3b8:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3ba:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3bc:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3be:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3c0:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     3c2:	20 ec       	ldi	r18, 0xC0	; 192
     3c4:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     3c6:	40 e4       	ldi	r20, 0x40	; 64
     3c8:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     3ca:	40 e8       	ldi	r20, 0x80	; 128
     3cc:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     3ce:	e0 e4       	ldi	r30, 0x40	; 64
     3d0:	f6 e0       	ldi	r31, 0x06	; 6
     3d2:	4c ef       	ldi	r20, 0xFC	; 252
     3d4:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d6:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d8:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3da:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3dc:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3de:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e0:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     3e2:	43 e0       	ldi	r20, 0x03	; 3
     3e4:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     3e6:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     3e8:	e0 e6       	ldi	r30, 0x60	; 96
     3ea:	f6 e0       	ldi	r31, 0x06	; 6
     3ec:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ee:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f0:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f2:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f4:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f6:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f8:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     3fa:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     3fc:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     3fe:	e0 e8       	ldi	r30, 0x80	; 128
     400:	f6 e0       	ldi	r31, 0x06	; 6
     402:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     404:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     406:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     408:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40a:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40c:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40e:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     410:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     412:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     414:	e0 ea       	ldi	r30, 0xA0	; 160
     416:	f6 e0       	ldi	r31, 0x06	; 6
     418:	90 ef       	ldi	r25, 0xF0	; 240
     41a:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41c:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     41e:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     420:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     422:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     428:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     42a:	ca d2       	rcall	.+1428   	; 0x9c0 <led_init>
	keypad_init();
     42c:	fa d0       	rcall	.+500    	; 0x622 <keypad_init>
	idle_start();
     42e:	70 c3       	rjmp	.+1760   	; 0xb10 <idle_start>
     430:	08 95       	ret

00000432 <jstk_readVertIndex>:
     432:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


     436:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	92 2b       	or	r25, r18
     43e:	96 95       	lsr	r25
     440:	87 95       	ror	r24
     442:	96 95       	lsr	r25
     444:	87 95       	ror	r24
     446:	bc 01       	movw	r22, r24
     448:	7f 70       	andi	r23, 0x0F	; 15
     44a:	80 ff       	sbrs	r24, 0
     44c:	17 c0       	rjmp	.+46     	; 0x47c <jstk_readVertIndex+0x4a>
     44e:	21 e0       	ldi	r18, 0x01	; 1
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	e1 e0       	ldi	r30, 0x01	; 1
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	82 2f       	mov	r24, r18
     458:	af 01       	movw	r20, r30
     45a:	02 2e       	mov	r0, r18
     45c:	02 c0       	rjmp	.+4      	; 0x462 <jstk_readVertIndex+0x30>
     45e:	44 0f       	add	r20, r20
     460:	55 1f       	adc	r21, r21
     462:	0a 94       	dec	r0
     464:	e2 f7       	brpl	.-8      	; 0x45e <jstk_readVertIndex+0x2c>
     466:	46 23       	and	r20, r22
     468:	57 23       	and	r21, r23
     46a:	45 2b       	or	r20, r21
     46c:	41 f0       	breq	.+16     	; 0x47e <jstk_readVertIndex+0x4c>
     46e:	2f 5f       	subi	r18, 0xFF	; 255
     470:	3f 4f       	sbci	r19, 0xFF	; 255
     472:	2c 30       	cpi	r18, 0x0C	; 12
     474:	31 05       	cpc	r19, r1
     476:	79 f7       	brne	.-34     	; 0x456 <jstk_readVertIndex+0x24>
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	08 95       	ret
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	08 95       	ret

00000480 <jstk_readHoriIndex>:
     480:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     484:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	92 2b       	or	r25, r18
     48c:	bc 01       	movw	r22, r24
     48e:	7f 70       	andi	r23, 0x0F	; 15
     490:	80 ff       	sbrs	r24, 0
     492:	17 c0       	rjmp	.+46     	; 0x4c2 <jstk_readHoriIndex+0x42>
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	e1 e0       	ldi	r30, 0x01	; 1
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	82 2f       	mov	r24, r18
     49e:	af 01       	movw	r20, r30
     4a0:	02 2e       	mov	r0, r18
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <jstk_readHoriIndex+0x28>
     4a4:	44 0f       	add	r20, r20
     4a6:	55 1f       	adc	r21, r21
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <jstk_readHoriIndex+0x24>
     4ac:	46 23       	and	r20, r22
     4ae:	57 23       	and	r21, r23
     4b0:	45 2b       	or	r20, r21
     4b2:	41 f0       	breq	.+16     	; 0x4c4 <jstk_readHoriIndex+0x44>
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	2c 30       	cpi	r18, 0x0C	; 12
     4ba:	31 05       	cpc	r19, r1
     4bc:	79 f7       	brne	.-34     	; 0x49c <jstk_readHoriIndex+0x1c>
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	08 95       	ret
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	08 95       	ret

000004c6 <jstk_ledMask>:

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;

     4c6:	88 23       	and	r24, r24
     4c8:	f4 f1       	brlt	.+124    	; 0x546 <jstk_ledMask+0x80>
    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

     4ca:	9b ef       	ldi	r25, 0xFB	; 251
     4cc:	98 0f       	add	r25, r24
     4ce:	92 30       	cpi	r25, 0x02	; 2
     4d0:	e0 f1       	brcs	.+120    	; 0x54a <jstk_ledMask+0x84>
    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
     4d2:	85 30       	cpi	r24, 0x05	; 5
     4d4:	34 f4       	brge	.+12     	; 0x4e2 <jstk_ledMask+0x1c>
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
    if (N > 4) N = 4;
    /*
     4d6:	95 e0       	ldi	r25, 0x05	; 5
     4d8:	98 1b       	sub	r25, r24
     4da:	92 30       	cpi	r25, 0x02	; 2
     4dc:	08 f0       	brcs	.+2      	; 0x4e0 <jstk_ledMask+0x1a>
     4de:	42 c0       	rjmp	.+132    	; 0x564 <jstk_ledMask+0x9e>
     4e0:	36 c0       	rjmp	.+108    	; 0x54e <jstk_ledMask+0x88>
     4e2:	9a ef       	ldi	r25, 0xFA	; 250
     4e4:	98 0f       	add	r25, r24
     4e6:	92 30       	cpi	r25, 0x02	; 2
     4e8:	b0 f5       	brcc	.+108    	; 0x556 <jstk_ledMask+0x90>
     4ea:	31 c0       	rjmp	.+98     	; 0x54e <jstk_ledMask+0x88>
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     4ec:	62 e0       	ldi	r22, 0x02	; 2
     4ee:	23 e0       	ldi	r18, 0x03	; 3
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4f6:	e1 e0       	ldi	r30, 0x01	; 1
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	af 01       	movw	r20, r30
     4fc:	02 2e       	mov	r0, r18
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <jstk_ledMask+0x3e>
     500:	44 0f       	add	r20, r20
     502:	55 1f       	adc	r21, r21
     504:	0a 94       	dec	r0
     506:	e2 f7       	brpl	.-8      	; 0x500 <jstk_ledMask+0x3a>
     508:	84 2b       	or	r24, r20

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
     50a:	9f 5f       	subi	r25, 0xFF	; 255
     50c:	21 50       	subi	r18, 0x01	; 1
     50e:	31 09       	sbc	r19, r1
     510:	96 17       	cp	r25, r22
     512:	98 f3       	brcs	.-26     	; 0x4fa <jstk_ledMask+0x34>
     514:	08 95       	ret
     516:	81 50       	subi	r24, 0x01	; 1
     518:	48 2f       	mov	r20, r24
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	4b 5f       	subi	r20, 0xFB	; 251
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     520:	24 e0       	ldi	r18, 0x04	; 4
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     526:	e1 e0       	ldi	r30, 0x01	; 1
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	bf 01       	movw	r22, r30
     52c:	02 2e       	mov	r0, r18
     52e:	02 c0       	rjmp	.+4      	; 0x534 <jstk_ledMask+0x6e>
     530:	66 0f       	add	r22, r22
     532:	77 1f       	adc	r23, r23
     534:	0a 94       	dec	r0
     536:	e2 f7       	brpl	.-8      	; 0x530 <jstk_ledMask+0x6a>
     538:	86 2b       	or	r24, r22
     53a:	2f 5f       	subi	r18, 0xFF	; 255
     53c:	3f 4f       	sbci	r19, 0xFF	; 255
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
     53e:	24 17       	cp	r18, r20
     540:	35 07       	cpc	r19, r21
     542:	99 f7       	brne	.-26     	; 0x52a <jstk_ledMask+0x64>
     544:	08 95       	ret
uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	08 95       	ret
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     54a:	88 e1       	ldi	r24, 0x18	; 24
     54c:	08 95       	ret
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     54e:	85 30       	cpi	r24, 0x05	; 5
     550:	6c f2       	brlt	.-102    	; 0x4ec <jstk_ledMask+0x26>
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	e0 cf       	rjmp	.-64     	; 0x516 <jstk_ledMask+0x50>
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
    if (N > 4) N = 4;
    /*
     556:	85 50       	subi	r24, 0x05	; 5
     558:	85 30       	cpi	r24, 0x05	; 5
     55a:	08 f0       	brcs	.+2      	; 0x55e <jstk_ledMask+0x98>
     55c:	84 e0       	ldi	r24, 0x04	; 4
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
     55e:	81 11       	cpse	r24, r1
     560:	da cf       	rjmp	.-76     	; 0x516 <jstk_ledMask+0x50>
     562:	08 95       	ret
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
    if (N > 4) N = 4;
    /*
     564:	66 e0       	ldi	r22, 0x06	; 6
     566:	68 1b       	sub	r22, r24
     568:	65 30       	cpi	r22, 0x05	; 5
     56a:	08 f0       	brcs	.+2      	; 0x56e <jstk_ledMask+0xa8>
     56c:	64 e0       	ldi	r22, 0x04	; 4

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
     56e:	61 11       	cpse	r22, r1
     570:	be cf       	rjmp	.-132    	; 0x4ee <jstk_ledMask+0x28>
     572:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}

static uint8_t jstk_usbReport[2];
     574:	08 95       	ret

00000576 <jstk_readMask>:


uint8_t jstk_readMask(void)
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     576:	cf 93       	push	r28

     578:	5c df       	rcall	.-328    	; 0x432 <jstk_readVertIndex>
     57a:	c8 2f       	mov	r28, r24
    if (vi < 0 && hi < 0)
     57c:	81 df       	rcall	.-254    	; 0x480 <jstk_readHoriIndex>
     57e:	cc 23       	and	r28, r28
        return 0;                           // no contact

     580:	24 f4       	brge	.+8      	; 0x58a <jstk_readMask+0x14>
     582:	88 23       	and	r24, r24
     584:	c4 f0       	brlt	.+48     	; 0x5b6 <jstk_readMask+0x40>
     586:	90 e0       	ldi	r25, 0x00	; 0
    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

     588:	09 c0       	rjmp	.+18     	; 0x59c <jstk_readMask+0x26>
     58a:	c6 30       	cpi	r28, 0x06	; 6
     58c:	1c f0       	brlt	.+6      	; 0x594 <jstk_readMask+0x1e>
     58e:	9b ef       	ldi	r25, 0xFB	; 251
     590:	9c 0f       	add	r25, r28
     592:	02 c0       	rjmp	.+4      	; 0x598 <jstk_readMask+0x22>
     594:	95 e0       	ldi	r25, 0x05	; 5
     596:	9c 1b       	sub	r25, r28
     598:	88 23       	and	r24, r24
    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     59a:	54 f0       	brlt	.+20     	; 0x5b0 <jstk_readMask+0x3a>
     59c:	86 30       	cpi	r24, 0x06	; 6
     59e:	1c f0       	brlt	.+6      	; 0x5a6 <jstk_readMask+0x30>
     5a0:	2b ef       	ldi	r18, 0xFB	; 251
     5a2:	28 0f       	add	r18, r24
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <jstk_readMask+0x34>
     5a6:	25 e0       	ldi	r18, 0x05	; 5
     5a8:	28 1b       	sub	r18, r24
     5aa:	92 17       	cp	r25, r18

    return jstk_ledMask(jstk_use);          // convert to bits
     5ac:	08 f4       	brcc	.+2      	; 0x5b0 <jstk_readMask+0x3a>
     5ae:	c8 2f       	mov	r28, r24
}   // basically just prioritizes whichever axis is moving more

     5b0:	8c 2f       	mov	r24, r28
     5b2:	89 df       	rcall	.-238    	; 0x4c6 <jstk_ledMask>
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <jstk_readMask+0x42>
     5b6:	80 e0       	ldi	r24, 0x00	; 0
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
     5b8:	cf 91       	pop	r28
    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
     5ba:	08 95       	ret

000005bc <jstk_usbTask>:
     5bc:	61 df       	rcall	.-318    	; 0x480 <jstk_readHoriIndex>
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5be:	88 23       	and	r24, r24
     5c0:	3c f0       	brlt	.+14     	; 0x5d0 <jstk_usbTask+0x14>
}   // conversion runtime is O(1)

     5c2:	e8 2f       	mov	r30, r24
     5c4:	88 0f       	add	r24, r24
     5c6:	ff 0b       	sbc	r31, r31
     5c8:	ee 58       	subi	r30, 0x8E	; 142
     5ca:	fe 4d       	sbci	r31, 0xDE	; 222
     5cc:	80 81       	ld	r24, Z
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <jstk_usbTask+0x16>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     5d0:	80 e8       	ldi	r24, 0x80	; 128
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     5d2:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <jstk_usbReport>
            jstk_prevReport[0] = jstk_usbReport[0];
     5d6:	2d df       	rcall	.-422    	; 0x432 <jstk_readVertIndex>
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5d8:	88 23       	and	r24, r24
     5da:	3c f0       	brlt	.+14     	; 0x5ea <jstk_usbTask+0x2e>
}   // conversion runtime is O(1)

     5dc:	e8 2f       	mov	r30, r24
     5de:	88 0f       	add	r24, r24
     5e0:	ff 0b       	sbc	r31, r31
     5e2:	ee 58       	subi	r30, 0x8E	; 142
     5e4:	fe 4d       	sbci	r31, 0xDE	; 222
     5e6:	80 81       	ld	r24, Z
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <jstk_usbTask+0x30>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     5ea:	80 e8       	ldi	r24, 0x80	; 128
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
            jstk_prevReport[0] = jstk_usbReport[0];
     5ec:	ee e9       	ldi	r30, 0x9E	; 158
     5ee:	f1 e2       	ldi	r31, 0x21	; 33
     5f0:	81 83       	std	Z+1, r24	; 0x01
            jstk_prevReport[1] = jstk_usbReport[1];
        }
    }
     5f2:	20 81       	ld	r18, Z
     5f4:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     5f8:	29 13       	cpse	r18, r25
     5fa:	04 c0       	rjmp	.+8      	; 0x604 <jstk_usbTask+0x48>
     5fc:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     600:	98 17       	cp	r25, r24
     602:	71 f0       	breq	.+28     	; 0x620 <jstk_usbTask+0x64>
     604:	8e e9       	ldi	r24, 0x9E	; 158
     606:	91 e2       	ldi	r25, 0x21	; 33
     608:	98 d4       	rcall	.+2352   	; 0xf3a <udi_hid_generic_send_report_in>
     60a:	88 23       	and	r24, r24
     60c:	49 f0       	breq	.+18     	; 0x620 <jstk_usbTask+0x64>
     60e:	e6 e2       	ldi	r30, 0x26	; 38
     610:	f0 e2       	ldi	r31, 0x20	; 32
     612:	ae e9       	ldi	r26, 0x9E	; 158
     614:	b1 e2       	ldi	r27, 0x21	; 33
     616:	8c 91       	ld	r24, X
     618:	80 83       	st	Z, r24
     61a:	11 96       	adiw	r26, 0x01	; 1
     61c:	8c 91       	ld	r24, X
     61e:	81 83       	std	Z+1, r24	; 0x01
     620:	08 95       	ret

00000622 <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     622:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <kpd_keyPressed>
     626:	10 92 b8 21 	sts	0x21B8, r1	; 0x8021b8 <kpd_currState>
     62a:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <kpd_prevState>
     62e:	10 92 b5 21 	sts	0x21B5, r1	; 0x8021b5 <kpd_exitTestMode>
     632:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <kpd_rowVal>
     636:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <kpd_code>
     63a:	e2 ec       	ldi	r30, 0xC2	; 194
     63c:	f1 e2       	ldi	r31, 0x21	; 33
     63e:	81 e6       	ldi	r24, 0x61	; 97
     640:	80 83       	st	Z, r24
     642:	80 e6       	ldi	r24, 0x60	; 96
     644:	81 83       	std	Z+1, r24	; 0x01
     646:	12 82       	std	Z+2, r1	; 0x02
     648:	13 82       	std	Z+3, r1	; 0x03
     64a:	8f e5       	ldi	r24, 0x5F	; 95
     64c:	84 83       	std	Z+4, r24	; 0x04
     64e:	8e e5       	ldi	r24, 0x5E	; 94
     650:	85 83       	std	Z+5, r24	; 0x05
     652:	16 82       	std	Z+6, r1	; 0x06
     654:	17 82       	std	Z+7, r1	; 0x07
     656:	8d e5       	ldi	r24, 0x5D	; 93
     658:	80 87       	std	Z+8, r24	; 0x08
     65a:	11 86       	std	Z+9, r1	; 0x09
     65c:	12 86       	std	Z+10, r1	; 0x0a
     65e:	13 86       	std	Z+11, r1	; 0x0b
     660:	14 86       	std	Z+12, r1	; 0x0c
     662:	15 86       	std	Z+13, r1	; 0x0d
     664:	89 e5       	ldi	r24, 0x59	; 89
     666:	86 87       	std	Z+14, r24	; 0x0e
     668:	8b e5       	ldi	r24, 0x5B	; 91
     66a:	87 87       	std	Z+15, r24	; 0x0f
     66c:	10 8a       	std	Z+16, r1	; 0x10
     66e:	11 8a       	std	Z+17, r1	; 0x11
     670:	8a e5       	ldi	r24, 0x5A	; 90
     672:	82 8b       	std	Z+18, r24	; 0x12
     674:	8c e5       	ldi	r24, 0x5C	; 92
     676:	83 8b       	std	Z+19, r24	; 0x13
     678:	ed eb       	ldi	r30, 0xBD	; 189
     67a:	f1 e2       	ldi	r31, 0x21	; 33
     67c:	8e e0       	ldi	r24, 0x0E	; 14
     67e:	80 83       	st	Z, r24
     680:	8d e0       	ldi	r24, 0x0D	; 13
     682:	81 83       	std	Z+1, r24	; 0x01
     684:	8b e0       	ldi	r24, 0x0B	; 11
     686:	82 83       	std	Z+2, r24	; 0x02
     688:	87 e0       	ldi	r24, 0x07	; 7
     68a:	83 83       	std	Z+3, r24	; 0x03
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	84 83       	std	Z+4, r24	; 0x04
     690:	08 95       	ret

00000692 <keypad_poll>:
     692:	4f 92       	push	r4
     694:	5f 92       	push	r5
     696:	6f 92       	push	r6
     698:	7f 92       	push	r7
     69a:	8f 92       	push	r8
     69c:	9f 92       	push	r9
     69e:	af 92       	push	r10
     6a0:	bf 92       	push	r11
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	e4 ea       	ldi	r30, 0xA4	; 164
     6b4:	f1 e2       	ldi	r31, 0x21	; 33
     6b6:	8d ea       	ldi	r24, 0xAD	; 173
     6b8:	91 e2       	ldi	r25, 0x21	; 33
     6ba:	11 92       	st	Z+, r1
     6bc:	8e 17       	cp	r24, r30
     6be:	9f 07       	cpc	r25, r31
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <keypad_poll+0x28>
     6c2:	40 90 a3 21 	lds	r4, 0x21A3	; 0x8021a3 <prevRowMask.5348>
     6c6:	0e e7       	ldi	r16, 0x7E	; 126
     6c8:	11 e2       	ldi	r17, 0x21	; 33
     6ca:	c0 e0       	ldi	r28, 0x00	; 0
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
     6ce:	b1 2c       	mov	r11, r1
     6d0:	0f 2e       	mov	r0, r31
     6d2:	f5 e0       	ldi	r31, 0x05	; 5
     6d4:	6f 2e       	mov	r6, r31
     6d6:	f0 2d       	mov	r31, r0
     6d8:	68 94       	set
     6da:	77 24       	eor	r7, r7
     6dc:	72 f8       	bld	r7, 2
     6de:	0f 2e       	mov	r0, r31
     6e0:	f0 ea       	ldi	r31, 0xA0	; 160
     6e2:	ef 2e       	mov	r14, r31
     6e4:	f6 e0       	ldi	r31, 0x06	; 6
     6e6:	ff 2e       	mov	r15, r31
     6e8:	f0 2d       	mov	r31, r0
     6ea:	0f 2e       	mov	r0, r31
     6ec:	f0 e2       	ldi	r31, 0x20	; 32
     6ee:	cf 2e       	mov	r12, r31
     6f0:	f6 e0       	ldi	r31, 0x06	; 6
     6f2:	df 2e       	mov	r13, r31
     6f4:	f0 2d       	mov	r31, r0
     6f6:	68 94       	set
     6f8:	88 24       	eor	r8, r8
     6fa:	87 f8       	bld	r8, 7
     6fc:	99 24       	eor	r9, r9
     6fe:	93 94       	inc	r9
     700:	ac 2e       	mov	r10, r28
     702:	fe 01       	movw	r30, r28
     704:	e3 54       	subi	r30, 0x43	; 67
     706:	fe 4d       	sbci	r31, 0xDE	; 222
     708:	80 81       	ld	r24, Z
     70a:	d7 01       	movw	r26, r14
     70c:	14 96       	adiw	r26, 0x04	; 4
     70e:	8c 93       	st	X, r24
     710:	b4 e0       	ldi	r27, 0x04	; 4
     712:	cb 13       	cpse	r28, r27
     714:	03 c0       	rjmp	.+6      	; 0x71c <keypad_poll+0x8a>
     716:	f6 01       	movw	r30, r12
     718:	86 82       	std	Z+6, r8	; 0x06
     71a:	03 c0       	rjmp	.+6      	; 0x722 <keypad_poll+0x90>
     71c:	d6 01       	movw	r26, r12
     71e:	15 96       	adiw	r26, 0x05	; 5
     720:	8c 92       	st	X, r8
     722:	f7 01       	movw	r30, r14
     724:	80 85       	ldd	r24, Z+8	; 0x08
     726:	80 7f       	andi	r24, 0xF0	; 240
     728:	80 95       	com	r24
     72a:	f8 2f       	mov	r31, r24
     72c:	f0 7f       	andi	r31, 0xF0	; 240
     72e:	5f 2e       	mov	r5, r31
     730:	84 fd       	sbrc	r24, 4
     732:	b3 94       	inc	r11
     734:	85 fd       	sbrc	r24, 5
     736:	b3 94       	inc	r11
     738:	86 fd       	sbrc	r24, 6
     73a:	b3 94       	inc	r11
     73c:	55 20       	and	r5, r5
     73e:	0c f4       	brge	.+2      	; 0x742 <keypad_poll+0xb0>
     740:	b3 94       	inc	r11
     742:	f8 01       	movw	r30, r16
     744:	84 e0       	ldi	r24, 0x04	; 4
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	25 2d       	mov	r18, r5
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	a9 01       	movw	r20, r18
     74e:	b9 01       	movw	r22, r18
     750:	08 2e       	mov	r0, r24
     752:	02 c0       	rjmp	.+4      	; 0x758 <keypad_poll+0xc6>
     754:	75 95       	asr	r23
     756:	67 95       	ror	r22
     758:	0a 94       	dec	r0
     75a:	e2 f7       	brpl	.-8      	; 0x754 <keypad_poll+0xc2>
     75c:	60 ff       	sbrs	r22, 0
     75e:	0a c0       	rjmp	.+20     	; 0x774 <keypad_poll+0xe2>
     760:	60 81       	ld	r22, Z
     762:	69 30       	cpi	r22, 0x09	; 9
     764:	38 f4       	brcc	.+14     	; 0x774 <keypad_poll+0xe2>
     766:	06 2e       	mov	r0, r22
     768:	00 0c       	add	r0, r0
     76a:	77 0b       	sbc	r23, r23
     76c:	6c 55       	subi	r22, 0x5C	; 92
     76e:	7e 4d       	sbci	r23, 0xDE	; 222
     770:	db 01       	movw	r26, r22
     772:	9c 92       	st	X, r9
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	31 96       	adiw	r30, 0x01	; 1
     778:	88 30       	cpi	r24, 0x08	; 8
     77a:	91 05       	cpc	r25, r1
     77c:	39 f7       	brne	.-50     	; 0x74c <keypad_poll+0xba>
     77e:	ca 01       	movw	r24, r20
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	48 23       	and	r20, r24
     784:	59 23       	and	r21, r25
     786:	45 2b       	or	r20, r21
     788:	49 f0       	breq	.+18     	; 0x79c <keypad_poll+0x10a>
     78a:	b4 2d       	mov	r27, r4
     78c:	b0 95       	com	r27
     78e:	b5 21       	and	r27, r5
     790:	09 f4       	brne	.+2      	; 0x794 <keypad_poll+0x102>
     792:	b5 2d       	mov	r27, r5
     794:	8b 2f       	mov	r24, r27
     796:	81 95       	neg	r24
     798:	b8 23       	and	r27, r24
     79a:	01 c0       	rjmp	.+2      	; 0x79e <keypad_poll+0x10c>
     79c:	b5 2d       	mov	r27, r5
     79e:	b0 32       	cpi	r27, 0x20	; 32
     7a0:	79 f0       	breq	.+30     	; 0x7c0 <keypad_poll+0x12e>
     7a2:	20 f4       	brcc	.+8      	; 0x7ac <keypad_poll+0x11a>
     7a4:	b0 31       	cpi	r27, 0x10	; 16
     7a6:	09 f4       	brne	.+2      	; 0x7aa <keypad_poll+0x118>
     7a8:	48 c0       	rjmp	.+144    	; 0x83a <keypad_poll+0x1a8>
     7aa:	0e c0       	rjmp	.+28     	; 0x7c8 <keypad_poll+0x136>
     7ac:	b0 34       	cpi	r27, 0x40	; 64
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <keypad_poll+0x120>
     7b0:	46 c0       	rjmp	.+140    	; 0x83e <keypad_poll+0x1ac>
     7b2:	b0 38       	cpi	r27, 0x80	; 128
     7b4:	49 f4       	brne	.+18     	; 0x7c8 <keypad_poll+0x136>
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	7f 2e       	mov	r7, r31
     7bc:	f0 2d       	mov	r31, r0
     7be:	42 c0       	rjmp	.+132    	; 0x844 <keypad_poll+0x1b2>
     7c0:	bb 23       	and	r27, r27
     7c2:	11 f0       	breq	.+4      	; 0x7c8 <keypad_poll+0x136>
     7c4:	6a 2c       	mov	r6, r10
     7c6:	79 2c       	mov	r7, r9
     7c8:	21 96       	adiw	r28, 0x01	; 1
     7ca:	0c 5f       	subi	r16, 0xFC	; 252
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
     7ce:	45 2c       	mov	r4, r5
     7d0:	c5 30       	cpi	r28, 0x05	; 5
     7d2:	d1 05       	cpc	r29, r1
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <keypad_poll+0x146>
     7d6:	94 cf       	rjmp	.-216    	; 0x700 <keypad_poll+0x6e>
     7d8:	50 92 a3 21 	sts	0x21A3, r5	; 0x8021a3 <prevRowMask.5348>
     7dc:	80 e8       	ldi	r24, 0x80	; 128
     7de:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     7e2:	b3 e0       	ldi	r27, 0x03	; 3
     7e4:	b7 15       	cp	r27, r7
     7e6:	e0 f0       	brcs	.+56     	; 0x820 <keypad_poll+0x18e>
     7e8:	e6 2d       	mov	r30, r6
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	ee 53       	subi	r30, 0x3E	; 62
     7f6:	fe 4d       	sbci	r31, 0xDE	; 222
     7f8:	e7 0d       	add	r30, r7
     7fa:	f1 1d       	adc	r31, r1
     7fc:	80 81       	ld	r24, Z
     7fe:	90 91 bb 21 	lds	r25, 0x21BB	; 0x8021bb <kpd_keyPressed>
     802:	91 11       	cpse	r25, r1
     804:	06 c0       	rjmp	.+12     	; 0x812 <keypad_poll+0x180>
     806:	80 93 ba 21 	sts	0x21BA, r24	; 0x8021ba <kpd_code>
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	80 93 bb 21 	sts	0x21BB, r24	; 0x8021bb <kpd_keyPressed>
     810:	0d c0       	rjmp	.+26     	; 0x82c <keypad_poll+0x19a>
     812:	90 91 ba 21 	lds	r25, 0x21BA	; 0x8021ba <kpd_code>
     816:	89 17       	cp	r24, r25
     818:	49 f0       	breq	.+18     	; 0x82c <keypad_poll+0x19a>
     81a:	80 93 ba 21 	sts	0x21BA, r24	; 0x8021ba <kpd_code>
     81e:	06 c0       	rjmp	.+12     	; 0x82c <keypad_poll+0x19a>
     820:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <kpd_keyPressed>
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	11 f4       	brne	.+4      	; 0x82c <keypad_poll+0x19a>
     828:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <kpd_keyPressed>
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	8b 15       	cp	r24, r11
     830:	08 f0       	brcs	.+2      	; 0x834 <keypad_poll+0x1a2>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <kpd_multiPress>
     838:	07 c0       	rjmp	.+14     	; 0x848 <keypad_poll+0x1b6>
     83a:	71 2c       	mov	r7, r1
     83c:	03 c0       	rjmp	.+6      	; 0x844 <keypad_poll+0x1b2>
     83e:	68 94       	set
     840:	77 24       	eor	r7, r7
     842:	71 f8       	bld	r7, 1
     844:	6a 2c       	mov	r6, r10
     846:	c0 cf       	rjmp	.-128    	; 0x7c8 <keypad_poll+0x136>
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	bf 90       	pop	r11
     85a:	af 90       	pop	r10
     85c:	9f 90       	pop	r9
     85e:	8f 90       	pop	r8
     860:	7f 90       	pop	r7
     862:	6f 90       	pop	r6
     864:	5f 90       	pop	r5
     866:	4f 90       	pop	r4
     868:	08 95       	ret

0000086a <kbd_getMap>:

uint16_t kbd_getMap(void) {
     86a:	e4 ea       	ldi	r30, 0xA4	; 164
     86c:	f1 e2       	ldi	r31, 0x21	; 33
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t bits = 0;
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	50 e0       	ldi	r21, 0x00	; 0

	for (uint8_t i = 0; i < 9; ++i) {
		if (keyMap[i]) {
			bits |= (1 << i);
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	70 e0       	ldi	r23, 0x00	; 0

uint16_t kbd_getMap(void) {
	uint16_t bits = 0;

	for (uint8_t i = 0; i < 9; ++i) {
		if (keyMap[i]) {
     87a:	91 91       	ld	r25, Z+
     87c:	99 23       	and	r25, r25
     87e:	49 f0       	breq	.+18     	; 0x892 <kbd_getMap+0x28>
			bits |= (1 << i);
     880:	cb 01       	movw	r24, r22
     882:	02 2e       	mov	r0, r18
     884:	02 c0       	rjmp	.+4      	; 0x88a <kbd_getMap+0x20>
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	0a 94       	dec	r0
     88c:	e2 f7       	brpl	.-8      	; 0x886 <kbd_getMap+0x1c>
     88e:	48 2b       	or	r20, r24
     890:	59 2b       	or	r21, r25
     892:	2f 5f       	subi	r18, 0xFF	; 255
     894:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint16_t kbd_getMap(void) {
	uint16_t bits = 0;

	for (uint8_t i = 0; i < 9; ++i) {
     896:	29 30       	cpi	r18, 0x09	; 9
     898:	31 05       	cpc	r19, r1
     89a:	79 f7       	brne	.-34     	; 0x87a <kbd_getMap+0x10>
			bits |= (1 << i);
		}
	}

	return bits;
}
     89c:	ca 01       	movw	r24, r20
     89e:	08 95       	ret

000008a0 <keypad_report>:


// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     8a0:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     8a4:	80 93 b4 21 	sts	0x21B4, r24	; 0x8021b4 <kpd_testMode>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     8a8:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     8ac:	80 93 b8 21 	sts	0x21B8, r24	; 0x8021b8 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     8b0:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_currentCode = keypad_getCode();    // current code to be outputed
     8b4:	80 93 b7 21 	sts	0x21B7, r24	; 0x8021b7 <kpd_currentCode>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     8b8:	80 91 b4 21 	lds	r24, 0x21B4	; 0x8021b4 <kpd_testMode>
     8bc:	84 fd       	sbrc	r24, 4
     8be:	29 c0       	rjmp	.+82     	; 0x912 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     8c0:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <kpd_currState>
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	09 f0       	breq	.+2      	; 0x8ca <keypad_report+0x2a>
     8c8:	4d c0       	rjmp	.+154    	; 0x964 <keypad_report+0xc4>
     8ca:	80 91 b9 21 	lds	r24, 0x21B9	; 0x8021b9 <kpd_prevState>
     8ce:	81 11       	cpse	r24, r1
     8d0:	49 c0       	rjmp	.+146    	; 0x964 <keypad_report+0xc4>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
     8d2:	e0 91 b7 21 	lds	r30, 0x21B7	; 0x8021b7 <kpd_currentCode>
     8d6:	8e 2f       	mov	r24, r30
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	e9 55       	subi	r30, 0x59	; 89
     8de:	f1 09       	sbc	r31, r1
     8e0:	e9 30       	cpi	r30, 0x09	; 9
     8e2:	f1 05       	cpc	r31, r1
     8e4:	90 f4       	brcc	.+36     	; 0x90a <keypad_report+0x6a>
     8e6:	88 27       	eor	r24, r24
     8e8:	e2 50       	subi	r30, 0x02	; 2
     8ea:	ff 4f       	sbci	r31, 0xFF	; 255
     8ec:	8f 4f       	sbci	r24, 0xFF	; 255
     8ee:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     8f2:	84 e0       	ldi	r24, 0x04	; 4
     8f4:	09 c0       	rjmp	.+18     	; 0x908 <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     8f6:	80 e1       	ldi	r24, 0x10	; 16
     8f8:	07 c0       	rjmp	.+14     	; 0x908 <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     8fa:	80 e2       	ldi	r24, 0x20	; 32
     8fc:	05 c0       	rjmp	.+10     	; 0x908 <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     8fe:	80 e4       	ldi	r24, 0x40	; 64
     900:	03 c0       	rjmp	.+6      	; 0x908 <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     902:	80 e8       	ldi	r24, 0x80	; 128
     904:	01 c0       	rjmp	.+2      	; 0x908 <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     906:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     908:	73 d0       	rcall	.+230    	; 0x9f0 <led_toggle>

			// activityEnable();
			kpd_exitTestMode = 1;	// flag for exiting test mode
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <kpd_exitTestMode>
     910:	29 c0       	rjmp	.+82     	; 0x964 <keypad_report+0xc4>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     912:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <kpd_keyPressed>

		static bool    kpd_firstKey  = false;
		static uint8_t kpd_firstCode = 0;
		static bool    kpd_block     = false;

		if (!kpd_firstKey) {
     916:	90 91 a2 21 	lds	r25, 0x21A2	; 0x8021a2 <kpd_firstKey.5404>
     91a:	91 11       	cpse	r25, r1
     91c:	0b c0       	rjmp	.+22     	; 0x934 <keypad_report+0x94>
			if (kpd_anyPressed) {
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	09 f5       	brne	.+66     	; 0x964 <keypad_report+0xc4>
				kpd_firstKey = true;
     922:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <kpd_firstKey.5404>
				kpd_firstCode = kpd_currentCode;
     926:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <kpd_currentCode>
     92a:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <kpd_firstCode.5405>
				kpd_block = false;
     92e:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <kpd_block.5406>
     932:	18 c0       	rjmp	.+48     	; 0x964 <keypad_report+0xc4>
			}
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	51 f5       	brne	.+84     	; 0x98c <keypad_report+0xec>
     938:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <kpd_block.5406>
     93c:	81 11       	cpse	r24, r1
     93e:	12 c0       	rjmp	.+36     	; 0x964 <keypad_report+0xc4>
     940:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <kpd_multiPress>
     944:	88 23       	and	r24, r24
     946:	71 f0       	breq	.+28     	; 0x964 <keypad_report+0xc4>
				kpd_block = true;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <kpd_block.5406>
     94e:	0a c0       	rjmp	.+20     	; 0x964 <keypad_report+0xc4>
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
					udi_hid_kbd_down(kpd_firstCode);
     950:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_firstCode.5405>
     954:	af d3       	rcall	.+1886   	; 0x10b4 <udi_hid_kbd_down>
					udi_hid_kbd_up(kpd_firstCode);
     956:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_firstCode.5405>
     95a:	70 d3       	rcall	.+1760   	; 0x103c <udi_hid_kbd_up>
				}
				kpd_firstKey = false;
     95c:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <kpd_firstKey.5404>
				kpd_block = false;
     960:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <kpd_block.5406>
			}
		}
	}

	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     964:	80 91 b4 21 	lds	r24, 0x21B4	; 0x8021b4 <kpd_testMode>
     968:	84 ff       	sbrs	r24, 4
     96a:	07 c0       	rjmp	.+14     	; 0x97a <keypad_report+0xda>
     96c:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <kpd_exitTestMode>
     970:	81 30       	cpi	r24, 0x01	; 1
		led_quiet_allOff();
     972:	19 f4       	brne	.+6      	; 0x97a <keypad_report+0xda>
     974:	74 d0       	rcall	.+232    	; 0xa5e <led_quiet_allOff>
		kpd_exitTestMode = 0;
     976:	10 92 b5 21 	sts	0x21B5, r1	; 0x8021b5 <kpd_exitTestMode>
	}
	kpd_prevState = kpd_currState;
     97a:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <kpd_currState>
     97e:	80 93 b9 21 	sts	0x21B9, r24	; 0x8021b9 <kpd_prevState>
     982:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	c0 cf       	rjmp	.-128    	; 0x908 <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     988:	88 e0       	ldi	r24, 0x08	; 8
     98a:	be cf       	rjmp	.-132    	; 0x908 <keypad_report+0x68>
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
				kpd_block = true;
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
     98c:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <kpd_block.5406>
     990:	81 11       	cpse	r24, r1
     992:	e4 cf       	rjmp	.-56     	; 0x95c <keypad_report+0xbc>
     994:	dd cf       	rjmp	.-70     	; 0x950 <keypad_report+0xb0>

00000996 <led_updateState>:

void led_off(uint8_t mask) {	// LED off
    LED_PORT.OUTSET = mask;		// drive high (off)

    led_updateState(mask, false);
    activityEnable();
     996:	e6 ed       	ldi	r30, 0xD6	; 214
     998:	f1 e2       	ldi	r31, 0x21	; 33
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	ac 01       	movw	r20, r24
     9a2:	02 2e       	mov	r0, r18
     9a4:	02 c0       	rjmp	.+4      	; 0x9aa <led_updateState+0x14>
     9a6:	55 95       	asr	r21
     9a8:	47 95       	ror	r20
     9aa:	0a 94       	dec	r0
     9ac:	e2 f7       	brpl	.-8      	; 0x9a6 <led_updateState+0x10>
     9ae:	40 fd       	sbrc	r20, 0
     9b0:	60 83       	st	Z, r22
     9b2:	2f 5f       	subi	r18, 0xFF	; 255
     9b4:	3f 4f       	sbci	r19, 0xFF	; 255
     9b6:	31 96       	adiw	r30, 0x01	; 1
     9b8:	28 30       	cpi	r18, 0x08	; 8
     9ba:	31 05       	cpc	r19, r1
     9bc:	89 f7       	brne	.-30     	; 0x9a0 <led_updateState+0xa>
     9be:	08 95       	ret

000009c0 <led_init>:
     9c0:	e0 e0       	ldi	r30, 0x00	; 0
     9c2:	f6 e0       	ldi	r31, 0x06	; 6
     9c4:	8f ef       	ldi	r24, 0xFF	; 255
     9c6:	81 83       	std	Z+1, r24	; 0x01
     9c8:	85 83       	std	Z+5, r24	; 0x05
     9ca:	e0 e2       	ldi	r30, 0x20	; 32
     9cc:	f6 e0       	ldi	r31, 0x06	; 6
     9ce:	80 e4       	ldi	r24, 0x40	; 64
     9d0:	81 83       	std	Z+1, r24	; 0x01
     9d2:	85 83       	std	Z+5, r24	; 0x05
     9d4:	08 95       	ret

000009d6 <led_allOff>:
     9d6:	8f ef       	ldi	r24, 0xFF	; 255
     9d8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	db df       	rcall	.-74     	; 0x996 <led_updateState>
     9e0:	91 c1       	rjmp	.+802    	; 0xd04 <activityEnable>
     9e2:	08 95       	ret

000009e4 <led_on>:
     9e4:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	d5 df       	rcall	.-86     	; 0x996 <led_updateState>
     9ec:	8b c1       	rjmp	.+790    	; 0xd04 <activityEnable>
     9ee:	08 95       	ret

000009f0 <led_toggle>:
}

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;
     9f0:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     9f4:	e6 ed       	ldi	r30, 0xD6	; 214
     9f6:	f1 e2       	ldi	r31, 0x21	; 33

    for (int i = 0; i < 8; i++) {
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
        if (mask & (1 << i)) {
     9fc:	68 2f       	mov	r22, r24
     9fe:	70 e0       	ldi	r23, 0x00	; 0
            ledMap[i] = !ledMap[i];
     a00:	81 e0       	ldi	r24, 0x01	; 1

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;

    for (int i = 0; i < 8; i++) {
        if (mask & (1 << i)) {
     a02:	ab 01       	movw	r20, r22
     a04:	02 2e       	mov	r0, r18
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <led_toggle+0x1c>
     a08:	55 95       	asr	r21
     a0a:	47 95       	ror	r20
     a0c:	0a 94       	dec	r0
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <led_toggle+0x18>
     a10:	40 ff       	sbrs	r20, 0
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <led_toggle+0x2a>
            ledMap[i] = !ledMap[i];
     a14:	90 81       	ld	r25, Z
     a16:	98 27       	eor	r25, r24
     a18:	90 83       	st	Z, r25
}

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;

    for (int i = 0; i < 8; i++) {
     a1a:	2f 5f       	subi	r18, 0xFF	; 255
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	31 96       	adiw	r30, 0x01	; 1
     a20:	28 30       	cpi	r18, 0x08	; 8
     a22:	31 05       	cpc	r19, r1
     a24:	71 f7       	brne	.-36     	; 0xa02 <led_toggle+0x12>
        if (mask & (1 << i)) {
            ledMap[i] = !ledMap[i];
        }
    }
    activityEnable();
     a26:	6e c1       	rjmp	.+732    	; 0xd04 <activityEnable>
     a28:	08 95       	ret

00000a2a <led_setState>:
}

void led_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
     a2a:	e0 e0       	ldi	r30, 0x00	; 0
     a2c:	f6 e0       	ldi	r31, 0x06	; 6
     a2e:	9f ef       	ldi	r25, 0xFF	; 255
     a30:	95 83       	std	Z+5, r25	; 0x05
    LED_PORT.OUTCLR = mask;
     a32:	86 83       	std	Z+6, r24	; 0x06
     a34:	e6 ed       	ldi	r30, 0xD6	; 214
     a36:	f1 e2       	ldi	r31, 0x21	; 33

    for (int i = 0; i < 8; i++) {
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
        ledMap[i] = (mask & (1 << i)) != 0;
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	ac 01       	movw	r20, r24
     a40:	02 2e       	mov	r0, r18
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <led_setState+0x1e>
     a44:	55 95       	asr	r21
     a46:	47 95       	ror	r20
     a48:	0a 94       	dec	r0
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <led_setState+0x1a>
     a4c:	41 70       	andi	r20, 0x01	; 1
     a4e:	41 93       	st	Z+, r20

void led_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
    LED_PORT.OUTCLR = mask;

    for (int i = 0; i < 8; i++) {
     a50:	2f 5f       	subi	r18, 0xFF	; 255
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	28 30       	cpi	r18, 0x08	; 8
     a56:	31 05       	cpc	r19, r1
     a58:	91 f7       	brne	.-28     	; 0xa3e <led_setState+0x14>
        ledMap[i] = (mask & (1 << i)) != 0;
    }
    activityEnable();
     a5a:	54 c1       	rjmp	.+680    	; 0xd04 <activityEnable>
     a5c:	08 95       	ret

00000a5e <led_quiet_allOff>:

    led_updateState(LED_MASK, true);
}

void led_quiet_allOff(void) {         // turns all LED's off
    LED_PORT.OUTSET = LED_MASK;
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>

    led_updateState(LED_MASK, false);
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	97 cf       	rjmp	.-210    	; 0x996 <led_updateState>
     a68:	08 95       	ret

00000a6a <led_getMap>:
            ledMap[i] = state;
        }
    }
}

uint16_t led_getMap(void) {
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	a6 ed       	ldi	r26, 0xD6	; 214
     a70:	b1 e2       	ldi	r27, 0x21	; 33
     a72:	66 ee       	ldi	r22, 0xE6	; 230
     a74:	71 e2       	ldi	r23, 0x21	; 33
     a76:	fd 01       	movw	r30, r26
    uint16_t map = 0;
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	50 e0       	ldi	r21, 0x00	; 0
    for (uint8_t i = 0; i < 16; i++) {
        if (ledMap[i]) {
            map |= (1 << i);
     a7c:	c1 e0       	ldi	r28, 0x01	; 1
     a7e:	d0 e0       	ldi	r29, 0x00	; 0
     a80:	9f 01       	movw	r18, r30
     a82:	2a 1b       	sub	r18, r26
     a84:	3b 0b       	sbc	r19, r27
}

uint16_t led_getMap(void) {
    uint16_t map = 0;
    for (uint8_t i = 0; i < 16; i++) {
        if (ledMap[i]) {
     a86:	91 91       	ld	r25, Z+
     a88:	99 23       	and	r25, r25
     a8a:	41 f0       	breq	.+16     	; 0xa9c <led_getMap+0x32>
            map |= (1 << i);
     a8c:	ce 01       	movw	r24, r28
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <led_getMap+0x2a>
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	2a 95       	dec	r18
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <led_getMap+0x26>
     a98:	48 2b       	or	r20, r24
     a9a:	59 2b       	or	r21, r25
    }
}

uint16_t led_getMap(void) {
    uint16_t map = 0;
    for (uint8_t i = 0; i < 16; i++) {
     a9c:	e6 17       	cp	r30, r22
     a9e:	f7 07       	cpc	r31, r23
     aa0:	79 f7       	brne	.-34     	; 0xa80 <led_getMap+0x16>
        if (ledMap[i]) {
            map |= (1 << i);
        }
    }
    return map;
}
     aa2:	ca 01       	movw	r24, r20
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <led_statusOn>:

/* ---------------------------------------------------------------------- */
/* ----------------------------- Status LED ----------------------------- */
/* ---------------------------------------------------------------------- */
void led_statusOn(void) { // status LED on
    STATUS_LED_PORT.OUTCLR = LEDS_PIN;
     aaa:	80 e4       	ldi	r24, 0x40	; 64
     aac:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>

    ledMap[8] = true;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	80 93 de 21 	sts	0x21DE, r24	; 0x8021de <ledMap+0x8>
     ab6:	08 95       	ret

00000ab8 <led_statusOff>:
}

void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
     ab8:	80 e4       	ldi	r24, 0x40	; 64
     aba:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>

    ledMap[8] = false;
     abe:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <ledMap+0x8>
     ac2:	08 95       	ret

00000ac4 <led_statusToggle>:
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>

    ledMap[8] = !ledMap[8];
     aca:	e6 ed       	ldi	r30, 0xD6	; 214
     acc:	f1 e2       	ldi	r31, 0x21	; 33
     ace:	90 85       	ldd	r25, Z+8	; 0x08
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	89 27       	eor	r24, r25
     ad4:	80 87       	std	Z+8, r24	; 0x08
     ad6:	08 95       	ret

00000ad8 <startupSequence>:

/* ---------------------------------------------------------------------- */
/* ------------------------- Silent LED Control ------------------------- */
/* ---------------------------------------------------------------------- */
static void led_quiet_allOn(void) {   // turns all LED's on
    LED_PORT.OUTCLR = LED_MASK;
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>

    led_updateState(LED_MASK, true);
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	5a df       	rcall	.-332    	; 0x996 <led_updateState>
/* ---------------------------------------------------------------------- */
/* --------------------------- startup & idle --------------------------- */
/* ---------------------------------------------------------------------- */
bool startupSequence(void) {
    led_quiet_allOn();
    led_statusOn();
     ae2:	e3 df       	rcall	.-58     	; 0xaaa <led_statusOn>
     ae4:	2f eb       	ldi	r18, 0xBF	; 191
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae6:	86 ec       	ldi	r24, 0xC6	; 198
     ae8:	9d e2       	ldi	r25, 0x2D	; 45
     aea:	21 50       	subi	r18, 0x01	; 1
     aec:	80 40       	sbci	r24, 0x00	; 0
     aee:	90 40       	sbci	r25, 0x00	; 0
     af0:	e1 f7       	brne	.-8      	; 0xaea <startupSequence+0x12>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <startupSequence+0x1c>
     af4:	00 00       	nop
    _delay_ms(15000);
    led_quiet_allOff();
     af6:	b3 df       	rcall	.-154    	; 0xa5e <led_quiet_allOff>
     af8:	df df       	rcall	.-66     	; 0xab8 <led_statusOff>
    led_statusOff();
     afa:	2f e1       	ldi	r18, 0x1F	; 31
     afc:	81 ea       	ldi	r24, 0xA1	; 161
     afe:	97 e0       	ldi	r25, 0x07	; 7
     b00:	21 50       	subi	r18, 0x01	; 1
     b02:	80 40       	sbci	r24, 0x00	; 0
     b04:	90 40       	sbci	r25, 0x00	; 0
     b06:	e1 f7       	brne	.-8      	; 0xb00 <startupSequence+0x28>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <startupSequence+0x32>
     b0a:	00 00       	nop
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	08 95       	ret

00000b10 <idle_start>:
    _delay_ms(2500);

    return 0;
}
     b10:	e6 ee       	ldi	r30, 0xE6	; 230
     b12:	f1 e2       	ldi	r31, 0x21	; 33

void idle_start(void) {
    idle.running   = true;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 83       	st	Z, r24
    idle.stage     = 0;
     b18:	11 82       	std	Z+1, r1	; 0x01
    idle.pass      = 0;
     b1a:	12 82       	std	Z+2, r1	; 0x02
    idle.step      = 0;
     b1c:	13 82       	std	Z+3, r1	; 0x03
    idle.timer     = 0;
     b1e:	14 82       	std	Z+4, r1	; 0x04
     b20:	15 82       	std	Z+5, r1	; 0x05
    idle.period    = 250;
     b22:	8a ef       	ldi	r24, 0xFA	; 250
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	86 83       	std	Z+6, r24	; 0x06
     b28:	97 83       	std	Z+7, r25	; 0x07
     b2a:	08 95       	ret

00000b2c <idle_stop>:
}

void idle_stop(void) {
    idle.running = false;
     b2c:	10 92 e6 21 	sts	0x21E6, r1	; 0x8021e6 <idle>
    led_quiet_allOff();
     b30:	96 cf       	rjmp	.-212    	; 0xa5e <led_quiet_allOff>
     b32:	08 95       	ret

00000b34 <idle_poll>:
}

void idle_poll(void) {
    if (!idle.running)
     b34:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <idle>
     b38:	88 23       	and	r24, r24
     b3a:	09 f4       	brne	.+2      	; 0xb3e <idle_poll+0xa>
     b3c:	5c c0       	rjmp	.+184    	; 0xbf6 <idle_poll+0xc2>
        return;
    if (activityCheck()) {
     b3e:	e6 d0       	rcall	.+460    	; 0xd0c <activityCheck>
     b40:	88 23       	and	r24, r24
     b42:	11 f0       	breq	.+4      	; 0xb48 <idle_poll+0x14>
        idle_stop();
     b44:	f3 cf       	rjmp	.-26     	; 0xb2c <idle_stop>
     b46:	08 95       	ret
        return;
     b48:	e6 ee       	ldi	r30, 0xE6	; 230
    }

    if (++idle.timer < idle.period)
     b4a:	f1 e2       	ldi	r31, 0x21	; 33
     b4c:	84 81       	ldd	r24, Z+4	; 0x04
     b4e:	95 81       	ldd	r25, Z+5	; 0x05
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	84 83       	std	Z+4, r24	; 0x04
     b54:	95 83       	std	Z+5, r25	; 0x05
     b56:	26 81       	ldd	r18, Z+6	; 0x06
     b58:	37 81       	ldd	r19, Z+7	; 0x07
     b5a:	82 17       	cp	r24, r18
     b5c:	93 07       	cpc	r25, r19
     b5e:	08 f4       	brcc	.+2      	; 0xb62 <idle_poll+0x2e>
     b60:	4a c0       	rjmp	.+148    	; 0xbf6 <idle_poll+0xc2>
     b62:	14 82       	std	Z+4, r1	; 0x04
        return;
    idle.timer = 0;
     b64:	15 82       	std	Z+5, r1	; 0x05
     b66:	83 81       	ldd	r24, Z+3	; 0x03

    if (idle.step >= 8) {
     b68:	88 30       	cpi	r24, 0x08	; 8
     b6a:	08 f1       	brcs	.+66     	; 0xbae <idle_poll+0x7a>
     b6c:	13 82       	std	Z+3, r1	; 0x03
        idle.step = 0;
     b6e:	81 81       	ldd	r24, Z+1	; 0x01

        if (idle.stage == 0) {
     b70:	81 11       	cpse	r24, r1
     b72:	1d c0       	rjmp	.+58     	; 0xbae <idle_poll+0x7a>
     b74:	82 81       	ldd	r24, Z+2	; 0x02
            idle.pass++;
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	82 83       	std	Z+2, r24	; 0x02
     b7a:	25 36       	cpi	r18, 0x65	; 101

            if (idle.period > 100) {
     b7c:	31 05       	cpc	r19, r1
     b7e:	38 f0       	brcs	.+14     	; 0xb8e <idle_poll+0x5a>
     b80:	2b 54       	subi	r18, 0x4B	; 75
                idle.period -= 75;
     b82:	31 09       	sbc	r19, r1
     b84:	20 93 ec 21 	sts	0x21EC, r18	; 0x8021ec <idle+0x6>
     b88:	30 93 ed 21 	sts	0x21ED, r19	; 0x8021ed <idle+0x7>
     b8c:	06 c0       	rjmp	.+12     	; 0xb9a <idle_poll+0x66>
     b8e:	22 e3       	ldi	r18, 0x32	; 50
            } else {
                idle.period = 50;
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	20 93 ec 21 	sts	0x21EC, r18	; 0x8021ec <idle+0x6>
     b96:	30 93 ed 21 	sts	0x21ED, r19	; 0x8021ed <idle+0x7>
     b9a:	84 30       	cpi	r24, 0x04	; 4
            }
            if (idle.pass >= 4) {
     b9c:	40 f0       	brcs	.+16     	; 0xbae <idle_poll+0x7a>
     b9e:	e6 ee       	ldi	r30, 0xE6	; 230
                idle.stage = 1;
     ba0:	f1 e2       	ldi	r31, 0x21	; 33
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	81 83       	std	Z+1, r24	; 0x01
     ba6:	82 e3       	ldi	r24, 0x32	; 50
                idle.period = 50;
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	86 83       	std	Z+6, r24	; 0x06
     bac:	97 83       	std	Z+7, r25	; 0x07
     bae:	60 91 e9 21 	lds	r22, 0x21E9	; 0x8021e9 <idle+0x3>
            }
        }
    }

    led_quiet_setState(1 << idle.step);
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	06 2e       	mov	r0, r22
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <idle_poll+0x8a>
     bba:	44 0f       	add	r20, r20
     bbc:	55 1f       	adc	r21, r21
     bbe:	0a 94       	dec	r0
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <idle_poll+0x86>
     bc2:	e0 e0       	ldi	r30, 0x00	; 0
//         }
//     }
// }

static void led_quiet_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
     bc4:	f6 e0       	ldi	r31, 0x06	; 6
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	85 83       	std	Z+5, r24	; 0x05
     bca:	46 83       	std	Z+6, r20	; 0x06
    LED_PORT.OUTCLR = mask;
     bcc:	e6 ed       	ldi	r30, 0xD6	; 214
     bce:	f1 e2       	ldi	r31, 0x21	; 33
     bd0:	80 e0       	ldi	r24, 0x00	; 0

    for (int i = 0; i < 8; i++) {
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	55 27       	eor	r21, r21
        ledMap[i] = (mask & (1 << i)) != 0;
     bd6:	9a 01       	movw	r18, r20
     bd8:	08 2e       	mov	r0, r24
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <idle_poll+0xac>
     bdc:	35 95       	asr	r19
     bde:	27 95       	ror	r18
     be0:	0a 94       	dec	r0
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <idle_poll+0xa8>
     be4:	21 70       	andi	r18, 0x01	; 1
     be6:	21 93       	st	Z+, r18
     be8:	01 96       	adiw	r24, 0x01	; 1

static void led_quiet_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
    LED_PORT.OUTCLR = mask;

    for (int i = 0; i < 8; i++) {
     bea:	88 30       	cpi	r24, 0x08	; 8
     bec:	91 05       	cpc	r25, r1
     bee:	99 f7       	brne	.-26     	; 0xbd6 <idle_poll+0xa2>
     bf0:	6f 5f       	subi	r22, 0xFF	; 255
            }
        }
    }

    led_quiet_setState(1 << idle.step);
    idle.step++;
     bf2:	60 93 e9 21 	sts	0x21E9, r22	; 0x8021e9 <idle+0x3>
     bf6:	08 95       	ret

00000bf8 <idleStatus>:
     bf8:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <idle>
}

bool idleStatus(void) {
    return idle.running;
}
     bfc:	08 95       	ret

00000bfe <io_ui_process>:
void activityEnable(void) {
	userActive = 1;
}

void activityReset(void) {
	userActive = 0;
     bfe:	d1 cb       	rjmp	.-2142   	; 0x3a2 <io_init>
     c00:	08 95       	ret

00000c02 <gui_ui_process>:
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <gui_ui_process+0xe>
     c10:	1f 92       	push	r1
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	29 df       	rcall	.-430    	; 0xa6a <led_getMap>
     c18:	e8 2e       	mov	r14, r24
     c1a:	19 2f       	mov	r17, r25
     c1c:	26 de       	rcall	.-948    	; 0x86a <kbd_getMap>
     c1e:	f8 2e       	mov	r15, r24
     c20:	09 2f       	mov	r16, r25
     c22:	e9 82       	std	Y+1, r14	; 0x01
     c24:	e9 df       	rcall	.-46     	; 0xbf8 <idleStatus>
     c26:	81 11       	cpse	r24, r1
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	18 2b       	or	r17, r24
     c2c:	1a 83       	std	Y+2, r17	; 0x02
     c2e:	fb 82       	std	Y+3, r15	; 0x03
     c30:	0c 83       	std	Y+4, r16	; 0x04
     c32:	ce 01       	movw	r24, r28
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	76 db       	rcall	.-2324   	; 0x324 <udi_hid_led_send_report_in>
     c38:	24 96       	adiw	r28, 0x04	; 4
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	08 95       	ret

00000c4c <kbd_ui_process>:
     c4c:	22 dd       	rcall	.-1468   	; 0x692 <keypad_poll>
     c4e:	28 ce       	rjmp	.-944    	; 0x8a0 <keypad_report>
     c50:	08 95       	ret

00000c52 <jstk_ui_process>:
     c52:	cf 93       	push	r28
     c54:	90 dc       	rcall	.-1760   	; 0x576 <jstk_readMask>
     c56:	c8 2f       	mov	r28, r24
     c58:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     c5c:	84 fd       	sbrc	r24, 4
     c5e:	09 c0       	rjmp	.+18     	; 0xc72 <jstk_ui_process+0x20>
     c60:	cc 23       	and	r28, r28
     c62:	79 f0       	breq	.+30     	; 0xc82 <jstk_ui_process+0x30>
     c64:	b8 de       	rcall	.-656    	; 0x9d6 <led_allOff>
     c66:	8c 2f       	mov	r24, r28
     c68:	bd de       	rcall	.-646    	; 0x9e4 <led_on>
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <jstk_exitTestMode>
     c70:	08 c0       	rjmp	.+16     	; 0xc82 <jstk_ui_process+0x30>
     c72:	a4 dc       	rcall	.-1720   	; 0x5bc <jstk_usbTask>
     c74:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <jstk_exitTestMode>
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	19 f4       	brne	.+6      	; 0xc82 <jstk_ui_process+0x30>
     c7c:	f0 de       	rcall	.-544    	; 0xa5e <led_quiet_allOff>
     c7e:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <jstk_exitTestMode>
     c82:	cf 91       	pop	r28
     c84:	08 95       	ret

00000c86 <led_ui_report>:
     c86:	fc 01       	movw	r30, r24
     c88:	80 81       	ld	r24, Z
     c8a:	80 38       	cpi	r24, 0x80	; 128
     c8c:	21 f4       	brne	.+8      	; 0xc96 <led_ui_report+0x10>
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	80 93 ef 21 	sts	0x21EF, r24	; 0x8021ef <userActive>
     c94:	08 95       	ret
     c96:	81 38       	cpi	r24, 0x81	; 129
     c98:	21 f4       	brne	.+8      	; 0xca2 <led_ui_report+0x1c>
     c9a:	10 92 ef 21 	sts	0x21EF, r1	; 0x8021ef <userActive>
     c9e:	38 cf       	rjmp	.-400    	; 0xb10 <idle_start>
     ca0:	08 95       	ret
     ca2:	c3 ce       	rjmp	.-634    	; 0xa2a <led_setState>
     ca4:	08 95       	ret

00000ca6 <status_ui_process>:
     ca6:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <sof_ms>
     caa:	90 91 f1 21 	lds	r25, 0x21F1	; 0x8021f1 <sof_ms+0x1>
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	80 93 f0 21 	sts	0x21F0, r24	; 0x8021f0 <sof_ms>
     cb4:	90 93 f1 21 	sts	0x21F1, r25	; 0x8021f1 <sof_ms+0x1>
     cb8:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     cbc:	84 fd       	sbrc	r24, 4
     cbe:	0d c0       	rjmp	.+26     	; 0xcda <status_ui_process+0x34>
     cc0:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <sof_ms>
     cc4:	90 91 f1 21 	lds	r25, 0x21F1	; 0x8021f1 <sof_ms+0x1>
     cc8:	84 3f       	cpi	r24, 0xF4	; 244
     cca:	91 40       	sbci	r25, 0x01	; 1
     ccc:	a0 f0       	brcs	.+40     	; 0xcf6 <status_ui_process+0x50>
     cce:	fa de       	rcall	.-524    	; 0xac4 <led_statusToggle>
     cd0:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <sof_ms>
     cd4:	10 92 f1 21 	sts	0x21F1, r1	; 0x8021f1 <sof_ms+0x1>
     cd8:	08 95       	ret
     cda:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <startupCheck>
     cde:	81 11       	cpse	r24, r1
     ce0:	06 c0       	rjmp	.+12     	; 0xcee <status_ui_process+0x48>
     ce2:	ea de       	rcall	.-556    	; 0xab8 <led_statusOff>
     ce4:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <sof_ms>
     ce8:	10 92 f1 21 	sts	0x21F1, r1	; 0x8021f1 <sof_ms+0x1>
     cec:	08 95       	ret
     cee:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <sof_ms>
     cf2:	10 92 f1 21 	sts	0x21F1, r1	; 0x8021f1 <sof_ms+0x1>
     cf6:	08 95       	ret

00000cf8 <startup_ui_process>:
     cf8:	ef de       	rcall	.-546    	; 0xad8 <startupSequence>
     cfa:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <startupCheck>
     cfe:	08 95       	ret

00000d00 <idle_ui_process>:
     d00:	19 cf       	rjmp	.-462    	; 0xb34 <idle_poll>
     d02:	08 95       	ret

00000d04 <activityEnable>:
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 ef 21 	sts	0x21EF, r24	; 0x8021ef <userActive>
     d0a:	08 95       	ret

00000d0c <activityCheck>:
}

bool activityCheck(void) {
	return userActive;
     d0c:	80 91 ef 21 	lds	r24, 0x21EF	; 0x8021ef <userActive>
     d10:	08 95       	ret

00000d12 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	27 97       	sbiw	r28, 0x07	; 7
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     d2a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     d2e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     d32:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     d36:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     d3a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     d3e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     d42:	65 e0       	ldi	r22, 0x05	; 5
     d44:	81 e4       	ldi	r24, 0x41	; 65
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	7a d6       	rcall	.+3316   	; 0x1a3e <ccp_write_io>
     d4a:	6c e1       	ldi	r22, 0x1C	; 28
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	6c d6       	rcall	.+3288   	; 0x1a2a <nvm_read_byte>
     d52:	8a 83       	std	Y+2, r24	; 0x02
     d54:	6d e1       	ldi	r22, 0x1D	; 29
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	67 d6       	rcall	.+3278   	; 0x1a2a <nvm_read_byte>
     d5c:	89 83       	std	Y+1, r24	; 0x01
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	01 96       	adiw	r24, 0x01	; 1
     d64:	21 f4       	brne	.+8      	; 0xd6e <sysclk_init+0x5c>
     d66:	80 e4       	ldi	r24, 0x40	; 64
     d68:	93 e2       	ldi	r25, 0x23	; 35
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	8b 83       	std	Y+3, r24	; 0x03
     d74:	9c 83       	std	Y+4, r25	; 0x04
     d76:	e0 e6       	ldi	r30, 0x60	; 96
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	82 83       	std	Z+2, r24	; 0x02
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	83 83       	std	Z+3, r24	; 0x03
     d80:	8f b7       	in	r24, 0x3f	; 63
     d82:	8e 83       	std	Y+6, r24	; 0x06
     d84:	f8 94       	cli
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	e0 e5       	ldi	r30, 0x50	; 80
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	82 60       	ori	r24, 0x02	; 2
     d90:	80 83       	st	Z, r24
     d92:	9f bf       	out	0x3f, r25	; 63
     d94:	81 81       	ldd	r24, Z+1	; 0x01
     d96:	81 ff       	sbrs	r24, 1
     d98:	fd cf       	rjmp	.-6      	; 0xd94 <sysclk_init+0x82>
     d9a:	8f b7       	in	r24, 0x3f	; 63
     d9c:	8f 83       	std	Y+7, r24	; 0x07
     d9e:	f8 94       	cli
     da0:	9f 81       	ldd	r25, Y+7	; 0x07
     da2:	00 e5       	ldi	r16, 0x50	; 80
     da4:	10 e0       	ldi	r17, 0x00	; 0
     da6:	d8 01       	movw	r26, r16
     da8:	16 96       	adiw	r26, 0x06	; 6
     daa:	8c 91       	ld	r24, X
     dac:	16 97       	sbiw	r26, 0x06	; 6
     dae:	89 7f       	andi	r24, 0xF9	; 249
     db0:	16 96       	adiw	r26, 0x06	; 6
     db2:	8c 93       	st	X, r24
     db4:	16 97       	sbiw	r26, 0x06	; 6
     db6:	e0 e6       	ldi	r30, 0x60	; 96
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 e8       	ldi	r24, 0x80	; 128
     dbc:	85 83       	std	Z+5, r24	; 0x05
     dbe:	8b eb       	ldi	r24, 0xBB	; 187
     dc0:	86 83       	std	Z+6, r24	; 0x06
     dc2:	16 96       	adiw	r26, 0x06	; 6
     dc4:	8c 91       	ld	r24, X
     dc6:	16 97       	sbiw	r26, 0x06	; 6
     dc8:	84 60       	ori	r24, 0x04	; 4
     dca:	16 96       	adiw	r26, 0x06	; 6
     dcc:	8c 93       	st	X, r24
     dce:	80 81       	ld	r24, Z
     dd0:	81 60       	ori	r24, 0x01	; 1
     dd2:	80 83       	st	Z, r24
     dd4:	9f bf       	out	0x3f, r25	; 63
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	80 e4       	ldi	r24, 0x40	; 64
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	30 d6       	rcall	.+3168   	; 0x1a3e <ccp_write_io>
     dde:	8f b7       	in	r24, 0x3f	; 63
     de0:	8d 83       	std	Y+5, r24	; 0x05
     de2:	f8 94       	cli
     de4:	9d 81       	ldd	r25, Y+5	; 0x05
     de6:	f8 01       	movw	r30, r16
     de8:	80 81       	ld	r24, Z
     dea:	8e 7f       	andi	r24, 0xFE	; 254
     dec:	80 83       	st	Z, r24
     dee:	9f bf       	out	0x3f, r25	; 63
     df0:	27 96       	adiw	r28, 0x07	; 7
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	08 95       	ret

00000e00 <sysclk_enable_module>:
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	1f 92       	push	r1
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	9f b7       	in	r25, 0x3f	; 63
     e0c:	99 83       	std	Y+1, r25	; 0x01
     e0e:	f8 94       	cli
     e10:	99 81       	ldd	r25, Y+1	; 0x01
     e12:	e8 2f       	mov	r30, r24
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	e0 59       	subi	r30, 0x90	; 144
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	60 95       	com	r22
     e1c:	80 81       	ld	r24, Z
     e1e:	68 23       	and	r22, r24
     e20:	60 83       	st	Z, r22
     e22:	9f bf       	out	0x3f, r25	; 63
     e24:	0f 90       	pop	r0
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	1f 92       	push	r1
     e32:	1f 92       	push	r1
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     e38:	86 30       	cpi	r24, 0x06	; 6
     e3a:	11 f0       	breq	.+4      	; 0xe40 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     e40:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e42:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     e46:	81 fd       	sbrc	r24, 1
     e48:	2a c0       	rjmp	.+84     	; 0xe9e <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e4a:	8f b7       	in	r24, 0x3f	; 63
     e4c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e4e:	f8 94       	cli
	return flags;
     e50:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     e52:	e0 e5       	ldi	r30, 0x50	; 80
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	82 60       	ori	r24, 0x02	; 2
     e5a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e5c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     e60:	81 ff       	sbrs	r24, 1
     e62:	fd cf       	rjmp	.-6      	; 0xe5e <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e64:	8f b7       	in	r24, 0x3f	; 63
     e66:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     e68:	f8 94       	cli
	return flags;
     e6a:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     e6c:	a0 e5       	ldi	r26, 0x50	; 80
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	16 96       	adiw	r26, 0x06	; 6
     e72:	8c 91       	ld	r24, X
     e74:	16 97       	sbiw	r26, 0x06	; 6
     e76:	89 7f       	andi	r24, 0xF9	; 249
     e78:	16 96       	adiw	r26, 0x06	; 6
     e7a:	8c 93       	st	X, r24
     e7c:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     e7e:	e0 e6       	ldi	r30, 0x60	; 96
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 e8       	ldi	r24, 0x80	; 128
     e84:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     e86:	8b eb       	ldi	r24, 0xBB	; 187
     e88:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     e8a:	16 96       	adiw	r26, 0x06	; 6
     e8c:	8c 91       	ld	r24, X
     e8e:	16 97       	sbiw	r26, 0x06	; 6
     e90:	84 60       	ori	r24, 0x04	; 4
     e92:	16 96       	adiw	r26, 0x06	; 6
     e94:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     e96:	80 81       	ld	r24, Z
     e98:	81 60       	ori	r24, 0x01	; 1
     e9a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e9c:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     e9e:	63 60       	ori	r22, 0x03	; 3
     ea0:	84 e4       	ldi	r24, 0x44	; 68
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	cc d5       	rcall	.+2968   	; 0x1a3e <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     ea6:	60 e4       	ldi	r22, 0x40	; 64
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	aa df       	rcall	.-172    	; 0xe00 <sysclk_enable_module>
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	08 95       	ret

00000eba <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     eba:	30 91 e8 23 	lds	r19, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
     ebe:	20 91 e9 23 	lds	r18, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
     ec2:	82 2f       	mov	r24, r18
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	03 97       	sbiw	r24, 0x03	; 3
     ec8:	b1 f4       	brne	.+44     	; 0xef6 <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     eca:	31 11       	cpse	r19, r1
     ecc:	16 c0       	rjmp	.+44     	; 0xefa <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
     ece:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
     ed2:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
     ed6:	89 2b       	or	r24, r25
     ed8:	91 f4       	brne	.+36     	; 0xefe <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     eda:	e6 ee       	ldi	r30, 0xE6	; 230
     edc:	f3 e2       	ldi	r31, 0x23	; 35
     ede:	82 ef       	ldi	r24, 0xF2	; 242
     ee0:	91 e2       	ldi	r25, 0x21	; 33
     ee2:	80 87       	std	Z+8, r24	; 0x08
     ee4:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     ee6:	81 e8       	ldi	r24, 0x81	; 129
     ee8:	97 e0       	ldi	r25, 0x07	; 7
     eea:	84 87       	std	Z+12, r24	; 0x0c
     eec:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
     eee:	12 86       	std	Z+10, r1	; 0x0a
     ef0:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	08 95       	ret
	}
	return false;
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	08 95       	ret
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	08 95       	ret
     efe:	80 e0       	ldi	r24, 0x00	; 0
}
     f00:	08 95       	ret

00000f02 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
     f02:	08 95       	ret

00000f04 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udi_hid_generic_b_report_in_free>
     f0a:	08 95       	ret

00000f0c <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     f0c:	10 92 f8 21 	sts	0x21F8, r1	; 0x8021f8 <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
     f10:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     f1a:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <main_generic_enable>
}
     f1e:	08 95       	ret

00000f20 <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     f20:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <main_generic_disable>
     f24:	08 95       	ret

00000f26 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     f26:	2d e5       	ldi	r18, 0x5D	; 93
     f28:	37 e0       	ldi	r19, 0x07	; 7
     f2a:	48 ea       	ldi	r20, 0xA8	; 168
     f2c:	50 e2       	ldi	r21, 0x20	; 32
     f2e:	66 ef       	ldi	r22, 0xF6	; 246
     f30:	71 e2       	ldi	r23, 0x21	; 33
     f32:	88 ef       	ldi	r24, 0xF8	; 248
     f34:	91 e2       	ldi	r25, 0x21	; 33
     f36:	f2 c0       	rjmp	.+484    	; 0x111c <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     f38:	08 95       	ret

00000f3a <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	1f 92       	push	r1
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
     f4c:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udi_hid_generic_b_report_in_free>
     f50:	88 23       	and	r24, r24
     f52:	09 f1       	breq	.+66     	; 0xf96 <udi_hid_generic_send_report_in+0x5c>
     f54:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f56:	8f b7       	in	r24, 0x3f	; 63
     f58:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f5a:	f8 94       	cli
	return flags;
     f5c:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     f5e:	10 92 f2 21 	sts	0x21F2, r1	; 0x8021f2 <udi_hid_generic_report_feature>
     f62:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     f66:	80 81       	ld	r24, Z
     f68:	91 81       	ldd	r25, Z+1	; 0x01
     f6a:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udi_hid_generic_report_feature>
     f6e:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     f72:	02 e8       	ldi	r16, 0x82	; 130
     f74:	17 e0       	ldi	r17, 0x07	; 7
     f76:	22 e0       	ldi	r18, 0x02	; 2
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	42 ef       	ldi	r20, 0xF2	; 242
     f7c:	51 e2       	ldi	r21, 0x21	; 33
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	82 e8       	ldi	r24, 0x82	; 130
     f82:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	89 27       	eor	r24, r25
     f8a:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f8e:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     f90:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udi_hid_generic_b_report_in_free>
     f94:	89 27       	eor	r24, r25

}
     f96:	0f 90       	pop	r0
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	ff 90       	pop	r15
     fa2:	08 95       	ret

00000fa4 <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	08 95       	ret

00000fa8 <udi_hid_kbd_setreport>:
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	08 95       	ret

00000fac <udi_hid_kbd_enable>:
     fac:	10 92 0e 22 	sts	0x220E, r1	; 0x80220e <udi_hid_kbd_rate>
     fb0:	10 92 0c 22 	sts	0x220C, r1	; 0x80220c <udi_hid_kbd_protocol>
     fb4:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <udi_hid_kbd_b_report_trans_ongoing>
     fb8:	88 e0       	ldi	r24, 0x08	; 8
     fba:	e3 e0       	ldi	r30, 0x03	; 3
     fbc:	f2 e2       	ldi	r31, 0x22	; 34
     fbe:	df 01       	movw	r26, r30
     fc0:	1d 92       	st	X+, r1
     fc2:	8a 95       	dec	r24
     fc4:	e9 f7       	brne	.-6      	; 0xfc0 <udi_hid_kbd_enable+0x14>
     fc6:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udi_hid_kbd_b_report_valid>
     fca:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <main_kbd_enable>
     fce:	08 95       	ret

00000fd0 <udi_hid_kbd_disable>:
     fd0:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <main_kbd_disable>
     fd4:	08 95       	ret

00000fd6 <udi_hid_kbd_setup>:
     fd6:	24 ed       	ldi	r18, 0xD4	; 212
     fd8:	37 e0       	ldi	r19, 0x07	; 7
     fda:	4a ec       	ldi	r20, 0xCA	; 202
     fdc:	50 e2       	ldi	r21, 0x20	; 32
     fde:	6c e0       	ldi	r22, 0x0C	; 12
     fe0:	72 e2       	ldi	r23, 0x22	; 34
     fe2:	8e e0       	ldi	r24, 0x0E	; 14
     fe4:	92 e2       	ldi	r25, 0x22	; 34
     fe6:	9a c0       	rjmp	.+308    	; 0x111c <udi_hid_setup>
     fe8:	08 95       	ret

00000fea <udi_hid_kbd_send_report>:
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <udi_hid_kbd_b_report_trans_ongoing>
     ff2:	81 11       	cpse	r24, r1
     ff4:	18 c0       	rjmp	.+48     	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
     ff6:	88 e0       	ldi	r24, 0x08	; 8
     ff8:	e3 e0       	ldi	r30, 0x03	; 3
     ffa:	f2 e2       	ldi	r31, 0x22	; 34
     ffc:	aa ef       	ldi	r26, 0xFA	; 250
     ffe:	b1 e2       	ldi	r27, 0x21	; 33
    1000:	01 90       	ld	r0, Z+
    1002:	0d 92       	st	X+, r0
    1004:	8a 95       	dec	r24
    1006:	e1 f7       	brne	.-8      	; 0x1000 <__EEPROM_REGION_LENGTH__>
    1008:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <udi_hid_kbd_b_report_valid>
    100c:	07 e1       	ldi	r16, 0x17	; 23
    100e:	18 e0       	ldi	r17, 0x08	; 8
    1010:	28 e0       	ldi	r18, 0x08	; 8
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	4a ef       	ldi	r20, 0xFA	; 250
    1016:	51 e2       	ldi	r21, 0x21	; 33
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	81 e8       	ldi	r24, 0x81	; 129
    101c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <udd_ep_run>
    1020:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <udi_hid_kbd_b_report_trans_ongoing>
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	08 95       	ret

0000102e <udi_hid_kbd_report_sent>:
    102e:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <udi_hid_kbd_b_report_trans_ongoing>
    1032:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <udi_hid_kbd_b_report_valid>
    1036:	81 11       	cpse	r24, r1
    1038:	d8 cf       	rjmp	.-80     	; 0xfea <udi_hid_kbd_send_report>
    103a:	08 95       	ret

0000103c <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	1f 92       	push	r1
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1048:	9f b7       	in	r25, 0x3f	; 63
    104a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    104c:	f8 94       	cli
	return flags;
    104e:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    1050:	90 91 05 22 	lds	r25, 0x2205	; 0x802205 <udi_hid_kbd_report+0x2>
    1054:	99 23       	and	r25, r25
    1056:	41 f0       	breq	.+16     	; 0x1068 <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    1058:	89 17       	cp	r24, r25
    105a:	a9 f0       	breq	.+42     	; 0x1086 <udi_hid_kbd_up+0x4a>
    105c:	e6 e0       	ldi	r30, 0x06	; 6
    105e:	f2 e2       	ldi	r31, 0x22	; 34
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1060:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    1062:	21 91       	ld	r18, Z+
    1064:	21 11       	cpse	r18, r1
    1066:	02 c0       	rjmp	.+4      	; 0x106c <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1068:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    106a:	1e c0       	rjmp	.+60     	; 0x10a8 <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    106c:	28 17       	cp	r18, r24
    106e:	21 f0       	breq	.+8      	; 0x1078 <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1070:	9f 5f       	subi	r25, 0xFF	; 255
    1072:	98 30       	cpi	r25, 0x08	; 8
    1074:	b1 f7       	brne	.-20     	; 0x1062 <udi_hid_kbd_up+0x26>
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    1078:	98 30       	cpi	r25, 0x08	; 8
    107a:	19 f0       	breq	.+6      	; 0x1082 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    107c:	97 30       	cpi	r25, 0x07	; 7
    107e:	20 f0       	brcs	.+8      	; 0x1088 <udi_hid_kbd_up+0x4c>
    1080:	0c c0       	rjmp	.+24     	; 0x109a <udi_hid_kbd_up+0x5e>
    1082:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    1084:	11 c0       	rjmp	.+34     	; 0x10a8 <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1086:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    1088:	e9 2f       	mov	r30, r25
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	ed 5f       	subi	r30, 0xFD	; 253
    108e:	fd 4d       	sbci	r31, 0xDD	; 221
    1090:	81 81       	ldd	r24, Z+1	; 0x01
    1092:	80 83       	st	Z, r24
		i++;
    1094:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    1096:	97 30       	cpi	r25, 0x07	; 7
    1098:	b9 f7       	brne	.-18     	; 0x1088 <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    109a:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    10a4:	a2 df       	rcall	.-188    	; 0xfea <udi_hid_kbd_send_report>
    10a6:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	0f 90       	pop	r0
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	08 95       	ret

000010b4 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	1f 92       	push	r1
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10c0:	9f b7       	in	r25, 0x3f	; 63
    10c2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    10c4:	f8 94       	cli
	return flags;
    10c6:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    10c8:	90 91 05 22 	lds	r25, 0x2205	; 0x802205 <udi_hid_kbd_report+0x2>
    10cc:	99 23       	and	r25, r25
    10ce:	b1 f0       	breq	.+44     	; 0x10fc <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    10d0:	89 17       	cp	r24, r25
    10d2:	41 f0       	breq	.+16     	; 0x10e4 <udi_hid_kbd_down+0x30>
    10d4:	a6 e0       	ldi	r26, 0x06	; 6
    10d6:	b2 e2       	ldi	r27, 0x22	; 34
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10d8:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    10da:	9d 91       	ld	r25, X+
    10dc:	99 23       	and	r25, r25
    10de:	49 f0       	breq	.+18     	; 0x10f2 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    10e0:	98 13       	cpse	r25, r24
    10e2:	03 c0       	rjmp	.+6      	; 0x10ea <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10e4:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10ea:	ef 5f       	subi	r30, 0xFF	; 255
    10ec:	e8 30       	cpi	r30, 0x08	; 8
    10ee:	a9 f7       	brne	.-22     	; 0x10da <udi_hid_kbd_down+0x26>
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    10f2:	e8 30       	cpi	r30, 0x08	; 8
    10f4:	21 f4       	brne	.+8      	; 0x10fe <udi_hid_kbd_down+0x4a>
    10f6:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	0b c0       	rjmp	.+22     	; 0x1112 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10fc:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	ed 5f       	subi	r30, 0xFD	; 253
    1102:	fd 4d       	sbci	r31, 0xDD	; 221
    1104:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    110c:	6e df       	rcall	.-292    	; 0xfea <udi_hid_kbd_send_report>
    110e:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    1110:	81 e0       	ldi	r24, 0x01	; 1
}
    1112:	0f 90       	pop	r0
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	08 95       	ret

0000111c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	dc 01       	movw	r26, r24
    1122:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    1124:	90 91 e6 23 	lds	r25, 0x23E6	; 0x8023e6 <udd_g_ctrlreq>
    1128:	99 23       	and	r25, r25
    112a:	0c f0       	brlt	.+2      	; 0x112e <udi_hid_setup+0x12>
    112c:	68 c0       	rjmp	.+208    	; 0x11fe <udi_hid_setup+0xe2>
    112e:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1130:	09 f0       	breq	.+2      	; 0x1134 <udi_hid_setup+0x18>
    1132:	45 c0       	rjmp	.+138    	; 0x11be <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1134:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    1138:	86 30       	cpi	r24, 0x06	; 6
    113a:	09 f0       	breq	.+2      	; 0x113e <udi_hid_setup+0x22>
    113c:	40 c0       	rjmp	.+128    	; 0x11be <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    113e:	76 d1       	rcall	.+748    	; 0x142c <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1140:	dc 01       	movw	r26, r24
    1142:	1a 96       	adiw	r26, 0x0a	; 10
    1144:	2c 91       	ld	r18, X
    1146:	1a 97       	sbiw	r26, 0x0a	; 10
    1148:	21 32       	cpi	r18, 0x21	; 33
    114a:	09 f0       	breq	.+2      	; 0x114e <udi_hid_setup+0x32>
    114c:	77 c0       	rjmp	.+238    	; 0x123c <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    114e:	20 91 e9 23 	lds	r18, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	21 32       	cpi	r18, 0x21	; 33
    1156:	31 05       	cpc	r19, r1
    1158:	b1 f4       	brne	.+44     	; 0x1186 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    115a:	9c 01       	movw	r18, r24
    115c:	27 5f       	subi	r18, 0xF7	; 247
    115e:	3f 4f       	sbci	r19, 0xFF	; 255
    1160:	20 93 ee 23 	sts	0x23EE, r18	; 0x8023ee <udd_g_ctrlreq+0x8>
    1164:	30 93 ef 23 	sts	0x23EF, r19	; 0x8023ef <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    1168:	e6 ee       	ldi	r30, 0xE6	; 230
    116a:	f3 e2       	ldi	r31, 0x23	; 35
    116c:	19 96       	adiw	r26, 0x09	; 9
    116e:	8c 91       	ld	r24, X
    1170:	26 81       	ldd	r18, Z+6	; 0x06
    1172:	37 81       	ldd	r19, Z+7	; 0x07
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	28 17       	cp	r18, r24
    1178:	39 07       	cpc	r19, r25
    117a:	08 f4       	brcc	.+2      	; 0x117e <udi_hid_setup+0x62>
    117c:	c9 01       	movw	r24, r18
    117e:	82 87       	std	Z+10, r24	; 0x0a
    1180:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	68 c0       	rjmp	.+208    	; 0x1256 <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1186:	fc 01       	movw	r30, r24
    1188:	47 85       	ldd	r20, Z+15	; 0x0f
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	42 17       	cp	r20, r18
    118e:	53 07       	cpc	r21, r19
    1190:	09 f0       	breq	.+2      	; 0x1194 <udi_hid_setup+0x78>
    1192:	56 c0       	rjmp	.+172    	; 0x1240 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    1194:	c0 93 ee 23 	sts	0x23EE, r28	; 0x8023ee <udd_g_ctrlreq+0x8>
    1198:	d0 93 ef 23 	sts	0x23EF, r29	; 0x8023ef <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    119c:	e6 ee       	ldi	r30, 0xE6	; 230
    119e:	f3 e2       	ldi	r31, 0x23	; 35
    11a0:	26 81       	ldd	r18, Z+6	; 0x06
    11a2:	37 81       	ldd	r19, Z+7	; 0x07
    11a4:	dc 01       	movw	r26, r24
    11a6:	50 96       	adiw	r26, 0x10	; 16
    11a8:	8d 91       	ld	r24, X+
    11aa:	9c 91       	ld	r25, X
    11ac:	51 97       	sbiw	r26, 0x11	; 17
    11ae:	28 17       	cp	r18, r24
    11b0:	39 07       	cpc	r19, r25
    11b2:	08 f4       	brcc	.+2      	; 0x11b6 <udi_hid_setup+0x9a>
    11b4:	c9 01       	movw	r24, r18
    11b6:	82 87       	std	Z+10, r24	; 0x0a
    11b8:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	4c c0       	rjmp	.+152    	; 0x1256 <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    11be:	90 32       	cpi	r25, 0x20	; 32
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <udi_hid_setup+0xa8>
    11c2:	40 c0       	rjmp	.+128    	; 0x1244 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    11c4:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	39 f0       	breq	.+14     	; 0x11da <udi_hid_setup+0xbe>
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	71 f0       	breq	.+28     	; 0x11ec <udi_hid_setup+0xd0>
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	d1 f5       	brne	.+116    	; 0x1248 <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    11d4:	f9 01       	movw	r30, r18
    11d6:	19 95       	eicall
    11d8:	3e c0       	rjmp	.+124    	; 0x1256 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    11da:	e6 ee       	ldi	r30, 0xE6	; 230
    11dc:	f3 e2       	ldi	r31, 0x23	; 35
    11de:	a0 87       	std	Z+8, r26	; 0x08
    11e0:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	82 87       	std	Z+10, r24	; 0x0a
    11e8:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    11ea:	35 c0       	rjmp	.+106    	; 0x1256 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    11ec:	e6 ee       	ldi	r30, 0xE6	; 230
    11ee:	f3 e2       	ldi	r31, 0x23	; 35
    11f0:	60 87       	std	Z+8, r22	; 0x08
    11f2:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	82 87       	std	Z+10, r24	; 0x0a
    11fa:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    11fc:	2c c0       	rjmp	.+88     	; 0x1256 <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    11fe:	90 76       	andi	r25, 0x60	; 96
    1200:	90 32       	cpi	r25, 0x20	; 32
    1202:	21 f5       	brne	.+72     	; 0x124c <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1204:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    1208:	8a 30       	cpi	r24, 0x0A	; 10
    120a:	39 f0       	breq	.+14     	; 0x121a <udi_hid_setup+0xfe>
    120c:	8b 30       	cpi	r24, 0x0B	; 11
    120e:	51 f0       	breq	.+20     	; 0x1224 <udi_hid_setup+0x108>
    1210:	89 30       	cpi	r24, 0x09	; 9
    1212:	f1 f4       	brne	.+60     	; 0x1250 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    1214:	f9 01       	movw	r30, r18
    1216:	19 95       	eicall
    1218:	1e c0       	rjmp	.+60     	; 0x1256 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    121a:	80 91 e9 23 	lds	r24, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    121e:	8c 93       	st	X, r24
				return true;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	19 c0       	rjmp	.+50     	; 0x1256 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    1224:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    1228:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    122c:	89 2b       	or	r24, r25
    122e:	91 f4       	brne	.+36     	; 0x1254 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    1230:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    1234:	db 01       	movw	r26, r22
    1236:	8c 93       	st	X, r24
				return true;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	0d c0       	rjmp	.+26     	; 0x1256 <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	0b c0       	rjmp	.+22     	; 0x1256 <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	09 c0       	rjmp	.+18     	; 0x1256 <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <udi_hid_setup+0x13a>
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	05 c0       	rjmp	.+10     	; 0x1256 <udi_hid_setup+0x13a>
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <udi_hid_setup+0x13a>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    1254:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	08 95       	ret

0000125c <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    125c:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <udc_ptr_conf>
    1260:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    1264:	01 90       	ld	r0, Z+
    1266:	f0 81       	ld	r31, Z
    1268:	e0 2d       	mov	r30, r0
    126a:	22 81       	ldd	r18, Z+2	; 0x02
    126c:	33 81       	ldd	r19, Z+3	; 0x03
    126e:	2e 0f       	add	r18, r30
    1270:	3f 1f       	adc	r19, r31
    1272:	fc 01       	movw	r30, r24
    1274:	40 81       	ld	r20, Z
    1276:	e4 0f       	add	r30, r20
    1278:	f1 1d       	adc	r31, r1
    127a:	e2 17       	cp	r30, r18
    127c:	f3 07       	cpc	r31, r19
    127e:	a0 f4       	brcc	.+40     	; 0x12a8 <udc_next_desc_in_iface+0x4c>
    1280:	81 81       	ldd	r24, Z+1	; 0x01
    1282:	84 30       	cpi	r24, 0x04	; 4
    1284:	a1 f0       	breq	.+40     	; 0x12ae <udc_next_desc_in_iface+0x52>
    1286:	86 13       	cpse	r24, r22
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <udc_next_desc_in_iface+0x3a>
    128a:	14 c0       	rjmp	.+40     	; 0x12b4 <udc_next_desc_in_iface+0x58>
    128c:	81 81       	ldd	r24, Z+1	; 0x01
    128e:	84 30       	cpi	r24, 0x04	; 4
    1290:	a1 f0       	breq	.+40     	; 0x12ba <udc_next_desc_in_iface+0x5e>
    1292:	86 17       	cp	r24, r22
    1294:	a9 f0       	breq	.+42     	; 0x12c0 <udc_next_desc_in_iface+0x64>
    1296:	80 81       	ld	r24, Z
    1298:	e8 0f       	add	r30, r24
    129a:	f1 1d       	adc	r31, r1
    129c:	e2 17       	cp	r30, r18
    129e:	f3 07       	cpc	r31, r19
    12a0:	a8 f3       	brcs	.-22     	; 0x128c <udc_next_desc_in_iface+0x30>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	08 95       	ret
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	08 95       	ret
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	08 95       	ret
    12b4:	8e 2f       	mov	r24, r30
    12b6:	9f 2f       	mov	r25, r31
    12b8:	08 95       	ret
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	08 95       	ret
    12c0:	8e 2f       	mov	r24, r30
    12c2:	9f 2f       	mov	r25, r31
    12c4:	08 95       	ret

000012c6 <udc_valid_address>:
    12c6:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    12ca:	8f 77       	andi	r24, 0x7F	; 127
    12cc:	95 c7       	rjmp	.+3882   	; 0x21f8 <udd_set_address>
    12ce:	08 95       	ret

000012d0 <udc_update_iface_desc>:
    12d0:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <udc_num_configuration>
    12d4:	99 23       	and	r25, r25
    12d6:	81 f1       	breq	.+96     	; 0x1338 <udc_update_iface_desc+0x68>
    12d8:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <udc_ptr_conf>
    12dc:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    12e0:	01 90       	ld	r0, Z+
    12e2:	f0 81       	ld	r31, Z
    12e4:	e0 2d       	mov	r30, r0
    12e6:	94 81       	ldd	r25, Z+4	; 0x04
    12e8:	89 17       	cp	r24, r25
    12ea:	40 f5       	brcc	.+80     	; 0x133c <udc_update_iface_desc+0x6c>
    12ec:	e0 93 12 22 	sts	0x2212, r30	; 0x802212 <udc_ptr_iface>
    12f0:	f0 93 13 22 	sts	0x2213, r31	; 0x802213 <udc_ptr_iface+0x1>
    12f4:	22 81       	ldd	r18, Z+2	; 0x02
    12f6:	33 81       	ldd	r19, Z+3	; 0x03
    12f8:	2e 0f       	add	r18, r30
    12fa:	3f 1f       	adc	r19, r31
    12fc:	e2 17       	cp	r30, r18
    12fe:	f3 07       	cpc	r31, r19
    1300:	f8 f4       	brcc	.+62     	; 0x1340 <udc_update_iface_desc+0x70>
    1302:	91 81       	ldd	r25, Z+1	; 0x01
    1304:	94 30       	cpi	r25, 0x04	; 4
    1306:	61 f4       	brne	.+24     	; 0x1320 <udc_update_iface_desc+0x50>
    1308:	92 81       	ldd	r25, Z+2	; 0x02
    130a:	89 13       	cpse	r24, r25
    130c:	09 c0       	rjmp	.+18     	; 0x1320 <udc_update_iface_desc+0x50>
    130e:	93 81       	ldd	r25, Z+3	; 0x03
    1310:	96 13       	cpse	r25, r22
    1312:	06 c0       	rjmp	.+12     	; 0x1320 <udc_update_iface_desc+0x50>
    1314:	e0 93 12 22 	sts	0x2212, r30	; 0x802212 <udc_ptr_iface>
    1318:	f0 93 13 22 	sts	0x2213, r31	; 0x802213 <udc_ptr_iface+0x1>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	08 95       	ret
    1320:	90 81       	ld	r25, Z
    1322:	e9 0f       	add	r30, r25
    1324:	f1 1d       	adc	r31, r1
    1326:	e2 17       	cp	r30, r18
    1328:	f3 07       	cpc	r31, r19
    132a:	58 f3       	brcs	.-42     	; 0x1302 <udc_update_iface_desc+0x32>
    132c:	e0 93 12 22 	sts	0x2212, r30	; 0x802212 <udc_ptr_iface>
    1330:	f0 93 13 22 	sts	0x2213, r31	; 0x802213 <udc_ptr_iface+0x1>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	08 95       	ret
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	08 95       	ret
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	08 95       	ret
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	08 95       	ret

00001344 <udc_iface_disable>:
    1344:	ef 92       	push	r14
    1346:	ff 92       	push	r15
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	c8 2f       	mov	r28, r24
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	be df       	rcall	.-132    	; 0x12d0 <udc_update_iface_desc>
    1354:	18 2f       	mov	r17, r24
    1356:	88 23       	and	r24, r24
    1358:	81 f1       	breq	.+96     	; 0x13ba <udc_iface_disable+0x76>
    135a:	a0 91 14 22 	lds	r26, 0x2214	; 0x802214 <udc_ptr_conf>
    135e:	b0 91 15 22 	lds	r27, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    1362:	ec 2f       	mov	r30, r28
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	ee 0f       	add	r30, r30
    1368:	ff 1f       	adc	r31, r31
    136a:	12 96       	adiw	r26, 0x02	; 2
    136c:	8d 91       	ld	r24, X+
    136e:	9c 91       	ld	r25, X
    1370:	13 97       	sbiw	r26, 0x03	; 3
    1372:	e8 0f       	add	r30, r24
    1374:	f9 1f       	adc	r31, r25
    1376:	e0 80       	ld	r14, Z
    1378:	f1 80       	ldd	r15, Z+1	; 0x01
    137a:	d7 01       	movw	r26, r14
    137c:	16 96       	adiw	r26, 0x06	; 6
    137e:	ed 91       	ld	r30, X+
    1380:	fc 91       	ld	r31, X
    1382:	17 97       	sbiw	r26, 0x07	; 7
    1384:	19 95       	eicall
    1386:	68 2f       	mov	r22, r24
    1388:	8c 2f       	mov	r24, r28
    138a:	a2 df       	rcall	.-188    	; 0x12d0 <udc_update_iface_desc>
    138c:	18 2f       	mov	r17, r24
    138e:	88 23       	and	r24, r24
    1390:	a1 f0       	breq	.+40     	; 0x13ba <udc_iface_disable+0x76>
    1392:	c0 91 12 22 	lds	r28, 0x2212	; 0x802212 <udc_ptr_iface>
    1396:	d0 91 13 22 	lds	r29, 0x2213	; 0x802213 <udc_ptr_iface+0x1>
    139a:	65 e0       	ldi	r22, 0x05	; 5
    139c:	ce 01       	movw	r24, r28
    139e:	5e df       	rcall	.-324    	; 0x125c <udc_next_desc_in_iface>
    13a0:	ec 01       	movw	r28, r24
    13a2:	89 2b       	or	r24, r25
    13a4:	21 f0       	breq	.+8      	; 0x13ae <udc_iface_disable+0x6a>
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <udd_ep_free>
    13ac:	f6 cf       	rjmp	.-20     	; 0x139a <udc_iface_disable+0x56>
    13ae:	d7 01       	movw	r26, r14
    13b0:	12 96       	adiw	r26, 0x02	; 2
    13b2:	ed 91       	ld	r30, X+
    13b4:	fc 91       	ld	r31, X
    13b6:	13 97       	sbiw	r26, 0x03	; 3
    13b8:	19 95       	eicall
    13ba:	81 2f       	mov	r24, r17
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	08 95       	ret

000013c8 <udc_iface_enable>:
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	18 2f       	mov	r17, r24
    13d0:	7f df       	rcall	.-258    	; 0x12d0 <udc_update_iface_desc>
    13d2:	88 23       	and	r24, r24
    13d4:	39 f1       	breq	.+78     	; 0x1424 <udc_iface_enable+0x5c>
    13d6:	c0 91 12 22 	lds	r28, 0x2212	; 0x802212 <udc_ptr_iface>
    13da:	d0 91 13 22 	lds	r29, 0x2213	; 0x802213 <udc_ptr_iface+0x1>
    13de:	65 e0       	ldi	r22, 0x05	; 5
    13e0:	ce 01       	movw	r24, r28
    13e2:	3c df       	rcall	.-392    	; 0x125c <udc_next_desc_in_iface>
    13e4:	ec 01       	movw	r28, r24
    13e6:	89 2b       	or	r24, r25
    13e8:	41 f0       	breq	.+16     	; 0x13fa <udc_iface_enable+0x32>
    13ea:	4c 81       	ldd	r20, Y+4	; 0x04
    13ec:	5d 81       	ldd	r21, Y+5	; 0x05
    13ee:	6b 81       	ldd	r22, Y+3	; 0x03
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	0f d7       	rcall	.+3614   	; 0x2212 <udd_ep_alloc>
    13f4:	81 11       	cpse	r24, r1
    13f6:	f3 cf       	rjmp	.-26     	; 0x13de <udc_iface_enable+0x16>
    13f8:	15 c0       	rjmp	.+42     	; 0x1424 <udc_iface_enable+0x5c>
    13fa:	a0 91 14 22 	lds	r26, 0x2214	; 0x802214 <udc_ptr_conf>
    13fe:	b0 91 15 22 	lds	r27, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    1402:	e1 2f       	mov	r30, r17
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	12 96       	adiw	r26, 0x02	; 2
    140c:	8d 91       	ld	r24, X+
    140e:	9c 91       	ld	r25, X
    1410:	13 97       	sbiw	r26, 0x03	; 3
    1412:	e8 0f       	add	r30, r24
    1414:	f9 1f       	adc	r31, r25
    1416:	01 90       	ld	r0, Z+
    1418:	f0 81       	ld	r31, Z
    141a:	e0 2d       	mov	r30, r0
    141c:	01 90       	ld	r0, Z+
    141e:	f0 81       	ld	r31, Z
    1420:	e0 2d       	mov	r30, r0
    1422:	19 95       	eicall
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	08 95       	ret

0000142c <udc_get_interface_desc>:
    142c:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <udc_ptr_iface>
    1430:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <udc_ptr_iface+0x1>
    1434:	08 95       	ret

00001436 <udc_start>:
    1436:	55 c6       	rjmp	.+3242   	; 0x20e2 <udd_enable>
    1438:	08 95       	ret

0000143a <udc_reset>:
    143a:	cf 93       	push	r28
    143c:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udc_num_configuration>
    1440:	88 23       	and	r24, r24
    1442:	c1 f0       	breq	.+48     	; 0x1474 <udc_reset+0x3a>
    1444:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <udc_ptr_conf>
    1448:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    144c:	01 90       	ld	r0, Z+
    144e:	f0 81       	ld	r31, Z
    1450:	e0 2d       	mov	r30, r0
    1452:	84 81       	ldd	r24, Z+4	; 0x04
    1454:	88 23       	and	r24, r24
    1456:	71 f0       	breq	.+28     	; 0x1474 <udc_reset+0x3a>
    1458:	c0 e0       	ldi	r28, 0x00	; 0
    145a:	8c 2f       	mov	r24, r28
    145c:	73 df       	rcall	.-282    	; 0x1344 <udc_iface_disable>
    145e:	cf 5f       	subi	r28, 0xFF	; 255
    1460:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <udc_ptr_conf>
    1464:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    1468:	01 90       	ld	r0, Z+
    146a:	f0 81       	ld	r31, Z
    146c:	e0 2d       	mov	r30, r0
    146e:	84 81       	ldd	r24, Z+4	; 0x04
    1470:	c8 17       	cp	r28, r24
    1472:	98 f3       	brcs	.-26     	; 0x145a <udc_reset+0x20>
    1474:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <udc_num_configuration>
    1478:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <udc_device_status>
    147c:	81 fd       	sbrc	r24, 1
    147e:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <main_remotewakeup_disable>
    1482:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <udc_device_status>
    1486:	10 92 1b 22 	sts	0x221B, r1	; 0x80221b <udc_device_status+0x1>
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    148e:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1490:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udc_num_configuration>
    1494:	88 23       	and	r24, r24
    1496:	49 f1       	breq	.+82     	; 0x14ea <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1498:	a0 91 14 22 	lds	r26, 0x2214	; 0x802214 <udc_ptr_conf>
    149c:	b0 91 15 22 	lds	r27, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    14a0:	ed 91       	ld	r30, X+
    14a2:	fc 91       	ld	r31, X
    14a4:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    14a6:	84 81       	ldd	r24, Z+4	; 0x04
    14a8:	88 23       	and	r24, r24
    14aa:	f9 f0       	breq	.+62     	; 0x14ea <udc_sof_notify+0x5c>
    14ac:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    14ae:	ec 2f       	mov	r30, r28
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	ee 0f       	add	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	12 96       	adiw	r26, 0x02	; 2
    14b8:	8d 91       	ld	r24, X+
    14ba:	9c 91       	ld	r25, X
    14bc:	13 97       	sbiw	r26, 0x03	; 3
    14be:	e8 0f       	add	r30, r24
    14c0:	f9 1f       	adc	r31, r25
    14c2:	01 90       	ld	r0, Z+
    14c4:	f0 81       	ld	r31, Z
    14c6:	e0 2d       	mov	r30, r0
    14c8:	00 84       	ldd	r0, Z+8	; 0x08
    14ca:	f1 85       	ldd	r31, Z+9	; 0x09
    14cc:	e0 2d       	mov	r30, r0
    14ce:	30 97       	sbiw	r30, 0x00	; 0
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    14d2:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    14d4:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14d6:	a0 91 14 22 	lds	r26, 0x2214	; 0x802214 <udc_ptr_conf>
    14da:	b0 91 15 22 	lds	r27, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    14de:	ed 91       	ld	r30, X+
    14e0:	fc 91       	ld	r31, X
    14e2:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    14e4:	84 81       	ldd	r24, Z+4	; 0x04
    14e6:	c8 17       	cp	r28, r24
    14e8:	10 f3       	brcs	.-60     	; 0x14ae <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    14ea:	cf 91       	pop	r28
    14ec:	08 95       	ret

000014ee <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    14f6:	e6 ee       	ldi	r30, 0xE6	; 230
    14f8:	f3 e2       	ldi	r31, 0x23	; 35
    14fa:	12 86       	std	Z+10, r1	; 0x0a
    14fc:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    14fe:	14 86       	std	Z+12, r1	; 0x0c
    1500:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1502:	16 86       	std	Z+14, r1	; 0x0e
    1504:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1506:	80 81       	ld	r24, Z
    1508:	88 23       	and	r24, r24
    150a:	0c f0       	brlt	.+2      	; 0x150e <udc_process_setup+0x20>
    150c:	7e c2       	rjmp	.+1276   	; 0x1a0a <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    150e:	20 91 ec 23 	lds	r18, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    1512:	30 91 ed 23 	lds	r19, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    1516:	21 15       	cp	r18, r1
    1518:	31 05       	cpc	r19, r1
    151a:	09 f0       	breq	.+2      	; 0x151e <udc_process_setup+0x30>
    151c:	7b c2       	rjmp	.+1270   	; 0x1a14 <udc_process_setup+0x526>
    151e:	6d c2       	rjmp	.+1242   	; 0x19fa <udc_process_setup+0x50c>
    1520:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1522:	09 f0       	breq	.+2      	; 0x1526 <udc_process_setup+0x38>
    1524:	a0 c0       	rjmp	.+320    	; 0x1666 <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1526:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    152a:	96 30       	cpi	r25, 0x06	; 6
    152c:	79 f0       	breq	.+30     	; 0x154c <udc_process_setup+0x5e>
    152e:	98 30       	cpi	r25, 0x08	; 8
    1530:	09 f4       	brne	.+2      	; 0x1534 <udc_process_setup+0x46>
    1532:	8f c0       	rjmp	.+286    	; 0x1652 <udc_process_setup+0x164>
    1534:	91 11       	cpse	r25, r1
    1536:	97 c0       	rjmp	.+302    	; 0x1666 <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	31 05       	cpc	r19, r1
    153c:	09 f0       	breq	.+2      	; 0x1540 <udc_process_setup+0x52>
    153e:	19 c2       	rjmp	.+1074   	; 0x1972 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1540:	62 e0       	ldi	r22, 0x02	; 2
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	8a e1       	ldi	r24, 0x1A	; 26
    1546:	92 e2       	ldi	r25, 0x22	; 34
    1548:	5d d6       	rcall	.+3258   	; 0x2204 <udd_set_setup_payload>
    154a:	69 c2       	rjmp	.+1234   	; 0x1a1e <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    154c:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    1550:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1554:	29 2f       	mov	r18, r25
    1556:	33 27       	eor	r19, r19
    1558:	22 30       	cpi	r18, 0x02	; 2
    155a:	31 05       	cpc	r19, r1
    155c:	a9 f0       	breq	.+42     	; 0x1588 <udc_process_setup+0x9a>
    155e:	20 f4       	brcc	.+8      	; 0x1568 <udc_process_setup+0x7a>
    1560:	21 30       	cpi	r18, 0x01	; 1
    1562:	31 05       	cpc	r19, r1
    1564:	41 f0       	breq	.+16     	; 0x1576 <udc_process_setup+0x88>
    1566:	c7 c1       	rjmp	.+910    	; 0x18f6 <udc_process_setup+0x408>
    1568:	23 30       	cpi	r18, 0x03	; 3
    156a:	31 05       	cpc	r19, r1
    156c:	d9 f1       	breq	.+118    	; 0x15e4 <udc_process_setup+0xf6>
    156e:	2f 30       	cpi	r18, 0x0F	; 15
    1570:	31 05       	cpc	r19, r1
    1572:	51 f1       	breq	.+84     	; 0x15c8 <udc_process_setup+0xda>
    1574:	c0 c1       	rjmp	.+896    	; 0x18f6 <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1576:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <udc_config>
    157a:	90 91 2a 20 	lds	r25, 0x202A	; 0x80202a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    157e:	dc 01       	movw	r26, r24
    1580:	6c 91       	ld	r22, X
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	3f d6       	rcall	.+3198   	; 0x2204 <udd_set_setup_payload>
    1586:	56 c0       	rjmp	.+172    	; 0x1634 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1588:	e0 91 29 20 	lds	r30, 0x2029	; 0x802029 <udc_config>
    158c:	f0 91 2a 20 	lds	r31, 0x202A	; 0x80202a <udc_config+0x1>
    1590:	21 89       	ldd	r18, Z+17	; 0x11
    1592:	82 17       	cp	r24, r18
    1594:	08 f0       	brcs	.+2      	; 0x1598 <udc_process_setup+0xaa>
    1596:	ed c1       	rjmp	.+986    	; 0x1972 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1598:	99 27       	eor	r25, r25
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	e0 91 2b 20 	lds	r30, 0x202B	; 0x80202b <udc_config+0x2>
    15a6:	f0 91 2c 20 	lds	r31, 0x202C	; 0x80202c <udc_config+0x3>
    15aa:	e8 0f       	add	r30, r24
    15ac:	f9 1f       	adc	r31, r25
    15ae:	80 81       	ld	r24, Z
    15b0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    15b2:	fc 01       	movw	r30, r24
    15b4:	62 81       	ldd	r22, Z+2	; 0x02
    15b6:	73 81       	ldd	r23, Z+3	; 0x03
    15b8:	25 d6       	rcall	.+3146   	; 0x2204 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    15ba:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0x8>
    15be:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udd_g_ctrlreq+0x9>
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	81 83       	std	Z+1, r24	; 0x01
    15c6:	36 c0       	rjmp	.+108    	; 0x1634 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    15c8:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <udc_config+0x4>
    15cc:	90 91 2e 20 	lds	r25, 0x202E	; 0x80202e <udc_config+0x5>
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <udc_process_setup+0xe8>
    15d4:	ce c1       	rjmp	.+924    	; 0x1972 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    15d6:	dc 01       	movw	r26, r24
    15d8:	12 96       	adiw	r26, 0x02	; 2
    15da:	6d 91       	ld	r22, X+
    15dc:	7c 91       	ld	r23, X
    15de:	13 97       	sbiw	r26, 0x03	; 3
    15e0:	11 d6       	rcall	.+3106   	; 0x2204 <udd_set_setup_payload>
    15e2:	28 c0       	rjmp	.+80     	; 0x1634 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    15e4:	99 27       	eor	r25, r25
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	91 05       	cpc	r25, r1
    15ea:	71 f0       	breq	.+28     	; 0x1608 <udc_process_setup+0x11a>
    15ec:	38 f0       	brcs	.+14     	; 0x15fc <udc_process_setup+0x10e>
    15ee:	02 97       	sbiw	r24, 0x02	; 2
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <udc_process_setup+0x106>
    15f2:	8a c1       	rjmp	.+788    	; 0x1908 <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    15f4:	e8 e4       	ldi	r30, 0x48	; 72
    15f6:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    15f8:	3b e1       	ldi	r19, 0x1B	; 27
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    15fc:	64 e0       	ldi	r22, 0x04	; 4
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	8e e6       	ldi	r24, 0x6E	; 110
    1602:	91 e2       	ldi	r25, 0x21	; 33
    1604:	ff d5       	rcall	.+3070   	; 0x2204 <udd_set_setup_payload>
    1606:	16 c0       	rjmp	.+44     	; 0x1634 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1608:	e4 e6       	ldi	r30, 0x64	; 100
    160a:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    160c:	39 e0       	ldi	r19, 0x09	; 9
    160e:	a2 e1       	ldi	r26, 0x12	; 18
    1610:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1612:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1614:	81 91       	ld	r24, Z+
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	8d 93       	st	X+, r24
    161a:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    161c:	2f 5f       	subi	r18, 0xFF	; 255
    161e:	23 17       	cp	r18, r19
    1620:	c8 f3       	brcs	.-14     	; 0x1614 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1622:	63 2f       	mov	r22, r19
    1624:	66 0f       	add	r22, r22
    1626:	6e 5f       	subi	r22, 0xFE	; 254
    1628:	60 93 10 21 	sts	0x2110, r22	; 0x802110 <udc_string_desc>
		udd_set_setup_payload(
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	80 e1       	ldi	r24, 0x10	; 16
    1630:	91 e2       	ldi	r25, 0x21	; 33
    1632:	e8 d5       	rcall	.+3024   	; 0x2204 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1634:	e6 ee       	ldi	r30, 0xE6	; 230
    1636:	f3 e2       	ldi	r31, 0x23	; 35
    1638:	86 81       	ldd	r24, Z+6	; 0x06
    163a:	97 81       	ldd	r25, Z+7	; 0x07
    163c:	22 85       	ldd	r18, Z+10	; 0x0a
    163e:	33 85       	ldd	r19, Z+11	; 0x0b
    1640:	82 17       	cp	r24, r18
    1642:	93 07       	cpc	r25, r19
    1644:	08 f0       	brcs	.+2      	; 0x1648 <udc_process_setup+0x15a>
    1646:	eb c1       	rjmp	.+982    	; 0x1a1e <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1648:	80 93 f0 23 	sts	0x23F0, r24	; 0x8023f0 <udd_g_ctrlreq+0xa>
    164c:	90 93 f1 23 	sts	0x23F1, r25	; 0x8023f1 <udd_g_ctrlreq+0xb>
    1650:	e6 c1       	rjmp	.+972    	; 0x1a1e <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1652:	21 30       	cpi	r18, 0x01	; 1
    1654:	31 05       	cpc	r19, r1
    1656:	09 f0       	breq	.+2      	; 0x165a <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1658:	8c c1       	rjmp	.+792    	; 0x1972 <udc_process_setup+0x484>
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	86 e1       	ldi	r24, 0x16	; 22
    1660:	92 e2       	ldi	r25, 0x22	; 34
    1662:	d0 d5       	rcall	.+2976   	; 0x2204 <udd_set_setup_payload>
    1664:	dc c1       	rjmp	.+952    	; 0x1a1e <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	e1 f5       	brne	.+120    	; 0x16e2 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    166a:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    166e:	9a 30       	cpi	r25, 0x0A	; 10
    1670:	c1 f5       	brne	.+112    	; 0x16e2 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1672:	21 30       	cpi	r18, 0x01	; 1
    1674:	31 05       	cpc	r19, r1
    1676:	09 f0       	breq	.+2      	; 0x167a <udc_process_setup+0x18c>
    1678:	4c c1       	rjmp	.+664    	; 0x1912 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    167a:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udc_num_configuration>
    167e:	88 23       	and	r24, r24
    1680:	09 f4       	brne	.+2      	; 0x1684 <udc_process_setup+0x196>
    1682:	47 c1       	rjmp	.+654    	; 0x1912 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1684:	c0 91 ea 23 	lds	r28, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x4>
    1688:	d0 91 eb 23 	lds	r29, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    168c:	00 91 14 22 	lds	r16, 0x2214	; 0x802214 <udc_ptr_conf>
    1690:	10 91 15 22 	lds	r17, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    1694:	d8 01       	movw	r26, r16
    1696:	ed 91       	ld	r30, X+
    1698:	fc 91       	ld	r31, X
    169a:	84 81       	ldd	r24, Z+4	; 0x04
    169c:	c8 17       	cp	r28, r24
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    16a0:	38 c1       	rjmp	.+624    	; 0x1912 <udc_process_setup+0x424>
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	8c 2f       	mov	r24, r28
    16a6:	14 de       	rcall	.-984    	; 0x12d0 <udc_update_iface_desc>
    16a8:	88 23       	and	r24, r24
    16aa:	09 f4       	brne	.+2      	; 0x16ae <udc_process_setup+0x1c0>
    16ac:	2d c1       	rjmp	.+602    	; 0x1908 <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    16ae:	ce 01       	movw	r24, r28
    16b0:	99 27       	eor	r25, r25
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	d8 01       	movw	r26, r16
    16b8:	12 96       	adiw	r26, 0x02	; 2
    16ba:	ed 91       	ld	r30, X+
    16bc:	fc 91       	ld	r31, X
    16be:	13 97       	sbiw	r26, 0x03	; 3
    16c0:	e8 0f       	add	r30, r24
    16c2:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    16c4:	01 90       	ld	r0, Z+
    16c6:	f0 81       	ld	r31, Z
    16c8:	e0 2d       	mov	r30, r0
    16ca:	86 81       	ldd	r24, Z+6	; 0x06
    16cc:	97 81       	ldd	r25, Z+7	; 0x07
    16ce:	fc 01       	movw	r30, r24
    16d0:	19 95       	eicall
    16d2:	80 93 18 22 	sts	0x2218, r24	; 0x802218 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	88 e1       	ldi	r24, 0x18	; 24
    16dc:	92 e2       	ldi	r25, 0x22	; 34
    16de:	92 d5       	rcall	.+2852   	; 0x2204 <udd_set_setup_payload>
    16e0:	9e c1       	rjmp	.+828    	; 0x1a1e <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    16e2:	82 30       	cpi	r24, 0x02	; 2
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <udc_process_setup+0x1fa>
    16e6:	10 c1       	rjmp	.+544    	; 0x1908 <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    16e8:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    16ec:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    16ee:	05 c1       	rjmp	.+522    	; 0x18fa <udc_process_setup+0x40c>
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    16f6:	3d c1       	rjmp	.+634    	; 0x1972 <udc_process_setup+0x484>
    16f8:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x4>
    16fc:	12 d6       	rcall	.+3108   	; 0x2322 <udd_ep_is_halted>
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <udc_ep_status.4585>
    1704:	90 93 11 22 	sts	0x2211, r25	; 0x802211 <udc_ep_status.4585+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1708:	62 e0       	ldi	r22, 0x02	; 2
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	80 e1       	ldi	r24, 0x10	; 16
    170e:	92 e2       	ldi	r25, 0x22	; 34
    1710:	79 d5       	rcall	.+2802   	; 0x2204 <udd_set_setup_payload>
    1712:	85 c1       	rjmp	.+778    	; 0x1a1e <udc_process_setup+0x530>
    1714:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1716:	09 f0       	breq	.+2      	; 0x171a <udc_process_setup+0x22c>
    1718:	9f c0       	rjmp	.+318    	; 0x1858 <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    171a:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    171e:	93 30       	cpi	r25, 0x03	; 3
    1720:	91 f1       	breq	.+100    	; 0x1786 <udc_process_setup+0x298>
    1722:	18 f4       	brcc	.+6      	; 0x172a <udc_process_setup+0x23c>
    1724:	91 30       	cpi	r25, 0x01	; 1
    1726:	a9 f0       	breq	.+42     	; 0x1752 <udc_process_setup+0x264>
    1728:	97 c0       	rjmp	.+302    	; 0x1858 <udc_process_setup+0x36a>
    172a:	95 30       	cpi	r25, 0x05	; 5
    172c:	21 f0       	breq	.+8      	; 0x1736 <udc_process_setup+0x248>
    172e:	99 30       	cpi	r25, 0x09	; 9
    1730:	09 f4       	brne	.+2      	; 0x1734 <udc_process_setup+0x246>
    1732:	43 c0       	rjmp	.+134    	; 0x17ba <udc_process_setup+0x2cc>
    1734:	91 c0       	rjmp	.+290    	; 0x1858 <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1736:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    173a:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    173e:	89 2b       	or	r24, r25
    1740:	09 f0       	breq	.+2      	; 0x1744 <udc_process_setup+0x256>
    1742:	17 c1       	rjmp	.+558    	; 0x1972 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1744:	83 e6       	ldi	r24, 0x63	; 99
    1746:	99 e0       	ldi	r25, 0x09	; 9
    1748:	80 93 f2 23 	sts	0x23F2, r24	; 0x8023f2 <udd_g_ctrlreq+0xc>
    174c:	90 93 f3 23 	sts	0x23F3, r25	; 0x8023f3 <udd_g_ctrlreq+0xd>
    1750:	66 c1       	rjmp	.+716    	; 0x1a1e <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1752:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    1756:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    175a:	89 2b       	or	r24, r25
    175c:	09 f0       	breq	.+2      	; 0x1760 <udc_process_setup+0x272>
    175e:	09 c1       	rjmp	.+530    	; 0x1972 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1760:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    1764:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	09 f0       	breq	.+2      	; 0x176e <udc_process_setup+0x280>
    176c:	02 c1       	rjmp	.+516    	; 0x1972 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    176e:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <udc_device_status>
    1772:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <udc_device_status+0x1>
    1776:	8d 7f       	andi	r24, 0xFD	; 253
    1778:	80 93 1a 22 	sts	0x221A, r24	; 0x80221a <udc_device_status>
    177c:	90 93 1b 22 	sts	0x221B, r25	; 0x80221b <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1780:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <main_remotewakeup_disable>
    1784:	4c c1       	rjmp	.+664    	; 0x1a1e <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1786:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    178a:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    178e:	89 2b       	or	r24, r25
    1790:	09 f0       	breq	.+2      	; 0x1794 <udc_process_setup+0x2a6>
    1792:	ef c0       	rjmp	.+478    	; 0x1972 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1794:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    1798:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	09 f0       	breq	.+2      	; 0x17a2 <udc_process_setup+0x2b4>
    17a0:	ae c0       	rjmp	.+348    	; 0x18fe <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    17a2:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <udc_device_status>
    17a6:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <udc_device_status+0x1>
    17aa:	82 60       	ori	r24, 0x02	; 2
    17ac:	80 93 1a 22 	sts	0x221A, r24	; 0x80221a <udc_device_status>
    17b0:	90 93 1b 22 	sts	0x221B, r25	; 0x80221b <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    17b4:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    17b8:	32 c1       	rjmp	.+612    	; 0x1a1e <udc_process_setup+0x530>
    17ba:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    17be:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    17c2:	89 2b       	or	r24, r25
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    17c6:	d5 c0       	rjmp	.+426    	; 0x1972 <udc_process_setup+0x484>
    17c8:	1a d5       	rcall	.+2612   	; 0x21fe <udd_getaddress>
    17ca:	88 23       	and	r24, r24
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <udc_process_setup+0x2e2>
    17ce:	9c c0       	rjmp	.+312    	; 0x1908 <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17d0:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    17d4:	30 91 e9 23 	lds	r19, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    17d8:	33 27       	eor	r19, r19
    17da:	e0 91 29 20 	lds	r30, 0x2029	; 0x802029 <udc_config>
    17de:	f0 91 2a 20 	lds	r31, 0x202A	; 0x80202a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17e2:	81 89       	ldd	r24, Z+17	; 0x11
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	82 17       	cp	r24, r18
    17e8:	93 07       	cpc	r25, r19
    17ea:	08 f4       	brcc	.+2      	; 0x17ee <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    17ec:	8d c0       	rjmp	.+282    	; 0x1908 <udc_process_setup+0x41a>
    17ee:	25 de       	rcall	.-950    	; 0x143a <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    17f0:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    17f4:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    17f8:	80 93 16 22 	sts	0x2216, r24	; 0x802216 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    17fc:	88 23       	and	r24, r24
    17fe:	09 f4       	brne	.+2      	; 0x1802 <udc_process_setup+0x314>
    1800:	0e c1       	rjmp	.+540    	; 0x1a1e <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1802:	99 27       	eor	r25, r25
    1804:	81 50       	subi	r24, 0x01	; 1
    1806:	90 4c       	sbci	r25, 0xC0	; 192
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	e0 91 2b 20 	lds	r30, 0x202B	; 0x80202b <udc_config+0x2>
    1814:	f0 91 2c 20 	lds	r31, 0x202C	; 0x80202c <udc_config+0x3>
    1818:	e8 0f       	add	r30, r24
    181a:	f9 1f       	adc	r31, r25
    181c:	e0 93 14 22 	sts	0x2214, r30	; 0x802214 <udc_ptr_conf>
    1820:	f0 93 15 22 	sts	0x2215, r31	; 0x802215 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1824:	01 90       	ld	r0, Z+
    1826:	f0 81       	ld	r31, Z
    1828:	e0 2d       	mov	r30, r0
    182a:	84 81       	ldd	r24, Z+4	; 0x04
    182c:	88 23       	and	r24, r24
    182e:	09 f4       	brne	.+2      	; 0x1832 <udc_process_setup+0x344>
    1830:	f6 c0       	rjmp	.+492    	; 0x1a1e <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1832:	c0 e0       	ldi	r28, 0x00	; 0
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	8c 2f       	mov	r24, r28
    1838:	c7 dd       	rcall	.-1138   	; 0x13c8 <udc_iface_enable>
    183a:	88 23       	and	r24, r24
    183c:	09 f4       	brne	.+2      	; 0x1840 <udc_process_setup+0x352>
    183e:	64 c0       	rjmp	.+200    	; 0x1908 <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1840:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1842:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <udc_ptr_conf>
    1846:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    184a:	01 90       	ld	r0, Z+
    184c:	f0 81       	ld	r31, Z
    184e:	e0 2d       	mov	r30, r0
    1850:	84 81       	ldd	r24, Z+4	; 0x04
    1852:	c8 17       	cp	r28, r24
    1854:	78 f3       	brcs	.-34     	; 0x1834 <udc_process_setup+0x346>
    1856:	e3 c0       	rjmp	.+454    	; 0x1a1e <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	e9 f4       	brne	.+58     	; 0x1896 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    185c:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    1860:	9b 30       	cpi	r25, 0x0B	; 11
    1862:	c9 f4       	brne	.+50     	; 0x1896 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1864:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    1868:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    186c:	89 2b       	or	r24, r25
    186e:	09 f0       	breq	.+2      	; 0x1872 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1870:	50 c0       	rjmp	.+160    	; 0x1912 <udc_process_setup+0x424>
    1872:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udc_num_configuration>
    1876:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1878:	09 f4       	brne	.+2      	; 0x187c <udc_process_setup+0x38e>
    187a:	4b c0       	rjmp	.+150    	; 0x1912 <udc_process_setup+0x424>
    187c:	e6 ee       	ldi	r30, 0xE6	; 230
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    187e:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1880:	c4 81       	ldd	r28, Z+4	; 0x04
    1882:	d2 81       	ldd	r29, Z+2	; 0x02
    1884:	8c 2f       	mov	r24, r28
    1886:	5e dd       	rcall	.-1348   	; 0x1344 <udc_iface_disable>
    1888:	88 23       	and	r24, r24
    188a:	09 f4       	brne	.+2      	; 0x188e <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    188c:	3d c0       	rjmp	.+122    	; 0x1908 <udc_process_setup+0x41a>
    188e:	6d 2f       	mov	r22, r29
    1890:	8c 2f       	mov	r24, r28
    1892:	9a dd       	rcall	.-1228   	; 0x13c8 <udc_iface_enable>
    1894:	37 c0       	rjmp	.+110    	; 0x1904 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1896:	82 30       	cpi	r24, 0x02	; 2
    1898:	b9 f5       	brne	.+110    	; 0x1908 <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    189a:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <udd_g_ctrlreq+0x1>
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	19 f0       	breq	.+6      	; 0x18a8 <udc_process_setup+0x3ba>
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	99 f0       	breq	.+38     	; 0x18cc <udc_process_setup+0x3de>
    18a6:	2d c0       	rjmp	.+90     	; 0x1902 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18a8:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    18ac:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    18b0:	89 2b       	or	r24, r25
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18b4:	5e c0       	rjmp	.+188    	; 0x1972 <udc_process_setup+0x484>
    18b6:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    18ba:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    18be:	89 2b       	or	r24, r25
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18c2:	57 c0       	rjmp	.+174    	; 0x1972 <udc_process_setup+0x484>
    18c4:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x4>
    18c8:	47 d5       	rcall	.+2702   	; 0x2358 <udd_ep_clear_halt>
    18ca:	1c c0       	rjmp	.+56     	; 0x1904 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18cc:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    18d0:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    18d4:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18d6:	09 f0       	breq	.+2      	; 0x18da <udc_process_setup+0x3ec>
    18d8:	4c c0       	rjmp	.+152    	; 0x1972 <udc_process_setup+0x484>
    18da:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udd_g_ctrlreq+0x2>
    18de:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <udd_g_ctrlreq+0x3>
    18e2:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <udc_process_setup+0x3fa>
    18e6:	45 c0       	rjmp	.+138    	; 0x1972 <udc_process_setup+0x484>
    18e8:	c6 ee       	ldi	r28, 0xE6	; 230
    18ea:	d3 e2       	ldi	r29, 0x23	; 35
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18ee:	35 d6       	rcall	.+3178   	; 0x255a <udd_ep_abort>
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9e d6       	rcall	.+3388   	; 0x2630 <udd_ep_set_halt>
    18f4:	07 c0       	rjmp	.+14     	; 0x1904 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	05 c0       	rjmp	.+10     	; 0x1904 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	03 c0       	rjmp	.+6      	; 0x1904 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1902:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1904:	81 11       	cpse	r24, r1
    1906:	8c c0       	rjmp	.+280    	; 0x1a20 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1908:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <udd_g_ctrlreq>
    190c:	8f 71       	andi	r24, 0x1F	; 31
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	81 f5       	brne	.+96     	; 0x1972 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1912:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udc_num_configuration>
    1916:	88 23       	and	r24, r24
    1918:	09 f4       	brne	.+2      	; 0x191c <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    191a:	71 c0       	rjmp	.+226    	; 0x19fe <udc_process_setup+0x510>
    191c:	00 91 ea 23 	lds	r16, 0x23EA	; 0x8023ea <udd_g_ctrlreq+0x4>
    1920:	10 91 eb 23 	lds	r17, 0x23EB	; 0x8023eb <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1924:	c0 91 14 22 	lds	r28, 0x2214	; 0x802214 <udc_ptr_conf>
    1928:	d0 91 15 22 	lds	r29, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    192c:	e8 81       	ld	r30, Y
    192e:	f9 81       	ldd	r31, Y+1	; 0x01
    1930:	84 81       	ldd	r24, Z+4	; 0x04
    1932:	08 17       	cp	r16, r24
    1934:	08 f0       	brcs	.+2      	; 0x1938 <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1936:	65 c0       	rjmp	.+202    	; 0x1a02 <udc_process_setup+0x514>
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	80 2f       	mov	r24, r16
    193c:	c9 dc       	rcall	.-1646   	; 0x12d0 <udc_update_iface_desc>
    193e:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1940:	c1 f0       	breq	.+48     	; 0x1972 <udc_process_setup+0x484>
    1942:	f8 01       	movw	r30, r16
    1944:	ff 27       	eor	r31, r31
    1946:	cf 01       	movw	r24, r30
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	ea 81       	ldd	r30, Y+2	; 0x02
    194e:	fb 81       	ldd	r31, Y+3	; 0x03
    1950:	e8 0f       	add	r30, r24
    1952:	f9 1f       	adc	r31, r25
    1954:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1956:	d1 81       	ldd	r29, Z+1	; 0x01
    1958:	ee 81       	ldd	r30, Y+6	; 0x06
    195a:	ff 81       	ldd	r31, Y+7	; 0x07
    195c:	19 95       	eicall
    195e:	68 2f       	mov	r22, r24
    1960:	80 2f       	mov	r24, r16
    1962:	b6 dc       	rcall	.-1684   	; 0x12d0 <udc_update_iface_desc>
    1964:	88 23       	and	r24, r24
    1966:	29 f0       	breq	.+10     	; 0x1972 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1968:	ec 81       	ldd	r30, Y+4	; 0x04
    196a:	fd 81       	ldd	r31, Y+5	; 0x05
    196c:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    196e:	81 11       	cpse	r24, r1
    1970:	57 c0       	rjmp	.+174    	; 0x1a20 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1972:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <udd_g_ctrlreq>
    1976:	8f 71       	andi	r24, 0x1F	; 31
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	09 f0       	breq	.+2      	; 0x197e <udc_process_setup+0x490>
    197c:	44 c0       	rjmp	.+136    	; 0x1a06 <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    197e:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udc_num_configuration>
    1982:	88 23       	and	r24, r24
    1984:	b1 f1       	breq	.+108    	; 0x19f2 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1986:	a0 91 14 22 	lds	r26, 0x2214	; 0x802214 <udc_ptr_conf>
    198a:	b0 91 15 22 	lds	r27, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    198e:	ed 91       	ld	r30, X+
    1990:	fc 91       	ld	r31, X
    1992:	11 97       	sbiw	r26, 0x01	; 1
    1994:	84 81       	ldd	r24, Z+4	; 0x04
    1996:	88 23       	and	r24, r24
    1998:	71 f1       	breq	.+92     	; 0x19f6 <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    199a:	c0 e0       	ldi	r28, 0x00	; 0
    199c:	ec 2f       	mov	r30, r28
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	ee 0f       	add	r30, r30
    19a2:	ff 1f       	adc	r31, r31
    19a4:	12 96       	adiw	r26, 0x02	; 2
    19a6:	8d 91       	ld	r24, X+
    19a8:	9c 91       	ld	r25, X
    19aa:	13 97       	sbiw	r26, 0x03	; 3
    19ac:	e8 0f       	add	r30, r24
    19ae:	f9 1f       	adc	r31, r25
    19b0:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    19b2:	11 81       	ldd	r17, Z+1	; 0x01
    19b4:	d8 01       	movw	r26, r16
    19b6:	16 96       	adiw	r26, 0x06	; 6
    19b8:	ed 91       	ld	r30, X+
    19ba:	fc 91       	ld	r31, X
    19bc:	17 97       	sbiw	r26, 0x07	; 7
    19be:	19 95       	eicall
    19c0:	68 2f       	mov	r22, r24
    19c2:	8c 2f       	mov	r24, r28
    19c4:	85 dc       	rcall	.-1782   	; 0x12d0 <udc_update_iface_desc>
    19c6:	88 23       	and	r24, r24
    19c8:	59 f1       	breq	.+86     	; 0x1a20 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    19ca:	d8 01       	movw	r26, r16
    19cc:	14 96       	adiw	r26, 0x04	; 4
    19ce:	ed 91       	ld	r30, X+
    19d0:	fc 91       	ld	r31, X
    19d2:	15 97       	sbiw	r26, 0x05	; 5
    19d4:	19 95       	eicall
    19d6:	81 11       	cpse	r24, r1
    19d8:	23 c0       	rjmp	.+70     	; 0x1a20 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    19da:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19dc:	a0 91 14 22 	lds	r26, 0x2214	; 0x802214 <udc_ptr_conf>
    19e0:	b0 91 15 22 	lds	r27, 0x2215	; 0x802215 <udc_ptr_conf+0x1>
    19e4:	ed 91       	ld	r30, X+
    19e6:	fc 91       	ld	r31, X
    19e8:	11 97       	sbiw	r26, 0x01	; 1
    19ea:	94 81       	ldd	r25, Z+4	; 0x04
    19ec:	c9 17       	cp	r28, r25
    19ee:	b0 f2       	brcs	.-84     	; 0x199c <udc_process_setup+0x4ae>
    19f0:	17 c0       	rjmp	.+46     	; 0x1a20 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	15 c0       	rjmp	.+42     	; 0x1a20 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	13 c0       	rjmp	.+38     	; 0x1a20 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	11 c0       	rjmp	.+34     	; 0x1a20 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	0f c0       	rjmp	.+30     	; 0x1a20 <udc_process_setup+0x532>
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	0d c0       	rjmp	.+26     	; 0x1a20 <udc_process_setup+0x532>
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	0b c0       	rjmp	.+22     	; 0x1a20 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1a0a:	98 2f       	mov	r25, r24
    1a0c:	90 76       	andi	r25, 0x60	; 96
    1a0e:	09 f0       	breq	.+2      	; 0x1a12 <udc_process_setup+0x524>
    1a10:	7b cf       	rjmp	.-266    	; 0x1908 <udc_process_setup+0x41a>
    1a12:	80 ce       	rjmp	.-768    	; 0x1714 <udc_process_setup+0x226>
    1a14:	98 2f       	mov	r25, r24
    1a16:	90 76       	andi	r25, 0x60	; 96
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <udc_process_setup+0x52e>
    1a1a:	76 cf       	rjmp	.-276    	; 0x1908 <udc_process_setup+0x41a>
    1a1c:	81 cd       	rjmp	.-1278   	; 0x1520 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	08 95       	ret

00001a2a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1a2a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1a2e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1a30:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1a32:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1a36:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1a38:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1a3c:	08 95       	ret

00001a3e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1a3e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1a40:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1a42:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1a44:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1a46:	60 83       	st	Z, r22
	ret                             // Return to caller
    1a48:	08 95       	ret

00001a4a <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	1f 92       	push	r1
    1a50:	1f 92       	push	r1
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	81 11       	cpse	r24, r1
    1a58:	26 c0       	rjmp	.+76     	; 0x1aa6 <udd_sleep_mode+0x5c>
    1a5a:	90 91 dc 23 	lds	r25, 0x23DC	; 0x8023dc <udd_b_idle>
    1a5e:	99 23       	and	r25, r25
    1a60:	f9 f0       	breq	.+62     	; 0x1aa0 <udd_sleep_mode+0x56>
    1a62:	90 91 e1 23 	lds	r25, 0x23E1	; 0x8023e1 <sleepmgr_locks+0x1>
    1a66:	91 11       	cpse	r25, r1
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <udd_sleep_mode+0x22>
    1a6a:	ff cf       	rjmp	.-2      	; 0x1a6a <udd_sleep_mode+0x20>
    1a6c:	9f b7       	in	r25, 0x3f	; 63
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	f8 94       	cli
    1a72:	2a 81       	ldd	r18, Y+2	; 0x02
    1a74:	e0 ee       	ldi	r30, 0xE0	; 224
    1a76:	f3 e2       	ldi	r31, 0x23	; 35
    1a78:	91 81       	ldd	r25, Z+1	; 0x01
    1a7a:	91 50       	subi	r25, 0x01	; 1
    1a7c:	91 83       	std	Z+1, r25	; 0x01
    1a7e:	2f bf       	out	0x3f, r18	; 63
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <udd_sleep_mode+0x56>
    1a82:	90 91 e1 23 	lds	r25, 0x23E1	; 0x8023e1 <sleepmgr_locks+0x1>
    1a86:	9f 3f       	cpi	r25, 0xFF	; 255
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <udd_sleep_mode+0x42>
    1a8a:	ff cf       	rjmp	.-2      	; 0x1a8a <udd_sleep_mode+0x40>
    1a8c:	9f b7       	in	r25, 0x3f	; 63
    1a8e:	99 83       	std	Y+1, r25	; 0x01
    1a90:	f8 94       	cli
    1a92:	29 81       	ldd	r18, Y+1	; 0x01
    1a94:	e0 ee       	ldi	r30, 0xE0	; 224
    1a96:	f3 e2       	ldi	r31, 0x23	; 35
    1a98:	91 81       	ldd	r25, Z+1	; 0x01
    1a9a:	9f 5f       	subi	r25, 0xFF	; 255
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	2f bf       	out	0x3f, r18	; 63
    1aa0:	80 93 dc 23 	sts	0x23DC, r24	; 0x8023dc <udd_b_idle>
    1aa4:	05 c0       	rjmp	.+10     	; 0x1ab0 <udd_sleep_mode+0x66>
    1aa6:	90 91 dc 23 	lds	r25, 0x23DC	; 0x8023dc <udd_b_idle>
    1aaa:	99 23       	and	r25, r25
    1aac:	51 f3       	breq	.-44     	; 0x1a82 <udd_sleep_mode+0x38>
    1aae:	f8 cf       	rjmp	.-16     	; 0x1aa0 <udd_sleep_mode+0x56>
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	08 95       	ret

00001aba <udd_ctrl_init>:
    1aba:	0f 93       	push	r16
    1abc:	e8 ec       	ldi	r30, 0xC8	; 200
    1abe:	f4 e0       	ldi	r31, 0x04	; 4
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8f 7d       	andi	r24, 0xDF	; 223
    1ac4:	80 83       	st	Z, r24
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8f 7d       	andi	r24, 0xDF	; 223
    1aca:	80 83       	st	Z, r24
    1acc:	e0 e9       	ldi	r30, 0x90	; 144
    1ace:	f3 e2       	ldi	r31, 0x23	; 35
    1ad0:	02 e0       	ldi	r16, 0x02	; 2
    1ad2:	05 93       	las	Z, r16
    1ad4:	10 92 92 23 	sts	0x2392, r1	; 0x802392 <udd_sram+0x1e>
    1ad8:	10 92 93 23 	sts	0x2393, r1	; 0x802393 <udd_sram+0x1f>
    1adc:	00 e2       	ldi	r16, 0x20	; 32
    1ade:	06 93       	lac	Z, r16
    1ae0:	00 e4       	ldi	r16, 0x40	; 64
    1ae2:	06 93       	lac	Z, r16
    1ae4:	e8 e8       	ldi	r30, 0x88	; 136
    1ae6:	f3 e2       	ldi	r31, 0x23	; 35
    1ae8:	00 e4       	ldi	r16, 0x40	; 64
    1aea:	06 93       	lac	Z, r16
    1aec:	e6 ee       	ldi	r30, 0xE6	; 230
    1aee:	f3 e2       	ldi	r31, 0x23	; 35
    1af0:	14 86       	std	Z+12, r1	; 0x0c
    1af2:	15 86       	std	Z+13, r1	; 0x0d
    1af4:	16 86       	std	Z+14, r1	; 0x0e
    1af6:	17 86       	std	Z+15, r1	; 0x0f
    1af8:	12 86       	std	Z+10, r1	; 0x0a
    1afa:	13 86       	std	Z+11, r1	; 0x0b
    1afc:	10 92 71 23 	sts	0x2371, r1	; 0x802371 <udd_ep_control_state>
    1b00:	0f 91       	pop	r16
    1b02:	08 95       	ret

00001b04 <udd_ctrl_stall_data>:
    1b04:	0f 93       	push	r16
    1b06:	85 e0       	ldi	r24, 0x05	; 5
    1b08:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udd_ep_control_state>
    1b0c:	e1 e9       	ldi	r30, 0x91	; 145
    1b0e:	f3 e2       	ldi	r31, 0x23	; 35
    1b10:	04 e0       	ldi	r16, 0x04	; 4
    1b12:	05 93       	las	Z, r16
    1b14:	e9 e8       	ldi	r30, 0x89	; 137
    1b16:	f3 e2       	ldi	r31, 0x23	; 35
    1b18:	04 e0       	ldi	r16, 0x04	; 4
    1b1a:	05 93       	las	Z, r16
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <udd_ctrl_send_zlp_in>:
    1b20:	0f 93       	push	r16
    1b22:	83 e0       	ldi	r24, 0x03	; 3
    1b24:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udd_ep_control_state>
    1b28:	10 92 92 23 	sts	0x2392, r1	; 0x802392 <udd_sram+0x1e>
    1b2c:	10 92 93 23 	sts	0x2393, r1	; 0x802393 <udd_sram+0x1f>
    1b30:	e0 e9       	ldi	r30, 0x90	; 144
    1b32:	f3 e2       	ldi	r31, 0x23	; 35
    1b34:	02 e0       	ldi	r16, 0x02	; 2
    1b36:	06 93       	lac	Z, r16
    1b38:	0f 91       	pop	r16
    1b3a:	08 95       	ret

00001b3c <udd_ctrl_endofrequest>:
    1b3c:	e0 91 f2 23 	lds	r30, 0x23F2	; 0x8023f2 <udd_g_ctrlreq+0xc>
    1b40:	f0 91 f3 23 	lds	r31, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0xd>
    1b44:	30 97       	sbiw	r30, 0x00	; 0
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <udd_ctrl_endofrequest+0xe>
    1b48:	19 95       	eicall
    1b4a:	08 95       	ret

00001b4c <udd_ctrl_in_sent>:
    1b4c:	0f 93       	push	r16
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udd_ep_control_state>
    1b56:	83 30       	cpi	r24, 0x03	; 3
    1b58:	19 f4       	brne	.+6      	; 0x1b60 <udd_ctrl_in_sent+0x14>
    1b5a:	f0 df       	rcall	.-32     	; 0x1b3c <udd_ctrl_endofrequest>
    1b5c:	ae df       	rcall	.-164    	; 0x1aba <udd_ctrl_init>
    1b5e:	5e c0       	rjmp	.+188    	; 0x1c1c <udd_ctrl_in_sent+0xd0>
    1b60:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <udd_ctrl_payload_nb_trans>
    1b64:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    1b68:	c0 91 f0 23 	lds	r28, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xa>
    1b6c:	d0 91 f1 23 	lds	r29, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xb>
    1b70:	c8 1b       	sub	r28, r24
    1b72:	d9 0b       	sbc	r29, r25
    1b74:	71 f5       	brne	.+92     	; 0x1bd2 <udd_ctrl_in_sent+0x86>
    1b76:	20 91 6f 23 	lds	r18, 0x236F	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
    1b7a:	30 91 70 23 	lds	r19, 0x2370	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    1b7e:	82 0f       	add	r24, r18
    1b80:	93 1f       	adc	r25, r19
    1b82:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
    1b86:	90 93 70 23 	sts	0x2370, r25	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    1b8a:	20 91 ec 23 	lds	r18, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    1b8e:	30 91 ed 23 	lds	r19, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    1b92:	82 17       	cp	r24, r18
    1b94:	93 07       	cpc	r25, r19
    1b96:	21 f0       	breq	.+8      	; 0x1ba0 <udd_ctrl_in_sent+0x54>
    1b98:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <b_shortpacket.5301>
    1b9c:	88 23       	and	r24, r24
    1b9e:	41 f0       	breq	.+16     	; 0x1bb0 <udd_ctrl_in_sent+0x64>
    1ba0:	84 e0       	ldi	r24, 0x04	; 4
    1ba2:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udd_ep_control_state>
    1ba6:	e8 e8       	ldi	r30, 0x88	; 136
    1ba8:	f3 e2       	ldi	r31, 0x23	; 35
    1baa:	02 e0       	ldi	r16, 0x02	; 2
    1bac:	06 93       	lac	Z, r16
    1bae:	36 c0       	rjmp	.+108    	; 0x1c1c <udd_ctrl_in_sent+0xd0>
    1bb0:	e0 91 f4 23 	lds	r30, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0xe>
    1bb4:	f0 91 f5 23 	lds	r31, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0xf>
    1bb8:	30 97       	sbiw	r30, 0x00	; 0
    1bba:	99 f0       	breq	.+38     	; 0x1be2 <udd_ctrl_in_sent+0x96>
    1bbc:	19 95       	eicall
    1bbe:	88 23       	and	r24, r24
    1bc0:	81 f0       	breq	.+32     	; 0x1be2 <udd_ctrl_in_sent+0x96>
    1bc2:	10 92 6d 23 	sts	0x236D, r1	; 0x80236d <udd_ctrl_payload_nb_trans>
    1bc6:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    1bca:	c0 91 f0 23 	lds	r28, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xa>
    1bce:	d0 91 f1 23 	lds	r29, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xb>
    1bd2:	c8 30       	cpi	r28, 0x08	; 8
    1bd4:	d1 05       	cpc	r29, r1
    1bd6:	28 f0       	brcs	.+10     	; 0x1be2 <udd_ctrl_in_sent+0x96>
    1bd8:	10 92 1c 22 	sts	0x221C, r1	; 0x80221c <b_shortpacket.5301>
    1bdc:	c8 e0       	ldi	r28, 0x08	; 8
    1bde:	d0 e0       	ldi	r29, 0x00	; 0
    1be0:	03 c0       	rjmp	.+6      	; 0x1be8 <udd_ctrl_in_sent+0x9c>
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	80 93 1c 22 	sts	0x221C, r24	; 0x80221c <b_shortpacket.5301>
    1be8:	e4 e7       	ldi	r30, 0x74	; 116
    1bea:	f3 e2       	ldi	r31, 0x23	; 35
    1bec:	c6 8f       	std	Z+30, r28	; 0x1e
    1bee:	d7 8f       	std	Z+31, r29	; 0x1f
    1bf0:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <udd_ctrl_payload_nb_trans>
    1bf4:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    1bf8:	20 91 ee 23 	lds	r18, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0x8>
    1bfc:	30 91 ef 23 	lds	r19, 0x23EF	; 0x8023ef <udd_g_ctrlreq+0x9>
    1c00:	28 0f       	add	r18, r24
    1c02:	39 1f       	adc	r19, r25
    1c04:	20 a3       	std	Z+32, r18	; 0x20
    1c06:	31 a3       	std	Z+33, r19	; 0x21
    1c08:	c8 0f       	add	r28, r24
    1c0a:	d9 1f       	adc	r29, r25
    1c0c:	c0 93 6d 23 	sts	0x236D, r28	; 0x80236d <udd_ctrl_payload_nb_trans>
    1c10:	d0 93 6e 23 	sts	0x236E, r29	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    1c14:	e0 e9       	ldi	r30, 0x90	; 144
    1c16:	f3 e2       	ldi	r31, 0x23	; 35
    1c18:	02 e0       	ldi	r16, 0x02	; 2
    1c1a:	06 93       	lac	Z, r16
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	0f 91       	pop	r16
    1c22:	08 95       	ret

00001c24 <udd_ep_get_size>:
    1c24:	fc 01       	movw	r30, r24
    1c26:	81 81       	ldd	r24, Z+1	; 0x01
    1c28:	e8 2f       	mov	r30, r24
    1c2a:	e7 70       	andi	r30, 0x07	; 7
    1c2c:	8e 2f       	mov	r24, r30
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	fc 01       	movw	r30, r24
    1c32:	31 97       	sbiw	r30, 0x01	; 1
    1c34:	e7 30       	cpi	r30, 0x07	; 7
    1c36:	f1 05       	cpc	r31, r1
    1c38:	d0 f4       	brcc	.+52     	; 0x1c6e <udd_ep_get_size+0x4a>
    1c3a:	88 27       	eor	r24, r24
    1c3c:	e9 5f       	subi	r30, 0xF9	; 249
    1c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c40:	8f 4f       	sbci	r24, 0xFF	; 255
    1c42:	23 c7       	rjmp	.+3654   	; 0x2a8a <__tablejump2__>
    1c44:	80 e1       	ldi	r24, 0x10	; 16
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	08 95       	ret
    1c4a:	80 e2       	ldi	r24, 0x20	; 32
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	08 95       	ret
    1c50:	80 e4       	ldi	r24, 0x40	; 64
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	08 95       	ret
    1c56:	80 e8       	ldi	r24, 0x80	; 128
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	08 95       	ret
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	08 95       	ret
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	92 e0       	ldi	r25, 0x02	; 2
    1c66:	08 95       	ret
    1c68:	8f ef       	ldi	r24, 0xFF	; 255
    1c6a:	93 e0       	ldi	r25, 0x03	; 3
    1c6c:	08 95       	ret
    1c6e:	88 e0       	ldi	r24, 0x08	; 8
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	08 95       	ret

00001c74 <udd_ep_get_job>:
    1c74:	28 2f       	mov	r18, r24
    1c76:	2f 70       	andi	r18, 0x0F	; 15
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	22 0f       	add	r18, r18
    1c7c:	33 1f       	adc	r19, r19
    1c7e:	08 2e       	mov	r0, r24
    1c80:	00 0c       	add	r0, r0
    1c82:	99 0b       	sbc	r25, r25
    1c84:	88 27       	eor	r24, r24
    1c86:	99 0f       	add	r25, r25
    1c88:	88 1f       	adc	r24, r24
    1c8a:	99 27       	eor	r25, r25
    1c8c:	82 0f       	add	r24, r18
    1c8e:	93 1f       	adc	r25, r19
    1c90:	02 97       	sbiw	r24, 0x02	; 2
    1c92:	9c 01       	movw	r18, r24
    1c94:	22 0f       	add	r18, r18
    1c96:	33 1f       	adc	r19, r19
    1c98:	22 0f       	add	r18, r18
    1c9a:	33 1f       	adc	r19, r19
    1c9c:	22 0f       	add	r18, r18
    1c9e:	33 1f       	adc	r19, r19
    1ca0:	82 0f       	add	r24, r18
    1ca2:	93 1f       	adc	r25, r19
    1ca4:	83 5e       	subi	r24, 0xE3	; 227
    1ca6:	9c 4d       	sbci	r25, 0xDC	; 220
    1ca8:	08 95       	ret

00001caa <udd_ctrl_interrupt_tc_setup>:
    1caa:	0f 93       	push	r16
    1cac:	cf 93       	push	r28
    1cae:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1cb2:	80 ff       	sbrs	r24, 0
    1cb4:	64 c0       	rjmp	.+200    	; 0x1d7e <udd_ctrl_interrupt_tc_setup+0xd4>
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1cbc:	e8 e8       	ldi	r30, 0x88	; 136
    1cbe:	f3 e2       	ldi	r31, 0x23	; 35
    1cc0:	00 e8       	ldi	r16, 0x80	; 128
    1cc2:	06 93       	lac	Z, r16
    1cc4:	e0 e9       	ldi	r30, 0x90	; 144
    1cc6:	f3 e2       	ldi	r31, 0x23	; 35
    1cc8:	00 e8       	ldi	r16, 0x80	; 128
    1cca:	06 93       	lac	Z, r16
    1ccc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1cd0:	e8 e8       	ldi	r30, 0x88	; 136
    1cd2:	f3 e2       	ldi	r31, 0x23	; 35
    1cd4:	00 e1       	ldi	r16, 0x10	; 16
    1cd6:	06 93       	lac	Z, r16
    1cd8:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udd_ep_control_state>
    1cdc:	88 23       	and	r24, r24
    1cde:	29 f0       	breq	.+10     	; 0x1cea <udd_ctrl_interrupt_tc_setup+0x40>
    1ce0:	83 50       	subi	r24, 0x03	; 3
    1ce2:	82 30       	cpi	r24, 0x02	; 2
    1ce4:	08 f4       	brcc	.+2      	; 0x1ce8 <udd_ctrl_interrupt_tc_setup+0x3e>
    1ce6:	2a df       	rcall	.-428    	; 0x1b3c <udd_ctrl_endofrequest>
    1ce8:	e8 de       	rcall	.-560    	; 0x1aba <udd_ctrl_init>
    1cea:	80 91 8a 23 	lds	r24, 0x238A	; 0x80238a <udd_sram+0x16>
    1cee:	90 91 8b 23 	lds	r25, 0x238B	; 0x80238b <udd_sram+0x17>
    1cf2:	08 97       	sbiw	r24, 0x08	; 8
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <udd_ctrl_interrupt_tc_setup+0x4e>
    1cf6:	45 c0       	rjmp	.+138    	; 0x1d82 <udd_ctrl_interrupt_tc_setup+0xd8>
    1cf8:	88 e0       	ldi	r24, 0x08	; 8
    1cfa:	e5 e6       	ldi	r30, 0x65	; 101
    1cfc:	f3 e2       	ldi	r31, 0x23	; 35
    1cfe:	a6 ee       	ldi	r26, 0xE6	; 230
    1d00:	b3 e2       	ldi	r27, 0x23	; 35
    1d02:	01 90       	ld	r0, Z+
    1d04:	0d 92       	st	X+, r0
    1d06:	8a 95       	dec	r24
    1d08:	e1 f7       	brne	.-8      	; 0x1d02 <udd_ctrl_interrupt_tc_setup+0x58>
    1d0a:	e8 ec       	ldi	r30, 0xC8	; 200
    1d0c:	f4 e0       	ldi	r31, 0x04	; 4
    1d0e:	80 81       	ld	r24, Z
    1d10:	80 62       	ori	r24, 0x20	; 32
    1d12:	80 83       	st	Z, r24
    1d14:	80 81       	ld	r24, Z
    1d16:	80 62       	ori	r24, 0x20	; 32
    1d18:	80 83       	st	Z, r24
    1d1a:	e9 db       	rcall	.-2094   	; 0x14ee <udc_process_setup>
    1d1c:	c8 2f       	mov	r28, r24
    1d1e:	81 11       	cpse	r24, r1
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <udd_ctrl_interrupt_tc_setup+0x7e>
    1d22:	f0 de       	rcall	.-544    	; 0x1b04 <udd_ctrl_stall_data>
    1d24:	c1 e0       	ldi	r28, 0x01	; 1
    1d26:	2e c0       	rjmp	.+92     	; 0x1d84 <udd_ctrl_interrupt_tc_setup+0xda>
    1d28:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <udd_g_ctrlreq>
    1d2c:	88 23       	and	r24, r24
    1d2e:	6c f4       	brge	.+26     	; 0x1d4a <udd_ctrl_interrupt_tc_setup+0xa0>
    1d30:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
    1d34:	10 92 70 23 	sts	0x2370, r1	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d38:	10 92 6d 23 	sts	0x236D, r1	; 0x80236d <udd_ctrl_payload_nb_trans>
    1d3c:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udd_ep_control_state>
    1d46:	02 df       	rcall	.-508    	; 0x1b4c <udd_ctrl_in_sent>
    1d48:	1d c0       	rjmp	.+58     	; 0x1d84 <udd_ctrl_interrupt_tc_setup+0xda>
    1d4a:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    1d4e:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    1d52:	89 2b       	or	r24, r25
    1d54:	11 f4       	brne	.+4      	; 0x1d5a <udd_ctrl_interrupt_tc_setup+0xb0>
    1d56:	e4 de       	rcall	.-568    	; 0x1b20 <udd_ctrl_send_zlp_in>
    1d58:	15 c0       	rjmp	.+42     	; 0x1d84 <udd_ctrl_interrupt_tc_setup+0xda>
    1d5a:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
    1d5e:	10 92 70 23 	sts	0x2370, r1	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d62:	10 92 6d 23 	sts	0x236D, r1	; 0x80236d <udd_ctrl_payload_nb_trans>
    1d66:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udd_ep_control_state>
    1d70:	e8 e8       	ldi	r30, 0x88	; 136
    1d72:	f3 e2       	ldi	r31, 0x23	; 35
    1d74:	02 e0       	ldi	r16, 0x02	; 2
    1d76:	06 93       	lac	Z, r16
    1d78:	00 e2       	ldi	r16, 0x20	; 32
    1d7a:	06 93       	lac	Z, r16
    1d7c:	03 c0       	rjmp	.+6      	; 0x1d84 <udd_ctrl_interrupt_tc_setup+0xda>
    1d7e:	c0 e0       	ldi	r28, 0x00	; 0
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <udd_ctrl_interrupt_tc_setup+0xda>
    1d82:	c1 e0       	ldi	r28, 0x01	; 1
    1d84:	8c 2f       	mov	r24, r28
    1d86:	cf 91       	pop	r28
    1d88:	0f 91       	pop	r16
    1d8a:	08 95       	ret

00001d8c <udd_ep_trans_complet>:
    1d8c:	8f 92       	push	r8
    1d8e:	9f 92       	push	r9
    1d90:	af 92       	push	r10
    1d92:	bf 92       	push	r11
    1d94:	df 92       	push	r13
    1d96:	ef 92       	push	r14
    1d98:	ff 92       	push	r15
    1d9a:	0f 93       	push	r16
    1d9c:	1f 93       	push	r17
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	d8 2e       	mov	r13, r24
    1da4:	67 df       	rcall	.-306    	; 0x1c74 <udd_ep_get_job>
    1da6:	8c 01       	movw	r16, r24
    1da8:	cd 2d       	mov	r28, r13
    1daa:	cf 70       	andi	r28, 0x0F	; 15
    1dac:	d0 e0       	ldi	r29, 0x00	; 0
    1dae:	ce 01       	movw	r24, r28
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	cd 2d       	mov	r28, r13
    1db6:	0d 2c       	mov	r0, r13
    1db8:	00 0c       	add	r0, r0
    1dba:	dd 0b       	sbc	r29, r29
    1dbc:	cc 27       	eor	r28, r28
    1dbe:	dd 0f       	add	r29, r29
    1dc0:	cc 1f       	adc	r28, r28
    1dc2:	dd 27       	eor	r29, r29
    1dc4:	c8 0f       	add	r28, r24
    1dc6:	d9 1f       	adc	r29, r25
    1dc8:	ce 01       	movw	r24, r28
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	9c 01       	movw	r18, r24
    1dd8:	28 57       	subi	r18, 0x78	; 120
    1dda:	3c 4d       	sbci	r19, 0xDC	; 220
    1ddc:	79 01       	movw	r14, r18
    1dde:	c9 01       	movw	r24, r18
    1de0:	21 df       	rcall	.-446    	; 0x1c24 <udd_ep_get_size>
    1de2:	4c 01       	movw	r8, r24
    1de4:	dd 20       	and	r13, r13
    1de6:	0c f0       	brlt	.+2      	; 0x1dea <udd_ep_trans_complet+0x5e>
    1de8:	79 c0       	rjmp	.+242    	; 0x1edc <udd_ep_trans_complet+0x150>
    1dea:	fe 01       	movw	r30, r28
    1dec:	ee 0f       	add	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	ee 0f       	add	r30, r30
    1df2:	ff 1f       	adc	r31, r31
    1df4:	ee 0f       	add	r30, r30
    1df6:	ff 1f       	adc	r31, r31
    1df8:	ec 58       	subi	r30, 0x8C	; 140
    1dfa:	fc 4d       	sbci	r31, 0xDC	; 220
    1dfc:	22 8d       	ldd	r18, Z+26	; 0x1a
    1dfe:	33 8d       	ldd	r19, Z+27	; 0x1b
    1e00:	d8 01       	movw	r26, r16
    1e02:	15 96       	adiw	r26, 0x05	; 5
    1e04:	8d 91       	ld	r24, X+
    1e06:	9c 91       	ld	r25, X
    1e08:	16 97       	sbiw	r26, 0x06	; 6
    1e0a:	82 0f       	add	r24, r18
    1e0c:	93 1f       	adc	r25, r19
    1e0e:	15 96       	adiw	r26, 0x05	; 5
    1e10:	8d 93       	st	X+, r24
    1e12:	9c 93       	st	X, r25
    1e14:	16 97       	sbiw	r26, 0x06	; 6
    1e16:	13 96       	adiw	r26, 0x03	; 3
    1e18:	2d 91       	ld	r18, X+
    1e1a:	3c 91       	ld	r19, X
    1e1c:	14 97       	sbiw	r26, 0x04	; 4
    1e1e:	82 17       	cp	r24, r18
    1e20:	93 07       	cpc	r25, r19
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <udd_ep_trans_complet+0x9a>
    1e24:	45 c0       	rjmp	.+138    	; 0x1eb0 <udd_ep_trans_complet+0x124>
    1e26:	28 1b       	sub	r18, r24
    1e28:	39 0b       	sbc	r19, r25
    1e2a:	21 15       	cp	r18, r1
    1e2c:	b4 e0       	ldi	r27, 0x04	; 4
    1e2e:	3b 07       	cpc	r19, r27
    1e30:	38 f0       	brcs	.+14     	; 0x1e40 <udd_ep_trans_complet+0xb4>
    1e32:	2f ef       	ldi	r18, 0xFF	; 255
    1e34:	33 e0       	ldi	r19, 0x03	; 3
    1e36:	c9 01       	movw	r24, r18
    1e38:	b4 01       	movw	r22, r8
    1e3a:	13 d6       	rcall	.+3110   	; 0x2a62 <__udivmodhi4>
    1e3c:	28 1b       	sub	r18, r24
    1e3e:	39 0b       	sbc	r19, r25
    1e40:	f8 01       	movw	r30, r16
    1e42:	80 81       	ld	r24, Z
    1e44:	81 ff       	sbrs	r24, 1
    1e46:	09 c0       	rjmp	.+18     	; 0x1e5a <udd_ep_trans_complet+0xce>
    1e48:	c9 01       	movw	r24, r18
    1e4a:	b4 01       	movw	r22, r8
    1e4c:	0a d6       	rcall	.+3092   	; 0x2a62 <__udivmodhi4>
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	89 2b       	or	r24, r25
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <udd_ep_trans_complet+0xca>
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	84 2f       	mov	r24, r20
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <udd_ep_trans_complet+0xd0>
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	d8 01       	movw	r26, r16
    1e5e:	9c 91       	ld	r25, X
    1e60:	80 fb       	bst	r24, 0
    1e62:	91 f9       	bld	r25, 1
    1e64:	9c 93       	st	X, r25
    1e66:	fe 01       	movw	r30, r28
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	ee 0f       	add	r30, r30
    1e6e:	ff 1f       	adc	r31, r31
    1e70:	ee 0f       	add	r30, r30
    1e72:	ff 1f       	adc	r31, r31
    1e74:	ec 58       	subi	r30, 0x8C	; 140
    1e76:	fc 4d       	sbci	r31, 0xDC	; 220
    1e78:	12 8e       	std	Z+26, r1	; 0x1a
    1e7a:	13 8e       	std	Z+27, r1	; 0x1b
    1e7c:	26 8b       	std	Z+22, r18	; 0x16
    1e7e:	37 8b       	std	Z+23, r19	; 0x17
    1e80:	11 96       	adiw	r26, 0x01	; 1
    1e82:	2d 91       	ld	r18, X+
    1e84:	3c 91       	ld	r19, X
    1e86:	12 97       	sbiw	r26, 0x02	; 2
    1e88:	15 96       	adiw	r26, 0x05	; 5
    1e8a:	8d 91       	ld	r24, X+
    1e8c:	9c 91       	ld	r25, X
    1e8e:	16 97       	sbiw	r26, 0x06	; 6
    1e90:	82 0f       	add	r24, r18
    1e92:	93 1f       	adc	r25, r19
    1e94:	cc 0f       	add	r28, r28
    1e96:	dd 1f       	adc	r29, r29
    1e98:	cc 0f       	add	r28, r28
    1e9a:	dd 1f       	adc	r29, r29
    1e9c:	cc 0f       	add	r28, r28
    1e9e:	dd 1f       	adc	r29, r29
    1ea0:	c4 57       	subi	r28, 0x74	; 116
    1ea2:	dc 4d       	sbci	r29, 0xDC	; 220
    1ea4:	88 83       	st	Y, r24
    1ea6:	99 83       	std	Y+1, r25	; 0x01
    1ea8:	f7 01       	movw	r30, r14
    1eaa:	02 e0       	ldi	r16, 0x02	; 2
    1eac:	06 93       	lac	Z, r16
    1eae:	e0 c0       	rjmp	.+448    	; 0x2070 <udd_ep_trans_complet+0x2e4>
    1eb0:	d8 01       	movw	r26, r16
    1eb2:	8c 91       	ld	r24, X
    1eb4:	81 ff       	sbrs	r24, 1
    1eb6:	c9 c0       	rjmp	.+402    	; 0x204a <udd_ep_trans_complet+0x2be>
    1eb8:	8d 7f       	andi	r24, 0xFD	; 253
    1eba:	8c 93       	st	X, r24
    1ebc:	cc 0f       	add	r28, r28
    1ebe:	dd 1f       	adc	r29, r29
    1ec0:	cc 0f       	add	r28, r28
    1ec2:	dd 1f       	adc	r29, r29
    1ec4:	cc 0f       	add	r28, r28
    1ec6:	dd 1f       	adc	r29, r29
    1ec8:	cc 58       	subi	r28, 0x8C	; 140
    1eca:	dc 4d       	sbci	r29, 0xDC	; 220
    1ecc:	1a 8e       	std	Y+26, r1	; 0x1a
    1ece:	1b 8e       	std	Y+27, r1	; 0x1b
    1ed0:	1e 8a       	std	Y+22, r1	; 0x16
    1ed2:	1f 8a       	std	Y+23, r1	; 0x17
    1ed4:	f7 01       	movw	r30, r14
    1ed6:	02 e0       	ldi	r16, 0x02	; 2
    1ed8:	06 93       	lac	Z, r16
    1eda:	ca c0       	rjmp	.+404    	; 0x2070 <udd_ep_trans_complet+0x2e4>
    1edc:	fe 01       	movw	r30, r28
    1ede:	ee 0f       	add	r30, r30
    1ee0:	ff 1f       	adc	r31, r31
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	ec 58       	subi	r30, 0x8C	; 140
    1eec:	fc 4d       	sbci	r31, 0xDC	; 220
    1eee:	a6 88       	ldd	r10, Z+22	; 0x16
    1ef0:	b7 88       	ldd	r11, Z+23	; 0x17
    1ef2:	d8 01       	movw	r26, r16
    1ef4:	8c 91       	ld	r24, X
    1ef6:	82 ff       	sbrs	r24, 2
    1ef8:	19 c0       	rjmp	.+50     	; 0x1f2c <udd_ep_trans_complet+0x1a0>
    1efa:	11 96       	adiw	r26, 0x01	; 1
    1efc:	ed 91       	ld	r30, X+
    1efe:	fc 91       	ld	r31, X
    1f00:	12 97       	sbiw	r26, 0x02	; 2
    1f02:	15 96       	adiw	r26, 0x05	; 5
    1f04:	2d 91       	ld	r18, X+
    1f06:	3c 91       	ld	r19, X
    1f08:	16 97       	sbiw	r26, 0x06	; 6
    1f0a:	13 96       	adiw	r26, 0x03	; 3
    1f0c:	8d 91       	ld	r24, X+
    1f0e:	9c 91       	ld	r25, X
    1f10:	14 97       	sbiw	r26, 0x04	; 4
    1f12:	b4 01       	movw	r22, r8
    1f14:	a6 d5       	rcall	.+2892   	; 0x2a62 <__udivmodhi4>
    1f16:	b0 e4       	ldi	r27, 0x40	; 64
    1f18:	db 9e       	mul	r13, r27
    1f1a:	b0 01       	movw	r22, r0
    1f1c:	11 24       	eor	r1, r1
    1f1e:	63 52       	subi	r22, 0x23	; 35
    1f20:	7e 4d       	sbci	r23, 0xDE	; 222
    1f22:	ac 01       	movw	r20, r24
    1f24:	cf 01       	movw	r24, r30
    1f26:	82 0f       	add	r24, r18
    1f28:	93 1f       	adc	r25, r19
    1f2a:	b7 d5       	rcall	.+2926   	; 0x2a9a <memcpy>
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	25 81       	ldd	r18, Z+5	; 0x05
    1f30:	36 81       	ldd	r19, Z+6	; 0x06
    1f32:	2a 0d       	add	r18, r10
    1f34:	3b 1d       	adc	r19, r11
    1f36:	25 83       	std	Z+5, r18	; 0x05
    1f38:	36 83       	std	Z+6, r19	; 0x06
    1f3a:	83 81       	ldd	r24, Z+3	; 0x03
    1f3c:	94 81       	ldd	r25, Z+4	; 0x04
    1f3e:	82 17       	cp	r24, r18
    1f40:	93 07       	cpc	r25, r19
    1f42:	68 f4       	brcc	.+26     	; 0x1f5e <udd_ep_trans_complet+0x1d2>
    1f44:	85 83       	std	Z+5, r24	; 0x05
    1f46:	96 83       	std	Z+6, r25	; 0x06
    1f48:	cc 0f       	add	r28, r28
    1f4a:	dd 1f       	adc	r29, r29
    1f4c:	cc 0f       	add	r28, r28
    1f4e:	dd 1f       	adc	r29, r29
    1f50:	cc 0f       	add	r28, r28
    1f52:	dd 1f       	adc	r29, r29
    1f54:	cc 58       	subi	r28, 0x8C	; 140
    1f56:	dc 4d       	sbci	r29, 0xDC	; 220
    1f58:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f5a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f5c:	76 c0       	rjmp	.+236    	; 0x204a <udd_ep_trans_complet+0x2be>
    1f5e:	fe 01       	movw	r30, r28
    1f60:	ee 0f       	add	r30, r30
    1f62:	ff 1f       	adc	r31, r31
    1f64:	ee 0f       	add	r30, r30
    1f66:	ff 1f       	adc	r31, r31
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	ec 58       	subi	r30, 0x8C	; 140
    1f6e:	fc 4d       	sbci	r31, 0xDC	; 220
    1f70:	42 8d       	ldd	r20, Z+26	; 0x1a
    1f72:	53 8d       	ldd	r21, Z+27	; 0x1b
    1f74:	a4 16       	cp	r10, r20
    1f76:	b5 06       	cpc	r11, r21
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <udd_ep_trans_complet+0x1f0>
    1f7a:	67 c0       	rjmp	.+206    	; 0x204a <udd_ep_trans_complet+0x2be>
    1f7c:	28 17       	cp	r18, r24
    1f7e:	39 07       	cpc	r19, r25
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <udd_ep_trans_complet+0x1f8>
    1f82:	63 c0       	rjmp	.+198    	; 0x204a <udd_ep_trans_complet+0x2be>
    1f84:	ac 01       	movw	r20, r24
    1f86:	42 1b       	sub	r20, r18
    1f88:	53 0b       	sbc	r21, r19
    1f8a:	9a 01       	movw	r18, r20
    1f8c:	21 15       	cp	r18, r1
    1f8e:	54 e0       	ldi	r21, 0x04	; 4
    1f90:	35 07       	cpc	r19, r21
    1f92:	40 f0       	brcs	.+16     	; 0x1fa4 <udd_ep_trans_complet+0x218>
    1f94:	2f ef       	ldi	r18, 0xFF	; 255
    1f96:	33 e0       	ldi	r19, 0x03	; 3
    1f98:	c9 01       	movw	r24, r18
    1f9a:	b4 01       	movw	r22, r8
    1f9c:	62 d5       	rcall	.+2756   	; 0x2a62 <__udivmodhi4>
    1f9e:	28 1b       	sub	r18, r24
    1fa0:	39 0b       	sbc	r19, r25
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <udd_ep_trans_complet+0x222>
    1fa4:	c9 01       	movw	r24, r18
    1fa6:	b4 01       	movw	r22, r8
    1fa8:	5c d5       	rcall	.+2744   	; 0x2a62 <__udivmodhi4>
    1faa:	28 1b       	sub	r18, r24
    1fac:	39 0b       	sbc	r19, r25
    1fae:	fe 01       	movw	r30, r28
    1fb0:	ee 0f       	add	r30, r30
    1fb2:	ff 1f       	adc	r31, r31
    1fb4:	ee 0f       	add	r30, r30
    1fb6:	ff 1f       	adc	r31, r31
    1fb8:	ee 0f       	add	r30, r30
    1fba:	ff 1f       	adc	r31, r31
    1fbc:	ec 58       	subi	r30, 0x8C	; 140
    1fbe:	fc 4d       	sbci	r31, 0xDC	; 220
    1fc0:	16 8a       	std	Z+22, r1	; 0x16
    1fc2:	17 8a       	std	Z+23, r1	; 0x17
    1fc4:	28 15       	cp	r18, r8
    1fc6:	39 05       	cpc	r19, r9
    1fc8:	00 f5       	brcc	.+64     	; 0x200a <udd_ep_trans_complet+0x27e>
    1fca:	d8 01       	movw	r26, r16
    1fcc:	8c 91       	ld	r24, X
    1fce:	84 60       	ori	r24, 0x04	; 4
    1fd0:	8c 93       	st	X, r24
    1fd2:	b0 e4       	ldi	r27, 0x40	; 64
    1fd4:	db 9e       	mul	r13, r27
    1fd6:	c0 01       	movw	r24, r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	83 52       	subi	r24, 0x23	; 35
    1fdc:	9e 4d       	sbci	r25, 0xDE	; 222
    1fde:	fe 01       	movw	r30, r28
    1fe0:	ee 0f       	add	r30, r30
    1fe2:	ff 1f       	adc	r31, r31
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	e4 57       	subi	r30, 0x74	; 116
    1fee:	fc 4d       	sbci	r31, 0xDC	; 220
    1ff0:	80 83       	st	Z, r24
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	cc 0f       	add	r28, r28
    1ff6:	dd 1f       	adc	r29, r29
    1ff8:	cc 0f       	add	r28, r28
    1ffa:	dd 1f       	adc	r29, r29
    1ffc:	cc 0f       	add	r28, r28
    1ffe:	dd 1f       	adc	r29, r29
    2000:	cc 58       	subi	r28, 0x8C	; 140
    2002:	dc 4d       	sbci	r29, 0xDC	; 220
    2004:	8a 8e       	std	Y+26, r8	; 0x1a
    2006:	9b 8e       	std	Y+27, r9	; 0x1b
    2008:	1c c0       	rjmp	.+56     	; 0x2042 <udd_ep_trans_complet+0x2b6>
    200a:	f8 01       	movw	r30, r16
    200c:	41 81       	ldd	r20, Z+1	; 0x01
    200e:	52 81       	ldd	r21, Z+2	; 0x02
    2010:	85 81       	ldd	r24, Z+5	; 0x05
    2012:	96 81       	ldd	r25, Z+6	; 0x06
    2014:	84 0f       	add	r24, r20
    2016:	95 1f       	adc	r25, r21
    2018:	fe 01       	movw	r30, r28
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	ee 0f       	add	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	e4 57       	subi	r30, 0x74	; 116
    2028:	fc 4d       	sbci	r31, 0xDC	; 220
    202a:	80 83       	st	Z, r24
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	cc 0f       	add	r28, r28
    2030:	dd 1f       	adc	r29, r29
    2032:	cc 0f       	add	r28, r28
    2034:	dd 1f       	adc	r29, r29
    2036:	cc 0f       	add	r28, r28
    2038:	dd 1f       	adc	r29, r29
    203a:	cc 58       	subi	r28, 0x8C	; 140
    203c:	dc 4d       	sbci	r29, 0xDC	; 220
    203e:	2a 8f       	std	Y+26, r18	; 0x1a
    2040:	3b 8f       	std	Y+27, r19	; 0x1b
    2042:	f7 01       	movw	r30, r14
    2044:	02 e0       	ldi	r16, 0x02	; 2
    2046:	06 93       	lac	Z, r16
    2048:	13 c0       	rjmp	.+38     	; 0x2070 <udd_ep_trans_complet+0x2e4>
    204a:	d8 01       	movw	r26, r16
    204c:	8c 91       	ld	r24, X
    204e:	80 ff       	sbrs	r24, 0
    2050:	0f c0       	rjmp	.+30     	; 0x2070 <udd_ep_trans_complet+0x2e4>
    2052:	8e 7f       	andi	r24, 0xFE	; 254
    2054:	8c 93       	st	X, r24
    2056:	17 96       	adiw	r26, 0x07	; 7
    2058:	ed 91       	ld	r30, X+
    205a:	fc 91       	ld	r31, X
    205c:	18 97       	sbiw	r26, 0x08	; 8
    205e:	30 97       	sbiw	r30, 0x00	; 0
    2060:	39 f0       	breq	.+14     	; 0x2070 <udd_ep_trans_complet+0x2e4>
    2062:	15 96       	adiw	r26, 0x05	; 5
    2064:	6d 91       	ld	r22, X+
    2066:	7c 91       	ld	r23, X
    2068:	16 97       	sbiw	r26, 0x06	; 6
    206a:	4d 2d       	mov	r20, r13
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	19 95       	eicall
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	ff 90       	pop	r15
    207a:	ef 90       	pop	r14
    207c:	df 90       	pop	r13
    207e:	bf 90       	pop	r11
    2080:	af 90       	pop	r10
    2082:	9f 90       	pop	r9
    2084:	8f 90       	pop	r8
    2086:	08 95       	ret

00002088 <udd_attach>:
    2088:	1f 93       	push	r17
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	1f 92       	push	r1
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	8f b7       	in	r24, 0x3f	; 63
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	f8 94       	cli
    209a:	19 81       	ldd	r17, Y+1	; 0x01
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	d5 dc       	rcall	.-1622   	; 0x1a4a <udd_sleep_mode>
    20a0:	ea ec       	ldi	r30, 0xCA	; 202
    20a2:	f4 e0       	ldi	r31, 0x04	; 4
    20a4:	80 e4       	ldi	r24, 0x40	; 64
    20a6:	80 83       	st	Z, r24
    20a8:	80 e2       	ldi	r24, 0x20	; 32
    20aa:	80 83       	st	Z, r24
    20ac:	e1 ec       	ldi	r30, 0xC1	; 193
    20ae:	f4 e0       	ldi	r31, 0x04	; 4
    20b0:	80 81       	ld	r24, Z
    20b2:	81 60       	ori	r24, 0x01	; 1
    20b4:	80 83       	st	Z, r24
    20b6:	a9 ec       	ldi	r26, 0xC9	; 201
    20b8:	b4 e0       	ldi	r27, 0x04	; 4
    20ba:	8c 91       	ld	r24, X
    20bc:	82 60       	ori	r24, 0x02	; 2
    20be:	8c 93       	st	X, r24
    20c0:	e8 ec       	ldi	r30, 0xC8	; 200
    20c2:	f4 e0       	ldi	r31, 0x04	; 4
    20c4:	80 81       	ld	r24, Z
    20c6:	80 64       	ori	r24, 0x40	; 64
    20c8:	80 83       	st	Z, r24
    20ca:	8c 91       	ld	r24, X
    20cc:	81 60       	ori	r24, 0x01	; 1
    20ce:	8c 93       	st	X, r24
    20d0:	80 81       	ld	r24, Z
    20d2:	80 68       	ori	r24, 0x80	; 128
    20d4:	80 83       	st	Z, r24
    20d6:	1f bf       	out	0x3f, r17	; 63
    20d8:	0f 90       	pop	r0
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	1f 91       	pop	r17
    20e0:	08 95       	ret

000020e2 <udd_enable>:
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	1f 92       	push	r1
    20ec:	1f 92       	push	r1
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	00 e6       	ldi	r16, 0x60	; 96
    20f4:	10 e0       	ldi	r17, 0x00	; 0
    20f6:	f8 01       	movw	r30, r16
    20f8:	10 82       	st	Z, r1
    20fa:	80 e3       	ldi	r24, 0x30	; 48
    20fc:	0e 94 16 07 	call	0xe2c	; 0xe2c <sysclk_enable_usb>
    2100:	e0 ec       	ldi	r30, 0xC0	; 192
    2102:	f4 e0       	ldi	r31, 0x04	; 4
    2104:	80 81       	ld	r24, Z
    2106:	80 64       	ori	r24, 0x40	; 64
    2108:	80 83       	st	Z, r24
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	f8 01       	movw	r30, r16
    210e:	80 83       	st	Z, r24
    2110:	8f b7       	in	r24, 0x3f	; 63
    2112:	8a 83       	std	Y+2, r24	; 0x02
    2114:	f8 94       	cli
    2116:	1a 81       	ldd	r17, Y+2	; 0x02
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	fc 01       	movw	r30, r24
    211e:	ee 0f       	add	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	ee 0f       	add	r30, r30
    2124:	ff 1f       	adc	r31, r31
    2126:	ee 0f       	add	r30, r30
    2128:	ff 1f       	adc	r31, r31
    212a:	ec 58       	subi	r30, 0x8C	; 140
    212c:	fc 4d       	sbci	r31, 0xDC	; 220
    212e:	15 8a       	std	Z+21, r1	; 0x15
    2130:	01 96       	adiw	r24, 0x01	; 1
    2132:	8a 30       	cpi	r24, 0x0A	; 10
    2134:	91 05       	cpc	r25, r1
    2136:	91 f7       	brne	.-28     	; 0x211c <udd_enable+0x3a>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	fc 01       	movw	r30, r24
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	ee 0f       	add	r30, r30
    2144:	ff 1f       	adc	r31, r31
    2146:	ee 0f       	add	r30, r30
    2148:	ff 1f       	adc	r31, r31
    214a:	e8 0f       	add	r30, r24
    214c:	f9 1f       	adc	r31, r25
    214e:	e3 5e       	subi	r30, 0xE3	; 227
    2150:	fc 4d       	sbci	r31, 0xDC	; 220
    2152:	20 81       	ld	r18, Z
    2154:	2e 7f       	andi	r18, 0xFE	; 254
    2156:	20 83       	st	Z, r18
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	88 30       	cpi	r24, 0x08	; 8
    215c:	91 05       	cpc	r25, r1
    215e:	71 f7       	brne	.-36     	; 0x213c <udd_enable+0x5a>
    2160:	6a e1       	ldi	r22, 0x1A	; 26
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	82 e0       	ldi	r24, 0x02	; 2
    2166:	61 dc       	rcall	.-1854   	; 0x1a2a <nvm_read_byte>
    2168:	8f 3f       	cpi	r24, 0xFF	; 255
    216a:	19 f0       	breq	.+6      	; 0x2172 <udd_enable+0x90>
    216c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    2170:	03 c0       	rjmp	.+6      	; 0x2178 <udd_enable+0x96>
    2172:	8f e1       	ldi	r24, 0x1F	; 31
    2174:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    2178:	6b e1       	ldi	r22, 0x1B	; 27
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	55 dc       	rcall	.-1878   	; 0x1a2a <nvm_read_byte>
    2180:	8f 3f       	cpi	r24, 0xFF	; 255
    2182:	19 f0       	breq	.+6      	; 0x218a <udd_enable+0xa8>
    2184:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    2188:	03 c0       	rjmp	.+6      	; 0x2190 <udd_enable+0xae>
    218a:	8f e1       	ldi	r24, 0x1F	; 31
    218c:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    2190:	e0 ec       	ldi	r30, 0xC0	; 192
    2192:	f4 e0       	ldi	r31, 0x04	; 4
    2194:	80 81       	ld	r24, Z
    2196:	84 60       	ori	r24, 0x04	; 4
    2198:	80 83       	st	Z, r24
    219a:	80 81       	ld	r24, Z
    219c:	80 68       	ori	r24, 0x80	; 128
    219e:	80 83       	st	Z, r24
    21a0:	80 81       	ld	r24, Z
    21a2:	80 61       	ori	r24, 0x10	; 16
    21a4:	80 83       	st	Z, r24
    21a6:	88 e8       	ldi	r24, 0x88	; 136
    21a8:	93 e2       	ldi	r25, 0x23	; 35
    21aa:	86 83       	std	Z+6, r24	; 0x06
    21ac:	97 83       	std	Z+7, r25	; 0x07
    21ae:	80 81       	ld	r24, Z
    21b0:	80 62       	ori	r24, 0x20	; 32
    21b2:	80 83       	st	Z, r24
    21b4:	8f ef       	ldi	r24, 0xFF	; 255
    21b6:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    21ba:	e8 ec       	ldi	r30, 0xC8	; 200
    21bc:	f4 e0       	ldi	r31, 0x04	; 4
    21be:	80 81       	ld	r24, Z
    21c0:	81 60       	ori	r24, 0x01	; 1
    21c2:	80 83       	st	Z, r24
    21c4:	10 92 dc 23 	sts	0x23DC, r1	; 0x8023dc <udd_b_idle>
    21c8:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <sleepmgr_locks+0x5>
    21cc:	8f 3f       	cpi	r24, 0xFF	; 255
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <udd_enable+0xf0>
    21d0:	ff cf       	rjmp	.-2      	; 0x21d0 <udd_enable+0xee>
    21d2:	8f b7       	in	r24, 0x3f	; 63
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	f8 94       	cli
    21d8:	99 81       	ldd	r25, Y+1	; 0x01
    21da:	e0 ee       	ldi	r30, 0xE0	; 224
    21dc:	f3 e2       	ldi	r31, 0x23	; 35
    21de:	85 81       	ldd	r24, Z+5	; 0x05
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	85 83       	std	Z+5, r24	; 0x05
    21e4:	9f bf       	out	0x3f, r25	; 63
    21e6:	50 df       	rcall	.-352    	; 0x2088 <udd_attach>
    21e8:	1f bf       	out	0x3f, r17	; 63
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	08 95       	ret

000021f8 <udd_set_address>:
    21f8:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    21fc:	08 95       	ret

000021fe <udd_getaddress>:
    21fe:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2202:	08 95       	ret

00002204 <udd_set_setup_payload>:
    2204:	e6 ee       	ldi	r30, 0xE6	; 230
    2206:	f3 e2       	ldi	r31, 0x23	; 35
    2208:	80 87       	std	Z+8, r24	; 0x08
    220a:	91 87       	std	Z+9, r25	; 0x09
    220c:	62 87       	std	Z+10, r22	; 0x0a
    220e:	73 87       	std	Z+11, r23	; 0x0b
    2210:	08 95       	ret

00002212 <udd_ep_alloc>:
    2212:	28 2f       	mov	r18, r24
    2214:	2f 70       	andi	r18, 0x0F	; 15
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	22 0f       	add	r18, r18
    221a:	33 1f       	adc	r19, r19
    221c:	08 2e       	mov	r0, r24
    221e:	00 0c       	add	r0, r0
    2220:	99 0b       	sbc	r25, r25
    2222:	88 27       	eor	r24, r24
    2224:	99 0f       	add	r25, r25
    2226:	88 1f       	adc	r24, r24
    2228:	99 27       	eor	r25, r25
    222a:	82 0f       	add	r24, r18
    222c:	93 1f       	adc	r25, r19
    222e:	fc 01       	movw	r30, r24
    2230:	ee 0f       	add	r30, r30
    2232:	ff 1f       	adc	r31, r31
    2234:	ee 0f       	add	r30, r30
    2236:	ff 1f       	adc	r31, r31
    2238:	ee 0f       	add	r30, r30
    223a:	ff 1f       	adc	r31, r31
    223c:	ec 58       	subi	r30, 0x8C	; 140
    223e:	fc 4d       	sbci	r31, 0xDC	; 220
    2240:	25 89       	ldd	r18, Z+21	; 0x15
    2242:	20 7c       	andi	r18, 0xC0	; 192
    2244:	09 f0       	breq	.+2      	; 0x2248 <udd_ep_alloc+0x36>
    2246:	69 c0       	rjmp	.+210    	; 0x231a <udd_ep_alloc+0x108>
    2248:	63 70       	andi	r22, 0x03	; 3
    224a:	61 30       	cpi	r22, 0x01	; 1
    224c:	11 f0       	breq	.+4      	; 0x2252 <udd_ep_alloc+0x40>
    224e:	18 f4       	brcc	.+6      	; 0x2256 <udd_ep_alloc+0x44>
    2250:	04 c0       	rjmp	.+8      	; 0x225a <udd_ep_alloc+0x48>
    2252:	60 ec       	ldi	r22, 0xC0	; 192
    2254:	03 c0       	rjmp	.+6      	; 0x225c <udd_ep_alloc+0x4a>
    2256:	60 e8       	ldi	r22, 0x80	; 128
    2258:	01 c0       	rjmp	.+2      	; 0x225c <udd_ep_alloc+0x4a>
    225a:	60 e4       	ldi	r22, 0x40	; 64
    225c:	40 38       	cpi	r20, 0x80	; 128
    225e:	51 05       	cpc	r21, r1
    2260:	e9 f0       	breq	.+58     	; 0x229c <udd_ep_alloc+0x8a>
    2262:	50 f4       	brcc	.+20     	; 0x2278 <udd_ep_alloc+0x66>
    2264:	40 32       	cpi	r20, 0x20	; 32
    2266:	51 05       	cpc	r21, r1
    2268:	a9 f0       	breq	.+42     	; 0x2294 <udd_ep_alloc+0x82>
    226a:	40 34       	cpi	r20, 0x40	; 64
    226c:	51 05       	cpc	r21, r1
    226e:	a1 f0       	breq	.+40     	; 0x2298 <udd_ep_alloc+0x86>
    2270:	40 31       	cpi	r20, 0x10	; 16
    2272:	51 05       	cpc	r21, r1
    2274:	d9 f4       	brne	.+54     	; 0x22ac <udd_ep_alloc+0x9a>
    2276:	0c c0       	rjmp	.+24     	; 0x2290 <udd_ep_alloc+0x7e>
    2278:	41 15       	cp	r20, r1
    227a:	22 e0       	ldi	r18, 0x02	; 2
    227c:	52 07       	cpc	r21, r18
    227e:	91 f0       	breq	.+36     	; 0x22a4 <udd_ep_alloc+0x92>
    2280:	4f 3f       	cpi	r20, 0xFF	; 255
    2282:	23 e0       	ldi	r18, 0x03	; 3
    2284:	52 07       	cpc	r21, r18
    2286:	81 f0       	breq	.+32     	; 0x22a8 <udd_ep_alloc+0x96>
    2288:	41 15       	cp	r20, r1
    228a:	51 40       	sbci	r21, 0x01	; 1
    228c:	79 f4       	brne	.+30     	; 0x22ac <udd_ep_alloc+0x9a>
    228e:	08 c0       	rjmp	.+16     	; 0x22a0 <udd_ep_alloc+0x8e>
    2290:	21 e0       	ldi	r18, 0x01	; 1
    2292:	0d c0       	rjmp	.+26     	; 0x22ae <udd_ep_alloc+0x9c>
    2294:	22 e0       	ldi	r18, 0x02	; 2
    2296:	0b c0       	rjmp	.+22     	; 0x22ae <udd_ep_alloc+0x9c>
    2298:	23 e0       	ldi	r18, 0x03	; 3
    229a:	09 c0       	rjmp	.+18     	; 0x22ae <udd_ep_alloc+0x9c>
    229c:	24 e0       	ldi	r18, 0x04	; 4
    229e:	07 c0       	rjmp	.+14     	; 0x22ae <udd_ep_alloc+0x9c>
    22a0:	25 e0       	ldi	r18, 0x05	; 5
    22a2:	05 c0       	rjmp	.+10     	; 0x22ae <udd_ep_alloc+0x9c>
    22a4:	26 e0       	ldi	r18, 0x06	; 6
    22a6:	03 c0       	rjmp	.+6      	; 0x22ae <udd_ep_alloc+0x9c>
    22a8:	27 e0       	ldi	r18, 0x07	; 7
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <udd_ep_alloc+0x9c>
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	fc 01       	movw	r30, r24
    22b0:	ee 0f       	add	r30, r30
    22b2:	ff 1f       	adc	r31, r31
    22b4:	ee 0f       	add	r30, r30
    22b6:	ff 1f       	adc	r31, r31
    22b8:	ee 0f       	add	r30, r30
    22ba:	ff 1f       	adc	r31, r31
    22bc:	ec 58       	subi	r30, 0x8C	; 140
    22be:	fc 4d       	sbci	r31, 0xDC	; 220
    22c0:	15 8a       	std	Z+21, r1	; 0x15
    22c2:	36 e0       	ldi	r19, 0x06	; 6
    22c4:	34 8b       	std	Z+20, r19	; 0x14
    22c6:	26 2b       	or	r18, r22
    22c8:	25 8b       	std	Z+21, r18	; 0x15
    22ca:	fc 01       	movw	r30, r24
    22cc:	ee 0f       	add	r30, r30
    22ce:	ff 1f       	adc	r31, r31
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	ec 58       	subi	r30, 0x8C	; 140
    22da:	fc 4d       	sbci	r31, 0xDC	; 220
    22dc:	25 89       	ldd	r18, Z+21	; 0x15
    22de:	20 7c       	andi	r18, 0xC0	; 192
    22e0:	20 3c       	cpi	r18, 0xC0	; 192
    22e2:	69 f4       	brne	.+26     	; 0x22fe <udd_ep_alloc+0xec>
    22e4:	fc 01       	movw	r30, r24
    22e6:	ee 0f       	add	r30, r30
    22e8:	ff 1f       	adc	r31, r31
    22ea:	ee 0f       	add	r30, r30
    22ec:	ff 1f       	adc	r31, r31
    22ee:	ee 0f       	add	r30, r30
    22f0:	ff 1f       	adc	r31, r31
    22f2:	ec 58       	subi	r30, 0x8C	; 140
    22f4:	fc 4d       	sbci	r31, 0xDC	; 220
    22f6:	25 89       	ldd	r18, Z+21	; 0x15
    22f8:	27 70       	andi	r18, 0x07	; 7
    22fa:	27 30       	cpi	r18, 0x07	; 7
    22fc:	81 f0       	breq	.+32     	; 0x231e <udd_ep_alloc+0x10c>
    22fe:	88 0f       	add	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	fc 01       	movw	r30, r24
    230c:	ec 58       	subi	r30, 0x8C	; 140
    230e:	fc 4d       	sbci	r31, 0xDC	; 220
    2310:	85 89       	ldd	r24, Z+21	; 0x15
    2312:	80 62       	ori	r24, 0x20	; 32
    2314:	85 8b       	std	Z+21, r24	; 0x15
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	08 95       	ret
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	08 95       	ret
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	08 95       	ret

00002322 <udd_ep_is_halted>:
    2322:	e8 2f       	mov	r30, r24
    2324:	ef 70       	andi	r30, 0x0F	; 15
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	ee 0f       	add	r30, r30
    232a:	ff 1f       	adc	r31, r31
    232c:	08 2e       	mov	r0, r24
    232e:	00 0c       	add	r0, r0
    2330:	99 0b       	sbc	r25, r25
    2332:	88 27       	eor	r24, r24
    2334:	99 0f       	add	r25, r25
    2336:	88 1f       	adc	r24, r24
    2338:	99 27       	eor	r25, r25
    233a:	e8 0f       	add	r30, r24
    233c:	f9 1f       	adc	r31, r25
    233e:	ee 0f       	add	r30, r30
    2340:	ff 1f       	adc	r31, r31
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	ec 58       	subi	r30, 0x8C	; 140
    234c:	fc 4d       	sbci	r31, 0xDC	; 220
    234e:	85 89       	ldd	r24, Z+21	; 0x15
    2350:	82 fb       	bst	r24, 2
    2352:	88 27       	eor	r24, r24
    2354:	80 f9       	bld	r24, 0
    2356:	08 95       	ret

00002358 <udd_ep_clear_halt>:
    2358:	0f 93       	push	r16
    235a:	28 2f       	mov	r18, r24
    235c:	2f 70       	andi	r18, 0x0F	; 15
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	a9 01       	movw	r20, r18
    2362:	44 0f       	add	r20, r20
    2364:	55 1f       	adc	r21, r21
    2366:	28 2f       	mov	r18, r24
    2368:	08 2e       	mov	r0, r24
    236a:	00 0c       	add	r0, r0
    236c:	33 0b       	sbc	r19, r19
    236e:	22 27       	eor	r18, r18
    2370:	33 0f       	add	r19, r19
    2372:	22 1f       	adc	r18, r18
    2374:	33 27       	eor	r19, r19
    2376:	24 0f       	add	r18, r20
    2378:	35 1f       	adc	r19, r21
    237a:	a9 01       	movw	r20, r18
    237c:	44 0f       	add	r20, r20
    237e:	55 1f       	adc	r21, r21
    2380:	44 0f       	add	r20, r20
    2382:	55 1f       	adc	r21, r21
    2384:	44 0f       	add	r20, r20
    2386:	55 1f       	adc	r21, r21
    2388:	fa 01       	movw	r30, r20
    238a:	e8 57       	subi	r30, 0x78	; 120
    238c:	fc 4d       	sbci	r31, 0xDC	; 220
    238e:	01 e0       	ldi	r16, 0x01	; 1
    2390:	06 93       	lac	Z, r16
    2392:	fa 01       	movw	r30, r20
    2394:	ec 58       	subi	r30, 0x8C	; 140
    2396:	fc 4d       	sbci	r31, 0xDC	; 220
    2398:	95 89       	ldd	r25, Z+21	; 0x15
    239a:	92 ff       	sbrs	r25, 2
    239c:	11 c0       	rjmp	.+34     	; 0x23c0 <udd_ep_clear_halt+0x68>
    239e:	fa 01       	movw	r30, r20
    23a0:	ec 58       	subi	r30, 0x8C	; 140
    23a2:	fc 4d       	sbci	r31, 0xDC	; 220
    23a4:	95 89       	ldd	r25, Z+21	; 0x15
    23a6:	9b 7f       	andi	r25, 0xFB	; 251
    23a8:	95 8b       	std	Z+21, r25	; 0x15
    23aa:	64 dc       	rcall	.-1848   	; 0x1c74 <udd_ep_get_job>
    23ac:	fc 01       	movw	r30, r24
    23ae:	80 81       	ld	r24, Z
    23b0:	80 ff       	sbrs	r24, 0
    23b2:	06 c0       	rjmp	.+12     	; 0x23c0 <udd_ep_clear_halt+0x68>
    23b4:	8e 7f       	andi	r24, 0xFE	; 254
    23b6:	80 83       	st	Z, r24
    23b8:	07 80       	ldd	r0, Z+7	; 0x07
    23ba:	f0 85       	ldd	r31, Z+8	; 0x08
    23bc:	e0 2d       	mov	r30, r0
    23be:	19 95       	eicall
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	0f 91       	pop	r16
    23c4:	08 95       	ret

000023c6 <udd_ep_run>:
    23c6:	6f 92       	push	r6
    23c8:	7f 92       	push	r7
    23ca:	8f 92       	push	r8
    23cc:	9f 92       	push	r9
    23ce:	af 92       	push	r10
    23d0:	bf 92       	push	r11
    23d2:	cf 92       	push	r12
    23d4:	df 92       	push	r13
    23d6:	ef 92       	push	r14
    23d8:	ff 92       	push	r15
    23da:	0f 93       	push	r16
    23dc:	1f 93       	push	r17
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	1f 92       	push	r1
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	78 2e       	mov	r7, r24
    23ea:	66 2e       	mov	r6, r22
    23ec:	4a 01       	movw	r8, r20
    23ee:	59 01       	movw	r10, r18
    23f0:	41 dc       	rcall	.-1918   	; 0x1c74 <udd_ep_get_job>
    23f2:	6c 01       	movw	r12, r24
    23f4:	27 2d       	mov	r18, r7
    23f6:	87 2d       	mov	r24, r7
    23f8:	8f 70       	andi	r24, 0x0F	; 15
    23fa:	e8 2e       	mov	r14, r24
    23fc:	f1 2c       	mov	r15, r1
    23fe:	c7 01       	movw	r24, r14
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	e7 2c       	mov	r14, r7
    2406:	07 2c       	mov	r0, r7
    2408:	00 0c       	add	r0, r0
    240a:	ff 08       	sbc	r15, r15
    240c:	ee 24       	eor	r14, r14
    240e:	ff 0c       	add	r15, r15
    2410:	ee 1c       	adc	r14, r14
    2412:	ff 24       	eor	r15, r15
    2414:	e8 0e       	add	r14, r24
    2416:	f9 1e       	adc	r15, r25
    2418:	f7 01       	movw	r30, r14
    241a:	ee 0f       	add	r30, r30
    241c:	ff 1f       	adc	r31, r31
    241e:	ee 0f       	add	r30, r30
    2420:	ff 1f       	adc	r31, r31
    2422:	ee 0f       	add	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	ec 58       	subi	r30, 0x8C	; 140
    2428:	fc 4d       	sbci	r31, 0xDC	; 220
    242a:	85 89       	ldd	r24, Z+21	; 0x15
    242c:	80 7c       	andi	r24, 0xC0	; 192
    242e:	09 f4       	brne	.+2      	; 0x2432 <udd_ep_run+0x6c>
    2430:	81 c0       	rjmp	.+258    	; 0x2534 <udd_ep_run+0x16e>
    2432:	f7 01       	movw	r30, r14
    2434:	ee 0f       	add	r30, r30
    2436:	ff 1f       	adc	r31, r31
    2438:	ee 0f       	add	r30, r30
    243a:	ff 1f       	adc	r31, r31
    243c:	ee 0f       	add	r30, r30
    243e:	ff 1f       	adc	r31, r31
    2440:	ec 58       	subi	r30, 0x8C	; 140
    2442:	fc 4d       	sbci	r31, 0xDC	; 220
    2444:	85 89       	ldd	r24, Z+21	; 0x15
    2446:	80 7c       	andi	r24, 0xC0	; 192
    2448:	80 3c       	cpi	r24, 0xC0	; 192
    244a:	61 f0       	breq	.+24     	; 0x2464 <udd_ep_run+0x9e>
    244c:	f7 01       	movw	r30, r14
    244e:	ee 0f       	add	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	ee 0f       	add	r30, r30
    2454:	ff 1f       	adc	r31, r31
    2456:	ee 0f       	add	r30, r30
    2458:	ff 1f       	adc	r31, r31
    245a:	ec 58       	subi	r30, 0x8C	; 140
    245c:	fc 4d       	sbci	r31, 0xDC	; 220
    245e:	85 89       	ldd	r24, Z+21	; 0x15
    2460:	82 fd       	sbrc	r24, 2
    2462:	6a c0       	rjmp	.+212    	; 0x2538 <udd_ep_run+0x172>
    2464:	8f b7       	in	r24, 0x3f	; 63
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	f8 94       	cli
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	f6 01       	movw	r30, r12
    246e:	90 81       	ld	r25, Z
    2470:	90 ff       	sbrs	r25, 0
    2472:	03 c0       	rjmp	.+6      	; 0x247a <udd_ep_run+0xb4>
    2474:	8f bf       	out	0x3f, r24	; 63
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	60 c0       	rjmp	.+192    	; 0x253a <udd_ep_run+0x174>
    247a:	f6 01       	movw	r30, r12
    247c:	90 81       	ld	r25, Z
    247e:	91 60       	ori	r25, 0x01	; 1
    2480:	90 83       	st	Z, r25
    2482:	8f bf       	out	0x3f, r24	; 63
    2484:	81 82       	std	Z+1, r8	; 0x01
    2486:	92 82       	std	Z+2, r9	; 0x02
    2488:	a3 82       	std	Z+3, r10	; 0x03
    248a:	b4 82       	std	Z+4, r11	; 0x04
    248c:	15 82       	std	Z+5, r1	; 0x05
    248e:	16 82       	std	Z+6, r1	; 0x06
    2490:	07 83       	std	Z+7, r16	; 0x07
    2492:	10 87       	std	Z+8, r17	; 0x08
    2494:	61 10       	cpse	r6, r1
    2496:	06 c0       	rjmp	.+12     	; 0x24a4 <udd_ep_run+0xde>
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	a1 14       	cp	r10, r1
    249c:	b1 04       	cpc	r11, r1
    249e:	19 f0       	breq	.+6      	; 0x24a6 <udd_ep_run+0xe0>
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	01 c0       	rjmp	.+2      	; 0x24a6 <udd_ep_run+0xe0>
    24a4:	91 e0       	ldi	r25, 0x01	; 1
    24a6:	f6 01       	movw	r30, r12
    24a8:	80 81       	ld	r24, Z
    24aa:	90 fb       	bst	r25, 0
    24ac:	81 f9       	bld	r24, 1
    24ae:	8b 7f       	andi	r24, 0xFB	; 251
    24b0:	80 83       	st	Z, r24
    24b2:	22 23       	and	r18, r18
    24b4:	64 f4       	brge	.+24     	; 0x24ce <udd_ep_run+0x108>
    24b6:	f7 01       	movw	r30, r14
    24b8:	ee 0f       	add	r30, r30
    24ba:	ff 1f       	adc	r31, r31
    24bc:	ee 0f       	add	r30, r30
    24be:	ff 1f       	adc	r31, r31
    24c0:	ee 0f       	add	r30, r30
    24c2:	ff 1f       	adc	r31, r31
    24c4:	ec 58       	subi	r30, 0x8C	; 140
    24c6:	fc 4d       	sbci	r31, 0xDC	; 220
    24c8:	12 8e       	std	Z+26, r1	; 0x1a
    24ca:	13 8e       	std	Z+27, r1	; 0x1b
    24cc:	2f c0       	rjmp	.+94     	; 0x252c <udd_ep_run+0x166>
    24ce:	f7 01       	movw	r30, r14
    24d0:	ee 0f       	add	r30, r30
    24d2:	ff 1f       	adc	r31, r31
    24d4:	ee 0f       	add	r30, r30
    24d6:	ff 1f       	adc	r31, r31
    24d8:	ee 0f       	add	r30, r30
    24da:	ff 1f       	adc	r31, r31
    24dc:	ec 58       	subi	r30, 0x8C	; 140
    24de:	fc 4d       	sbci	r31, 0xDC	; 220
    24e0:	85 89       	ldd	r24, Z+21	; 0x15
    24e2:	80 7c       	andi	r24, 0xC0	; 192
    24e4:	80 3c       	cpi	r24, 0xC0	; 192
    24e6:	a9 f4       	brne	.+42     	; 0x2512 <udd_ep_run+0x14c>
    24e8:	c7 01       	movw	r24, r14
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	88 57       	subi	r24, 0x78	; 120
    24f8:	9c 4d       	sbci	r25, 0xDC	; 220
    24fa:	94 db       	rcall	.-2264   	; 0x1c24 <udd_ep_get_size>
    24fc:	bc 01       	movw	r22, r24
    24fe:	c5 01       	movw	r24, r10
    2500:	b0 d2       	rcall	.+1376   	; 0x2a62 <__udivmodhi4>
    2502:	89 2b       	or	r24, r25
    2504:	31 f0       	breq	.+12     	; 0x2512 <udd_ep_run+0x14c>
    2506:	f6 01       	movw	r30, r12
    2508:	80 81       	ld	r24, Z
    250a:	8e 7f       	andi	r24, 0xFE	; 254
    250c:	80 83       	st	Z, r24
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	14 c0       	rjmp	.+40     	; 0x253a <udd_ep_run+0x174>
    2512:	f7 01       	movw	r30, r14
    2514:	ee 0f       	add	r30, r30
    2516:	ff 1f       	adc	r31, r31
    2518:	ee 0f       	add	r30, r30
    251a:	ff 1f       	adc	r31, r31
    251c:	ee 0f       	add	r30, r30
    251e:	ff 1f       	adc	r31, r31
    2520:	ec 58       	subi	r30, 0x8C	; 140
    2522:	fc 4d       	sbci	r31, 0xDC	; 220
    2524:	16 8a       	std	Z+22, r1	; 0x16
    2526:	17 8a       	std	Z+23, r1	; 0x17
    2528:	12 8e       	std	Z+26, r1	; 0x1a
    252a:	13 8e       	std	Z+27, r1	; 0x1b
    252c:	87 2d       	mov	r24, r7
    252e:	2e dc       	rcall	.-1956   	; 0x1d8c <udd_ep_trans_complet>
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	03 c0       	rjmp	.+6      	; 0x253a <udd_ep_run+0x174>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	01 c0       	rjmp	.+2      	; 0x253a <udd_ep_run+0x174>
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	0f 90       	pop	r0
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	1f 91       	pop	r17
    2542:	0f 91       	pop	r16
    2544:	ff 90       	pop	r15
    2546:	ef 90       	pop	r14
    2548:	df 90       	pop	r13
    254a:	cf 90       	pop	r12
    254c:	bf 90       	pop	r11
    254e:	af 90       	pop	r10
    2550:	9f 90       	pop	r9
    2552:	8f 90       	pop	r8
    2554:	7f 90       	pop	r7
    2556:	6f 90       	pop	r6
    2558:	08 95       	ret

0000255a <udd_ep_abort>:
    255a:	ff 92       	push	r15
    255c:	0f 93       	push	r16
    255e:	1f 93       	push	r17
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	18 2f       	mov	r17, r24
    2566:	c8 2f       	mov	r28, r24
    2568:	cf 70       	andi	r28, 0x0F	; 15
    256a:	d0 e0       	ldi	r29, 0x00	; 0
    256c:	ce 01       	movw	r24, r28
    256e:	88 0f       	add	r24, r24
    2570:	99 1f       	adc	r25, r25
    2572:	c1 2f       	mov	r28, r17
    2574:	01 2e       	mov	r0, r17
    2576:	00 0c       	add	r0, r0
    2578:	dd 0b       	sbc	r29, r29
    257a:	cc 27       	eor	r28, r28
    257c:	dd 0f       	add	r29, r29
    257e:	cc 1f       	adc	r28, r28
    2580:	dd 27       	eor	r29, r29
    2582:	c8 0f       	add	r28, r24
    2584:	d9 1f       	adc	r29, r25
    2586:	81 2f       	mov	r24, r17
    2588:	75 db       	rcall	.-2326   	; 0x1c74 <udd_ep_get_job>
    258a:	dc 01       	movw	r26, r24
    258c:	fe 01       	movw	r30, r28
    258e:	ee 0f       	add	r30, r30
    2590:	ff 1f       	adc	r31, r31
    2592:	ee 0f       	add	r30, r30
    2594:	ff 1f       	adc	r31, r31
    2596:	ee 0f       	add	r30, r30
    2598:	ff 1f       	adc	r31, r31
    259a:	e8 57       	subi	r30, 0x78	; 120
    259c:	fc 4d       	sbci	r31, 0xDC	; 220
    259e:	02 e0       	ldi	r16, 0x02	; 2
    25a0:	05 93       	las	Z, r16
    25a2:	8c 91       	ld	r24, X
    25a4:	80 ff       	sbrs	r24, 0
    25a6:	22 c0       	rjmp	.+68     	; 0x25ec <udd_ep_abort+0x92>
    25a8:	8e 7f       	andi	r24, 0xFE	; 254
    25aa:	8c 93       	st	X, r24
    25ac:	17 96       	adiw	r26, 0x07	; 7
    25ae:	ed 91       	ld	r30, X+
    25b0:	fc 91       	ld	r31, X
    25b2:	18 97       	sbiw	r26, 0x08	; 8
    25b4:	30 97       	sbiw	r30, 0x00	; 0
    25b6:	d1 f0       	breq	.+52     	; 0x25ec <udd_ep_abort+0x92>
    25b8:	11 23       	and	r17, r17
    25ba:	5c f4       	brge	.+22     	; 0x25d2 <udd_ep_abort+0x78>
    25bc:	cc 0f       	add	r28, r28
    25be:	dd 1f       	adc	r29, r29
    25c0:	cc 0f       	add	r28, r28
    25c2:	dd 1f       	adc	r29, r29
    25c4:	cc 0f       	add	r28, r28
    25c6:	dd 1f       	adc	r29, r29
    25c8:	cc 58       	subi	r28, 0x8C	; 140
    25ca:	dc 4d       	sbci	r29, 0xDC	; 220
    25cc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    25ce:	7b 8d       	ldd	r23, Y+27	; 0x1b
    25d0:	0a c0       	rjmp	.+20     	; 0x25e6 <udd_ep_abort+0x8c>
    25d2:	cc 0f       	add	r28, r28
    25d4:	dd 1f       	adc	r29, r29
    25d6:	cc 0f       	add	r28, r28
    25d8:	dd 1f       	adc	r29, r29
    25da:	cc 0f       	add	r28, r28
    25dc:	dd 1f       	adc	r29, r29
    25de:	cc 58       	subi	r28, 0x8C	; 140
    25e0:	dc 4d       	sbci	r29, 0xDC	; 220
    25e2:	6e 89       	ldd	r22, Y+22	; 0x16
    25e4:	7f 89       	ldd	r23, Y+23	; 0x17
    25e6:	41 2f       	mov	r20, r17
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	19 95       	eicall
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	1f 91       	pop	r17
    25f2:	0f 91       	pop	r16
    25f4:	ff 90       	pop	r15
    25f6:	08 95       	ret

000025f8 <udd_ep_free>:
    25f8:	cf 93       	push	r28
    25fa:	c8 2f       	mov	r28, r24
    25fc:	ae df       	rcall	.-164    	; 0x255a <udd_ep_abort>
    25fe:	ec 2f       	mov	r30, r28
    2600:	ef 70       	andi	r30, 0x0F	; 15
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	ee 0f       	add	r30, r30
    2606:	ff 1f       	adc	r31, r31
    2608:	8c 2f       	mov	r24, r28
    260a:	cc 0f       	add	r28, r28
    260c:	99 0b       	sbc	r25, r25
    260e:	88 27       	eor	r24, r24
    2610:	99 0f       	add	r25, r25
    2612:	88 1f       	adc	r24, r24
    2614:	99 27       	eor	r25, r25
    2616:	e8 0f       	add	r30, r24
    2618:	f9 1f       	adc	r31, r25
    261a:	ee 0f       	add	r30, r30
    261c:	ff 1f       	adc	r31, r31
    261e:	ee 0f       	add	r30, r30
    2620:	ff 1f       	adc	r31, r31
    2622:	ee 0f       	add	r30, r30
    2624:	ff 1f       	adc	r31, r31
    2626:	ec 58       	subi	r30, 0x8C	; 140
    2628:	fc 4d       	sbci	r31, 0xDC	; 220
    262a:	15 8a       	std	Z+21, r1	; 0x15
    262c:	cf 91       	pop	r28
    262e:	08 95       	ret

00002630 <udd_ep_set_halt>:
    2630:	e8 2f       	mov	r30, r24
    2632:	ef 70       	andi	r30, 0x0F	; 15
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	ee 0f       	add	r30, r30
    2638:	ff 1f       	adc	r31, r31
    263a:	28 2f       	mov	r18, r24
    263c:	08 2e       	mov	r0, r24
    263e:	00 0c       	add	r0, r0
    2640:	33 0b       	sbc	r19, r19
    2642:	22 27       	eor	r18, r18
    2644:	33 0f       	add	r19, r19
    2646:	22 1f       	adc	r18, r18
    2648:	33 27       	eor	r19, r19
    264a:	e2 0f       	add	r30, r18
    264c:	f3 1f       	adc	r31, r19
    264e:	ee 0f       	add	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	ee 0f       	add	r30, r30
    2654:	ff 1f       	adc	r31, r31
    2656:	ee 0f       	add	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	ec 58       	subi	r30, 0x8C	; 140
    265c:	fc 4d       	sbci	r31, 0xDC	; 220
    265e:	95 89       	ldd	r25, Z+21	; 0x15
    2660:	94 60       	ori	r25, 0x04	; 4
    2662:	95 8b       	std	Z+21, r25	; 0x15
    2664:	7a df       	rcall	.-268    	; 0x255a <udd_ep_abort>
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	08 95       	ret

0000266a <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    266a:	1f 92       	push	r1
    266c:	0f 92       	push	r0
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	0f 92       	push	r0
    2672:	11 24       	eor	r1, r1
    2674:	0b b6       	in	r0, 0x3b	; 59
    2676:	0f 92       	push	r0
    2678:	0f 93       	push	r16
    267a:	2f 93       	push	r18
    267c:	3f 93       	push	r19
    267e:	4f 93       	push	r20
    2680:	5f 93       	push	r21
    2682:	6f 93       	push	r22
    2684:	7f 93       	push	r23
    2686:	8f 93       	push	r24
    2688:	9f 93       	push	r25
    268a:	af 93       	push	r26
    268c:	bf 93       	push	r27
    268e:	cf 93       	push	r28
    2690:	ef 93       	push	r30
    2692:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2694:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2698:	88 23       	and	r24, r24
    269a:	3c f4       	brge	.+14     	; 0x26aa <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    269c:	80 e8       	ldi	r24, 0x80	; 128
    269e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    26a2:	0e 94 47 0a 	call	0x148e	; 0x148e <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    26a6:	af d1       	rcall	.+862    	; 0x2a06 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    26a8:	89 c0       	rjmp	.+274    	; 0x27bc <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    26aa:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    26ae:	82 ff       	sbrs	r24, 2
    26b0:	20 c0       	rjmp	.+64     	; 0x26f2 <__vector_125+0x88>
		udd_ack_underflow_event();
    26b2:	84 e0       	ldi	r24, 0x04	; 4
    26b4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    26b8:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <udd_sram+0x1c>
    26bc:	86 ff       	sbrs	r24, 6
    26be:	7e c0       	rjmp	.+252    	; 0x27bc <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    26c0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    26c4:	81 fd       	sbrc	r24, 1
    26c6:	7a c0       	rjmp	.+244    	; 0x27bc <__vector_125+0x152>
    26c8:	f0 da       	rcall	.-2592   	; 0x1caa <udd_ctrl_interrupt_tc_setup>
    26ca:	81 11       	cpse	r24, r1
    26cc:	77 c0       	rjmp	.+238    	; 0x27bc <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    26ce:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udd_ep_control_state>
    26d2:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    26d4:	11 f4       	brne	.+4      	; 0x26da <__vector_125+0x70>
    26d6:	24 da       	rcall	.-3000   	; 0x1b20 <udd_ctrl_send_zlp_in>
    26d8:	71 c0       	rjmp	.+226    	; 0x27bc <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    26da:	84 30       	cpi	r24, 0x04	; 4
    26dc:	09 f0       	breq	.+2      	; 0x26e0 <__vector_125+0x76>
    26de:	6e c0       	rjmp	.+220    	; 0x27bc <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    26e0:	e1 e9       	ldi	r30, 0x91	; 145
    26e2:	f3 e2       	ldi	r31, 0x23	; 35
    26e4:	04 e0       	ldi	r16, 0x04	; 4
    26e6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    26e8:	e9 e8       	ldi	r30, 0x89	; 137
    26ea:	f3 e2       	ldi	r31, 0x23	; 35
    26ec:	04 e0       	ldi	r16, 0x04	; 4
    26ee:	05 93       	las	Z, r16
    26f0:	65 c0       	rjmp	.+202    	; 0x27bc <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    26f2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    26f6:	81 ff       	sbrs	r24, 1
    26f8:	5c c0       	rjmp	.+184    	; 0x27b2 <__vector_125+0x148>
		udd_ack_overflow_event();
    26fa:	82 e0       	ldi	r24, 0x02	; 2
    26fc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    2700:	80 91 88 23 	lds	r24, 0x2388	; 0x802388 <udd_sram+0x14>
    2704:	86 ff       	sbrs	r24, 6
    2706:	5a c0       	rjmp	.+180    	; 0x27bc <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2708:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    270c:	81 fd       	sbrc	r24, 1
    270e:	56 c0       	rjmp	.+172    	; 0x27bc <__vector_125+0x152>
    2710:	cc da       	rcall	.-2664   	; 0x1caa <udd_ctrl_interrupt_tc_setup>
    2712:	81 11       	cpse	r24, r1
    2714:	53 c0       	rjmp	.+166    	; 0x27bc <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2716:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udd_ep_control_state>
    271a:	82 30       	cpi	r24, 0x02	; 2
    271c:	41 f4       	brne	.+16     	; 0x272e <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    271e:	84 e0       	ldi	r24, 0x04	; 4
    2720:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2724:	e8 e8       	ldi	r30, 0x88	; 136
    2726:	f3 e2       	ldi	r31, 0x23	; 35
    2728:	02 e0       	ldi	r16, 0x02	; 2
    272a:	06 93       	lac	Z, r16
    272c:	47 c0       	rjmp	.+142    	; 0x27bc <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    272e:	83 30       	cpi	r24, 0x03	; 3
    2730:	09 f0       	breq	.+2      	; 0x2734 <__vector_125+0xca>
    2732:	44 c0       	rjmp	.+136    	; 0x27bc <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2734:	e1 e9       	ldi	r30, 0x91	; 145
    2736:	f3 e2       	ldi	r31, 0x23	; 35
    2738:	04 e0       	ldi	r16, 0x04	; 4
    273a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    273c:	e9 e8       	ldi	r30, 0x89	; 137
    273e:	f3 e2       	ldi	r31, 0x23	; 35
    2740:	04 e0       	ldi	r16, 0x04	; 4
    2742:	05 93       	las	Z, r16
    2744:	3b c0       	rjmp	.+118    	; 0x27bc <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2746:	80 e1       	ldi	r24, 0x10	; 16
    2748:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    274c:	c1 e0       	ldi	r28, 0x01	; 1
    274e:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    2750:	04 df       	rcall	.-504    	; 0x255a <udd_ep_abort>
    2752:	8c 2f       	mov	r24, r28
    2754:	80 68       	ori	r24, 0x80	; 128
    2756:	01 df       	rcall	.-510    	; 0x255a <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    2758:	cf 5f       	subi	r28, 0xFF	; 255
    275a:	c5 30       	cpi	r28, 0x05	; 5
    275c:	c1 f7       	brne	.-16     	; 0x274e <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    275e:	0e 94 1d 0a 	call	0x143a	; 0x143a <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2762:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2766:	e4 e7       	ldi	r30, 0x74	; 116
    2768:	f3 e2       	ldi	r31, 0x23	; 35
    276a:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    276c:	96 e0       	ldi	r25, 0x06	; 6
    276e:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2770:	80 e4       	ldi	r24, 0x40	; 64
    2772:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2774:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2776:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2778:	85 8f       	std	Z+29, r24	; 0x1d
    277a:	85 e6       	ldi	r24, 0x65	; 101
    277c:	93 e2       	ldi	r25, 0x23	; 35
    277e:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    2780:	91 8f       	std	Z+25, r25	; 0x19
    2782:	9b d9       	rcall	.-3274   	; 0x1aba <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2784:	1b c0       	rjmp	.+54     	; 0x27bc <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    2786:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    278a:	86 ff       	sbrs	r24, 6
    278c:	07 c0       	rjmp	.+14     	; 0x279c <__vector_125+0x132>
    278e:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2790:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2794:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2796:	59 d9       	rcall	.-3406   	; 0x1a4a <udd_sleep_mode>
    2798:	34 d1       	rcall	.+616    	; 0x2a02 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    279a:	10 c0       	rjmp	.+32     	; 0x27bc <__vector_125+0x152>
    279c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    27a0:	85 ff       	sbrs	r24, 5
    27a2:	0c c0       	rjmp	.+24     	; 0x27bc <__vector_125+0x152>
    27a4:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    27a6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    27aa:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    27ac:	4e d9       	rcall	.-3428   	; 0x1a4a <udd_sleep_mode>
    27ae:	2a d1       	rcall	.+596    	; 0x2a04 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    27b0:	05 c0       	rjmp	.+10     	; 0x27bc <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    27b2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    27b6:	84 fd       	sbrc	r24, 4
    27b8:	c6 cf       	rjmp	.-116    	; 0x2746 <__vector_125+0xdc>
    27ba:	e5 cf       	rjmp	.-54     	; 0x2786 <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    27bc:	ff 91       	pop	r31
    27be:	ef 91       	pop	r30
    27c0:	cf 91       	pop	r28
    27c2:	bf 91       	pop	r27
    27c4:	af 91       	pop	r26
    27c6:	9f 91       	pop	r25
    27c8:	8f 91       	pop	r24
    27ca:	7f 91       	pop	r23
    27cc:	6f 91       	pop	r22
    27ce:	5f 91       	pop	r21
    27d0:	4f 91       	pop	r20
    27d2:	3f 91       	pop	r19
    27d4:	2f 91       	pop	r18
    27d6:	0f 91       	pop	r16
    27d8:	0f 90       	pop	r0
    27da:	0b be       	out	0x3b, r0	; 59
    27dc:	0f 90       	pop	r0
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	0f 90       	pop	r0
    27e2:	1f 90       	pop	r1
    27e4:	18 95       	reti

000027e6 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    27e6:	1f 92       	push	r1
    27e8:	0f 92       	push	r0
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	0f 92       	push	r0
    27ee:	11 24       	eor	r1, r1
    27f0:	0b b6       	in	r0, 0x3b	; 59
    27f2:	0f 92       	push	r0
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	2f 93       	push	r18
    27fa:	3f 93       	push	r19
    27fc:	4f 93       	push	r20
    27fe:	5f 93       	push	r21
    2800:	6f 93       	push	r22
    2802:	7f 93       	push	r23
    2804:	8f 93       	push	r24
    2806:	9f 93       	push	r25
    2808:	af 93       	push	r26
    280a:	bf 93       	push	r27
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	ef 93       	push	r30
    2812:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2814:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2818:	81 fd       	sbrc	r24, 1
    281a:	03 c0       	rjmp	.+6      	; 0x2822 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    281c:	46 da       	rcall	.-2932   	; 0x1caa <udd_ctrl_interrupt_tc_setup>
    281e:	81 11       	cpse	r24, r1
    2820:	c3 c0       	rjmp	.+390    	; 0x29a8 <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2822:	82 e0       	ldi	r24, 0x02	; 2
    2824:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2828:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    282c:	81 95       	neg	r24
    282e:	88 0f       	add	r24, r24
    2830:	e8 e8       	ldi	r30, 0x88	; 136
    2832:	f3 e2       	ldi	r31, 0x23	; 35
    2834:	e8 1b       	sub	r30, r24
    2836:	f1 09       	sbc	r31, r1
    2838:	20 81       	ld	r18, Z
    283a:	31 81       	ldd	r19, Z+1	; 0x01
    283c:	28 58       	subi	r18, 0x88	; 136
    283e:	33 42       	sbci	r19, 0x23	; 35
    2840:	36 95       	lsr	r19
    2842:	27 95       	ror	r18
    2844:	36 95       	lsr	r19
    2846:	27 95       	ror	r18
    2848:	36 95       	lsr	r19
    284a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    284c:	82 2f       	mov	r24, r18
    284e:	86 95       	lsr	r24
    2850:	20 fd       	sbrc	r18, 0
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <__vector_126+0x72>
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	01 c0       	rjmp	.+2      	; 0x285a <__vector_126+0x74>
    2858:	90 e8       	ldi	r25, 0x80	; 128
    285a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    285c:	e8 2f       	mov	r30, r24
    285e:	ef 70       	andi	r30, 0x0F	; 15
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	ee 0f       	add	r30, r30
    2864:	ff 1f       	adc	r31, r31
    2866:	28 2f       	mov	r18, r24
    2868:	08 2e       	mov	r0, r24
    286a:	00 0c       	add	r0, r0
    286c:	33 0b       	sbc	r19, r19
    286e:	22 27       	eor	r18, r18
    2870:	33 0f       	add	r19, r19
    2872:	22 1f       	adc	r18, r18
    2874:	33 27       	eor	r19, r19
    2876:	e2 0f       	add	r30, r18
    2878:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    287a:	df 01       	movw	r26, r30
    287c:	aa 0f       	add	r26, r26
    287e:	bb 1f       	adc	r27, r27
    2880:	aa 0f       	add	r26, r26
    2882:	bb 1f       	adc	r27, r27
    2884:	aa 0f       	add	r26, r26
    2886:	bb 1f       	adc	r27, r27
    2888:	ac 58       	subi	r26, 0x8C	; 140
    288a:	bc 4d       	sbci	r27, 0xDC	; 220
    288c:	54 96       	adiw	r26, 0x14	; 20
    288e:	9c 91       	ld	r25, X
    2890:	95 ff       	sbrs	r25, 5
    2892:	8a c0       	rjmp	.+276    	; 0x29a8 <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2894:	ee 0f       	add	r30, r30
    2896:	ff 1f       	adc	r31, r31
    2898:	ee 0f       	add	r30, r30
    289a:	ff 1f       	adc	r31, r31
    289c:	ee 0f       	add	r30, r30
    289e:	ff 1f       	adc	r31, r31
    28a0:	e8 57       	subi	r30, 0x78	; 120
    28a2:	fc 4d       	sbci	r31, 0xDC	; 220
    28a4:	00 e2       	ldi	r16, 0x20	; 32
    28a6:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    28a8:	81 11       	cpse	r24, r1
    28aa:	79 c0       	rjmp	.+242    	; 0x299e <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    28ac:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udd_ep_control_state>
    28b0:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    28b2:	19 f4       	brne	.+6      	; 0x28ba <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    28b4:	43 d9       	rcall	.-3450   	; 0x1b3c <udd_ctrl_endofrequest>
    28b6:	01 d9       	rcall	.-3582   	; 0x1aba <udd_ctrl_init>
    28b8:	77 c0       	rjmp	.+238    	; 0x29a8 <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    28ba:	00 91 8a 23 	lds	r16, 0x238A	; 0x80238a <udd_sram+0x16>
    28be:	10 91 8b 23 	lds	r17, 0x238B	; 0x80238b <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    28c2:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xa>
    28c6:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xb>
    28ca:	c0 91 6d 23 	lds	r28, 0x236D	; 0x80236d <udd_ctrl_payload_nb_trans>
    28ce:	d0 91 6e 23 	lds	r29, 0x236E	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    28d2:	98 01       	movw	r18, r16
    28d4:	2c 0f       	add	r18, r28
    28d6:	3d 1f       	adc	r19, r29
    28d8:	82 17       	cp	r24, r18
    28da:	93 07       	cpc	r25, r19
    28dc:	18 f4       	brcc	.+6      	; 0x28e4 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    28de:	8c 01       	movw	r16, r24
    28e0:	0c 1b       	sub	r16, r28
    28e2:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    28e4:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <udd_g_ctrlreq+0x8>
    28e8:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <udd_g_ctrlreq+0x9>
    28ec:	a8 01       	movw	r20, r16
    28ee:	65 e6       	ldi	r22, 0x65	; 101
    28f0:	73 e2       	ldi	r23, 0x23	; 35
    28f2:	8c 0f       	add	r24, r28
    28f4:	9d 1f       	adc	r25, r29
    28f6:	d1 d0       	rcall	.+418    	; 0x2a9a <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    28f8:	c0 0f       	add	r28, r16
    28fa:	d1 1f       	adc	r29, r17
    28fc:	c0 93 6d 23 	sts	0x236D, r28	; 0x80236d <udd_ctrl_payload_nb_trans>
    2900:	d0 93 6e 23 	sts	0x236E, r29	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2904:	08 30       	cpi	r16, 0x08	; 8
    2906:	11 05       	cpc	r17, r1
    2908:	69 f4       	brne	.+26     	; 0x2924 <__vector_126+0x13e>
    290a:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
    290e:	90 91 70 23 	lds	r25, 0x2370	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    2912:	8c 0f       	add	r24, r28
    2914:	9d 1f       	adc	r25, r29
    2916:	20 91 ec 23 	lds	r18, 0x23EC	; 0x8023ec <udd_g_ctrlreq+0x6>
    291a:	30 91 ed 23 	lds	r19, 0x23ED	; 0x8023ed <udd_g_ctrlreq+0x7>
    291e:	82 17       	cp	r24, r18
    2920:	93 07       	cpc	r25, r19
    2922:	80 f0       	brcs	.+32     	; 0x2944 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2924:	e6 ee       	ldi	r30, 0xE6	; 230
    2926:	f3 e2       	ldi	r31, 0x23	; 35
    2928:	c2 87       	std	Z+10, r28	; 0x0a
    292a:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    292c:	06 84       	ldd	r0, Z+14	; 0x0e
    292e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2930:	e0 2d       	mov	r30, r0
    2932:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2934:	29 f0       	breq	.+10     	; 0x2940 <__vector_126+0x15a>
    2936:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2938:	81 11       	cpse	r24, r1
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <__vector_126+0x15a>
    293c:	e3 d8       	rcall	.-3642   	; 0x1b04 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    293e:	34 c0       	rjmp	.+104    	; 0x29a8 <__vector_126+0x1c2>
    2940:	ef d8       	rcall	.-3618   	; 0x1b20 <udd_ctrl_send_zlp_in>
    2942:	32 c0       	rjmp	.+100    	; 0x29a8 <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2944:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_g_ctrlreq+0xa>
    2948:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udd_g_ctrlreq+0xb>
    294c:	c8 17       	cp	r28, r24
    294e:	d9 07       	cpc	r29, r25
    2950:	f9 f4       	brne	.+62     	; 0x2990 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2952:	e0 91 f4 23 	lds	r30, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0xe>
    2956:	f0 91 f5 23 	lds	r31, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0xf>
    295a:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    295c:	11 f4       	brne	.+4      	; 0x2962 <__vector_126+0x17c>
    295e:	d2 d8       	rcall	.-3676   	; 0x1b04 <udd_ctrl_stall_data>
    2960:	23 c0       	rjmp	.+70     	; 0x29a8 <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2962:	19 95       	eicall
    2964:	81 11       	cpse	r24, r1
    2966:	02 c0       	rjmp	.+4      	; 0x296c <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2968:	cd d8       	rcall	.-3686   	; 0x1b04 <udd_ctrl_stall_data>
    296a:	1e c0       	rjmp	.+60     	; 0x29a8 <__vector_126+0x1c2>
    296c:	20 91 6f 23 	lds	r18, 0x236F	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2970:	30 91 70 23 	lds	r19, 0x2370	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    2974:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <udd_ctrl_payload_nb_trans>
    2978:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    297c:	82 0f       	add	r24, r18
    297e:	93 1f       	adc	r25, r19
    2980:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <udd_ctrl_prev_payload_nb_trans>
    2984:	90 93 70 23 	sts	0x2370, r25	; 0x802370 <udd_ctrl_prev_payload_nb_trans+0x1>
    2988:	10 92 6d 23 	sts	0x236D, r1	; 0x80236d <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    298c:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_ctrl_payload_nb_trans+0x1>
    2990:	e8 e8       	ldi	r30, 0x88	; 136
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2992:	f3 e2       	ldi	r31, 0x23	; 35
    2994:	02 e0       	ldi	r16, 0x02	; 2
    2996:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2998:	00 e2       	ldi	r16, 0x20	; 32
    299a:	06 93       	lac	Z, r16
    299c:	05 c0       	rjmp	.+10     	; 0x29a8 <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    299e:	80 38       	cpi	r24, 0x80	; 128
    29a0:	11 f4       	brne	.+4      	; 0x29a6 <__vector_126+0x1c0>
		udd_ctrl_in_sent();
    29a2:	d4 d8       	rcall	.-3672   	; 0x1b4c <udd_ctrl_in_sent>
    29a4:	01 c0       	rjmp	.+2      	; 0x29a8 <__vector_126+0x1c2>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    29a6:	f2 d9       	rcall	.-3100   	; 0x1d8c <udd_ep_trans_complet>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    29a8:	ff 91       	pop	r31
    29aa:	ef 91       	pop	r30
	}
#endif

udd_interrupt_tc_end:
	return;
}
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	bf 91       	pop	r27
    29b2:	af 91       	pop	r26
    29b4:	9f 91       	pop	r25
    29b6:	8f 91       	pop	r24
    29b8:	7f 91       	pop	r23
    29ba:	6f 91       	pop	r22
    29bc:	5f 91       	pop	r21
    29be:	4f 91       	pop	r20
    29c0:	3f 91       	pop	r19
    29c2:	2f 91       	pop	r18
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	0f 90       	pop	r0
    29ca:	0b be       	out	0x3b, r0	; 59
    29cc:	0f 90       	pop	r0
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	0f 90       	pop	r0
    29d2:	1f 90       	pop	r1
    29d4:	18 95       	reti

000029d6 <main>:


int main (void)
{
	// initializes vector table
	irq_initialize_vectors();
    29d6:	87 e0       	ldi	r24, 0x07	; 7
    29d8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	// enables CPU interrupts
	cpu_irq_enable();
    29dc:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    29de:	e0 ee       	ldi	r30, 0xE0	; 224
    29e0:	f3 e2       	ldi	r31, 0x23	; 35
    29e2:	10 82       	st	Z, r1
    29e4:	11 82       	std	Z+1, r1	; 0x01
    29e6:	12 82       	std	Z+2, r1	; 0x02
    29e8:	13 82       	std	Z+3, r1	; 0x03
    29ea:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	85 83       	std	Z+5, r24	; 0x05
	// initialize sleep manager
	sleepmgr_init();
	// initialize clock
	sysclk_init();
    29f0:	0e 94 89 06 	call	0xd12	; 0xd12 <sysclk_init>

	// initializes i/o pins & sub-devices
	io_ui_process();
    29f4:	0e 94 ff 05 	call	0xbfe	; 0xbfe <io_ui_process>

	// starts USB device controller
	udc_start();
    29f8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <udc_start>

	// startup sequence (blocking)
	startup_ui_process();
    29fc:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <startup_ui_process>
    2a00:	ff cf       	rjmp	.-2      	; 0x2a00 <main+0x2a>

00002a02 <main_suspend_action>:


/* -------------------------------------- */
/* ----------------- USB ---------------- */
/* -------------------------------------- */
void main_suspend_action(void) { }
    2a02:	08 95       	ret

00002a04 <main_resume_action>:
void main_resume_action(void) { }
    2a04:	08 95       	ret

00002a06 <main_sof_action>:

void main_sof_action(void) {
	if (!main_b_kbd_enable)
    2a06:	80 91 df 23 	lds	r24, 0x23DF	; 0x8023df <main_b_kbd_enable>
    2a0a:	88 23       	and	r24, r24
    2a0c:	91 f0       	breq	.+36     	; 0x2a32 <main_sof_action+0x2c>
		return;
	kbd_ui_process();
    2a0e:	0e 94 26 06 	call	0xc4c	; 0xc4c <kbd_ui_process>

	if (!main_b_generic_enable)
    2a12:	80 91 de 23 	lds	r24, 0x23DE	; 0x8023de <main_b_generic_enable>
    2a16:	88 23       	and	r24, r24
    2a18:	61 f0       	breq	.+24     	; 0x2a32 <main_sof_action+0x2c>
		return;
	jstk_ui_process();
    2a1a:	0e 94 29 06 	call	0xc52	; 0xc52 <jstk_ui_process>

	if (!main_b_led_enable)
    2a1e:	80 91 dd 23 	lds	r24, 0x23DD	; 0x8023dd <main_b_led_enable>
    2a22:	88 23       	and	r24, r24
    2a24:	31 f0       	breq	.+12     	; 0x2a32 <main_sof_action+0x2c>
		return;

	gui_ui_process();
    2a26:	0e 94 01 06 	call	0xc02	; 0xc02 <gui_ui_process>
	status_ui_process();
    2a2a:	0e 94 53 06 	call	0xca6	; 0xca6 <status_ui_process>

	idle_ui_process();
    2a2e:	0c 94 80 06 	jmp	0xd00	; 0xd00 <idle_ui_process>
    2a32:	08 95       	ret

00002a34 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2a34:	08 95       	ret

00002a36 <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2a36:	08 95       	ret

00002a38 <main_kbd_enable>:

/* -------------------------------------- */
/* -------------- Keyboard -------------- */
/* -------------------------------------- */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	80 93 df 23 	sts	0x23DF, r24	; 0x8023df <main_b_kbd_enable>
	return true;
}
    2a3e:	08 95       	ret

00002a40 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2a40:	10 92 df 23 	sts	0x23DF, r1	; 0x8023df <main_b_kbd_enable>
    2a44:	08 95       	ret

00002a46 <main_generic_enable>:

/* -------------------------------------- */
/* -------------- Joystick -------------- */
/* -------------------------------------- */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	80 93 de 23 	sts	0x23DE, r24	; 0x8023de <main_b_generic_enable>
	return true;
}
    2a4c:	08 95       	ret

00002a4e <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2a4e:	10 92 de 23 	sts	0x23DE, r1	; 0x8023de <main_b_generic_enable>
    2a52:	08 95       	ret

00002a54 <main_led_enable>:

/* -------------------------------------- */
/* ---------------- LEDs ---------------- */
/* -------------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	80 93 dd 23 	sts	0x23DD, r24	; 0x8023dd <main_b_led_enable>
	return true;
}
    2a5a:	08 95       	ret

00002a5c <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2a5c:	10 92 dd 23 	sts	0x23DD, r1	; 0x8023dd <main_b_led_enable>
    2a60:	08 95       	ret

00002a62 <__udivmodhi4>:
    2a62:	aa 1b       	sub	r26, r26
    2a64:	bb 1b       	sub	r27, r27
    2a66:	51 e1       	ldi	r21, 0x11	; 17
    2a68:	07 c0       	rjmp	.+14     	; 0x2a78 <__udivmodhi4_ep>

00002a6a <__udivmodhi4_loop>:
    2a6a:	aa 1f       	adc	r26, r26
    2a6c:	bb 1f       	adc	r27, r27
    2a6e:	a6 17       	cp	r26, r22
    2a70:	b7 07       	cpc	r27, r23
    2a72:	10 f0       	brcs	.+4      	; 0x2a78 <__udivmodhi4_ep>
    2a74:	a6 1b       	sub	r26, r22
    2a76:	b7 0b       	sbc	r27, r23

00002a78 <__udivmodhi4_ep>:
    2a78:	88 1f       	adc	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	5a 95       	dec	r21
    2a7e:	a9 f7       	brne	.-22     	; 0x2a6a <__udivmodhi4_loop>
    2a80:	80 95       	com	r24
    2a82:	90 95       	com	r25
    2a84:	bc 01       	movw	r22, r24
    2a86:	cd 01       	movw	r24, r26
    2a88:	08 95       	ret

00002a8a <__tablejump2__>:
    2a8a:	ee 0f       	add	r30, r30
    2a8c:	ff 1f       	adc	r31, r31
    2a8e:	88 1f       	adc	r24, r24
    2a90:	8b bf       	out	0x3b, r24	; 59
    2a92:	07 90       	elpm	r0, Z+
    2a94:	f6 91       	elpm	r31, Z
    2a96:	e0 2d       	mov	r30, r0
    2a98:	19 94       	eijmp

00002a9a <memcpy>:
    2a9a:	fb 01       	movw	r30, r22
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <memcpy+0xa>
    2aa0:	01 90       	ld	r0, Z+
    2aa2:	0d 92       	st	X+, r0
    2aa4:	41 50       	subi	r20, 0x01	; 1
    2aa6:	50 40       	sbci	r21, 0x00	; 0
    2aa8:	d8 f7       	brcc	.-10     	; 0x2aa0 <memcpy+0x6>
    2aaa:	08 95       	ret

00002aac <_exit>:
    2aac:	f8 94       	cli

00002aae <__stop_program>:
    2aae:	ff cf       	rjmp	.-2      	; 0x2aae <__stop_program>
