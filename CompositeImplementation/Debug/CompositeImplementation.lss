
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00802000  00002c4e  00002ce2  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000023f  00802196  00802196  00002e7a  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ea8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  00002ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b304  00000000  00000000  00003488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052c4  00000000  00000000  0000e78c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009baa  00000000  00000000  00013a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cbc  00000000  00000000  0001d5fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036d10  00000000  00000000  0001e2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003698  00000000  00000000  00054fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000748  00000000  00000000  00058660  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd69  00000000  00000000  00058da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 06 14 	jmp	0x280c	; 0x280c <__vector_125>
     1f8:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__vector_126>
     1fc:	cc 03       	fmulsu	r20, r20
     1fe:	12 04       	cpc	r1, r2
     200:	c2 03       	fmuls	r20, r18
     202:	14 04       	cpc	r1, r4
     204:	c4 03       	fmuls	r20, r20
     206:	c6 03       	fmuls	r20, r22
     208:	c8 03       	fmulsu	r20, r16
     20a:	ca 03       	fmulsu	r20, r18
     20c:	cc 03       	fmulsu	r20, r20
     20e:	f3 0e       	add	r15, r19
     210:	f6 0e       	add	r15, r22
     212:	f9 0e       	add	r15, r25
     214:	fc 0e       	add	r15, r28
     216:	ff 0e       	add	r15, r31
     218:	02 0f       	add	r16, r18
     21a:	05 0f       	add	r16, r21

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	ee e4       	ldi	r30, 0x4E	; 78
     234:	fc e2       	ldi	r31, 0x2C	; 44
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a6 39       	cpi	r26, 0x96	; 150
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a6 e9       	ldi	r26, 0x96	; 150
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a5 3d       	cpi	r26, 0xD5	; 213
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <main>
     25a:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep) {
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_led_b_report_in_free = true;
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:
     264:	30 91 c7 23 	lds	r19, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
     268:	20 91 c8 23 	lds	r18, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
     278:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
     27c:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
     284:	e5 ec       	ldi	r30, 0xC5	; 197
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	86 e9       	ldi	r24, 0x96	; 150
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
     298:	87 e7       	ldi	r24, 0x77	; 119
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2b4:	07 e7       	ldi	r16, 0x77	; 119
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	46 e9       	ldi	r20, 0x96	; 150
     2be:	51 e2       	ldi	r21, 0x21	; 33
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 b4 12 	call	0x2568	; 0x2568 <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
}
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	08 95       	ret

000002ce <udi_hid_led_enable>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep);

/* --------------------------------------------------------------------- */

bool udi_hid_led_enable(void) {
     2ce:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d0:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2d4:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <udi_hid_led_protocol>
	udi_hid_led_b_report_in_free = true;
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <__data_end>

	if(!udi_hid_led_report_out_enable())
     2de:	e8 df       	rcall	.-48     	; 0x2b0 <udi_hid_led_report_out_enable>
     2e0:	c8 2f       	mov	r28, r24
     2e2:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2e4:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <main_led_enable>
	return true;
}
     2e8:	8c 2f       	mov	r24, r28
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2ee:	81 11       	cpse	r24, r1
     2f0:	07 c0       	rjmp	.+14     	; 0x300 <udi_hid_led_report_out_received+0x12>
     2f2:	61 30       	cpi	r22, 0x01	; 1
     2f4:	71 05       	cpc	r23, r1
     2f6:	21 f4       	brne	.+8      	; 0x300 <udi_hid_led_report_out_received+0x12>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     2f8:	86 e9       	ldi	r24, 0x96	; 150
     2fa:	91 e2       	ldi	r25, 0x21	; 33
     2fc:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <main_led_report_out>
	}
	udi_hid_led_report_out_enable();
     300:	d7 cf       	rjmp	.-82     	; 0x2b0 <udi_hid_led_report_out_enable>
     302:	08 95       	ret

00000304 <udi_hid_led_disable>:
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     304:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <main_led_disable>
     308:	08 95       	ret

0000030a <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     30a:	22 e3       	ldi	r18, 0x32	; 50
     30c:	31 e0       	ldi	r19, 0x01	; 1
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e2       	ldi	r21, 0x20	; 32
     312:	68 e9       	ldi	r22, 0x98	; 152
     314:	71 e2       	ldi	r23, 0x21	; 33
     316:	8a e9       	ldi	r24, 0x9A	; 154
     318:	91 e2       	ldi	r25, 0x21	; 33
     31a:	d1 c7       	rjmp	.+4002   	; 0x12be <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     31c:	08 95       	ret

0000031e <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     31e:	e0 e0       	ldi	r30, 0x00	; 0
     320:	f6 e0       	ldi	r31, 0x06	; 6
     322:	9f ef       	ldi	r25, 0xFF	; 255
     324:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     326:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     328:	e0 e2       	ldi	r30, 0x20	; 32
     32a:	f6 e0       	ldi	r31, 0x06	; 6
     32c:	3f e3       	ldi	r19, 0x3F	; 63
     32e:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     330:	88 e1       	ldi	r24, 0x18	; 24
     332:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     334:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     336:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     338:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     33a:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     33c:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     33e:	20 ec       	ldi	r18, 0xC0	; 192
     340:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     342:	40 e4       	ldi	r20, 0x40	; 64
     344:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     346:	40 e8       	ldi	r20, 0x80	; 128
     348:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     34a:	e0 e4       	ldi	r30, 0x40	; 64
     34c:	f6 e0       	ldi	r31, 0x06	; 6
     34e:	4c ef       	ldi	r20, 0xFC	; 252
     350:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     352:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     354:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     356:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     358:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     35a:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     35c:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     35e:	43 e0       	ldi	r20, 0x03	; 3
     360:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     362:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     364:	e0 e6       	ldi	r30, 0x60	; 96
     366:	f6 e0       	ldi	r31, 0x06	; 6
     368:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36a:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36c:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36e:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     370:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     372:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     374:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     376:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     378:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     37a:	e0 e8       	ldi	r30, 0x80	; 128
     37c:	f6 e0       	ldi	r31, 0x06	; 6
     37e:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     380:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     382:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     384:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     386:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     388:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     38a:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     38c:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     38e:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     390:	e0 ea       	ldi	r30, 0xA0	; 160
     392:	f6 e0       	ldi	r31, 0x06	; 6
     394:	90 ef       	ldi	r25, 0xF0	; 240
     396:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     398:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     39a:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     39c:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     39e:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     3a0:	8f e0       	ldi	r24, 0x0F	; 15
     3a2:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     3a4:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     3a6:	9c d2       	rcall	.+1336   	; 0x8e0 <led_init>
	keypad_init();
     3a8:	0d c1       	rjmp	.+538    	; 0x5c4 <keypad_init>
     3aa:	08 95       	ret

000003ac <jstk_readVertIndex>:
     3ac:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     3b0:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	92 2b       	or	r25, r18
     3b8:	96 95       	lsr	r25
     3ba:	87 95       	ror	r24
     3bc:	96 95       	lsr	r25
     3be:	87 95       	ror	r24
     3c0:	bc 01       	movw	r22, r24
     3c2:	7f 70       	andi	r23, 0x0F	; 15
     3c4:	80 ff       	sbrs	r24, 0
     3c6:	17 c0       	rjmp	.+46     	; 0x3f6 <jstk_readVertIndex+0x4a>
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	e1 e0       	ldi	r30, 0x01	; 1
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	82 2f       	mov	r24, r18
     3d2:	af 01       	movw	r20, r30
     3d4:	02 2e       	mov	r0, r18
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <jstk_readVertIndex+0x30>
     3d8:	44 0f       	add	r20, r20
     3da:	55 1f       	adc	r21, r21
     3dc:	0a 94       	dec	r0
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <jstk_readVertIndex+0x2c>
     3e0:	46 23       	and	r20, r22
     3e2:	57 23       	and	r21, r23
     3e4:	45 2b       	or	r20, r21
     3e6:	41 f0       	breq	.+16     	; 0x3f8 <jstk_readVertIndex+0x4c>
     3e8:	2f 5f       	subi	r18, 0xFF	; 255
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	2c 30       	cpi	r18, 0x0C	; 12
     3ee:	31 05       	cpc	r19, r1
     3f0:	79 f7       	brne	.-34     	; 0x3d0 <jstk_readVertIndex+0x24>
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	08 95       	ret
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	08 95       	ret

000003fa <jstk_readHoriIndex>:
     3fa:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     3fe:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	92 2b       	or	r25, r18
     406:	bc 01       	movw	r22, r24
     408:	7f 70       	andi	r23, 0x0F	; 15
     40a:	80 ff       	sbrs	r24, 0
     40c:	17 c0       	rjmp	.+46     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     40e:	21 e0       	ldi	r18, 0x01	; 1
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	e1 e0       	ldi	r30, 0x01	; 1
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	82 2f       	mov	r24, r18
     418:	af 01       	movw	r20, r30
     41a:	02 2e       	mov	r0, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41e:	44 0f       	add	r20, r20
     420:	55 1f       	adc	r21, r21
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     426:	46 23       	and	r20, r22
     428:	57 23       	and	r21, r23
     42a:	45 2b       	or	r20, r21
     42c:	41 f0       	breq	.+16     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	2c 30       	cpi	r18, 0x0C	; 12
     434:	31 05       	cpc	r19, r1
     436:	79 f7       	brne	.-34     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	08 95       	ret
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	08 95       	ret

00000440 <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     440:	88 23       	and	r24, r24
     442:	f4 f1       	brlt	.+124    	; 0x4c0 <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     444:	9b ef       	ldi	r25, 0xFB	; 251
     446:	98 0f       	add	r25, r24
     448:	92 30       	cpi	r25, 0x02	; 2
     44a:	e0 f1       	brcs	.+120    	; 0x4c4 <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     44c:	85 30       	cpi	r24, 0x05	; 5
     44e:	34 f4       	brge	.+12     	; 0x45c <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     450:	95 e0       	ldi	r25, 0x05	; 5
     452:	98 1b       	sub	r25, r24
     454:	92 30       	cpi	r25, 0x02	; 2
     456:	08 f0       	brcs	.+2      	; 0x45a <jstk_ledMask+0x1a>
     458:	42 c0       	rjmp	.+132    	; 0x4de <jstk_ledMask+0x9e>
     45a:	36 c0       	rjmp	.+108    	; 0x4c8 <jstk_ledMask+0x88>
     45c:	9a ef       	ldi	r25, 0xFA	; 250
     45e:	98 0f       	add	r25, r24
     460:	92 30       	cpi	r25, 0x02	; 2
     462:	b0 f5       	brcc	.+108    	; 0x4d0 <jstk_ledMask+0x90>
     464:	31 c0       	rjmp	.+98     	; 0x4c8 <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     466:	62 e0       	ldi	r22, 0x02	; 2
     468:	23 e0       	ldi	r18, 0x03	; 3
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     470:	e1 e0       	ldi	r30, 0x01	; 1
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	af 01       	movw	r20, r30
     476:	02 2e       	mov	r0, r18
     478:	02 c0       	rjmp	.+4      	; 0x47e <jstk_ledMask+0x3e>
     47a:	44 0f       	add	r20, r20
     47c:	55 1f       	adc	r21, r21
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <jstk_ledMask+0x3a>
     482:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     484:	9f 5f       	subi	r25, 0xFF	; 255
     486:	21 50       	subi	r18, 0x01	; 1
     488:	31 09       	sbc	r19, r1
     48a:	96 17       	cp	r25, r22
     48c:	98 f3       	brcs	.-26     	; 0x474 <jstk_ledMask+0x34>
     48e:	08 95       	ret
     490:	81 50       	subi	r24, 0x01	; 1
     492:	48 2f       	mov	r20, r24
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	4b 5f       	subi	r20, 0xFB	; 251
     498:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     49a:	24 e0       	ldi	r18, 0x04	; 4
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     4a0:	e1 e0       	ldi	r30, 0x01	; 1
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	bf 01       	movw	r22, r30
     4a6:	02 2e       	mov	r0, r18
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <jstk_ledMask+0x6e>
     4aa:	66 0f       	add	r22, r22
     4ac:	77 1f       	adc	r23, r23
     4ae:	0a 94       	dec	r0
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <jstk_ledMask+0x6a>
     4b2:	86 2b       	or	r24, r22
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4b8:	24 17       	cp	r18, r20
     4ba:	35 07       	cpc	r19, r21
     4bc:	99 f7       	brne	.-26     	; 0x4a4 <jstk_ledMask+0x64>
     4be:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     4c4:	88 e1       	ldi	r24, 0x18	; 24
     4c6:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4c8:	85 30       	cpi	r24, 0x05	; 5
     4ca:	6c f2       	brlt	.-102    	; 0x466 <jstk_ledMask+0x26>
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	e0 cf       	rjmp	.-64     	; 0x490 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4d0:	85 50       	subi	r24, 0x05	; 5
     4d2:	85 30       	cpi	r24, 0x05	; 5
     4d4:	08 f0       	brcs	.+2      	; 0x4d8 <jstk_ledMask+0x98>
     4d6:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4d8:	81 11       	cpse	r24, r1
     4da:	da cf       	rjmp	.-76     	; 0x490 <jstk_ledMask+0x50>
     4dc:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4de:	66 e0       	ldi	r22, 0x06	; 6
     4e0:	68 1b       	sub	r22, r24
     4e2:	65 30       	cpi	r22, 0x05	; 5
     4e4:	08 f0       	brcs	.+2      	; 0x4e8 <jstk_ledMask+0xa8>
     4e6:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     4e8:	61 11       	cpse	r22, r1
     4ea:	be cf       	rjmp	.-132    	; 0x468 <jstk_ledMask+0x28>
     4ec:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     4ee:	08 95       	ret

000004f0 <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     4f0:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     4f2:	5c df       	rcall	.-328    	; 0x3ac <jstk_readVertIndex>
     4f4:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     4f6:	81 df       	rcall	.-254    	; 0x3fa <jstk_readHoriIndex>
     4f8:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     4fa:	24 f4       	brge	.+8      	; 0x504 <jstk_readMask+0x14>
     4fc:	88 23       	and	r24, r24
     4fe:	c4 f0       	brlt	.+48     	; 0x530 <jstk_readMask+0x40>
     500:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     502:	09 c0       	rjmp	.+18     	; 0x516 <jstk_readMask+0x26>
     504:	c6 30       	cpi	r28, 0x06	; 6
     506:	1c f0       	brlt	.+6      	; 0x50e <jstk_readMask+0x1e>
     508:	9b ef       	ldi	r25, 0xFB	; 251
     50a:	9c 0f       	add	r25, r28
     50c:	02 c0       	rjmp	.+4      	; 0x512 <jstk_readMask+0x22>
     50e:	95 e0       	ldi	r25, 0x05	; 5
     510:	9c 1b       	sub	r25, r28
     512:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     514:	54 f0       	brlt	.+20     	; 0x52a <jstk_readMask+0x3a>
     516:	86 30       	cpi	r24, 0x06	; 6
     518:	1c f0       	brlt	.+6      	; 0x520 <jstk_readMask+0x30>
     51a:	2b ef       	ldi	r18, 0xFB	; 251
     51c:	28 0f       	add	r18, r24
     51e:	02 c0       	rjmp	.+4      	; 0x524 <jstk_readMask+0x34>
     520:	25 e0       	ldi	r18, 0x05	; 5
     522:	28 1b       	sub	r18, r24
     524:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     526:	08 f4       	brcc	.+2      	; 0x52a <jstk_readMask+0x3a>
     528:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     52a:	8c 2f       	mov	r24, r28
     52c:	89 df       	rcall	.-238    	; 0x440 <jstk_ledMask>
     52e:	01 c0       	rjmp	.+2      	; 0x532 <jstk_readMask+0x42>
     530:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     532:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     534:	08 95       	ret

00000536 <jstk_usbTask>:
     536:	61 df       	rcall	.-318    	; 0x3fa <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     538:	88 23       	and	r24, r24
     53a:	3c f0       	brlt	.+14     	; 0x54a <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     53c:	e8 2f       	mov	r30, r24
     53e:	88 0f       	add	r24, r24
     540:	ff 0b       	sbc	r31, r31
     542:	e6 57       	subi	r30, 0x76	; 118
     544:	fe 4d       	sbci	r31, 0xDE	; 222
     546:	80 81       	ld	r24, Z
     548:	01 c0       	rjmp	.+2      	; 0x54c <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     54a:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     54c:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     550:	2d df       	rcall	.-422    	; 0x3ac <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     552:	88 23       	and	r24, r24
     554:	3c f0       	brlt	.+14     	; 0x564 <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     556:	e8 2f       	mov	r30, r24
     558:	88 0f       	add	r24, r24
     55a:	ff 0b       	sbc	r31, r31
     55c:	e6 57       	subi	r30, 0x76	; 118
     55e:	fe 4d       	sbci	r31, 0xDE	; 222
     560:	80 81       	ld	r24, Z
     562:	01 c0       	rjmp	.+2      	; 0x566 <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     564:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     566:	ec e9       	ldi	r30, 0x9C	; 156
     568:	f1 e2       	ldi	r31, 0x21	; 33
     56a:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     56c:	20 81       	ld	r18, Z
     56e:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     572:	29 13       	cpse	r18, r25
     574:	04 c0       	rjmp	.+8      	; 0x57e <jstk_usbTask+0x48>
     576:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     57a:	98 17       	cp	r25, r24
     57c:	71 f0       	breq	.+28     	; 0x59a <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     57e:	8c e9       	ldi	r24, 0x9C	; 156
     580:	91 e2       	ldi	r25, 0x21	; 33
     582:	ac d5       	rcall	.+2904   	; 0x10dc <udi_hid_generic_send_report_in>
     584:	88 23       	and	r24, r24
     586:	49 f0       	breq	.+18     	; 0x59a <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     588:	e6 e2       	ldi	r30, 0x26	; 38
     58a:	f0 e2       	ldi	r31, 0x20	; 32
     58c:	ac e9       	ldi	r26, 0x9C	; 156
     58e:	b1 e2       	ldi	r27, 0x21	; 33
     590:	8c 91       	ld	r24, X
     592:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     594:	11 96       	adiw	r26, 0x01	; 1
     596:	8c 91       	ld	r24, X
     598:	81 83       	std	Z+1, r24	; 0x01
     59a:	08 95       	ret

0000059c <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     59c:	a9 df       	rcall	.-174    	; 0x4f0 <jstk_readMask>
     59e:	80 93 bc 23 	sts	0x23BC, r24	; 0x8023bc <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     5a2:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     5a6:	90 93 bd 23 	sts	0x23BD, r25	; 0x8023bd <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     5aa:	90 91 bd 23 	lds	r25, 0x23BD	; 0x8023bd <jstk_testMode>
     5ae:	94 fd       	sbrc	r25, 4
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <joystick+0x24>
        if (jstk_mask) {
     5b2:	88 23       	and	r24, r24
            led_allOff();
     5b4:	31 f0       	breq	.+12     	; 0x5c2 <joystick+0x26>
     5b6:	9f d1       	rcall	.+830    	; 0x8f6 <led_allOff>
            led_on(jstk_mask);
     5b8:	80 91 bc 23 	lds	r24, 0x23BC	; 0x8023bc <jstk_mask>
     5bc:	a2 c1       	rjmp	.+836    	; 0x902 <led_on>
        }
    } else {                                // normal mode
        // led_allOff();                       // for testing
        jstk_usbTask();                     // send to USB
     5be:	08 95       	ret
     5c0:	ba cf       	rjmp	.-140    	; 0x536 <jstk_usbTask>
     5c2:	08 95       	ret

000005c4 <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     5c4:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <kpd_keyPressed>
     5c8:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <kpd_currState>
     5cc:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <kpd_prevState>
     5d0:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <kpd_exitTestMode>
     5d4:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <kpd_rowVal>
     5d8:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <kpd_code>
     5dc:	e0 eb       	ldi	r30, 0xB0	; 176
     5de:	f1 e2       	ldi	r31, 0x21	; 33
     5e0:	81 e6       	ldi	r24, 0x61	; 97
     5e2:	80 83       	st	Z, r24
     5e4:	80 e6       	ldi	r24, 0x60	; 96
     5e6:	81 83       	std	Z+1, r24	; 0x01
     5e8:	12 82       	std	Z+2, r1	; 0x02
     5ea:	13 82       	std	Z+3, r1	; 0x03
     5ec:	8f e5       	ldi	r24, 0x5F	; 95
     5ee:	84 83       	std	Z+4, r24	; 0x04
     5f0:	8e e5       	ldi	r24, 0x5E	; 94
     5f2:	85 83       	std	Z+5, r24	; 0x05
     5f4:	16 82       	std	Z+6, r1	; 0x06
     5f6:	17 82       	std	Z+7, r1	; 0x07
     5f8:	8d e5       	ldi	r24, 0x5D	; 93
     5fa:	80 87       	std	Z+8, r24	; 0x08
     5fc:	11 86       	std	Z+9, r1	; 0x09
     5fe:	12 86       	std	Z+10, r1	; 0x0a
     600:	13 86       	std	Z+11, r1	; 0x0b
     602:	14 86       	std	Z+12, r1	; 0x0c
     604:	15 86       	std	Z+13, r1	; 0x0d
     606:	89 e5       	ldi	r24, 0x59	; 89
     608:	86 87       	std	Z+14, r24	; 0x0e
     60a:	8b e5       	ldi	r24, 0x5B	; 91
     60c:	87 87       	std	Z+15, r24	; 0x0f
     60e:	10 8a       	std	Z+16, r1	; 0x10
     610:	11 8a       	std	Z+17, r1	; 0x11
     612:	8a e5       	ldi	r24, 0x5A	; 90
     614:	82 8b       	std	Z+18, r24	; 0x12
     616:	8c e5       	ldi	r24, 0x5C	; 92
     618:	83 8b       	std	Z+19, r24	; 0x13
     61a:	eb ea       	ldi	r30, 0xAB	; 171
     61c:	f1 e2       	ldi	r31, 0x21	; 33
     61e:	8e e0       	ldi	r24, 0x0E	; 14
     620:	80 83       	st	Z, r24
     622:	8d e0       	ldi	r24, 0x0D	; 13
     624:	81 83       	std	Z+1, r24	; 0x01
     626:	8b e0       	ldi	r24, 0x0B	; 11
     628:	82 83       	std	Z+2, r24	; 0x02
     62a:	87 e0       	ldi	r24, 0x07	; 7
     62c:	83 83       	std	Z+3, r24	; 0x03
     62e:	8f ef       	ldi	r24, 0xFF	; 255
     630:	84 83       	std	Z+4, r24	; 0x04
     632:	08 95       	ret

00000634 <keypad_poll>:
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	90 91 a1 21 	lds	r25, 0x21A1	; 0x8021a1 <prevRowMask.5327>
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	15 e0       	ldi	r17, 0x05	; 5
     646:	74 e0       	ldi	r23, 0x04	; 4
     648:	e0 ea       	ldi	r30, 0xA0	; 160
     64a:	f6 e0       	ldi	r31, 0x06	; 6
     64c:	a0 e2       	ldi	r26, 0x20	; 32
     64e:	b6 e0       	ldi	r27, 0x06	; 6
     650:	00 e8       	ldi	r16, 0x80	; 128
     652:	62 2f       	mov	r22, r18
     654:	e9 01       	movw	r28, r18
     656:	c5 55       	subi	r28, 0x55	; 85
     658:	de 4d       	sbci	r29, 0xDE	; 222
     65a:	88 81       	ld	r24, Y
     65c:	84 83       	std	Z+4, r24	; 0x04
     65e:	24 30       	cpi	r18, 0x04	; 4
     660:	21 f4       	brne	.+8      	; 0x66a <keypad_poll+0x36>
     662:	16 96       	adiw	r26, 0x06	; 6
     664:	0c 93       	st	X, r16
     666:	16 97       	sbiw	r26, 0x06	; 6
     668:	03 c0       	rjmp	.+6      	; 0x670 <keypad_poll+0x3c>
     66a:	15 96       	adiw	r26, 0x05	; 5
     66c:	0c 93       	st	X, r16
     66e:	15 97       	sbiw	r26, 0x05	; 5
     670:	80 85       	ldd	r24, Z+8	; 0x08
     672:	80 95       	com	r24
     674:	80 7f       	andi	r24, 0xF0	; 240
     676:	48 2f       	mov	r20, r24
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	ea 01       	movw	r28, r20
     67c:	21 97       	sbiw	r28, 0x01	; 1
     67e:	4c 23       	and	r20, r28
     680:	5d 23       	and	r21, r29
     682:	45 2b       	or	r20, r21
     684:	41 f0       	breq	.+16     	; 0x696 <keypad_poll+0x62>
     686:	90 95       	com	r25
     688:	98 23       	and	r25, r24
     68a:	09 f4       	brne	.+2      	; 0x68e <keypad_poll+0x5a>
     68c:	98 2f       	mov	r25, r24
     68e:	49 2f       	mov	r20, r25
     690:	41 95       	neg	r20
     692:	94 23       	and	r25, r20
     694:	01 c0       	rjmp	.+2      	; 0x698 <keypad_poll+0x64>
     696:	98 2f       	mov	r25, r24
     698:	90 32       	cpi	r25, 0x20	; 32
     69a:	51 f0       	breq	.+20     	; 0x6b0 <keypad_poll+0x7c>
     69c:	18 f4       	brcc	.+6      	; 0x6a4 <keypad_poll+0x70>
     69e:	90 31       	cpi	r25, 0x10	; 16
     6a0:	d9 f1       	breq	.+118    	; 0x718 <keypad_poll+0xe4>
     6a2:	0a c0       	rjmp	.+20     	; 0x6b8 <keypad_poll+0x84>
     6a4:	90 34       	cpi	r25, 0x40	; 64
     6a6:	d1 f1       	breq	.+116    	; 0x71c <keypad_poll+0xe8>
     6a8:	90 38       	cpi	r25, 0x80	; 128
     6aa:	31 f4       	brne	.+12     	; 0x6b8 <keypad_poll+0x84>
     6ac:	73 e0       	ldi	r23, 0x03	; 3
     6ae:	37 c0       	rjmp	.+110    	; 0x71e <keypad_poll+0xea>
     6b0:	99 23       	and	r25, r25
     6b2:	11 f0       	breq	.+4      	; 0x6b8 <keypad_poll+0x84>
     6b4:	16 2f       	mov	r17, r22
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	2f 5f       	subi	r18, 0xFF	; 255
     6ba:	3f 4f       	sbci	r19, 0xFF	; 255
     6bc:	98 2f       	mov	r25, r24
     6be:	25 30       	cpi	r18, 0x05	; 5
     6c0:	31 05       	cpc	r19, r1
     6c2:	39 f6       	brne	.-114    	; 0x652 <keypad_poll+0x1e>
     6c4:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <prevRowMask.5327>
     6c8:	80 e8       	ldi	r24, 0x80	; 128
     6ca:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     6ce:	74 30       	cpi	r23, 0x04	; 4
     6d0:	e0 f4       	brcc	.+56     	; 0x70a <keypad_poll+0xd6>
     6d2:	e1 2f       	mov	r30, r17
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	ee 0f       	add	r30, r30
     6dc:	ff 1f       	adc	r31, r31
     6de:	e0 55       	subi	r30, 0x50	; 80
     6e0:	fe 4d       	sbci	r31, 0xDE	; 222
     6e2:	e7 0f       	add	r30, r23
     6e4:	f1 1d       	adc	r31, r1
     6e6:	80 81       	ld	r24, Z
     6e8:	90 91 a9 21 	lds	r25, 0x21A9	; 0x8021a9 <kpd_keyPressed>
     6ec:	91 11       	cpse	r25, r1
     6ee:	06 c0       	rjmp	.+12     	; 0x6fc <keypad_poll+0xc8>
     6f0:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <kpd_code>
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <kpd_keyPressed>
     6fa:	13 c0       	rjmp	.+38     	; 0x722 <keypad_poll+0xee>
     6fc:	90 91 a8 21 	lds	r25, 0x21A8	; 0x8021a8 <kpd_code>
     700:	89 17       	cp	r24, r25
     702:	79 f0       	breq	.+30     	; 0x722 <keypad_poll+0xee>
     704:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <kpd_code>
     708:	0c c0       	rjmp	.+24     	; 0x722 <keypad_poll+0xee>
     70a:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <kpd_keyPressed>
     70e:	81 30       	cpi	r24, 0x01	; 1
     710:	41 f4       	brne	.+16     	; 0x722 <keypad_poll+0xee>
     712:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <kpd_keyPressed>
     716:	05 c0       	rjmp	.+10     	; 0x722 <keypad_poll+0xee>
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	01 c0       	rjmp	.+2      	; 0x71e <keypad_poll+0xea>
     71c:	72 e0       	ldi	r23, 0x02	; 2
     71e:	16 2f       	mov	r17, r22
     720:	cb cf       	rjmp	.-106    	; 0x6b8 <keypad_poll+0x84>
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	08 95       	ret

0000072c <keypad_getState>:
     72c:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <kpd_keyPressed>
     730:	08 95       	ret

00000732 <keypad_report>:

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     732:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     736:	80 93 be 23 	sts	0x23BE, r24	; 0x8023be <kpd_testMode>
	}
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     73a:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     73e:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     742:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_codeOut = keypad_getCode();    // current code to be outputed
     746:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <kpd_codeOut>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     74a:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <kpd_testMode>
     74e:	84 fd       	sbrc	r24, 4
     750:	29 c0       	rjmp	.+82     	; 0x7a4 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     752:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_currState>
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	09 f0       	breq	.+2      	; 0x75c <keypad_report+0x2a>
     75a:	54 c0       	rjmp	.+168    	; 0x804 <keypad_report+0xd2>
     75c:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <kpd_prevState>
     760:	81 11       	cpse	r24, r1
     762:	50 c0       	rjmp	.+160    	; 0x804 <keypad_report+0xd2>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
     764:	e0 91 a5 21 	lds	r30, 0x21A5	; 0x8021a5 <kpd_codeOut>
     768:	8e 2f       	mov	r24, r30
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	fc 01       	movw	r30, r24
     76e:	e9 55       	subi	r30, 0x59	; 89
     770:	f1 09       	sbc	r31, r1
     772:	e9 30       	cpi	r30, 0x09	; 9
     774:	f1 05       	cpc	r31, r1
     776:	90 f4       	brcc	.+36     	; 0x79c <keypad_report+0x6a>
     778:	88 27       	eor	r24, r24
     77a:	e2 50       	subi	r30, 0x02	; 2
     77c:	ff 4f       	sbci	r31, 0xFF	; 255
     77e:	8f 4f       	sbci	r24, 0xFF	; 255
     780:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     784:	84 e0       	ldi	r24, 0x04	; 4
     786:	09 c0       	rjmp	.+18     	; 0x79a <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     788:	80 e1       	ldi	r24, 0x10	; 16
     78a:	07 c0       	rjmp	.+14     	; 0x79a <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     78c:	80 e2       	ldi	r24, 0x20	; 32
     78e:	05 c0       	rjmp	.+10     	; 0x79a <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     790:	80 e4       	ldi	r24, 0x40	; 64
     792:	03 c0       	rjmp	.+6      	; 0x79a <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     794:	80 e8       	ldi	r24, 0x80	; 128
     796:	01 c0       	rjmp	.+2      	; 0x79a <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     798:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     79a:	bd d0       	rcall	.+378    	; 0x916 <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <kpd_exitTestMode>
     7a2:	30 c0       	rjmp	.+96     	; 0x804 <keypad_report+0xd2>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     7a4:	90 91 a8 21 	lds	r25, 0x21A8	; 0x8021a8 <kpd_code>
	else // normal mode
	{
		static uint8_t kpd_prevCode = 0;
		uint8_t currCode = keypad_getCode();

		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     7a8:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_currState>
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	61 f4       	brne	.+24     	; 0x7c8 <keypad_report+0x96>
     7b0:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <kpd_prevState>
     7b4:	81 11       	cpse	r24, r1
     7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <keypad_report+0x96>
			kpd_prevCode = currCode;
     7b8:	90 93 a0 21 	sts	0x21A0, r25	; 0x8021a0 <kpd_prevCode.5368>

			keyStatus2Report = KEYPAD_PRESSED;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <keyStatus2Report>
			key2Report = currCode;
     7c2:	90 93 a2 21 	sts	0x21A2, r25	; 0x8021a2 <key2Report>
     7c6:	1e c0       	rjmp	.+60     	; 0x804 <keypad_report+0xd2>
		} else if (kpd_currState == KEYPAD_PRESSED &&
     7c8:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_currState>
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	61 f4       	brne	.+24     	; 0x7e8 <keypad_report+0xb6>
     7d0:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <kpd_prevCode.5368>
     7d4:	98 17       	cp	r25, r24
     7d6:	41 f0       	breq	.+16     	; 0x7e8 <keypad_report+0xb6>
			       currCode != kpd_prevCode) {
			kpd_prevCode = currCode;
     7d8:	90 93 a0 21 	sts	0x21A0, r25	; 0x8021a0 <kpd_prevCode.5368>
			
			keyStatus2Report = KEYPAD_PRESSED;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <keyStatus2Report>
			key2Report = currCode;
     7e2:	90 93 a2 21 	sts	0x21A2, r25	; 0x8021a2 <key2Report>
     7e6:	0e c0       	rjmp	.+28     	; 0x804 <keypad_report+0xd2>
		} else if (kpd_currState == KEYPAD_RELEASED &&
     7e8:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_currState>
     7ec:	81 11       	cpse	r24, r1
     7ee:	0a c0       	rjmp	.+20     	; 0x804 <keypad_report+0xd2>
			       kpd_prevState == KEYPAD_PRESSED) {
     7f0:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <kpd_prevState>
			       currCode != kpd_prevCode) {
			kpd_prevCode = currCode;
			
			keyStatus2Report = KEYPAD_PRESSED;
			key2Report = currCode;
		} else if (kpd_currState == KEYPAD_RELEASED &&
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	31 f4       	brne	.+12     	; 0x804 <keypad_report+0xd2>
			       kpd_prevState == KEYPAD_PRESSED) {
			keyStatus2Report = KEYPAD_RELEASED;
     7f8:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <keyStatus2Report>
			key2Report = kpd_prevCode;
     7fc:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <kpd_prevCode.5368>
     800:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <key2Report>
		}
	}
	
	// clears LEDs when exiting test mode
	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     804:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <kpd_testMode>
     808:	84 ff       	sbrs	r24, 4
     80a:	07 c0       	rjmp	.+14     	; 0x81a <keypad_report+0xe8>
     80c:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_exitTestMode>
     810:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     812:	19 f4       	brne	.+6      	; 0x81a <keypad_report+0xe8>
     814:	70 d0       	rcall	.+224    	; 0x8f6 <led_allOff>
		kpd_exitTestMode = 0;
     816:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <kpd_exitTestMode>
	}
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
     81a:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_currState>
     81e:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <kpd_prevState>
}
     822:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	b9 cf       	rjmp	.-142    	; 0x79a <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     828:	88 e0       	ldi	r24, 0x08	; 8
     82a:	b7 cf       	rjmp	.-146    	; 0x79a <keypad_report+0x68>

0000082c <keypad>:
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
}


void keypad(void) {
     82c:	cf 93       	push	r28
	keypad_poll();
     82e:	02 df       	rcall	.-508    	; 0x634 <keypad_poll>
	keypad_report();
     830:	80 df       	rcall	.-256    	; 0x732 <keypad_report>
     832:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <keyStatus2Report>

	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = keyStatus2Report;
     836:	c1 e0       	ldi	r28, 0x01	; 1
     838:	81 11       	cpse	r24, r1
     83a:	01 c0       	rjmp	.+2      	; 0x83e <keypad+0x12>
     83c:	c0 e0       	ldi	r28, 0x00	; 0
     83e:	88 23       	and	r24, r24
	uint8_t key_val = key2Report;

	if (key_down) {
     840:	81 f0       	breq	.+32     	; 0x862 <keypad+0x36>
     842:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <key2Report>

	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = keyStatus2Report;
	uint8_t key_val = key2Report;
     846:	90 91 9f 21 	lds	r25, 0x219F	; 0x80219f <key_was_down.5373>

	if (key_down) {
		if (!key_was_down)
     84a:	91 11       	cpse	r25, r1
     84c:	03 c0       	rjmp	.+6      	; 0x854 <keypad+0x28>
     84e:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <active_key.5374>
			active_key = key_val;
     852:	15 c0       	rjmp	.+42     	; 0x87e <keypad+0x52>
     854:	90 91 9e 21 	lds	r25, 0x219E	; 0x80219e <active_key.5374>
		else if (key_val != active_key)
     858:	89 17       	cp	r24, r25
     85a:	89 f0       	breq	.+34     	; 0x87e <keypad+0x52>
     85c:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <active_key.5374>
			active_key = key_val;
     860:	0e c0       	rjmp	.+28     	; 0x87e <keypad+0x52>
     862:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <key_was_down.5373>
	} else if (key_was_down) {
     866:	88 23       	and	r24, r24
     868:	51 f0       	breq	.+20     	; 0x87e <keypad+0x52>
     86a:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <active_key.5374>
		if (active_key) {
     86e:	88 23       	and	r24, r24
     870:	21 f0       	breq	.+8      	; 0x87a <keypad+0x4e>
			udi_hid_kbd_down(active_key);
     872:	f1 d4       	rcall	.+2530   	; 0x1256 <udi_hid_kbd_down>
			udi_hid_kbd_up(active_key);
     874:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <active_key.5374>
     878:	b2 d4       	rcall	.+2404   	; 0x11de <udi_hid_kbd_up>
     87a:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <active_key.5374>
		}
		active_key = 0;
     87e:	c0 93 9f 21 	sts	0x219F, r28	; 0x80219f <key_was_down.5373>
	}
	key_was_down = key_down;
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <led_updateState>:
     886:	e5 ec       	ldi	r30, 0xC5	; 197
void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     888:	f1 e2       	ldi	r31, 0x21	; 33
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	ac 01       	movw	r20, r24
     892:	02 2e       	mov	r0, r18
     894:	02 c0       	rjmp	.+4      	; 0x89a <led_updateState+0x14>
     896:	55 95       	asr	r21
     898:	47 95       	ror	r20
     89a:	0a 94       	dec	r0
     89c:	e2 f7       	brpl	.-8      	; 0x896 <led_updateState+0x10>
     89e:	40 fd       	sbrc	r20, 0
     8a0:	60 83       	st	Z, r22
     8a2:	2f 5f       	subi	r18, 0xFF	; 255
     8a4:	3f 4f       	sbci	r19, 0xFF	; 255
     8a6:	31 96       	adiw	r30, 0x01	; 1
     8a8:	28 30       	cpi	r18, 0x08	; 8
     8aa:	31 05       	cpc	r19, r1
     8ac:	89 f7       	brne	.-30     	; 0x890 <led_updateState+0xa>
     8ae:	08 95       	ret

000008b0 <userActivity>:
     8b0:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     8b4:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <testMode>
     8b8:	bd de       	rcall	.-646    	; 0x634 <keypad_poll>
     8ba:	80 91 cd 21 	lds	r24, 0x21CD	; 0x8021cd <testMode>
     8be:	84 ff       	sbrs	r24, 4
     8c0:	0a c0       	rjmp	.+20     	; 0x8d6 <userActivity+0x26>
     8c2:	34 df       	rcall	.-408    	; 0x72c <keypad_getState>
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	49 f0       	breq	.+18     	; 0x8da <userActivity+0x2a>
     8c8:	13 de       	rcall	.-986    	; 0x4f0 <jstk_readMask>
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	81 11       	cpse	r24, r1
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <userActivity+0x22>
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	89 2f       	mov	r24, r25
     8d4:	03 c0       	rjmp	.+6      	; 0x8dc <userActivity+0x2c>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <userActivity+0x2c>
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	81 70       	andi	r24, 0x01	; 1
     8de:	08 95       	ret

000008e0 <led_init>:
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f6 e0       	ldi	r31, 0x06	; 6
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
     8e6:	81 83       	std	Z+1, r24	; 0x01
     8e8:	85 83       	std	Z+5, r24	; 0x05
     8ea:	e0 e2       	ldi	r30, 0x20	; 32
     8ec:	f6 e0       	ldi	r31, 0x06	; 6
     8ee:	80 e4       	ldi	r24, 0x40	; 64
     8f0:	81 83       	std	Z+1, r24	; 0x01
     8f2:	86 83       	std	Z+6, r24	; 0x06
     8f4:	08 95       	ret

000008f6 <led_allOff>:
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	c3 cf       	rjmp	.-122    	; 0x886 <led_updateState>
     900:	08 95       	ret

00000902 <led_on>:
     902:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	be cf       	rjmp	.-132    	; 0x886 <led_updateState>
     90a:	08 95       	ret

0000090c <led_off>:
     90c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	b9 cf       	rjmp	.-142    	; 0x886 <led_updateState>
     914:	08 95       	ret

00000916 <led_toggle>:
     916:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     91a:	e5 ec       	ldi	r30, 0xC5	; 197
     91c:	f1 e2       	ldi	r31, 0x21	; 33
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	68 2f       	mov	r22, r24
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	ab 01       	movw	r20, r22
     92a:	02 2e       	mov	r0, r18
     92c:	02 c0       	rjmp	.+4      	; 0x932 <led_toggle+0x1c>
     92e:	55 95       	asr	r21
     930:	47 95       	ror	r20
     932:	0a 94       	dec	r0
     934:	e2 f7       	brpl	.-8      	; 0x92e <led_toggle+0x18>
     936:	40 ff       	sbrs	r20, 0
     938:	03 c0       	rjmp	.+6      	; 0x940 <led_toggle+0x2a>
     93a:	90 81       	ld	r25, Z
     93c:	98 27       	eor	r25, r24
     93e:	90 83       	st	Z, r25
     940:	2f 5f       	subi	r18, 0xFF	; 255
     942:	3f 4f       	sbci	r19, 0xFF	; 255
     944:	31 96       	adiw	r30, 0x01	; 1
     946:	28 30       	cpi	r18, 0x08	; 8
     948:	31 05       	cpc	r19, r1
     94a:	71 f7       	brne	.-36     	; 0x928 <led_toggle+0x12>
     94c:	08 95       	ret

0000094e <led_setState>:
     94e:	e0 e0       	ldi	r30, 0x00	; 0
     950:	f6 e0       	ldi	r31, 0x06	; 6
     952:	9f ef       	ldi	r25, 0xFF	; 255
     954:	95 83       	std	Z+5, r25	; 0x05
     956:	86 83       	std	Z+6, r24	; 0x06
     958:	e5 ec       	ldi	r30, 0xC5	; 197
     95a:	f1 e2       	ldi	r31, 0x21	; 33
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	ac 01       	movw	r20, r24
     964:	02 2e       	mov	r0, r18
     966:	02 c0       	rjmp	.+4      	; 0x96c <led_setState+0x1e>
     968:	55 95       	asr	r21
     96a:	47 95       	ror	r20
     96c:	0a 94       	dec	r0
     96e:	e2 f7       	brpl	.-8      	; 0x968 <led_setState+0x1a>
     970:	41 70       	andi	r20, 0x01	; 1
     972:	41 93       	st	Z+, r20
     974:	2f 5f       	subi	r18, 0xFF	; 255
     976:	3f 4f       	sbci	r19, 0xFF	; 255
     978:	28 30       	cpi	r18, 0x08	; 8
     97a:	31 05       	cpc	r19, r1
     97c:	91 f7       	brne	.-28     	; 0x962 <led_setState+0x14>
     97e:	08 95       	ret

00000980 <testIndicator>:
}

void testIndicator(void) { // blink status LED when in test mode
    sof_ms++;
     980:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <sof_ms>
     984:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <sof_ms+0x1>
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	80 93 ce 21 	sts	0x21CE, r24	; 0x8021ce <sof_ms>
     98e:	90 93 cf 21 	sts	0x21CF, r25	; 0x8021cf <sof_ms+0x1>

    if ((PORTB.IN & PIN4_bm) == 0) {
     992:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     996:	84 fd       	sbrc	r24, 4
     998:	0f c0       	rjmp	.+30     	; 0x9b8 <testIndicator+0x38>
        if (sof_ms >= 500) {
     99a:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <sof_ms>
     99e:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <sof_ms+0x1>
     9a2:	84 3f       	cpi	r24, 0xF4	; 244
     9a4:	91 40       	sbci	r25, 0x01	; 1
     9a6:	78 f0       	brcs	.+30     	; 0x9c6 <testIndicator+0x46>
void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     9a8:	80 e4       	ldi	r24, 0x40	; 64
     9aa:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>
    sof_ms++;

    if ((PORTB.IN & PIN4_bm) == 0) {
        if (sof_ms >= 500) {
            led_statusToggle();
            sof_ms = 0;
     9ae:	10 92 ce 21 	sts	0x21CE, r1	; 0x8021ce <sof_ms>
     9b2:	10 92 cf 21 	sts	0x21CF, r1	; 0x8021cf <sof_ms+0x1>
     9b6:	08 95       	ret
//     return false;
// }

/* ----------------------------- Status LED ----------------------------- */
void led_statusOn(void) { // status LED on
    STATUS_LED_PORT.OUTCLR = LEDS_PIN;
     9b8:	80 e4       	ldi	r24, 0x40	; 64
     9ba:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
            led_statusToggle();
            sof_ms = 0;
        }
    } else {
        led_statusOn();
        sof_ms = 0;
     9be:	10 92 ce 21 	sts	0x21CE, r1	; 0x8021ce <sof_ms>
     9c2:	10 92 cf 21 	sts	0x21CF, r1	; 0x8021cf <sof_ms+0x1>
     9c6:	08 95       	ret

000009c8 <startupSequence>:
            (keypad_getState()   == KEYPAD_PRESSED) ||
            (jstk_readMask()     != 0);
}

void startupSequence(uint8_t sequence) // startup LED animation
{
     9c8:	6f 92       	push	r6
     9ca:	7f 92       	push	r7
     9cc:	8f 92       	push	r8
     9ce:	9f 92       	push	r9
     9d0:	af 92       	push	r10
     9d2:	bf 92       	push	r11
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	28 97       	sbiw	r28, 0x08	; 8
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	de bf       	out	0x3e, r29	; 62
    const uint8_t seq[8] = {
     9ee:	98 e0       	ldi	r25, 0x08	; 8
     9f0:	e2 e8       	ldi	r30, 0x82	; 130
     9f2:	f1 e2       	ldi	r31, 0x21	; 33
     9f4:	de 01       	movw	r26, r28
     9f6:	11 96       	adiw	r26, 0x01	; 1
     9f8:	01 90       	ld	r0, Z+
     9fa:	0d 92       	st	X+, r0
     9fc:	9a 95       	dec	r25
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <startupSequence+0x30>
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
     a00:	83 30       	cpi	r24, 0x03	; 3
     a02:	09 f4       	brne	.+2      	; 0xa06 <startupSequence+0x3e>
     a04:	0c c1       	rjmp	.+536    	; 0xc1e <startupSequence+0x256>
     a06:	38 f4       	brcc	.+14     	; 0xa16 <startupSequence+0x4e>
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	09 f4       	brne	.+2      	; 0xa0e <startupSequence+0x46>
     a0c:	42 c0       	rjmp	.+132    	; 0xa92 <startupSequence+0xca>
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	09 f4       	brne	.+2      	; 0xa14 <startupSequence+0x4c>
     a12:	a5 c0       	rjmp	.+330    	; 0xb5e <startupSequence+0x196>
     a14:	31 c2       	rjmp	.+1122   	; 0xe78 <startupSequence+0x4b0>
     a16:	84 30       	cpi	r24, 0x04	; 4
     a18:	09 f4       	brne	.+2      	; 0xa1c <startupSequence+0x54>
     a1a:	61 c1       	rjmp	.+706    	; 0xcde <startupSequence+0x316>
     a1c:	85 30       	cpi	r24, 0x05	; 5
     a1e:	09 f4       	brne	.+2      	; 0xa22 <startupSequence+0x5a>
     a20:	ba c1       	rjmp	.+884    	; 0xd96 <startupSequence+0x3ce>
     a22:	2a c2       	rjmp	.+1108   	; 0xe78 <startupSequence+0x4b0>
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     a24:	f8 01       	movw	r30, r16
     a26:	f1 90       	ld	r15, Z+
     a28:	8f 01       	movw	r16, r30
     a2a:	8f 2d       	mov	r24, r15
     a2c:	6a df       	rcall	.-300    	; 0x902 <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a2e:	ff e0       	ldi	r31, 0x0F	; 15
     a30:	28 e9       	ldi	r18, 0x98	; 152
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	f1 50       	subi	r31, 0x01	; 1
     a36:	20 40       	sbci	r18, 0x00	; 0
     a38:	80 40       	sbci	r24, 0x00	; 0
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <startupSequence+0x6c>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <startupSequence+0x76>
     a3e:	00 00       	nop
                    _delay_ms(850);
                    led_off(seq[i]);
     a40:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     a42:	64 df       	rcall	.-312    	; 0x90c <led_off>
     a44:	35 df       	rcall	.-406    	; 0x8b0 <userActivity>
     a46:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <user_active.5520>

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
     a4a:	a0 16       	cp	r10, r16
     a4c:	b1 06       	cpc	r11, r17
     a4e:	09 f4       	brne	.+2      	; 0xa52 <startupSequence+0x8a>
     a50:	b9 c1       	rjmp	.+882    	; 0xdc4 <startupSequence+0x3fc>
     a52:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     a56:	88 23       	and	r24, r24
     a58:	29 f3       	breq	.-54     	; 0xa24 <startupSequence+0x5c>
     a5a:	b4 c1       	rjmp	.+872    	; 0xdc4 <startupSequence+0x3fc>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     a5c:	f8 01       	movw	r30, r16
     a5e:	f2 90       	ld	r15, -Z
     a60:	8f 01       	movw	r16, r30
     a62:	8f 2d       	mov	r24, r15
     a64:	4e df       	rcall	.-356    	; 0x902 <led_on>
     a66:	ff e0       	ldi	r31, 0x0F	; 15
     a68:	28 e9       	ldi	r18, 0x98	; 152
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	f1 50       	subi	r31, 0x01	; 1
     a6e:	20 40       	sbci	r18, 0x00	; 0
     a70:	80 40       	sbci	r24, 0x00	; 0
     a72:	e1 f7       	brne	.-8      	; 0xa6c <startupSequence+0xa4>
                    _delay_ms(850);
                    led_off(seq[i]);
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <startupSequence+0xae>
     a76:	00 00       	nop
     a78:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     a7a:	48 df       	rcall	.-368    	; 0x90c <led_off>
     a7c:	19 df       	rcall	.-462    	; 0x8b0 <userActivity>
     a7e:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <user_active.5520>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     a82:	0c 15       	cp	r16, r12
     a84:	1d 05       	cpc	r17, r13
     a86:	61 f0       	breq	.+24     	; 0xaa0 <startupSequence+0xd8>
     a88:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     a8c:	88 23       	and	r24, r24
     a8e:	31 f3       	breq	.-52     	; 0xa5c <startupSequence+0x94>
     a90:	07 c0       	rjmp	.+14     	; 0xaa0 <startupSequence+0xd8>
     a92:	5e 01       	movw	r10, r28
     a94:	99 e0       	ldi	r25, 0x09	; 9
     a96:	a9 0e       	add	r10, r25
     a98:	b1 1c       	adc	r11, r1
     a9a:	fe 01       	movw	r30, r28
     a9c:	31 96       	adiw	r30, 0x01	; 1
     a9e:	6f 01       	movw	r12, r30
    static volatile bool user_active = false;

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
     aa0:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     aa4:	81 11       	cpse	r24, r1
     aa6:	06 c0       	rjmp	.+12     	; 0xab4 <startupSequence+0xec>
                for (int i = 0; i < 8 && !user_active; i++) {
     aa8:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     aac:	88 23       	and	r24, r24
     aae:	09 f4       	brne	.+2      	; 0xab2 <startupSequence+0xea>
     ab0:	ce c1       	rjmp	.+924    	; 0xe4e <startupSequence+0x486>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
            }
            led_allOff();
     ab2:	88 c1       	rjmp	.+784    	; 0xdc4 <startupSequence+0x3fc>
            break;
     ab4:	20 df       	rcall	.-448    	; 0x8f6 <led_allOff>
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     ab6:	e0 c1       	rjmp	.+960    	; 0xe78 <startupSequence+0x4b0>
     ab8:	f8 01       	movw	r30, r16
     aba:	72 90       	ld	r7, -Z
     abc:	8f 01       	movw	r16, r30
     abe:	87 2d       	mov	r24, r7
                    led_on(seq[right]);
     ac0:	20 df       	rcall	.-448    	; 0x902 <led_on>
     ac2:	f6 01       	movw	r30, r12
     ac4:	f1 90       	ld	r15, Z+
     ac6:	6f 01       	movw	r12, r30
     ac8:	8f 2d       	mov	r24, r15
     aca:	1b df       	rcall	.-458    	; 0x902 <led_on>
     acc:	ff e1       	ldi	r31, 0x1F	; 31
     ace:	2f eb       	ldi	r18, 0xBF	; 191
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	f1 50       	subi	r31, 0x01	; 1
     ad4:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     ad6:	80 40       	sbci	r24, 0x00	; 0
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <startupSequence+0x10a>
                    led_off(seq[right]);
     ada:	00 c0       	rjmp	.+0      	; 0xadc <startupSequence+0x114>
     adc:	00 00       	nop
     ade:	87 2d       	mov	r24, r7

                    keypad_poll();
     ae0:	15 df       	rcall	.-470    	; 0x90c <led_off>
     ae2:	8f 2d       	mov	r24, r15
                    if (keypad_getState() == KEYPAD_PRESSED)
     ae4:	13 df       	rcall	.-474    	; 0x90c <led_off>
     ae6:	a6 dd       	rcall	.-1204   	; 0x634 <keypad_poll>
     ae8:	21 de       	rcall	.-958    	; 0x72c <keypad_getState>
     aea:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     aec:	11 f4       	brne	.+4      	; 0xaf2 <startupSequence+0x12a>
     aee:	e0 92 c4 21 	sts	0x21C4, r14	; 0x8021c4 <user_active.5520>
                    if (jstk_readMask() != 0)
     af2:	fe dc       	rcall	.-1540   	; 0x4f0 <jstk_readMask>
     af4:	81 11       	cpse	r24, r1
                        user_active = true;
     af6:	e0 92 c4 21 	sts	0x21C4, r14	; 0x8021c4 <user_active.5520>
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     afa:	08 15       	cp	r16, r8
     afc:	19 05       	cpc	r17, r9
     afe:	09 f4       	brne	.+2      	; 0xb02 <startupSequence+0x13a>
     b00:	66 c1       	rjmp	.+716    	; 0xdce <startupSequence+0x406>
     b02:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     b06:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     b08:	b9 f2       	breq	.-82     	; 0xab8 <startupSequence+0xf0>
     b0a:	61 c1       	rjmp	.+706    	; 0xdce <startupSequence+0x406>
     b0c:	f3 01       	movw	r30, r6
     b0e:	d1 90       	ld	r13, Z+
     b10:	3f 01       	movw	r6, r30
     b12:	8d 2d       	mov	r24, r13
                    led_on(seq[right]);
     b14:	f6 de       	rcall	.-532    	; 0x902 <led_on>
     b16:	f8 01       	movw	r30, r16
     b18:	f2 90       	ld	r15, -Z
     b1a:	8f 01       	movw	r16, r30
     b1c:	8f 2d       	mov	r24, r15
     b1e:	f1 de       	rcall	.-542    	; 0x902 <led_on>
     b20:	ff e1       	ldi	r31, 0x1F	; 31
     b22:	2f eb       	ldi	r18, 0xBF	; 191
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	f1 50       	subi	r31, 0x01	; 1
     b28:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     b2a:	80 40       	sbci	r24, 0x00	; 0
     b2c:	e1 f7       	brne	.-8      	; 0xb26 <startupSequence+0x15e>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <startupSequence+0x168>
                    led_off(seq[right]);
     b30:	00 00       	nop
     b32:	8d 2d       	mov	r24, r13
     b34:	eb de       	rcall	.-554    	; 0x90c <led_off>

                    keypad_poll();
     b36:	8f 2d       	mov	r24, r15
     b38:	e9 de       	rcall	.-558    	; 0x90c <led_off>
                    if (keypad_getState() == KEYPAD_PRESSED)
     b3a:	7c dd       	rcall	.-1288   	; 0x634 <keypad_poll>
     b3c:	f7 dd       	rcall	.-1042   	; 0x72c <keypad_getState>
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	11 f4       	brne	.+4      	; 0xb46 <startupSequence+0x17e>
                        user_active = true;
     b42:	e0 92 c4 21 	sts	0x21C4, r14	; 0x8021c4 <user_active.5520>
                    if (jstk_readMask() != 0)
     b46:	d4 dc       	rcall	.-1624   	; 0x4f0 <jstk_readMask>
     b48:	81 11       	cpse	r24, r1
     b4a:	e0 92 c4 21 	sts	0x21C4, r14	; 0x8021c4 <user_active.5520>
                        user_active = true;
     b4e:	0a 15       	cp	r16, r10
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     b50:	1b 05       	cpc	r17, r11
     b52:	71 f0       	breq	.+28     	; 0xb70 <startupSequence+0x1a8>
     b54:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     b58:	88 23       	and	r24, r24
     b5a:	c1 f2       	breq	.-80     	; 0xb0c <startupSequence+0x144>
     b5c:	09 c0       	rjmp	.+18     	; 0xb70 <startupSequence+0x1a8>
     b5e:	fe 01       	movw	r30, r28
     b60:	31 96       	adiw	r30, 0x01	; 1
     b62:	4f 01       	movw	r8, r30

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     b64:	ee 24       	eor	r14, r14
     b66:	e3 94       	inc	r14
     b68:	5e 01       	movw	r10, r28
     b6a:	f5 e0       	ldi	r31, 0x05	; 5
     b6c:	af 0e       	add	r10, r31
            }
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
     b6e:	b1 1c       	adc	r11, r1
     b70:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
                for (int i = 0; i < 4 && !user_active; i++) {
     b74:	81 11       	cpse	r24, r1
     b76:	0a c0       	rjmp	.+20     	; 0xb8c <startupSequence+0x1c4>
     b78:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     b7c:	81 11       	cpse	r24, r1
     b7e:	27 c1       	rjmp	.+590    	; 0xdce <startupSequence+0x406>
     b80:	6e 01       	movw	r12, r28
     b82:	25 e0       	ldi	r18, 0x05	; 5
     b84:	c2 0e       	add	r12, r18
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     b86:	d1 1c       	adc	r13, r1
     b88:	86 01       	movw	r16, r12
            break;
     b8a:	96 cf       	rjmp	.-212    	; 0xab8 <startupSequence+0xf0>
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     b8c:	b4 de       	rcall	.-664    	; 0x8f6 <led_allOff>
     b8e:	74 c1       	rjmp	.+744    	; 0xe78 <startupSequence+0x4b0>
     b90:	f8 01       	movw	r30, r16
     b92:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     b94:	8f 01       	movw	r16, r30
     b96:	b5 de       	rcall	.-662    	; 0x902 <led_on>
     b98:	f7 01       	movw	r30, r14
     b9a:	81 91       	ld	r24, Z+
     b9c:	7f 01       	movw	r14, r30
     b9e:	b1 de       	rcall	.-670    	; 0x902 <led_on>
     ba0:	ff e2       	ldi	r31, 0x2F	; 47
     ba2:	27 e5       	ldi	r18, 0x57	; 87
     ba4:	85 e0       	ldi	r24, 0x05	; 5
     ba6:	f1 50       	subi	r31, 0x01	; 1
     ba8:	20 40       	sbci	r18, 0x00	; 0
     baa:	80 40       	sbci	r24, 0x00	; 0
     bac:	e1 f7       	brne	.-8      	; 0xba6 <startupSequence+0x1de>
                    _delay_ms(1750);

                    keypad_poll();
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <startupSequence+0x1e8>
     bb0:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     bb2:	40 dd       	rcall	.-1408   	; 0x634 <keypad_poll>
     bb4:	bb dd       	rcall	.-1162   	; 0x72c <keypad_getState>
     bb6:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     bb8:	11 f4       	brne	.+4      	; 0xbbe <startupSequence+0x1f6>
     bba:	90 92 c4 21 	sts	0x21C4, r9	; 0x8021c4 <user_active.5520>
                    if (jstk_readMask() != 0)
     bbe:	98 dc       	rcall	.-1744   	; 0x4f0 <jstk_readMask>
     bc0:	81 11       	cpse	r24, r1
                        user_active = true;
     bc2:	90 92 c4 21 	sts	0x21C4, r9	; 0x8021c4 <user_active.5520>
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     bc6:	a0 16       	cp	r10, r16
     bc8:	b1 06       	cpc	r11, r17
     bca:	09 f4       	brne	.+2      	; 0xbce <startupSequence+0x206>
     bcc:	0b c1       	rjmp	.+534    	; 0xde4 <startupSequence+0x41c>
     bce:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     bd2:	88 23       	and	r24, r24
     bd4:	e9 f2       	breq	.-70     	; 0xb90 <startupSequence+0x1c8>
     bd6:	06 c1       	rjmp	.+524    	; 0xde4 <startupSequence+0x41c>
     bd8:	f7 01       	movw	r30, r14
     bda:	81 91       	ld	r24, Z+
                    led_off(seq[right]);
     bdc:	7f 01       	movw	r14, r30
     bde:	96 de       	rcall	.-724    	; 0x90c <led_off>
     be0:	f8 01       	movw	r30, r16
     be2:	82 91       	ld	r24, -Z
     be4:	8f 01       	movw	r16, r30
     be6:	92 de       	rcall	.-732    	; 0x90c <led_off>
     be8:	ff e2       	ldi	r31, 0x2F	; 47
     bea:	27 e5       	ldi	r18, 0x57	; 87
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	f1 50       	subi	r31, 0x01	; 1
     bf0:	20 40       	sbci	r18, 0x00	; 0
     bf2:	80 40       	sbci	r24, 0x00	; 0
     bf4:	e1 f7       	brne	.-8      	; 0xbee <startupSequence+0x226>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <startupSequence+0x230>
                    _delay_ms(1750);

                    keypad_poll();
     bf8:	00 00       	nop
     bfa:	1c dd       	rcall	.-1480   	; 0x634 <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     bfc:	97 dd       	rcall	.-1234   	; 0x72c <keypad_getState>
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	11 f4       	brne	.+4      	; 0xc06 <startupSequence+0x23e>
     c02:	90 92 c4 21 	sts	0x21C4, r9	; 0x8021c4 <user_active.5520>
                        user_active = true;
     c06:	74 dc       	rcall	.-1816   	; 0x4f0 <jstk_readMask>
                    if (jstk_readMask() != 0)
     c08:	81 11       	cpse	r24, r1
     c0a:	90 92 c4 21 	sts	0x21C4, r9	; 0x8021c4 <user_active.5520>
                        user_active = true;
     c0e:	c0 16       	cp	r12, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     c10:	d1 06       	cpc	r13, r17
     c12:	71 f0       	breq	.+28     	; 0xc30 <startupSequence+0x268>
     c14:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     c18:	88 23       	and	r24, r24
     c1a:	f1 f2       	breq	.-68     	; 0xbd8 <startupSequence+0x210>
     c1c:	09 c0       	rjmp	.+18     	; 0xc30 <startupSequence+0x268>
     c1e:	fe 01       	movw	r30, r28
     c20:	31 96       	adiw	r30, 0x01	; 1

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     c22:	5f 01       	movw	r10, r30
     c24:	99 24       	eor	r9, r9
     c26:	93 94       	inc	r9
     c28:	6e 01       	movw	r12, r28
     c2a:	f5 e0       	ldi	r31, 0x05	; 5
     c2c:	cf 0e       	add	r12, r31
            }
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
     c2e:	d1 1c       	adc	r13, r1
     c30:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
                for (int i = 0; i < 4 && !user_active; i++) {
     c34:	81 11       	cpse	r24, r1
     c36:	0a c0       	rjmp	.+20     	; 0xc4c <startupSequence+0x284>
     c38:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     c3c:	81 11       	cpse	r24, r1
     c3e:	d2 c0       	rjmp	.+420    	; 0xde4 <startupSequence+0x41c>
     c40:	7e 01       	movw	r14, r28
     c42:	25 e0       	ldi	r18, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     c44:	e2 0e       	add	r14, r18
     c46:	f1 1c       	adc	r15, r1
            break;
     c48:	87 01       	movw	r16, r14
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     c4a:	a2 cf       	rjmp	.-188    	; 0xb90 <startupSequence+0x1c8>
     c4c:	54 de       	rcall	.-856    	; 0x8f6 <led_allOff>
     c4e:	14 c1       	rjmp	.+552    	; 0xe78 <startupSequence+0x4b0>
     c50:	f8 01       	movw	r30, r16
     c52:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     c54:	8f 01       	movw	r16, r30
     c56:	55 de       	rcall	.-854    	; 0x902 <led_on>
     c58:	f7 01       	movw	r30, r14
     c5a:	81 91       	ld	r24, Z+
     c5c:	7f 01       	movw	r14, r30
     c5e:	51 de       	rcall	.-862    	; 0x902 <led_on>
     c60:	ff e2       	ldi	r31, 0x2F	; 47
     c62:	27 e5       	ldi	r18, 0x57	; 87
     c64:	85 e0       	ldi	r24, 0x05	; 5
     c66:	f1 50       	subi	r31, 0x01	; 1
     c68:	20 40       	sbci	r18, 0x00	; 0
     c6a:	80 40       	sbci	r24, 0x00	; 0
                    _delay_ms(1750);

                    keypad_poll();
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <startupSequence+0x29e>
                    if (keypad_getState() == KEYPAD_PRESSED)
     c6e:	00 c0       	rjmp	.+0      	; 0xc70 <startupSequence+0x2a8>
     c70:	00 00       	nop
     c72:	e0 dc       	rcall	.-1600   	; 0x634 <keypad_poll>
                        user_active = true;
     c74:	5b dd       	rcall	.-1354   	; 0x72c <keypad_getState>
                    if (jstk_readMask() != 0)
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	11 f4       	brne	.+4      	; 0xc7e <startupSequence+0x2b6>
     c7a:	b0 92 c4 21 	sts	0x21C4, r11	; 0x8021c4 <user_active.5520>
                        user_active = true;
     c7e:	38 dc       	rcall	.-1936   	; 0x4f0 <jstk_readMask>
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     c80:	81 11       	cpse	r24, r1
     c82:	b0 92 c4 21 	sts	0x21C4, r11	; 0x8021c4 <user_active.5520>
     c86:	0c 15       	cp	r16, r12
     c88:	1d 05       	cpc	r17, r13
     c8a:	09 f4       	brne	.+2      	; 0xc8e <startupSequence+0x2c6>
     c8c:	b6 c0       	rjmp	.+364    	; 0xdfa <startupSequence+0x432>
     c8e:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     c92:	88 23       	and	r24, r24
     c94:	e9 f2       	breq	.-70     	; 0xc50 <startupSequence+0x288>
     c96:	b1 c0       	rjmp	.+354    	; 0xdfa <startupSequence+0x432>
     c98:	f8 01       	movw	r30, r16
     c9a:	82 91       	ld	r24, -Z
                    led_off(seq[right]);
     c9c:	8f 01       	movw	r16, r30
     c9e:	36 de       	rcall	.-916    	; 0x90c <led_off>
     ca0:	f7 01       	movw	r30, r14
     ca2:	81 91       	ld	r24, Z+
     ca4:	7f 01       	movw	r14, r30
     ca6:	32 de       	rcall	.-924    	; 0x90c <led_off>
     ca8:	ff e2       	ldi	r31, 0x2F	; 47
     caa:	27 e5       	ldi	r18, 0x57	; 87
     cac:	85 e0       	ldi	r24, 0x05	; 5
     cae:	f1 50       	subi	r31, 0x01	; 1
     cb0:	20 40       	sbci	r18, 0x00	; 0
     cb2:	80 40       	sbci	r24, 0x00	; 0
     cb4:	e1 f7       	brne	.-8      	; 0xcae <startupSequence+0x2e6>
                    _delay_ms(1750);

                    keypad_poll();
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <startupSequence+0x2f0>
     cb8:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     cba:	bc dc       	rcall	.-1672   	; 0x634 <keypad_poll>
     cbc:	37 dd       	rcall	.-1426   	; 0x72c <keypad_getState>
     cbe:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     cc0:	11 f4       	brne	.+4      	; 0xcc6 <startupSequence+0x2fe>
                    if (jstk_readMask() != 0)
     cc2:	b0 92 c4 21 	sts	0x21C4, r11	; 0x8021c4 <user_active.5520>
     cc6:	14 dc       	rcall	.-2008   	; 0x4f0 <jstk_readMask>
                        user_active = true;
     cc8:	81 11       	cpse	r24, r1
     cca:	b0 92 c4 21 	sts	0x21C4, r11	; 0x8021c4 <user_active.5520>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     cce:	c0 16       	cp	r12, r16
     cd0:	d1 06       	cpc	r13, r17
     cd2:	51 f0       	breq	.+20     	; 0xce8 <startupSequence+0x320>
     cd4:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     cd8:	88 23       	and	r24, r24
     cda:	f1 f2       	breq	.-68     	; 0xc98 <startupSequence+0x2d0>
     cdc:	05 c0       	rjmp	.+10     	; 0xce8 <startupSequence+0x320>

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     cde:	fe 01       	movw	r30, r28
     ce0:	31 96       	adiw	r30, 0x01	; 1
            }
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
     ce2:	6f 01       	movw	r12, r30
     ce4:	bb 24       	eor	r11, r11
     ce6:	b3 94       	inc	r11
     ce8:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
                for (int i = 0; i < 4 && !user_active; i++) {
     cec:	81 11       	cpse	r24, r1
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <startupSequence+0x33c>
     cf0:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     cf4:	81 11       	cpse	r24, r1
     cf6:	81 c0       	rjmp	.+258    	; 0xdfa <startupSequence+0x432>
     cf8:	7e 01       	movw	r14, r28
     cfa:	f5 e0       	ldi	r31, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     cfc:	ef 0e       	add	r14, r31
     cfe:	f1 1c       	adc	r15, r1
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     d00:	87 01       	movw	r16, r14
     d02:	a6 cf       	rjmp	.-180    	; 0xc50 <startupSequence+0x288>
     d04:	f8 dd       	rcall	.-1040   	; 0x8f6 <led_allOff>
     d06:	b8 c0       	rjmp	.+368    	; 0xe78 <startupSequence+0x4b0>
     d08:	f7 01       	movw	r30, r14
                    led_on(seq[right]);
     d0a:	81 91       	ld	r24, Z+
     d0c:	7f 01       	movw	r14, r30
     d0e:	f9 dd       	rcall	.-1038   	; 0x902 <led_on>
     d10:	f8 01       	movw	r30, r16
     d12:	82 91       	ld	r24, -Z
     d14:	8f 01       	movw	r16, r30
     d16:	f5 dd       	rcall	.-1046   	; 0x902 <led_on>
     d18:	ff e2       	ldi	r31, 0x2F	; 47
     d1a:	27 e5       	ldi	r18, 0x57	; 87
     d1c:	85 e0       	ldi	r24, 0x05	; 5
     d1e:	f1 50       	subi	r31, 0x01	; 1
                    _delay_ms(1750);

                    keypad_poll();
     d20:	20 40       	sbci	r18, 0x00	; 0
     d22:	80 40       	sbci	r24, 0x00	; 0
                    if (keypad_getState() == KEYPAD_PRESSED)
     d24:	e1 f7       	brne	.-8      	; 0xd1e <startupSequence+0x356>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <startupSequence+0x360>
     d28:	00 00       	nop
     d2a:	84 dc       	rcall	.-1784   	; 0x634 <keypad_poll>
                        user_active = true;
     d2c:	ff dc       	rcall	.-1538   	; 0x72c <keypad_getState>
     d2e:	81 30       	cpi	r24, 0x01	; 1
                    if (jstk_readMask() != 0)
     d30:	11 f4       	brne	.+4      	; 0xd36 <startupSequence+0x36e>
     d32:	b0 92 c4 21 	sts	0x21C4, r11	; 0x8021c4 <user_active.5520>
                        user_active = true;
     d36:	dc db       	rcall	.-2120   	; 0x4f0 <jstk_readMask>
     d38:	81 11       	cpse	r24, r1
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
     d3a:	b0 92 c4 21 	sts	0x21C4, r11	; 0x8021c4 <user_active.5520>
     d3e:	0c 15       	cp	r16, r12
     d40:	1d 05       	cpc	r17, r13
     d42:	09 f4       	brne	.+2      	; 0xd46 <startupSequence+0x37e>
     d44:	64 c0       	rjmp	.+200    	; 0xe0e <startupSequence+0x446>
     d46:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     d4a:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     d4c:	e9 f2       	breq	.-70     	; 0xd08 <startupSequence+0x340>
     d4e:	5f c0       	rjmp	.+190    	; 0xe0e <startupSequence+0x446>
     d50:	f7 01       	movw	r30, r14
     d52:	81 91       	ld	r24, Z+
     d54:	7f 01       	movw	r14, r30
                    led_off(seq[right]);
     d56:	da dd       	rcall	.-1100   	; 0x90c <led_off>
     d58:	f8 01       	movw	r30, r16
     d5a:	82 91       	ld	r24, -Z
     d5c:	8f 01       	movw	r16, r30
     d5e:	d6 dd       	rcall	.-1108   	; 0x90c <led_off>
     d60:	ff e2       	ldi	r31, 0x2F	; 47
     d62:	27 e5       	ldi	r18, 0x57	; 87
     d64:	85 e0       	ldi	r24, 0x05	; 5
     d66:	f1 50       	subi	r31, 0x01	; 1
     d68:	20 40       	sbci	r18, 0x00	; 0
     d6a:	80 40       	sbci	r24, 0x00	; 0
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <startupSequence+0x39e>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <startupSequence+0x3a8>
                    _delay_ms(1750);

                    keypad_poll();
     d70:	00 00       	nop
     d72:	60 dc       	rcall	.-1856   	; 0x634 <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     d74:	db dc       	rcall	.-1610   	; 0x72c <keypad_getState>
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	11 f4       	brne	.+4      	; 0xd7e <startupSequence+0x3b6>
     d7a:	b0 92 c4 21 	sts	0x21C4, r11	; 0x8021c4 <user_active.5520>
                        user_active = true;
     d7e:	b8 db       	rcall	.-2192   	; 0x4f0 <jstk_readMask>
                    if (jstk_readMask() != 0)
     d80:	81 11       	cpse	r24, r1
     d82:	b0 92 c4 21 	sts	0x21C4, r11	; 0x8021c4 <user_active.5520>
                        user_active = true;
     d86:	0c 15       	cp	r16, r12
     d88:	1d 05       	cpc	r17, r13
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     d8a:	59 f0       	breq	.+22     	; 0xda2 <startupSequence+0x3da>
     d8c:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     d90:	88 23       	and	r24, r24
     d92:	f1 f2       	breq	.-68     	; 0xd50 <startupSequence+0x388>
     d94:	06 c0       	rjmp	.+12     	; 0xda2 <startupSequence+0x3da>
     d96:	6e 01       	movw	r12, r28
     d98:	95 e0       	ldi	r25, 0x05	; 5
     d9a:	c9 0e       	add	r12, r25
     d9c:	d1 1c       	adc	r13, r1
     d9e:	bb 24       	eor	r11, r11
     da0:	b3 94       	inc	r11

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     da2:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
            }
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
     da6:	81 11       	cpse	r24, r1
     da8:	0b c0       	rjmp	.+22     	; 0xdc0 <startupSequence+0x3f8>
     daa:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
                for (int i = 3; i >= 0 && !user_active; i--) {
     dae:	81 11       	cpse	r24, r1
     db0:	2e c0       	rjmp	.+92     	; 0xe0e <startupSequence+0x446>
     db2:	fe 01       	movw	r30, r28
     db4:	31 96       	adiw	r30, 0x01	; 1
     db6:	7f 01       	movw	r14, r30
     db8:	8e 01       	movw	r16, r28
     dba:	07 5f       	subi	r16, 0xF7	; 247
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	a4 cf       	rjmp	.-184    	; 0xd08 <startupSequence+0x340>
     dc0:	9a dd       	rcall	.-1228   	; 0x8f6 <led_allOff>
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     dc2:	5a c0       	rjmp	.+180    	; 0xe78 <startupSequence+0x4b0>
     dc4:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     dc8:	88 23       	and	r24, r24
     dca:	61 f1       	breq	.+88     	; 0xe24 <startupSequence+0x45c>
     dcc:	69 ce       	rjmp	.-814    	; 0xaa0 <startupSequence+0xd8>
     dce:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     dd2:	81 11       	cpse	r24, r1
     dd4:	cd ce       	rjmp	.-614    	; 0xb70 <startupSequence+0x1a8>
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	3c 01       	movw	r6, r24
     ddc:	8e 01       	movw	r16, r28
     dde:	07 5f       	subi	r16, 0xF7	; 247
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	94 ce       	rjmp	.-728    	; 0xb0c <startupSequence+0x144>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     de4:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     de8:	81 11       	cpse	r24, r1
     dea:	22 cf       	rjmp	.-444    	; 0xc30 <startupSequence+0x268>
     dec:	fe 01       	movw	r30, r28
     dee:	31 96       	adiw	r30, 0x01	; 1
     df0:	7f 01       	movw	r14, r30
     df2:	8e 01       	movw	r16, r28
     df4:	07 5f       	subi	r16, 0xF7	; 247
     df6:	1f 4f       	sbci	r17, 0xFF	; 255
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     df8:	ef ce       	rjmp	.-546    	; 0xbd8 <startupSequence+0x210>
     dfa:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     dfe:	81 11       	cpse	r24, r1
     e00:	73 cf       	rjmp	.-282    	; 0xce8 <startupSequence+0x320>
     e02:	7e 01       	movw	r14, r28
     e04:	f5 e0       	ldi	r31, 0x05	; 5
     e06:	ef 0e       	add	r14, r31
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e08:	f1 1c       	adc	r15, r1
     e0a:	87 01       	movw	r16, r14
     e0c:	45 cf       	rjmp	.-374    	; 0xc98 <startupSequence+0x2d0>
     e0e:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <user_active.5520>
     e12:	81 11       	cpse	r24, r1
     e14:	c6 cf       	rjmp	.-116    	; 0xda2 <startupSequence+0x3da>
     e16:	ce 01       	movw	r24, r28
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	7c 01       	movw	r14, r24
     e1c:	8e 01       	movw	r16, r28
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     e1e:	07 5f       	subi	r16, 0xF7	; 247
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	96 cf       	rjmp	.-212    	; 0xd50 <startupSequence+0x388>
     e24:	18 85       	ldd	r17, Y+8	; 0x08
     e26:	81 2f       	mov	r24, r17
     e28:	6c dd       	rcall	.-1320   	; 0x902 <led_on>
     e2a:	9f e0       	ldi	r25, 0x0F	; 15
     e2c:	e8 e9       	ldi	r30, 0x98	; 152
     e2e:	f2 e0       	ldi	r31, 0x02	; 2
     e30:	91 50       	subi	r25, 0x01	; 1
     e32:	e0 40       	sbci	r30, 0x00	; 0
     e34:	f0 40       	sbci	r31, 0x00	; 0
     e36:	e1 f7       	brne	.-8      	; 0xe30 <startupSequence+0x468>
                    _delay_ms(850);
                    led_off(seq[i]);
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <startupSequence+0x472>
     e3a:	00 00       	nop
     e3c:	81 2f       	mov	r24, r17

                    user_active = userActivity();
     e3e:	66 dd       	rcall	.-1332   	; 0x90c <led_off>
     e40:	37 dd       	rcall	.-1426   	; 0x8b0 <userActivity>
     e42:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <user_active.5520>
     e46:	8e 01       	movw	r16, r28
     e48:	08 5f       	subi	r16, 0xF8	; 248
     e4a:	1f 4f       	sbci	r17, 0xFF	; 255
     e4c:	1d ce       	rjmp	.-966    	; 0xa88 <startupSequence+0xc0>
    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     e4e:	19 81       	ldd	r17, Y+1	; 0x01
     e50:	81 2f       	mov	r24, r17
     e52:	57 dd       	rcall	.-1362   	; 0x902 <led_on>
     e54:	2f e0       	ldi	r18, 0x0F	; 15
     e56:	88 e9       	ldi	r24, 0x98	; 152
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	21 50       	subi	r18, 0x01	; 1
     e5c:	80 40       	sbci	r24, 0x00	; 0
     e5e:	90 40       	sbci	r25, 0x00	; 0
     e60:	e1 f7       	brne	.-8      	; 0xe5a <startupSequence+0x492>
     e62:	00 c0       	rjmp	.+0      	; 0xe64 <startupSequence+0x49c>
     e64:	00 00       	nop
     e66:	81 2f       	mov	r24, r17
                    _delay_ms(850);
                    led_off(seq[i]);
     e68:	51 dd       	rcall	.-1374   	; 0x90c <led_off>
     e6a:	22 dd       	rcall	.-1468   	; 0x8b0 <userActivity>
     e6c:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <user_active.5520>

                    user_active = userActivity();
     e70:	8e 01       	movw	r16, r28
     e72:	0e 5f       	subi	r16, 0xFE	; 254
     e74:	1f 4f       	sbci	r17, 0xFF	; 255
     e76:	ed cd       	rjmp	.-1062   	; 0xa52 <startupSequence+0x8a>
     e78:	28 96       	adiw	r28, 0x08	; 8
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	de bf       	out	0x3e, r29	; 62
            led_allOff();
            break;
        default:
            break;
    }
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	df 90       	pop	r13
     e8c:	cf 90       	pop	r12
     e8e:	bf 90       	pop	r11
     e90:	af 90       	pop	r10
     e92:	9f 90       	pop	r9
     e94:	8f 90       	pop	r8
     e96:	7f 90       	pop	r7
     e98:	6f 90       	pop	r6
     e9a:	08 95       	ret

00000e9c <io_ui_process>:
#include "keypad.h"
#include "joystick.h"


void io_ui_process(void) {
	io_init();
     e9c:	40 ca       	rjmp	.-2944   	; 0x31e <io_init>
     e9e:	08 95       	ret

00000ea0 <startup_ui_process>:
}

void startup_ui_process(uint8_t sequence) {
	startupSequence(sequence);
     ea0:	93 cd       	rjmp	.-1242   	; 0x9c8 <startupSequence>
     ea2:	08 95       	ret

00000ea4 <jstk_ui_process>:
}

void jstk_ui_process(void) {
	joystick();
     ea4:	7b cb       	rjmp	.-2314   	; 0x59c <joystick>
     ea6:	08 95       	ret

00000ea8 <kbd_ui_process>:
}

void kbd_ui_process(void) {
	keypad();
     ea8:	c1 cc       	rjmp	.-1662   	; 0x82c <keypad>
     eaa:	08 95       	ret

00000eac <led_ui_process>:
}

void led_ui_process(uint8_t mask) {
	led_setState(mask);
     eac:	50 cd       	rjmp	.-1376   	; 0x94e <led_setState>
     eae:	08 95       	ret

00000eb0 <status_ui_process>:
}

void status_ui_process(void) {
	testIndicator();
     eb0:	67 cd       	rjmp	.-1330   	; 0x980 <testIndicator>
     eb2:	08 95       	ret

00000eb4 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	27 97       	sbiw	r28, 0x07	; 7
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     ecc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     ed0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     ed4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     ed8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     edc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     ee0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     ee4:	65 e0       	ldi	r22, 0x05	; 5
     ee6:	81 e4       	ldi	r24, 0x41	; 65
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	7a d6       	rcall	.+3316   	; 0x1be0 <ccp_write_io>
     eec:	6c e1       	ldi	r22, 0x1C	; 28
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	6c d6       	rcall	.+3288   	; 0x1bcc <nvm_read_byte>
     ef4:	8a 83       	std	Y+2, r24	; 0x02
     ef6:	6d e1       	ldi	r22, 0x1D	; 29
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	67 d6       	rcall	.+3278   	; 0x1bcc <nvm_read_byte>
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	21 f4       	brne	.+8      	; 0xf10 <sysclk_init+0x5c>
     f08:	80 e4       	ldi	r24, 0x40	; 64
     f0a:	93 e2       	ldi	r25, 0x23	; 35
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	8b 83       	std	Y+3, r24	; 0x03
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	e0 e6       	ldi	r30, 0x60	; 96
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	82 83       	std	Z+2, r24	; 0x02
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	83 83       	std	Z+3, r24	; 0x03
     f22:	8f b7       	in	r24, 0x3f	; 63
     f24:	8e 83       	std	Y+6, r24	; 0x06
     f26:	f8 94       	cli
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	e0 e5       	ldi	r30, 0x50	; 80
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	82 60       	ori	r24, 0x02	; 2
     f32:	80 83       	st	Z, r24
     f34:	9f bf       	out	0x3f, r25	; 63
     f36:	81 81       	ldd	r24, Z+1	; 0x01
     f38:	81 ff       	sbrs	r24, 1
     f3a:	fd cf       	rjmp	.-6      	; 0xf36 <sysclk_init+0x82>
     f3c:	8f b7       	in	r24, 0x3f	; 63
     f3e:	8f 83       	std	Y+7, r24	; 0x07
     f40:	f8 94       	cli
     f42:	9f 81       	ldd	r25, Y+7	; 0x07
     f44:	00 e5       	ldi	r16, 0x50	; 80
     f46:	10 e0       	ldi	r17, 0x00	; 0
     f48:	d8 01       	movw	r26, r16
     f4a:	16 96       	adiw	r26, 0x06	; 6
     f4c:	8c 91       	ld	r24, X
     f4e:	16 97       	sbiw	r26, 0x06	; 6
     f50:	89 7f       	andi	r24, 0xF9	; 249
     f52:	16 96       	adiw	r26, 0x06	; 6
     f54:	8c 93       	st	X, r24
     f56:	16 97       	sbiw	r26, 0x06	; 6
     f58:	e0 e6       	ldi	r30, 0x60	; 96
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 e8       	ldi	r24, 0x80	; 128
     f5e:	85 83       	std	Z+5, r24	; 0x05
     f60:	8b eb       	ldi	r24, 0xBB	; 187
     f62:	86 83       	std	Z+6, r24	; 0x06
     f64:	16 96       	adiw	r26, 0x06	; 6
     f66:	8c 91       	ld	r24, X
     f68:	16 97       	sbiw	r26, 0x06	; 6
     f6a:	84 60       	ori	r24, 0x04	; 4
     f6c:	16 96       	adiw	r26, 0x06	; 6
     f6e:	8c 93       	st	X, r24
     f70:	80 81       	ld	r24, Z
     f72:	81 60       	ori	r24, 0x01	; 1
     f74:	80 83       	st	Z, r24
     f76:	9f bf       	out	0x3f, r25	; 63
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	80 e4       	ldi	r24, 0x40	; 64
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	30 d6       	rcall	.+3168   	; 0x1be0 <ccp_write_io>
     f80:	8f b7       	in	r24, 0x3f	; 63
     f82:	8d 83       	std	Y+5, r24	; 0x05
     f84:	f8 94       	cli
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	f8 01       	movw	r30, r16
     f8a:	80 81       	ld	r24, Z
     f8c:	8e 7f       	andi	r24, 0xFE	; 254
     f8e:	80 83       	st	Z, r24
     f90:	9f bf       	out	0x3f, r25	; 63
     f92:	27 96       	adiw	r28, 0x07	; 7
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	08 95       	ret

00000fa2 <sysclk_enable_module>:
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	1f 92       	push	r1
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9f b7       	in	r25, 0x3f	; 63
     fae:	99 83       	std	Y+1, r25	; 0x01
     fb0:	f8 94       	cli
     fb2:	99 81       	ldd	r25, Y+1	; 0x01
     fb4:	e8 2f       	mov	r30, r24
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	e0 59       	subi	r30, 0x90	; 144
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	60 95       	com	r22
     fbe:	80 81       	ld	r24, Z
     fc0:	68 23       	and	r22, r24
     fc2:	60 83       	st	Z, r22
     fc4:	9f bf       	out	0x3f, r25	; 63
     fc6:	0f 90       	pop	r0
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	1f 92       	push	r1
     fd4:	1f 92       	push	r1
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     fda:	86 30       	cpi	r24, 0x06	; 6
     fdc:	11 f0       	breq	.+4      	; 0xfe2 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     fe2:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     fe4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     fe8:	81 fd       	sbrc	r24, 1
     fea:	2a c0       	rjmp	.+84     	; 0x1040 <__EEPROM_REGION_LENGTH__+0x40>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fec:	8f b7       	in	r24, 0x3f	; 63
     fee:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     ff0:	f8 94       	cli
	return flags;
     ff2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     ff4:	e0 e5       	ldi	r30, 0x50	; 80
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	82 60       	ori	r24, 0x02	; 2
     ffc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ffe:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1000:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1002:	81 ff       	sbrs	r24, 1
    1004:	fd cf       	rjmp	.-6      	; 0x1000 <__EEPROM_REGION_LENGTH__>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1006:	8f b7       	in	r24, 0x3f	; 63
    1008:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    100a:	f8 94       	cli
	return flags;
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    100e:	a0 e5       	ldi	r26, 0x50	; 80
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	16 96       	adiw	r26, 0x06	; 6
    1014:	8c 91       	ld	r24, X
    1016:	16 97       	sbiw	r26, 0x06	; 6
    1018:	89 7f       	andi	r24, 0xF9	; 249
    101a:	16 96       	adiw	r26, 0x06	; 6
    101c:	8c 93       	st	X, r24
    101e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1020:	e0 e6       	ldi	r30, 0x60	; 96
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 e8       	ldi	r24, 0x80	; 128
    1026:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1028:	8b eb       	ldi	r24, 0xBB	; 187
    102a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    102c:	16 96       	adiw	r26, 0x06	; 6
    102e:	8c 91       	ld	r24, X
    1030:	16 97       	sbiw	r26, 0x06	; 6
    1032:	84 60       	ori	r24, 0x04	; 4
    1034:	16 96       	adiw	r26, 0x06	; 6
    1036:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1038:	80 81       	ld	r24, Z
    103a:	81 60       	ori	r24, 0x01	; 1
    103c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    103e:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1040:	63 60       	ori	r22, 0x03	; 3
    1042:	84 e4       	ldi	r24, 0x44	; 68
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	cc d5       	rcall	.+2968   	; 0x1be0 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1048:	60 e4       	ldi	r22, 0x40	; 64
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	aa df       	rcall	.-172    	; 0xfa2 <sysclk_enable_module>
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	08 95       	ret

0000105c <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    105c:	30 91 c7 23 	lds	r19, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1060:	20 91 c8 23 	lds	r18, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    1064:	82 2f       	mov	r24, r18
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	03 97       	sbiw	r24, 0x03	; 3
    106a:	b1 f4       	brne	.+44     	; 0x1098 <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    106c:	31 11       	cpse	r19, r1
    106e:	16 c0       	rjmp	.+44     	; 0x109c <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
    1070:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1074:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1078:	89 2b       	or	r24, r25
    107a:	91 f4       	brne	.+36     	; 0x10a0 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
    107c:	e5 ec       	ldi	r30, 0xC5	; 197
    107e:	f3 e2       	ldi	r31, 0x23	; 35
    1080:	80 ed       	ldi	r24, 0xD0	; 208
    1082:	91 e2       	ldi	r25, 0x21	; 33
    1084:	80 87       	std	Z+8, r24	; 0x08
    1086:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    1088:	82 e5       	ldi	r24, 0x52	; 82
    108a:	98 e0       	ldi	r25, 0x08	; 8
    108c:	84 87       	std	Z+12, r24	; 0x0c
    108e:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
    1090:	12 86       	std	Z+10, r1	; 0x0a
    1092:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	08 95       	ret
	}
	return false;
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	08 95       	ret
    10a0:	80 e0       	ldi	r24, 0x00	; 0
}
    10a2:	08 95       	ret

000010a4 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
    10a4:	08 95       	ret

000010a6 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <udi_hid_generic_b_report_in_free>
    10ac:	08 95       	ret

000010ae <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
    10ae:	10 92 d6 21 	sts	0x21D6, r1	; 0x8021d6 <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
    10b2:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
    10bc:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <main_generic_enable>
}
    10c0:	08 95       	ret

000010c2 <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
    10c2:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <main_generic_disable>
    10c6:	08 95       	ret

000010c8 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
    10c8:	2e e2       	ldi	r18, 0x2E	; 46
    10ca:	38 e0       	ldi	r19, 0x08	; 8
    10cc:	46 ea       	ldi	r20, 0xA6	; 166
    10ce:	50 e2       	ldi	r21, 0x20	; 32
    10d0:	64 ed       	ldi	r22, 0xD4	; 212
    10d2:	71 e2       	ldi	r23, 0x21	; 33
    10d4:	86 ed       	ldi	r24, 0xD6	; 214
    10d6:	91 e2       	ldi	r25, 0x21	; 33
    10d8:	f2 c0       	rjmp	.+484    	; 0x12be <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
    10da:	08 95       	ret

000010dc <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	1f 92       	push	r1
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
    10ee:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <udi_hid_generic_b_report_in_free>
    10f2:	88 23       	and	r24, r24
    10f4:	09 f1       	breq	.+66     	; 0x1138 <udi_hid_generic_send_report_in+0x5c>
    10f6:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10f8:	8f b7       	in	r24, 0x3f	; 63
    10fa:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    10fc:	f8 94       	cli
	return flags;
    10fe:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
    1100:	10 92 d0 21 	sts	0x21D0, r1	; 0x8021d0 <udi_hid_generic_report_feature>
    1104:	10 92 d1 21 	sts	0x21D1, r1	; 0x8021d1 <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
    1108:	80 81       	ld	r24, Z
    110a:	91 81       	ldd	r25, Z+1	; 0x01
    110c:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <udi_hid_generic_report_feature>
    1110:	90 93 d1 21 	sts	0x21D1, r25	; 0x8021d1 <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    1114:	03 e5       	ldi	r16, 0x53	; 83
    1116:	18 e0       	ldi	r17, 0x08	; 8
    1118:	22 e0       	ldi	r18, 0x02	; 2
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 ed       	ldi	r20, 0xD0	; 208
    111e:	51 e2       	ldi	r21, 0x21	; 33
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	82 e8       	ldi	r24, 0x82	; 130
    1124:	0e 94 b4 12 	call	0x2568	; 0x2568 <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	89 27       	eor	r24, r25
    112c:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1130:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
    1132:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <udi_hid_generic_b_report_in_free>
    1136:	89 27       	eor	r24, r25

}
    1138:	0f 90       	pop	r0
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	08 95       	ret

00001146 <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	08 95       	ret

0000114a <udi_hid_kbd_setreport>:
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <udi_hid_kbd_enable>:
    114e:	10 92 ec 21 	sts	0x21EC, r1	; 0x8021ec <udi_hid_kbd_rate>
    1152:	10 92 ea 21 	sts	0x21EA, r1	; 0x8021ea <udi_hid_kbd_protocol>
    1156:	10 92 e0 21 	sts	0x21E0, r1	; 0x8021e0 <udi_hid_kbd_b_report_trans_ongoing>
    115a:	88 e0       	ldi	r24, 0x08	; 8
    115c:	e1 ee       	ldi	r30, 0xE1	; 225
    115e:	f1 e2       	ldi	r31, 0x21	; 33
    1160:	df 01       	movw	r26, r30
    1162:	1d 92       	st	X+, r1
    1164:	8a 95       	dec	r24
    1166:	e9 f7       	brne	.-6      	; 0x1162 <udi_hid_kbd_enable+0x14>
    1168:	10 92 e9 21 	sts	0x21E9, r1	; 0x8021e9 <udi_hid_kbd_b_report_valid>
    116c:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <main_kbd_enable>
    1170:	08 95       	ret

00001172 <udi_hid_kbd_disable>:
    1172:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <main_kbd_disable>
    1176:	08 95       	ret

00001178 <udi_hid_kbd_setup>:
    1178:	25 ea       	ldi	r18, 0xA5	; 165
    117a:	38 e0       	ldi	r19, 0x08	; 8
    117c:	48 ec       	ldi	r20, 0xC8	; 200
    117e:	50 e2       	ldi	r21, 0x20	; 32
    1180:	6a ee       	ldi	r22, 0xEA	; 234
    1182:	71 e2       	ldi	r23, 0x21	; 33
    1184:	8c ee       	ldi	r24, 0xEC	; 236
    1186:	91 e2       	ldi	r25, 0x21	; 33
    1188:	9a c0       	rjmp	.+308    	; 0x12be <udi_hid_setup>
    118a:	08 95       	ret

0000118c <udi_hid_kbd_send_report>:
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <udi_hid_kbd_b_report_trans_ongoing>
    1194:	81 11       	cpse	r24, r1
    1196:	18 c0       	rjmp	.+48     	; 0x11c8 <udi_hid_kbd_send_report+0x3c>
    1198:	88 e0       	ldi	r24, 0x08	; 8
    119a:	e1 ee       	ldi	r30, 0xE1	; 225
    119c:	f1 e2       	ldi	r31, 0x21	; 33
    119e:	a8 ed       	ldi	r26, 0xD8	; 216
    11a0:	b1 e2       	ldi	r27, 0x21	; 33
    11a2:	01 90       	ld	r0, Z+
    11a4:	0d 92       	st	X+, r0
    11a6:	8a 95       	dec	r24
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <udi_hid_kbd_send_report+0x16>
    11aa:	10 92 e9 21 	sts	0x21E9, r1	; 0x8021e9 <udi_hid_kbd_b_report_valid>
    11ae:	08 ee       	ldi	r16, 0xE8	; 232
    11b0:	18 e0       	ldi	r17, 0x08	; 8
    11b2:	28 e0       	ldi	r18, 0x08	; 8
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	48 ed       	ldi	r20, 0xD8	; 216
    11b8:	51 e2       	ldi	r21, 0x21	; 33
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	81 e8       	ldi	r24, 0x81	; 129
    11be:	0e 94 b4 12 	call	0x2568	; 0x2568 <udd_ep_run>
    11c2:	80 93 e0 21 	sts	0x21E0, r24	; 0x8021e0 <udi_hid_kbd_b_report_trans_ongoing>
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <udi_hid_kbd_send_report+0x3e>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	08 95       	ret

000011d0 <udi_hid_kbd_report_sent>:
    11d0:	10 92 e0 21 	sts	0x21E0, r1	; 0x8021e0 <udi_hid_kbd_b_report_trans_ongoing>
    11d4:	80 91 e9 21 	lds	r24, 0x21E9	; 0x8021e9 <udi_hid_kbd_b_report_valid>
    11d8:	81 11       	cpse	r24, r1
    11da:	d8 cf       	rjmp	.-80     	; 0x118c <udi_hid_kbd_send_report>
    11dc:	08 95       	ret

000011de <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	1f 92       	push	r1
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11ea:	9f b7       	in	r25, 0x3f	; 63
    11ec:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    11ee:	f8 94       	cli
	return flags;
    11f0:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    11f2:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <udi_hid_kbd_report+0x2>
    11f6:	99 23       	and	r25, r25
    11f8:	41 f0       	breq	.+16     	; 0x120a <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    11fa:	89 17       	cp	r24, r25
    11fc:	a9 f0       	breq	.+42     	; 0x1228 <udi_hid_kbd_up+0x4a>
    11fe:	e4 ee       	ldi	r30, 0xE4	; 228
    1200:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1202:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    1204:	21 91       	ld	r18, Z+
    1206:	21 11       	cpse	r18, r1
    1208:	02 c0       	rjmp	.+4      	; 0x120e <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    120a:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    120c:	1e c0       	rjmp	.+60     	; 0x124a <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    120e:	28 17       	cp	r18, r24
    1210:	21 f0       	breq	.+8      	; 0x121a <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1212:	9f 5f       	subi	r25, 0xFF	; 255
    1214:	98 30       	cpi	r25, 0x08	; 8
    1216:	b1 f7       	brne	.-20     	; 0x1204 <udi_hid_kbd_up+0x26>
    1218:	05 c0       	rjmp	.+10     	; 0x1224 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    121a:	98 30       	cpi	r25, 0x08	; 8
    121c:	19 f0       	breq	.+6      	; 0x1224 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    121e:	97 30       	cpi	r25, 0x07	; 7
    1220:	20 f0       	brcs	.+8      	; 0x122a <udi_hid_kbd_up+0x4c>
    1222:	0c c0       	rjmp	.+24     	; 0x123c <udi_hid_kbd_up+0x5e>
    1224:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    1226:	11 c0       	rjmp	.+34     	; 0x124a <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1228:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    122a:	e9 2f       	mov	r30, r25
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	ef 51       	subi	r30, 0x1F	; 31
    1230:	fe 4d       	sbci	r31, 0xDE	; 222
    1232:	81 81       	ldd	r24, Z+1	; 0x01
    1234:	80 83       	st	Z, r24
		i++;
    1236:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    1238:	97 30       	cpi	r25, 0x07	; 7
    123a:	b9 f7       	brne	.-18     	; 0x122a <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    123c:	10 92 e8 21 	sts	0x21E8, r1	; 0x8021e8 <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	80 93 e9 21 	sts	0x21E9, r24	; 0x8021e9 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1246:	a2 df       	rcall	.-188    	; 0x118c <udi_hid_kbd_send_report>
    1248:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	0f 90       	pop	r0
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	08 95       	ret

00001256 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	1f 92       	push	r1
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1262:	9f b7       	in	r25, 0x3f	; 63
    1264:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1266:	f8 94       	cli
	return flags;
    1268:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    126a:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <udi_hid_kbd_report+0x2>
    126e:	99 23       	and	r25, r25
    1270:	b1 f0       	breq	.+44     	; 0x129e <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1272:	89 17       	cp	r24, r25
    1274:	41 f0       	breq	.+16     	; 0x1286 <udi_hid_kbd_down+0x30>
    1276:	a4 ee       	ldi	r26, 0xE4	; 228
    1278:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    127a:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    127c:	9d 91       	ld	r25, X+
    127e:	99 23       	and	r25, r25
    1280:	49 f0       	breq	.+18     	; 0x1294 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1282:	98 13       	cpse	r25, r24
    1284:	03 c0       	rjmp	.+6      	; 0x128c <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1286:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	14 c0       	rjmp	.+40     	; 0x12b4 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    128c:	ef 5f       	subi	r30, 0xFF	; 255
    128e:	e8 30       	cpi	r30, 0x08	; 8
    1290:	a9 f7       	brne	.-22     	; 0x127c <udi_hid_kbd_down+0x26>
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    1294:	e8 30       	cpi	r30, 0x08	; 8
    1296:	21 f4       	brne	.+8      	; 0x12a0 <udi_hid_kbd_down+0x4a>
    1298:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	0b c0       	rjmp	.+22     	; 0x12b4 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    129e:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	ef 51       	subi	r30, 0x1F	; 31
    12a4:	fe 4d       	sbci	r31, 0xDE	; 222
    12a6:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	80 93 e9 21 	sts	0x21E9, r24	; 0x8021e9 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    12ae:	6e df       	rcall	.-292    	; 0x118c <udi_hid_kbd_send_report>
    12b0:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
}
    12b4:	0f 90       	pop	r0
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	08 95       	ret

000012be <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	dc 01       	movw	r26, r24
    12c4:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    12c6:	90 91 c5 23 	lds	r25, 0x23C5	; 0x8023c5 <udd_g_ctrlreq>
    12ca:	99 23       	and	r25, r25
    12cc:	0c f0       	brlt	.+2      	; 0x12d0 <udi_hid_setup+0x12>
    12ce:	68 c0       	rjmp	.+208    	; 0x13a0 <udi_hid_setup+0xe2>
    12d0:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <udi_hid_setup+0x18>
    12d4:	45 c0       	rjmp	.+138    	; 0x1360 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    12d6:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    12da:	86 30       	cpi	r24, 0x06	; 6
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <udi_hid_setup+0x22>
    12de:	40 c0       	rjmp	.+128    	; 0x1360 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    12e0:	76 d1       	rcall	.+748    	; 0x15ce <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    12e2:	dc 01       	movw	r26, r24
    12e4:	1a 96       	adiw	r26, 0x0a	; 10
    12e6:	2c 91       	ld	r18, X
    12e8:	1a 97       	sbiw	r26, 0x0a	; 10
    12ea:	21 32       	cpi	r18, 0x21	; 33
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <udi_hid_setup+0x32>
    12ee:	77 c0       	rjmp	.+238    	; 0x13de <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    12f0:	20 91 c8 23 	lds	r18, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	21 32       	cpi	r18, 0x21	; 33
    12f8:	31 05       	cpc	r19, r1
    12fa:	b1 f4       	brne	.+44     	; 0x1328 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    12fc:	9c 01       	movw	r18, r24
    12fe:	27 5f       	subi	r18, 0xF7	; 247
    1300:	3f 4f       	sbci	r19, 0xFF	; 255
    1302:	20 93 cd 23 	sts	0x23CD, r18	; 0x8023cd <udd_g_ctrlreq+0x8>
    1306:	30 93 ce 23 	sts	0x23CE, r19	; 0x8023ce <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    130a:	e5 ec       	ldi	r30, 0xC5	; 197
    130c:	f3 e2       	ldi	r31, 0x23	; 35
    130e:	19 96       	adiw	r26, 0x09	; 9
    1310:	8c 91       	ld	r24, X
    1312:	26 81       	ldd	r18, Z+6	; 0x06
    1314:	37 81       	ldd	r19, Z+7	; 0x07
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	28 17       	cp	r18, r24
    131a:	39 07       	cpc	r19, r25
    131c:	08 f4       	brcc	.+2      	; 0x1320 <udi_hid_setup+0x62>
    131e:	c9 01       	movw	r24, r18
    1320:	82 87       	std	Z+10, r24	; 0x0a
    1322:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	68 c0       	rjmp	.+208    	; 0x13f8 <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1328:	fc 01       	movw	r30, r24
    132a:	47 85       	ldd	r20, Z+15	; 0x0f
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	42 17       	cp	r20, r18
    1330:	53 07       	cpc	r21, r19
    1332:	09 f0       	breq	.+2      	; 0x1336 <udi_hid_setup+0x78>
    1334:	56 c0       	rjmp	.+172    	; 0x13e2 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    1336:	c0 93 cd 23 	sts	0x23CD, r28	; 0x8023cd <udd_g_ctrlreq+0x8>
    133a:	d0 93 ce 23 	sts	0x23CE, r29	; 0x8023ce <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    133e:	e5 ec       	ldi	r30, 0xC5	; 197
    1340:	f3 e2       	ldi	r31, 0x23	; 35
    1342:	26 81       	ldd	r18, Z+6	; 0x06
    1344:	37 81       	ldd	r19, Z+7	; 0x07
    1346:	dc 01       	movw	r26, r24
    1348:	50 96       	adiw	r26, 0x10	; 16
    134a:	8d 91       	ld	r24, X+
    134c:	9c 91       	ld	r25, X
    134e:	51 97       	sbiw	r26, 0x11	; 17
    1350:	28 17       	cp	r18, r24
    1352:	39 07       	cpc	r19, r25
    1354:	08 f4       	brcc	.+2      	; 0x1358 <udi_hid_setup+0x9a>
    1356:	c9 01       	movw	r24, r18
    1358:	82 87       	std	Z+10, r24	; 0x0a
    135a:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	4c c0       	rjmp	.+152    	; 0x13f8 <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1360:	90 32       	cpi	r25, 0x20	; 32
    1362:	09 f0       	breq	.+2      	; 0x1366 <udi_hid_setup+0xa8>
    1364:	40 c0       	rjmp	.+128    	; 0x13e6 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1366:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    136a:	82 30       	cpi	r24, 0x02	; 2
    136c:	39 f0       	breq	.+14     	; 0x137c <udi_hid_setup+0xbe>
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	71 f0       	breq	.+28     	; 0x138e <udi_hid_setup+0xd0>
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	d1 f5       	brne	.+116    	; 0x13ea <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    1376:	f9 01       	movw	r30, r18
    1378:	19 95       	eicall
    137a:	3e c0       	rjmp	.+124    	; 0x13f8 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    137c:	e5 ec       	ldi	r30, 0xC5	; 197
    137e:	f3 e2       	ldi	r31, 0x23	; 35
    1380:	a0 87       	std	Z+8, r26	; 0x08
    1382:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	82 87       	std	Z+10, r24	; 0x0a
    138a:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    138c:	35 c0       	rjmp	.+106    	; 0x13f8 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    138e:	e5 ec       	ldi	r30, 0xC5	; 197
    1390:	f3 e2       	ldi	r31, 0x23	; 35
    1392:	60 87       	std	Z+8, r22	; 0x08
    1394:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	82 87       	std	Z+10, r24	; 0x0a
    139c:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    139e:	2c c0       	rjmp	.+88     	; 0x13f8 <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    13a0:	90 76       	andi	r25, 0x60	; 96
    13a2:	90 32       	cpi	r25, 0x20	; 32
    13a4:	21 f5       	brne	.+72     	; 0x13ee <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    13a6:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    13aa:	8a 30       	cpi	r24, 0x0A	; 10
    13ac:	39 f0       	breq	.+14     	; 0x13bc <udi_hid_setup+0xfe>
    13ae:	8b 30       	cpi	r24, 0x0B	; 11
    13b0:	51 f0       	breq	.+20     	; 0x13c6 <udi_hid_setup+0x108>
    13b2:	89 30       	cpi	r24, 0x09	; 9
    13b4:	f1 f4       	brne	.+60     	; 0x13f2 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    13b6:	f9 01       	movw	r30, r18
    13b8:	19 95       	eicall
    13ba:	1e c0       	rjmp	.+60     	; 0x13f8 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    13bc:	80 91 c8 23 	lds	r24, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    13c0:	8c 93       	st	X, r24
				return true;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	19 c0       	rjmp	.+50     	; 0x13f8 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    13c6:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    13ca:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    13ce:	89 2b       	or	r24, r25
    13d0:	91 f4       	brne	.+36     	; 0x13f6 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    13d2:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    13d6:	db 01       	movw	r26, r22
    13d8:	8c 93       	st	X, r24
				return true;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	0d c0       	rjmp	.+26     	; 0x13f8 <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	0b c0       	rjmp	.+22     	; 0x13f8 <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	07 c0       	rjmp	.+14     	; 0x13f8 <udi_hid_setup+0x13a>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <udi_hid_setup+0x13a>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <udi_hid_setup+0x13a>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    13f6:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    13fe:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    1402:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    1406:	01 90       	ld	r0, Z+
    1408:	f0 81       	ld	r31, Z
    140a:	e0 2d       	mov	r30, r0
    140c:	22 81       	ldd	r18, Z+2	; 0x02
    140e:	33 81       	ldd	r19, Z+3	; 0x03
    1410:	2e 0f       	add	r18, r30
    1412:	3f 1f       	adc	r19, r31
    1414:	fc 01       	movw	r30, r24
    1416:	40 81       	ld	r20, Z
    1418:	e4 0f       	add	r30, r20
    141a:	f1 1d       	adc	r31, r1
    141c:	e2 17       	cp	r30, r18
    141e:	f3 07       	cpc	r31, r19
    1420:	a0 f4       	brcc	.+40     	; 0x144a <udc_next_desc_in_iface+0x4c>
    1422:	81 81       	ldd	r24, Z+1	; 0x01
    1424:	84 30       	cpi	r24, 0x04	; 4
    1426:	a1 f0       	breq	.+40     	; 0x1450 <udc_next_desc_in_iface+0x52>
    1428:	86 13       	cpse	r24, r22
    142a:	06 c0       	rjmp	.+12     	; 0x1438 <udc_next_desc_in_iface+0x3a>
    142c:	14 c0       	rjmp	.+40     	; 0x1456 <udc_next_desc_in_iface+0x58>
    142e:	81 81       	ldd	r24, Z+1	; 0x01
    1430:	84 30       	cpi	r24, 0x04	; 4
    1432:	a1 f0       	breq	.+40     	; 0x145c <udc_next_desc_in_iface+0x5e>
    1434:	86 17       	cp	r24, r22
    1436:	a9 f0       	breq	.+42     	; 0x1462 <udc_next_desc_in_iface+0x64>
    1438:	80 81       	ld	r24, Z
    143a:	e8 0f       	add	r30, r24
    143c:	f1 1d       	adc	r31, r1
    143e:	e2 17       	cp	r30, r18
    1440:	f3 07       	cpc	r31, r19
    1442:	a8 f3       	brcs	.-22     	; 0x142e <udc_next_desc_in_iface+0x30>
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	08 95       	ret
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	08 95       	ret
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	08 95       	ret
    1456:	8e 2f       	mov	r24, r30
    1458:	9f 2f       	mov	r25, r31
    145a:	08 95       	ret
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	08 95       	ret
    1462:	8e 2f       	mov	r24, r30
    1464:	9f 2f       	mov	r25, r31
    1466:	08 95       	ret

00001468 <udc_valid_address>:
    1468:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    146c:	8f 77       	andi	r24, 0x7F	; 127
    146e:	95 c7       	rjmp	.+3882   	; 0x239a <udd_set_address>
    1470:	08 95       	ret

00001472 <udc_update_iface_desc>:
    1472:	90 91 f4 21 	lds	r25, 0x21F4	; 0x8021f4 <udc_num_configuration>
    1476:	99 23       	and	r25, r25
    1478:	81 f1       	breq	.+96     	; 0x14da <udc_update_iface_desc+0x68>
    147a:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    147e:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    1482:	01 90       	ld	r0, Z+
    1484:	f0 81       	ld	r31, Z
    1486:	e0 2d       	mov	r30, r0
    1488:	94 81       	ldd	r25, Z+4	; 0x04
    148a:	89 17       	cp	r24, r25
    148c:	40 f5       	brcc	.+80     	; 0x14de <udc_update_iface_desc+0x6c>
    148e:	e0 93 f0 21 	sts	0x21F0, r30	; 0x8021f0 <udc_ptr_iface>
    1492:	f0 93 f1 21 	sts	0x21F1, r31	; 0x8021f1 <udc_ptr_iface+0x1>
    1496:	22 81       	ldd	r18, Z+2	; 0x02
    1498:	33 81       	ldd	r19, Z+3	; 0x03
    149a:	2e 0f       	add	r18, r30
    149c:	3f 1f       	adc	r19, r31
    149e:	e2 17       	cp	r30, r18
    14a0:	f3 07       	cpc	r31, r19
    14a2:	f8 f4       	brcc	.+62     	; 0x14e2 <udc_update_iface_desc+0x70>
    14a4:	91 81       	ldd	r25, Z+1	; 0x01
    14a6:	94 30       	cpi	r25, 0x04	; 4
    14a8:	61 f4       	brne	.+24     	; 0x14c2 <udc_update_iface_desc+0x50>
    14aa:	92 81       	ldd	r25, Z+2	; 0x02
    14ac:	89 13       	cpse	r24, r25
    14ae:	09 c0       	rjmp	.+18     	; 0x14c2 <udc_update_iface_desc+0x50>
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	96 13       	cpse	r25, r22
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <udc_update_iface_desc+0x50>
    14b6:	e0 93 f0 21 	sts	0x21F0, r30	; 0x8021f0 <udc_ptr_iface>
    14ba:	f0 93 f1 21 	sts	0x21F1, r31	; 0x8021f1 <udc_ptr_iface+0x1>
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	08 95       	ret
    14c2:	90 81       	ld	r25, Z
    14c4:	e9 0f       	add	r30, r25
    14c6:	f1 1d       	adc	r31, r1
    14c8:	e2 17       	cp	r30, r18
    14ca:	f3 07       	cpc	r31, r19
    14cc:	58 f3       	brcs	.-42     	; 0x14a4 <udc_update_iface_desc+0x32>
    14ce:	e0 93 f0 21 	sts	0x21F0, r30	; 0x8021f0 <udc_ptr_iface>
    14d2:	f0 93 f1 21 	sts	0x21F1, r31	; 0x8021f1 <udc_ptr_iface+0x1>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	08 95       	ret
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	08 95       	ret
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	08 95       	ret
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	08 95       	ret

000014e6 <udc_iface_disable>:
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	c8 2f       	mov	r28, r24
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	be df       	rcall	.-132    	; 0x1472 <udc_update_iface_desc>
    14f6:	18 2f       	mov	r17, r24
    14f8:	88 23       	and	r24, r24
    14fa:	81 f1       	breq	.+96     	; 0x155c <udc_iface_disable+0x76>
    14fc:	a0 91 f2 21 	lds	r26, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    1500:	b0 91 f3 21 	lds	r27, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    1504:	ec 2f       	mov	r30, r28
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	ee 0f       	add	r30, r30
    150a:	ff 1f       	adc	r31, r31
    150c:	12 96       	adiw	r26, 0x02	; 2
    150e:	8d 91       	ld	r24, X+
    1510:	9c 91       	ld	r25, X
    1512:	13 97       	sbiw	r26, 0x03	; 3
    1514:	e8 0f       	add	r30, r24
    1516:	f9 1f       	adc	r31, r25
    1518:	e0 80       	ld	r14, Z
    151a:	f1 80       	ldd	r15, Z+1	; 0x01
    151c:	d7 01       	movw	r26, r14
    151e:	16 96       	adiw	r26, 0x06	; 6
    1520:	ed 91       	ld	r30, X+
    1522:	fc 91       	ld	r31, X
    1524:	17 97       	sbiw	r26, 0x07	; 7
    1526:	19 95       	eicall
    1528:	68 2f       	mov	r22, r24
    152a:	8c 2f       	mov	r24, r28
    152c:	a2 df       	rcall	.-188    	; 0x1472 <udc_update_iface_desc>
    152e:	18 2f       	mov	r17, r24
    1530:	88 23       	and	r24, r24
    1532:	a1 f0       	breq	.+40     	; 0x155c <udc_iface_disable+0x76>
    1534:	c0 91 f0 21 	lds	r28, 0x21F0	; 0x8021f0 <udc_ptr_iface>
    1538:	d0 91 f1 21 	lds	r29, 0x21F1	; 0x8021f1 <udc_ptr_iface+0x1>
    153c:	65 e0       	ldi	r22, 0x05	; 5
    153e:	ce 01       	movw	r24, r28
    1540:	5e df       	rcall	.-324    	; 0x13fe <udc_next_desc_in_iface>
    1542:	ec 01       	movw	r28, r24
    1544:	89 2b       	or	r24, r25
    1546:	21 f0       	breq	.+8      	; 0x1550 <udc_iface_disable+0x6a>
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	0e 94 cd 13 	call	0x279a	; 0x279a <udd_ep_free>
    154e:	f6 cf       	rjmp	.-20     	; 0x153c <udc_iface_disable+0x56>
    1550:	d7 01       	movw	r26, r14
    1552:	12 96       	adiw	r26, 0x02	; 2
    1554:	ed 91       	ld	r30, X+
    1556:	fc 91       	ld	r31, X
    1558:	13 97       	sbiw	r26, 0x03	; 3
    155a:	19 95       	eicall
    155c:	81 2f       	mov	r24, r17
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	08 95       	ret

0000156a <udc_iface_enable>:
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	18 2f       	mov	r17, r24
    1572:	7f df       	rcall	.-258    	; 0x1472 <udc_update_iface_desc>
    1574:	88 23       	and	r24, r24
    1576:	39 f1       	breq	.+78     	; 0x15c6 <udc_iface_enable+0x5c>
    1578:	c0 91 f0 21 	lds	r28, 0x21F0	; 0x8021f0 <udc_ptr_iface>
    157c:	d0 91 f1 21 	lds	r29, 0x21F1	; 0x8021f1 <udc_ptr_iface+0x1>
    1580:	65 e0       	ldi	r22, 0x05	; 5
    1582:	ce 01       	movw	r24, r28
    1584:	3c df       	rcall	.-392    	; 0x13fe <udc_next_desc_in_iface>
    1586:	ec 01       	movw	r28, r24
    1588:	89 2b       	or	r24, r25
    158a:	41 f0       	breq	.+16     	; 0x159c <udc_iface_enable+0x32>
    158c:	4c 81       	ldd	r20, Y+4	; 0x04
    158e:	5d 81       	ldd	r21, Y+5	; 0x05
    1590:	6b 81       	ldd	r22, Y+3	; 0x03
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	0f d7       	rcall	.+3614   	; 0x23b4 <udd_ep_alloc>
    1596:	81 11       	cpse	r24, r1
    1598:	f3 cf       	rjmp	.-26     	; 0x1580 <udc_iface_enable+0x16>
    159a:	15 c0       	rjmp	.+42     	; 0x15c6 <udc_iface_enable+0x5c>
    159c:	a0 91 f2 21 	lds	r26, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    15a0:	b0 91 f3 21 	lds	r27, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    15a4:	e1 2f       	mov	r30, r17
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	12 96       	adiw	r26, 0x02	; 2
    15ae:	8d 91       	ld	r24, X+
    15b0:	9c 91       	ld	r25, X
    15b2:	13 97       	sbiw	r26, 0x03	; 3
    15b4:	e8 0f       	add	r30, r24
    15b6:	f9 1f       	adc	r31, r25
    15b8:	01 90       	ld	r0, Z+
    15ba:	f0 81       	ld	r31, Z
    15bc:	e0 2d       	mov	r30, r0
    15be:	01 90       	ld	r0, Z+
    15c0:	f0 81       	ld	r31, Z
    15c2:	e0 2d       	mov	r30, r0
    15c4:	19 95       	eicall
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	08 95       	ret

000015ce <udc_get_interface_desc>:
    15ce:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <udc_ptr_iface>
    15d2:	90 91 f1 21 	lds	r25, 0x21F1	; 0x8021f1 <udc_ptr_iface+0x1>
    15d6:	08 95       	ret

000015d8 <udc_start>:
    15d8:	55 c6       	rjmp	.+3242   	; 0x2284 <udd_enable>
    15da:	08 95       	ret

000015dc <udc_reset>:
    15dc:	cf 93       	push	r28
    15de:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_num_configuration>
    15e2:	88 23       	and	r24, r24
    15e4:	c1 f0       	breq	.+48     	; 0x1616 <udc_reset+0x3a>
    15e6:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    15ea:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    15ee:	01 90       	ld	r0, Z+
    15f0:	f0 81       	ld	r31, Z
    15f2:	e0 2d       	mov	r30, r0
    15f4:	84 81       	ldd	r24, Z+4	; 0x04
    15f6:	88 23       	and	r24, r24
    15f8:	71 f0       	breq	.+28     	; 0x1616 <udc_reset+0x3a>
    15fa:	c0 e0       	ldi	r28, 0x00	; 0
    15fc:	8c 2f       	mov	r24, r28
    15fe:	73 df       	rcall	.-282    	; 0x14e6 <udc_iface_disable>
    1600:	cf 5f       	subi	r28, 0xFF	; 255
    1602:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    1606:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    160a:	01 90       	ld	r0, Z+
    160c:	f0 81       	ld	r31, Z
    160e:	e0 2d       	mov	r30, r0
    1610:	84 81       	ldd	r24, Z+4	; 0x04
    1612:	c8 17       	cp	r28, r24
    1614:	98 f3       	brcs	.-26     	; 0x15fc <udc_reset+0x20>
    1616:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <udc_num_configuration>
    161a:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udc_device_status>
    161e:	81 fd       	sbrc	r24, 1
    1620:	0e 94 e5 15 	call	0x2bca	; 0x2bca <main_remotewakeup_disable>
    1624:	10 92 f8 21 	sts	0x21F8, r1	; 0x8021f8 <udc_device_status>
    1628:	10 92 f9 21 	sts	0x21F9, r1	; 0x8021f9 <udc_device_status+0x1>
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1630:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1632:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_num_configuration>
    1636:	88 23       	and	r24, r24
    1638:	49 f1       	breq	.+82     	; 0x168c <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    163a:	a0 91 f2 21 	lds	r26, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    163e:	b0 91 f3 21 	lds	r27, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    1642:	ed 91       	ld	r30, X+
    1644:	fc 91       	ld	r31, X
    1646:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1648:	84 81       	ldd	r24, Z+4	; 0x04
    164a:	88 23       	and	r24, r24
    164c:	f9 f0       	breq	.+62     	; 0x168c <udc_sof_notify+0x5c>
    164e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1650:	ec 2f       	mov	r30, r28
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	ee 0f       	add	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	12 96       	adiw	r26, 0x02	; 2
    165a:	8d 91       	ld	r24, X+
    165c:	9c 91       	ld	r25, X
    165e:	13 97       	sbiw	r26, 0x03	; 3
    1660:	e8 0f       	add	r30, r24
    1662:	f9 1f       	adc	r31, r25
    1664:	01 90       	ld	r0, Z+
    1666:	f0 81       	ld	r31, Z
    1668:	e0 2d       	mov	r30, r0
    166a:	00 84       	ldd	r0, Z+8	; 0x08
    166c:	f1 85       	ldd	r31, Z+9	; 0x09
    166e:	e0 2d       	mov	r30, r0
    1670:	30 97       	sbiw	r30, 0x00	; 0
    1672:	09 f0       	breq	.+2      	; 0x1676 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1674:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1676:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1678:	a0 91 f2 21 	lds	r26, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    167c:	b0 91 f3 21 	lds	r27, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    1680:	ed 91       	ld	r30, X+
    1682:	fc 91       	ld	r31, X
    1684:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1686:	84 81       	ldd	r24, Z+4	; 0x04
    1688:	c8 17       	cp	r28, r24
    168a:	10 f3       	brcs	.-60     	; 0x1650 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1698:	e5 ec       	ldi	r30, 0xC5	; 197
    169a:	f3 e2       	ldi	r31, 0x23	; 35
    169c:	12 86       	std	Z+10, r1	; 0x0a
    169e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    16a0:	14 86       	std	Z+12, r1	; 0x0c
    16a2:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    16a4:	16 86       	std	Z+14, r1	; 0x0e
    16a6:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    16a8:	80 81       	ld	r24, Z
    16aa:	88 23       	and	r24, r24
    16ac:	0c f0       	brlt	.+2      	; 0x16b0 <udc_process_setup+0x20>
    16ae:	7e c2       	rjmp	.+1276   	; 0x1bac <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    16b0:	20 91 cb 23 	lds	r18, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    16b4:	30 91 cc 23 	lds	r19, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    16b8:	21 15       	cp	r18, r1
    16ba:	31 05       	cpc	r19, r1
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <udc_process_setup+0x30>
    16be:	7b c2       	rjmp	.+1270   	; 0x1bb6 <udc_process_setup+0x526>
    16c0:	6d c2       	rjmp	.+1242   	; 0x1b9c <udc_process_setup+0x50c>
    16c2:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <udc_process_setup+0x38>
    16c6:	a0 c0       	rjmp	.+320    	; 0x1808 <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    16c8:	90 91 c6 23 	lds	r25, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    16cc:	96 30       	cpi	r25, 0x06	; 6
    16ce:	79 f0       	breq	.+30     	; 0x16ee <udc_process_setup+0x5e>
    16d0:	98 30       	cpi	r25, 0x08	; 8
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <udc_process_setup+0x46>
    16d4:	8f c0       	rjmp	.+286    	; 0x17f4 <udc_process_setup+0x164>
    16d6:	91 11       	cpse	r25, r1
    16d8:	97 c0       	rjmp	.+302    	; 0x1808 <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	09 f0       	breq	.+2      	; 0x16e2 <udc_process_setup+0x52>
    16e0:	19 c2       	rjmp	.+1074   	; 0x1b14 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    16e2:	62 e0       	ldi	r22, 0x02	; 2
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	88 ef       	ldi	r24, 0xF8	; 248
    16e8:	91 e2       	ldi	r25, 0x21	; 33
    16ea:	5d d6       	rcall	.+3258   	; 0x23a6 <udd_set_setup_payload>
    16ec:	69 c2       	rjmp	.+1234   	; 0x1bc0 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    16ee:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    16f2:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    16f6:	29 2f       	mov	r18, r25
    16f8:	33 27       	eor	r19, r19
    16fa:	22 30       	cpi	r18, 0x02	; 2
    16fc:	31 05       	cpc	r19, r1
    16fe:	a9 f0       	breq	.+42     	; 0x172a <udc_process_setup+0x9a>
    1700:	20 f4       	brcc	.+8      	; 0x170a <udc_process_setup+0x7a>
    1702:	21 30       	cpi	r18, 0x01	; 1
    1704:	31 05       	cpc	r19, r1
    1706:	41 f0       	breq	.+16     	; 0x1718 <udc_process_setup+0x88>
    1708:	c7 c1       	rjmp	.+910    	; 0x1a98 <udc_process_setup+0x408>
    170a:	23 30       	cpi	r18, 0x03	; 3
    170c:	31 05       	cpc	r19, r1
    170e:	d9 f1       	breq	.+118    	; 0x1786 <udc_process_setup+0xf6>
    1710:	2f 30       	cpi	r18, 0x0F	; 15
    1712:	31 05       	cpc	r19, r1
    1714:	51 f1       	breq	.+84     	; 0x176a <udc_process_setup+0xda>
    1716:	c0 c1       	rjmp	.+896    	; 0x1a98 <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1718:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    171c:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1720:	dc 01       	movw	r26, r24
    1722:	6c 91       	ld	r22, X
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	3f d6       	rcall	.+3198   	; 0x23a6 <udd_set_setup_payload>
    1728:	56 c0       	rjmp	.+172    	; 0x17d6 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    172a:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    172e:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    1732:	21 89       	ldd	r18, Z+17	; 0x11
    1734:	82 17       	cp	r24, r18
    1736:	08 f0       	brcs	.+2      	; 0x173a <udc_process_setup+0xaa>
    1738:	ed c1       	rjmp	.+986    	; 0x1b14 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    173a:	99 27       	eor	r25, r25
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1748:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    174c:	e8 0f       	add	r30, r24
    174e:	f9 1f       	adc	r31, r25
    1750:	80 81       	ld	r24, Z
    1752:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1754:	fc 01       	movw	r30, r24
    1756:	62 81       	ldd	r22, Z+2	; 0x02
    1758:	73 81       	ldd	r23, Z+3	; 0x03
    175a:	25 d6       	rcall	.+3146   	; 0x23a6 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    175c:	e0 91 cd 23 	lds	r30, 0x23CD	; 0x8023cd <udd_g_ctrlreq+0x8>
    1760:	f0 91 ce 23 	lds	r31, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x9>
    1764:	82 e0       	ldi	r24, 0x02	; 2
    1766:	81 83       	std	Z+1, r24	; 0x01
    1768:	36 c0       	rjmp	.+108    	; 0x17d6 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    176a:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    176e:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	09 f4       	brne	.+2      	; 0x1778 <udc_process_setup+0xe8>
    1776:	ce c1       	rjmp	.+924    	; 0x1b14 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1778:	dc 01       	movw	r26, r24
    177a:	12 96       	adiw	r26, 0x02	; 2
    177c:	6d 91       	ld	r22, X+
    177e:	7c 91       	ld	r23, X
    1780:	13 97       	sbiw	r26, 0x03	; 3
    1782:	11 d6       	rcall	.+3106   	; 0x23a6 <udd_set_setup_payload>
    1784:	28 c0       	rjmp	.+80     	; 0x17d6 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1786:	99 27       	eor	r25, r25
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	91 05       	cpc	r25, r1
    178c:	71 f0       	breq	.+28     	; 0x17aa <udc_process_setup+0x11a>
    178e:	38 f0       	brcs	.+14     	; 0x179e <udc_process_setup+0x10e>
    1790:	02 97       	sbiw	r24, 0x02	; 2
    1792:	09 f0       	breq	.+2      	; 0x1796 <udc_process_setup+0x106>
    1794:	8a c1       	rjmp	.+788    	; 0x1aaa <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1796:	e2 e5       	ldi	r30, 0x52	; 82
    1798:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    179a:	31 e2       	ldi	r19, 0x21	; 33
    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    179e:	64 e0       	ldi	r22, 0x04	; 4
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	8e e7       	ldi	r24, 0x7E	; 126
    17a4:	91 e2       	ldi	r25, 0x21	; 33
    17a6:	ff d5       	rcall	.+3070   	; 0x23a6 <udd_set_setup_payload>
    17a8:	16 c0       	rjmp	.+44     	; 0x17d6 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    17aa:	e4 e7       	ldi	r30, 0x74	; 116
    17ac:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    17ae:	39 e0       	ldi	r19, 0x09	; 9
    17b0:	a0 e1       	ldi	r26, 0x10	; 16
    17b2:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    17b4:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    17b6:	81 91       	ld	r24, Z+
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	8d 93       	st	X+, r24
    17bc:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    17be:	2f 5f       	subi	r18, 0xFF	; 255
    17c0:	23 17       	cp	r18, r19
    17c2:	c8 f3       	brcs	.-14     	; 0x17b6 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    17c4:	63 2f       	mov	r22, r19
    17c6:	66 0f       	add	r22, r22
    17c8:	6e 5f       	subi	r22, 0xFE	; 254
    17ca:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <udc_string_desc>
		udd_set_setup_payload(
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	8e e0       	ldi	r24, 0x0E	; 14
    17d2:	91 e2       	ldi	r25, 0x21	; 33
    17d4:	e8 d5       	rcall	.+3024   	; 0x23a6 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    17d6:	e5 ec       	ldi	r30, 0xC5	; 197
    17d8:	f3 e2       	ldi	r31, 0x23	; 35
    17da:	86 81       	ldd	r24, Z+6	; 0x06
    17dc:	97 81       	ldd	r25, Z+7	; 0x07
    17de:	22 85       	ldd	r18, Z+10	; 0x0a
    17e0:	33 85       	ldd	r19, Z+11	; 0x0b
    17e2:	82 17       	cp	r24, r18
    17e4:	93 07       	cpc	r25, r19
    17e6:	08 f0       	brcs	.+2      	; 0x17ea <udc_process_setup+0x15a>
    17e8:	eb c1       	rjmp	.+982    	; 0x1bc0 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    17ea:	80 93 cf 23 	sts	0x23CF, r24	; 0x8023cf <udd_g_ctrlreq+0xa>
    17ee:	90 93 d0 23 	sts	0x23D0, r25	; 0x8023d0 <udd_g_ctrlreq+0xb>
    17f2:	e6 c1       	rjmp	.+972    	; 0x1bc0 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    17f4:	21 30       	cpi	r18, 0x01	; 1
    17f6:	31 05       	cpc	r19, r1
    17f8:	09 f0       	breq	.+2      	; 0x17fc <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    17fa:	8c c1       	rjmp	.+792    	; 0x1b14 <udc_process_setup+0x484>
    17fc:	61 e0       	ldi	r22, 0x01	; 1
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	84 ef       	ldi	r24, 0xF4	; 244
    1802:	91 e2       	ldi	r25, 0x21	; 33
    1804:	d0 d5       	rcall	.+2976   	; 0x23a6 <udd_set_setup_payload>
    1806:	dc c1       	rjmp	.+952    	; 0x1bc0 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1808:	81 30       	cpi	r24, 0x01	; 1
    180a:	e1 f5       	brne	.+120    	; 0x1884 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    180c:	90 91 c6 23 	lds	r25, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    1810:	9a 30       	cpi	r25, 0x0A	; 10
    1812:	c1 f5       	brne	.+112    	; 0x1884 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1814:	21 30       	cpi	r18, 0x01	; 1
    1816:	31 05       	cpc	r19, r1
    1818:	09 f0       	breq	.+2      	; 0x181c <udc_process_setup+0x18c>
    181a:	4c c1       	rjmp	.+664    	; 0x1ab4 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    181c:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_num_configuration>
    1820:	88 23       	and	r24, r24
    1822:	09 f4       	brne	.+2      	; 0x1826 <udc_process_setup+0x196>
    1824:	47 c1       	rjmp	.+654    	; 0x1ab4 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1826:	c0 91 c9 23 	lds	r28, 0x23C9	; 0x8023c9 <udd_g_ctrlreq+0x4>
    182a:	d0 91 ca 23 	lds	r29, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    182e:	00 91 f2 21 	lds	r16, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    1832:	10 91 f3 21 	lds	r17, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    1836:	d8 01       	movw	r26, r16
    1838:	ed 91       	ld	r30, X+
    183a:	fc 91       	ld	r31, X
    183c:	84 81       	ldd	r24, Z+4	; 0x04
    183e:	c8 17       	cp	r28, r24
    1840:	08 f0       	brcs	.+2      	; 0x1844 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1842:	38 c1       	rjmp	.+624    	; 0x1ab4 <udc_process_setup+0x424>
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	8c 2f       	mov	r24, r28
    1848:	14 de       	rcall	.-984    	; 0x1472 <udc_update_iface_desc>
    184a:	88 23       	and	r24, r24
    184c:	09 f4       	brne	.+2      	; 0x1850 <udc_process_setup+0x1c0>
    184e:	2d c1       	rjmp	.+602    	; 0x1aaa <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1850:	ce 01       	movw	r24, r28
    1852:	99 27       	eor	r25, r25
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	d8 01       	movw	r26, r16
    185a:	12 96       	adiw	r26, 0x02	; 2
    185c:	ed 91       	ld	r30, X+
    185e:	fc 91       	ld	r31, X
    1860:	13 97       	sbiw	r26, 0x03	; 3
    1862:	e8 0f       	add	r30, r24
    1864:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1866:	01 90       	ld	r0, Z+
    1868:	f0 81       	ld	r31, Z
    186a:	e0 2d       	mov	r30, r0
    186c:	86 81       	ldd	r24, Z+6	; 0x06
    186e:	97 81       	ldd	r25, Z+7	; 0x07
    1870:	fc 01       	movw	r30, r24
    1872:	19 95       	eicall
    1874:	80 93 f6 21 	sts	0x21F6, r24	; 0x8021f6 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	86 ef       	ldi	r24, 0xF6	; 246
    187e:	91 e2       	ldi	r25, 0x21	; 33
    1880:	92 d5       	rcall	.+2852   	; 0x23a6 <udd_set_setup_payload>
    1882:	9e c1       	rjmp	.+828    	; 0x1bc0 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1884:	82 30       	cpi	r24, 0x02	; 2
    1886:	09 f0       	breq	.+2      	; 0x188a <udc_process_setup+0x1fa>
    1888:	10 c1       	rjmp	.+544    	; 0x1aaa <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    188a:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    188e:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1890:	05 c1       	rjmp	.+522    	; 0x1a9c <udc_process_setup+0x40c>
    1892:	22 30       	cpi	r18, 0x02	; 2
    1894:	31 05       	cpc	r19, r1
    1896:	09 f0       	breq	.+2      	; 0x189a <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1898:	3d c1       	rjmp	.+634    	; 0x1b14 <udc_process_setup+0x484>
    189a:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udd_g_ctrlreq+0x4>
    189e:	12 d6       	rcall	.+3108   	; 0x24c4 <udd_ep_is_halted>
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <udc_ep_status.4577>
    18a6:	90 93 ef 21 	sts	0x21EF, r25	; 0x8021ef <udc_ep_status.4577+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    18aa:	62 e0       	ldi	r22, 0x02	; 2
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	8e ee       	ldi	r24, 0xEE	; 238
    18b0:	91 e2       	ldi	r25, 0x21	; 33
    18b2:	79 d5       	rcall	.+2802   	; 0x23a6 <udd_set_setup_payload>
    18b4:	85 c1       	rjmp	.+778    	; 0x1bc0 <udc_process_setup+0x530>
    18b6:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    18b8:	09 f0       	breq	.+2      	; 0x18bc <udc_process_setup+0x22c>
    18ba:	9f c0       	rjmp	.+318    	; 0x19fa <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    18bc:	90 91 c6 23 	lds	r25, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    18c0:	93 30       	cpi	r25, 0x03	; 3
    18c2:	91 f1       	breq	.+100    	; 0x1928 <udc_process_setup+0x298>
    18c4:	18 f4       	brcc	.+6      	; 0x18cc <udc_process_setup+0x23c>
    18c6:	91 30       	cpi	r25, 0x01	; 1
    18c8:	a9 f0       	breq	.+42     	; 0x18f4 <udc_process_setup+0x264>
    18ca:	97 c0       	rjmp	.+302    	; 0x19fa <udc_process_setup+0x36a>
    18cc:	95 30       	cpi	r25, 0x05	; 5
    18ce:	21 f0       	breq	.+8      	; 0x18d8 <udc_process_setup+0x248>
    18d0:	99 30       	cpi	r25, 0x09	; 9
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <udc_process_setup+0x246>
    18d4:	43 c0       	rjmp	.+134    	; 0x195c <udc_process_setup+0x2cc>
    18d6:	91 c0       	rjmp	.+290    	; 0x19fa <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18d8:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    18dc:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    18e0:	89 2b       	or	r24, r25
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <udc_process_setup+0x256>
    18e4:	17 c1       	rjmp	.+558    	; 0x1b14 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    18e6:	84 e3       	ldi	r24, 0x34	; 52
    18e8:	9a e0       	ldi	r25, 0x0A	; 10
    18ea:	80 93 d1 23 	sts	0x23D1, r24	; 0x8023d1 <udd_g_ctrlreq+0xc>
    18ee:	90 93 d2 23 	sts	0x23D2, r25	; 0x8023d2 <udd_g_ctrlreq+0xd>
    18f2:	66 c1       	rjmp	.+716    	; 0x1bc0 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18f4:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    18f8:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    18fc:	89 2b       	or	r24, r25
    18fe:	09 f0       	breq	.+2      	; 0x1902 <udc_process_setup+0x272>
    1900:	09 c1       	rjmp	.+530    	; 0x1b14 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1902:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1906:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	09 f0       	breq	.+2      	; 0x1910 <udc_process_setup+0x280>
    190e:	02 c1       	rjmp	.+516    	; 0x1b14 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1910:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udc_device_status>
    1914:	90 91 f9 21 	lds	r25, 0x21F9	; 0x8021f9 <udc_device_status+0x1>
    1918:	8d 7f       	andi	r24, 0xFD	; 253
    191a:	80 93 f8 21 	sts	0x21F8, r24	; 0x8021f8 <udc_device_status>
    191e:	90 93 f9 21 	sts	0x21F9, r25	; 0x8021f9 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1922:	0e 94 e5 15 	call	0x2bca	; 0x2bca <main_remotewakeup_disable>
    1926:	4c c1       	rjmp	.+664    	; 0x1bc0 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1928:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    192c:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1930:	89 2b       	or	r24, r25
    1932:	09 f0       	breq	.+2      	; 0x1936 <udc_process_setup+0x2a6>
    1934:	ef c0       	rjmp	.+478    	; 0x1b14 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1936:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    193a:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	09 f0       	breq	.+2      	; 0x1944 <udc_process_setup+0x2b4>
    1942:	ae c0       	rjmp	.+348    	; 0x1aa0 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1944:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <udc_device_status>
    1948:	90 91 f9 21 	lds	r25, 0x21F9	; 0x8021f9 <udc_device_status+0x1>
    194c:	82 60       	ori	r24, 0x02	; 2
    194e:	80 93 f8 21 	sts	0x21F8, r24	; 0x8021f8 <udc_device_status>
    1952:	90 93 f9 21 	sts	0x21F9, r25	; 0x8021f9 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1956:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    195a:	32 c1       	rjmp	.+612    	; 0x1bc0 <udc_process_setup+0x530>
    195c:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1960:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1964:	89 2b       	or	r24, r25
    1966:	09 f0       	breq	.+2      	; 0x196a <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1968:	d5 c0       	rjmp	.+426    	; 0x1b14 <udc_process_setup+0x484>
    196a:	1a d5       	rcall	.+2612   	; 0x23a0 <udd_getaddress>
    196c:	88 23       	and	r24, r24
    196e:	09 f4       	brne	.+2      	; 0x1972 <udc_process_setup+0x2e2>
    1970:	9c c0       	rjmp	.+312    	; 0x1aaa <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1972:	20 91 c7 23 	lds	r18, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1976:	30 91 c8 23 	lds	r19, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    197a:	33 27       	eor	r19, r19
    197c:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1980:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1984:	81 89       	ldd	r24, Z+17	; 0x11
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	82 17       	cp	r24, r18
    198a:	93 07       	cpc	r25, r19
    198c:	08 f4       	brcc	.+2      	; 0x1990 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    198e:	8d c0       	rjmp	.+282    	; 0x1aaa <udc_process_setup+0x41a>
    1990:	25 de       	rcall	.-950    	; 0x15dc <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1992:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1996:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    199a:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    199e:	88 23       	and	r24, r24
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <udc_process_setup+0x314>
    19a2:	0e c1       	rjmp	.+540    	; 0x1bc0 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    19a4:	99 27       	eor	r25, r25
    19a6:	81 50       	subi	r24, 0x01	; 1
    19a8:	90 4c       	sbci	r25, 0xC0	; 192
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    19b6:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    19ba:	e8 0f       	add	r30, r24
    19bc:	f9 1f       	adc	r31, r25
    19be:	e0 93 f2 21 	sts	0x21F2, r30	; 0x8021f2 <udc_ptr_conf>
    19c2:	f0 93 f3 21 	sts	0x21F3, r31	; 0x8021f3 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19c6:	01 90       	ld	r0, Z+
    19c8:	f0 81       	ld	r31, Z
    19ca:	e0 2d       	mov	r30, r0
    19cc:	84 81       	ldd	r24, Z+4	; 0x04
    19ce:	88 23       	and	r24, r24
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <udc_process_setup+0x344>
    19d2:	f6 c0       	rjmp	.+492    	; 0x1bc0 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    19d4:	c0 e0       	ldi	r28, 0x00	; 0
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	8c 2f       	mov	r24, r28
    19da:	c7 dd       	rcall	.-1138   	; 0x156a <udc_iface_enable>
    19dc:	88 23       	and	r24, r24
    19de:	09 f4       	brne	.+2      	; 0x19e2 <udc_process_setup+0x352>
    19e0:	64 c0       	rjmp	.+200    	; 0x1aaa <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    19e2:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19e4:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    19e8:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    19ec:	01 90       	ld	r0, Z+
    19ee:	f0 81       	ld	r31, Z
    19f0:	e0 2d       	mov	r30, r0
    19f2:	84 81       	ldd	r24, Z+4	; 0x04
    19f4:	c8 17       	cp	r28, r24
    19f6:	78 f3       	brcs	.-34     	; 0x19d6 <udc_process_setup+0x346>
    19f8:	e3 c0       	rjmp	.+454    	; 0x1bc0 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	e9 f4       	brne	.+58     	; 0x1a38 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    19fe:	90 91 c6 23 	lds	r25, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    1a02:	9b 30       	cpi	r25, 0x0B	; 11
    1a04:	c9 f4       	brne	.+50     	; 0x1a38 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1a06:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1a0a:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1a0e:	89 2b       	or	r24, r25
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1a12:	50 c0       	rjmp	.+160    	; 0x1ab4 <udc_process_setup+0x424>
    1a14:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_num_configuration>
    1a18:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <udc_process_setup+0x38e>
    1a1c:	4b c0       	rjmp	.+150    	; 0x1ab4 <udc_process_setup+0x424>
    1a1e:	e5 ec       	ldi	r30, 0xC5	; 197
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1a20:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1a22:	c4 81       	ldd	r28, Z+4	; 0x04
    1a24:	d2 81       	ldd	r29, Z+2	; 0x02
    1a26:	8c 2f       	mov	r24, r28
    1a28:	5e dd       	rcall	.-1348   	; 0x14e6 <udc_iface_disable>
    1a2a:	88 23       	and	r24, r24
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1a2e:	3d c0       	rjmp	.+122    	; 0x1aaa <udc_process_setup+0x41a>
    1a30:	6d 2f       	mov	r22, r29
    1a32:	8c 2f       	mov	r24, r28
    1a34:	9a dd       	rcall	.-1228   	; 0x156a <udc_iface_enable>
    1a36:	37 c0       	rjmp	.+110    	; 0x1aa6 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1a38:	82 30       	cpi	r24, 0x02	; 2
    1a3a:	b9 f5       	brne	.+110    	; 0x1aaa <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a3c:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	19 f0       	breq	.+6      	; 0x1a4a <udc_process_setup+0x3ba>
    1a44:	83 30       	cpi	r24, 0x03	; 3
    1a46:	99 f0       	breq	.+38     	; 0x1a6e <udc_process_setup+0x3de>
    1a48:	2d c0       	rjmp	.+90     	; 0x1aa4 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1a4a:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1a4e:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1a52:	89 2b       	or	r24, r25
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1a56:	5e c0       	rjmp	.+188    	; 0x1b14 <udc_process_setup+0x484>
    1a58:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1a5c:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    1a60:	89 2b       	or	r24, r25
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1a64:	57 c0       	rjmp	.+174    	; 0x1b14 <udc_process_setup+0x484>
    1a66:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udd_g_ctrlreq+0x4>
    1a6a:	47 d5       	rcall	.+2702   	; 0x24fa <udd_ep_clear_halt>
    1a6c:	1c c0       	rjmp	.+56     	; 0x1aa6 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1a6e:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1a72:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1a76:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <udc_process_setup+0x3ec>
    1a7a:	4c c0       	rjmp	.+152    	; 0x1b14 <udc_process_setup+0x484>
    1a7c:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1a80:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    1a84:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <udc_process_setup+0x3fa>
    1a88:	45 c0       	rjmp	.+138    	; 0x1b14 <udc_process_setup+0x484>
    1a8a:	c5 ec       	ldi	r28, 0xC5	; 197
    1a8c:	d3 e2       	ldi	r29, 0x23	; 35
    1a8e:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1a90:	35 d6       	rcall	.+3178   	; 0x26fc <udd_ep_abort>
    1a92:	8c 81       	ldd	r24, Y+4	; 0x04
    1a94:	9e d6       	rcall	.+3388   	; 0x27d2 <udd_ep_set_halt>
    1a96:	07 c0       	rjmp	.+14     	; 0x1aa6 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	03 c0       	rjmp	.+6      	; 0x1aa6 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1aa6:	81 11       	cpse	r24, r1
    1aa8:	8c c0       	rjmp	.+280    	; 0x1bc2 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1aaa:	80 91 c5 23 	lds	r24, 0x23C5	; 0x8023c5 <udd_g_ctrlreq>
    1aae:	8f 71       	andi	r24, 0x1F	; 31
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	81 f5       	brne	.+96     	; 0x1b14 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1ab4:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_num_configuration>
    1ab8:	88 23       	and	r24, r24
    1aba:	09 f4       	brne	.+2      	; 0x1abe <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1abc:	71 c0       	rjmp	.+226    	; 0x1ba0 <udc_process_setup+0x510>
    1abe:	00 91 c9 23 	lds	r16, 0x23C9	; 0x8023c9 <udd_g_ctrlreq+0x4>
    1ac2:	10 91 ca 23 	lds	r17, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ac6:	c0 91 f2 21 	lds	r28, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    1aca:	d0 91 f3 21 	lds	r29, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    1ace:	e8 81       	ld	r30, Y
    1ad0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ad2:	84 81       	ldd	r24, Z+4	; 0x04
    1ad4:	08 17       	cp	r16, r24
    1ad6:	08 f0       	brcs	.+2      	; 0x1ada <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1ad8:	65 c0       	rjmp	.+202    	; 0x1ba4 <udc_process_setup+0x514>
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	80 2f       	mov	r24, r16
    1ade:	c9 dc       	rcall	.-1646   	; 0x1472 <udc_update_iface_desc>
    1ae0:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1ae2:	c1 f0       	breq	.+48     	; 0x1b14 <udc_process_setup+0x484>
    1ae4:	f8 01       	movw	r30, r16
    1ae6:	ff 27       	eor	r31, r31
    1ae8:	cf 01       	movw	r24, r30
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	ea 81       	ldd	r30, Y+2	; 0x02
    1af0:	fb 81       	ldd	r31, Y+3	; 0x03
    1af2:	e8 0f       	add	r30, r24
    1af4:	f9 1f       	adc	r31, r25
    1af6:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1af8:	d1 81       	ldd	r29, Z+1	; 0x01
    1afa:	ee 81       	ldd	r30, Y+6	; 0x06
    1afc:	ff 81       	ldd	r31, Y+7	; 0x07
    1afe:	19 95       	eicall
    1b00:	68 2f       	mov	r22, r24
    1b02:	80 2f       	mov	r24, r16
    1b04:	b6 dc       	rcall	.-1684   	; 0x1472 <udc_update_iface_desc>
    1b06:	88 23       	and	r24, r24
    1b08:	29 f0       	breq	.+10     	; 0x1b14 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1b0a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b0c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b0e:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1b10:	81 11       	cpse	r24, r1
    1b12:	57 c0       	rjmp	.+174    	; 0x1bc2 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1b14:	80 91 c5 23 	lds	r24, 0x23C5	; 0x8023c5 <udd_g_ctrlreq>
    1b18:	8f 71       	andi	r24, 0x1F	; 31
    1b1a:	82 30       	cpi	r24, 0x02	; 2
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <udc_process_setup+0x490>
    1b1e:	44 c0       	rjmp	.+136    	; 0x1ba8 <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b20:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_num_configuration>
    1b24:	88 23       	and	r24, r24
    1b26:	b1 f1       	breq	.+108    	; 0x1b94 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b28:	a0 91 f2 21 	lds	r26, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    1b2c:	b0 91 f3 21 	lds	r27, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    1b30:	ed 91       	ld	r30, X+
    1b32:	fc 91       	ld	r31, X
    1b34:	11 97       	sbiw	r26, 0x01	; 1
    1b36:	84 81       	ldd	r24, Z+4	; 0x04
    1b38:	88 23       	and	r24, r24
    1b3a:	71 f1       	breq	.+92     	; 0x1b98 <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b3c:	c0 e0       	ldi	r28, 0x00	; 0
    1b3e:	ec 2f       	mov	r30, r28
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	ee 0f       	add	r30, r30
    1b44:	ff 1f       	adc	r31, r31
    1b46:	12 96       	adiw	r26, 0x02	; 2
    1b48:	8d 91       	ld	r24, X+
    1b4a:	9c 91       	ld	r25, X
    1b4c:	13 97       	sbiw	r26, 0x03	; 3
    1b4e:	e8 0f       	add	r30, r24
    1b50:	f9 1f       	adc	r31, r25
    1b52:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1b54:	11 81       	ldd	r17, Z+1	; 0x01
    1b56:	d8 01       	movw	r26, r16
    1b58:	16 96       	adiw	r26, 0x06	; 6
    1b5a:	ed 91       	ld	r30, X+
    1b5c:	fc 91       	ld	r31, X
    1b5e:	17 97       	sbiw	r26, 0x07	; 7
    1b60:	19 95       	eicall
    1b62:	68 2f       	mov	r22, r24
    1b64:	8c 2f       	mov	r24, r28
    1b66:	85 dc       	rcall	.-1782   	; 0x1472 <udc_update_iface_desc>
    1b68:	88 23       	and	r24, r24
    1b6a:	59 f1       	breq	.+86     	; 0x1bc2 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1b6c:	d8 01       	movw	r26, r16
    1b6e:	14 96       	adiw	r26, 0x04	; 4
    1b70:	ed 91       	ld	r30, X+
    1b72:	fc 91       	ld	r31, X
    1b74:	15 97       	sbiw	r26, 0x05	; 5
    1b76:	19 95       	eicall
    1b78:	81 11       	cpse	r24, r1
    1b7a:	23 c0       	rjmp	.+70     	; 0x1bc2 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1b7c:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b7e:	a0 91 f2 21 	lds	r26, 0x21F2	; 0x8021f2 <udc_ptr_conf>
    1b82:	b0 91 f3 21 	lds	r27, 0x21F3	; 0x8021f3 <udc_ptr_conf+0x1>
    1b86:	ed 91       	ld	r30, X+
    1b88:	fc 91       	ld	r31, X
    1b8a:	11 97       	sbiw	r26, 0x01	; 1
    1b8c:	94 81       	ldd	r25, Z+4	; 0x04
    1b8e:	c9 17       	cp	r28, r25
    1b90:	b0 f2       	brcs	.-84     	; 0x1b3e <udc_process_setup+0x4ae>
    1b92:	17 c0       	rjmp	.+46     	; 0x1bc2 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	15 c0       	rjmp	.+42     	; 0x1bc2 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	13 c0       	rjmp	.+38     	; 0x1bc2 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	11 c0       	rjmp	.+34     	; 0x1bc2 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <udc_process_setup+0x532>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	0d c0       	rjmp	.+26     	; 0x1bc2 <udc_process_setup+0x532>
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	0b c0       	rjmp	.+22     	; 0x1bc2 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1bac:	98 2f       	mov	r25, r24
    1bae:	90 76       	andi	r25, 0x60	; 96
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <udc_process_setup+0x524>
    1bb2:	7b cf       	rjmp	.-266    	; 0x1aaa <udc_process_setup+0x41a>
    1bb4:	80 ce       	rjmp	.-768    	; 0x18b6 <udc_process_setup+0x226>
    1bb6:	98 2f       	mov	r25, r24
    1bb8:	90 76       	andi	r25, 0x60	; 96
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <udc_process_setup+0x52e>
    1bbc:	76 cf       	rjmp	.-276    	; 0x1aaa <udc_process_setup+0x41a>
    1bbe:	81 cd       	rjmp	.-1278   	; 0x16c2 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	08 95       	ret

00001bcc <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1bcc:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1bd0:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1bd2:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1bd4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1bd8:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1bda:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1bde:	08 95       	ret

00001be0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1be0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1be2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1be4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1be6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1be8:	60 83       	st	Z, r22
	ret                             // Return to caller
    1bea:	08 95       	ret

00001bec <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	1f 92       	push	r1
    1bf2:	1f 92       	push	r1
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	81 11       	cpse	r24, r1
    1bfa:	26 c0       	rjmp	.+76     	; 0x1c48 <udd_sleep_mode+0x5c>
    1bfc:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_b_idle>
    1c00:	99 23       	and	r25, r25
    1c02:	f9 f0       	breq	.+62     	; 0x1c42 <udd_sleep_mode+0x56>
    1c04:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <sleepmgr_locks+0x1>
    1c08:	91 11       	cpse	r25, r1
    1c0a:	01 c0       	rjmp	.+2      	; 0x1c0e <udd_sleep_mode+0x22>
    1c0c:	ff cf       	rjmp	.-2      	; 0x1c0c <udd_sleep_mode+0x20>
    1c0e:	9f b7       	in	r25, 0x3f	; 63
    1c10:	9a 83       	std	Y+2, r25	; 0x02
    1c12:	f8 94       	cli
    1c14:	2a 81       	ldd	r18, Y+2	; 0x02
    1c16:	ef eb       	ldi	r30, 0xBF	; 191
    1c18:	f3 e2       	ldi	r31, 0x23	; 35
    1c1a:	91 81       	ldd	r25, Z+1	; 0x01
    1c1c:	91 50       	subi	r25, 0x01	; 1
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	2f bf       	out	0x3f, r18	; 63
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <udd_sleep_mode+0x56>
    1c24:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <sleepmgr_locks+0x1>
    1c28:	9f 3f       	cpi	r25, 0xFF	; 255
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <udd_sleep_mode+0x42>
    1c2c:	ff cf       	rjmp	.-2      	; 0x1c2c <udd_sleep_mode+0x40>
    1c2e:	9f b7       	in	r25, 0x3f	; 63
    1c30:	99 83       	std	Y+1, r25	; 0x01
    1c32:	f8 94       	cli
    1c34:	29 81       	ldd	r18, Y+1	; 0x01
    1c36:	ef eb       	ldi	r30, 0xBF	; 191
    1c38:	f3 e2       	ldi	r31, 0x23	; 35
    1c3a:	91 81       	ldd	r25, Z+1	; 0x01
    1c3c:	9f 5f       	subi	r25, 0xFF	; 255
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	2f bf       	out	0x3f, r18	; 63
    1c42:	80 93 b8 23 	sts	0x23B8, r24	; 0x8023b8 <udd_b_idle>
    1c46:	05 c0       	rjmp	.+10     	; 0x1c52 <udd_sleep_mode+0x66>
    1c48:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_b_idle>
    1c4c:	99 23       	and	r25, r25
    1c4e:	51 f3       	breq	.-44     	; 0x1c24 <udd_sleep_mode+0x38>
    1c50:	f8 cf       	rjmp	.-16     	; 0x1c42 <udd_sleep_mode+0x56>
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	08 95       	ret

00001c5c <udd_ctrl_init>:
    1c5c:	0f 93       	push	r16
    1c5e:	e8 ec       	ldi	r30, 0xC8	; 200
    1c60:	f4 e0       	ldi	r31, 0x04	; 4
    1c62:	80 81       	ld	r24, Z
    1c64:	8f 7d       	andi	r24, 0xDF	; 223
    1c66:	80 83       	st	Z, r24
    1c68:	80 81       	ld	r24, Z
    1c6a:	8f 7d       	andi	r24, 0xDF	; 223
    1c6c:	80 83       	st	Z, r24
    1c6e:	ec e6       	ldi	r30, 0x6C	; 108
    1c70:	f3 e2       	ldi	r31, 0x23	; 35
    1c72:	02 e0       	ldi	r16, 0x02	; 2
    1c74:	05 93       	las	Z, r16
    1c76:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_sram+0x1e>
    1c7a:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udd_sram+0x1f>
    1c7e:	00 e2       	ldi	r16, 0x20	; 32
    1c80:	06 93       	lac	Z, r16
    1c82:	00 e4       	ldi	r16, 0x40	; 64
    1c84:	06 93       	lac	Z, r16
    1c86:	e4 e6       	ldi	r30, 0x64	; 100
    1c88:	f3 e2       	ldi	r31, 0x23	; 35
    1c8a:	00 e4       	ldi	r16, 0x40	; 64
    1c8c:	06 93       	lac	Z, r16
    1c8e:	e5 ec       	ldi	r30, 0xC5	; 197
    1c90:	f3 e2       	ldi	r31, 0x23	; 35
    1c92:	14 86       	std	Z+12, r1	; 0x0c
    1c94:	15 86       	std	Z+13, r1	; 0x0d
    1c96:	16 86       	std	Z+14, r1	; 0x0e
    1c98:	17 86       	std	Z+15, r1	; 0x0f
    1c9a:	12 86       	std	Z+10, r1	; 0x0a
    1c9c:	13 86       	std	Z+11, r1	; 0x0b
    1c9e:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <udd_ep_control_state>
    1ca2:	0f 91       	pop	r16
    1ca4:	08 95       	ret

00001ca6 <udd_ctrl_stall_data>:
    1ca6:	0f 93       	push	r16
    1ca8:	85 e0       	ldi	r24, 0x05	; 5
    1caa:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <udd_ep_control_state>
    1cae:	ed e6       	ldi	r30, 0x6D	; 109
    1cb0:	f3 e2       	ldi	r31, 0x23	; 35
    1cb2:	04 e0       	ldi	r16, 0x04	; 4
    1cb4:	05 93       	las	Z, r16
    1cb6:	e5 e6       	ldi	r30, 0x65	; 101
    1cb8:	f3 e2       	ldi	r31, 0x23	; 35
    1cba:	04 e0       	ldi	r16, 0x04	; 4
    1cbc:	05 93       	las	Z, r16
    1cbe:	0f 91       	pop	r16
    1cc0:	08 95       	ret

00001cc2 <udd_ctrl_send_zlp_in>:
    1cc2:	0f 93       	push	r16
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <udd_ep_control_state>
    1cca:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_sram+0x1e>
    1cce:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udd_sram+0x1f>
    1cd2:	ec e6       	ldi	r30, 0x6C	; 108
    1cd4:	f3 e2       	ldi	r31, 0x23	; 35
    1cd6:	02 e0       	ldi	r16, 0x02	; 2
    1cd8:	06 93       	lac	Z, r16
    1cda:	0f 91       	pop	r16
    1cdc:	08 95       	ret

00001cde <udd_ctrl_endofrequest>:
    1cde:	e0 91 d1 23 	lds	r30, 0x23D1	; 0x8023d1 <udd_g_ctrlreq+0xc>
    1ce2:	f0 91 d2 23 	lds	r31, 0x23D2	; 0x8023d2 <udd_g_ctrlreq+0xd>
    1ce6:	30 97       	sbiw	r30, 0x00	; 0
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <udd_ctrl_endofrequest+0xe>
    1cea:	19 95       	eicall
    1cec:	08 95       	ret

00001cee <udd_ctrl_in_sent>:
    1cee:	0f 93       	push	r16
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <udd_ep_control_state>
    1cf8:	83 30       	cpi	r24, 0x03	; 3
    1cfa:	19 f4       	brne	.+6      	; 0x1d02 <udd_ctrl_in_sent+0x14>
    1cfc:	f0 df       	rcall	.-32     	; 0x1cde <udd_ctrl_endofrequest>
    1cfe:	ae df       	rcall	.-164    	; 0x1c5c <udd_ctrl_init>
    1d00:	5e c0       	rjmp	.+188    	; 0x1dbe <udd_ctrl_in_sent+0xd0>
    1d02:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <udd_ctrl_payload_nb_trans>
    1d06:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <udd_ctrl_payload_nb_trans+0x1>
    1d0a:	c0 91 cf 23 	lds	r28, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0xa>
    1d0e:	d0 91 d0 23 	lds	r29, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0xb>
    1d12:	c8 1b       	sub	r28, r24
    1d14:	d9 0b       	sbc	r29, r25
    1d16:	71 f5       	brne	.+92     	; 0x1d74 <udd_ctrl_in_sent+0x86>
    1d18:	20 91 4d 23 	lds	r18, 0x234D	; 0x80234d <udd_ctrl_prev_payload_nb_trans>
    1d1c:	30 91 4e 23 	lds	r19, 0x234E	; 0x80234e <udd_ctrl_prev_payload_nb_trans+0x1>
    1d20:	82 0f       	add	r24, r18
    1d22:	93 1f       	adc	r25, r19
    1d24:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <udd_ctrl_prev_payload_nb_trans>
    1d28:	90 93 4e 23 	sts	0x234E, r25	; 0x80234e <udd_ctrl_prev_payload_nb_trans+0x1>
    1d2c:	20 91 cb 23 	lds	r18, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1d30:	30 91 cc 23 	lds	r19, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1d34:	82 17       	cp	r24, r18
    1d36:	93 07       	cpc	r25, r19
    1d38:	21 f0       	breq	.+8      	; 0x1d42 <udd_ctrl_in_sent+0x54>
    1d3a:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <b_shortpacket.5293>
    1d3e:	88 23       	and	r24, r24
    1d40:	41 f0       	breq	.+16     	; 0x1d52 <udd_ctrl_in_sent+0x64>
    1d42:	84 e0       	ldi	r24, 0x04	; 4
    1d44:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <udd_ep_control_state>
    1d48:	e4 e6       	ldi	r30, 0x64	; 100
    1d4a:	f3 e2       	ldi	r31, 0x23	; 35
    1d4c:	02 e0       	ldi	r16, 0x02	; 2
    1d4e:	06 93       	lac	Z, r16
    1d50:	36 c0       	rjmp	.+108    	; 0x1dbe <udd_ctrl_in_sent+0xd0>
    1d52:	e0 91 d3 23 	lds	r30, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0xe>
    1d56:	f0 91 d4 23 	lds	r31, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0xf>
    1d5a:	30 97       	sbiw	r30, 0x00	; 0
    1d5c:	99 f0       	breq	.+38     	; 0x1d84 <udd_ctrl_in_sent+0x96>
    1d5e:	19 95       	eicall
    1d60:	88 23       	and	r24, r24
    1d62:	81 f0       	breq	.+32     	; 0x1d84 <udd_ctrl_in_sent+0x96>
    1d64:	10 92 4b 23 	sts	0x234B, r1	; 0x80234b <udd_ctrl_payload_nb_trans>
    1d68:	10 92 4c 23 	sts	0x234C, r1	; 0x80234c <udd_ctrl_payload_nb_trans+0x1>
    1d6c:	c0 91 cf 23 	lds	r28, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0xa>
    1d70:	d0 91 d0 23 	lds	r29, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0xb>
    1d74:	c8 30       	cpi	r28, 0x08	; 8
    1d76:	d1 05       	cpc	r29, r1
    1d78:	28 f0       	brcs	.+10     	; 0x1d84 <udd_ctrl_in_sent+0x96>
    1d7a:	10 92 fa 21 	sts	0x21FA, r1	; 0x8021fa <b_shortpacket.5293>
    1d7e:	c8 e0       	ldi	r28, 0x08	; 8
    1d80:	d0 e0       	ldi	r29, 0x00	; 0
    1d82:	03 c0       	rjmp	.+6      	; 0x1d8a <udd_ctrl_in_sent+0x9c>
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <b_shortpacket.5293>
    1d8a:	e0 e5       	ldi	r30, 0x50	; 80
    1d8c:	f3 e2       	ldi	r31, 0x23	; 35
    1d8e:	c6 8f       	std	Z+30, r28	; 0x1e
    1d90:	d7 8f       	std	Z+31, r29	; 0x1f
    1d92:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <udd_ctrl_payload_nb_trans>
    1d96:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <udd_ctrl_payload_nb_trans+0x1>
    1d9a:	20 91 cd 23 	lds	r18, 0x23CD	; 0x8023cd <udd_g_ctrlreq+0x8>
    1d9e:	30 91 ce 23 	lds	r19, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x9>
    1da2:	28 0f       	add	r18, r24
    1da4:	39 1f       	adc	r19, r25
    1da6:	20 a3       	std	Z+32, r18	; 0x20
    1da8:	31 a3       	std	Z+33, r19	; 0x21
    1daa:	c8 0f       	add	r28, r24
    1dac:	d9 1f       	adc	r29, r25
    1dae:	c0 93 4b 23 	sts	0x234B, r28	; 0x80234b <udd_ctrl_payload_nb_trans>
    1db2:	d0 93 4c 23 	sts	0x234C, r29	; 0x80234c <udd_ctrl_payload_nb_trans+0x1>
    1db6:	ec e6       	ldi	r30, 0x6C	; 108
    1db8:	f3 e2       	ldi	r31, 0x23	; 35
    1dba:	02 e0       	ldi	r16, 0x02	; 2
    1dbc:	06 93       	lac	Z, r16
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	0f 91       	pop	r16
    1dc4:	08 95       	ret

00001dc6 <udd_ep_get_size>:
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	81 81       	ldd	r24, Z+1	; 0x01
    1dca:	e8 2f       	mov	r30, r24
    1dcc:	e7 70       	andi	r30, 0x07	; 7
    1dce:	8e 2f       	mov	r24, r30
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	31 97       	sbiw	r30, 0x01	; 1
    1dd6:	e7 30       	cpi	r30, 0x07	; 7
    1dd8:	f1 05       	cpc	r31, r1
    1dda:	d0 f4       	brcc	.+52     	; 0x1e10 <udd_ep_get_size+0x4a>
    1ddc:	88 27       	eor	r24, r24
    1dde:	e9 5f       	subi	r30, 0xF9	; 249
    1de0:	fe 4f       	sbci	r31, 0xFE	; 254
    1de2:	8f 4f       	sbci	r24, 0xFF	; 255
    1de4:	21 c7       	rjmp	.+3650   	; 0x2c28 <__tablejump2__>
    1de6:	80 e1       	ldi	r24, 0x10	; 16
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	08 95       	ret
    1dec:	80 e2       	ldi	r24, 0x20	; 32
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	08 95       	ret
    1df2:	80 e4       	ldi	r24, 0x40	; 64
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	08 95       	ret
    1df8:	80 e8       	ldi	r24, 0x80	; 128
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	08 95       	ret
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	91 e0       	ldi	r25, 0x01	; 1
    1e02:	08 95       	ret
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	92 e0       	ldi	r25, 0x02	; 2
    1e08:	08 95       	ret
    1e0a:	8f ef       	ldi	r24, 0xFF	; 255
    1e0c:	93 e0       	ldi	r25, 0x03	; 3
    1e0e:	08 95       	ret
    1e10:	88 e0       	ldi	r24, 0x08	; 8
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	08 95       	ret

00001e16 <udd_ep_get_job>:
    1e16:	28 2f       	mov	r18, r24
    1e18:	2f 70       	andi	r18, 0x0F	; 15
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	22 0f       	add	r18, r18
    1e1e:	33 1f       	adc	r19, r19
    1e20:	08 2e       	mov	r0, r24
    1e22:	00 0c       	add	r0, r0
    1e24:	99 0b       	sbc	r25, r25
    1e26:	88 27       	eor	r24, r24
    1e28:	99 0f       	add	r25, r25
    1e2a:	88 1f       	adc	r24, r24
    1e2c:	99 27       	eor	r25, r25
    1e2e:	82 0f       	add	r24, r18
    1e30:	93 1f       	adc	r25, r19
    1e32:	02 97       	sbiw	r24, 0x02	; 2
    1e34:	9c 01       	movw	r18, r24
    1e36:	22 0f       	add	r18, r18
    1e38:	33 1f       	adc	r19, r19
    1e3a:	22 0f       	add	r18, r18
    1e3c:	33 1f       	adc	r19, r19
    1e3e:	22 0f       	add	r18, r18
    1e40:	33 1f       	adc	r19, r19
    1e42:	82 0f       	add	r24, r18
    1e44:	93 1f       	adc	r25, r19
    1e46:	85 50       	subi	r24, 0x05	; 5
    1e48:	9d 4d       	sbci	r25, 0xDD	; 221
    1e4a:	08 95       	ret

00001e4c <udd_ctrl_interrupt_tc_setup>:
    1e4c:	0f 93       	push	r16
    1e4e:	cf 93       	push	r28
    1e50:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1e54:	80 ff       	sbrs	r24, 0
    1e56:	64 c0       	rjmp	.+200    	; 0x1f20 <udd_ctrl_interrupt_tc_setup+0xd4>
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1e5e:	e4 e6       	ldi	r30, 0x64	; 100
    1e60:	f3 e2       	ldi	r31, 0x23	; 35
    1e62:	00 e8       	ldi	r16, 0x80	; 128
    1e64:	06 93       	lac	Z, r16
    1e66:	ec e6       	ldi	r30, 0x6C	; 108
    1e68:	f3 e2       	ldi	r31, 0x23	; 35
    1e6a:	00 e8       	ldi	r16, 0x80	; 128
    1e6c:	06 93       	lac	Z, r16
    1e6e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1e72:	e4 e6       	ldi	r30, 0x64	; 100
    1e74:	f3 e2       	ldi	r31, 0x23	; 35
    1e76:	00 e1       	ldi	r16, 0x10	; 16
    1e78:	06 93       	lac	Z, r16
    1e7a:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <udd_ep_control_state>
    1e7e:	88 23       	and	r24, r24
    1e80:	29 f0       	breq	.+10     	; 0x1e8c <udd_ctrl_interrupt_tc_setup+0x40>
    1e82:	83 50       	subi	r24, 0x03	; 3
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	08 f4       	brcc	.+2      	; 0x1e8a <udd_ctrl_interrupt_tc_setup+0x3e>
    1e88:	2a df       	rcall	.-428    	; 0x1cde <udd_ctrl_endofrequest>
    1e8a:	e8 de       	rcall	.-560    	; 0x1c5c <udd_ctrl_init>
    1e8c:	80 91 66 23 	lds	r24, 0x2366	; 0x802366 <udd_sram+0x16>
    1e90:	90 91 67 23 	lds	r25, 0x2367	; 0x802367 <udd_sram+0x17>
    1e94:	08 97       	sbiw	r24, 0x08	; 8
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <udd_ctrl_interrupt_tc_setup+0x4e>
    1e98:	45 c0       	rjmp	.+138    	; 0x1f24 <udd_ctrl_interrupt_tc_setup+0xd8>
    1e9a:	88 e0       	ldi	r24, 0x08	; 8
    1e9c:	e3 e4       	ldi	r30, 0x43	; 67
    1e9e:	f3 e2       	ldi	r31, 0x23	; 35
    1ea0:	a5 ec       	ldi	r26, 0xC5	; 197
    1ea2:	b3 e2       	ldi	r27, 0x23	; 35
    1ea4:	01 90       	ld	r0, Z+
    1ea6:	0d 92       	st	X+, r0
    1ea8:	8a 95       	dec	r24
    1eaa:	e1 f7       	brne	.-8      	; 0x1ea4 <udd_ctrl_interrupt_tc_setup+0x58>
    1eac:	e8 ec       	ldi	r30, 0xC8	; 200
    1eae:	f4 e0       	ldi	r31, 0x04	; 4
    1eb0:	80 81       	ld	r24, Z
    1eb2:	80 62       	ori	r24, 0x20	; 32
    1eb4:	80 83       	st	Z, r24
    1eb6:	80 81       	ld	r24, Z
    1eb8:	80 62       	ori	r24, 0x20	; 32
    1eba:	80 83       	st	Z, r24
    1ebc:	e9 db       	rcall	.-2094   	; 0x1690 <udc_process_setup>
    1ebe:	c8 2f       	mov	r28, r24
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	03 c0       	rjmp	.+6      	; 0x1eca <udd_ctrl_interrupt_tc_setup+0x7e>
    1ec4:	f0 de       	rcall	.-544    	; 0x1ca6 <udd_ctrl_stall_data>
    1ec6:	c1 e0       	ldi	r28, 0x01	; 1
    1ec8:	2e c0       	rjmp	.+92     	; 0x1f26 <udd_ctrl_interrupt_tc_setup+0xda>
    1eca:	80 91 c5 23 	lds	r24, 0x23C5	; 0x8023c5 <udd_g_ctrlreq>
    1ece:	88 23       	and	r24, r24
    1ed0:	6c f4       	brge	.+26     	; 0x1eec <udd_ctrl_interrupt_tc_setup+0xa0>
    1ed2:	10 92 4d 23 	sts	0x234D, r1	; 0x80234d <udd_ctrl_prev_payload_nb_trans>
    1ed6:	10 92 4e 23 	sts	0x234E, r1	; 0x80234e <udd_ctrl_prev_payload_nb_trans+0x1>
    1eda:	10 92 4b 23 	sts	0x234B, r1	; 0x80234b <udd_ctrl_payload_nb_trans>
    1ede:	10 92 4c 23 	sts	0x234C, r1	; 0x80234c <udd_ctrl_payload_nb_trans+0x1>
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <udd_ep_control_state>
    1ee8:	02 df       	rcall	.-508    	; 0x1cee <udd_ctrl_in_sent>
    1eea:	1d c0       	rjmp	.+58     	; 0x1f26 <udd_ctrl_interrupt_tc_setup+0xda>
    1eec:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1ef0:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1ef4:	89 2b       	or	r24, r25
    1ef6:	11 f4       	brne	.+4      	; 0x1efc <udd_ctrl_interrupt_tc_setup+0xb0>
    1ef8:	e4 de       	rcall	.-568    	; 0x1cc2 <udd_ctrl_send_zlp_in>
    1efa:	15 c0       	rjmp	.+42     	; 0x1f26 <udd_ctrl_interrupt_tc_setup+0xda>
    1efc:	10 92 4d 23 	sts	0x234D, r1	; 0x80234d <udd_ctrl_prev_payload_nb_trans>
    1f00:	10 92 4e 23 	sts	0x234E, r1	; 0x80234e <udd_ctrl_prev_payload_nb_trans+0x1>
    1f04:	10 92 4b 23 	sts	0x234B, r1	; 0x80234b <udd_ctrl_payload_nb_trans>
    1f08:	10 92 4c 23 	sts	0x234C, r1	; 0x80234c <udd_ctrl_payload_nb_trans+0x1>
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <udd_ep_control_state>
    1f12:	e4 e6       	ldi	r30, 0x64	; 100
    1f14:	f3 e2       	ldi	r31, 0x23	; 35
    1f16:	02 e0       	ldi	r16, 0x02	; 2
    1f18:	06 93       	lac	Z, r16
    1f1a:	00 e2       	ldi	r16, 0x20	; 32
    1f1c:	06 93       	lac	Z, r16
    1f1e:	03 c0       	rjmp	.+6      	; 0x1f26 <udd_ctrl_interrupt_tc_setup+0xda>
    1f20:	c0 e0       	ldi	r28, 0x00	; 0
    1f22:	01 c0       	rjmp	.+2      	; 0x1f26 <udd_ctrl_interrupt_tc_setup+0xda>
    1f24:	c1 e0       	ldi	r28, 0x01	; 1
    1f26:	8c 2f       	mov	r24, r28
    1f28:	cf 91       	pop	r28
    1f2a:	0f 91       	pop	r16
    1f2c:	08 95       	ret

00001f2e <udd_ep_trans_complet>:
    1f2e:	8f 92       	push	r8
    1f30:	9f 92       	push	r9
    1f32:	af 92       	push	r10
    1f34:	bf 92       	push	r11
    1f36:	df 92       	push	r13
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
    1f3c:	0f 93       	push	r16
    1f3e:	1f 93       	push	r17
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	d8 2e       	mov	r13, r24
    1f46:	67 df       	rcall	.-306    	; 0x1e16 <udd_ep_get_job>
    1f48:	8c 01       	movw	r16, r24
    1f4a:	cd 2d       	mov	r28, r13
    1f4c:	cf 70       	andi	r28, 0x0F	; 15
    1f4e:	d0 e0       	ldi	r29, 0x00	; 0
    1f50:	ce 01       	movw	r24, r28
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	cd 2d       	mov	r28, r13
    1f58:	0d 2c       	mov	r0, r13
    1f5a:	00 0c       	add	r0, r0
    1f5c:	dd 0b       	sbc	r29, r29
    1f5e:	cc 27       	eor	r28, r28
    1f60:	dd 0f       	add	r29, r29
    1f62:	cc 1f       	adc	r28, r28
    1f64:	dd 27       	eor	r29, r29
    1f66:	c8 0f       	add	r28, r24
    1f68:	d9 1f       	adc	r29, r25
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	9c 01       	movw	r18, r24
    1f7a:	2c 59       	subi	r18, 0x9C	; 156
    1f7c:	3c 4d       	sbci	r19, 0xDC	; 220
    1f7e:	79 01       	movw	r14, r18
    1f80:	c9 01       	movw	r24, r18
    1f82:	21 df       	rcall	.-446    	; 0x1dc6 <udd_ep_get_size>
    1f84:	4c 01       	movw	r8, r24
    1f86:	dd 20       	and	r13, r13
    1f88:	0c f0       	brlt	.+2      	; 0x1f8c <udd_ep_trans_complet+0x5e>
    1f8a:	79 c0       	rjmp	.+242    	; 0x207e <udd_ep_trans_complet+0x150>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	ee 0f       	add	r30, r30
    1f94:	ff 1f       	adc	r31, r31
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	e0 5b       	subi	r30, 0xB0	; 176
    1f9c:	fc 4d       	sbci	r31, 0xDC	; 220
    1f9e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1fa0:	33 8d       	ldd	r19, Z+27	; 0x1b
    1fa2:	d8 01       	movw	r26, r16
    1fa4:	15 96       	adiw	r26, 0x05	; 5
    1fa6:	8d 91       	ld	r24, X+
    1fa8:	9c 91       	ld	r25, X
    1faa:	16 97       	sbiw	r26, 0x06	; 6
    1fac:	82 0f       	add	r24, r18
    1fae:	93 1f       	adc	r25, r19
    1fb0:	15 96       	adiw	r26, 0x05	; 5
    1fb2:	8d 93       	st	X+, r24
    1fb4:	9c 93       	st	X, r25
    1fb6:	16 97       	sbiw	r26, 0x06	; 6
    1fb8:	13 96       	adiw	r26, 0x03	; 3
    1fba:	2d 91       	ld	r18, X+
    1fbc:	3c 91       	ld	r19, X
    1fbe:	14 97       	sbiw	r26, 0x04	; 4
    1fc0:	82 17       	cp	r24, r18
    1fc2:	93 07       	cpc	r25, r19
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <udd_ep_trans_complet+0x9a>
    1fc6:	45 c0       	rjmp	.+138    	; 0x2052 <udd_ep_trans_complet+0x124>
    1fc8:	28 1b       	sub	r18, r24
    1fca:	39 0b       	sbc	r19, r25
    1fcc:	21 15       	cp	r18, r1
    1fce:	b4 e0       	ldi	r27, 0x04	; 4
    1fd0:	3b 07       	cpc	r19, r27
    1fd2:	38 f0       	brcs	.+14     	; 0x1fe2 <udd_ep_trans_complet+0xb4>
    1fd4:	2f ef       	ldi	r18, 0xFF	; 255
    1fd6:	33 e0       	ldi	r19, 0x03	; 3
    1fd8:	c9 01       	movw	r24, r18
    1fda:	b4 01       	movw	r22, r8
    1fdc:	11 d6       	rcall	.+3106   	; 0x2c00 <__udivmodhi4>
    1fde:	28 1b       	sub	r18, r24
    1fe0:	39 0b       	sbc	r19, r25
    1fe2:	f8 01       	movw	r30, r16
    1fe4:	80 81       	ld	r24, Z
    1fe6:	81 ff       	sbrs	r24, 1
    1fe8:	09 c0       	rjmp	.+18     	; 0x1ffc <udd_ep_trans_complet+0xce>
    1fea:	c9 01       	movw	r24, r18
    1fec:	b4 01       	movw	r22, r8
    1fee:	08 d6       	rcall	.+3088   	; 0x2c00 <__udivmodhi4>
    1ff0:	41 e0       	ldi	r20, 0x01	; 1
    1ff2:	89 2b       	or	r24, r25
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <udd_ep_trans_complet+0xca>
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	84 2f       	mov	r24, r20
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <udd_ep_trans_complet+0xd0>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	d8 01       	movw	r26, r16
    2000:	9c 91       	ld	r25, X
    2002:	80 fb       	bst	r24, 0
    2004:	91 f9       	bld	r25, 1
    2006:	9c 93       	st	X, r25
    2008:	fe 01       	movw	r30, r28
    200a:	ee 0f       	add	r30, r30
    200c:	ff 1f       	adc	r31, r31
    200e:	ee 0f       	add	r30, r30
    2010:	ff 1f       	adc	r31, r31
    2012:	ee 0f       	add	r30, r30
    2014:	ff 1f       	adc	r31, r31
    2016:	e0 5b       	subi	r30, 0xB0	; 176
    2018:	fc 4d       	sbci	r31, 0xDC	; 220
    201a:	12 8e       	std	Z+26, r1	; 0x1a
    201c:	13 8e       	std	Z+27, r1	; 0x1b
    201e:	26 8b       	std	Z+22, r18	; 0x16
    2020:	37 8b       	std	Z+23, r19	; 0x17
    2022:	11 96       	adiw	r26, 0x01	; 1
    2024:	2d 91       	ld	r18, X+
    2026:	3c 91       	ld	r19, X
    2028:	12 97       	sbiw	r26, 0x02	; 2
    202a:	15 96       	adiw	r26, 0x05	; 5
    202c:	8d 91       	ld	r24, X+
    202e:	9c 91       	ld	r25, X
    2030:	16 97       	sbiw	r26, 0x06	; 6
    2032:	82 0f       	add	r24, r18
    2034:	93 1f       	adc	r25, r19
    2036:	cc 0f       	add	r28, r28
    2038:	dd 1f       	adc	r29, r29
    203a:	cc 0f       	add	r28, r28
    203c:	dd 1f       	adc	r29, r29
    203e:	cc 0f       	add	r28, r28
    2040:	dd 1f       	adc	r29, r29
    2042:	c8 59       	subi	r28, 0x98	; 152
    2044:	dc 4d       	sbci	r29, 0xDC	; 220
    2046:	88 83       	st	Y, r24
    2048:	99 83       	std	Y+1, r25	; 0x01
    204a:	f7 01       	movw	r30, r14
    204c:	02 e0       	ldi	r16, 0x02	; 2
    204e:	06 93       	lac	Z, r16
    2050:	e0 c0       	rjmp	.+448    	; 0x2212 <udd_ep_trans_complet+0x2e4>
    2052:	d8 01       	movw	r26, r16
    2054:	8c 91       	ld	r24, X
    2056:	81 ff       	sbrs	r24, 1
    2058:	c9 c0       	rjmp	.+402    	; 0x21ec <udd_ep_trans_complet+0x2be>
    205a:	8d 7f       	andi	r24, 0xFD	; 253
    205c:	8c 93       	st	X, r24
    205e:	cc 0f       	add	r28, r28
    2060:	dd 1f       	adc	r29, r29
    2062:	cc 0f       	add	r28, r28
    2064:	dd 1f       	adc	r29, r29
    2066:	cc 0f       	add	r28, r28
    2068:	dd 1f       	adc	r29, r29
    206a:	c0 5b       	subi	r28, 0xB0	; 176
    206c:	dc 4d       	sbci	r29, 0xDC	; 220
    206e:	1a 8e       	std	Y+26, r1	; 0x1a
    2070:	1b 8e       	std	Y+27, r1	; 0x1b
    2072:	1e 8a       	std	Y+22, r1	; 0x16
    2074:	1f 8a       	std	Y+23, r1	; 0x17
    2076:	f7 01       	movw	r30, r14
    2078:	02 e0       	ldi	r16, 0x02	; 2
    207a:	06 93       	lac	Z, r16
    207c:	ca c0       	rjmp	.+404    	; 0x2212 <udd_ep_trans_complet+0x2e4>
    207e:	fe 01       	movw	r30, r28
    2080:	ee 0f       	add	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	ee 0f       	add	r30, r30
    2086:	ff 1f       	adc	r31, r31
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	e0 5b       	subi	r30, 0xB0	; 176
    208e:	fc 4d       	sbci	r31, 0xDC	; 220
    2090:	a6 88       	ldd	r10, Z+22	; 0x16
    2092:	b7 88       	ldd	r11, Z+23	; 0x17
    2094:	d8 01       	movw	r26, r16
    2096:	8c 91       	ld	r24, X
    2098:	82 ff       	sbrs	r24, 2
    209a:	19 c0       	rjmp	.+50     	; 0x20ce <udd_ep_trans_complet+0x1a0>
    209c:	11 96       	adiw	r26, 0x01	; 1
    209e:	ed 91       	ld	r30, X+
    20a0:	fc 91       	ld	r31, X
    20a2:	12 97       	sbiw	r26, 0x02	; 2
    20a4:	15 96       	adiw	r26, 0x05	; 5
    20a6:	2d 91       	ld	r18, X+
    20a8:	3c 91       	ld	r19, X
    20aa:	16 97       	sbiw	r26, 0x06	; 6
    20ac:	13 96       	adiw	r26, 0x03	; 3
    20ae:	8d 91       	ld	r24, X+
    20b0:	9c 91       	ld	r25, X
    20b2:	14 97       	sbiw	r26, 0x04	; 4
    20b4:	b4 01       	movw	r22, r8
    20b6:	a4 d5       	rcall	.+2888   	; 0x2c00 <__udivmodhi4>
    20b8:	b0 e4       	ldi	r27, 0x40	; 64
    20ba:	db 9e       	mul	r13, r27
    20bc:	b0 01       	movw	r22, r0
    20be:	11 24       	eor	r1, r1
    20c0:	65 54       	subi	r22, 0x45	; 69
    20c2:	7e 4d       	sbci	r23, 0xDE	; 222
    20c4:	ac 01       	movw	r20, r24
    20c6:	cf 01       	movw	r24, r30
    20c8:	82 0f       	add	r24, r18
    20ca:	93 1f       	adc	r25, r19
    20cc:	b5 d5       	rcall	.+2922   	; 0x2c38 <memcpy>
    20ce:	f8 01       	movw	r30, r16
    20d0:	25 81       	ldd	r18, Z+5	; 0x05
    20d2:	36 81       	ldd	r19, Z+6	; 0x06
    20d4:	2a 0d       	add	r18, r10
    20d6:	3b 1d       	adc	r19, r11
    20d8:	25 83       	std	Z+5, r18	; 0x05
    20da:	36 83       	std	Z+6, r19	; 0x06
    20dc:	83 81       	ldd	r24, Z+3	; 0x03
    20de:	94 81       	ldd	r25, Z+4	; 0x04
    20e0:	82 17       	cp	r24, r18
    20e2:	93 07       	cpc	r25, r19
    20e4:	68 f4       	brcc	.+26     	; 0x2100 <udd_ep_trans_complet+0x1d2>
    20e6:	85 83       	std	Z+5, r24	; 0x05
    20e8:	96 83       	std	Z+6, r25	; 0x06
    20ea:	cc 0f       	add	r28, r28
    20ec:	dd 1f       	adc	r29, r29
    20ee:	cc 0f       	add	r28, r28
    20f0:	dd 1f       	adc	r29, r29
    20f2:	cc 0f       	add	r28, r28
    20f4:	dd 1f       	adc	r29, r29
    20f6:	c0 5b       	subi	r28, 0xB0	; 176
    20f8:	dc 4d       	sbci	r29, 0xDC	; 220
    20fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20fe:	76 c0       	rjmp	.+236    	; 0x21ec <udd_ep_trans_complet+0x2be>
    2100:	fe 01       	movw	r30, r28
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	e0 5b       	subi	r30, 0xB0	; 176
    2110:	fc 4d       	sbci	r31, 0xDC	; 220
    2112:	42 8d       	ldd	r20, Z+26	; 0x1a
    2114:	53 8d       	ldd	r21, Z+27	; 0x1b
    2116:	a4 16       	cp	r10, r20
    2118:	b5 06       	cpc	r11, r21
    211a:	09 f0       	breq	.+2      	; 0x211e <udd_ep_trans_complet+0x1f0>
    211c:	67 c0       	rjmp	.+206    	; 0x21ec <udd_ep_trans_complet+0x2be>
    211e:	28 17       	cp	r18, r24
    2120:	39 07       	cpc	r19, r25
    2122:	09 f4       	brne	.+2      	; 0x2126 <udd_ep_trans_complet+0x1f8>
    2124:	63 c0       	rjmp	.+198    	; 0x21ec <udd_ep_trans_complet+0x2be>
    2126:	ac 01       	movw	r20, r24
    2128:	42 1b       	sub	r20, r18
    212a:	53 0b       	sbc	r21, r19
    212c:	9a 01       	movw	r18, r20
    212e:	21 15       	cp	r18, r1
    2130:	54 e0       	ldi	r21, 0x04	; 4
    2132:	35 07       	cpc	r19, r21
    2134:	40 f0       	brcs	.+16     	; 0x2146 <udd_ep_trans_complet+0x218>
    2136:	2f ef       	ldi	r18, 0xFF	; 255
    2138:	33 e0       	ldi	r19, 0x03	; 3
    213a:	c9 01       	movw	r24, r18
    213c:	b4 01       	movw	r22, r8
    213e:	60 d5       	rcall	.+2752   	; 0x2c00 <__udivmodhi4>
    2140:	28 1b       	sub	r18, r24
    2142:	39 0b       	sbc	r19, r25
    2144:	05 c0       	rjmp	.+10     	; 0x2150 <udd_ep_trans_complet+0x222>
    2146:	c9 01       	movw	r24, r18
    2148:	b4 01       	movw	r22, r8
    214a:	5a d5       	rcall	.+2740   	; 0x2c00 <__udivmodhi4>
    214c:	28 1b       	sub	r18, r24
    214e:	39 0b       	sbc	r19, r25
    2150:	fe 01       	movw	r30, r28
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	ee 0f       	add	r30, r30
    2158:	ff 1f       	adc	r31, r31
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	e0 5b       	subi	r30, 0xB0	; 176
    2160:	fc 4d       	sbci	r31, 0xDC	; 220
    2162:	16 8a       	std	Z+22, r1	; 0x16
    2164:	17 8a       	std	Z+23, r1	; 0x17
    2166:	28 15       	cp	r18, r8
    2168:	39 05       	cpc	r19, r9
    216a:	00 f5       	brcc	.+64     	; 0x21ac <udd_ep_trans_complet+0x27e>
    216c:	d8 01       	movw	r26, r16
    216e:	8c 91       	ld	r24, X
    2170:	84 60       	ori	r24, 0x04	; 4
    2172:	8c 93       	st	X, r24
    2174:	b0 e4       	ldi	r27, 0x40	; 64
    2176:	db 9e       	mul	r13, r27
    2178:	c0 01       	movw	r24, r0
    217a:	11 24       	eor	r1, r1
    217c:	85 54       	subi	r24, 0x45	; 69
    217e:	9e 4d       	sbci	r25, 0xDE	; 222
    2180:	fe 01       	movw	r30, r28
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	ee 0f       	add	r30, r30
    218c:	ff 1f       	adc	r31, r31
    218e:	e8 59       	subi	r30, 0x98	; 152
    2190:	fc 4d       	sbci	r31, 0xDC	; 220
    2192:	80 83       	st	Z, r24
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	cc 0f       	add	r28, r28
    2198:	dd 1f       	adc	r29, r29
    219a:	cc 0f       	add	r28, r28
    219c:	dd 1f       	adc	r29, r29
    219e:	cc 0f       	add	r28, r28
    21a0:	dd 1f       	adc	r29, r29
    21a2:	c0 5b       	subi	r28, 0xB0	; 176
    21a4:	dc 4d       	sbci	r29, 0xDC	; 220
    21a6:	8a 8e       	std	Y+26, r8	; 0x1a
    21a8:	9b 8e       	std	Y+27, r9	; 0x1b
    21aa:	1c c0       	rjmp	.+56     	; 0x21e4 <udd_ep_trans_complet+0x2b6>
    21ac:	f8 01       	movw	r30, r16
    21ae:	41 81       	ldd	r20, Z+1	; 0x01
    21b0:	52 81       	ldd	r21, Z+2	; 0x02
    21b2:	85 81       	ldd	r24, Z+5	; 0x05
    21b4:	96 81       	ldd	r25, Z+6	; 0x06
    21b6:	84 0f       	add	r24, r20
    21b8:	95 1f       	adc	r25, r21
    21ba:	fe 01       	movw	r30, r28
    21bc:	ee 0f       	add	r30, r30
    21be:	ff 1f       	adc	r31, r31
    21c0:	ee 0f       	add	r30, r30
    21c2:	ff 1f       	adc	r31, r31
    21c4:	ee 0f       	add	r30, r30
    21c6:	ff 1f       	adc	r31, r31
    21c8:	e8 59       	subi	r30, 0x98	; 152
    21ca:	fc 4d       	sbci	r31, 0xDC	; 220
    21cc:	80 83       	st	Z, r24
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	cc 0f       	add	r28, r28
    21d2:	dd 1f       	adc	r29, r29
    21d4:	cc 0f       	add	r28, r28
    21d6:	dd 1f       	adc	r29, r29
    21d8:	cc 0f       	add	r28, r28
    21da:	dd 1f       	adc	r29, r29
    21dc:	c0 5b       	subi	r28, 0xB0	; 176
    21de:	dc 4d       	sbci	r29, 0xDC	; 220
    21e0:	2a 8f       	std	Y+26, r18	; 0x1a
    21e2:	3b 8f       	std	Y+27, r19	; 0x1b
    21e4:	f7 01       	movw	r30, r14
    21e6:	02 e0       	ldi	r16, 0x02	; 2
    21e8:	06 93       	lac	Z, r16
    21ea:	13 c0       	rjmp	.+38     	; 0x2212 <udd_ep_trans_complet+0x2e4>
    21ec:	d8 01       	movw	r26, r16
    21ee:	8c 91       	ld	r24, X
    21f0:	80 ff       	sbrs	r24, 0
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <udd_ep_trans_complet+0x2e4>
    21f4:	8e 7f       	andi	r24, 0xFE	; 254
    21f6:	8c 93       	st	X, r24
    21f8:	17 96       	adiw	r26, 0x07	; 7
    21fa:	ed 91       	ld	r30, X+
    21fc:	fc 91       	ld	r31, X
    21fe:	18 97       	sbiw	r26, 0x08	; 8
    2200:	30 97       	sbiw	r30, 0x00	; 0
    2202:	39 f0       	breq	.+14     	; 0x2212 <udd_ep_trans_complet+0x2e4>
    2204:	15 96       	adiw	r26, 0x05	; 5
    2206:	6d 91       	ld	r22, X+
    2208:	7c 91       	ld	r23, X
    220a:	16 97       	sbiw	r26, 0x06	; 6
    220c:	4d 2d       	mov	r20, r13
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	19 95       	eicall
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	df 90       	pop	r13
    2220:	bf 90       	pop	r11
    2222:	af 90       	pop	r10
    2224:	9f 90       	pop	r9
    2226:	8f 90       	pop	r8
    2228:	08 95       	ret

0000222a <udd_attach>:
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	1f 92       	push	r1
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	8f b7       	in	r24, 0x3f	; 63
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	f8 94       	cli
    223c:	19 81       	ldd	r17, Y+1	; 0x01
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	d5 dc       	rcall	.-1622   	; 0x1bec <udd_sleep_mode>
    2242:	ea ec       	ldi	r30, 0xCA	; 202
    2244:	f4 e0       	ldi	r31, 0x04	; 4
    2246:	80 e4       	ldi	r24, 0x40	; 64
    2248:	80 83       	st	Z, r24
    224a:	80 e2       	ldi	r24, 0x20	; 32
    224c:	80 83       	st	Z, r24
    224e:	e1 ec       	ldi	r30, 0xC1	; 193
    2250:	f4 e0       	ldi	r31, 0x04	; 4
    2252:	80 81       	ld	r24, Z
    2254:	81 60       	ori	r24, 0x01	; 1
    2256:	80 83       	st	Z, r24
    2258:	a9 ec       	ldi	r26, 0xC9	; 201
    225a:	b4 e0       	ldi	r27, 0x04	; 4
    225c:	8c 91       	ld	r24, X
    225e:	82 60       	ori	r24, 0x02	; 2
    2260:	8c 93       	st	X, r24
    2262:	e8 ec       	ldi	r30, 0xC8	; 200
    2264:	f4 e0       	ldi	r31, 0x04	; 4
    2266:	80 81       	ld	r24, Z
    2268:	80 64       	ori	r24, 0x40	; 64
    226a:	80 83       	st	Z, r24
    226c:	8c 91       	ld	r24, X
    226e:	81 60       	ori	r24, 0x01	; 1
    2270:	8c 93       	st	X, r24
    2272:	80 81       	ld	r24, Z
    2274:	80 68       	ori	r24, 0x80	; 128
    2276:	80 83       	st	Z, r24
    2278:	1f bf       	out	0x3f, r17	; 63
    227a:	0f 90       	pop	r0
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	1f 91       	pop	r17
    2282:	08 95       	ret

00002284 <udd_enable>:
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	1f 92       	push	r1
    228e:	1f 92       	push	r1
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	00 e6       	ldi	r16, 0x60	; 96
    2296:	10 e0       	ldi	r17, 0x00	; 0
    2298:	f8 01       	movw	r30, r16
    229a:	10 82       	st	Z, r1
    229c:	80 e3       	ldi	r24, 0x30	; 48
    229e:	0e 94 e7 07 	call	0xfce	; 0xfce <sysclk_enable_usb>
    22a2:	e0 ec       	ldi	r30, 0xC0	; 192
    22a4:	f4 e0       	ldi	r31, 0x04	; 4
    22a6:	80 81       	ld	r24, Z
    22a8:	80 64       	ori	r24, 0x40	; 64
    22aa:	80 83       	st	Z, r24
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	f8 01       	movw	r30, r16
    22b0:	80 83       	st	Z, r24
    22b2:	8f b7       	in	r24, 0x3f	; 63
    22b4:	8a 83       	std	Y+2, r24	; 0x02
    22b6:	f8 94       	cli
    22b8:	1a 81       	ldd	r17, Y+2	; 0x02
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	fc 01       	movw	r30, r24
    22c0:	ee 0f       	add	r30, r30
    22c2:	ff 1f       	adc	r31, r31
    22c4:	ee 0f       	add	r30, r30
    22c6:	ff 1f       	adc	r31, r31
    22c8:	ee 0f       	add	r30, r30
    22ca:	ff 1f       	adc	r31, r31
    22cc:	e0 5b       	subi	r30, 0xB0	; 176
    22ce:	fc 4d       	sbci	r31, 0xDC	; 220
    22d0:	15 8a       	std	Z+21, r1	; 0x15
    22d2:	01 96       	adiw	r24, 0x01	; 1
    22d4:	8a 30       	cpi	r24, 0x0A	; 10
    22d6:	91 05       	cpc	r25, r1
    22d8:	91 f7       	brne	.-28     	; 0x22be <udd_enable+0x3a>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	fc 01       	movw	r30, r24
    22e0:	ee 0f       	add	r30, r30
    22e2:	ff 1f       	adc	r31, r31
    22e4:	ee 0f       	add	r30, r30
    22e6:	ff 1f       	adc	r31, r31
    22e8:	ee 0f       	add	r30, r30
    22ea:	ff 1f       	adc	r31, r31
    22ec:	e8 0f       	add	r30, r24
    22ee:	f9 1f       	adc	r31, r25
    22f0:	e5 50       	subi	r30, 0x05	; 5
    22f2:	fd 4d       	sbci	r31, 0xDD	; 221
    22f4:	20 81       	ld	r18, Z
    22f6:	2e 7f       	andi	r18, 0xFE	; 254
    22f8:	20 83       	st	Z, r18
    22fa:	01 96       	adiw	r24, 0x01	; 1
    22fc:	88 30       	cpi	r24, 0x08	; 8
    22fe:	91 05       	cpc	r25, r1
    2300:	71 f7       	brne	.-36     	; 0x22de <udd_enable+0x5a>
    2302:	6a e1       	ldi	r22, 0x1A	; 26
    2304:	70 e0       	ldi	r23, 0x00	; 0
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	61 dc       	rcall	.-1854   	; 0x1bcc <nvm_read_byte>
    230a:	8f 3f       	cpi	r24, 0xFF	; 255
    230c:	19 f0       	breq	.+6      	; 0x2314 <udd_enable+0x90>
    230e:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    2312:	03 c0       	rjmp	.+6      	; 0x231a <udd_enable+0x96>
    2314:	8f e1       	ldi	r24, 0x1F	; 31
    2316:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    231a:	6b e1       	ldi	r22, 0x1B	; 27
    231c:	70 e0       	ldi	r23, 0x00	; 0
    231e:	82 e0       	ldi	r24, 0x02	; 2
    2320:	55 dc       	rcall	.-1878   	; 0x1bcc <nvm_read_byte>
    2322:	8f 3f       	cpi	r24, 0xFF	; 255
    2324:	19 f0       	breq	.+6      	; 0x232c <udd_enable+0xa8>
    2326:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    232a:	03 c0       	rjmp	.+6      	; 0x2332 <udd_enable+0xae>
    232c:	8f e1       	ldi	r24, 0x1F	; 31
    232e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    2332:	e0 ec       	ldi	r30, 0xC0	; 192
    2334:	f4 e0       	ldi	r31, 0x04	; 4
    2336:	80 81       	ld	r24, Z
    2338:	84 60       	ori	r24, 0x04	; 4
    233a:	80 83       	st	Z, r24
    233c:	80 81       	ld	r24, Z
    233e:	80 68       	ori	r24, 0x80	; 128
    2340:	80 83       	st	Z, r24
    2342:	80 81       	ld	r24, Z
    2344:	80 61       	ori	r24, 0x10	; 16
    2346:	80 83       	st	Z, r24
    2348:	84 e6       	ldi	r24, 0x64	; 100
    234a:	93 e2       	ldi	r25, 0x23	; 35
    234c:	86 83       	std	Z+6, r24	; 0x06
    234e:	97 83       	std	Z+7, r25	; 0x07
    2350:	80 81       	ld	r24, Z
    2352:	80 62       	ori	r24, 0x20	; 32
    2354:	80 83       	st	Z, r24
    2356:	8f ef       	ldi	r24, 0xFF	; 255
    2358:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    235c:	e8 ec       	ldi	r30, 0xC8	; 200
    235e:	f4 e0       	ldi	r31, 0x04	; 4
    2360:	80 81       	ld	r24, Z
    2362:	81 60       	ori	r24, 0x01	; 1
    2364:	80 83       	st	Z, r24
    2366:	10 92 b8 23 	sts	0x23B8, r1	; 0x8023b8 <udd_b_idle>
    236a:	80 91 c4 23 	lds	r24, 0x23C4	; 0x8023c4 <sleepmgr_locks+0x5>
    236e:	8f 3f       	cpi	r24, 0xFF	; 255
    2370:	09 f4       	brne	.+2      	; 0x2374 <udd_enable+0xf0>
    2372:	ff cf       	rjmp	.-2      	; 0x2372 <udd_enable+0xee>
    2374:	8f b7       	in	r24, 0x3f	; 63
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	f8 94       	cli
    237a:	99 81       	ldd	r25, Y+1	; 0x01
    237c:	ef eb       	ldi	r30, 0xBF	; 191
    237e:	f3 e2       	ldi	r31, 0x23	; 35
    2380:	85 81       	ldd	r24, Z+5	; 0x05
    2382:	8f 5f       	subi	r24, 0xFF	; 255
    2384:	85 83       	std	Z+5, r24	; 0x05
    2386:	9f bf       	out	0x3f, r25	; 63
    2388:	50 df       	rcall	.-352    	; 0x222a <udd_attach>
    238a:	1f bf       	out	0x3f, r17	; 63
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	08 95       	ret

0000239a <udd_set_address>:
    239a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    239e:	08 95       	ret

000023a0 <udd_getaddress>:
    23a0:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    23a4:	08 95       	ret

000023a6 <udd_set_setup_payload>:
    23a6:	e5 ec       	ldi	r30, 0xC5	; 197
    23a8:	f3 e2       	ldi	r31, 0x23	; 35
    23aa:	80 87       	std	Z+8, r24	; 0x08
    23ac:	91 87       	std	Z+9, r25	; 0x09
    23ae:	62 87       	std	Z+10, r22	; 0x0a
    23b0:	73 87       	std	Z+11, r23	; 0x0b
    23b2:	08 95       	ret

000023b4 <udd_ep_alloc>:
    23b4:	28 2f       	mov	r18, r24
    23b6:	2f 70       	andi	r18, 0x0F	; 15
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	22 0f       	add	r18, r18
    23bc:	33 1f       	adc	r19, r19
    23be:	08 2e       	mov	r0, r24
    23c0:	00 0c       	add	r0, r0
    23c2:	99 0b       	sbc	r25, r25
    23c4:	88 27       	eor	r24, r24
    23c6:	99 0f       	add	r25, r25
    23c8:	88 1f       	adc	r24, r24
    23ca:	99 27       	eor	r25, r25
    23cc:	82 0f       	add	r24, r18
    23ce:	93 1f       	adc	r25, r19
    23d0:	fc 01       	movw	r30, r24
    23d2:	ee 0f       	add	r30, r30
    23d4:	ff 1f       	adc	r31, r31
    23d6:	ee 0f       	add	r30, r30
    23d8:	ff 1f       	adc	r31, r31
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	e0 5b       	subi	r30, 0xB0	; 176
    23e0:	fc 4d       	sbci	r31, 0xDC	; 220
    23e2:	25 89       	ldd	r18, Z+21	; 0x15
    23e4:	20 7c       	andi	r18, 0xC0	; 192
    23e6:	09 f0       	breq	.+2      	; 0x23ea <udd_ep_alloc+0x36>
    23e8:	69 c0       	rjmp	.+210    	; 0x24bc <udd_ep_alloc+0x108>
    23ea:	63 70       	andi	r22, 0x03	; 3
    23ec:	61 30       	cpi	r22, 0x01	; 1
    23ee:	11 f0       	breq	.+4      	; 0x23f4 <udd_ep_alloc+0x40>
    23f0:	18 f4       	brcc	.+6      	; 0x23f8 <udd_ep_alloc+0x44>
    23f2:	04 c0       	rjmp	.+8      	; 0x23fc <udd_ep_alloc+0x48>
    23f4:	60 ec       	ldi	r22, 0xC0	; 192
    23f6:	03 c0       	rjmp	.+6      	; 0x23fe <udd_ep_alloc+0x4a>
    23f8:	60 e8       	ldi	r22, 0x80	; 128
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <udd_ep_alloc+0x4a>
    23fc:	60 e4       	ldi	r22, 0x40	; 64
    23fe:	40 38       	cpi	r20, 0x80	; 128
    2400:	51 05       	cpc	r21, r1
    2402:	e9 f0       	breq	.+58     	; 0x243e <udd_ep_alloc+0x8a>
    2404:	50 f4       	brcc	.+20     	; 0x241a <udd_ep_alloc+0x66>
    2406:	40 32       	cpi	r20, 0x20	; 32
    2408:	51 05       	cpc	r21, r1
    240a:	a9 f0       	breq	.+42     	; 0x2436 <udd_ep_alloc+0x82>
    240c:	40 34       	cpi	r20, 0x40	; 64
    240e:	51 05       	cpc	r21, r1
    2410:	a1 f0       	breq	.+40     	; 0x243a <udd_ep_alloc+0x86>
    2412:	40 31       	cpi	r20, 0x10	; 16
    2414:	51 05       	cpc	r21, r1
    2416:	d9 f4       	brne	.+54     	; 0x244e <udd_ep_alloc+0x9a>
    2418:	0c c0       	rjmp	.+24     	; 0x2432 <udd_ep_alloc+0x7e>
    241a:	41 15       	cp	r20, r1
    241c:	22 e0       	ldi	r18, 0x02	; 2
    241e:	52 07       	cpc	r21, r18
    2420:	91 f0       	breq	.+36     	; 0x2446 <udd_ep_alloc+0x92>
    2422:	4f 3f       	cpi	r20, 0xFF	; 255
    2424:	23 e0       	ldi	r18, 0x03	; 3
    2426:	52 07       	cpc	r21, r18
    2428:	81 f0       	breq	.+32     	; 0x244a <udd_ep_alloc+0x96>
    242a:	41 15       	cp	r20, r1
    242c:	51 40       	sbci	r21, 0x01	; 1
    242e:	79 f4       	brne	.+30     	; 0x244e <udd_ep_alloc+0x9a>
    2430:	08 c0       	rjmp	.+16     	; 0x2442 <udd_ep_alloc+0x8e>
    2432:	21 e0       	ldi	r18, 0x01	; 1
    2434:	0d c0       	rjmp	.+26     	; 0x2450 <udd_ep_alloc+0x9c>
    2436:	22 e0       	ldi	r18, 0x02	; 2
    2438:	0b c0       	rjmp	.+22     	; 0x2450 <udd_ep_alloc+0x9c>
    243a:	23 e0       	ldi	r18, 0x03	; 3
    243c:	09 c0       	rjmp	.+18     	; 0x2450 <udd_ep_alloc+0x9c>
    243e:	24 e0       	ldi	r18, 0x04	; 4
    2440:	07 c0       	rjmp	.+14     	; 0x2450 <udd_ep_alloc+0x9c>
    2442:	25 e0       	ldi	r18, 0x05	; 5
    2444:	05 c0       	rjmp	.+10     	; 0x2450 <udd_ep_alloc+0x9c>
    2446:	26 e0       	ldi	r18, 0x06	; 6
    2448:	03 c0       	rjmp	.+6      	; 0x2450 <udd_ep_alloc+0x9c>
    244a:	27 e0       	ldi	r18, 0x07	; 7
    244c:	01 c0       	rjmp	.+2      	; 0x2450 <udd_ep_alloc+0x9c>
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	fc 01       	movw	r30, r24
    2452:	ee 0f       	add	r30, r30
    2454:	ff 1f       	adc	r31, r31
    2456:	ee 0f       	add	r30, r30
    2458:	ff 1f       	adc	r31, r31
    245a:	ee 0f       	add	r30, r30
    245c:	ff 1f       	adc	r31, r31
    245e:	e0 5b       	subi	r30, 0xB0	; 176
    2460:	fc 4d       	sbci	r31, 0xDC	; 220
    2462:	15 8a       	std	Z+21, r1	; 0x15
    2464:	36 e0       	ldi	r19, 0x06	; 6
    2466:	34 8b       	std	Z+20, r19	; 0x14
    2468:	26 2b       	or	r18, r22
    246a:	25 8b       	std	Z+21, r18	; 0x15
    246c:	fc 01       	movw	r30, r24
    246e:	ee 0f       	add	r30, r30
    2470:	ff 1f       	adc	r31, r31
    2472:	ee 0f       	add	r30, r30
    2474:	ff 1f       	adc	r31, r31
    2476:	ee 0f       	add	r30, r30
    2478:	ff 1f       	adc	r31, r31
    247a:	e0 5b       	subi	r30, 0xB0	; 176
    247c:	fc 4d       	sbci	r31, 0xDC	; 220
    247e:	25 89       	ldd	r18, Z+21	; 0x15
    2480:	20 7c       	andi	r18, 0xC0	; 192
    2482:	20 3c       	cpi	r18, 0xC0	; 192
    2484:	69 f4       	brne	.+26     	; 0x24a0 <udd_ep_alloc+0xec>
    2486:	fc 01       	movw	r30, r24
    2488:	ee 0f       	add	r30, r30
    248a:	ff 1f       	adc	r31, r31
    248c:	ee 0f       	add	r30, r30
    248e:	ff 1f       	adc	r31, r31
    2490:	ee 0f       	add	r30, r30
    2492:	ff 1f       	adc	r31, r31
    2494:	e0 5b       	subi	r30, 0xB0	; 176
    2496:	fc 4d       	sbci	r31, 0xDC	; 220
    2498:	25 89       	ldd	r18, Z+21	; 0x15
    249a:	27 70       	andi	r18, 0x07	; 7
    249c:	27 30       	cpi	r18, 0x07	; 7
    249e:	81 f0       	breq	.+32     	; 0x24c0 <udd_ep_alloc+0x10c>
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	fc 01       	movw	r30, r24
    24ae:	e0 5b       	subi	r30, 0xB0	; 176
    24b0:	fc 4d       	sbci	r31, 0xDC	; 220
    24b2:	85 89       	ldd	r24, Z+21	; 0x15
    24b4:	80 62       	ori	r24, 0x20	; 32
    24b6:	85 8b       	std	Z+21, r24	; 0x15
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	08 95       	ret
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	08 95       	ret
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	08 95       	ret

000024c4 <udd_ep_is_halted>:
    24c4:	e8 2f       	mov	r30, r24
    24c6:	ef 70       	andi	r30, 0x0F	; 15
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	ee 0f       	add	r30, r30
    24cc:	ff 1f       	adc	r31, r31
    24ce:	08 2e       	mov	r0, r24
    24d0:	00 0c       	add	r0, r0
    24d2:	99 0b       	sbc	r25, r25
    24d4:	88 27       	eor	r24, r24
    24d6:	99 0f       	add	r25, r25
    24d8:	88 1f       	adc	r24, r24
    24da:	99 27       	eor	r25, r25
    24dc:	e8 0f       	add	r30, r24
    24de:	f9 1f       	adc	r31, r25
    24e0:	ee 0f       	add	r30, r30
    24e2:	ff 1f       	adc	r31, r31
    24e4:	ee 0f       	add	r30, r30
    24e6:	ff 1f       	adc	r31, r31
    24e8:	ee 0f       	add	r30, r30
    24ea:	ff 1f       	adc	r31, r31
    24ec:	e0 5b       	subi	r30, 0xB0	; 176
    24ee:	fc 4d       	sbci	r31, 0xDC	; 220
    24f0:	85 89       	ldd	r24, Z+21	; 0x15
    24f2:	82 fb       	bst	r24, 2
    24f4:	88 27       	eor	r24, r24
    24f6:	80 f9       	bld	r24, 0
    24f8:	08 95       	ret

000024fa <udd_ep_clear_halt>:
    24fa:	0f 93       	push	r16
    24fc:	28 2f       	mov	r18, r24
    24fe:	2f 70       	andi	r18, 0x0F	; 15
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	a9 01       	movw	r20, r18
    2504:	44 0f       	add	r20, r20
    2506:	55 1f       	adc	r21, r21
    2508:	28 2f       	mov	r18, r24
    250a:	08 2e       	mov	r0, r24
    250c:	00 0c       	add	r0, r0
    250e:	33 0b       	sbc	r19, r19
    2510:	22 27       	eor	r18, r18
    2512:	33 0f       	add	r19, r19
    2514:	22 1f       	adc	r18, r18
    2516:	33 27       	eor	r19, r19
    2518:	24 0f       	add	r18, r20
    251a:	35 1f       	adc	r19, r21
    251c:	a9 01       	movw	r20, r18
    251e:	44 0f       	add	r20, r20
    2520:	55 1f       	adc	r21, r21
    2522:	44 0f       	add	r20, r20
    2524:	55 1f       	adc	r21, r21
    2526:	44 0f       	add	r20, r20
    2528:	55 1f       	adc	r21, r21
    252a:	fa 01       	movw	r30, r20
    252c:	ec 59       	subi	r30, 0x9C	; 156
    252e:	fc 4d       	sbci	r31, 0xDC	; 220
    2530:	01 e0       	ldi	r16, 0x01	; 1
    2532:	06 93       	lac	Z, r16
    2534:	fa 01       	movw	r30, r20
    2536:	e0 5b       	subi	r30, 0xB0	; 176
    2538:	fc 4d       	sbci	r31, 0xDC	; 220
    253a:	95 89       	ldd	r25, Z+21	; 0x15
    253c:	92 ff       	sbrs	r25, 2
    253e:	11 c0       	rjmp	.+34     	; 0x2562 <udd_ep_clear_halt+0x68>
    2540:	fa 01       	movw	r30, r20
    2542:	e0 5b       	subi	r30, 0xB0	; 176
    2544:	fc 4d       	sbci	r31, 0xDC	; 220
    2546:	95 89       	ldd	r25, Z+21	; 0x15
    2548:	9b 7f       	andi	r25, 0xFB	; 251
    254a:	95 8b       	std	Z+21, r25	; 0x15
    254c:	64 dc       	rcall	.-1848   	; 0x1e16 <udd_ep_get_job>
    254e:	fc 01       	movw	r30, r24
    2550:	80 81       	ld	r24, Z
    2552:	80 ff       	sbrs	r24, 0
    2554:	06 c0       	rjmp	.+12     	; 0x2562 <udd_ep_clear_halt+0x68>
    2556:	8e 7f       	andi	r24, 0xFE	; 254
    2558:	80 83       	st	Z, r24
    255a:	07 80       	ldd	r0, Z+7	; 0x07
    255c:	f0 85       	ldd	r31, Z+8	; 0x08
    255e:	e0 2d       	mov	r30, r0
    2560:	19 95       	eicall
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	0f 91       	pop	r16
    2566:	08 95       	ret

00002568 <udd_ep_run>:
    2568:	6f 92       	push	r6
    256a:	7f 92       	push	r7
    256c:	8f 92       	push	r8
    256e:	9f 92       	push	r9
    2570:	af 92       	push	r10
    2572:	bf 92       	push	r11
    2574:	cf 92       	push	r12
    2576:	df 92       	push	r13
    2578:	ef 92       	push	r14
    257a:	ff 92       	push	r15
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	1f 92       	push	r1
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	78 2e       	mov	r7, r24
    258c:	66 2e       	mov	r6, r22
    258e:	4a 01       	movw	r8, r20
    2590:	59 01       	movw	r10, r18
    2592:	41 dc       	rcall	.-1918   	; 0x1e16 <udd_ep_get_job>
    2594:	6c 01       	movw	r12, r24
    2596:	27 2d       	mov	r18, r7
    2598:	87 2d       	mov	r24, r7
    259a:	8f 70       	andi	r24, 0x0F	; 15
    259c:	e8 2e       	mov	r14, r24
    259e:	f1 2c       	mov	r15, r1
    25a0:	c7 01       	movw	r24, r14
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	e7 2c       	mov	r14, r7
    25a8:	07 2c       	mov	r0, r7
    25aa:	00 0c       	add	r0, r0
    25ac:	ff 08       	sbc	r15, r15
    25ae:	ee 24       	eor	r14, r14
    25b0:	ff 0c       	add	r15, r15
    25b2:	ee 1c       	adc	r14, r14
    25b4:	ff 24       	eor	r15, r15
    25b6:	e8 0e       	add	r14, r24
    25b8:	f9 1e       	adc	r15, r25
    25ba:	f7 01       	movw	r30, r14
    25bc:	ee 0f       	add	r30, r30
    25be:	ff 1f       	adc	r31, r31
    25c0:	ee 0f       	add	r30, r30
    25c2:	ff 1f       	adc	r31, r31
    25c4:	ee 0f       	add	r30, r30
    25c6:	ff 1f       	adc	r31, r31
    25c8:	e0 5b       	subi	r30, 0xB0	; 176
    25ca:	fc 4d       	sbci	r31, 0xDC	; 220
    25cc:	85 89       	ldd	r24, Z+21	; 0x15
    25ce:	80 7c       	andi	r24, 0xC0	; 192
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <udd_ep_run+0x6c>
    25d2:	81 c0       	rjmp	.+258    	; 0x26d6 <udd_ep_run+0x16e>
    25d4:	f7 01       	movw	r30, r14
    25d6:	ee 0f       	add	r30, r30
    25d8:	ff 1f       	adc	r31, r31
    25da:	ee 0f       	add	r30, r30
    25dc:	ff 1f       	adc	r31, r31
    25de:	ee 0f       	add	r30, r30
    25e0:	ff 1f       	adc	r31, r31
    25e2:	e0 5b       	subi	r30, 0xB0	; 176
    25e4:	fc 4d       	sbci	r31, 0xDC	; 220
    25e6:	85 89       	ldd	r24, Z+21	; 0x15
    25e8:	80 7c       	andi	r24, 0xC0	; 192
    25ea:	80 3c       	cpi	r24, 0xC0	; 192
    25ec:	61 f0       	breq	.+24     	; 0x2606 <udd_ep_run+0x9e>
    25ee:	f7 01       	movw	r30, r14
    25f0:	ee 0f       	add	r30, r30
    25f2:	ff 1f       	adc	r31, r31
    25f4:	ee 0f       	add	r30, r30
    25f6:	ff 1f       	adc	r31, r31
    25f8:	ee 0f       	add	r30, r30
    25fa:	ff 1f       	adc	r31, r31
    25fc:	e0 5b       	subi	r30, 0xB0	; 176
    25fe:	fc 4d       	sbci	r31, 0xDC	; 220
    2600:	85 89       	ldd	r24, Z+21	; 0x15
    2602:	82 fd       	sbrc	r24, 2
    2604:	6a c0       	rjmp	.+212    	; 0x26da <udd_ep_run+0x172>
    2606:	8f b7       	in	r24, 0x3f	; 63
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	f8 94       	cli
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	f6 01       	movw	r30, r12
    2610:	90 81       	ld	r25, Z
    2612:	90 ff       	sbrs	r25, 0
    2614:	03 c0       	rjmp	.+6      	; 0x261c <udd_ep_run+0xb4>
    2616:	8f bf       	out	0x3f, r24	; 63
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	60 c0       	rjmp	.+192    	; 0x26dc <udd_ep_run+0x174>
    261c:	f6 01       	movw	r30, r12
    261e:	90 81       	ld	r25, Z
    2620:	91 60       	ori	r25, 0x01	; 1
    2622:	90 83       	st	Z, r25
    2624:	8f bf       	out	0x3f, r24	; 63
    2626:	81 82       	std	Z+1, r8	; 0x01
    2628:	92 82       	std	Z+2, r9	; 0x02
    262a:	a3 82       	std	Z+3, r10	; 0x03
    262c:	b4 82       	std	Z+4, r11	; 0x04
    262e:	15 82       	std	Z+5, r1	; 0x05
    2630:	16 82       	std	Z+6, r1	; 0x06
    2632:	07 83       	std	Z+7, r16	; 0x07
    2634:	10 87       	std	Z+8, r17	; 0x08
    2636:	61 10       	cpse	r6, r1
    2638:	06 c0       	rjmp	.+12     	; 0x2646 <udd_ep_run+0xde>
    263a:	91 e0       	ldi	r25, 0x01	; 1
    263c:	a1 14       	cp	r10, r1
    263e:	b1 04       	cpc	r11, r1
    2640:	19 f0       	breq	.+6      	; 0x2648 <udd_ep_run+0xe0>
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	01 c0       	rjmp	.+2      	; 0x2648 <udd_ep_run+0xe0>
    2646:	91 e0       	ldi	r25, 0x01	; 1
    2648:	f6 01       	movw	r30, r12
    264a:	80 81       	ld	r24, Z
    264c:	90 fb       	bst	r25, 0
    264e:	81 f9       	bld	r24, 1
    2650:	8b 7f       	andi	r24, 0xFB	; 251
    2652:	80 83       	st	Z, r24
    2654:	22 23       	and	r18, r18
    2656:	64 f4       	brge	.+24     	; 0x2670 <udd_ep_run+0x108>
    2658:	f7 01       	movw	r30, r14
    265a:	ee 0f       	add	r30, r30
    265c:	ff 1f       	adc	r31, r31
    265e:	ee 0f       	add	r30, r30
    2660:	ff 1f       	adc	r31, r31
    2662:	ee 0f       	add	r30, r30
    2664:	ff 1f       	adc	r31, r31
    2666:	e0 5b       	subi	r30, 0xB0	; 176
    2668:	fc 4d       	sbci	r31, 0xDC	; 220
    266a:	12 8e       	std	Z+26, r1	; 0x1a
    266c:	13 8e       	std	Z+27, r1	; 0x1b
    266e:	2f c0       	rjmp	.+94     	; 0x26ce <udd_ep_run+0x166>
    2670:	f7 01       	movw	r30, r14
    2672:	ee 0f       	add	r30, r30
    2674:	ff 1f       	adc	r31, r31
    2676:	ee 0f       	add	r30, r30
    2678:	ff 1f       	adc	r31, r31
    267a:	ee 0f       	add	r30, r30
    267c:	ff 1f       	adc	r31, r31
    267e:	e0 5b       	subi	r30, 0xB0	; 176
    2680:	fc 4d       	sbci	r31, 0xDC	; 220
    2682:	85 89       	ldd	r24, Z+21	; 0x15
    2684:	80 7c       	andi	r24, 0xC0	; 192
    2686:	80 3c       	cpi	r24, 0xC0	; 192
    2688:	a9 f4       	brne	.+42     	; 0x26b4 <udd_ep_run+0x14c>
    268a:	c7 01       	movw	r24, r14
    268c:	88 0f       	add	r24, r24
    268e:	99 1f       	adc	r25, r25
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	8c 59       	subi	r24, 0x9C	; 156
    269a:	9c 4d       	sbci	r25, 0xDC	; 220
    269c:	94 db       	rcall	.-2264   	; 0x1dc6 <udd_ep_get_size>
    269e:	bc 01       	movw	r22, r24
    26a0:	c5 01       	movw	r24, r10
    26a2:	ae d2       	rcall	.+1372   	; 0x2c00 <__udivmodhi4>
    26a4:	89 2b       	or	r24, r25
    26a6:	31 f0       	breq	.+12     	; 0x26b4 <udd_ep_run+0x14c>
    26a8:	f6 01       	movw	r30, r12
    26aa:	80 81       	ld	r24, Z
    26ac:	8e 7f       	andi	r24, 0xFE	; 254
    26ae:	80 83       	st	Z, r24
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <udd_ep_run+0x174>
    26b4:	f7 01       	movw	r30, r14
    26b6:	ee 0f       	add	r30, r30
    26b8:	ff 1f       	adc	r31, r31
    26ba:	ee 0f       	add	r30, r30
    26bc:	ff 1f       	adc	r31, r31
    26be:	ee 0f       	add	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	e0 5b       	subi	r30, 0xB0	; 176
    26c4:	fc 4d       	sbci	r31, 0xDC	; 220
    26c6:	16 8a       	std	Z+22, r1	; 0x16
    26c8:	17 8a       	std	Z+23, r1	; 0x17
    26ca:	12 8e       	std	Z+26, r1	; 0x1a
    26cc:	13 8e       	std	Z+27, r1	; 0x1b
    26ce:	87 2d       	mov	r24, r7
    26d0:	2e dc       	rcall	.-1956   	; 0x1f2e <udd_ep_trans_complet>
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	03 c0       	rjmp	.+6      	; 0x26dc <udd_ep_run+0x174>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	01 c0       	rjmp	.+2      	; 0x26dc <udd_ep_run+0x174>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	0f 90       	pop	r0
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	1f 91       	pop	r17
    26e4:	0f 91       	pop	r16
    26e6:	ff 90       	pop	r15
    26e8:	ef 90       	pop	r14
    26ea:	df 90       	pop	r13
    26ec:	cf 90       	pop	r12
    26ee:	bf 90       	pop	r11
    26f0:	af 90       	pop	r10
    26f2:	9f 90       	pop	r9
    26f4:	8f 90       	pop	r8
    26f6:	7f 90       	pop	r7
    26f8:	6f 90       	pop	r6
    26fa:	08 95       	ret

000026fc <udd_ep_abort>:
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
    2706:	18 2f       	mov	r17, r24
    2708:	c8 2f       	mov	r28, r24
    270a:	cf 70       	andi	r28, 0x0F	; 15
    270c:	d0 e0       	ldi	r29, 0x00	; 0
    270e:	ce 01       	movw	r24, r28
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	c1 2f       	mov	r28, r17
    2716:	01 2e       	mov	r0, r17
    2718:	00 0c       	add	r0, r0
    271a:	dd 0b       	sbc	r29, r29
    271c:	cc 27       	eor	r28, r28
    271e:	dd 0f       	add	r29, r29
    2720:	cc 1f       	adc	r28, r28
    2722:	dd 27       	eor	r29, r29
    2724:	c8 0f       	add	r28, r24
    2726:	d9 1f       	adc	r29, r25
    2728:	81 2f       	mov	r24, r17
    272a:	75 db       	rcall	.-2326   	; 0x1e16 <udd_ep_get_job>
    272c:	dc 01       	movw	r26, r24
    272e:	fe 01       	movw	r30, r28
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	ee 0f       	add	r30, r30
    2736:	ff 1f       	adc	r31, r31
    2738:	ee 0f       	add	r30, r30
    273a:	ff 1f       	adc	r31, r31
    273c:	ec 59       	subi	r30, 0x9C	; 156
    273e:	fc 4d       	sbci	r31, 0xDC	; 220
    2740:	02 e0       	ldi	r16, 0x02	; 2
    2742:	05 93       	las	Z, r16
    2744:	8c 91       	ld	r24, X
    2746:	80 ff       	sbrs	r24, 0
    2748:	22 c0       	rjmp	.+68     	; 0x278e <udd_ep_abort+0x92>
    274a:	8e 7f       	andi	r24, 0xFE	; 254
    274c:	8c 93       	st	X, r24
    274e:	17 96       	adiw	r26, 0x07	; 7
    2750:	ed 91       	ld	r30, X+
    2752:	fc 91       	ld	r31, X
    2754:	18 97       	sbiw	r26, 0x08	; 8
    2756:	30 97       	sbiw	r30, 0x00	; 0
    2758:	d1 f0       	breq	.+52     	; 0x278e <udd_ep_abort+0x92>
    275a:	11 23       	and	r17, r17
    275c:	5c f4       	brge	.+22     	; 0x2774 <udd_ep_abort+0x78>
    275e:	cc 0f       	add	r28, r28
    2760:	dd 1f       	adc	r29, r29
    2762:	cc 0f       	add	r28, r28
    2764:	dd 1f       	adc	r29, r29
    2766:	cc 0f       	add	r28, r28
    2768:	dd 1f       	adc	r29, r29
    276a:	c0 5b       	subi	r28, 0xB0	; 176
    276c:	dc 4d       	sbci	r29, 0xDC	; 220
    276e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2770:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2772:	0a c0       	rjmp	.+20     	; 0x2788 <udd_ep_abort+0x8c>
    2774:	cc 0f       	add	r28, r28
    2776:	dd 1f       	adc	r29, r29
    2778:	cc 0f       	add	r28, r28
    277a:	dd 1f       	adc	r29, r29
    277c:	cc 0f       	add	r28, r28
    277e:	dd 1f       	adc	r29, r29
    2780:	c0 5b       	subi	r28, 0xB0	; 176
    2782:	dc 4d       	sbci	r29, 0xDC	; 220
    2784:	6e 89       	ldd	r22, Y+22	; 0x16
    2786:	7f 89       	ldd	r23, Y+23	; 0x17
    2788:	41 2f       	mov	r20, r17
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	19 95       	eicall
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	1f 91       	pop	r17
    2794:	0f 91       	pop	r16
    2796:	ff 90       	pop	r15
    2798:	08 95       	ret

0000279a <udd_ep_free>:
    279a:	cf 93       	push	r28
    279c:	c8 2f       	mov	r28, r24
    279e:	ae df       	rcall	.-164    	; 0x26fc <udd_ep_abort>
    27a0:	ec 2f       	mov	r30, r28
    27a2:	ef 70       	andi	r30, 0x0F	; 15
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	ee 0f       	add	r30, r30
    27a8:	ff 1f       	adc	r31, r31
    27aa:	8c 2f       	mov	r24, r28
    27ac:	cc 0f       	add	r28, r28
    27ae:	99 0b       	sbc	r25, r25
    27b0:	88 27       	eor	r24, r24
    27b2:	99 0f       	add	r25, r25
    27b4:	88 1f       	adc	r24, r24
    27b6:	99 27       	eor	r25, r25
    27b8:	e8 0f       	add	r30, r24
    27ba:	f9 1f       	adc	r31, r25
    27bc:	ee 0f       	add	r30, r30
    27be:	ff 1f       	adc	r31, r31
    27c0:	ee 0f       	add	r30, r30
    27c2:	ff 1f       	adc	r31, r31
    27c4:	ee 0f       	add	r30, r30
    27c6:	ff 1f       	adc	r31, r31
    27c8:	e0 5b       	subi	r30, 0xB0	; 176
    27ca:	fc 4d       	sbci	r31, 0xDC	; 220
    27cc:	15 8a       	std	Z+21, r1	; 0x15
    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

000027d2 <udd_ep_set_halt>:
    27d2:	e8 2f       	mov	r30, r24
    27d4:	ef 70       	andi	r30, 0x0F	; 15
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	ee 0f       	add	r30, r30
    27da:	ff 1f       	adc	r31, r31
    27dc:	28 2f       	mov	r18, r24
    27de:	08 2e       	mov	r0, r24
    27e0:	00 0c       	add	r0, r0
    27e2:	33 0b       	sbc	r19, r19
    27e4:	22 27       	eor	r18, r18
    27e6:	33 0f       	add	r19, r19
    27e8:	22 1f       	adc	r18, r18
    27ea:	33 27       	eor	r19, r19
    27ec:	e2 0f       	add	r30, r18
    27ee:	f3 1f       	adc	r31, r19
    27f0:	ee 0f       	add	r30, r30
    27f2:	ff 1f       	adc	r31, r31
    27f4:	ee 0f       	add	r30, r30
    27f6:	ff 1f       	adc	r31, r31
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	e0 5b       	subi	r30, 0xB0	; 176
    27fe:	fc 4d       	sbci	r31, 0xDC	; 220
    2800:	95 89       	ldd	r25, Z+21	; 0x15
    2802:	94 60       	ori	r25, 0x04	; 4
    2804:	95 8b       	std	Z+21, r25	; 0x15
    2806:	7a df       	rcall	.-268    	; 0x26fc <udd_ep_abort>
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	08 95       	ret

0000280c <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    280c:	1f 92       	push	r1
    280e:	0f 92       	push	r0
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	0f 92       	push	r0
    2814:	11 24       	eor	r1, r1
    2816:	0b b6       	in	r0, 0x3b	; 59
    2818:	0f 92       	push	r0
    281a:	0f 93       	push	r16
    281c:	2f 93       	push	r18
    281e:	3f 93       	push	r19
    2820:	4f 93       	push	r20
    2822:	5f 93       	push	r21
    2824:	6f 93       	push	r22
    2826:	7f 93       	push	r23
    2828:	8f 93       	push	r24
    282a:	9f 93       	push	r25
    282c:	af 93       	push	r26
    282e:	bf 93       	push	r27
    2830:	cf 93       	push	r28
    2832:	ef 93       	push	r30
    2834:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2836:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    283a:	88 23       	and	r24, r24
    283c:	3c f4       	brge	.+14     	; 0x284c <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    283e:	80 e8       	ldi	r24, 0x80	; 128
    2840:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    2844:	0e 94 18 0b 	call	0x1630	; 0x1630 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2848:	b0 d1       	rcall	.+864    	; 0x2baa <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    284a:	89 c0       	rjmp	.+274    	; 0x295e <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    284c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2850:	82 ff       	sbrs	r24, 2
    2852:	20 c0       	rjmp	.+64     	; 0x2894 <__vector_125+0x88>
		udd_ack_underflow_event();
    2854:	84 e0       	ldi	r24, 0x04	; 4
    2856:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    285a:	80 91 6c 23 	lds	r24, 0x236C	; 0x80236c <udd_sram+0x1c>
    285e:	86 ff       	sbrs	r24, 6
    2860:	7e c0       	rjmp	.+252    	; 0x295e <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2862:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2866:	81 fd       	sbrc	r24, 1
    2868:	7a c0       	rjmp	.+244    	; 0x295e <__vector_125+0x152>
    286a:	f0 da       	rcall	.-2592   	; 0x1e4c <udd_ctrl_interrupt_tc_setup>
    286c:	81 11       	cpse	r24, r1
    286e:	77 c0       	rjmp	.+238    	; 0x295e <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2870:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <udd_ep_control_state>
    2874:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2876:	11 f4       	brne	.+4      	; 0x287c <__vector_125+0x70>
    2878:	24 da       	rcall	.-3000   	; 0x1cc2 <udd_ctrl_send_zlp_in>
    287a:	71 c0       	rjmp	.+226    	; 0x295e <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    287c:	84 30       	cpi	r24, 0x04	; 4
    287e:	09 f0       	breq	.+2      	; 0x2882 <__vector_125+0x76>
    2880:	6e c0       	rjmp	.+220    	; 0x295e <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2882:	ed e6       	ldi	r30, 0x6D	; 109
    2884:	f3 e2       	ldi	r31, 0x23	; 35
    2886:	04 e0       	ldi	r16, 0x04	; 4
    2888:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    288a:	e5 e6       	ldi	r30, 0x65	; 101
    288c:	f3 e2       	ldi	r31, 0x23	; 35
    288e:	04 e0       	ldi	r16, 0x04	; 4
    2890:	05 93       	las	Z, r16
    2892:	65 c0       	rjmp	.+202    	; 0x295e <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2894:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2898:	81 ff       	sbrs	r24, 1
    289a:	5c c0       	rjmp	.+184    	; 0x2954 <__vector_125+0x148>
		udd_ack_overflow_event();
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    28a2:	80 91 64 23 	lds	r24, 0x2364	; 0x802364 <udd_sram+0x14>
    28a6:	86 ff       	sbrs	r24, 6
    28a8:	5a c0       	rjmp	.+180    	; 0x295e <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    28aa:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    28ae:	81 fd       	sbrc	r24, 1
    28b0:	56 c0       	rjmp	.+172    	; 0x295e <__vector_125+0x152>
    28b2:	cc da       	rcall	.-2664   	; 0x1e4c <udd_ctrl_interrupt_tc_setup>
    28b4:	81 11       	cpse	r24, r1
    28b6:	53 c0       	rjmp	.+166    	; 0x295e <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    28b8:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <udd_ep_control_state>
    28bc:	82 30       	cpi	r24, 0x02	; 2
    28be:	41 f4       	brne	.+16     	; 0x28d0 <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    28c0:	84 e0       	ldi	r24, 0x04	; 4
    28c2:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    28c6:	e4 e6       	ldi	r30, 0x64	; 100
    28c8:	f3 e2       	ldi	r31, 0x23	; 35
    28ca:	02 e0       	ldi	r16, 0x02	; 2
    28cc:	06 93       	lac	Z, r16
    28ce:	47 c0       	rjmp	.+142    	; 0x295e <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    28d0:	83 30       	cpi	r24, 0x03	; 3
    28d2:	09 f0       	breq	.+2      	; 0x28d6 <__vector_125+0xca>
    28d4:	44 c0       	rjmp	.+136    	; 0x295e <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    28d6:	ed e6       	ldi	r30, 0x6D	; 109
    28d8:	f3 e2       	ldi	r31, 0x23	; 35
    28da:	04 e0       	ldi	r16, 0x04	; 4
    28dc:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    28de:	e5 e6       	ldi	r30, 0x65	; 101
    28e0:	f3 e2       	ldi	r31, 0x23	; 35
    28e2:	04 e0       	ldi	r16, 0x04	; 4
    28e4:	05 93       	las	Z, r16
    28e6:	3b c0       	rjmp	.+118    	; 0x295e <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    28e8:	80 e1       	ldi	r24, 0x10	; 16
    28ea:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    28ee:	c1 e0       	ldi	r28, 0x01	; 1
    28f0:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    28f2:	04 df       	rcall	.-504    	; 0x26fc <udd_ep_abort>
    28f4:	8c 2f       	mov	r24, r28
    28f6:	80 68       	ori	r24, 0x80	; 128
    28f8:	01 df       	rcall	.-510    	; 0x26fc <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    28fa:	cf 5f       	subi	r28, 0xFF	; 255
    28fc:	c5 30       	cpi	r28, 0x05	; 5
    28fe:	c1 f7       	brne	.-16     	; 0x28f0 <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2900:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2904:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2908:	e0 e5       	ldi	r30, 0x50	; 80
    290a:	f3 e2       	ldi	r31, 0x23	; 35
    290c:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    290e:	96 e0       	ldi	r25, 0x06	; 6
    2910:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2912:	80 e4       	ldi	r24, 0x40	; 64
    2914:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2916:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2918:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    291a:	85 8f       	std	Z+29, r24	; 0x1d
    291c:	83 e4       	ldi	r24, 0x43	; 67
    291e:	93 e2       	ldi	r25, 0x23	; 35
    2920:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    2922:	91 8f       	std	Z+25, r25	; 0x19
    2924:	9b d9       	rcall	.-3274   	; 0x1c5c <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2926:	1b c0       	rjmp	.+54     	; 0x295e <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    2928:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    292c:	86 ff       	sbrs	r24, 6
    292e:	07 c0       	rjmp	.+14     	; 0x293e <__vector_125+0x132>
    2930:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2932:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2936:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2938:	59 d9       	rcall	.-3406   	; 0x1bec <udd_sleep_mode>
    293a:	35 d1       	rcall	.+618    	; 0x2ba6 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    293c:	10 c0       	rjmp	.+32     	; 0x295e <__vector_125+0x152>
    293e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    2942:	85 ff       	sbrs	r24, 5
    2944:	0c c0       	rjmp	.+24     	; 0x295e <__vector_125+0x152>
    2946:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    2948:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    294c:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    294e:	4e d9       	rcall	.-3428   	; 0x1bec <udd_sleep_mode>
    2950:	2b d1       	rcall	.+598    	; 0x2ba8 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2952:	05 c0       	rjmp	.+10     	; 0x295e <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2954:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2958:	84 fd       	sbrc	r24, 4
    295a:	c6 cf       	rjmp	.-116    	; 0x28e8 <__vector_125+0xdc>
    295c:	e5 cf       	rjmp	.-54     	; 0x2928 <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    295e:	ff 91       	pop	r31
    2960:	ef 91       	pop	r30
    2962:	cf 91       	pop	r28
    2964:	bf 91       	pop	r27
    2966:	af 91       	pop	r26
    2968:	9f 91       	pop	r25
    296a:	8f 91       	pop	r24
    296c:	7f 91       	pop	r23
    296e:	6f 91       	pop	r22
    2970:	5f 91       	pop	r21
    2972:	4f 91       	pop	r20
    2974:	3f 91       	pop	r19
    2976:	2f 91       	pop	r18
    2978:	0f 91       	pop	r16
    297a:	0f 90       	pop	r0
    297c:	0b be       	out	0x3b, r0	; 59
    297e:	0f 90       	pop	r0
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	0f 90       	pop	r0
    2984:	1f 90       	pop	r1
    2986:	18 95       	reti

00002988 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2988:	1f 92       	push	r1
    298a:	0f 92       	push	r0
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	0f 92       	push	r0
    2990:	11 24       	eor	r1, r1
    2992:	0b b6       	in	r0, 0x3b	; 59
    2994:	0f 92       	push	r0
    2996:	0f 93       	push	r16
    2998:	1f 93       	push	r17
    299a:	2f 93       	push	r18
    299c:	3f 93       	push	r19
    299e:	4f 93       	push	r20
    29a0:	5f 93       	push	r21
    29a2:	6f 93       	push	r22
    29a4:	7f 93       	push	r23
    29a6:	8f 93       	push	r24
    29a8:	9f 93       	push	r25
    29aa:	af 93       	push	r26
    29ac:	bf 93       	push	r27
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	ef 93       	push	r30
    29b4:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    29b6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    29ba:	81 fd       	sbrc	r24, 1
    29bc:	03 c0       	rjmp	.+6      	; 0x29c4 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    29be:	46 da       	rcall	.-2932   	; 0x1e4c <udd_ctrl_interrupt_tc_setup>
    29c0:	81 11       	cpse	r24, r1
    29c2:	c3 c0       	rjmp	.+390    	; 0x2b4a <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    29c4:	82 e0       	ldi	r24, 0x02	; 2
    29c6:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    29ca:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    29ce:	81 95       	neg	r24
    29d0:	88 0f       	add	r24, r24
    29d2:	e4 e6       	ldi	r30, 0x64	; 100
    29d4:	f3 e2       	ldi	r31, 0x23	; 35
    29d6:	e8 1b       	sub	r30, r24
    29d8:	f1 09       	sbc	r31, r1
    29da:	20 81       	ld	r18, Z
    29dc:	31 81       	ldd	r19, Z+1	; 0x01
    29de:	24 56       	subi	r18, 0x64	; 100
    29e0:	33 42       	sbci	r19, 0x23	; 35
    29e2:	36 95       	lsr	r19
    29e4:	27 95       	ror	r18
    29e6:	36 95       	lsr	r19
    29e8:	27 95       	ror	r18
    29ea:	36 95       	lsr	r19
    29ec:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    29ee:	82 2f       	mov	r24, r18
    29f0:	86 95       	lsr	r24
    29f2:	20 fd       	sbrc	r18, 0
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <__vector_126+0x72>
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	01 c0       	rjmp	.+2      	; 0x29fc <__vector_126+0x74>
    29fa:	90 e8       	ldi	r25, 0x80	; 128
    29fc:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    29fe:	e8 2f       	mov	r30, r24
    2a00:	ef 70       	andi	r30, 0x0F	; 15
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	ee 0f       	add	r30, r30
    2a06:	ff 1f       	adc	r31, r31
    2a08:	28 2f       	mov	r18, r24
    2a0a:	08 2e       	mov	r0, r24
    2a0c:	00 0c       	add	r0, r0
    2a0e:	33 0b       	sbc	r19, r19
    2a10:	22 27       	eor	r18, r18
    2a12:	33 0f       	add	r19, r19
    2a14:	22 1f       	adc	r18, r18
    2a16:	33 27       	eor	r19, r19
    2a18:	e2 0f       	add	r30, r18
    2a1a:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2a1c:	df 01       	movw	r26, r30
    2a1e:	aa 0f       	add	r26, r26
    2a20:	bb 1f       	adc	r27, r27
    2a22:	aa 0f       	add	r26, r26
    2a24:	bb 1f       	adc	r27, r27
    2a26:	aa 0f       	add	r26, r26
    2a28:	bb 1f       	adc	r27, r27
    2a2a:	a0 5b       	subi	r26, 0xB0	; 176
    2a2c:	bc 4d       	sbci	r27, 0xDC	; 220
    2a2e:	54 96       	adiw	r26, 0x14	; 20
    2a30:	9c 91       	ld	r25, X
    2a32:	95 ff       	sbrs	r25, 5
    2a34:	8a c0       	rjmp	.+276    	; 0x2b4a <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2a36:	ee 0f       	add	r30, r30
    2a38:	ff 1f       	adc	r31, r31
    2a3a:	ee 0f       	add	r30, r30
    2a3c:	ff 1f       	adc	r31, r31
    2a3e:	ee 0f       	add	r30, r30
    2a40:	ff 1f       	adc	r31, r31
    2a42:	ec 59       	subi	r30, 0x9C	; 156
    2a44:	fc 4d       	sbci	r31, 0xDC	; 220
    2a46:	00 e2       	ldi	r16, 0x20	; 32
    2a48:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2a4a:	81 11       	cpse	r24, r1
    2a4c:	79 c0       	rjmp	.+242    	; 0x2b40 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2a4e:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <udd_ep_control_state>
    2a52:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2a54:	19 f4       	brne	.+6      	; 0x2a5c <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2a56:	43 d9       	rcall	.-3450   	; 0x1cde <udd_ctrl_endofrequest>
    2a58:	01 d9       	rcall	.-3582   	; 0x1c5c <udd_ctrl_init>
    2a5a:	77 c0       	rjmp	.+238    	; 0x2b4a <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2a5c:	00 91 66 23 	lds	r16, 0x2366	; 0x802366 <udd_sram+0x16>
    2a60:	10 91 67 23 	lds	r17, 0x2367	; 0x802367 <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2a64:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0xa>
    2a68:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0xb>
    2a6c:	c0 91 4b 23 	lds	r28, 0x234B	; 0x80234b <udd_ctrl_payload_nb_trans>
    2a70:	d0 91 4c 23 	lds	r29, 0x234C	; 0x80234c <udd_ctrl_payload_nb_trans+0x1>
    2a74:	98 01       	movw	r18, r16
    2a76:	2c 0f       	add	r18, r28
    2a78:	3d 1f       	adc	r19, r29
    2a7a:	82 17       	cp	r24, r18
    2a7c:	93 07       	cpc	r25, r19
    2a7e:	18 f4       	brcc	.+6      	; 0x2a86 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2a80:	8c 01       	movw	r16, r24
    2a82:	0c 1b       	sub	r16, r28
    2a84:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2a86:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <udd_g_ctrlreq+0x8>
    2a8a:	90 91 ce 23 	lds	r25, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x9>
    2a8e:	a8 01       	movw	r20, r16
    2a90:	63 e4       	ldi	r22, 0x43	; 67
    2a92:	73 e2       	ldi	r23, 0x23	; 35
    2a94:	8c 0f       	add	r24, r28
    2a96:	9d 1f       	adc	r25, r29
    2a98:	cf d0       	rcall	.+414    	; 0x2c38 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2a9a:	c0 0f       	add	r28, r16
    2a9c:	d1 1f       	adc	r29, r17
    2a9e:	c0 93 4b 23 	sts	0x234B, r28	; 0x80234b <udd_ctrl_payload_nb_trans>
    2aa2:	d0 93 4c 23 	sts	0x234C, r29	; 0x80234c <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2aa6:	08 30       	cpi	r16, 0x08	; 8
    2aa8:	11 05       	cpc	r17, r1
    2aaa:	69 f4       	brne	.+26     	; 0x2ac6 <__vector_126+0x13e>
    2aac:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udd_ctrl_prev_payload_nb_trans>
    2ab0:	90 91 4e 23 	lds	r25, 0x234E	; 0x80234e <udd_ctrl_prev_payload_nb_trans+0x1>
    2ab4:	8c 0f       	add	r24, r28
    2ab6:	9d 1f       	adc	r25, r29
    2ab8:	20 91 cb 23 	lds	r18, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    2abc:	30 91 cc 23 	lds	r19, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    2ac0:	82 17       	cp	r24, r18
    2ac2:	93 07       	cpc	r25, r19
    2ac4:	80 f0       	brcs	.+32     	; 0x2ae6 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2ac6:	e5 ec       	ldi	r30, 0xC5	; 197
    2ac8:	f3 e2       	ldi	r31, 0x23	; 35
    2aca:	c2 87       	std	Z+10, r28	; 0x0a
    2acc:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2ace:	06 84       	ldd	r0, Z+14	; 0x0e
    2ad0:	f7 85       	ldd	r31, Z+15	; 0x0f
    2ad2:	e0 2d       	mov	r30, r0
    2ad4:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2ad6:	29 f0       	breq	.+10     	; 0x2ae2 <__vector_126+0x15a>
    2ad8:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2ada:	81 11       	cpse	r24, r1
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <__vector_126+0x15a>
    2ade:	e3 d8       	rcall	.-3642   	; 0x1ca6 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2ae0:	34 c0       	rjmp	.+104    	; 0x2b4a <__vector_126+0x1c2>
    2ae2:	ef d8       	rcall	.-3618   	; 0x1cc2 <udd_ctrl_send_zlp_in>
    2ae4:	32 c0       	rjmp	.+100    	; 0x2b4a <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2ae6:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0xa>
    2aea:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0xb>
    2aee:	c8 17       	cp	r28, r24
    2af0:	d9 07       	cpc	r29, r25
    2af2:	f9 f4       	brne	.+62     	; 0x2b32 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2af4:	e0 91 d3 23 	lds	r30, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0xe>
    2af8:	f0 91 d4 23 	lds	r31, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0xf>
    2afc:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2afe:	11 f4       	brne	.+4      	; 0x2b04 <__vector_126+0x17c>
    2b00:	d2 d8       	rcall	.-3676   	; 0x1ca6 <udd_ctrl_stall_data>
    2b02:	23 c0       	rjmp	.+70     	; 0x2b4a <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2b04:	19 95       	eicall
    2b06:	81 11       	cpse	r24, r1
    2b08:	02 c0       	rjmp	.+4      	; 0x2b0e <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2b0a:	cd d8       	rcall	.-3686   	; 0x1ca6 <udd_ctrl_stall_data>
    2b0c:	1e c0       	rjmp	.+60     	; 0x2b4a <__vector_126+0x1c2>
    2b0e:	20 91 4d 23 	lds	r18, 0x234D	; 0x80234d <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2b12:	30 91 4e 23 	lds	r19, 0x234E	; 0x80234e <udd_ctrl_prev_payload_nb_trans+0x1>
    2b16:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <udd_ctrl_payload_nb_trans>
    2b1a:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <udd_ctrl_payload_nb_trans+0x1>
    2b1e:	82 0f       	add	r24, r18
    2b20:	93 1f       	adc	r25, r19
    2b22:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <udd_ctrl_prev_payload_nb_trans>
    2b26:	90 93 4e 23 	sts	0x234E, r25	; 0x80234e <udd_ctrl_prev_payload_nb_trans+0x1>
    2b2a:	10 92 4b 23 	sts	0x234B, r1	; 0x80234b <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2b2e:	10 92 4c 23 	sts	0x234C, r1	; 0x80234c <udd_ctrl_payload_nb_trans+0x1>
    2b32:	e4 e6       	ldi	r30, 0x64	; 100
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2b34:	f3 e2       	ldi	r31, 0x23	; 35
    2b36:	02 e0       	ldi	r16, 0x02	; 2
    2b38:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2b3a:	00 e2       	ldi	r16, 0x20	; 32
    2b3c:	06 93       	lac	Z, r16
    2b3e:	05 c0       	rjmp	.+10     	; 0x2b4a <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2b40:	80 38       	cpi	r24, 0x80	; 128
		udd_ctrl_in_sent();
    2b42:	11 f4       	brne	.+4      	; 0x2b48 <__vector_126+0x1c0>
    2b44:	d4 d8       	rcall	.-3672   	; 0x1cee <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2b46:	01 c0       	rjmp	.+2      	; 0x2b4a <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2b48:	f2 d9       	rcall	.-3100   	; 0x1f2e <udd_ep_trans_complet>
    2b4a:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2b4c:	ef 91       	pop	r30
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	bf 91       	pop	r27
    2b54:	af 91       	pop	r26
    2b56:	9f 91       	pop	r25
    2b58:	8f 91       	pop	r24
    2b5a:	7f 91       	pop	r23
    2b5c:	6f 91       	pop	r22
    2b5e:	5f 91       	pop	r21
    2b60:	4f 91       	pop	r20
    2b62:	3f 91       	pop	r19
    2b64:	2f 91       	pop	r18
    2b66:	1f 91       	pop	r17
    2b68:	0f 91       	pop	r16
    2b6a:	0f 90       	pop	r0
    2b6c:	0b be       	out	0x3b, r0	; 59
    2b6e:	0f 90       	pop	r0
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	0f 90       	pop	r0
    2b74:	1f 90       	pop	r1
    2b76:	18 95       	reti

00002b78 <main>:

static const uint8_t sequence = 1;

int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    2b78:	87 e0       	ldi	r24, 0x07	; 7
    2b7a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    2b7e:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2b80:	ef eb       	ldi	r30, 0xBF	; 191
    2b82:	f3 e2       	ldi	r31, 0x23	; 35
    2b84:	10 82       	st	Z, r1
    2b86:	11 82       	std	Z+1, r1	; 0x01
    2b88:	12 82       	std	Z+2, r1	; 0x02
    2b8a:	13 82       	std	Z+3, r1	; 0x03
    2b8c:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    2b92:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <sysclk_init>

	io_ui_process(); // initializes board i/o pins
    2b96:	0e 94 4e 07 	call	0xe9c	; 0xe9c <io_ui_process>

	udc_start();               // starts USB device controller
    2b9a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <udc_start>

	startup_ui_process(sequence); // pick preferred sequence (1-5)
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	0e 94 50 07 	call	0xea0	; 0xea0 <startup_ui_process>
    2ba4:	ff cf       	rjmp	.-2      	; 0x2ba4 <main+0x2c>

00002ba6 <main_suspend_action>:

	while (true) { }
}

/* -------------------------------- USB -------------------------------- */
void main_suspend_action(void) { }
    2ba6:	08 95       	ret

00002ba8 <main_resume_action>:
void main_resume_action(void) { }
    2ba8:	08 95       	ret

00002baa <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    2baa:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <main_b_kbd_enable>
    2bae:	88 23       	and	r24, r24
    2bb0:	51 f0       	breq	.+20     	; 0x2bc6 <main_sof_action+0x1c>
	return;
	kbd_ui_process();
    2bb2:	0e 94 54 07 	call	0xea8	; 0xea8 <kbd_ui_process>

	if (!main_b_generic_enable)
    2bb6:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <main_b_generic_enable>
    2bba:	88 23       	and	r24, r24
    2bbc:	21 f0       	breq	.+8      	; 0x2bc6 <main_sof_action+0x1c>
		return;
	jstk_ui_process();
    2bbe:	0e 94 52 07 	call	0xea4	; 0xea4 <jstk_ui_process>

	status_ui_process();
    2bc2:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <status_ui_process>
    2bc6:	08 95       	ret

00002bc8 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2bc8:	08 95       	ret

00002bca <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2bca:	08 95       	ret

00002bcc <main_kbd_enable>:

/* ----------------------------- keyboard ------------------------------ */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	80 93 bb 23 	sts	0x23BB, r24	; 0x8023bb <main_b_kbd_enable>
	return true;
}
    2bd2:	08 95       	ret

00002bd4 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2bd4:	10 92 bb 23 	sts	0x23BB, r1	; 0x8023bb <main_b_kbd_enable>
    2bd8:	08 95       	ret

00002bda <main_generic_enable>:
}

/* ----------------------------- joystick ------------------------------ */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	80 93 ba 23 	sts	0x23BA, r24	; 0x8023ba <main_b_generic_enable>
	return true;
}
    2be0:	08 95       	ret

00002be2 <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2be2:	10 92 ba 23 	sts	0x23BA, r1	; 0x8023ba <main_b_generic_enable>
    2be6:	08 95       	ret

00002be8 <main_led_enable>:
}

/* ------------------------------- LEDs -------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	80 93 b9 23 	sts	0x23B9, r24	; 0x8023b9 <main_b_led_enable>
	return true;
}
    2bee:	08 95       	ret

00002bf0 <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2bf0:	10 92 b9 23 	sts	0x23B9, r1	; 0x8023b9 <main_b_led_enable>
    2bf4:	08 95       	ret

00002bf6 <main_led_report_out>:
}

void main_led_report_out(uint8_t const *report) {
	led_ui_process(report[0]);
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	80 81       	ld	r24, Z
    2bfa:	0c 94 56 07 	jmp	0xeac	; 0xeac <led_ui_process>
    2bfe:	08 95       	ret

00002c00 <__udivmodhi4>:
    2c00:	aa 1b       	sub	r26, r26
    2c02:	bb 1b       	sub	r27, r27
    2c04:	51 e1       	ldi	r21, 0x11	; 17
    2c06:	07 c0       	rjmp	.+14     	; 0x2c16 <__udivmodhi4_ep>

00002c08 <__udivmodhi4_loop>:
    2c08:	aa 1f       	adc	r26, r26
    2c0a:	bb 1f       	adc	r27, r27
    2c0c:	a6 17       	cp	r26, r22
    2c0e:	b7 07       	cpc	r27, r23
    2c10:	10 f0       	brcs	.+4      	; 0x2c16 <__udivmodhi4_ep>
    2c12:	a6 1b       	sub	r26, r22
    2c14:	b7 0b       	sbc	r27, r23

00002c16 <__udivmodhi4_ep>:
    2c16:	88 1f       	adc	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	5a 95       	dec	r21
    2c1c:	a9 f7       	brne	.-22     	; 0x2c08 <__udivmodhi4_loop>
    2c1e:	80 95       	com	r24
    2c20:	90 95       	com	r25
    2c22:	bc 01       	movw	r22, r24
    2c24:	cd 01       	movw	r24, r26
    2c26:	08 95       	ret

00002c28 <__tablejump2__>:
    2c28:	ee 0f       	add	r30, r30
    2c2a:	ff 1f       	adc	r31, r31
    2c2c:	88 1f       	adc	r24, r24
    2c2e:	8b bf       	out	0x3b, r24	; 59
    2c30:	07 90       	elpm	r0, Z+
    2c32:	f6 91       	elpm	r31, Z
    2c34:	e0 2d       	mov	r30, r0
    2c36:	19 94       	eijmp

00002c38 <memcpy>:
    2c38:	fb 01       	movw	r30, r22
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	02 c0       	rjmp	.+4      	; 0x2c42 <memcpy+0xa>
    2c3e:	01 90       	ld	r0, Z+
    2c40:	0d 92       	st	X+, r0
    2c42:	41 50       	subi	r20, 0x01	; 1
    2c44:	50 40       	sbci	r21, 0x00	; 0
    2c46:	d8 f7       	brcc	.-10     	; 0x2c3e <memcpy+0x6>
    2c48:	08 95       	ret

00002c4a <_exit>:
    2c4a:	f8 94       	cli

00002c4c <__stop_program>:
    2c4c:	ff cf       	rjmp	.-2      	; 0x2c4c <__stop_program>
