
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00802000  00002c48  00002cdc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000023f  00802196  00802196  00002e72  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ea4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000590  00000000  00000000  00002ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b195  00000000  00000000  00003478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005237  00000000  00000000  0000e60d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009b32  00000000  00000000  00013844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c7c  00000000  00000000  0001d378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036ca7  00000000  00000000  0001dff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035c2  00000000  00000000  00054c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000738  00000000  00000000  00058260  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd69  00000000  00000000  00058998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__vector_125>
     1f8:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <__vector_126>
     1fc:	c9 03       	fmulsu	r20, r17
     1fe:	0f 04       	cpc	r0, r15
     200:	bf 03       	fmulsu	r19, r23
     202:	11 04       	cpc	r1, r1
     204:	c1 03       	fmuls	r20, r17
     206:	c3 03       	fmuls	r20, r19
     208:	c5 03       	fmuls	r20, r21
     20a:	c7 03       	fmuls	r20, r23
     20c:	c9 03       	fmulsu	r20, r17
     20e:	f0 0e       	add	r15, r16
     210:	f3 0e       	add	r15, r19
     212:	f6 0e       	add	r15, r22
     214:	f9 0e       	add	r15, r25
     216:	fc 0e       	add	r15, r28
     218:	ff 0e       	add	r15, r31
     21a:	02 0f       	add	r16, r18

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	e8 e4       	ldi	r30, 0x48	; 72
     234:	fc e2       	ldi	r31, 0x2C	; 44
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a6 39       	cpi	r26, 0x96	; 150
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a6 e9       	ldi	r26, 0x96	; 150
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a5 3d       	cpi	r26, 0xD5	; 213
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <main>
     25a:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     264:	30 91 c7 23 	lds	r19, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
     268:	20 91 c8 23 	lds	r18, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     278:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
     27c:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     284:	e5 ec       	ldi	r30, 0xC5	; 197
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	86 e9       	ldi	r24, 0x96	; 150
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     298:	84 e7       	ldi	r24, 0x74	; 116
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
	}
	return false;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2b4:	04 e7       	ldi	r16, 0x74	; 116
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	46 e9       	ldi	r20, 0x96	; 150
     2be:	51 e2       	ldi	r21, 0x21	; 33
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 b1 12 	call	0x2562	; 0x2562 <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	08 95       	ret

000002ce <udi_hid_led_enable>:
		                                    iram_size_t     nb_received,
		                                    udd_ep_id_t     ep);

static bool udi_hid_led_report_out_enable(void);

bool udi_hid_led_enable(void) {
     2ce:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d0:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2d4:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <__data_end>

	if(!udi_hid_led_report_out_enable())
     2d8:	eb df       	rcall	.-42     	; 0x2b0 <udi_hid_led_report_out_enable>
     2da:	c8 2f       	mov	r28, r24
     2dc:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2de:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <main_led_enable>
	return true;
}
     2e2:	8c 2f       	mov	r24, r28
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2e8:	81 11       	cpse	r24, r1
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <udi_hid_led_report_out_received+0x12>
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	71 05       	cpc	r23, r1
     2f0:	21 f4       	brne	.+8      	; 0x2fa <udi_hid_led_report_out_received+0x12>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     2f2:	86 e9       	ldi	r24, 0x96	; 150
     2f4:	91 e2       	ldi	r25, 0x21	; 33
     2f6:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <main_led_report_out>
	}
	udi_hid_led_report_out_enable();
     2fa:	da cf       	rjmp	.-76     	; 0x2b0 <udi_hid_led_report_out_enable>
     2fc:	08 95       	ret

000002fe <udi_hid_led_disable>:
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     2fe:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <main_led_disable>
     302:	08 95       	ret

00000304 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     304:	22 e3       	ldi	r18, 0x32	; 50
     306:	31 e0       	ldi	r19, 0x01	; 1
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	50 e2       	ldi	r21, 0x20	; 32
     30c:	66 e9       	ldi	r22, 0x96	; 150
     30e:	71 e2       	ldi	r23, 0x21	; 33
     310:	88 e9       	ldi	r24, 0x98	; 152
     312:	91 e2       	ldi	r25, 0x21	; 33
     314:	d1 c7       	rjmp	.+4002   	; 0x12b8 <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     316:	08 95       	ret

00000318 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     318:	e0 e0       	ldi	r30, 0x00	; 0
     31a:	f6 e0       	ldi	r31, 0x06	; 6
     31c:	9f ef       	ldi	r25, 0xFF	; 255
     31e:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     320:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     322:	e0 e2       	ldi	r30, 0x20	; 32
     324:	f6 e0       	ldi	r31, 0x06	; 6
     326:	3f e3       	ldi	r19, 0x3F	; 63
     328:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     32a:	88 e1       	ldi	r24, 0x18	; 24
     32c:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     32e:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     330:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     332:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     334:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     336:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     338:	20 ec       	ldi	r18, 0xC0	; 192
     33a:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     33c:	40 e4       	ldi	r20, 0x40	; 64
     33e:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     340:	40 e8       	ldi	r20, 0x80	; 128
     342:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     344:	e0 e4       	ldi	r30, 0x40	; 64
     346:	f6 e0       	ldi	r31, 0x06	; 6
     348:	4c ef       	ldi	r20, 0xFC	; 252
     34a:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     34c:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     34e:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     350:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     352:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     354:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     356:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     358:	43 e0       	ldi	r20, 0x03	; 3
     35a:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     35c:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     35e:	e0 e6       	ldi	r30, 0x60	; 96
     360:	f6 e0       	ldi	r31, 0x06	; 6
     362:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     364:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     366:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     368:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36a:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36c:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36e:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     370:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     372:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     374:	e0 e8       	ldi	r30, 0x80	; 128
     376:	f6 e0       	ldi	r31, 0x06	; 6
     378:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37a:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37c:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37e:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     380:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     382:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     384:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     386:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     388:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     38a:	e0 ea       	ldi	r30, 0xA0	; 160
     38c:	f6 e0       	ldi	r31, 0x06	; 6
     38e:	90 ef       	ldi	r25, 0xF0	; 240
     390:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     392:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     394:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     396:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     398:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     39a:	8f e0       	ldi	r24, 0x0F	; 15
     39c:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     39e:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     3a0:	9c d2       	rcall	.+1336   	; 0x8da <led_init>
	keypad_init();
     3a2:	0d c1       	rjmp	.+538    	; 0x5be <keypad_init>
     3a4:	08 95       	ret

000003a6 <jstk_readVertIndex>:
     3a6:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     3aa:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	92 2b       	or	r25, r18
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	bc 01       	movw	r22, r24
     3bc:	7f 70       	andi	r23, 0x0F	; 15
     3be:	80 ff       	sbrs	r24, 0
     3c0:	17 c0       	rjmp	.+46     	; 0x3f0 <jstk_readVertIndex+0x4a>
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	e1 e0       	ldi	r30, 0x01	; 1
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	82 2f       	mov	r24, r18
     3cc:	af 01       	movw	r20, r30
     3ce:	02 2e       	mov	r0, r18
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <jstk_readVertIndex+0x30>
     3d2:	44 0f       	add	r20, r20
     3d4:	55 1f       	adc	r21, r21
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <jstk_readVertIndex+0x2c>
     3da:	46 23       	and	r20, r22
     3dc:	57 23       	and	r21, r23
     3de:	45 2b       	or	r20, r21
     3e0:	41 f0       	breq	.+16     	; 0x3f2 <jstk_readVertIndex+0x4c>
     3e2:	2f 5f       	subi	r18, 0xFF	; 255
     3e4:	3f 4f       	sbci	r19, 0xFF	; 255
     3e6:	2c 30       	cpi	r18, 0x0C	; 12
     3e8:	31 05       	cpc	r19, r1
     3ea:	79 f7       	brne	.-34     	; 0x3ca <jstk_readVertIndex+0x24>
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	08 95       	ret
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	08 95       	ret

000003f4 <jstk_readHoriIndex>:
     3f4:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     3f8:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	92 2b       	or	r25, r18
     400:	bc 01       	movw	r22, r24
     402:	7f 70       	andi	r23, 0x0F	; 15
     404:	80 ff       	sbrs	r24, 0
     406:	17 c0       	rjmp	.+46     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	e1 e0       	ldi	r30, 0x01	; 1
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	82 2f       	mov	r24, r18
     412:	af 01       	movw	r20, r30
     414:	02 2e       	mov	r0, r18
     416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     418:	44 0f       	add	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	0a 94       	dec	r0
     41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     420:	46 23       	and	r20, r22
     422:	57 23       	and	r21, r23
     424:	45 2b       	or	r20, r21
     426:	41 f0       	breq	.+16     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     428:	2f 5f       	subi	r18, 0xFF	; 255
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
     42c:	2c 30       	cpi	r18, 0x0C	; 12
     42e:	31 05       	cpc	r19, r1
     430:	79 f7       	brne	.-34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	08 95       	ret
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	08 95       	ret

0000043a <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     43a:	88 23       	and	r24, r24
     43c:	f4 f1       	brlt	.+124    	; 0x4ba <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     43e:	9b ef       	ldi	r25, 0xFB	; 251
     440:	98 0f       	add	r25, r24
     442:	92 30       	cpi	r25, 0x02	; 2
     444:	e0 f1       	brcs	.+120    	; 0x4be <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     446:	85 30       	cpi	r24, 0x05	; 5
     448:	34 f4       	brge	.+12     	; 0x456 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     44a:	95 e0       	ldi	r25, 0x05	; 5
     44c:	98 1b       	sub	r25, r24
     44e:	92 30       	cpi	r25, 0x02	; 2
     450:	08 f0       	brcs	.+2      	; 0x454 <jstk_ledMask+0x1a>
     452:	42 c0       	rjmp	.+132    	; 0x4d8 <jstk_ledMask+0x9e>
     454:	36 c0       	rjmp	.+108    	; 0x4c2 <jstk_ledMask+0x88>
     456:	9a ef       	ldi	r25, 0xFA	; 250
     458:	98 0f       	add	r25, r24
     45a:	92 30       	cpi	r25, 0x02	; 2
     45c:	b0 f5       	brcc	.+108    	; 0x4ca <jstk_ledMask+0x90>
     45e:	31 c0       	rjmp	.+98     	; 0x4c2 <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     460:	62 e0       	ldi	r22, 0x02	; 2
     462:	23 e0       	ldi	r18, 0x03	; 3
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     46a:	e1 e0       	ldi	r30, 0x01	; 1
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	af 01       	movw	r20, r30
     470:	02 2e       	mov	r0, r18
     472:	02 c0       	rjmp	.+4      	; 0x478 <jstk_ledMask+0x3e>
     474:	44 0f       	add	r20, r20
     476:	55 1f       	adc	r21, r21
     478:	0a 94       	dec	r0
     47a:	e2 f7       	brpl	.-8      	; 0x474 <jstk_ledMask+0x3a>
     47c:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     47e:	9f 5f       	subi	r25, 0xFF	; 255
     480:	21 50       	subi	r18, 0x01	; 1
     482:	31 09       	sbc	r19, r1
     484:	96 17       	cp	r25, r22
     486:	98 f3       	brcs	.-26     	; 0x46e <jstk_ledMask+0x34>
     488:	08 95       	ret
     48a:	81 50       	subi	r24, 0x01	; 1
     48c:	48 2f       	mov	r20, r24
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	4b 5f       	subi	r20, 0xFB	; 251
     492:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     494:	24 e0       	ldi	r18, 0x04	; 4
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     49a:	e1 e0       	ldi	r30, 0x01	; 1
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	bf 01       	movw	r22, r30
     4a0:	02 2e       	mov	r0, r18
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <jstk_ledMask+0x6e>
     4a4:	66 0f       	add	r22, r22
     4a6:	77 1f       	adc	r23, r23
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <jstk_ledMask+0x6a>
     4ac:	86 2b       	or	r24, r22
     4ae:	2f 5f       	subi	r18, 0xFF	; 255
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4b2:	24 17       	cp	r18, r20
     4b4:	35 07       	cpc	r19, r21
     4b6:	99 f7       	brne	.-26     	; 0x49e <jstk_ledMask+0x64>
     4b8:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     4be:	88 e1       	ldi	r24, 0x18	; 24
     4c0:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4c2:	85 30       	cpi	r24, 0x05	; 5
     4c4:	6c f2       	brlt	.-102    	; 0x460 <jstk_ledMask+0x26>
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	e0 cf       	rjmp	.-64     	; 0x48a <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4ca:	85 50       	subi	r24, 0x05	; 5
     4cc:	85 30       	cpi	r24, 0x05	; 5
     4ce:	08 f0       	brcs	.+2      	; 0x4d2 <jstk_ledMask+0x98>
     4d0:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4d2:	81 11       	cpse	r24, r1
     4d4:	da cf       	rjmp	.-76     	; 0x48a <jstk_ledMask+0x50>
     4d6:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4d8:	66 e0       	ldi	r22, 0x06	; 6
     4da:	68 1b       	sub	r22, r24
     4dc:	65 30       	cpi	r22, 0x05	; 5
     4de:	08 f0       	brcs	.+2      	; 0x4e2 <jstk_ledMask+0xa8>
     4e0:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     4e2:	61 11       	cpse	r22, r1
     4e4:	be cf       	rjmp	.-132    	; 0x462 <jstk_ledMask+0x28>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     4e8:	08 95       	ret

000004ea <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     4ea:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     4ec:	5c df       	rcall	.-328    	; 0x3a6 <jstk_readVertIndex>
     4ee:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     4f0:	81 df       	rcall	.-254    	; 0x3f4 <jstk_readHoriIndex>
     4f2:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     4f4:	24 f4       	brge	.+8      	; 0x4fe <jstk_readMask+0x14>
     4f6:	88 23       	and	r24, r24
     4f8:	c4 f0       	brlt	.+48     	; 0x52a <jstk_readMask+0x40>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     4fc:	09 c0       	rjmp	.+18     	; 0x510 <jstk_readMask+0x26>
     4fe:	c6 30       	cpi	r28, 0x06	; 6
     500:	1c f0       	brlt	.+6      	; 0x508 <jstk_readMask+0x1e>
     502:	9b ef       	ldi	r25, 0xFB	; 251
     504:	9c 0f       	add	r25, r28
     506:	02 c0       	rjmp	.+4      	; 0x50c <jstk_readMask+0x22>
     508:	95 e0       	ldi	r25, 0x05	; 5
     50a:	9c 1b       	sub	r25, r28
     50c:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     50e:	54 f0       	brlt	.+20     	; 0x524 <jstk_readMask+0x3a>
     510:	86 30       	cpi	r24, 0x06	; 6
     512:	1c f0       	brlt	.+6      	; 0x51a <jstk_readMask+0x30>
     514:	2b ef       	ldi	r18, 0xFB	; 251
     516:	28 0f       	add	r18, r24
     518:	02 c0       	rjmp	.+4      	; 0x51e <jstk_readMask+0x34>
     51a:	25 e0       	ldi	r18, 0x05	; 5
     51c:	28 1b       	sub	r18, r24
     51e:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     520:	08 f4       	brcc	.+2      	; 0x524 <jstk_readMask+0x3a>
     522:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     524:	8c 2f       	mov	r24, r28
     526:	89 df       	rcall	.-238    	; 0x43a <jstk_ledMask>
     528:	01 c0       	rjmp	.+2      	; 0x52c <jstk_readMask+0x42>
     52a:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     52c:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     52e:	08 95       	ret

00000530 <jstk_usbTask>:
     530:	61 df       	rcall	.-318    	; 0x3f4 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     532:	88 23       	and	r24, r24
     534:	3c f0       	brlt	.+14     	; 0x544 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     536:	e8 2f       	mov	r30, r24
     538:	88 0f       	add	r24, r24
     53a:	ff 0b       	sbc	r31, r31
     53c:	e6 57       	subi	r30, 0x76	; 118
     53e:	fe 4d       	sbci	r31, 0xDE	; 222
     540:	80 81       	ld	r24, Z
     542:	01 c0       	rjmp	.+2      	; 0x546 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     544:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     546:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     54a:	2d df       	rcall	.-422    	; 0x3a6 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     54c:	88 23       	and	r24, r24
     54e:	3c f0       	brlt	.+14     	; 0x55e <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     550:	e8 2f       	mov	r30, r24
     552:	88 0f       	add	r24, r24
     554:	ff 0b       	sbc	r31, r31
     556:	e6 57       	subi	r30, 0x76	; 118
     558:	fe 4d       	sbci	r31, 0xDE	; 222
     55a:	80 81       	ld	r24, Z
     55c:	01 c0       	rjmp	.+2      	; 0x560 <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     55e:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     560:	ea e9       	ldi	r30, 0x9A	; 154
     562:	f1 e2       	ldi	r31, 0x21	; 33
     564:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     566:	20 81       	ld	r18, Z
     568:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     56c:	29 13       	cpse	r18, r25
     56e:	04 c0       	rjmp	.+8      	; 0x578 <jstk_usbTask+0x48>
     570:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     574:	98 17       	cp	r25, r24
     576:	71 f0       	breq	.+28     	; 0x594 <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     578:	8a e9       	ldi	r24, 0x9A	; 154
     57a:	91 e2       	ldi	r25, 0x21	; 33
     57c:	ac d5       	rcall	.+2904   	; 0x10d6 <udi_hid_generic_send_report_in>
     57e:	88 23       	and	r24, r24
     580:	49 f0       	breq	.+18     	; 0x594 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     582:	e6 e2       	ldi	r30, 0x26	; 38
     584:	f0 e2       	ldi	r31, 0x20	; 32
     586:	aa e9       	ldi	r26, 0x9A	; 154
     588:	b1 e2       	ldi	r27, 0x21	; 33
     58a:	8c 91       	ld	r24, X
     58c:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     58e:	11 96       	adiw	r26, 0x01	; 1
     590:	8c 91       	ld	r24, X
     592:	81 83       	std	Z+1, r24	; 0x01
     594:	08 95       	ret

00000596 <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     596:	a9 df       	rcall	.-174    	; 0x4ea <jstk_readMask>
     598:	80 93 bc 23 	sts	0x23BC, r24	; 0x8023bc <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     59c:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     5a0:	90 93 bd 23 	sts	0x23BD, r25	; 0x8023bd <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     5a4:	90 91 bd 23 	lds	r25, 0x23BD	; 0x8023bd <jstk_testMode>
     5a8:	94 fd       	sbrc	r25, 4
     5aa:	07 c0       	rjmp	.+14     	; 0x5ba <joystick+0x24>
        if (jstk_mask) {
     5ac:	88 23       	and	r24, r24
            led_allOff();
     5ae:	31 f0       	breq	.+12     	; 0x5bc <joystick+0x26>
     5b0:	9f d1       	rcall	.+830    	; 0x8f0 <led_allOff>
            led_on(jstk_mask);
     5b2:	80 91 bc 23 	lds	r24, 0x23BC	; 0x8023bc <jstk_mask>
     5b6:	a2 c1       	rjmp	.+836    	; 0x8fc <led_on>
        }
    } else {                                // normal mode
        // led_allOff();                       // for testing
        jstk_usbTask();                     // send to USB
     5b8:	08 95       	ret
     5ba:	ba cf       	rjmp	.-140    	; 0x530 <jstk_usbTask>
     5bc:	08 95       	ret

000005be <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     5be:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <kpd_keyPressed>
     5c2:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <kpd_currState>
     5c6:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <kpd_prevState>
     5ca:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <kpd_exitTestMode>
     5ce:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <kpd_rowVal>
     5d2:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <kpd_code>
     5d6:	ee ea       	ldi	r30, 0xAE	; 174
     5d8:	f1 e2       	ldi	r31, 0x21	; 33
     5da:	81 e6       	ldi	r24, 0x61	; 97
     5dc:	80 83       	st	Z, r24
     5de:	80 e6       	ldi	r24, 0x60	; 96
     5e0:	81 83       	std	Z+1, r24	; 0x01
     5e2:	12 82       	std	Z+2, r1	; 0x02
     5e4:	13 82       	std	Z+3, r1	; 0x03
     5e6:	8f e5       	ldi	r24, 0x5F	; 95
     5e8:	84 83       	std	Z+4, r24	; 0x04
     5ea:	8e e5       	ldi	r24, 0x5E	; 94
     5ec:	85 83       	std	Z+5, r24	; 0x05
     5ee:	16 82       	std	Z+6, r1	; 0x06
     5f0:	17 82       	std	Z+7, r1	; 0x07
     5f2:	8d e5       	ldi	r24, 0x5D	; 93
     5f4:	80 87       	std	Z+8, r24	; 0x08
     5f6:	11 86       	std	Z+9, r1	; 0x09
     5f8:	12 86       	std	Z+10, r1	; 0x0a
     5fa:	13 86       	std	Z+11, r1	; 0x0b
     5fc:	14 86       	std	Z+12, r1	; 0x0c
     5fe:	15 86       	std	Z+13, r1	; 0x0d
     600:	89 e5       	ldi	r24, 0x59	; 89
     602:	86 87       	std	Z+14, r24	; 0x0e
     604:	8b e5       	ldi	r24, 0x5B	; 91
     606:	87 87       	std	Z+15, r24	; 0x0f
     608:	10 8a       	std	Z+16, r1	; 0x10
     60a:	11 8a       	std	Z+17, r1	; 0x11
     60c:	8a e5       	ldi	r24, 0x5A	; 90
     60e:	82 8b       	std	Z+18, r24	; 0x12
     610:	8c e5       	ldi	r24, 0x5C	; 92
     612:	83 8b       	std	Z+19, r24	; 0x13
     614:	e9 ea       	ldi	r30, 0xA9	; 169
     616:	f1 e2       	ldi	r31, 0x21	; 33
     618:	8e e0       	ldi	r24, 0x0E	; 14
     61a:	80 83       	st	Z, r24
     61c:	8d e0       	ldi	r24, 0x0D	; 13
     61e:	81 83       	std	Z+1, r24	; 0x01
     620:	8b e0       	ldi	r24, 0x0B	; 11
     622:	82 83       	std	Z+2, r24	; 0x02
     624:	87 e0       	ldi	r24, 0x07	; 7
     626:	83 83       	std	Z+3, r24	; 0x03
     628:	8f ef       	ldi	r24, 0xFF	; 255
     62a:	84 83       	std	Z+4, r24	; 0x04
     62c:	08 95       	ret

0000062e <keypad_poll>:
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	90 91 9f 21 	lds	r25, 0x219F	; 0x80219f <prevRowMask.5325>
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	15 e0       	ldi	r17, 0x05	; 5
     640:	74 e0       	ldi	r23, 0x04	; 4
     642:	e0 ea       	ldi	r30, 0xA0	; 160
     644:	f6 e0       	ldi	r31, 0x06	; 6
     646:	a0 e2       	ldi	r26, 0x20	; 32
     648:	b6 e0       	ldi	r27, 0x06	; 6
     64a:	00 e8       	ldi	r16, 0x80	; 128
     64c:	62 2f       	mov	r22, r18
     64e:	e9 01       	movw	r28, r18
     650:	c7 55       	subi	r28, 0x57	; 87
     652:	de 4d       	sbci	r29, 0xDE	; 222
     654:	88 81       	ld	r24, Y
     656:	84 83       	std	Z+4, r24	; 0x04
     658:	24 30       	cpi	r18, 0x04	; 4
     65a:	21 f4       	brne	.+8      	; 0x664 <keypad_poll+0x36>
     65c:	16 96       	adiw	r26, 0x06	; 6
     65e:	0c 93       	st	X, r16
     660:	16 97       	sbiw	r26, 0x06	; 6
     662:	03 c0       	rjmp	.+6      	; 0x66a <keypad_poll+0x3c>
     664:	15 96       	adiw	r26, 0x05	; 5
     666:	0c 93       	st	X, r16
     668:	15 97       	sbiw	r26, 0x05	; 5
     66a:	80 85       	ldd	r24, Z+8	; 0x08
     66c:	80 95       	com	r24
     66e:	80 7f       	andi	r24, 0xF0	; 240
     670:	48 2f       	mov	r20, r24
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	ea 01       	movw	r28, r20
     676:	21 97       	sbiw	r28, 0x01	; 1
     678:	4c 23       	and	r20, r28
     67a:	5d 23       	and	r21, r29
     67c:	45 2b       	or	r20, r21
     67e:	41 f0       	breq	.+16     	; 0x690 <keypad_poll+0x62>
     680:	90 95       	com	r25
     682:	98 23       	and	r25, r24
     684:	09 f4       	brne	.+2      	; 0x688 <keypad_poll+0x5a>
     686:	98 2f       	mov	r25, r24
     688:	49 2f       	mov	r20, r25
     68a:	41 95       	neg	r20
     68c:	94 23       	and	r25, r20
     68e:	01 c0       	rjmp	.+2      	; 0x692 <keypad_poll+0x64>
     690:	98 2f       	mov	r25, r24
     692:	90 32       	cpi	r25, 0x20	; 32
     694:	51 f0       	breq	.+20     	; 0x6aa <keypad_poll+0x7c>
     696:	18 f4       	brcc	.+6      	; 0x69e <keypad_poll+0x70>
     698:	90 31       	cpi	r25, 0x10	; 16
     69a:	d9 f1       	breq	.+118    	; 0x712 <keypad_poll+0xe4>
     69c:	0a c0       	rjmp	.+20     	; 0x6b2 <keypad_poll+0x84>
     69e:	90 34       	cpi	r25, 0x40	; 64
     6a0:	d1 f1       	breq	.+116    	; 0x716 <keypad_poll+0xe8>
     6a2:	90 38       	cpi	r25, 0x80	; 128
     6a4:	31 f4       	brne	.+12     	; 0x6b2 <keypad_poll+0x84>
     6a6:	73 e0       	ldi	r23, 0x03	; 3
     6a8:	37 c0       	rjmp	.+110    	; 0x718 <keypad_poll+0xea>
     6aa:	99 23       	and	r25, r25
     6ac:	11 f0       	breq	.+4      	; 0x6b2 <keypad_poll+0x84>
     6ae:	16 2f       	mov	r17, r22
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	2f 5f       	subi	r18, 0xFF	; 255
     6b4:	3f 4f       	sbci	r19, 0xFF	; 255
     6b6:	98 2f       	mov	r25, r24
     6b8:	25 30       	cpi	r18, 0x05	; 5
     6ba:	31 05       	cpc	r19, r1
     6bc:	39 f6       	brne	.-114    	; 0x64c <keypad_poll+0x1e>
     6be:	80 93 9f 21 	sts	0x219F, r24	; 0x80219f <prevRowMask.5325>
     6c2:	80 e8       	ldi	r24, 0x80	; 128
     6c4:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     6c8:	74 30       	cpi	r23, 0x04	; 4
     6ca:	e0 f4       	brcc	.+56     	; 0x704 <keypad_poll+0xd6>
     6cc:	e1 2f       	mov	r30, r17
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	ee 0f       	add	r30, r30
     6d6:	ff 1f       	adc	r31, r31
     6d8:	e2 55       	subi	r30, 0x52	; 82
     6da:	fe 4d       	sbci	r31, 0xDE	; 222
     6dc:	e7 0f       	add	r30, r23
     6de:	f1 1d       	adc	r31, r1
     6e0:	80 81       	ld	r24, Z
     6e2:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <kpd_keyPressed>
     6e6:	91 11       	cpse	r25, r1
     6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <keypad_poll+0xc8>
     6ea:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <kpd_code>
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <kpd_keyPressed>
     6f4:	13 c0       	rjmp	.+38     	; 0x71c <keypad_poll+0xee>
     6f6:	90 91 a6 21 	lds	r25, 0x21A6	; 0x8021a6 <kpd_code>
     6fa:	89 17       	cp	r24, r25
     6fc:	79 f0       	breq	.+30     	; 0x71c <keypad_poll+0xee>
     6fe:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <kpd_code>
     702:	0c c0       	rjmp	.+24     	; 0x71c <keypad_poll+0xee>
     704:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <kpd_keyPressed>
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	41 f4       	brne	.+16     	; 0x71c <keypad_poll+0xee>
     70c:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <kpd_keyPressed>
     710:	05 c0       	rjmp	.+10     	; 0x71c <keypad_poll+0xee>
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	01 c0       	rjmp	.+2      	; 0x718 <keypad_poll+0xea>
     716:	72 e0       	ldi	r23, 0x02	; 2
     718:	16 2f       	mov	r17, r22
     71a:	cb cf       	rjmp	.-106    	; 0x6b2 <keypad_poll+0x84>
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	08 95       	ret

00000726 <keypad_getState>:
     726:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <kpd_keyPressed>
     72a:	08 95       	ret

0000072c <keypad_report>:

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     72c:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     730:	80 93 be 23 	sts	0x23BE, r24	; 0x8023be <kpd_testMode>
	}
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     734:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     738:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     73c:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_codeOut = keypad_getCode();    // current code to be outputed
     740:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <kpd_codeOut>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     744:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <kpd_testMode>
     748:	84 fd       	sbrc	r24, 4
     74a:	29 c0       	rjmp	.+82     	; 0x79e <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     74c:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_currState>
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	09 f0       	breq	.+2      	; 0x756 <keypad_report+0x2a>
     754:	54 c0       	rjmp	.+168    	; 0x7fe <keypad_report+0xd2>
     756:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <kpd_prevState>
     75a:	81 11       	cpse	r24, r1
     75c:	50 c0       	rjmp	.+160    	; 0x7fe <keypad_report+0xd2>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
     75e:	e0 91 a3 21 	lds	r30, 0x21A3	; 0x8021a3 <kpd_codeOut>
     762:	8e 2f       	mov	r24, r30
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	fc 01       	movw	r30, r24
     768:	e9 55       	subi	r30, 0x59	; 89
     76a:	f1 09       	sbc	r31, r1
     76c:	e9 30       	cpi	r30, 0x09	; 9
     76e:	f1 05       	cpc	r31, r1
     770:	90 f4       	brcc	.+36     	; 0x796 <keypad_report+0x6a>
     772:	88 27       	eor	r24, r24
     774:	e2 50       	subi	r30, 0x02	; 2
     776:	ff 4f       	sbci	r31, 0xFF	; 255
     778:	8f 4f       	sbci	r24, 0xFF	; 255
     77a:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     77e:	84 e0       	ldi	r24, 0x04	; 4
     780:	09 c0       	rjmp	.+18     	; 0x794 <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     782:	80 e1       	ldi	r24, 0x10	; 16
     784:	07 c0       	rjmp	.+14     	; 0x794 <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     786:	80 e2       	ldi	r24, 0x20	; 32
     788:	05 c0       	rjmp	.+10     	; 0x794 <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     78a:	80 e4       	ldi	r24, 0x40	; 64
     78c:	03 c0       	rjmp	.+6      	; 0x794 <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     78e:	80 e8       	ldi	r24, 0x80	; 128
     790:	01 c0       	rjmp	.+2      	; 0x794 <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     792:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     794:	bd d0       	rcall	.+378    	; 0x910 <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <kpd_exitTestMode>
     79c:	30 c0       	rjmp	.+96     	; 0x7fe <keypad_report+0xd2>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     79e:	90 91 a6 21 	lds	r25, 0x21A6	; 0x8021a6 <kpd_code>
	else // normal mode
	{
		static uint8_t kpd_prevCode = 0;
		uint8_t currCode = keypad_getCode();

		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     7a2:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_currState>
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	61 f4       	brne	.+24     	; 0x7c2 <keypad_report+0x96>
     7aa:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <kpd_prevState>
     7ae:	81 11       	cpse	r24, r1
     7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <keypad_report+0x96>
			kpd_prevCode = currCode;
     7b2:	90 93 9e 21 	sts	0x219E, r25	; 0x80219e <kpd_prevCode.5366>

			keyStatus2Report = KEYPAD_PRESSED;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <keyStatus2Report>
			key2Report = currCode;
     7bc:	90 93 a0 21 	sts	0x21A0, r25	; 0x8021a0 <key2Report>
     7c0:	1e c0       	rjmp	.+60     	; 0x7fe <keypad_report+0xd2>
		} else if (kpd_currState == KEYPAD_PRESSED &&
     7c2:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_currState>
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	61 f4       	brne	.+24     	; 0x7e2 <keypad_report+0xb6>
     7ca:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_prevCode.5366>
     7ce:	98 17       	cp	r25, r24
     7d0:	41 f0       	breq	.+16     	; 0x7e2 <keypad_report+0xb6>
			       currCode != kpd_prevCode) {
			kpd_prevCode = currCode;
     7d2:	90 93 9e 21 	sts	0x219E, r25	; 0x80219e <kpd_prevCode.5366>
			
			keyStatus2Report = KEYPAD_PRESSED;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <keyStatus2Report>
			key2Report = currCode;
     7dc:	90 93 a0 21 	sts	0x21A0, r25	; 0x8021a0 <key2Report>
     7e0:	0e c0       	rjmp	.+28     	; 0x7fe <keypad_report+0xd2>
		} else if (kpd_currState == KEYPAD_RELEASED &&
     7e2:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_currState>
     7e6:	81 11       	cpse	r24, r1
     7e8:	0a c0       	rjmp	.+20     	; 0x7fe <keypad_report+0xd2>
			       kpd_prevState == KEYPAD_PRESSED) {
     7ea:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <kpd_prevState>
			       currCode != kpd_prevCode) {
			kpd_prevCode = currCode;
			
			keyStatus2Report = KEYPAD_PRESSED;
			key2Report = currCode;
		} else if (kpd_currState == KEYPAD_RELEASED &&
     7ee:	81 30       	cpi	r24, 0x01	; 1
     7f0:	31 f4       	brne	.+12     	; 0x7fe <keypad_report+0xd2>
			       kpd_prevState == KEYPAD_PRESSED) {
			keyStatus2Report = KEYPAD_RELEASED;
     7f2:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <keyStatus2Report>
			key2Report = kpd_prevCode;
     7f6:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_prevCode.5366>
     7fa:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <key2Report>
		}
	}
	
	// clears LEDs when exiting test mode
	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     7fe:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <kpd_testMode>
     802:	84 ff       	sbrs	r24, 4
     804:	07 c0       	rjmp	.+14     	; 0x814 <keypad_report+0xe8>
     806:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <kpd_exitTestMode>
     80a:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     80c:	19 f4       	brne	.+6      	; 0x814 <keypad_report+0xe8>
     80e:	70 d0       	rcall	.+224    	; 0x8f0 <led_allOff>
		kpd_exitTestMode = 0;
     810:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <kpd_exitTestMode>
	}
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
     814:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_currState>
     818:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <kpd_prevState>
}
     81c:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	b9 cf       	rjmp	.-142    	; 0x794 <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	b7 cf       	rjmp	.-146    	; 0x794 <keypad_report+0x68>

00000826 <keypad>:
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
}


void keypad(void) {
     826:	cf 93       	push	r28
	keypad_poll();
     828:	02 df       	rcall	.-508    	; 0x62e <keypad_poll>
	keypad_report();
     82a:	80 df       	rcall	.-256    	; 0x72c <keypad_report>
     82c:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <keyStatus2Report>

	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = keyStatus2Report;
     830:	c1 e0       	ldi	r28, 0x01	; 1
     832:	81 11       	cpse	r24, r1
     834:	01 c0       	rjmp	.+2      	; 0x838 <keypad+0x12>
     836:	c0 e0       	ldi	r28, 0x00	; 0
     838:	88 23       	and	r24, r24
	uint8_t key_val = key2Report;

	if (key_down) {
     83a:	81 f0       	breq	.+32     	; 0x85c <keypad+0x36>
     83c:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <key2Report>

	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = keyStatus2Report;
	uint8_t key_val = key2Report;
     840:	90 91 9d 21 	lds	r25, 0x219D	; 0x80219d <key_was_down.5371>

	if (key_down) {
		if (!key_was_down)
     844:	91 11       	cpse	r25, r1
     846:	03 c0       	rjmp	.+6      	; 0x84e <keypad+0x28>
     848:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <active_key.5372>
			active_key = key_val;
     84c:	15 c0       	rjmp	.+42     	; 0x878 <keypad+0x52>
     84e:	90 91 9c 21 	lds	r25, 0x219C	; 0x80219c <active_key.5372>
		else if (key_val != active_key)
     852:	89 17       	cp	r24, r25
     854:	89 f0       	breq	.+34     	; 0x878 <keypad+0x52>
     856:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <active_key.5372>
			active_key = key_val;
     85a:	0e c0       	rjmp	.+28     	; 0x878 <keypad+0x52>
     85c:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <key_was_down.5371>
	} else if (key_was_down) {
     860:	88 23       	and	r24, r24
     862:	51 f0       	breq	.+20     	; 0x878 <keypad+0x52>
     864:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <active_key.5372>
		if (active_key) {
     868:	88 23       	and	r24, r24
     86a:	21 f0       	breq	.+8      	; 0x874 <keypad+0x4e>
			udi_hid_kbd_down(active_key);
     86c:	f1 d4       	rcall	.+2530   	; 0x1250 <udi_hid_kbd_down>
			udi_hid_kbd_up(active_key);
     86e:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <active_key.5372>
     872:	b2 d4       	rcall	.+2404   	; 0x11d8 <udi_hid_kbd_up>
     874:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <active_key.5372>
		}
		active_key = 0;
     878:	c0 93 9d 21 	sts	0x219D, r28	; 0x80219d <key_was_down.5371>
	}
	key_was_down = key_down;
     87c:	cf 91       	pop	r28
     87e:	08 95       	ret

00000880 <led_updateState>:
     880:	e3 ec       	ldi	r30, 0xC3	; 195
void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     882:	f1 e2       	ldi	r31, 0x21	; 33
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	ac 01       	movw	r20, r24
     88c:	02 2e       	mov	r0, r18
     88e:	02 c0       	rjmp	.+4      	; 0x894 <led_updateState+0x14>
     890:	55 95       	asr	r21
     892:	47 95       	ror	r20
     894:	0a 94       	dec	r0
     896:	e2 f7       	brpl	.-8      	; 0x890 <led_updateState+0x10>
     898:	40 fd       	sbrc	r20, 0
     89a:	60 83       	st	Z, r22
     89c:	2f 5f       	subi	r18, 0xFF	; 255
     89e:	3f 4f       	sbci	r19, 0xFF	; 255
     8a0:	31 96       	adiw	r30, 0x01	; 1
     8a2:	28 30       	cpi	r18, 0x08	; 8
     8a4:	31 05       	cpc	r19, r1
     8a6:	89 f7       	brne	.-30     	; 0x88a <led_updateState+0xa>
     8a8:	08 95       	ret

000008aa <userActivity>:
     8aa:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     8ae:	80 93 cb 21 	sts	0x21CB, r24	; 0x8021cb <testMode>
     8b2:	bd de       	rcall	.-646    	; 0x62e <keypad_poll>
     8b4:	80 91 cb 21 	lds	r24, 0x21CB	; 0x8021cb <testMode>
     8b8:	84 ff       	sbrs	r24, 4
     8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <userActivity+0x26>
     8bc:	34 df       	rcall	.-408    	; 0x726 <keypad_getState>
     8be:	81 30       	cpi	r24, 0x01	; 1
     8c0:	49 f0       	breq	.+18     	; 0x8d4 <userActivity+0x2a>
     8c2:	13 de       	rcall	.-986    	; 0x4ea <jstk_readMask>
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	81 11       	cpse	r24, r1
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <userActivity+0x22>
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	89 2f       	mov	r24, r25
     8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <userActivity+0x2c>
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <userActivity+0x2c>
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	81 70       	andi	r24, 0x01	; 1
     8d8:	08 95       	ret

000008da <led_init>:
     8da:	e0 e0       	ldi	r30, 0x00	; 0
     8dc:	f6 e0       	ldi	r31, 0x06	; 6
     8de:	8f ef       	ldi	r24, 0xFF	; 255
     8e0:	81 83       	std	Z+1, r24	; 0x01
     8e2:	85 83       	std	Z+5, r24	; 0x05
     8e4:	e0 e2       	ldi	r30, 0x20	; 32
     8e6:	f6 e0       	ldi	r31, 0x06	; 6
     8e8:	80 e4       	ldi	r24, 0x40	; 64
     8ea:	81 83       	std	Z+1, r24	; 0x01
     8ec:	86 83       	std	Z+6, r24	; 0x06
     8ee:	08 95       	ret

000008f0 <led_allOff>:
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	c3 cf       	rjmp	.-122    	; 0x880 <led_updateState>
     8fa:	08 95       	ret

000008fc <led_on>:
     8fc:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	be cf       	rjmp	.-132    	; 0x880 <led_updateState>
     904:	08 95       	ret

00000906 <led_off>:
     906:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	b9 cf       	rjmp	.-142    	; 0x880 <led_updateState>
     90e:	08 95       	ret

00000910 <led_toggle>:
     910:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     914:	e3 ec       	ldi	r30, 0xC3	; 195
     916:	f1 e2       	ldi	r31, 0x21	; 33
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	68 2f       	mov	r22, r24
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	ab 01       	movw	r20, r22
     924:	02 2e       	mov	r0, r18
     926:	02 c0       	rjmp	.+4      	; 0x92c <led_toggle+0x1c>
     928:	55 95       	asr	r21
     92a:	47 95       	ror	r20
     92c:	0a 94       	dec	r0
     92e:	e2 f7       	brpl	.-8      	; 0x928 <led_toggle+0x18>
     930:	40 ff       	sbrs	r20, 0
     932:	03 c0       	rjmp	.+6      	; 0x93a <led_toggle+0x2a>
     934:	90 81       	ld	r25, Z
     936:	98 27       	eor	r25, r24
     938:	90 83       	st	Z, r25
     93a:	2f 5f       	subi	r18, 0xFF	; 255
     93c:	3f 4f       	sbci	r19, 0xFF	; 255
     93e:	31 96       	adiw	r30, 0x01	; 1
     940:	28 30       	cpi	r18, 0x08	; 8
     942:	31 05       	cpc	r19, r1
     944:	71 f7       	brne	.-36     	; 0x922 <led_toggle+0x12>
     946:	08 95       	ret

00000948 <led_setState>:
     948:	e0 e0       	ldi	r30, 0x00	; 0
     94a:	f6 e0       	ldi	r31, 0x06	; 6
     94c:	9f ef       	ldi	r25, 0xFF	; 255
     94e:	95 83       	std	Z+5, r25	; 0x05
     950:	86 83       	std	Z+6, r24	; 0x06
     952:	e3 ec       	ldi	r30, 0xC3	; 195
     954:	f1 e2       	ldi	r31, 0x21	; 33
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	ac 01       	movw	r20, r24
     95e:	02 2e       	mov	r0, r18
     960:	02 c0       	rjmp	.+4      	; 0x966 <led_setState+0x1e>
     962:	55 95       	asr	r21
     964:	47 95       	ror	r20
     966:	0a 94       	dec	r0
     968:	e2 f7       	brpl	.-8      	; 0x962 <led_setState+0x1a>
     96a:	41 70       	andi	r20, 0x01	; 1
     96c:	41 93       	st	Z+, r20
     96e:	2f 5f       	subi	r18, 0xFF	; 255
     970:	3f 4f       	sbci	r19, 0xFF	; 255
     972:	28 30       	cpi	r18, 0x08	; 8
     974:	31 05       	cpc	r19, r1
     976:	91 f7       	brne	.-28     	; 0x95c <led_setState+0x14>
     978:	08 95       	ret

0000097a <testIndicator>:
}

void testIndicator(void) { // blink status LED when in test mode
    sof_ms++;
     97a:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <sof_ms>
     97e:	90 91 cd 21 	lds	r25, 0x21CD	; 0x8021cd <sof_ms+0x1>
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	80 93 cc 21 	sts	0x21CC, r24	; 0x8021cc <sof_ms>
     988:	90 93 cd 21 	sts	0x21CD, r25	; 0x8021cd <sof_ms+0x1>

    if ((PORTB.IN & PIN4_bm) == 0) {
     98c:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     990:	84 fd       	sbrc	r24, 4
     992:	0f c0       	rjmp	.+30     	; 0x9b2 <testIndicator+0x38>
        if (sof_ms >= 500) {
     994:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <sof_ms>
     998:	90 91 cd 21 	lds	r25, 0x21CD	; 0x8021cd <sof_ms+0x1>
     99c:	84 3f       	cpi	r24, 0xF4	; 244
     99e:	91 40       	sbci	r25, 0x01	; 1
     9a0:	78 f0       	brcs	.+30     	; 0x9c0 <testIndicator+0x46>
void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     9a2:	80 e4       	ldi	r24, 0x40	; 64
     9a4:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>
    sof_ms++;

    if ((PORTB.IN & PIN4_bm) == 0) {
        if (sof_ms >= 500) {
            led_statusToggle();
            sof_ms = 0;
     9a8:	10 92 cc 21 	sts	0x21CC, r1	; 0x8021cc <sof_ms>
     9ac:	10 92 cd 21 	sts	0x21CD, r1	; 0x8021cd <sof_ms+0x1>
     9b0:	08 95       	ret
//     return false;
// }

/* ----------------------------- Status LED ----------------------------- */
void led_statusOn(void) { // status LED on
    STATUS_LED_PORT.OUTCLR = LEDS_PIN;
     9b2:	80 e4       	ldi	r24, 0x40	; 64
     9b4:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
            led_statusToggle();
            sof_ms = 0;
        }
    } else {
        led_statusOn();
        sof_ms = 0;
     9b8:	10 92 cc 21 	sts	0x21CC, r1	; 0x8021cc <sof_ms>
     9bc:	10 92 cd 21 	sts	0x21CD, r1	; 0x8021cd <sof_ms+0x1>
     9c0:	08 95       	ret

000009c2 <startupSequence>:
            (keypad_getState()   == KEYPAD_PRESSED) ||
            (jstk_readMask()     != 0);
}

void startupSequence(uint8_t sequence) // startup LED animation
{
     9c2:	6f 92       	push	r6
     9c4:	7f 92       	push	r7
     9c6:	8f 92       	push	r8
     9c8:	9f 92       	push	r9
     9ca:	af 92       	push	r10
     9cc:	bf 92       	push	r11
     9ce:	cf 92       	push	r12
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	28 97       	sbiw	r28, 0x08	; 8
     9e4:	cd bf       	out	0x3d, r28	; 61
     9e6:	de bf       	out	0x3e, r29	; 62
    const uint8_t seq[8] = {
     9e8:	98 e0       	ldi	r25, 0x08	; 8
     9ea:	e2 e8       	ldi	r30, 0x82	; 130
     9ec:	f1 e2       	ldi	r31, 0x21	; 33
     9ee:	de 01       	movw	r26, r28
     9f0:	11 96       	adiw	r26, 0x01	; 1
     9f2:	01 90       	ld	r0, Z+
     9f4:	0d 92       	st	X+, r0
     9f6:	9a 95       	dec	r25
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <startupSequence+0x30>
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
     9fa:	83 30       	cpi	r24, 0x03	; 3
     9fc:	09 f4       	brne	.+2      	; 0xa00 <startupSequence+0x3e>
     9fe:	0c c1       	rjmp	.+536    	; 0xc18 <startupSequence+0x256>
     a00:	38 f4       	brcc	.+14     	; 0xa10 <startupSequence+0x4e>
     a02:	81 30       	cpi	r24, 0x01	; 1
     a04:	09 f4       	brne	.+2      	; 0xa08 <startupSequence+0x46>
     a06:	42 c0       	rjmp	.+132    	; 0xa8c <startupSequence+0xca>
     a08:	82 30       	cpi	r24, 0x02	; 2
     a0a:	09 f4       	brne	.+2      	; 0xa0e <startupSequence+0x4c>
     a0c:	a5 c0       	rjmp	.+330    	; 0xb58 <startupSequence+0x196>
     a0e:	31 c2       	rjmp	.+1122   	; 0xe72 <startupSequence+0x4b0>
     a10:	84 30       	cpi	r24, 0x04	; 4
     a12:	09 f4       	brne	.+2      	; 0xa16 <startupSequence+0x54>
     a14:	61 c1       	rjmp	.+706    	; 0xcd8 <startupSequence+0x316>
     a16:	85 30       	cpi	r24, 0x05	; 5
     a18:	09 f4       	brne	.+2      	; 0xa1c <startupSequence+0x5a>
     a1a:	ba c1       	rjmp	.+884    	; 0xd90 <startupSequence+0x3ce>
     a1c:	2a c2       	rjmp	.+1108   	; 0xe72 <startupSequence+0x4b0>
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     a1e:	f8 01       	movw	r30, r16
     a20:	f1 90       	ld	r15, Z+
     a22:	8f 01       	movw	r16, r30
     a24:	8f 2d       	mov	r24, r15
     a26:	6a df       	rcall	.-300    	; 0x8fc <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a28:	ff e0       	ldi	r31, 0x0F	; 15
     a2a:	28 e9       	ldi	r18, 0x98	; 152
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	f1 50       	subi	r31, 0x01	; 1
     a30:	20 40       	sbci	r18, 0x00	; 0
     a32:	80 40       	sbci	r24, 0x00	; 0
     a34:	e1 f7       	brne	.-8      	; 0xa2e <startupSequence+0x6c>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <startupSequence+0x76>
     a38:	00 00       	nop
                    _delay_ms(850);
                    led_off(seq[i]);
     a3a:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     a3c:	64 df       	rcall	.-312    	; 0x906 <led_off>
     a3e:	35 df       	rcall	.-406    	; 0x8aa <userActivity>
     a40:	80 93 c2 21 	sts	0x21C2, r24	; 0x8021c2 <user_active.5518>

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
     a44:	a0 16       	cp	r10, r16
     a46:	b1 06       	cpc	r11, r17
     a48:	09 f4       	brne	.+2      	; 0xa4c <startupSequence+0x8a>
     a4a:	b9 c1       	rjmp	.+882    	; 0xdbe <startupSequence+0x3fc>
     a4c:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     a50:	88 23       	and	r24, r24
     a52:	29 f3       	breq	.-54     	; 0xa1e <startupSequence+0x5c>
     a54:	b4 c1       	rjmp	.+872    	; 0xdbe <startupSequence+0x3fc>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     a56:	f8 01       	movw	r30, r16
     a58:	f2 90       	ld	r15, -Z
     a5a:	8f 01       	movw	r16, r30
     a5c:	8f 2d       	mov	r24, r15
     a5e:	4e df       	rcall	.-356    	; 0x8fc <led_on>
     a60:	ff e0       	ldi	r31, 0x0F	; 15
     a62:	28 e9       	ldi	r18, 0x98	; 152
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	f1 50       	subi	r31, 0x01	; 1
     a68:	20 40       	sbci	r18, 0x00	; 0
     a6a:	80 40       	sbci	r24, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <startupSequence+0xa4>
                    _delay_ms(850);
                    led_off(seq[i]);
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <startupSequence+0xae>
     a70:	00 00       	nop
     a72:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     a74:	48 df       	rcall	.-368    	; 0x906 <led_off>
     a76:	19 df       	rcall	.-462    	; 0x8aa <userActivity>
     a78:	80 93 c2 21 	sts	0x21C2, r24	; 0x8021c2 <user_active.5518>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     a7c:	0c 15       	cp	r16, r12
     a7e:	1d 05       	cpc	r17, r13
     a80:	61 f0       	breq	.+24     	; 0xa9a <startupSequence+0xd8>
     a82:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     a86:	88 23       	and	r24, r24
     a88:	31 f3       	breq	.-52     	; 0xa56 <startupSequence+0x94>
     a8a:	07 c0       	rjmp	.+14     	; 0xa9a <startupSequence+0xd8>
     a8c:	5e 01       	movw	r10, r28
     a8e:	99 e0       	ldi	r25, 0x09	; 9
     a90:	a9 0e       	add	r10, r25
     a92:	b1 1c       	adc	r11, r1
     a94:	fe 01       	movw	r30, r28
     a96:	31 96       	adiw	r30, 0x01	; 1
     a98:	6f 01       	movw	r12, r30
    static volatile bool user_active = false;

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
     a9a:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     a9e:	81 11       	cpse	r24, r1
     aa0:	06 c0       	rjmp	.+12     	; 0xaae <startupSequence+0xec>
                for (int i = 0; i < 8 && !user_active; i++) {
     aa2:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     aa6:	88 23       	and	r24, r24
     aa8:	09 f4       	brne	.+2      	; 0xaac <startupSequence+0xea>
     aaa:	ce c1       	rjmp	.+924    	; 0xe48 <startupSequence+0x486>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
            }
            led_allOff();
     aac:	88 c1       	rjmp	.+784    	; 0xdbe <startupSequence+0x3fc>
            break;
     aae:	20 df       	rcall	.-448    	; 0x8f0 <led_allOff>
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     ab0:	e0 c1       	rjmp	.+960    	; 0xe72 <startupSequence+0x4b0>
     ab2:	f8 01       	movw	r30, r16
     ab4:	72 90       	ld	r7, -Z
     ab6:	8f 01       	movw	r16, r30
     ab8:	87 2d       	mov	r24, r7
                    led_on(seq[right]);
     aba:	20 df       	rcall	.-448    	; 0x8fc <led_on>
     abc:	f6 01       	movw	r30, r12
     abe:	f1 90       	ld	r15, Z+
     ac0:	6f 01       	movw	r12, r30
     ac2:	8f 2d       	mov	r24, r15
     ac4:	1b df       	rcall	.-458    	; 0x8fc <led_on>
     ac6:	ff e1       	ldi	r31, 0x1F	; 31
     ac8:	2f eb       	ldi	r18, 0xBF	; 191
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	f1 50       	subi	r31, 0x01	; 1
     ace:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     ad0:	80 40       	sbci	r24, 0x00	; 0
     ad2:	e1 f7       	brne	.-8      	; 0xacc <startupSequence+0x10a>
                    led_off(seq[right]);
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <startupSequence+0x114>
     ad6:	00 00       	nop
     ad8:	87 2d       	mov	r24, r7

                    keypad_poll();
     ada:	15 df       	rcall	.-470    	; 0x906 <led_off>
     adc:	8f 2d       	mov	r24, r15
                    if (keypad_getState() == KEYPAD_PRESSED)
     ade:	13 df       	rcall	.-474    	; 0x906 <led_off>
     ae0:	a6 dd       	rcall	.-1204   	; 0x62e <keypad_poll>
     ae2:	21 de       	rcall	.-958    	; 0x726 <keypad_getState>
     ae4:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     ae6:	11 f4       	brne	.+4      	; 0xaec <startupSequence+0x12a>
     ae8:	e0 92 c2 21 	sts	0x21C2, r14	; 0x8021c2 <user_active.5518>
                    if (jstk_readMask() != 0)
     aec:	fe dc       	rcall	.-1540   	; 0x4ea <jstk_readMask>
     aee:	81 11       	cpse	r24, r1
                        user_active = true;
     af0:	e0 92 c2 21 	sts	0x21C2, r14	; 0x8021c2 <user_active.5518>
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     af4:	08 15       	cp	r16, r8
     af6:	19 05       	cpc	r17, r9
     af8:	09 f4       	brne	.+2      	; 0xafc <startupSequence+0x13a>
     afa:	66 c1       	rjmp	.+716    	; 0xdc8 <startupSequence+0x406>
     afc:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     b00:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     b02:	b9 f2       	breq	.-82     	; 0xab2 <startupSequence+0xf0>
     b04:	61 c1       	rjmp	.+706    	; 0xdc8 <startupSequence+0x406>
     b06:	f3 01       	movw	r30, r6
     b08:	d1 90       	ld	r13, Z+
     b0a:	3f 01       	movw	r6, r30
     b0c:	8d 2d       	mov	r24, r13
                    led_on(seq[right]);
     b0e:	f6 de       	rcall	.-532    	; 0x8fc <led_on>
     b10:	f8 01       	movw	r30, r16
     b12:	f2 90       	ld	r15, -Z
     b14:	8f 01       	movw	r16, r30
     b16:	8f 2d       	mov	r24, r15
     b18:	f1 de       	rcall	.-542    	; 0x8fc <led_on>
     b1a:	ff e1       	ldi	r31, 0x1F	; 31
     b1c:	2f eb       	ldi	r18, 0xBF	; 191
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	f1 50       	subi	r31, 0x01	; 1
     b22:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     b24:	80 40       	sbci	r24, 0x00	; 0
     b26:	e1 f7       	brne	.-8      	; 0xb20 <startupSequence+0x15e>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <startupSequence+0x168>
                    led_off(seq[right]);
     b2a:	00 00       	nop
     b2c:	8d 2d       	mov	r24, r13
     b2e:	eb de       	rcall	.-554    	; 0x906 <led_off>

                    keypad_poll();
     b30:	8f 2d       	mov	r24, r15
     b32:	e9 de       	rcall	.-558    	; 0x906 <led_off>
                    if (keypad_getState() == KEYPAD_PRESSED)
     b34:	7c dd       	rcall	.-1288   	; 0x62e <keypad_poll>
     b36:	f7 dd       	rcall	.-1042   	; 0x726 <keypad_getState>
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <startupSequence+0x17e>
                        user_active = true;
     b3c:	e0 92 c2 21 	sts	0x21C2, r14	; 0x8021c2 <user_active.5518>
                    if (jstk_readMask() != 0)
     b40:	d4 dc       	rcall	.-1624   	; 0x4ea <jstk_readMask>
     b42:	81 11       	cpse	r24, r1
     b44:	e0 92 c2 21 	sts	0x21C2, r14	; 0x8021c2 <user_active.5518>
                        user_active = true;
     b48:	0a 15       	cp	r16, r10
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     b4a:	1b 05       	cpc	r17, r11
     b4c:	71 f0       	breq	.+28     	; 0xb6a <startupSequence+0x1a8>
     b4e:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     b52:	88 23       	and	r24, r24
     b54:	c1 f2       	breq	.-80     	; 0xb06 <startupSequence+0x144>
     b56:	09 c0       	rjmp	.+18     	; 0xb6a <startupSequence+0x1a8>
     b58:	fe 01       	movw	r30, r28
     b5a:	31 96       	adiw	r30, 0x01	; 1
     b5c:	4f 01       	movw	r8, r30

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     b5e:	ee 24       	eor	r14, r14
     b60:	e3 94       	inc	r14
     b62:	5e 01       	movw	r10, r28
     b64:	f5 e0       	ldi	r31, 0x05	; 5
     b66:	af 0e       	add	r10, r31
            }
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
     b68:	b1 1c       	adc	r11, r1
     b6a:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
                for (int i = 0; i < 4 && !user_active; i++) {
     b6e:	81 11       	cpse	r24, r1
     b70:	0a c0       	rjmp	.+20     	; 0xb86 <startupSequence+0x1c4>
     b72:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     b76:	81 11       	cpse	r24, r1
     b78:	27 c1       	rjmp	.+590    	; 0xdc8 <startupSequence+0x406>
     b7a:	6e 01       	movw	r12, r28
     b7c:	25 e0       	ldi	r18, 0x05	; 5
     b7e:	c2 0e       	add	r12, r18
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     b80:	d1 1c       	adc	r13, r1
     b82:	86 01       	movw	r16, r12
            break;
     b84:	96 cf       	rjmp	.-212    	; 0xab2 <startupSequence+0xf0>
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     b86:	b4 de       	rcall	.-664    	; 0x8f0 <led_allOff>
     b88:	74 c1       	rjmp	.+744    	; 0xe72 <startupSequence+0x4b0>
     b8a:	f8 01       	movw	r30, r16
     b8c:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     b8e:	8f 01       	movw	r16, r30
     b90:	b5 de       	rcall	.-662    	; 0x8fc <led_on>
     b92:	f7 01       	movw	r30, r14
     b94:	81 91       	ld	r24, Z+
     b96:	7f 01       	movw	r14, r30
     b98:	b1 de       	rcall	.-670    	; 0x8fc <led_on>
     b9a:	ff e2       	ldi	r31, 0x2F	; 47
     b9c:	27 e5       	ldi	r18, 0x57	; 87
     b9e:	85 e0       	ldi	r24, 0x05	; 5
     ba0:	f1 50       	subi	r31, 0x01	; 1
     ba2:	20 40       	sbci	r18, 0x00	; 0
     ba4:	80 40       	sbci	r24, 0x00	; 0
     ba6:	e1 f7       	brne	.-8      	; 0xba0 <startupSequence+0x1de>
                    _delay_ms(1750);

                    keypad_poll();
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <startupSequence+0x1e8>
     baa:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     bac:	40 dd       	rcall	.-1408   	; 0x62e <keypad_poll>
     bae:	bb dd       	rcall	.-1162   	; 0x726 <keypad_getState>
     bb0:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     bb2:	11 f4       	brne	.+4      	; 0xbb8 <startupSequence+0x1f6>
     bb4:	90 92 c2 21 	sts	0x21C2, r9	; 0x8021c2 <user_active.5518>
                    if (jstk_readMask() != 0)
     bb8:	98 dc       	rcall	.-1744   	; 0x4ea <jstk_readMask>
     bba:	81 11       	cpse	r24, r1
                        user_active = true;
     bbc:	90 92 c2 21 	sts	0x21C2, r9	; 0x8021c2 <user_active.5518>
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     bc0:	a0 16       	cp	r10, r16
     bc2:	b1 06       	cpc	r11, r17
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <startupSequence+0x206>
     bc6:	0b c1       	rjmp	.+534    	; 0xdde <startupSequence+0x41c>
     bc8:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     bcc:	88 23       	and	r24, r24
     bce:	e9 f2       	breq	.-70     	; 0xb8a <startupSequence+0x1c8>
     bd0:	06 c1       	rjmp	.+524    	; 0xdde <startupSequence+0x41c>
     bd2:	f7 01       	movw	r30, r14
     bd4:	81 91       	ld	r24, Z+
                    led_off(seq[right]);
     bd6:	7f 01       	movw	r14, r30
     bd8:	96 de       	rcall	.-724    	; 0x906 <led_off>
     bda:	f8 01       	movw	r30, r16
     bdc:	82 91       	ld	r24, -Z
     bde:	8f 01       	movw	r16, r30
     be0:	92 de       	rcall	.-732    	; 0x906 <led_off>
     be2:	ff e2       	ldi	r31, 0x2F	; 47
     be4:	27 e5       	ldi	r18, 0x57	; 87
     be6:	85 e0       	ldi	r24, 0x05	; 5
     be8:	f1 50       	subi	r31, 0x01	; 1
     bea:	20 40       	sbci	r18, 0x00	; 0
     bec:	80 40       	sbci	r24, 0x00	; 0
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <startupSequence+0x226>
     bf0:	00 c0       	rjmp	.+0      	; 0xbf2 <startupSequence+0x230>
                    _delay_ms(1750);

                    keypad_poll();
     bf2:	00 00       	nop
     bf4:	1c dd       	rcall	.-1480   	; 0x62e <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     bf6:	97 dd       	rcall	.-1234   	; 0x726 <keypad_getState>
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	11 f4       	brne	.+4      	; 0xc00 <startupSequence+0x23e>
     bfc:	90 92 c2 21 	sts	0x21C2, r9	; 0x8021c2 <user_active.5518>
                        user_active = true;
     c00:	74 dc       	rcall	.-1816   	; 0x4ea <jstk_readMask>
                    if (jstk_readMask() != 0)
     c02:	81 11       	cpse	r24, r1
     c04:	90 92 c2 21 	sts	0x21C2, r9	; 0x8021c2 <user_active.5518>
                        user_active = true;
     c08:	c0 16       	cp	r12, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     c0a:	d1 06       	cpc	r13, r17
     c0c:	71 f0       	breq	.+28     	; 0xc2a <startupSequence+0x268>
     c0e:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     c12:	88 23       	and	r24, r24
     c14:	f1 f2       	breq	.-68     	; 0xbd2 <startupSequence+0x210>
     c16:	09 c0       	rjmp	.+18     	; 0xc2a <startupSequence+0x268>
     c18:	fe 01       	movw	r30, r28
     c1a:	31 96       	adiw	r30, 0x01	; 1

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     c1c:	5f 01       	movw	r10, r30
     c1e:	99 24       	eor	r9, r9
     c20:	93 94       	inc	r9
     c22:	6e 01       	movw	r12, r28
     c24:	f5 e0       	ldi	r31, 0x05	; 5
     c26:	cf 0e       	add	r12, r31
            }
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
     c28:	d1 1c       	adc	r13, r1
     c2a:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
                for (int i = 0; i < 4 && !user_active; i++) {
     c2e:	81 11       	cpse	r24, r1
     c30:	0a c0       	rjmp	.+20     	; 0xc46 <startupSequence+0x284>
     c32:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     c36:	81 11       	cpse	r24, r1
     c38:	d2 c0       	rjmp	.+420    	; 0xdde <startupSequence+0x41c>
     c3a:	7e 01       	movw	r14, r28
     c3c:	25 e0       	ldi	r18, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     c3e:	e2 0e       	add	r14, r18
     c40:	f1 1c       	adc	r15, r1
            break;
     c42:	87 01       	movw	r16, r14
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     c44:	a2 cf       	rjmp	.-188    	; 0xb8a <startupSequence+0x1c8>
     c46:	54 de       	rcall	.-856    	; 0x8f0 <led_allOff>
     c48:	14 c1       	rjmp	.+552    	; 0xe72 <startupSequence+0x4b0>
     c4a:	f8 01       	movw	r30, r16
     c4c:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     c4e:	8f 01       	movw	r16, r30
     c50:	55 de       	rcall	.-854    	; 0x8fc <led_on>
     c52:	f7 01       	movw	r30, r14
     c54:	81 91       	ld	r24, Z+
     c56:	7f 01       	movw	r14, r30
     c58:	51 de       	rcall	.-862    	; 0x8fc <led_on>
     c5a:	ff e2       	ldi	r31, 0x2F	; 47
     c5c:	27 e5       	ldi	r18, 0x57	; 87
     c5e:	85 e0       	ldi	r24, 0x05	; 5
     c60:	f1 50       	subi	r31, 0x01	; 1
     c62:	20 40       	sbci	r18, 0x00	; 0
     c64:	80 40       	sbci	r24, 0x00	; 0
                    _delay_ms(1750);

                    keypad_poll();
     c66:	e1 f7       	brne	.-8      	; 0xc60 <startupSequence+0x29e>
                    if (keypad_getState() == KEYPAD_PRESSED)
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <startupSequence+0x2a8>
     c6a:	00 00       	nop
     c6c:	e0 dc       	rcall	.-1600   	; 0x62e <keypad_poll>
                        user_active = true;
     c6e:	5b dd       	rcall	.-1354   	; 0x726 <keypad_getState>
                    if (jstk_readMask() != 0)
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	11 f4       	brne	.+4      	; 0xc78 <startupSequence+0x2b6>
     c74:	b0 92 c2 21 	sts	0x21C2, r11	; 0x8021c2 <user_active.5518>
                        user_active = true;
     c78:	38 dc       	rcall	.-1936   	; 0x4ea <jstk_readMask>
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     c7a:	81 11       	cpse	r24, r1
     c7c:	b0 92 c2 21 	sts	0x21C2, r11	; 0x8021c2 <user_active.5518>
     c80:	0c 15       	cp	r16, r12
     c82:	1d 05       	cpc	r17, r13
     c84:	09 f4       	brne	.+2      	; 0xc88 <startupSequence+0x2c6>
     c86:	b6 c0       	rjmp	.+364    	; 0xdf4 <startupSequence+0x432>
     c88:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     c8c:	88 23       	and	r24, r24
     c8e:	e9 f2       	breq	.-70     	; 0xc4a <startupSequence+0x288>
     c90:	b1 c0       	rjmp	.+354    	; 0xdf4 <startupSequence+0x432>
     c92:	f8 01       	movw	r30, r16
     c94:	82 91       	ld	r24, -Z
                    led_off(seq[right]);
     c96:	8f 01       	movw	r16, r30
     c98:	36 de       	rcall	.-916    	; 0x906 <led_off>
     c9a:	f7 01       	movw	r30, r14
     c9c:	81 91       	ld	r24, Z+
     c9e:	7f 01       	movw	r14, r30
     ca0:	32 de       	rcall	.-924    	; 0x906 <led_off>
     ca2:	ff e2       	ldi	r31, 0x2F	; 47
     ca4:	27 e5       	ldi	r18, 0x57	; 87
     ca6:	85 e0       	ldi	r24, 0x05	; 5
     ca8:	f1 50       	subi	r31, 0x01	; 1
     caa:	20 40       	sbci	r18, 0x00	; 0
     cac:	80 40       	sbci	r24, 0x00	; 0
     cae:	e1 f7       	brne	.-8      	; 0xca8 <startupSequence+0x2e6>
                    _delay_ms(1750);

                    keypad_poll();
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <startupSequence+0x2f0>
     cb2:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     cb4:	bc dc       	rcall	.-1672   	; 0x62e <keypad_poll>
     cb6:	37 dd       	rcall	.-1426   	; 0x726 <keypad_getState>
     cb8:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     cba:	11 f4       	brne	.+4      	; 0xcc0 <startupSequence+0x2fe>
                    if (jstk_readMask() != 0)
     cbc:	b0 92 c2 21 	sts	0x21C2, r11	; 0x8021c2 <user_active.5518>
     cc0:	14 dc       	rcall	.-2008   	; 0x4ea <jstk_readMask>
                        user_active = true;
     cc2:	81 11       	cpse	r24, r1
     cc4:	b0 92 c2 21 	sts	0x21C2, r11	; 0x8021c2 <user_active.5518>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     cc8:	c0 16       	cp	r12, r16
     cca:	d1 06       	cpc	r13, r17
     ccc:	51 f0       	breq	.+20     	; 0xce2 <startupSequence+0x320>
     cce:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     cd2:	88 23       	and	r24, r24
     cd4:	f1 f2       	breq	.-68     	; 0xc92 <startupSequence+0x2d0>
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <startupSequence+0x320>

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     cd8:	fe 01       	movw	r30, r28
     cda:	31 96       	adiw	r30, 0x01	; 1
            }
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
     cdc:	6f 01       	movw	r12, r30
     cde:	bb 24       	eor	r11, r11
     ce0:	b3 94       	inc	r11
     ce2:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
                for (int i = 0; i < 4 && !user_active; i++) {
     ce6:	81 11       	cpse	r24, r1
     ce8:	0a c0       	rjmp	.+20     	; 0xcfe <startupSequence+0x33c>
     cea:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     cee:	81 11       	cpse	r24, r1
     cf0:	81 c0       	rjmp	.+258    	; 0xdf4 <startupSequence+0x432>
     cf2:	7e 01       	movw	r14, r28
     cf4:	f5 e0       	ldi	r31, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     cf6:	ef 0e       	add	r14, r31
     cf8:	f1 1c       	adc	r15, r1
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     cfa:	87 01       	movw	r16, r14
     cfc:	a6 cf       	rjmp	.-180    	; 0xc4a <startupSequence+0x288>
     cfe:	f8 dd       	rcall	.-1040   	; 0x8f0 <led_allOff>
     d00:	b8 c0       	rjmp	.+368    	; 0xe72 <startupSequence+0x4b0>
     d02:	f7 01       	movw	r30, r14
                    led_on(seq[right]);
     d04:	81 91       	ld	r24, Z+
     d06:	7f 01       	movw	r14, r30
     d08:	f9 dd       	rcall	.-1038   	; 0x8fc <led_on>
     d0a:	f8 01       	movw	r30, r16
     d0c:	82 91       	ld	r24, -Z
     d0e:	8f 01       	movw	r16, r30
     d10:	f5 dd       	rcall	.-1046   	; 0x8fc <led_on>
     d12:	ff e2       	ldi	r31, 0x2F	; 47
     d14:	27 e5       	ldi	r18, 0x57	; 87
     d16:	85 e0       	ldi	r24, 0x05	; 5
     d18:	f1 50       	subi	r31, 0x01	; 1
                    _delay_ms(1750);

                    keypad_poll();
     d1a:	20 40       	sbci	r18, 0x00	; 0
     d1c:	80 40       	sbci	r24, 0x00	; 0
                    if (keypad_getState() == KEYPAD_PRESSED)
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <startupSequence+0x356>
     d20:	00 c0       	rjmp	.+0      	; 0xd22 <startupSequence+0x360>
     d22:	00 00       	nop
     d24:	84 dc       	rcall	.-1784   	; 0x62e <keypad_poll>
                        user_active = true;
     d26:	ff dc       	rcall	.-1538   	; 0x726 <keypad_getState>
     d28:	81 30       	cpi	r24, 0x01	; 1
                    if (jstk_readMask() != 0)
     d2a:	11 f4       	brne	.+4      	; 0xd30 <startupSequence+0x36e>
     d2c:	b0 92 c2 21 	sts	0x21C2, r11	; 0x8021c2 <user_active.5518>
                        user_active = true;
     d30:	dc db       	rcall	.-2120   	; 0x4ea <jstk_readMask>
     d32:	81 11       	cpse	r24, r1
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
     d34:	b0 92 c2 21 	sts	0x21C2, r11	; 0x8021c2 <user_active.5518>
     d38:	0c 15       	cp	r16, r12
     d3a:	1d 05       	cpc	r17, r13
     d3c:	09 f4       	brne	.+2      	; 0xd40 <startupSequence+0x37e>
     d3e:	64 c0       	rjmp	.+200    	; 0xe08 <startupSequence+0x446>
     d40:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     d44:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     d46:	e9 f2       	breq	.-70     	; 0xd02 <startupSequence+0x340>
     d48:	5f c0       	rjmp	.+190    	; 0xe08 <startupSequence+0x446>
     d4a:	f7 01       	movw	r30, r14
     d4c:	81 91       	ld	r24, Z+
     d4e:	7f 01       	movw	r14, r30
                    led_off(seq[right]);
     d50:	da dd       	rcall	.-1100   	; 0x906 <led_off>
     d52:	f8 01       	movw	r30, r16
     d54:	82 91       	ld	r24, -Z
     d56:	8f 01       	movw	r16, r30
     d58:	d6 dd       	rcall	.-1108   	; 0x906 <led_off>
     d5a:	ff e2       	ldi	r31, 0x2F	; 47
     d5c:	27 e5       	ldi	r18, 0x57	; 87
     d5e:	85 e0       	ldi	r24, 0x05	; 5
     d60:	f1 50       	subi	r31, 0x01	; 1
     d62:	20 40       	sbci	r18, 0x00	; 0
     d64:	80 40       	sbci	r24, 0x00	; 0
     d66:	e1 f7       	brne	.-8      	; 0xd60 <startupSequence+0x39e>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <startupSequence+0x3a8>
                    _delay_ms(1750);

                    keypad_poll();
     d6a:	00 00       	nop
     d6c:	60 dc       	rcall	.-1856   	; 0x62e <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     d6e:	db dc       	rcall	.-1610   	; 0x726 <keypad_getState>
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	11 f4       	brne	.+4      	; 0xd78 <startupSequence+0x3b6>
     d74:	b0 92 c2 21 	sts	0x21C2, r11	; 0x8021c2 <user_active.5518>
                        user_active = true;
     d78:	b8 db       	rcall	.-2192   	; 0x4ea <jstk_readMask>
                    if (jstk_readMask() != 0)
     d7a:	81 11       	cpse	r24, r1
     d7c:	b0 92 c2 21 	sts	0x21C2, r11	; 0x8021c2 <user_active.5518>
                        user_active = true;
     d80:	0c 15       	cp	r16, r12
     d82:	1d 05       	cpc	r17, r13
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     d84:	59 f0       	breq	.+22     	; 0xd9c <startupSequence+0x3da>
     d86:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     d8a:	88 23       	and	r24, r24
     d8c:	f1 f2       	breq	.-68     	; 0xd4a <startupSequence+0x388>
     d8e:	06 c0       	rjmp	.+12     	; 0xd9c <startupSequence+0x3da>
     d90:	6e 01       	movw	r12, r28
     d92:	95 e0       	ldi	r25, 0x05	; 5
     d94:	c9 0e       	add	r12, r25
     d96:	d1 1c       	adc	r13, r1
     d98:	bb 24       	eor	r11, r11
     d9a:	b3 94       	inc	r11

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     d9c:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
            }
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
     da0:	81 11       	cpse	r24, r1
     da2:	0b c0       	rjmp	.+22     	; 0xdba <startupSequence+0x3f8>
     da4:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
                for (int i = 3; i >= 0 && !user_active; i--) {
     da8:	81 11       	cpse	r24, r1
     daa:	2e c0       	rjmp	.+92     	; 0xe08 <startupSequence+0x446>
     dac:	fe 01       	movw	r30, r28
     dae:	31 96       	adiw	r30, 0x01	; 1
     db0:	7f 01       	movw	r14, r30
     db2:	8e 01       	movw	r16, r28
     db4:	07 5f       	subi	r16, 0xF7	; 247
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	a4 cf       	rjmp	.-184    	; 0xd02 <startupSequence+0x340>
     dba:	9a dd       	rcall	.-1228   	; 0x8f0 <led_allOff>
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     dbc:	5a c0       	rjmp	.+180    	; 0xe72 <startupSequence+0x4b0>
     dbe:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     dc2:	88 23       	and	r24, r24
     dc4:	61 f1       	breq	.+88     	; 0xe1e <startupSequence+0x45c>
     dc6:	69 ce       	rjmp	.-814    	; 0xa9a <startupSequence+0xd8>
     dc8:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     dcc:	81 11       	cpse	r24, r1
     dce:	cd ce       	rjmp	.-614    	; 0xb6a <startupSequence+0x1a8>
     dd0:	ce 01       	movw	r24, r28
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	3c 01       	movw	r6, r24
     dd6:	8e 01       	movw	r16, r28
     dd8:	07 5f       	subi	r16, 0xF7	; 247
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	94 ce       	rjmp	.-728    	; 0xb06 <startupSequence+0x144>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     dde:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     de2:	81 11       	cpse	r24, r1
     de4:	22 cf       	rjmp	.-444    	; 0xc2a <startupSequence+0x268>
     de6:	fe 01       	movw	r30, r28
     de8:	31 96       	adiw	r30, 0x01	; 1
     dea:	7f 01       	movw	r14, r30
     dec:	8e 01       	movw	r16, r28
     dee:	07 5f       	subi	r16, 0xF7	; 247
     df0:	1f 4f       	sbci	r17, 0xFF	; 255
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     df2:	ef ce       	rjmp	.-546    	; 0xbd2 <startupSequence+0x210>
     df4:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     df8:	81 11       	cpse	r24, r1
     dfa:	73 cf       	rjmp	.-282    	; 0xce2 <startupSequence+0x320>
     dfc:	7e 01       	movw	r14, r28
     dfe:	f5 e0       	ldi	r31, 0x05	; 5
     e00:	ef 0e       	add	r14, r31
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e02:	f1 1c       	adc	r15, r1
     e04:	87 01       	movw	r16, r14
     e06:	45 cf       	rjmp	.-374    	; 0xc92 <startupSequence+0x2d0>
     e08:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <user_active.5518>
     e0c:	81 11       	cpse	r24, r1
     e0e:	c6 cf       	rjmp	.-116    	; 0xd9c <startupSequence+0x3da>
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	7c 01       	movw	r14, r24
     e16:	8e 01       	movw	r16, r28
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     e18:	07 5f       	subi	r16, 0xF7	; 247
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	96 cf       	rjmp	.-212    	; 0xd4a <startupSequence+0x388>
     e1e:	18 85       	ldd	r17, Y+8	; 0x08
     e20:	81 2f       	mov	r24, r17
     e22:	6c dd       	rcall	.-1320   	; 0x8fc <led_on>
     e24:	9f e0       	ldi	r25, 0x0F	; 15
     e26:	e8 e9       	ldi	r30, 0x98	; 152
     e28:	f2 e0       	ldi	r31, 0x02	; 2
     e2a:	91 50       	subi	r25, 0x01	; 1
     e2c:	e0 40       	sbci	r30, 0x00	; 0
     e2e:	f0 40       	sbci	r31, 0x00	; 0
     e30:	e1 f7       	brne	.-8      	; 0xe2a <startupSequence+0x468>
                    _delay_ms(850);
                    led_off(seq[i]);
     e32:	00 c0       	rjmp	.+0      	; 0xe34 <startupSequence+0x472>
     e34:	00 00       	nop
     e36:	81 2f       	mov	r24, r17

                    user_active = userActivity();
     e38:	66 dd       	rcall	.-1332   	; 0x906 <led_off>
     e3a:	37 dd       	rcall	.-1426   	; 0x8aa <userActivity>
     e3c:	80 93 c2 21 	sts	0x21C2, r24	; 0x8021c2 <user_active.5518>
     e40:	8e 01       	movw	r16, r28
     e42:	08 5f       	subi	r16, 0xF8	; 248
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	1d ce       	rjmp	.-966    	; 0xa82 <startupSequence+0xc0>
    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     e48:	19 81       	ldd	r17, Y+1	; 0x01
     e4a:	81 2f       	mov	r24, r17
     e4c:	57 dd       	rcall	.-1362   	; 0x8fc <led_on>
     e4e:	2f e0       	ldi	r18, 0x0F	; 15
     e50:	88 e9       	ldi	r24, 0x98	; 152
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	21 50       	subi	r18, 0x01	; 1
     e56:	80 40       	sbci	r24, 0x00	; 0
     e58:	90 40       	sbci	r25, 0x00	; 0
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <startupSequence+0x492>
     e5c:	00 c0       	rjmp	.+0      	; 0xe5e <startupSequence+0x49c>
     e5e:	00 00       	nop
     e60:	81 2f       	mov	r24, r17
                    _delay_ms(850);
                    led_off(seq[i]);
     e62:	51 dd       	rcall	.-1374   	; 0x906 <led_off>
     e64:	22 dd       	rcall	.-1468   	; 0x8aa <userActivity>
     e66:	80 93 c2 21 	sts	0x21C2, r24	; 0x8021c2 <user_active.5518>

                    user_active = userActivity();
     e6a:	8e 01       	movw	r16, r28
     e6c:	0e 5f       	subi	r16, 0xFE	; 254
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	ed cd       	rjmp	.-1062   	; 0xa4c <startupSequence+0x8a>
     e72:	28 96       	adiw	r28, 0x08	; 8
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	de bf       	out	0x3e, r29	; 62
            led_allOff();
            break;
        default:
            break;
    }
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	bf 90       	pop	r11
     e8a:	af 90       	pop	r10
     e8c:	9f 90       	pop	r9
     e8e:	8f 90       	pop	r8
     e90:	7f 90       	pop	r7
     e92:	6f 90       	pop	r6
     e94:	08 95       	ret

00000e96 <io_ui_process>:
#include "keypad.h"
#include "joystick.h"


void io_ui_process(void) {
	io_init();
     e96:	40 ca       	rjmp	.-2944   	; 0x318 <io_init>
     e98:	08 95       	ret

00000e9a <startup_ui_process>:
}

void startup_ui_process(uint8_t sequence) {
	startupSequence(sequence);
     e9a:	93 cd       	rjmp	.-1242   	; 0x9c2 <startupSequence>
     e9c:	08 95       	ret

00000e9e <jstk_ui_process>:
}

void jstk_ui_process(void) {
	joystick();
     e9e:	7b cb       	rjmp	.-2314   	; 0x596 <joystick>
     ea0:	08 95       	ret

00000ea2 <kbd_ui_process>:
}

void kbd_ui_process(void) {
	keypad();
     ea2:	c1 cc       	rjmp	.-1662   	; 0x826 <keypad>
     ea4:	08 95       	ret

00000ea6 <led_ui_process>:
}

void led_ui_process(uint8_t mask) {
	led_setState(mask);
     ea6:	50 cd       	rjmp	.-1376   	; 0x948 <led_setState>
     ea8:	08 95       	ret

00000eaa <status_ui_process>:
}

void status_ui_process(void) {
	testIndicator();
     eaa:	67 cd       	rjmp	.-1330   	; 0x97a <testIndicator>
     eac:	08 95       	ret

00000eae <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	27 97       	sbiw	r28, 0x07	; 7
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     ec6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     eca:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     ece:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     ed2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     ed6:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     eda:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     ede:	65 e0       	ldi	r22, 0x05	; 5
     ee0:	81 e4       	ldi	r24, 0x41	; 65
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	7a d6       	rcall	.+3316   	; 0x1bda <ccp_write_io>
     ee6:	6c e1       	ldi	r22, 0x1C	; 28
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	6c d6       	rcall	.+3288   	; 0x1bc6 <nvm_read_byte>
     eee:	8a 83       	std	Y+2, r24	; 0x02
     ef0:	6d e1       	ldi	r22, 0x1D	; 29
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	67 d6       	rcall	.+3278   	; 0x1bc6 <nvm_read_byte>
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	21 f4       	brne	.+8      	; 0xf0a <sysclk_init+0x5c>
     f02:	80 e4       	ldi	r24, 0x40	; 64
     f04:	93 e2       	ldi	r25, 0x23	; 35
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	9a 83       	std	Y+2, r25	; 0x02
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	8b 83       	std	Y+3, r24	; 0x03
     f10:	9c 83       	std	Y+4, r25	; 0x04
     f12:	e0 e6       	ldi	r30, 0x60	; 96
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	82 83       	std	Z+2, r24	; 0x02
     f18:	8c 81       	ldd	r24, Y+4	; 0x04
     f1a:	83 83       	std	Z+3, r24	; 0x03
     f1c:	8f b7       	in	r24, 0x3f	; 63
     f1e:	8e 83       	std	Y+6, r24	; 0x06
     f20:	f8 94       	cli
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	e0 e5       	ldi	r30, 0x50	; 80
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	82 60       	ori	r24, 0x02	; 2
     f2c:	80 83       	st	Z, r24
     f2e:	9f bf       	out	0x3f, r25	; 63
     f30:	81 81       	ldd	r24, Z+1	; 0x01
     f32:	81 ff       	sbrs	r24, 1
     f34:	fd cf       	rjmp	.-6      	; 0xf30 <sysclk_init+0x82>
     f36:	8f b7       	in	r24, 0x3f	; 63
     f38:	8f 83       	std	Y+7, r24	; 0x07
     f3a:	f8 94       	cli
     f3c:	9f 81       	ldd	r25, Y+7	; 0x07
     f3e:	00 e5       	ldi	r16, 0x50	; 80
     f40:	10 e0       	ldi	r17, 0x00	; 0
     f42:	d8 01       	movw	r26, r16
     f44:	16 96       	adiw	r26, 0x06	; 6
     f46:	8c 91       	ld	r24, X
     f48:	16 97       	sbiw	r26, 0x06	; 6
     f4a:	89 7f       	andi	r24, 0xF9	; 249
     f4c:	16 96       	adiw	r26, 0x06	; 6
     f4e:	8c 93       	st	X, r24
     f50:	16 97       	sbiw	r26, 0x06	; 6
     f52:	e0 e6       	ldi	r30, 0x60	; 96
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 e8       	ldi	r24, 0x80	; 128
     f58:	85 83       	std	Z+5, r24	; 0x05
     f5a:	8b eb       	ldi	r24, 0xBB	; 187
     f5c:	86 83       	std	Z+6, r24	; 0x06
     f5e:	16 96       	adiw	r26, 0x06	; 6
     f60:	8c 91       	ld	r24, X
     f62:	16 97       	sbiw	r26, 0x06	; 6
     f64:	84 60       	ori	r24, 0x04	; 4
     f66:	16 96       	adiw	r26, 0x06	; 6
     f68:	8c 93       	st	X, r24
     f6a:	80 81       	ld	r24, Z
     f6c:	81 60       	ori	r24, 0x01	; 1
     f6e:	80 83       	st	Z, r24
     f70:	9f bf       	out	0x3f, r25	; 63
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	80 e4       	ldi	r24, 0x40	; 64
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	30 d6       	rcall	.+3168   	; 0x1bda <ccp_write_io>
     f7a:	8f b7       	in	r24, 0x3f	; 63
     f7c:	8d 83       	std	Y+5, r24	; 0x05
     f7e:	f8 94       	cli
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	f8 01       	movw	r30, r16
     f84:	80 81       	ld	r24, Z
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	80 83       	st	Z, r24
     f8a:	9f bf       	out	0x3f, r25	; 63
     f8c:	27 96       	adiw	r28, 0x07	; 7
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	08 95       	ret

00000f9c <sysclk_enable_module>:
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	1f 92       	push	r1
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	9f b7       	in	r25, 0x3f	; 63
     fa8:	99 83       	std	Y+1, r25	; 0x01
     faa:	f8 94       	cli
     fac:	99 81       	ldd	r25, Y+1	; 0x01
     fae:	e8 2f       	mov	r30, r24
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	e0 59       	subi	r30, 0x90	; 144
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	60 95       	com	r22
     fb8:	80 81       	ld	r24, Z
     fba:	68 23       	and	r22, r24
     fbc:	60 83       	st	Z, r22
     fbe:	9f bf       	out	0x3f, r25	; 63
     fc0:	0f 90       	pop	r0
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	1f 92       	push	r1
     fce:	1f 92       	push	r1
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     fd4:	86 30       	cpi	r24, 0x06	; 6
     fd6:	11 f0       	breq	.+4      	; 0xfdc <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	01 c0       	rjmp	.+2      	; 0xfde <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     fdc:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     fde:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     fe2:	81 fd       	sbrc	r24, 1
     fe4:	2a c0       	rjmp	.+84     	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fe6:	8f b7       	in	r24, 0x3f	; 63
     fe8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     fea:	f8 94       	cli
	return flags;
     fec:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     fee:	e0 e5       	ldi	r30, 0x50	; 80
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ff8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     ffa:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     ffc:	81 ff       	sbrs	r24, 1
     ffe:	fd cf       	rjmp	.-6      	; 0xffa <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1000:	8f b7       	in	r24, 0x3f	; 63
    1002:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1004:	f8 94       	cli
	return flags;
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1008:	a0 e5       	ldi	r26, 0x50	; 80
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	16 96       	adiw	r26, 0x06	; 6
    100e:	8c 91       	ld	r24, X
    1010:	16 97       	sbiw	r26, 0x06	; 6
    1012:	89 7f       	andi	r24, 0xF9	; 249
    1014:	16 96       	adiw	r26, 0x06	; 6
    1016:	8c 93       	st	X, r24
    1018:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    101a:	e0 e6       	ldi	r30, 0x60	; 96
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 e8       	ldi	r24, 0x80	; 128
    1020:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1022:	8b eb       	ldi	r24, 0xBB	; 187
    1024:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1026:	16 96       	adiw	r26, 0x06	; 6
    1028:	8c 91       	ld	r24, X
    102a:	16 97       	sbiw	r26, 0x06	; 6
    102c:	84 60       	ori	r24, 0x04	; 4
    102e:	16 96       	adiw	r26, 0x06	; 6
    1030:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1032:	80 81       	ld	r24, Z
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1038:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    103a:	63 60       	ori	r22, 0x03	; 3
    103c:	84 e4       	ldi	r24, 0x44	; 68
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	cc d5       	rcall	.+2968   	; 0x1bda <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1042:	60 e4       	ldi	r22, 0x40	; 64
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	aa df       	rcall	.-172    	; 0xf9c <sysclk_enable_module>
}
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	08 95       	ret

00001056 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    1056:	30 91 c7 23 	lds	r19, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    105a:	20 91 c8 23 	lds	r18, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    105e:	82 2f       	mov	r24, r18
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	03 97       	sbiw	r24, 0x03	; 3
    1064:	b1 f4       	brne	.+44     	; 0x1092 <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    1066:	31 11       	cpse	r19, r1
    1068:	16 c0       	rjmp	.+44     	; 0x1096 <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
    106a:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    106e:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1072:	89 2b       	or	r24, r25
    1074:	91 f4       	brne	.+36     	; 0x109a <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
    1076:	e5 ec       	ldi	r30, 0xC5	; 197
    1078:	f3 e2       	ldi	r31, 0x23	; 35
    107a:	8e ec       	ldi	r24, 0xCE	; 206
    107c:	91 e2       	ldi	r25, 0x21	; 33
    107e:	80 87       	std	Z+8, r24	; 0x08
    1080:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    1082:	8f e4       	ldi	r24, 0x4F	; 79
    1084:	98 e0       	ldi	r25, 0x08	; 8
    1086:	84 87       	std	Z+12, r24	; 0x0c
    1088:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
    108a:	12 86       	std	Z+10, r1	; 0x0a
    108c:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	08 95       	ret
	}
	return false;
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	08 95       	ret
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	08 95       	ret
    109a:	80 e0       	ldi	r24, 0x00	; 0
}
    109c:	08 95       	ret

0000109e <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
    109e:	08 95       	ret

000010a0 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <udi_hid_generic_b_report_in_free>
    10a6:	08 95       	ret

000010a8 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
    10a8:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
    10ac:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
    10b6:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <main_generic_enable>
}
    10ba:	08 95       	ret

000010bc <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
    10bc:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <main_generic_disable>
    10c0:	08 95       	ret

000010c2 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
    10c2:	2b e2       	ldi	r18, 0x2B	; 43
    10c4:	38 e0       	ldi	r19, 0x08	; 8
    10c6:	46 ea       	ldi	r20, 0xA6	; 166
    10c8:	50 e2       	ldi	r21, 0x20	; 32
    10ca:	62 ed       	ldi	r22, 0xD2	; 210
    10cc:	71 e2       	ldi	r23, 0x21	; 33
    10ce:	84 ed       	ldi	r24, 0xD4	; 212
    10d0:	91 e2       	ldi	r25, 0x21	; 33
    10d2:	f2 c0       	rjmp	.+484    	; 0x12b8 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
    10d4:	08 95       	ret

000010d6 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
    10d6:	ff 92       	push	r15
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	1f 92       	push	r1
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
    10e8:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <udi_hid_generic_b_report_in_free>
    10ec:	88 23       	and	r24, r24
    10ee:	09 f1       	breq	.+66     	; 0x1132 <udi_hid_generic_send_report_in+0x5c>
    10f0:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10f2:	8f b7       	in	r24, 0x3f	; 63
    10f4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    10f6:	f8 94       	cli
	return flags;
    10f8:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
    10fa:	10 92 ce 21 	sts	0x21CE, r1	; 0x8021ce <udi_hid_generic_report_feature>
    10fe:	10 92 cf 21 	sts	0x21CF, r1	; 0x8021cf <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	80 93 ce 21 	sts	0x21CE, r24	; 0x8021ce <udi_hid_generic_report_feature>
    110a:	90 93 cf 21 	sts	0x21CF, r25	; 0x8021cf <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    110e:	00 e5       	ldi	r16, 0x50	; 80
    1110:	18 e0       	ldi	r17, 0x08	; 8
    1112:	22 e0       	ldi	r18, 0x02	; 2
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4e ec       	ldi	r20, 0xCE	; 206
    1118:	51 e2       	ldi	r21, 0x21	; 33
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	82 e8       	ldi	r24, 0x82	; 130
    111e:	0e 94 b1 12 	call	0x2562	; 0x2562 <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
    1122:	91 e0       	ldi	r25, 0x01	; 1
    1124:	89 27       	eor	r24, r25
    1126:	80 93 d0 21 	sts	0x21D0, r24	; 0x8021d0 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    112a:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
    112c:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <udi_hid_generic_b_report_in_free>
    1130:	89 27       	eor	r24, r25

}
    1132:	0f 90       	pop	r0
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	ff 90       	pop	r15
    113e:	08 95       	ret

00001140 <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	08 95       	ret

00001144 <udi_hid_kbd_setreport>:
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	08 95       	ret

00001148 <udi_hid_kbd_enable>:
    1148:	10 92 ea 21 	sts	0x21EA, r1	; 0x8021ea <udi_hid_kbd_rate>
    114c:	10 92 e8 21 	sts	0x21E8, r1	; 0x8021e8 <udi_hid_kbd_protocol>
    1150:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <udi_hid_kbd_b_report_trans_ongoing>
    1154:	88 e0       	ldi	r24, 0x08	; 8
    1156:	ef ed       	ldi	r30, 0xDF	; 223
    1158:	f1 e2       	ldi	r31, 0x21	; 33
    115a:	df 01       	movw	r26, r30
    115c:	1d 92       	st	X+, r1
    115e:	8a 95       	dec	r24
    1160:	e9 f7       	brne	.-6      	; 0x115c <udi_hid_kbd_enable+0x14>
    1162:	10 92 e7 21 	sts	0x21E7, r1	; 0x8021e7 <udi_hid_kbd_b_report_valid>
    1166:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <main_kbd_enable>
    116a:	08 95       	ret

0000116c <udi_hid_kbd_disable>:
    116c:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <main_kbd_disable>
    1170:	08 95       	ret

00001172 <udi_hid_kbd_setup>:
    1172:	22 ea       	ldi	r18, 0xA2	; 162
    1174:	38 e0       	ldi	r19, 0x08	; 8
    1176:	48 ec       	ldi	r20, 0xC8	; 200
    1178:	50 e2       	ldi	r21, 0x20	; 32
    117a:	68 ee       	ldi	r22, 0xE8	; 232
    117c:	71 e2       	ldi	r23, 0x21	; 33
    117e:	8a ee       	ldi	r24, 0xEA	; 234
    1180:	91 e2       	ldi	r25, 0x21	; 33
    1182:	9a c0       	rjmp	.+308    	; 0x12b8 <udi_hid_setup>
    1184:	08 95       	ret

00001186 <udi_hid_kbd_send_report>:
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <udi_hid_kbd_b_report_trans_ongoing>
    118e:	81 11       	cpse	r24, r1
    1190:	18 c0       	rjmp	.+48     	; 0x11c2 <udi_hid_kbd_send_report+0x3c>
    1192:	88 e0       	ldi	r24, 0x08	; 8
    1194:	ef ed       	ldi	r30, 0xDF	; 223
    1196:	f1 e2       	ldi	r31, 0x21	; 33
    1198:	a6 ed       	ldi	r26, 0xD6	; 214
    119a:	b1 e2       	ldi	r27, 0x21	; 33
    119c:	01 90       	ld	r0, Z+
    119e:	0d 92       	st	X+, r0
    11a0:	8a 95       	dec	r24
    11a2:	e1 f7       	brne	.-8      	; 0x119c <udi_hid_kbd_send_report+0x16>
    11a4:	10 92 e7 21 	sts	0x21E7, r1	; 0x8021e7 <udi_hid_kbd_b_report_valid>
    11a8:	05 ee       	ldi	r16, 0xE5	; 229
    11aa:	18 e0       	ldi	r17, 0x08	; 8
    11ac:	28 e0       	ldi	r18, 0x08	; 8
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	46 ed       	ldi	r20, 0xD6	; 214
    11b2:	51 e2       	ldi	r21, 0x21	; 33
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	81 e8       	ldi	r24, 0x81	; 129
    11b8:	0e 94 b1 12 	call	0x2562	; 0x2562 <udd_ep_run>
    11bc:	80 93 de 21 	sts	0x21DE, r24	; 0x8021de <udi_hid_kbd_b_report_trans_ongoing>
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <udi_hid_kbd_send_report+0x3e>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <udi_hid_kbd_report_sent>:
    11ca:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <udi_hid_kbd_b_report_trans_ongoing>
    11ce:	80 91 e7 21 	lds	r24, 0x21E7	; 0x8021e7 <udi_hid_kbd_b_report_valid>
    11d2:	81 11       	cpse	r24, r1
    11d4:	d8 cf       	rjmp	.-80     	; 0x1186 <udi_hid_kbd_send_report>
    11d6:	08 95       	ret

000011d8 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	1f 92       	push	r1
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11e4:	9f b7       	in	r25, 0x3f	; 63
    11e6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    11e8:	f8 94       	cli
	return flags;
    11ea:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    11ec:	90 91 e1 21 	lds	r25, 0x21E1	; 0x8021e1 <udi_hid_kbd_report+0x2>
    11f0:	99 23       	and	r25, r25
    11f2:	41 f0       	breq	.+16     	; 0x1204 <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    11f4:	89 17       	cp	r24, r25
    11f6:	a9 f0       	breq	.+42     	; 0x1222 <udi_hid_kbd_up+0x4a>
    11f8:	e2 ee       	ldi	r30, 0xE2	; 226
    11fa:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    11fc:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    11fe:	21 91       	ld	r18, Z+
    1200:	21 11       	cpse	r18, r1
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1204:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    1206:	1e c0       	rjmp	.+60     	; 0x1244 <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    1208:	28 17       	cp	r18, r24
    120a:	21 f0       	breq	.+8      	; 0x1214 <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    120c:	9f 5f       	subi	r25, 0xFF	; 255
    120e:	98 30       	cpi	r25, 0x08	; 8
    1210:	b1 f7       	brne	.-20     	; 0x11fe <udi_hid_kbd_up+0x26>
    1212:	05 c0       	rjmp	.+10     	; 0x121e <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    1214:	98 30       	cpi	r25, 0x08	; 8
    1216:	19 f0       	breq	.+6      	; 0x121e <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    1218:	97 30       	cpi	r25, 0x07	; 7
    121a:	20 f0       	brcs	.+8      	; 0x1224 <udi_hid_kbd_up+0x4c>
    121c:	0c c0       	rjmp	.+24     	; 0x1236 <udi_hid_kbd_up+0x5e>
    121e:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    1220:	11 c0       	rjmp	.+34     	; 0x1244 <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1222:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    1224:	e9 2f       	mov	r30, r25
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	e1 52       	subi	r30, 0x21	; 33
    122a:	fe 4d       	sbci	r31, 0xDE	; 222
    122c:	81 81       	ldd	r24, Z+1	; 0x01
    122e:	80 83       	st	Z, r24
		i++;
    1230:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    1232:	97 30       	cpi	r25, 0x07	; 7
    1234:	b9 f7       	brne	.-18     	; 0x1224 <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    1236:	10 92 e6 21 	sts	0x21E6, r1	; 0x8021e6 <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	80 93 e7 21 	sts	0x21E7, r24	; 0x8021e7 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1240:	a2 df       	rcall	.-188    	; 0x1186 <udi_hid_kbd_send_report>
    1242:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	0f 90       	pop	r0
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	08 95       	ret

00001250 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	1f 92       	push	r1
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    125c:	9f b7       	in	r25, 0x3f	; 63
    125e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1260:	f8 94       	cli
	return flags;
    1262:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    1264:	90 91 e1 21 	lds	r25, 0x21E1	; 0x8021e1 <udi_hid_kbd_report+0x2>
    1268:	99 23       	and	r25, r25
    126a:	b1 f0       	breq	.+44     	; 0x1298 <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    126c:	89 17       	cp	r24, r25
    126e:	41 f0       	breq	.+16     	; 0x1280 <udi_hid_kbd_down+0x30>
    1270:	a2 ee       	ldi	r26, 0xE2	; 226
    1272:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1274:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    1276:	9d 91       	ld	r25, X+
    1278:	99 23       	and	r25, r25
    127a:	49 f0       	breq	.+18     	; 0x128e <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    127c:	98 13       	cpse	r25, r24
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1280:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	14 c0       	rjmp	.+40     	; 0x12ae <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1286:	ef 5f       	subi	r30, 0xFF	; 255
    1288:	e8 30       	cpi	r30, 0x08	; 8
    128a:	a9 f7       	brne	.-22     	; 0x1276 <udi_hid_kbd_down+0x26>
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    128e:	e8 30       	cpi	r30, 0x08	; 8
    1290:	21 f4       	brne	.+8      	; 0x129a <udi_hid_kbd_down+0x4a>
    1292:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	0b c0       	rjmp	.+22     	; 0x12ae <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1298:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	e1 52       	subi	r30, 0x21	; 33
    129e:	fe 4d       	sbci	r31, 0xDE	; 222
    12a0:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 e7 21 	sts	0x21E7, r24	; 0x8021e7 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    12a8:	6e df       	rcall	.-292    	; 0x1186 <udi_hid_kbd_send_report>
    12aa:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
}
    12ae:	0f 90       	pop	r0
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	08 95       	ret

000012b8 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	dc 01       	movw	r26, r24
    12be:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    12c0:	90 91 c5 23 	lds	r25, 0x23C5	; 0x8023c5 <udd_g_ctrlreq>
    12c4:	99 23       	and	r25, r25
    12c6:	0c f0       	brlt	.+2      	; 0x12ca <udi_hid_setup+0x12>
    12c8:	68 c0       	rjmp	.+208    	; 0x139a <udi_hid_setup+0xe2>
    12ca:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <udi_hid_setup+0x18>
    12ce:	45 c0       	rjmp	.+138    	; 0x135a <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    12d0:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    12d4:	86 30       	cpi	r24, 0x06	; 6
    12d6:	09 f0       	breq	.+2      	; 0x12da <udi_hid_setup+0x22>
    12d8:	40 c0       	rjmp	.+128    	; 0x135a <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    12da:	76 d1       	rcall	.+748    	; 0x15c8 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    12dc:	dc 01       	movw	r26, r24
    12de:	1a 96       	adiw	r26, 0x0a	; 10
    12e0:	2c 91       	ld	r18, X
    12e2:	1a 97       	sbiw	r26, 0x0a	; 10
    12e4:	21 32       	cpi	r18, 0x21	; 33
    12e6:	09 f0       	breq	.+2      	; 0x12ea <udi_hid_setup+0x32>
    12e8:	77 c0       	rjmp	.+238    	; 0x13d8 <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    12ea:	20 91 c8 23 	lds	r18, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	21 32       	cpi	r18, 0x21	; 33
    12f2:	31 05       	cpc	r19, r1
    12f4:	b1 f4       	brne	.+44     	; 0x1322 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    12f6:	9c 01       	movw	r18, r24
    12f8:	27 5f       	subi	r18, 0xF7	; 247
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	20 93 cd 23 	sts	0x23CD, r18	; 0x8023cd <udd_g_ctrlreq+0x8>
    1300:	30 93 ce 23 	sts	0x23CE, r19	; 0x8023ce <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    1304:	e5 ec       	ldi	r30, 0xC5	; 197
    1306:	f3 e2       	ldi	r31, 0x23	; 35
    1308:	19 96       	adiw	r26, 0x09	; 9
    130a:	8c 91       	ld	r24, X
    130c:	26 81       	ldd	r18, Z+6	; 0x06
    130e:	37 81       	ldd	r19, Z+7	; 0x07
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	28 17       	cp	r18, r24
    1314:	39 07       	cpc	r19, r25
    1316:	08 f4       	brcc	.+2      	; 0x131a <udi_hid_setup+0x62>
    1318:	c9 01       	movw	r24, r18
    131a:	82 87       	std	Z+10, r24	; 0x0a
    131c:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	68 c0       	rjmp	.+208    	; 0x13f2 <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1322:	fc 01       	movw	r30, r24
    1324:	47 85       	ldd	r20, Z+15	; 0x0f
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	42 17       	cp	r20, r18
    132a:	53 07       	cpc	r21, r19
    132c:	09 f0       	breq	.+2      	; 0x1330 <udi_hid_setup+0x78>
    132e:	56 c0       	rjmp	.+172    	; 0x13dc <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    1330:	c0 93 cd 23 	sts	0x23CD, r28	; 0x8023cd <udd_g_ctrlreq+0x8>
    1334:	d0 93 ce 23 	sts	0x23CE, r29	; 0x8023ce <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    1338:	e5 ec       	ldi	r30, 0xC5	; 197
    133a:	f3 e2       	ldi	r31, 0x23	; 35
    133c:	26 81       	ldd	r18, Z+6	; 0x06
    133e:	37 81       	ldd	r19, Z+7	; 0x07
    1340:	dc 01       	movw	r26, r24
    1342:	50 96       	adiw	r26, 0x10	; 16
    1344:	8d 91       	ld	r24, X+
    1346:	9c 91       	ld	r25, X
    1348:	51 97       	sbiw	r26, 0x11	; 17
    134a:	28 17       	cp	r18, r24
    134c:	39 07       	cpc	r19, r25
    134e:	08 f4       	brcc	.+2      	; 0x1352 <udi_hid_setup+0x9a>
    1350:	c9 01       	movw	r24, r18
    1352:	82 87       	std	Z+10, r24	; 0x0a
    1354:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	4c c0       	rjmp	.+152    	; 0x13f2 <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    135a:	90 32       	cpi	r25, 0x20	; 32
    135c:	09 f0       	breq	.+2      	; 0x1360 <udi_hid_setup+0xa8>
    135e:	40 c0       	rjmp	.+128    	; 0x13e0 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1360:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	39 f0       	breq	.+14     	; 0x1376 <udi_hid_setup+0xbe>
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	71 f0       	breq	.+28     	; 0x1388 <udi_hid_setup+0xd0>
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	d1 f5       	brne	.+116    	; 0x13e4 <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    1370:	f9 01       	movw	r30, r18
    1372:	19 95       	eicall
    1374:	3e c0       	rjmp	.+124    	; 0x13f2 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    1376:	e5 ec       	ldi	r30, 0xC5	; 197
    1378:	f3 e2       	ldi	r31, 0x23	; 35
    137a:	a0 87       	std	Z+8, r26	; 0x08
    137c:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	82 87       	std	Z+10, r24	; 0x0a
    1384:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1386:	35 c0       	rjmp	.+106    	; 0x13f2 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1388:	e5 ec       	ldi	r30, 0xC5	; 197
    138a:	f3 e2       	ldi	r31, 0x23	; 35
    138c:	60 87       	std	Z+8, r22	; 0x08
    138e:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	82 87       	std	Z+10, r24	; 0x0a
    1396:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1398:	2c c0       	rjmp	.+88     	; 0x13f2 <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    139a:	90 76       	andi	r25, 0x60	; 96
    139c:	90 32       	cpi	r25, 0x20	; 32
    139e:	21 f5       	brne	.+72     	; 0x13e8 <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    13a0:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    13a4:	8a 30       	cpi	r24, 0x0A	; 10
    13a6:	39 f0       	breq	.+14     	; 0x13b6 <udi_hid_setup+0xfe>
    13a8:	8b 30       	cpi	r24, 0x0B	; 11
    13aa:	51 f0       	breq	.+20     	; 0x13c0 <udi_hid_setup+0x108>
    13ac:	89 30       	cpi	r24, 0x09	; 9
    13ae:	f1 f4       	brne	.+60     	; 0x13ec <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    13b0:	f9 01       	movw	r30, r18
    13b2:	19 95       	eicall
    13b4:	1e c0       	rjmp	.+60     	; 0x13f2 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    13b6:	80 91 c8 23 	lds	r24, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    13ba:	8c 93       	st	X, r24
				return true;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	19 c0       	rjmp	.+50     	; 0x13f2 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    13c0:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    13c4:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    13c8:	89 2b       	or	r24, r25
    13ca:	91 f4       	brne	.+36     	; 0x13f0 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    13cc:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    13d0:	db 01       	movw	r26, r22
    13d2:	8c 93       	st	X, r24
				return true;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	0d c0       	rjmp	.+26     	; 0x13f2 <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	0b c0       	rjmp	.+22     	; 0x13f2 <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	09 c0       	rjmp	.+18     	; 0x13f2 <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	07 c0       	rjmp	.+14     	; 0x13f2 <udi_hid_setup+0x13a>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <udi_hid_setup+0x13a>
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <udi_hid_setup+0x13a>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    13f0:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    13f8:	e0 91 f0 21 	lds	r30, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    13fc:	f0 91 f1 21 	lds	r31, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    1400:	01 90       	ld	r0, Z+
    1402:	f0 81       	ld	r31, Z
    1404:	e0 2d       	mov	r30, r0
    1406:	22 81       	ldd	r18, Z+2	; 0x02
    1408:	33 81       	ldd	r19, Z+3	; 0x03
    140a:	2e 0f       	add	r18, r30
    140c:	3f 1f       	adc	r19, r31
    140e:	fc 01       	movw	r30, r24
    1410:	40 81       	ld	r20, Z
    1412:	e4 0f       	add	r30, r20
    1414:	f1 1d       	adc	r31, r1
    1416:	e2 17       	cp	r30, r18
    1418:	f3 07       	cpc	r31, r19
    141a:	a0 f4       	brcc	.+40     	; 0x1444 <udc_next_desc_in_iface+0x4c>
    141c:	81 81       	ldd	r24, Z+1	; 0x01
    141e:	84 30       	cpi	r24, 0x04	; 4
    1420:	a1 f0       	breq	.+40     	; 0x144a <udc_next_desc_in_iface+0x52>
    1422:	86 13       	cpse	r24, r22
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <udc_next_desc_in_iface+0x3a>
    1426:	14 c0       	rjmp	.+40     	; 0x1450 <udc_next_desc_in_iface+0x58>
    1428:	81 81       	ldd	r24, Z+1	; 0x01
    142a:	84 30       	cpi	r24, 0x04	; 4
    142c:	a1 f0       	breq	.+40     	; 0x1456 <udc_next_desc_in_iface+0x5e>
    142e:	86 17       	cp	r24, r22
    1430:	a9 f0       	breq	.+42     	; 0x145c <udc_next_desc_in_iface+0x64>
    1432:	80 81       	ld	r24, Z
    1434:	e8 0f       	add	r30, r24
    1436:	f1 1d       	adc	r31, r1
    1438:	e2 17       	cp	r30, r18
    143a:	f3 07       	cpc	r31, r19
    143c:	a8 f3       	brcs	.-22     	; 0x1428 <udc_next_desc_in_iface+0x30>
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	08 95       	ret
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	08 95       	ret
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	08 95       	ret
    1450:	8e 2f       	mov	r24, r30
    1452:	9f 2f       	mov	r25, r31
    1454:	08 95       	ret
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	08 95       	ret
    145c:	8e 2f       	mov	r24, r30
    145e:	9f 2f       	mov	r25, r31
    1460:	08 95       	ret

00001462 <udc_valid_address>:
    1462:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1466:	8f 77       	andi	r24, 0x7F	; 127
    1468:	95 c7       	rjmp	.+3882   	; 0x2394 <udd_set_address>
    146a:	08 95       	ret

0000146c <udc_update_iface_desc>:
    146c:	90 91 f2 21 	lds	r25, 0x21F2	; 0x8021f2 <udc_num_configuration>
    1470:	99 23       	and	r25, r25
    1472:	81 f1       	breq	.+96     	; 0x14d4 <udc_update_iface_desc+0x68>
    1474:	e0 91 f0 21 	lds	r30, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    1478:	f0 91 f1 21 	lds	r31, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    147c:	01 90       	ld	r0, Z+
    147e:	f0 81       	ld	r31, Z
    1480:	e0 2d       	mov	r30, r0
    1482:	94 81       	ldd	r25, Z+4	; 0x04
    1484:	89 17       	cp	r24, r25
    1486:	40 f5       	brcc	.+80     	; 0x14d8 <udc_update_iface_desc+0x6c>
    1488:	e0 93 ee 21 	sts	0x21EE, r30	; 0x8021ee <udc_ptr_iface>
    148c:	f0 93 ef 21 	sts	0x21EF, r31	; 0x8021ef <udc_ptr_iface+0x1>
    1490:	22 81       	ldd	r18, Z+2	; 0x02
    1492:	33 81       	ldd	r19, Z+3	; 0x03
    1494:	2e 0f       	add	r18, r30
    1496:	3f 1f       	adc	r19, r31
    1498:	e2 17       	cp	r30, r18
    149a:	f3 07       	cpc	r31, r19
    149c:	f8 f4       	brcc	.+62     	; 0x14dc <udc_update_iface_desc+0x70>
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	94 30       	cpi	r25, 0x04	; 4
    14a2:	61 f4       	brne	.+24     	; 0x14bc <udc_update_iface_desc+0x50>
    14a4:	92 81       	ldd	r25, Z+2	; 0x02
    14a6:	89 13       	cpse	r24, r25
    14a8:	09 c0       	rjmp	.+18     	; 0x14bc <udc_update_iface_desc+0x50>
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	96 13       	cpse	r25, r22
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <udc_update_iface_desc+0x50>
    14b0:	e0 93 ee 21 	sts	0x21EE, r30	; 0x8021ee <udc_ptr_iface>
    14b4:	f0 93 ef 21 	sts	0x21EF, r31	; 0x8021ef <udc_ptr_iface+0x1>
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	08 95       	ret
    14bc:	90 81       	ld	r25, Z
    14be:	e9 0f       	add	r30, r25
    14c0:	f1 1d       	adc	r31, r1
    14c2:	e2 17       	cp	r30, r18
    14c4:	f3 07       	cpc	r31, r19
    14c6:	58 f3       	brcs	.-42     	; 0x149e <udc_update_iface_desc+0x32>
    14c8:	e0 93 ee 21 	sts	0x21EE, r30	; 0x8021ee <udc_ptr_iface>
    14cc:	f0 93 ef 21 	sts	0x21EF, r31	; 0x8021ef <udc_ptr_iface+0x1>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	08 95       	ret
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	08 95       	ret
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	08 95       	ret
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	08 95       	ret

000014e0 <udc_iface_disable>:
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	c8 2f       	mov	r28, r24
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	be df       	rcall	.-132    	; 0x146c <udc_update_iface_desc>
    14f0:	18 2f       	mov	r17, r24
    14f2:	88 23       	and	r24, r24
    14f4:	81 f1       	breq	.+96     	; 0x1556 <udc_iface_disable+0x76>
    14f6:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    14fa:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    14fe:	ec 2f       	mov	r30, r28
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	12 96       	adiw	r26, 0x02	; 2
    1508:	8d 91       	ld	r24, X+
    150a:	9c 91       	ld	r25, X
    150c:	13 97       	sbiw	r26, 0x03	; 3
    150e:	e8 0f       	add	r30, r24
    1510:	f9 1f       	adc	r31, r25
    1512:	e0 80       	ld	r14, Z
    1514:	f1 80       	ldd	r15, Z+1	; 0x01
    1516:	d7 01       	movw	r26, r14
    1518:	16 96       	adiw	r26, 0x06	; 6
    151a:	ed 91       	ld	r30, X+
    151c:	fc 91       	ld	r31, X
    151e:	17 97       	sbiw	r26, 0x07	; 7
    1520:	19 95       	eicall
    1522:	68 2f       	mov	r22, r24
    1524:	8c 2f       	mov	r24, r28
    1526:	a2 df       	rcall	.-188    	; 0x146c <udc_update_iface_desc>
    1528:	18 2f       	mov	r17, r24
    152a:	88 23       	and	r24, r24
    152c:	a1 f0       	breq	.+40     	; 0x1556 <udc_iface_disable+0x76>
    152e:	c0 91 ee 21 	lds	r28, 0x21EE	; 0x8021ee <udc_ptr_iface>
    1532:	d0 91 ef 21 	lds	r29, 0x21EF	; 0x8021ef <udc_ptr_iface+0x1>
    1536:	65 e0       	ldi	r22, 0x05	; 5
    1538:	ce 01       	movw	r24, r28
    153a:	5e df       	rcall	.-324    	; 0x13f8 <udc_next_desc_in_iface>
    153c:	ec 01       	movw	r28, r24
    153e:	89 2b       	or	r24, r25
    1540:	21 f0       	breq	.+8      	; 0x154a <udc_iface_disable+0x6a>
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	0e 94 ca 13 	call	0x2794	; 0x2794 <udd_ep_free>
    1548:	f6 cf       	rjmp	.-20     	; 0x1536 <udc_iface_disable+0x56>
    154a:	d7 01       	movw	r26, r14
    154c:	12 96       	adiw	r26, 0x02	; 2
    154e:	ed 91       	ld	r30, X+
    1550:	fc 91       	ld	r31, X
    1552:	13 97       	sbiw	r26, 0x03	; 3
    1554:	19 95       	eicall
    1556:	81 2f       	mov	r24, r17
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
    1562:	08 95       	ret

00001564 <udc_iface_enable>:
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	18 2f       	mov	r17, r24
    156c:	7f df       	rcall	.-258    	; 0x146c <udc_update_iface_desc>
    156e:	88 23       	and	r24, r24
    1570:	39 f1       	breq	.+78     	; 0x15c0 <udc_iface_enable+0x5c>
    1572:	c0 91 ee 21 	lds	r28, 0x21EE	; 0x8021ee <udc_ptr_iface>
    1576:	d0 91 ef 21 	lds	r29, 0x21EF	; 0x8021ef <udc_ptr_iface+0x1>
    157a:	65 e0       	ldi	r22, 0x05	; 5
    157c:	ce 01       	movw	r24, r28
    157e:	3c df       	rcall	.-392    	; 0x13f8 <udc_next_desc_in_iface>
    1580:	ec 01       	movw	r28, r24
    1582:	89 2b       	or	r24, r25
    1584:	41 f0       	breq	.+16     	; 0x1596 <udc_iface_enable+0x32>
    1586:	4c 81       	ldd	r20, Y+4	; 0x04
    1588:	5d 81       	ldd	r21, Y+5	; 0x05
    158a:	6b 81       	ldd	r22, Y+3	; 0x03
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	0f d7       	rcall	.+3614   	; 0x23ae <udd_ep_alloc>
    1590:	81 11       	cpse	r24, r1
    1592:	f3 cf       	rjmp	.-26     	; 0x157a <udc_iface_enable+0x16>
    1594:	15 c0       	rjmp	.+42     	; 0x15c0 <udc_iface_enable+0x5c>
    1596:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    159a:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    159e:	e1 2f       	mov	r30, r17
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	12 96       	adiw	r26, 0x02	; 2
    15a8:	8d 91       	ld	r24, X+
    15aa:	9c 91       	ld	r25, X
    15ac:	13 97       	sbiw	r26, 0x03	; 3
    15ae:	e8 0f       	add	r30, r24
    15b0:	f9 1f       	adc	r31, r25
    15b2:	01 90       	ld	r0, Z+
    15b4:	f0 81       	ld	r31, Z
    15b6:	e0 2d       	mov	r30, r0
    15b8:	01 90       	ld	r0, Z+
    15ba:	f0 81       	ld	r31, Z
    15bc:	e0 2d       	mov	r30, r0
    15be:	19 95       	eicall
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	08 95       	ret

000015c8 <udc_get_interface_desc>:
    15c8:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <udc_ptr_iface>
    15cc:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <udc_ptr_iface+0x1>
    15d0:	08 95       	ret

000015d2 <udc_start>:
    15d2:	55 c6       	rjmp	.+3242   	; 0x227e <udd_enable>
    15d4:	08 95       	ret

000015d6 <udc_reset>:
    15d6:	cf 93       	push	r28
    15d8:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udc_num_configuration>
    15dc:	88 23       	and	r24, r24
    15de:	c1 f0       	breq	.+48     	; 0x1610 <udc_reset+0x3a>
    15e0:	e0 91 f0 21 	lds	r30, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    15e4:	f0 91 f1 21 	lds	r31, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    15e8:	01 90       	ld	r0, Z+
    15ea:	f0 81       	ld	r31, Z
    15ec:	e0 2d       	mov	r30, r0
    15ee:	84 81       	ldd	r24, Z+4	; 0x04
    15f0:	88 23       	and	r24, r24
    15f2:	71 f0       	breq	.+28     	; 0x1610 <udc_reset+0x3a>
    15f4:	c0 e0       	ldi	r28, 0x00	; 0
    15f6:	8c 2f       	mov	r24, r28
    15f8:	73 df       	rcall	.-282    	; 0x14e0 <udc_iface_disable>
    15fa:	cf 5f       	subi	r28, 0xFF	; 255
    15fc:	e0 91 f0 21 	lds	r30, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    1600:	f0 91 f1 21 	lds	r31, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    1604:	01 90       	ld	r0, Z+
    1606:	f0 81       	ld	r31, Z
    1608:	e0 2d       	mov	r30, r0
    160a:	84 81       	ldd	r24, Z+4	; 0x04
    160c:	c8 17       	cp	r28, r24
    160e:	98 f3       	brcs	.-26     	; 0x15f6 <udc_reset+0x20>
    1610:	10 92 f2 21 	sts	0x21F2, r1	; 0x8021f2 <udc_num_configuration>
    1614:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <udc_device_status>
    1618:	81 fd       	sbrc	r24, 1
    161a:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <main_remotewakeup_disable>
    161e:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <udc_device_status>
    1622:	10 92 f7 21 	sts	0x21F7, r1	; 0x8021f7 <udc_device_status+0x1>
    1626:	cf 91       	pop	r28
    1628:	08 95       	ret

0000162a <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    162a:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    162c:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udc_num_configuration>
    1630:	88 23       	and	r24, r24
    1632:	49 f1       	breq	.+82     	; 0x1686 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1634:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    1638:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    163c:	ed 91       	ld	r30, X+
    163e:	fc 91       	ld	r31, X
    1640:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1642:	84 81       	ldd	r24, Z+4	; 0x04
    1644:	88 23       	and	r24, r24
    1646:	f9 f0       	breq	.+62     	; 0x1686 <udc_sof_notify+0x5c>
    1648:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    164a:	ec 2f       	mov	r30, r28
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	12 96       	adiw	r26, 0x02	; 2
    1654:	8d 91       	ld	r24, X+
    1656:	9c 91       	ld	r25, X
    1658:	13 97       	sbiw	r26, 0x03	; 3
    165a:	e8 0f       	add	r30, r24
    165c:	f9 1f       	adc	r31, r25
    165e:	01 90       	ld	r0, Z+
    1660:	f0 81       	ld	r31, Z
    1662:	e0 2d       	mov	r30, r0
    1664:	00 84       	ldd	r0, Z+8	; 0x08
    1666:	f1 85       	ldd	r31, Z+9	; 0x09
    1668:	e0 2d       	mov	r30, r0
    166a:	30 97       	sbiw	r30, 0x00	; 0
    166c:	09 f0       	breq	.+2      	; 0x1670 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    166e:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1670:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1672:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    1676:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    167a:	ed 91       	ld	r30, X+
    167c:	fc 91       	ld	r31, X
    167e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1680:	84 81       	ldd	r24, Z+4	; 0x04
    1682:	c8 17       	cp	r28, r24
    1684:	10 f3       	brcs	.-60     	; 0x164a <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1686:	cf 91       	pop	r28
    1688:	08 95       	ret

0000168a <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1692:	e5 ec       	ldi	r30, 0xC5	; 197
    1694:	f3 e2       	ldi	r31, 0x23	; 35
    1696:	12 86       	std	Z+10, r1	; 0x0a
    1698:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    169a:	14 86       	std	Z+12, r1	; 0x0c
    169c:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    169e:	16 86       	std	Z+14, r1	; 0x0e
    16a0:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    16a2:	80 81       	ld	r24, Z
    16a4:	88 23       	and	r24, r24
    16a6:	0c f0       	brlt	.+2      	; 0x16aa <udc_process_setup+0x20>
    16a8:	7e c2       	rjmp	.+1276   	; 0x1ba6 <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    16aa:	20 91 cb 23 	lds	r18, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    16ae:	30 91 cc 23 	lds	r19, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    16b2:	21 15       	cp	r18, r1
    16b4:	31 05       	cpc	r19, r1
    16b6:	09 f0       	breq	.+2      	; 0x16ba <udc_process_setup+0x30>
    16b8:	7b c2       	rjmp	.+1270   	; 0x1bb0 <udc_process_setup+0x526>
    16ba:	6d c2       	rjmp	.+1242   	; 0x1b96 <udc_process_setup+0x50c>
    16bc:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    16be:	09 f0       	breq	.+2      	; 0x16c2 <udc_process_setup+0x38>
    16c0:	a0 c0       	rjmp	.+320    	; 0x1802 <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    16c2:	90 91 c6 23 	lds	r25, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    16c6:	96 30       	cpi	r25, 0x06	; 6
    16c8:	79 f0       	breq	.+30     	; 0x16e8 <udc_process_setup+0x5e>
    16ca:	98 30       	cpi	r25, 0x08	; 8
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <udc_process_setup+0x46>
    16ce:	8f c0       	rjmp	.+286    	; 0x17ee <udc_process_setup+0x164>
    16d0:	91 11       	cpse	r25, r1
    16d2:	97 c0       	rjmp	.+302    	; 0x1802 <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	09 f0       	breq	.+2      	; 0x16dc <udc_process_setup+0x52>
    16da:	19 c2       	rjmp	.+1074   	; 0x1b0e <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    16dc:	62 e0       	ldi	r22, 0x02	; 2
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	86 ef       	ldi	r24, 0xF6	; 246
    16e2:	91 e2       	ldi	r25, 0x21	; 33
    16e4:	5d d6       	rcall	.+3258   	; 0x23a0 <udd_set_setup_payload>
    16e6:	69 c2       	rjmp	.+1234   	; 0x1bba <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    16e8:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    16ec:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    16f0:	29 2f       	mov	r18, r25
    16f2:	33 27       	eor	r19, r19
    16f4:	22 30       	cpi	r18, 0x02	; 2
    16f6:	31 05       	cpc	r19, r1
    16f8:	a9 f0       	breq	.+42     	; 0x1724 <udc_process_setup+0x9a>
    16fa:	20 f4       	brcc	.+8      	; 0x1704 <udc_process_setup+0x7a>
    16fc:	21 30       	cpi	r18, 0x01	; 1
    16fe:	31 05       	cpc	r19, r1
    1700:	41 f0       	breq	.+16     	; 0x1712 <udc_process_setup+0x88>
    1702:	c7 c1       	rjmp	.+910    	; 0x1a92 <udc_process_setup+0x408>
    1704:	23 30       	cpi	r18, 0x03	; 3
    1706:	31 05       	cpc	r19, r1
    1708:	d9 f1       	breq	.+118    	; 0x1780 <udc_process_setup+0xf6>
    170a:	2f 30       	cpi	r18, 0x0F	; 15
    170c:	31 05       	cpc	r19, r1
    170e:	51 f1       	breq	.+84     	; 0x1764 <udc_process_setup+0xda>
    1710:	c0 c1       	rjmp	.+896    	; 0x1a92 <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1712:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    1716:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    171a:	dc 01       	movw	r26, r24
    171c:	6c 91       	ld	r22, X
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	3f d6       	rcall	.+3198   	; 0x23a0 <udd_set_setup_payload>
    1722:	56 c0       	rjmp	.+172    	; 0x17d0 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1724:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1728:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    172c:	21 89       	ldd	r18, Z+17	; 0x11
    172e:	82 17       	cp	r24, r18
    1730:	08 f0       	brcs	.+2      	; 0x1734 <udc_process_setup+0xaa>
    1732:	ed c1       	rjmp	.+986    	; 0x1b0e <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1734:	99 27       	eor	r25, r25
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1742:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1746:	e8 0f       	add	r30, r24
    1748:	f9 1f       	adc	r31, r25
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    174e:	fc 01       	movw	r30, r24
    1750:	62 81       	ldd	r22, Z+2	; 0x02
    1752:	73 81       	ldd	r23, Z+3	; 0x03
    1754:	25 d6       	rcall	.+3146   	; 0x23a0 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1756:	e0 91 cd 23 	lds	r30, 0x23CD	; 0x8023cd <udd_g_ctrlreq+0x8>
    175a:	f0 91 ce 23 	lds	r31, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x9>
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	81 83       	std	Z+1, r24	; 0x01
    1762:	36 c0       	rjmp	.+108    	; 0x17d0 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1764:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    1768:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	09 f4       	brne	.+2      	; 0x1772 <udc_process_setup+0xe8>
    1770:	ce c1       	rjmp	.+924    	; 0x1b0e <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1772:	dc 01       	movw	r26, r24
    1774:	12 96       	adiw	r26, 0x02	; 2
    1776:	6d 91       	ld	r22, X+
    1778:	7c 91       	ld	r23, X
    177a:	13 97       	sbiw	r26, 0x03	; 3
    177c:	11 d6       	rcall	.+3106   	; 0x23a0 <udd_set_setup_payload>
    177e:	28 c0       	rjmp	.+80     	; 0x17d0 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1780:	99 27       	eor	r25, r25
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	91 05       	cpc	r25, r1
    1786:	71 f0       	breq	.+28     	; 0x17a4 <udc_process_setup+0x11a>
    1788:	38 f0       	brcs	.+14     	; 0x1798 <udc_process_setup+0x10e>
    178a:	02 97       	sbiw	r24, 0x02	; 2
    178c:	09 f0       	breq	.+2      	; 0x1790 <udc_process_setup+0x106>
    178e:	8a c1       	rjmp	.+788    	; 0x1aa4 <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1790:	e2 e5       	ldi	r30, 0x52	; 82
    1792:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1794:	31 e2       	ldi	r19, 0x21	; 33
    1796:	09 c0       	rjmp	.+18     	; 0x17aa <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1798:	64 e0       	ldi	r22, 0x04	; 4
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	8e e7       	ldi	r24, 0x7E	; 126
    179e:	91 e2       	ldi	r25, 0x21	; 33
    17a0:	ff d5       	rcall	.+3070   	; 0x23a0 <udd_set_setup_payload>
    17a2:	16 c0       	rjmp	.+44     	; 0x17d0 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    17a4:	e4 e7       	ldi	r30, 0x74	; 116
    17a6:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    17a8:	39 e0       	ldi	r19, 0x09	; 9
    17aa:	a0 e1       	ldi	r26, 0x10	; 16
    17ac:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    17ae:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    17b0:	81 91       	ld	r24, Z+
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	8d 93       	st	X+, r24
    17b6:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    17b8:	2f 5f       	subi	r18, 0xFF	; 255
    17ba:	23 17       	cp	r18, r19
    17bc:	c8 f3       	brcs	.-14     	; 0x17b0 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    17be:	63 2f       	mov	r22, r19
    17c0:	66 0f       	add	r22, r22
    17c2:	6e 5f       	subi	r22, 0xFE	; 254
    17c4:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <udc_string_desc>
		udd_set_setup_payload(
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	8e e0       	ldi	r24, 0x0E	; 14
    17cc:	91 e2       	ldi	r25, 0x21	; 33
    17ce:	e8 d5       	rcall	.+3024   	; 0x23a0 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    17d0:	e5 ec       	ldi	r30, 0xC5	; 197
    17d2:	f3 e2       	ldi	r31, 0x23	; 35
    17d4:	86 81       	ldd	r24, Z+6	; 0x06
    17d6:	97 81       	ldd	r25, Z+7	; 0x07
    17d8:	22 85       	ldd	r18, Z+10	; 0x0a
    17da:	33 85       	ldd	r19, Z+11	; 0x0b
    17dc:	82 17       	cp	r24, r18
    17de:	93 07       	cpc	r25, r19
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <udc_process_setup+0x15a>
    17e2:	eb c1       	rjmp	.+982    	; 0x1bba <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    17e4:	80 93 cf 23 	sts	0x23CF, r24	; 0x8023cf <udd_g_ctrlreq+0xa>
    17e8:	90 93 d0 23 	sts	0x23D0, r25	; 0x8023d0 <udd_g_ctrlreq+0xb>
    17ec:	e6 c1       	rjmp	.+972    	; 0x1bba <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    17ee:	21 30       	cpi	r18, 0x01	; 1
    17f0:	31 05       	cpc	r19, r1
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    17f4:	8c c1       	rjmp	.+792    	; 0x1b0e <udc_process_setup+0x484>
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	82 ef       	ldi	r24, 0xF2	; 242
    17fc:	91 e2       	ldi	r25, 0x21	; 33
    17fe:	d0 d5       	rcall	.+2976   	; 0x23a0 <udd_set_setup_payload>
    1800:	dc c1       	rjmp	.+952    	; 0x1bba <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	e1 f5       	brne	.+120    	; 0x187e <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1806:	90 91 c6 23 	lds	r25, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    180a:	9a 30       	cpi	r25, 0x0A	; 10
    180c:	c1 f5       	brne	.+112    	; 0x187e <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    180e:	21 30       	cpi	r18, 0x01	; 1
    1810:	31 05       	cpc	r19, r1
    1812:	09 f0       	breq	.+2      	; 0x1816 <udc_process_setup+0x18c>
    1814:	4c c1       	rjmp	.+664    	; 0x1aae <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1816:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udc_num_configuration>
    181a:	88 23       	and	r24, r24
    181c:	09 f4       	brne	.+2      	; 0x1820 <udc_process_setup+0x196>
    181e:	47 c1       	rjmp	.+654    	; 0x1aae <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1820:	c0 91 c9 23 	lds	r28, 0x23C9	; 0x8023c9 <udd_g_ctrlreq+0x4>
    1824:	d0 91 ca 23 	lds	r29, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1828:	00 91 f0 21 	lds	r16, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    182c:	10 91 f1 21 	lds	r17, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    1830:	d8 01       	movw	r26, r16
    1832:	ed 91       	ld	r30, X+
    1834:	fc 91       	ld	r31, X
    1836:	84 81       	ldd	r24, Z+4	; 0x04
    1838:	c8 17       	cp	r28, r24
    183a:	08 f0       	brcs	.+2      	; 0x183e <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    183c:	38 c1       	rjmp	.+624    	; 0x1aae <udc_process_setup+0x424>
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	8c 2f       	mov	r24, r28
    1842:	14 de       	rcall	.-984    	; 0x146c <udc_update_iface_desc>
    1844:	88 23       	and	r24, r24
    1846:	09 f4       	brne	.+2      	; 0x184a <udc_process_setup+0x1c0>
    1848:	2d c1       	rjmp	.+602    	; 0x1aa4 <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    184a:	ce 01       	movw	r24, r28
    184c:	99 27       	eor	r25, r25
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	d8 01       	movw	r26, r16
    1854:	12 96       	adiw	r26, 0x02	; 2
    1856:	ed 91       	ld	r30, X+
    1858:	fc 91       	ld	r31, X
    185a:	13 97       	sbiw	r26, 0x03	; 3
    185c:	e8 0f       	add	r30, r24
    185e:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1860:	01 90       	ld	r0, Z+
    1862:	f0 81       	ld	r31, Z
    1864:	e0 2d       	mov	r30, r0
    1866:	86 81       	ldd	r24, Z+6	; 0x06
    1868:	97 81       	ldd	r25, Z+7	; 0x07
    186a:	fc 01       	movw	r30, r24
    186c:	19 95       	eicall
    186e:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	84 ef       	ldi	r24, 0xF4	; 244
    1878:	91 e2       	ldi	r25, 0x21	; 33
    187a:	92 d5       	rcall	.+2852   	; 0x23a0 <udd_set_setup_payload>
    187c:	9e c1       	rjmp	.+828    	; 0x1bba <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	09 f0       	breq	.+2      	; 0x1884 <udc_process_setup+0x1fa>
    1882:	10 c1       	rjmp	.+544    	; 0x1aa4 <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1884:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    1888:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    188a:	05 c1       	rjmp	.+522    	; 0x1a96 <udc_process_setup+0x40c>
    188c:	22 30       	cpi	r18, 0x02	; 2
    188e:	31 05       	cpc	r19, r1
    1890:	09 f0       	breq	.+2      	; 0x1894 <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1892:	3d c1       	rjmp	.+634    	; 0x1b0e <udc_process_setup+0x484>
    1894:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udd_g_ctrlreq+0x4>
    1898:	12 d6       	rcall	.+3108   	; 0x24be <udd_ep_is_halted>
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	80 93 ec 21 	sts	0x21EC, r24	; 0x8021ec <udc_ep_status.4575>
    18a0:	90 93 ed 21 	sts	0x21ED, r25	; 0x8021ed <udc_ep_status.4575+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    18a4:	62 e0       	ldi	r22, 0x02	; 2
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	8c ee       	ldi	r24, 0xEC	; 236
    18aa:	91 e2       	ldi	r25, 0x21	; 33
    18ac:	79 d5       	rcall	.+2802   	; 0x23a0 <udd_set_setup_payload>
    18ae:	85 c1       	rjmp	.+778    	; 0x1bba <udc_process_setup+0x530>
    18b0:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <udc_process_setup+0x22c>
    18b4:	9f c0       	rjmp	.+318    	; 0x19f4 <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    18b6:	90 91 c6 23 	lds	r25, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    18ba:	93 30       	cpi	r25, 0x03	; 3
    18bc:	91 f1       	breq	.+100    	; 0x1922 <udc_process_setup+0x298>
    18be:	18 f4       	brcc	.+6      	; 0x18c6 <udc_process_setup+0x23c>
    18c0:	91 30       	cpi	r25, 0x01	; 1
    18c2:	a9 f0       	breq	.+42     	; 0x18ee <udc_process_setup+0x264>
    18c4:	97 c0       	rjmp	.+302    	; 0x19f4 <udc_process_setup+0x36a>
    18c6:	95 30       	cpi	r25, 0x05	; 5
    18c8:	21 f0       	breq	.+8      	; 0x18d2 <udc_process_setup+0x248>
    18ca:	99 30       	cpi	r25, 0x09	; 9
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <udc_process_setup+0x246>
    18ce:	43 c0       	rjmp	.+134    	; 0x1956 <udc_process_setup+0x2cc>
    18d0:	91 c0       	rjmp	.+290    	; 0x19f4 <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18d2:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    18d6:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    18da:	89 2b       	or	r24, r25
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <udc_process_setup+0x256>
    18de:	17 c1       	rjmp	.+558    	; 0x1b0e <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    18e0:	81 e3       	ldi	r24, 0x31	; 49
    18e2:	9a e0       	ldi	r25, 0x0A	; 10
    18e4:	80 93 d1 23 	sts	0x23D1, r24	; 0x8023d1 <udd_g_ctrlreq+0xc>
    18e8:	90 93 d2 23 	sts	0x23D2, r25	; 0x8023d2 <udd_g_ctrlreq+0xd>
    18ec:	66 c1       	rjmp	.+716    	; 0x1bba <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18ee:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    18f2:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    18f6:	89 2b       	or	r24, r25
    18f8:	09 f0       	breq	.+2      	; 0x18fc <udc_process_setup+0x272>
    18fa:	09 c1       	rjmp	.+530    	; 0x1b0e <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    18fc:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1900:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	09 f0       	breq	.+2      	; 0x190a <udc_process_setup+0x280>
    1908:	02 c1       	rjmp	.+516    	; 0x1b0e <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    190a:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <udc_device_status>
    190e:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <udc_device_status+0x1>
    1912:	8d 7f       	andi	r24, 0xFD	; 253
    1914:	80 93 f6 21 	sts	0x21F6, r24	; 0x8021f6 <udc_device_status>
    1918:	90 93 f7 21 	sts	0x21F7, r25	; 0x8021f7 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    191c:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <main_remotewakeup_disable>
    1920:	4c c1       	rjmp	.+664    	; 0x1bba <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1922:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1926:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    192a:	89 2b       	or	r24, r25
    192c:	09 f0       	breq	.+2      	; 0x1930 <udc_process_setup+0x2a6>
    192e:	ef c0       	rjmp	.+478    	; 0x1b0e <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1930:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1934:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	09 f0       	breq	.+2      	; 0x193e <udc_process_setup+0x2b4>
    193c:	ae c0       	rjmp	.+348    	; 0x1a9a <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    193e:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <udc_device_status>
    1942:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <udc_device_status+0x1>
    1946:	82 60       	ori	r24, 0x02	; 2
    1948:	80 93 f6 21 	sts	0x21F6, r24	; 0x8021f6 <udc_device_status>
    194c:	90 93 f7 21 	sts	0x21F7, r25	; 0x8021f7 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1950:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1954:	32 c1       	rjmp	.+612    	; 0x1bba <udc_process_setup+0x530>
    1956:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    195a:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    195e:	89 2b       	or	r24, r25
    1960:	09 f0       	breq	.+2      	; 0x1964 <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1962:	d5 c0       	rjmp	.+426    	; 0x1b0e <udc_process_setup+0x484>
    1964:	1a d5       	rcall	.+2612   	; 0x239a <udd_getaddress>
    1966:	88 23       	and	r24, r24
    1968:	09 f4       	brne	.+2      	; 0x196c <udc_process_setup+0x2e2>
    196a:	9c c0       	rjmp	.+312    	; 0x1aa4 <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    196c:	20 91 c7 23 	lds	r18, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1970:	30 91 c8 23 	lds	r19, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1974:	33 27       	eor	r19, r19
    1976:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    197a:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    197e:	81 89       	ldd	r24, Z+17	; 0x11
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	82 17       	cp	r24, r18
    1984:	93 07       	cpc	r25, r19
    1986:	08 f4       	brcc	.+2      	; 0x198a <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1988:	8d c0       	rjmp	.+282    	; 0x1aa4 <udc_process_setup+0x41a>
    198a:	25 de       	rcall	.-950    	; 0x15d6 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    198c:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1990:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    1994:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1998:	88 23       	and	r24, r24
    199a:	09 f4       	brne	.+2      	; 0x199e <udc_process_setup+0x314>
    199c:	0e c1       	rjmp	.+540    	; 0x1bba <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    199e:	99 27       	eor	r25, r25
    19a0:	81 50       	subi	r24, 0x01	; 1
    19a2:	90 4c       	sbci	r25, 0xC0	; 192
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    19b0:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    19b4:	e8 0f       	add	r30, r24
    19b6:	f9 1f       	adc	r31, r25
    19b8:	e0 93 f0 21 	sts	0x21F0, r30	; 0x8021f0 <udc_ptr_conf>
    19bc:	f0 93 f1 21 	sts	0x21F1, r31	; 0x8021f1 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19c0:	01 90       	ld	r0, Z+
    19c2:	f0 81       	ld	r31, Z
    19c4:	e0 2d       	mov	r30, r0
    19c6:	84 81       	ldd	r24, Z+4	; 0x04
    19c8:	88 23       	and	r24, r24
    19ca:	09 f4       	brne	.+2      	; 0x19ce <udc_process_setup+0x344>
    19cc:	f6 c0       	rjmp	.+492    	; 0x1bba <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    19ce:	c0 e0       	ldi	r28, 0x00	; 0
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	8c 2f       	mov	r24, r28
    19d4:	c7 dd       	rcall	.-1138   	; 0x1564 <udc_iface_enable>
    19d6:	88 23       	and	r24, r24
    19d8:	09 f4       	brne	.+2      	; 0x19dc <udc_process_setup+0x352>
    19da:	64 c0       	rjmp	.+200    	; 0x1aa4 <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    19dc:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19de:	e0 91 f0 21 	lds	r30, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    19e2:	f0 91 f1 21 	lds	r31, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    19e6:	01 90       	ld	r0, Z+
    19e8:	f0 81       	ld	r31, Z
    19ea:	e0 2d       	mov	r30, r0
    19ec:	84 81       	ldd	r24, Z+4	; 0x04
    19ee:	c8 17       	cp	r28, r24
    19f0:	78 f3       	brcs	.-34     	; 0x19d0 <udc_process_setup+0x346>
    19f2:	e3 c0       	rjmp	.+454    	; 0x1bba <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	e9 f4       	brne	.+58     	; 0x1a32 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    19f8:	90 91 c6 23 	lds	r25, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    19fc:	9b 30       	cpi	r25, 0x0B	; 11
    19fe:	c9 f4       	brne	.+50     	; 0x1a32 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1a00:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1a04:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1a08:	89 2b       	or	r24, r25
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1a0c:	50 c0       	rjmp	.+160    	; 0x1aae <udc_process_setup+0x424>
    1a0e:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udc_num_configuration>
    1a12:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <udc_process_setup+0x38e>
    1a16:	4b c0       	rjmp	.+150    	; 0x1aae <udc_process_setup+0x424>
    1a18:	e5 ec       	ldi	r30, 0xC5	; 197
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1a1a:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1a1c:	c4 81       	ldd	r28, Z+4	; 0x04
    1a1e:	d2 81       	ldd	r29, Z+2	; 0x02
    1a20:	8c 2f       	mov	r24, r28
    1a22:	5e dd       	rcall	.-1348   	; 0x14e0 <udc_iface_disable>
    1a24:	88 23       	and	r24, r24
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1a28:	3d c0       	rjmp	.+122    	; 0x1aa4 <udc_process_setup+0x41a>
    1a2a:	6d 2f       	mov	r22, r29
    1a2c:	8c 2f       	mov	r24, r28
    1a2e:	9a dd       	rcall	.-1228   	; 0x1564 <udc_iface_enable>
    1a30:	37 c0       	rjmp	.+110    	; 0x1aa0 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1a32:	82 30       	cpi	r24, 0x02	; 2
    1a34:	b9 f5       	brne	.+110    	; 0x1aa4 <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a36:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0x1>
    1a3a:	81 30       	cpi	r24, 0x01	; 1
    1a3c:	19 f0       	breq	.+6      	; 0x1a44 <udc_process_setup+0x3ba>
    1a3e:	83 30       	cpi	r24, 0x03	; 3
    1a40:	99 f0       	breq	.+38     	; 0x1a68 <udc_process_setup+0x3de>
    1a42:	2d c0       	rjmp	.+90     	; 0x1a9e <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1a44:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1a48:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1a4c:	89 2b       	or	r24, r25
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1a50:	5e c0       	rjmp	.+188    	; 0x1b0e <udc_process_setup+0x484>
    1a52:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1a56:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    1a5a:	89 2b       	or	r24, r25
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1a5e:	57 c0       	rjmp	.+174    	; 0x1b0e <udc_process_setup+0x484>
    1a60:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udd_g_ctrlreq+0x4>
    1a64:	47 d5       	rcall	.+2702   	; 0x24f4 <udd_ep_clear_halt>
    1a66:	1c c0       	rjmp	.+56     	; 0x1aa0 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1a68:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1a6c:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1a70:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <udc_process_setup+0x3ec>
    1a74:	4c c0       	rjmp	.+152    	; 0x1b0e <udc_process_setup+0x484>
    1a76:	80 91 c7 23 	lds	r24, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0x2>
    1a7a:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0x3>
    1a7e:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <udc_process_setup+0x3fa>
    1a82:	45 c0       	rjmp	.+138    	; 0x1b0e <udc_process_setup+0x484>
    1a84:	c5 ec       	ldi	r28, 0xC5	; 197
    1a86:	d3 e2       	ldi	r29, 0x23	; 35
    1a88:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1a8a:	35 d6       	rcall	.+3178   	; 0x26f6 <udd_ep_abort>
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	9e d6       	rcall	.+3388   	; 0x27cc <udd_ep_set_halt>
    1a90:	07 c0       	rjmp	.+14     	; 0x1aa0 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	05 c0       	rjmp	.+10     	; 0x1aa0 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	01 c0       	rjmp	.+2      	; 0x1aa0 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1aa0:	81 11       	cpse	r24, r1
    1aa2:	8c c0       	rjmp	.+280    	; 0x1bbc <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1aa4:	80 91 c5 23 	lds	r24, 0x23C5	; 0x8023c5 <udd_g_ctrlreq>
    1aa8:	8f 71       	andi	r24, 0x1F	; 31
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	81 f5       	brne	.+96     	; 0x1b0e <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1aae:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udc_num_configuration>
    1ab2:	88 23       	and	r24, r24
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ab6:	71 c0       	rjmp	.+226    	; 0x1b9a <udc_process_setup+0x510>
    1ab8:	00 91 c9 23 	lds	r16, 0x23C9	; 0x8023c9 <udd_g_ctrlreq+0x4>
    1abc:	10 91 ca 23 	lds	r17, 0x23CA	; 0x8023ca <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ac0:	c0 91 f0 21 	lds	r28, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    1ac4:	d0 91 f1 21 	lds	r29, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    1ac8:	e8 81       	ld	r30, Y
    1aca:	f9 81       	ldd	r31, Y+1	; 0x01
    1acc:	84 81       	ldd	r24, Z+4	; 0x04
    1ace:	08 17       	cp	r16, r24
    1ad0:	08 f0       	brcs	.+2      	; 0x1ad4 <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1ad2:	65 c0       	rjmp	.+202    	; 0x1b9e <udc_process_setup+0x514>
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	80 2f       	mov	r24, r16
    1ad8:	c9 dc       	rcall	.-1646   	; 0x146c <udc_update_iface_desc>
    1ada:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1adc:	c1 f0       	breq	.+48     	; 0x1b0e <udc_process_setup+0x484>
    1ade:	f8 01       	movw	r30, r16
    1ae0:	ff 27       	eor	r31, r31
    1ae2:	cf 01       	movw	r24, r30
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aea:	fb 81       	ldd	r31, Y+3	; 0x03
    1aec:	e8 0f       	add	r30, r24
    1aee:	f9 1f       	adc	r31, r25
    1af0:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1af2:	d1 81       	ldd	r29, Z+1	; 0x01
    1af4:	ee 81       	ldd	r30, Y+6	; 0x06
    1af6:	ff 81       	ldd	r31, Y+7	; 0x07
    1af8:	19 95       	eicall
    1afa:	68 2f       	mov	r22, r24
    1afc:	80 2f       	mov	r24, r16
    1afe:	b6 dc       	rcall	.-1684   	; 0x146c <udc_update_iface_desc>
    1b00:	88 23       	and	r24, r24
    1b02:	29 f0       	breq	.+10     	; 0x1b0e <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1b04:	ec 81       	ldd	r30, Y+4	; 0x04
    1b06:	fd 81       	ldd	r31, Y+5	; 0x05
    1b08:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1b0a:	81 11       	cpse	r24, r1
    1b0c:	57 c0       	rjmp	.+174    	; 0x1bbc <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1b0e:	80 91 c5 23 	lds	r24, 0x23C5	; 0x8023c5 <udd_g_ctrlreq>
    1b12:	8f 71       	andi	r24, 0x1F	; 31
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <udc_process_setup+0x490>
    1b18:	44 c0       	rjmp	.+136    	; 0x1ba2 <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b1a:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udc_num_configuration>
    1b1e:	88 23       	and	r24, r24
    1b20:	b1 f1       	breq	.+108    	; 0x1b8e <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b22:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    1b26:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    1b2a:	ed 91       	ld	r30, X+
    1b2c:	fc 91       	ld	r31, X
    1b2e:	11 97       	sbiw	r26, 0x01	; 1
    1b30:	84 81       	ldd	r24, Z+4	; 0x04
    1b32:	88 23       	and	r24, r24
    1b34:	71 f1       	breq	.+92     	; 0x1b92 <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b36:	c0 e0       	ldi	r28, 0x00	; 0
    1b38:	ec 2f       	mov	r30, r28
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	ee 0f       	add	r30, r30
    1b3e:	ff 1f       	adc	r31, r31
    1b40:	12 96       	adiw	r26, 0x02	; 2
    1b42:	8d 91       	ld	r24, X+
    1b44:	9c 91       	ld	r25, X
    1b46:	13 97       	sbiw	r26, 0x03	; 3
    1b48:	e8 0f       	add	r30, r24
    1b4a:	f9 1f       	adc	r31, r25
    1b4c:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1b4e:	11 81       	ldd	r17, Z+1	; 0x01
    1b50:	d8 01       	movw	r26, r16
    1b52:	16 96       	adiw	r26, 0x06	; 6
    1b54:	ed 91       	ld	r30, X+
    1b56:	fc 91       	ld	r31, X
    1b58:	17 97       	sbiw	r26, 0x07	; 7
    1b5a:	19 95       	eicall
    1b5c:	68 2f       	mov	r22, r24
    1b5e:	8c 2f       	mov	r24, r28
    1b60:	85 dc       	rcall	.-1782   	; 0x146c <udc_update_iface_desc>
    1b62:	88 23       	and	r24, r24
    1b64:	59 f1       	breq	.+86     	; 0x1bbc <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1b66:	d8 01       	movw	r26, r16
    1b68:	14 96       	adiw	r26, 0x04	; 4
    1b6a:	ed 91       	ld	r30, X+
    1b6c:	fc 91       	ld	r31, X
    1b6e:	15 97       	sbiw	r26, 0x05	; 5
    1b70:	19 95       	eicall
    1b72:	81 11       	cpse	r24, r1
    1b74:	23 c0       	rjmp	.+70     	; 0x1bbc <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1b76:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b78:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <udc_ptr_conf>
    1b7c:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <udc_ptr_conf+0x1>
    1b80:	ed 91       	ld	r30, X+
    1b82:	fc 91       	ld	r31, X
    1b84:	11 97       	sbiw	r26, 0x01	; 1
    1b86:	94 81       	ldd	r25, Z+4	; 0x04
    1b88:	c9 17       	cp	r28, r25
    1b8a:	b0 f2       	brcs	.-84     	; 0x1b38 <udc_process_setup+0x4ae>
    1b8c:	17 c0       	rjmp	.+46     	; 0x1bbc <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	15 c0       	rjmp	.+42     	; 0x1bbc <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	13 c0       	rjmp	.+38     	; 0x1bbc <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	11 c0       	rjmp	.+34     	; 0x1bbc <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	0f c0       	rjmp	.+30     	; 0x1bbc <udc_process_setup+0x532>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	0d c0       	rjmp	.+26     	; 0x1bbc <udc_process_setup+0x532>
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	0b c0       	rjmp	.+22     	; 0x1bbc <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	90 76       	andi	r25, 0x60	; 96
    1baa:	09 f0       	breq	.+2      	; 0x1bae <udc_process_setup+0x524>
    1bac:	7b cf       	rjmp	.-266    	; 0x1aa4 <udc_process_setup+0x41a>
    1bae:	80 ce       	rjmp	.-768    	; 0x18b0 <udc_process_setup+0x226>
    1bb0:	98 2f       	mov	r25, r24
    1bb2:	90 76       	andi	r25, 0x60	; 96
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <udc_process_setup+0x52e>
    1bb6:	76 cf       	rjmp	.-276    	; 0x1aa4 <udc_process_setup+0x41a>
    1bb8:	81 cd       	rjmp	.-1278   	; 0x16bc <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	08 95       	ret

00001bc6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1bc6:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1bca:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1bcc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1bce:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1bd2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1bd4:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1bd8:	08 95       	ret

00001bda <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1bda:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1bdc:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1bde:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1be0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1be2:	60 83       	st	Z, r22
	ret                             // Return to caller
    1be4:	08 95       	ret

00001be6 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	1f 92       	push	r1
    1bec:	1f 92       	push	r1
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	81 11       	cpse	r24, r1
    1bf4:	26 c0       	rjmp	.+76     	; 0x1c42 <udd_sleep_mode+0x5c>
    1bf6:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_b_idle>
    1bfa:	99 23       	and	r25, r25
    1bfc:	f9 f0       	breq	.+62     	; 0x1c3c <udd_sleep_mode+0x56>
    1bfe:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <sleepmgr_locks+0x1>
    1c02:	91 11       	cpse	r25, r1
    1c04:	01 c0       	rjmp	.+2      	; 0x1c08 <udd_sleep_mode+0x22>
    1c06:	ff cf       	rjmp	.-2      	; 0x1c06 <udd_sleep_mode+0x20>
    1c08:	9f b7       	in	r25, 0x3f	; 63
    1c0a:	9a 83       	std	Y+2, r25	; 0x02
    1c0c:	f8 94       	cli
    1c0e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c10:	ef eb       	ldi	r30, 0xBF	; 191
    1c12:	f3 e2       	ldi	r31, 0x23	; 35
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
    1c16:	91 50       	subi	r25, 0x01	; 1
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	2f bf       	out	0x3f, r18	; 63
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <udd_sleep_mode+0x56>
    1c1e:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <sleepmgr_locks+0x1>
    1c22:	9f 3f       	cpi	r25, 0xFF	; 255
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <udd_sleep_mode+0x42>
    1c26:	ff cf       	rjmp	.-2      	; 0x1c26 <udd_sleep_mode+0x40>
    1c28:	9f b7       	in	r25, 0x3f	; 63
    1c2a:	99 83       	std	Y+1, r25	; 0x01
    1c2c:	f8 94       	cli
    1c2e:	29 81       	ldd	r18, Y+1	; 0x01
    1c30:	ef eb       	ldi	r30, 0xBF	; 191
    1c32:	f3 e2       	ldi	r31, 0x23	; 35
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	9f 5f       	subi	r25, 0xFF	; 255
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	2f bf       	out	0x3f, r18	; 63
    1c3c:	80 93 b8 23 	sts	0x23B8, r24	; 0x8023b8 <udd_b_idle>
    1c40:	05 c0       	rjmp	.+10     	; 0x1c4c <udd_sleep_mode+0x66>
    1c42:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_b_idle>
    1c46:	99 23       	and	r25, r25
    1c48:	51 f3       	breq	.-44     	; 0x1c1e <udd_sleep_mode+0x38>
    1c4a:	f8 cf       	rjmp	.-16     	; 0x1c3c <udd_sleep_mode+0x56>
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	08 95       	ret

00001c56 <udd_ctrl_init>:
    1c56:	0f 93       	push	r16
    1c58:	e8 ec       	ldi	r30, 0xC8	; 200
    1c5a:	f4 e0       	ldi	r31, 0x04	; 4
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8f 7d       	andi	r24, 0xDF	; 223
    1c60:	80 83       	st	Z, r24
    1c62:	80 81       	ld	r24, Z
    1c64:	8f 7d       	andi	r24, 0xDF	; 223
    1c66:	80 83       	st	Z, r24
    1c68:	ec e6       	ldi	r30, 0x6C	; 108
    1c6a:	f3 e2       	ldi	r31, 0x23	; 35
    1c6c:	02 e0       	ldi	r16, 0x02	; 2
    1c6e:	05 93       	las	Z, r16
    1c70:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_sram+0x1e>
    1c74:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udd_sram+0x1f>
    1c78:	00 e2       	ldi	r16, 0x20	; 32
    1c7a:	06 93       	lac	Z, r16
    1c7c:	00 e4       	ldi	r16, 0x40	; 64
    1c7e:	06 93       	lac	Z, r16
    1c80:	e4 e6       	ldi	r30, 0x64	; 100
    1c82:	f3 e2       	ldi	r31, 0x23	; 35
    1c84:	00 e4       	ldi	r16, 0x40	; 64
    1c86:	06 93       	lac	Z, r16
    1c88:	e5 ec       	ldi	r30, 0xC5	; 197
    1c8a:	f3 e2       	ldi	r31, 0x23	; 35
    1c8c:	14 86       	std	Z+12, r1	; 0x0c
    1c8e:	15 86       	std	Z+13, r1	; 0x0d
    1c90:	16 86       	std	Z+14, r1	; 0x0e
    1c92:	17 86       	std	Z+15, r1	; 0x0f
    1c94:	12 86       	std	Z+10, r1	; 0x0a
    1c96:	13 86       	std	Z+11, r1	; 0x0b
    1c98:	10 92 4d 23 	sts	0x234D, r1	; 0x80234d <udd_ep_control_state>
    1c9c:	0f 91       	pop	r16
    1c9e:	08 95       	ret

00001ca0 <udd_ctrl_stall_data>:
    1ca0:	0f 93       	push	r16
    1ca2:	85 e0       	ldi	r24, 0x05	; 5
    1ca4:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <udd_ep_control_state>
    1ca8:	ed e6       	ldi	r30, 0x6D	; 109
    1caa:	f3 e2       	ldi	r31, 0x23	; 35
    1cac:	04 e0       	ldi	r16, 0x04	; 4
    1cae:	05 93       	las	Z, r16
    1cb0:	e5 e6       	ldi	r30, 0x65	; 101
    1cb2:	f3 e2       	ldi	r31, 0x23	; 35
    1cb4:	04 e0       	ldi	r16, 0x04	; 4
    1cb6:	05 93       	las	Z, r16
    1cb8:	0f 91       	pop	r16
    1cba:	08 95       	ret

00001cbc <udd_ctrl_send_zlp_in>:
    1cbc:	0f 93       	push	r16
    1cbe:	83 e0       	ldi	r24, 0x03	; 3
    1cc0:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <udd_ep_control_state>
    1cc4:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udd_sram+0x1e>
    1cc8:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udd_sram+0x1f>
    1ccc:	ec e6       	ldi	r30, 0x6C	; 108
    1cce:	f3 e2       	ldi	r31, 0x23	; 35
    1cd0:	02 e0       	ldi	r16, 0x02	; 2
    1cd2:	06 93       	lac	Z, r16
    1cd4:	0f 91       	pop	r16
    1cd6:	08 95       	ret

00001cd8 <udd_ctrl_endofrequest>:
    1cd8:	e0 91 d1 23 	lds	r30, 0x23D1	; 0x8023d1 <udd_g_ctrlreq+0xc>
    1cdc:	f0 91 d2 23 	lds	r31, 0x23D2	; 0x8023d2 <udd_g_ctrlreq+0xd>
    1ce0:	30 97       	sbiw	r30, 0x00	; 0
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <udd_ctrl_endofrequest+0xe>
    1ce4:	19 95       	eicall
    1ce6:	08 95       	ret

00001ce8 <udd_ctrl_in_sent>:
    1ce8:	0f 93       	push	r16
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udd_ep_control_state>
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	19 f4       	brne	.+6      	; 0x1cfc <udd_ctrl_in_sent+0x14>
    1cf6:	f0 df       	rcall	.-32     	; 0x1cd8 <udd_ctrl_endofrequest>
    1cf8:	ae df       	rcall	.-164    	; 0x1c56 <udd_ctrl_init>
    1cfa:	5e c0       	rjmp	.+188    	; 0x1db8 <udd_ctrl_in_sent+0xd0>
    1cfc:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <udd_ctrl_payload_nb_trans>
    1d00:	90 91 4a 23 	lds	r25, 0x234A	; 0x80234a <udd_ctrl_payload_nb_trans+0x1>
    1d04:	c0 91 cf 23 	lds	r28, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0xa>
    1d08:	d0 91 d0 23 	lds	r29, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0xb>
    1d0c:	c8 1b       	sub	r28, r24
    1d0e:	d9 0b       	sbc	r29, r25
    1d10:	71 f5       	brne	.+92     	; 0x1d6e <udd_ctrl_in_sent+0x86>
    1d12:	20 91 4b 23 	lds	r18, 0x234B	; 0x80234b <udd_ctrl_prev_payload_nb_trans>
    1d16:	30 91 4c 23 	lds	r19, 0x234C	; 0x80234c <udd_ctrl_prev_payload_nb_trans+0x1>
    1d1a:	82 0f       	add	r24, r18
    1d1c:	93 1f       	adc	r25, r19
    1d1e:	80 93 4b 23 	sts	0x234B, r24	; 0x80234b <udd_ctrl_prev_payload_nb_trans>
    1d22:	90 93 4c 23 	sts	0x234C, r25	; 0x80234c <udd_ctrl_prev_payload_nb_trans+0x1>
    1d26:	20 91 cb 23 	lds	r18, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1d2a:	30 91 cc 23 	lds	r19, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1d2e:	82 17       	cp	r24, r18
    1d30:	93 07       	cpc	r25, r19
    1d32:	21 f0       	breq	.+8      	; 0x1d3c <udd_ctrl_in_sent+0x54>
    1d34:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <b_shortpacket.5291>
    1d38:	88 23       	and	r24, r24
    1d3a:	41 f0       	breq	.+16     	; 0x1d4c <udd_ctrl_in_sent+0x64>
    1d3c:	84 e0       	ldi	r24, 0x04	; 4
    1d3e:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <udd_ep_control_state>
    1d42:	e4 e6       	ldi	r30, 0x64	; 100
    1d44:	f3 e2       	ldi	r31, 0x23	; 35
    1d46:	02 e0       	ldi	r16, 0x02	; 2
    1d48:	06 93       	lac	Z, r16
    1d4a:	36 c0       	rjmp	.+108    	; 0x1db8 <udd_ctrl_in_sent+0xd0>
    1d4c:	e0 91 d3 23 	lds	r30, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0xe>
    1d50:	f0 91 d4 23 	lds	r31, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0xf>
    1d54:	30 97       	sbiw	r30, 0x00	; 0
    1d56:	99 f0       	breq	.+38     	; 0x1d7e <udd_ctrl_in_sent+0x96>
    1d58:	19 95       	eicall
    1d5a:	88 23       	and	r24, r24
    1d5c:	81 f0       	breq	.+32     	; 0x1d7e <udd_ctrl_in_sent+0x96>
    1d5e:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <udd_ctrl_payload_nb_trans>
    1d62:	10 92 4a 23 	sts	0x234A, r1	; 0x80234a <udd_ctrl_payload_nb_trans+0x1>
    1d66:	c0 91 cf 23 	lds	r28, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0xa>
    1d6a:	d0 91 d0 23 	lds	r29, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0xb>
    1d6e:	c8 30       	cpi	r28, 0x08	; 8
    1d70:	d1 05       	cpc	r29, r1
    1d72:	28 f0       	brcs	.+10     	; 0x1d7e <udd_ctrl_in_sent+0x96>
    1d74:	10 92 f8 21 	sts	0x21F8, r1	; 0x8021f8 <b_shortpacket.5291>
    1d78:	c8 e0       	ldi	r28, 0x08	; 8
    1d7a:	d0 e0       	ldi	r29, 0x00	; 0
    1d7c:	03 c0       	rjmp	.+6      	; 0x1d84 <udd_ctrl_in_sent+0x9c>
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	80 93 f8 21 	sts	0x21F8, r24	; 0x8021f8 <b_shortpacket.5291>
    1d84:	e0 e5       	ldi	r30, 0x50	; 80
    1d86:	f3 e2       	ldi	r31, 0x23	; 35
    1d88:	c6 8f       	std	Z+30, r28	; 0x1e
    1d8a:	d7 8f       	std	Z+31, r29	; 0x1f
    1d8c:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <udd_ctrl_payload_nb_trans>
    1d90:	90 91 4a 23 	lds	r25, 0x234A	; 0x80234a <udd_ctrl_payload_nb_trans+0x1>
    1d94:	20 91 cd 23 	lds	r18, 0x23CD	; 0x8023cd <udd_g_ctrlreq+0x8>
    1d98:	30 91 ce 23 	lds	r19, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x9>
    1d9c:	28 0f       	add	r18, r24
    1d9e:	39 1f       	adc	r19, r25
    1da0:	20 a3       	std	Z+32, r18	; 0x20
    1da2:	31 a3       	std	Z+33, r19	; 0x21
    1da4:	c8 0f       	add	r28, r24
    1da6:	d9 1f       	adc	r29, r25
    1da8:	c0 93 49 23 	sts	0x2349, r28	; 0x802349 <udd_ctrl_payload_nb_trans>
    1dac:	d0 93 4a 23 	sts	0x234A, r29	; 0x80234a <udd_ctrl_payload_nb_trans+0x1>
    1db0:	ec e6       	ldi	r30, 0x6C	; 108
    1db2:	f3 e2       	ldi	r31, 0x23	; 35
    1db4:	02 e0       	ldi	r16, 0x02	; 2
    1db6:	06 93       	lac	Z, r16
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	0f 91       	pop	r16
    1dbe:	08 95       	ret

00001dc0 <udd_ep_get_size>:
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	81 81       	ldd	r24, Z+1	; 0x01
    1dc4:	e8 2f       	mov	r30, r24
    1dc6:	e7 70       	andi	r30, 0x07	; 7
    1dc8:	8e 2f       	mov	r24, r30
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	fc 01       	movw	r30, r24
    1dce:	31 97       	sbiw	r30, 0x01	; 1
    1dd0:	e7 30       	cpi	r30, 0x07	; 7
    1dd2:	f1 05       	cpc	r31, r1
    1dd4:	d0 f4       	brcc	.+52     	; 0x1e0a <udd_ep_get_size+0x4a>
    1dd6:	88 27       	eor	r24, r24
    1dd8:	e9 5f       	subi	r30, 0xF9	; 249
    1dda:	fe 4f       	sbci	r31, 0xFE	; 254
    1ddc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dde:	21 c7       	rjmp	.+3650   	; 0x2c22 <__tablejump2__>
    1de0:	80 e1       	ldi	r24, 0x10	; 16
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	08 95       	ret
    1de6:	80 e2       	ldi	r24, 0x20	; 32
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	08 95       	ret
    1dec:	80 e4       	ldi	r24, 0x40	; 64
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	08 95       	ret
    1df2:	80 e8       	ldi	r24, 0x80	; 128
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	08 95       	ret
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	08 95       	ret
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	92 e0       	ldi	r25, 0x02	; 2
    1e02:	08 95       	ret
    1e04:	8f ef       	ldi	r24, 0xFF	; 255
    1e06:	93 e0       	ldi	r25, 0x03	; 3
    1e08:	08 95       	ret
    1e0a:	88 e0       	ldi	r24, 0x08	; 8
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	08 95       	ret

00001e10 <udd_ep_get_job>:
    1e10:	28 2f       	mov	r18, r24
    1e12:	2f 70       	andi	r18, 0x0F	; 15
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	22 0f       	add	r18, r18
    1e18:	33 1f       	adc	r19, r19
    1e1a:	08 2e       	mov	r0, r24
    1e1c:	00 0c       	add	r0, r0
    1e1e:	99 0b       	sbc	r25, r25
    1e20:	88 27       	eor	r24, r24
    1e22:	99 0f       	add	r25, r25
    1e24:	88 1f       	adc	r24, r24
    1e26:	99 27       	eor	r25, r25
    1e28:	82 0f       	add	r24, r18
    1e2a:	93 1f       	adc	r25, r19
    1e2c:	02 97       	sbiw	r24, 0x02	; 2
    1e2e:	9c 01       	movw	r18, r24
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	22 0f       	add	r18, r18
    1e36:	33 1f       	adc	r19, r19
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	82 0f       	add	r24, r18
    1e3e:	93 1f       	adc	r25, r19
    1e40:	87 50       	subi	r24, 0x07	; 7
    1e42:	9d 4d       	sbci	r25, 0xDD	; 221
    1e44:	08 95       	ret

00001e46 <udd_ctrl_interrupt_tc_setup>:
    1e46:	0f 93       	push	r16
    1e48:	cf 93       	push	r28
    1e4a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1e4e:	80 ff       	sbrs	r24, 0
    1e50:	64 c0       	rjmp	.+200    	; 0x1f1a <udd_ctrl_interrupt_tc_setup+0xd4>
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1e58:	e4 e6       	ldi	r30, 0x64	; 100
    1e5a:	f3 e2       	ldi	r31, 0x23	; 35
    1e5c:	00 e8       	ldi	r16, 0x80	; 128
    1e5e:	06 93       	lac	Z, r16
    1e60:	ec e6       	ldi	r30, 0x6C	; 108
    1e62:	f3 e2       	ldi	r31, 0x23	; 35
    1e64:	00 e8       	ldi	r16, 0x80	; 128
    1e66:	06 93       	lac	Z, r16
    1e68:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1e6c:	e4 e6       	ldi	r30, 0x64	; 100
    1e6e:	f3 e2       	ldi	r31, 0x23	; 35
    1e70:	00 e1       	ldi	r16, 0x10	; 16
    1e72:	06 93       	lac	Z, r16
    1e74:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udd_ep_control_state>
    1e78:	88 23       	and	r24, r24
    1e7a:	29 f0       	breq	.+10     	; 0x1e86 <udd_ctrl_interrupt_tc_setup+0x40>
    1e7c:	83 50       	subi	r24, 0x03	; 3
    1e7e:	82 30       	cpi	r24, 0x02	; 2
    1e80:	08 f4       	brcc	.+2      	; 0x1e84 <udd_ctrl_interrupt_tc_setup+0x3e>
    1e82:	2a df       	rcall	.-428    	; 0x1cd8 <udd_ctrl_endofrequest>
    1e84:	e8 de       	rcall	.-560    	; 0x1c56 <udd_ctrl_init>
    1e86:	80 91 66 23 	lds	r24, 0x2366	; 0x802366 <udd_sram+0x16>
    1e8a:	90 91 67 23 	lds	r25, 0x2367	; 0x802367 <udd_sram+0x17>
    1e8e:	08 97       	sbiw	r24, 0x08	; 8
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <udd_ctrl_interrupt_tc_setup+0x4e>
    1e92:	45 c0       	rjmp	.+138    	; 0x1f1e <udd_ctrl_interrupt_tc_setup+0xd8>
    1e94:	88 e0       	ldi	r24, 0x08	; 8
    1e96:	e1 e4       	ldi	r30, 0x41	; 65
    1e98:	f3 e2       	ldi	r31, 0x23	; 35
    1e9a:	a5 ec       	ldi	r26, 0xC5	; 197
    1e9c:	b3 e2       	ldi	r27, 0x23	; 35
    1e9e:	01 90       	ld	r0, Z+
    1ea0:	0d 92       	st	X+, r0
    1ea2:	8a 95       	dec	r24
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <udd_ctrl_interrupt_tc_setup+0x58>
    1ea6:	e8 ec       	ldi	r30, 0xC8	; 200
    1ea8:	f4 e0       	ldi	r31, 0x04	; 4
    1eaa:	80 81       	ld	r24, Z
    1eac:	80 62       	ori	r24, 0x20	; 32
    1eae:	80 83       	st	Z, r24
    1eb0:	80 81       	ld	r24, Z
    1eb2:	80 62       	ori	r24, 0x20	; 32
    1eb4:	80 83       	st	Z, r24
    1eb6:	e9 db       	rcall	.-2094   	; 0x168a <udc_process_setup>
    1eb8:	c8 2f       	mov	r28, r24
    1eba:	81 11       	cpse	r24, r1
    1ebc:	03 c0       	rjmp	.+6      	; 0x1ec4 <udd_ctrl_interrupt_tc_setup+0x7e>
    1ebe:	f0 de       	rcall	.-544    	; 0x1ca0 <udd_ctrl_stall_data>
    1ec0:	c1 e0       	ldi	r28, 0x01	; 1
    1ec2:	2e c0       	rjmp	.+92     	; 0x1f20 <udd_ctrl_interrupt_tc_setup+0xda>
    1ec4:	80 91 c5 23 	lds	r24, 0x23C5	; 0x8023c5 <udd_g_ctrlreq>
    1ec8:	88 23       	and	r24, r24
    1eca:	6c f4       	brge	.+26     	; 0x1ee6 <udd_ctrl_interrupt_tc_setup+0xa0>
    1ecc:	10 92 4b 23 	sts	0x234B, r1	; 0x80234b <udd_ctrl_prev_payload_nb_trans>
    1ed0:	10 92 4c 23 	sts	0x234C, r1	; 0x80234c <udd_ctrl_prev_payload_nb_trans+0x1>
    1ed4:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <udd_ctrl_payload_nb_trans>
    1ed8:	10 92 4a 23 	sts	0x234A, r1	; 0x80234a <udd_ctrl_payload_nb_trans+0x1>
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <udd_ep_control_state>
    1ee2:	02 df       	rcall	.-508    	; 0x1ce8 <udd_ctrl_in_sent>
    1ee4:	1d c0       	rjmp	.+58     	; 0x1f20 <udd_ctrl_interrupt_tc_setup+0xda>
    1ee6:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    1eea:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    1eee:	89 2b       	or	r24, r25
    1ef0:	11 f4       	brne	.+4      	; 0x1ef6 <udd_ctrl_interrupt_tc_setup+0xb0>
    1ef2:	e4 de       	rcall	.-568    	; 0x1cbc <udd_ctrl_send_zlp_in>
    1ef4:	15 c0       	rjmp	.+42     	; 0x1f20 <udd_ctrl_interrupt_tc_setup+0xda>
    1ef6:	10 92 4b 23 	sts	0x234B, r1	; 0x80234b <udd_ctrl_prev_payload_nb_trans>
    1efa:	10 92 4c 23 	sts	0x234C, r1	; 0x80234c <udd_ctrl_prev_payload_nb_trans+0x1>
    1efe:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <udd_ctrl_payload_nb_trans>
    1f02:	10 92 4a 23 	sts	0x234A, r1	; 0x80234a <udd_ctrl_payload_nb_trans+0x1>
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <udd_ep_control_state>
    1f0c:	e4 e6       	ldi	r30, 0x64	; 100
    1f0e:	f3 e2       	ldi	r31, 0x23	; 35
    1f10:	02 e0       	ldi	r16, 0x02	; 2
    1f12:	06 93       	lac	Z, r16
    1f14:	00 e2       	ldi	r16, 0x20	; 32
    1f16:	06 93       	lac	Z, r16
    1f18:	03 c0       	rjmp	.+6      	; 0x1f20 <udd_ctrl_interrupt_tc_setup+0xda>
    1f1a:	c0 e0       	ldi	r28, 0x00	; 0
    1f1c:	01 c0       	rjmp	.+2      	; 0x1f20 <udd_ctrl_interrupt_tc_setup+0xda>
    1f1e:	c1 e0       	ldi	r28, 0x01	; 1
    1f20:	8c 2f       	mov	r24, r28
    1f22:	cf 91       	pop	r28
    1f24:	0f 91       	pop	r16
    1f26:	08 95       	ret

00001f28 <udd_ep_trans_complet>:
    1f28:	8f 92       	push	r8
    1f2a:	9f 92       	push	r9
    1f2c:	af 92       	push	r10
    1f2e:	bf 92       	push	r11
    1f30:	df 92       	push	r13
    1f32:	ef 92       	push	r14
    1f34:	ff 92       	push	r15
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	d8 2e       	mov	r13, r24
    1f40:	67 df       	rcall	.-306    	; 0x1e10 <udd_ep_get_job>
    1f42:	8c 01       	movw	r16, r24
    1f44:	cd 2d       	mov	r28, r13
    1f46:	cf 70       	andi	r28, 0x0F	; 15
    1f48:	d0 e0       	ldi	r29, 0x00	; 0
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	cd 2d       	mov	r28, r13
    1f52:	0d 2c       	mov	r0, r13
    1f54:	00 0c       	add	r0, r0
    1f56:	dd 0b       	sbc	r29, r29
    1f58:	cc 27       	eor	r28, r28
    1f5a:	dd 0f       	add	r29, r29
    1f5c:	cc 1f       	adc	r28, r28
    1f5e:	dd 27       	eor	r29, r29
    1f60:	c8 0f       	add	r28, r24
    1f62:	d9 1f       	adc	r29, r25
    1f64:	ce 01       	movw	r24, r28
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	9c 01       	movw	r18, r24
    1f74:	2c 59       	subi	r18, 0x9C	; 156
    1f76:	3c 4d       	sbci	r19, 0xDC	; 220
    1f78:	79 01       	movw	r14, r18
    1f7a:	c9 01       	movw	r24, r18
    1f7c:	21 df       	rcall	.-446    	; 0x1dc0 <udd_ep_get_size>
    1f7e:	4c 01       	movw	r8, r24
    1f80:	dd 20       	and	r13, r13
    1f82:	0c f0       	brlt	.+2      	; 0x1f86 <udd_ep_trans_complet+0x5e>
    1f84:	79 c0       	rjmp	.+242    	; 0x2078 <udd_ep_trans_complet+0x150>
    1f86:	fe 01       	movw	r30, r28
    1f88:	ee 0f       	add	r30, r30
    1f8a:	ff 1f       	adc	r31, r31
    1f8c:	ee 0f       	add	r30, r30
    1f8e:	ff 1f       	adc	r31, r31
    1f90:	ee 0f       	add	r30, r30
    1f92:	ff 1f       	adc	r31, r31
    1f94:	e0 5b       	subi	r30, 0xB0	; 176
    1f96:	fc 4d       	sbci	r31, 0xDC	; 220
    1f98:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f9a:	33 8d       	ldd	r19, Z+27	; 0x1b
    1f9c:	d8 01       	movw	r26, r16
    1f9e:	15 96       	adiw	r26, 0x05	; 5
    1fa0:	8d 91       	ld	r24, X+
    1fa2:	9c 91       	ld	r25, X
    1fa4:	16 97       	sbiw	r26, 0x06	; 6
    1fa6:	82 0f       	add	r24, r18
    1fa8:	93 1f       	adc	r25, r19
    1faa:	15 96       	adiw	r26, 0x05	; 5
    1fac:	8d 93       	st	X+, r24
    1fae:	9c 93       	st	X, r25
    1fb0:	16 97       	sbiw	r26, 0x06	; 6
    1fb2:	13 96       	adiw	r26, 0x03	; 3
    1fb4:	2d 91       	ld	r18, X+
    1fb6:	3c 91       	ld	r19, X
    1fb8:	14 97       	sbiw	r26, 0x04	; 4
    1fba:	82 17       	cp	r24, r18
    1fbc:	93 07       	cpc	r25, r19
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <udd_ep_trans_complet+0x9a>
    1fc0:	45 c0       	rjmp	.+138    	; 0x204c <udd_ep_trans_complet+0x124>
    1fc2:	28 1b       	sub	r18, r24
    1fc4:	39 0b       	sbc	r19, r25
    1fc6:	21 15       	cp	r18, r1
    1fc8:	b4 e0       	ldi	r27, 0x04	; 4
    1fca:	3b 07       	cpc	r19, r27
    1fcc:	38 f0       	brcs	.+14     	; 0x1fdc <udd_ep_trans_complet+0xb4>
    1fce:	2f ef       	ldi	r18, 0xFF	; 255
    1fd0:	33 e0       	ldi	r19, 0x03	; 3
    1fd2:	c9 01       	movw	r24, r18
    1fd4:	b4 01       	movw	r22, r8
    1fd6:	11 d6       	rcall	.+3106   	; 0x2bfa <__udivmodhi4>
    1fd8:	28 1b       	sub	r18, r24
    1fda:	39 0b       	sbc	r19, r25
    1fdc:	f8 01       	movw	r30, r16
    1fde:	80 81       	ld	r24, Z
    1fe0:	81 ff       	sbrs	r24, 1
    1fe2:	09 c0       	rjmp	.+18     	; 0x1ff6 <udd_ep_trans_complet+0xce>
    1fe4:	c9 01       	movw	r24, r18
    1fe6:	b4 01       	movw	r22, r8
    1fe8:	08 d6       	rcall	.+3088   	; 0x2bfa <__udivmodhi4>
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	89 2b       	or	r24, r25
    1fee:	09 f0       	breq	.+2      	; 0x1ff2 <udd_ep_trans_complet+0xca>
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	84 2f       	mov	r24, r20
    1ff4:	01 c0       	rjmp	.+2      	; 0x1ff8 <udd_ep_trans_complet+0xd0>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	d8 01       	movw	r26, r16
    1ffa:	9c 91       	ld	r25, X
    1ffc:	80 fb       	bst	r24, 0
    1ffe:	91 f9       	bld	r25, 1
    2000:	9c 93       	st	X, r25
    2002:	fe 01       	movw	r30, r28
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	ee 0f       	add	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	ee 0f       	add	r30, r30
    200e:	ff 1f       	adc	r31, r31
    2010:	e0 5b       	subi	r30, 0xB0	; 176
    2012:	fc 4d       	sbci	r31, 0xDC	; 220
    2014:	12 8e       	std	Z+26, r1	; 0x1a
    2016:	13 8e       	std	Z+27, r1	; 0x1b
    2018:	26 8b       	std	Z+22, r18	; 0x16
    201a:	37 8b       	std	Z+23, r19	; 0x17
    201c:	11 96       	adiw	r26, 0x01	; 1
    201e:	2d 91       	ld	r18, X+
    2020:	3c 91       	ld	r19, X
    2022:	12 97       	sbiw	r26, 0x02	; 2
    2024:	15 96       	adiw	r26, 0x05	; 5
    2026:	8d 91       	ld	r24, X+
    2028:	9c 91       	ld	r25, X
    202a:	16 97       	sbiw	r26, 0x06	; 6
    202c:	82 0f       	add	r24, r18
    202e:	93 1f       	adc	r25, r19
    2030:	cc 0f       	add	r28, r28
    2032:	dd 1f       	adc	r29, r29
    2034:	cc 0f       	add	r28, r28
    2036:	dd 1f       	adc	r29, r29
    2038:	cc 0f       	add	r28, r28
    203a:	dd 1f       	adc	r29, r29
    203c:	c8 59       	subi	r28, 0x98	; 152
    203e:	dc 4d       	sbci	r29, 0xDC	; 220
    2040:	88 83       	st	Y, r24
    2042:	99 83       	std	Y+1, r25	; 0x01
    2044:	f7 01       	movw	r30, r14
    2046:	02 e0       	ldi	r16, 0x02	; 2
    2048:	06 93       	lac	Z, r16
    204a:	e0 c0       	rjmp	.+448    	; 0x220c <udd_ep_trans_complet+0x2e4>
    204c:	d8 01       	movw	r26, r16
    204e:	8c 91       	ld	r24, X
    2050:	81 ff       	sbrs	r24, 1
    2052:	c9 c0       	rjmp	.+402    	; 0x21e6 <udd_ep_trans_complet+0x2be>
    2054:	8d 7f       	andi	r24, 0xFD	; 253
    2056:	8c 93       	st	X, r24
    2058:	cc 0f       	add	r28, r28
    205a:	dd 1f       	adc	r29, r29
    205c:	cc 0f       	add	r28, r28
    205e:	dd 1f       	adc	r29, r29
    2060:	cc 0f       	add	r28, r28
    2062:	dd 1f       	adc	r29, r29
    2064:	c0 5b       	subi	r28, 0xB0	; 176
    2066:	dc 4d       	sbci	r29, 0xDC	; 220
    2068:	1a 8e       	std	Y+26, r1	; 0x1a
    206a:	1b 8e       	std	Y+27, r1	; 0x1b
    206c:	1e 8a       	std	Y+22, r1	; 0x16
    206e:	1f 8a       	std	Y+23, r1	; 0x17
    2070:	f7 01       	movw	r30, r14
    2072:	02 e0       	ldi	r16, 0x02	; 2
    2074:	06 93       	lac	Z, r16
    2076:	ca c0       	rjmp	.+404    	; 0x220c <udd_ep_trans_complet+0x2e4>
    2078:	fe 01       	movw	r30, r28
    207a:	ee 0f       	add	r30, r30
    207c:	ff 1f       	adc	r31, r31
    207e:	ee 0f       	add	r30, r30
    2080:	ff 1f       	adc	r31, r31
    2082:	ee 0f       	add	r30, r30
    2084:	ff 1f       	adc	r31, r31
    2086:	e0 5b       	subi	r30, 0xB0	; 176
    2088:	fc 4d       	sbci	r31, 0xDC	; 220
    208a:	a6 88       	ldd	r10, Z+22	; 0x16
    208c:	b7 88       	ldd	r11, Z+23	; 0x17
    208e:	d8 01       	movw	r26, r16
    2090:	8c 91       	ld	r24, X
    2092:	82 ff       	sbrs	r24, 2
    2094:	19 c0       	rjmp	.+50     	; 0x20c8 <udd_ep_trans_complet+0x1a0>
    2096:	11 96       	adiw	r26, 0x01	; 1
    2098:	ed 91       	ld	r30, X+
    209a:	fc 91       	ld	r31, X
    209c:	12 97       	sbiw	r26, 0x02	; 2
    209e:	15 96       	adiw	r26, 0x05	; 5
    20a0:	2d 91       	ld	r18, X+
    20a2:	3c 91       	ld	r19, X
    20a4:	16 97       	sbiw	r26, 0x06	; 6
    20a6:	13 96       	adiw	r26, 0x03	; 3
    20a8:	8d 91       	ld	r24, X+
    20aa:	9c 91       	ld	r25, X
    20ac:	14 97       	sbiw	r26, 0x04	; 4
    20ae:	b4 01       	movw	r22, r8
    20b0:	a4 d5       	rcall	.+2888   	; 0x2bfa <__udivmodhi4>
    20b2:	b0 e4       	ldi	r27, 0x40	; 64
    20b4:	db 9e       	mul	r13, r27
    20b6:	b0 01       	movw	r22, r0
    20b8:	11 24       	eor	r1, r1
    20ba:	67 54       	subi	r22, 0x47	; 71
    20bc:	7e 4d       	sbci	r23, 0xDE	; 222
    20be:	ac 01       	movw	r20, r24
    20c0:	cf 01       	movw	r24, r30
    20c2:	82 0f       	add	r24, r18
    20c4:	93 1f       	adc	r25, r19
    20c6:	b5 d5       	rcall	.+2922   	; 0x2c32 <memcpy>
    20c8:	f8 01       	movw	r30, r16
    20ca:	25 81       	ldd	r18, Z+5	; 0x05
    20cc:	36 81       	ldd	r19, Z+6	; 0x06
    20ce:	2a 0d       	add	r18, r10
    20d0:	3b 1d       	adc	r19, r11
    20d2:	25 83       	std	Z+5, r18	; 0x05
    20d4:	36 83       	std	Z+6, r19	; 0x06
    20d6:	83 81       	ldd	r24, Z+3	; 0x03
    20d8:	94 81       	ldd	r25, Z+4	; 0x04
    20da:	82 17       	cp	r24, r18
    20dc:	93 07       	cpc	r25, r19
    20de:	68 f4       	brcc	.+26     	; 0x20fa <udd_ep_trans_complet+0x1d2>
    20e0:	85 83       	std	Z+5, r24	; 0x05
    20e2:	96 83       	std	Z+6, r25	; 0x06
    20e4:	cc 0f       	add	r28, r28
    20e6:	dd 1f       	adc	r29, r29
    20e8:	cc 0f       	add	r28, r28
    20ea:	dd 1f       	adc	r29, r29
    20ec:	cc 0f       	add	r28, r28
    20ee:	dd 1f       	adc	r29, r29
    20f0:	c0 5b       	subi	r28, 0xB0	; 176
    20f2:	dc 4d       	sbci	r29, 0xDC	; 220
    20f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20f6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20f8:	76 c0       	rjmp	.+236    	; 0x21e6 <udd_ep_trans_complet+0x2be>
    20fa:	fe 01       	movw	r30, r28
    20fc:	ee 0f       	add	r30, r30
    20fe:	ff 1f       	adc	r31, r31
    2100:	ee 0f       	add	r30, r30
    2102:	ff 1f       	adc	r31, r31
    2104:	ee 0f       	add	r30, r30
    2106:	ff 1f       	adc	r31, r31
    2108:	e0 5b       	subi	r30, 0xB0	; 176
    210a:	fc 4d       	sbci	r31, 0xDC	; 220
    210c:	42 8d       	ldd	r20, Z+26	; 0x1a
    210e:	53 8d       	ldd	r21, Z+27	; 0x1b
    2110:	a4 16       	cp	r10, r20
    2112:	b5 06       	cpc	r11, r21
    2114:	09 f0       	breq	.+2      	; 0x2118 <udd_ep_trans_complet+0x1f0>
    2116:	67 c0       	rjmp	.+206    	; 0x21e6 <udd_ep_trans_complet+0x2be>
    2118:	28 17       	cp	r18, r24
    211a:	39 07       	cpc	r19, r25
    211c:	09 f4       	brne	.+2      	; 0x2120 <udd_ep_trans_complet+0x1f8>
    211e:	63 c0       	rjmp	.+198    	; 0x21e6 <udd_ep_trans_complet+0x2be>
    2120:	ac 01       	movw	r20, r24
    2122:	42 1b       	sub	r20, r18
    2124:	53 0b       	sbc	r21, r19
    2126:	9a 01       	movw	r18, r20
    2128:	21 15       	cp	r18, r1
    212a:	54 e0       	ldi	r21, 0x04	; 4
    212c:	35 07       	cpc	r19, r21
    212e:	40 f0       	brcs	.+16     	; 0x2140 <udd_ep_trans_complet+0x218>
    2130:	2f ef       	ldi	r18, 0xFF	; 255
    2132:	33 e0       	ldi	r19, 0x03	; 3
    2134:	c9 01       	movw	r24, r18
    2136:	b4 01       	movw	r22, r8
    2138:	60 d5       	rcall	.+2752   	; 0x2bfa <__udivmodhi4>
    213a:	28 1b       	sub	r18, r24
    213c:	39 0b       	sbc	r19, r25
    213e:	05 c0       	rjmp	.+10     	; 0x214a <udd_ep_trans_complet+0x222>
    2140:	c9 01       	movw	r24, r18
    2142:	b4 01       	movw	r22, r8
    2144:	5a d5       	rcall	.+2740   	; 0x2bfa <__udivmodhi4>
    2146:	28 1b       	sub	r18, r24
    2148:	39 0b       	sbc	r19, r25
    214a:	fe 01       	movw	r30, r28
    214c:	ee 0f       	add	r30, r30
    214e:	ff 1f       	adc	r31, r31
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	ee 0f       	add	r30, r30
    2156:	ff 1f       	adc	r31, r31
    2158:	e0 5b       	subi	r30, 0xB0	; 176
    215a:	fc 4d       	sbci	r31, 0xDC	; 220
    215c:	16 8a       	std	Z+22, r1	; 0x16
    215e:	17 8a       	std	Z+23, r1	; 0x17
    2160:	28 15       	cp	r18, r8
    2162:	39 05       	cpc	r19, r9
    2164:	00 f5       	brcc	.+64     	; 0x21a6 <udd_ep_trans_complet+0x27e>
    2166:	d8 01       	movw	r26, r16
    2168:	8c 91       	ld	r24, X
    216a:	84 60       	ori	r24, 0x04	; 4
    216c:	8c 93       	st	X, r24
    216e:	b0 e4       	ldi	r27, 0x40	; 64
    2170:	db 9e       	mul	r13, r27
    2172:	c0 01       	movw	r24, r0
    2174:	11 24       	eor	r1, r1
    2176:	87 54       	subi	r24, 0x47	; 71
    2178:	9e 4d       	sbci	r25, 0xDE	; 222
    217a:	fe 01       	movw	r30, r28
    217c:	ee 0f       	add	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	ee 0f       	add	r30, r30
    2182:	ff 1f       	adc	r31, r31
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	e8 59       	subi	r30, 0x98	; 152
    218a:	fc 4d       	sbci	r31, 0xDC	; 220
    218c:	80 83       	st	Z, r24
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	cc 0f       	add	r28, r28
    2192:	dd 1f       	adc	r29, r29
    2194:	cc 0f       	add	r28, r28
    2196:	dd 1f       	adc	r29, r29
    2198:	cc 0f       	add	r28, r28
    219a:	dd 1f       	adc	r29, r29
    219c:	c0 5b       	subi	r28, 0xB0	; 176
    219e:	dc 4d       	sbci	r29, 0xDC	; 220
    21a0:	8a 8e       	std	Y+26, r8	; 0x1a
    21a2:	9b 8e       	std	Y+27, r9	; 0x1b
    21a4:	1c c0       	rjmp	.+56     	; 0x21de <udd_ep_trans_complet+0x2b6>
    21a6:	f8 01       	movw	r30, r16
    21a8:	41 81       	ldd	r20, Z+1	; 0x01
    21aa:	52 81       	ldd	r21, Z+2	; 0x02
    21ac:	85 81       	ldd	r24, Z+5	; 0x05
    21ae:	96 81       	ldd	r25, Z+6	; 0x06
    21b0:	84 0f       	add	r24, r20
    21b2:	95 1f       	adc	r25, r21
    21b4:	fe 01       	movw	r30, r28
    21b6:	ee 0f       	add	r30, r30
    21b8:	ff 1f       	adc	r31, r31
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	ee 0f       	add	r30, r30
    21c0:	ff 1f       	adc	r31, r31
    21c2:	e8 59       	subi	r30, 0x98	; 152
    21c4:	fc 4d       	sbci	r31, 0xDC	; 220
    21c6:	80 83       	st	Z, r24
    21c8:	91 83       	std	Z+1, r25	; 0x01
    21ca:	cc 0f       	add	r28, r28
    21cc:	dd 1f       	adc	r29, r29
    21ce:	cc 0f       	add	r28, r28
    21d0:	dd 1f       	adc	r29, r29
    21d2:	cc 0f       	add	r28, r28
    21d4:	dd 1f       	adc	r29, r29
    21d6:	c0 5b       	subi	r28, 0xB0	; 176
    21d8:	dc 4d       	sbci	r29, 0xDC	; 220
    21da:	2a 8f       	std	Y+26, r18	; 0x1a
    21dc:	3b 8f       	std	Y+27, r19	; 0x1b
    21de:	f7 01       	movw	r30, r14
    21e0:	02 e0       	ldi	r16, 0x02	; 2
    21e2:	06 93       	lac	Z, r16
    21e4:	13 c0       	rjmp	.+38     	; 0x220c <udd_ep_trans_complet+0x2e4>
    21e6:	d8 01       	movw	r26, r16
    21e8:	8c 91       	ld	r24, X
    21ea:	80 ff       	sbrs	r24, 0
    21ec:	0f c0       	rjmp	.+30     	; 0x220c <udd_ep_trans_complet+0x2e4>
    21ee:	8e 7f       	andi	r24, 0xFE	; 254
    21f0:	8c 93       	st	X, r24
    21f2:	17 96       	adiw	r26, 0x07	; 7
    21f4:	ed 91       	ld	r30, X+
    21f6:	fc 91       	ld	r31, X
    21f8:	18 97       	sbiw	r26, 0x08	; 8
    21fa:	30 97       	sbiw	r30, 0x00	; 0
    21fc:	39 f0       	breq	.+14     	; 0x220c <udd_ep_trans_complet+0x2e4>
    21fe:	15 96       	adiw	r26, 0x05	; 5
    2200:	6d 91       	ld	r22, X+
    2202:	7c 91       	ld	r23, X
    2204:	16 97       	sbiw	r26, 0x06	; 6
    2206:	4d 2d       	mov	r20, r13
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	19 95       	eicall
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	1f 91       	pop	r17
    2212:	0f 91       	pop	r16
    2214:	ff 90       	pop	r15
    2216:	ef 90       	pop	r14
    2218:	df 90       	pop	r13
    221a:	bf 90       	pop	r11
    221c:	af 90       	pop	r10
    221e:	9f 90       	pop	r9
    2220:	8f 90       	pop	r8
    2222:	08 95       	ret

00002224 <udd_attach>:
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	1f 92       	push	r1
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	8f b7       	in	r24, 0x3f	; 63
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	f8 94       	cli
    2236:	19 81       	ldd	r17, Y+1	; 0x01
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	d5 dc       	rcall	.-1622   	; 0x1be6 <udd_sleep_mode>
    223c:	ea ec       	ldi	r30, 0xCA	; 202
    223e:	f4 e0       	ldi	r31, 0x04	; 4
    2240:	80 e4       	ldi	r24, 0x40	; 64
    2242:	80 83       	st	Z, r24
    2244:	80 e2       	ldi	r24, 0x20	; 32
    2246:	80 83       	st	Z, r24
    2248:	e1 ec       	ldi	r30, 0xC1	; 193
    224a:	f4 e0       	ldi	r31, 0x04	; 4
    224c:	80 81       	ld	r24, Z
    224e:	81 60       	ori	r24, 0x01	; 1
    2250:	80 83       	st	Z, r24
    2252:	a9 ec       	ldi	r26, 0xC9	; 201
    2254:	b4 e0       	ldi	r27, 0x04	; 4
    2256:	8c 91       	ld	r24, X
    2258:	82 60       	ori	r24, 0x02	; 2
    225a:	8c 93       	st	X, r24
    225c:	e8 ec       	ldi	r30, 0xC8	; 200
    225e:	f4 e0       	ldi	r31, 0x04	; 4
    2260:	80 81       	ld	r24, Z
    2262:	80 64       	ori	r24, 0x40	; 64
    2264:	80 83       	st	Z, r24
    2266:	8c 91       	ld	r24, X
    2268:	81 60       	ori	r24, 0x01	; 1
    226a:	8c 93       	st	X, r24
    226c:	80 81       	ld	r24, Z
    226e:	80 68       	ori	r24, 0x80	; 128
    2270:	80 83       	st	Z, r24
    2272:	1f bf       	out	0x3f, r17	; 63
    2274:	0f 90       	pop	r0
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	1f 91       	pop	r17
    227c:	08 95       	ret

0000227e <udd_enable>:
    227e:	0f 93       	push	r16
    2280:	1f 93       	push	r17
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	1f 92       	push	r1
    2288:	1f 92       	push	r1
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	00 e6       	ldi	r16, 0x60	; 96
    2290:	10 e0       	ldi	r17, 0x00	; 0
    2292:	f8 01       	movw	r30, r16
    2294:	10 82       	st	Z, r1
    2296:	80 e3       	ldi	r24, 0x30	; 48
    2298:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <sysclk_enable_usb>
    229c:	e0 ec       	ldi	r30, 0xC0	; 192
    229e:	f4 e0       	ldi	r31, 0x04	; 4
    22a0:	80 81       	ld	r24, Z
    22a2:	80 64       	ori	r24, 0x40	; 64
    22a4:	80 83       	st	Z, r24
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	f8 01       	movw	r30, r16
    22aa:	80 83       	st	Z, r24
    22ac:	8f b7       	in	r24, 0x3f	; 63
    22ae:	8a 83       	std	Y+2, r24	; 0x02
    22b0:	f8 94       	cli
    22b2:	1a 81       	ldd	r17, Y+2	; 0x02
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	fc 01       	movw	r30, r24
    22ba:	ee 0f       	add	r30, r30
    22bc:	ff 1f       	adc	r31, r31
    22be:	ee 0f       	add	r30, r30
    22c0:	ff 1f       	adc	r31, r31
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	e0 5b       	subi	r30, 0xB0	; 176
    22c8:	fc 4d       	sbci	r31, 0xDC	; 220
    22ca:	15 8a       	std	Z+21, r1	; 0x15
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	8a 30       	cpi	r24, 0x0A	; 10
    22d0:	91 05       	cpc	r25, r1
    22d2:	91 f7       	brne	.-28     	; 0x22b8 <udd_enable+0x3a>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	fc 01       	movw	r30, r24
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	ee 0f       	add	r30, r30
    22e0:	ff 1f       	adc	r31, r31
    22e2:	ee 0f       	add	r30, r30
    22e4:	ff 1f       	adc	r31, r31
    22e6:	e8 0f       	add	r30, r24
    22e8:	f9 1f       	adc	r31, r25
    22ea:	e7 50       	subi	r30, 0x07	; 7
    22ec:	fd 4d       	sbci	r31, 0xDD	; 221
    22ee:	20 81       	ld	r18, Z
    22f0:	2e 7f       	andi	r18, 0xFE	; 254
    22f2:	20 83       	st	Z, r18
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	88 30       	cpi	r24, 0x08	; 8
    22f8:	91 05       	cpc	r25, r1
    22fa:	71 f7       	brne	.-36     	; 0x22d8 <udd_enable+0x5a>
    22fc:	6a e1       	ldi	r22, 0x1A	; 26
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	82 e0       	ldi	r24, 0x02	; 2
    2302:	61 dc       	rcall	.-1854   	; 0x1bc6 <nvm_read_byte>
    2304:	8f 3f       	cpi	r24, 0xFF	; 255
    2306:	19 f0       	breq	.+6      	; 0x230e <udd_enable+0x90>
    2308:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <udd_enable+0x96>
    230e:	8f e1       	ldi	r24, 0x1F	; 31
    2310:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    2314:	6b e1       	ldi	r22, 0x1B	; 27
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	55 dc       	rcall	.-1878   	; 0x1bc6 <nvm_read_byte>
    231c:	8f 3f       	cpi	r24, 0xFF	; 255
    231e:	19 f0       	breq	.+6      	; 0x2326 <udd_enable+0xa8>
    2320:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    2324:	03 c0       	rjmp	.+6      	; 0x232c <udd_enable+0xae>
    2326:	8f e1       	ldi	r24, 0x1F	; 31
    2328:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    232c:	e0 ec       	ldi	r30, 0xC0	; 192
    232e:	f4 e0       	ldi	r31, 0x04	; 4
    2330:	80 81       	ld	r24, Z
    2332:	84 60       	ori	r24, 0x04	; 4
    2334:	80 83       	st	Z, r24
    2336:	80 81       	ld	r24, Z
    2338:	80 68       	ori	r24, 0x80	; 128
    233a:	80 83       	st	Z, r24
    233c:	80 81       	ld	r24, Z
    233e:	80 61       	ori	r24, 0x10	; 16
    2340:	80 83       	st	Z, r24
    2342:	84 e6       	ldi	r24, 0x64	; 100
    2344:	93 e2       	ldi	r25, 0x23	; 35
    2346:	86 83       	std	Z+6, r24	; 0x06
    2348:	97 83       	std	Z+7, r25	; 0x07
    234a:	80 81       	ld	r24, Z
    234c:	80 62       	ori	r24, 0x20	; 32
    234e:	80 83       	st	Z, r24
    2350:	8f ef       	ldi	r24, 0xFF	; 255
    2352:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    2356:	e8 ec       	ldi	r30, 0xC8	; 200
    2358:	f4 e0       	ldi	r31, 0x04	; 4
    235a:	80 81       	ld	r24, Z
    235c:	81 60       	ori	r24, 0x01	; 1
    235e:	80 83       	st	Z, r24
    2360:	10 92 b8 23 	sts	0x23B8, r1	; 0x8023b8 <udd_b_idle>
    2364:	80 91 c4 23 	lds	r24, 0x23C4	; 0x8023c4 <sleepmgr_locks+0x5>
    2368:	8f 3f       	cpi	r24, 0xFF	; 255
    236a:	09 f4       	brne	.+2      	; 0x236e <udd_enable+0xf0>
    236c:	ff cf       	rjmp	.-2      	; 0x236c <udd_enable+0xee>
    236e:	8f b7       	in	r24, 0x3f	; 63
    2370:	89 83       	std	Y+1, r24	; 0x01
    2372:	f8 94       	cli
    2374:	99 81       	ldd	r25, Y+1	; 0x01
    2376:	ef eb       	ldi	r30, 0xBF	; 191
    2378:	f3 e2       	ldi	r31, 0x23	; 35
    237a:	85 81       	ldd	r24, Z+5	; 0x05
    237c:	8f 5f       	subi	r24, 0xFF	; 255
    237e:	85 83       	std	Z+5, r24	; 0x05
    2380:	9f bf       	out	0x3f, r25	; 63
    2382:	50 df       	rcall	.-352    	; 0x2224 <udd_attach>
    2384:	1f bf       	out	0x3f, r17	; 63
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	1f 91       	pop	r17
    2390:	0f 91       	pop	r16
    2392:	08 95       	ret

00002394 <udd_set_address>:
    2394:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2398:	08 95       	ret

0000239a <udd_getaddress>:
    239a:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    239e:	08 95       	ret

000023a0 <udd_set_setup_payload>:
    23a0:	e5 ec       	ldi	r30, 0xC5	; 197
    23a2:	f3 e2       	ldi	r31, 0x23	; 35
    23a4:	80 87       	std	Z+8, r24	; 0x08
    23a6:	91 87       	std	Z+9, r25	; 0x09
    23a8:	62 87       	std	Z+10, r22	; 0x0a
    23aa:	73 87       	std	Z+11, r23	; 0x0b
    23ac:	08 95       	ret

000023ae <udd_ep_alloc>:
    23ae:	28 2f       	mov	r18, r24
    23b0:	2f 70       	andi	r18, 0x0F	; 15
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	22 0f       	add	r18, r18
    23b6:	33 1f       	adc	r19, r19
    23b8:	08 2e       	mov	r0, r24
    23ba:	00 0c       	add	r0, r0
    23bc:	99 0b       	sbc	r25, r25
    23be:	88 27       	eor	r24, r24
    23c0:	99 0f       	add	r25, r25
    23c2:	88 1f       	adc	r24, r24
    23c4:	99 27       	eor	r25, r25
    23c6:	82 0f       	add	r24, r18
    23c8:	93 1f       	adc	r25, r19
    23ca:	fc 01       	movw	r30, r24
    23cc:	ee 0f       	add	r30, r30
    23ce:	ff 1f       	adc	r31, r31
    23d0:	ee 0f       	add	r30, r30
    23d2:	ff 1f       	adc	r31, r31
    23d4:	ee 0f       	add	r30, r30
    23d6:	ff 1f       	adc	r31, r31
    23d8:	e0 5b       	subi	r30, 0xB0	; 176
    23da:	fc 4d       	sbci	r31, 0xDC	; 220
    23dc:	25 89       	ldd	r18, Z+21	; 0x15
    23de:	20 7c       	andi	r18, 0xC0	; 192
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <udd_ep_alloc+0x36>
    23e2:	69 c0       	rjmp	.+210    	; 0x24b6 <udd_ep_alloc+0x108>
    23e4:	63 70       	andi	r22, 0x03	; 3
    23e6:	61 30       	cpi	r22, 0x01	; 1
    23e8:	11 f0       	breq	.+4      	; 0x23ee <udd_ep_alloc+0x40>
    23ea:	18 f4       	brcc	.+6      	; 0x23f2 <udd_ep_alloc+0x44>
    23ec:	04 c0       	rjmp	.+8      	; 0x23f6 <udd_ep_alloc+0x48>
    23ee:	60 ec       	ldi	r22, 0xC0	; 192
    23f0:	03 c0       	rjmp	.+6      	; 0x23f8 <udd_ep_alloc+0x4a>
    23f2:	60 e8       	ldi	r22, 0x80	; 128
    23f4:	01 c0       	rjmp	.+2      	; 0x23f8 <udd_ep_alloc+0x4a>
    23f6:	60 e4       	ldi	r22, 0x40	; 64
    23f8:	40 38       	cpi	r20, 0x80	; 128
    23fa:	51 05       	cpc	r21, r1
    23fc:	e9 f0       	breq	.+58     	; 0x2438 <udd_ep_alloc+0x8a>
    23fe:	50 f4       	brcc	.+20     	; 0x2414 <udd_ep_alloc+0x66>
    2400:	40 32       	cpi	r20, 0x20	; 32
    2402:	51 05       	cpc	r21, r1
    2404:	a9 f0       	breq	.+42     	; 0x2430 <udd_ep_alloc+0x82>
    2406:	40 34       	cpi	r20, 0x40	; 64
    2408:	51 05       	cpc	r21, r1
    240a:	a1 f0       	breq	.+40     	; 0x2434 <udd_ep_alloc+0x86>
    240c:	40 31       	cpi	r20, 0x10	; 16
    240e:	51 05       	cpc	r21, r1
    2410:	d9 f4       	brne	.+54     	; 0x2448 <udd_ep_alloc+0x9a>
    2412:	0c c0       	rjmp	.+24     	; 0x242c <udd_ep_alloc+0x7e>
    2414:	41 15       	cp	r20, r1
    2416:	22 e0       	ldi	r18, 0x02	; 2
    2418:	52 07       	cpc	r21, r18
    241a:	91 f0       	breq	.+36     	; 0x2440 <udd_ep_alloc+0x92>
    241c:	4f 3f       	cpi	r20, 0xFF	; 255
    241e:	23 e0       	ldi	r18, 0x03	; 3
    2420:	52 07       	cpc	r21, r18
    2422:	81 f0       	breq	.+32     	; 0x2444 <udd_ep_alloc+0x96>
    2424:	41 15       	cp	r20, r1
    2426:	51 40       	sbci	r21, 0x01	; 1
    2428:	79 f4       	brne	.+30     	; 0x2448 <udd_ep_alloc+0x9a>
    242a:	08 c0       	rjmp	.+16     	; 0x243c <udd_ep_alloc+0x8e>
    242c:	21 e0       	ldi	r18, 0x01	; 1
    242e:	0d c0       	rjmp	.+26     	; 0x244a <udd_ep_alloc+0x9c>
    2430:	22 e0       	ldi	r18, 0x02	; 2
    2432:	0b c0       	rjmp	.+22     	; 0x244a <udd_ep_alloc+0x9c>
    2434:	23 e0       	ldi	r18, 0x03	; 3
    2436:	09 c0       	rjmp	.+18     	; 0x244a <udd_ep_alloc+0x9c>
    2438:	24 e0       	ldi	r18, 0x04	; 4
    243a:	07 c0       	rjmp	.+14     	; 0x244a <udd_ep_alloc+0x9c>
    243c:	25 e0       	ldi	r18, 0x05	; 5
    243e:	05 c0       	rjmp	.+10     	; 0x244a <udd_ep_alloc+0x9c>
    2440:	26 e0       	ldi	r18, 0x06	; 6
    2442:	03 c0       	rjmp	.+6      	; 0x244a <udd_ep_alloc+0x9c>
    2444:	27 e0       	ldi	r18, 0x07	; 7
    2446:	01 c0       	rjmp	.+2      	; 0x244a <udd_ep_alloc+0x9c>
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	fc 01       	movw	r30, r24
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	ee 0f       	add	r30, r30
    2452:	ff 1f       	adc	r31, r31
    2454:	ee 0f       	add	r30, r30
    2456:	ff 1f       	adc	r31, r31
    2458:	e0 5b       	subi	r30, 0xB0	; 176
    245a:	fc 4d       	sbci	r31, 0xDC	; 220
    245c:	15 8a       	std	Z+21, r1	; 0x15
    245e:	36 e0       	ldi	r19, 0x06	; 6
    2460:	34 8b       	std	Z+20, r19	; 0x14
    2462:	26 2b       	or	r18, r22
    2464:	25 8b       	std	Z+21, r18	; 0x15
    2466:	fc 01       	movw	r30, r24
    2468:	ee 0f       	add	r30, r30
    246a:	ff 1f       	adc	r31, r31
    246c:	ee 0f       	add	r30, r30
    246e:	ff 1f       	adc	r31, r31
    2470:	ee 0f       	add	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	e0 5b       	subi	r30, 0xB0	; 176
    2476:	fc 4d       	sbci	r31, 0xDC	; 220
    2478:	25 89       	ldd	r18, Z+21	; 0x15
    247a:	20 7c       	andi	r18, 0xC0	; 192
    247c:	20 3c       	cpi	r18, 0xC0	; 192
    247e:	69 f4       	brne	.+26     	; 0x249a <udd_ep_alloc+0xec>
    2480:	fc 01       	movw	r30, r24
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	ee 0f       	add	r30, r30
    2488:	ff 1f       	adc	r31, r31
    248a:	ee 0f       	add	r30, r30
    248c:	ff 1f       	adc	r31, r31
    248e:	e0 5b       	subi	r30, 0xB0	; 176
    2490:	fc 4d       	sbci	r31, 0xDC	; 220
    2492:	25 89       	ldd	r18, Z+21	; 0x15
    2494:	27 70       	andi	r18, 0x07	; 7
    2496:	27 30       	cpi	r18, 0x07	; 7
    2498:	81 f0       	breq	.+32     	; 0x24ba <udd_ep_alloc+0x10c>
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	fc 01       	movw	r30, r24
    24a8:	e0 5b       	subi	r30, 0xB0	; 176
    24aa:	fc 4d       	sbci	r31, 0xDC	; 220
    24ac:	85 89       	ldd	r24, Z+21	; 0x15
    24ae:	80 62       	ori	r24, 0x20	; 32
    24b0:	85 8b       	std	Z+21, r24	; 0x15
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	08 95       	ret
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	08 95       	ret
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	08 95       	ret

000024be <udd_ep_is_halted>:
    24be:	e8 2f       	mov	r30, r24
    24c0:	ef 70       	andi	r30, 0x0F	; 15
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	ee 0f       	add	r30, r30
    24c6:	ff 1f       	adc	r31, r31
    24c8:	08 2e       	mov	r0, r24
    24ca:	00 0c       	add	r0, r0
    24cc:	99 0b       	sbc	r25, r25
    24ce:	88 27       	eor	r24, r24
    24d0:	99 0f       	add	r25, r25
    24d2:	88 1f       	adc	r24, r24
    24d4:	99 27       	eor	r25, r25
    24d6:	e8 0f       	add	r30, r24
    24d8:	f9 1f       	adc	r31, r25
    24da:	ee 0f       	add	r30, r30
    24dc:	ff 1f       	adc	r31, r31
    24de:	ee 0f       	add	r30, r30
    24e0:	ff 1f       	adc	r31, r31
    24e2:	ee 0f       	add	r30, r30
    24e4:	ff 1f       	adc	r31, r31
    24e6:	e0 5b       	subi	r30, 0xB0	; 176
    24e8:	fc 4d       	sbci	r31, 0xDC	; 220
    24ea:	85 89       	ldd	r24, Z+21	; 0x15
    24ec:	82 fb       	bst	r24, 2
    24ee:	88 27       	eor	r24, r24
    24f0:	80 f9       	bld	r24, 0
    24f2:	08 95       	ret

000024f4 <udd_ep_clear_halt>:
    24f4:	0f 93       	push	r16
    24f6:	28 2f       	mov	r18, r24
    24f8:	2f 70       	andi	r18, 0x0F	; 15
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	a9 01       	movw	r20, r18
    24fe:	44 0f       	add	r20, r20
    2500:	55 1f       	adc	r21, r21
    2502:	28 2f       	mov	r18, r24
    2504:	08 2e       	mov	r0, r24
    2506:	00 0c       	add	r0, r0
    2508:	33 0b       	sbc	r19, r19
    250a:	22 27       	eor	r18, r18
    250c:	33 0f       	add	r19, r19
    250e:	22 1f       	adc	r18, r18
    2510:	33 27       	eor	r19, r19
    2512:	24 0f       	add	r18, r20
    2514:	35 1f       	adc	r19, r21
    2516:	a9 01       	movw	r20, r18
    2518:	44 0f       	add	r20, r20
    251a:	55 1f       	adc	r21, r21
    251c:	44 0f       	add	r20, r20
    251e:	55 1f       	adc	r21, r21
    2520:	44 0f       	add	r20, r20
    2522:	55 1f       	adc	r21, r21
    2524:	fa 01       	movw	r30, r20
    2526:	ec 59       	subi	r30, 0x9C	; 156
    2528:	fc 4d       	sbci	r31, 0xDC	; 220
    252a:	01 e0       	ldi	r16, 0x01	; 1
    252c:	06 93       	lac	Z, r16
    252e:	fa 01       	movw	r30, r20
    2530:	e0 5b       	subi	r30, 0xB0	; 176
    2532:	fc 4d       	sbci	r31, 0xDC	; 220
    2534:	95 89       	ldd	r25, Z+21	; 0x15
    2536:	92 ff       	sbrs	r25, 2
    2538:	11 c0       	rjmp	.+34     	; 0x255c <udd_ep_clear_halt+0x68>
    253a:	fa 01       	movw	r30, r20
    253c:	e0 5b       	subi	r30, 0xB0	; 176
    253e:	fc 4d       	sbci	r31, 0xDC	; 220
    2540:	95 89       	ldd	r25, Z+21	; 0x15
    2542:	9b 7f       	andi	r25, 0xFB	; 251
    2544:	95 8b       	std	Z+21, r25	; 0x15
    2546:	64 dc       	rcall	.-1848   	; 0x1e10 <udd_ep_get_job>
    2548:	fc 01       	movw	r30, r24
    254a:	80 81       	ld	r24, Z
    254c:	80 ff       	sbrs	r24, 0
    254e:	06 c0       	rjmp	.+12     	; 0x255c <udd_ep_clear_halt+0x68>
    2550:	8e 7f       	andi	r24, 0xFE	; 254
    2552:	80 83       	st	Z, r24
    2554:	07 80       	ldd	r0, Z+7	; 0x07
    2556:	f0 85       	ldd	r31, Z+8	; 0x08
    2558:	e0 2d       	mov	r30, r0
    255a:	19 95       	eicall
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	0f 91       	pop	r16
    2560:	08 95       	ret

00002562 <udd_ep_run>:
    2562:	6f 92       	push	r6
    2564:	7f 92       	push	r7
    2566:	8f 92       	push	r8
    2568:	9f 92       	push	r9
    256a:	af 92       	push	r10
    256c:	bf 92       	push	r11
    256e:	cf 92       	push	r12
    2570:	df 92       	push	r13
    2572:	ef 92       	push	r14
    2574:	ff 92       	push	r15
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	1f 92       	push	r1
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	78 2e       	mov	r7, r24
    2586:	66 2e       	mov	r6, r22
    2588:	4a 01       	movw	r8, r20
    258a:	59 01       	movw	r10, r18
    258c:	41 dc       	rcall	.-1918   	; 0x1e10 <udd_ep_get_job>
    258e:	6c 01       	movw	r12, r24
    2590:	27 2d       	mov	r18, r7
    2592:	87 2d       	mov	r24, r7
    2594:	8f 70       	andi	r24, 0x0F	; 15
    2596:	e8 2e       	mov	r14, r24
    2598:	f1 2c       	mov	r15, r1
    259a:	c7 01       	movw	r24, r14
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	e7 2c       	mov	r14, r7
    25a2:	07 2c       	mov	r0, r7
    25a4:	00 0c       	add	r0, r0
    25a6:	ff 08       	sbc	r15, r15
    25a8:	ee 24       	eor	r14, r14
    25aa:	ff 0c       	add	r15, r15
    25ac:	ee 1c       	adc	r14, r14
    25ae:	ff 24       	eor	r15, r15
    25b0:	e8 0e       	add	r14, r24
    25b2:	f9 1e       	adc	r15, r25
    25b4:	f7 01       	movw	r30, r14
    25b6:	ee 0f       	add	r30, r30
    25b8:	ff 1f       	adc	r31, r31
    25ba:	ee 0f       	add	r30, r30
    25bc:	ff 1f       	adc	r31, r31
    25be:	ee 0f       	add	r30, r30
    25c0:	ff 1f       	adc	r31, r31
    25c2:	e0 5b       	subi	r30, 0xB0	; 176
    25c4:	fc 4d       	sbci	r31, 0xDC	; 220
    25c6:	85 89       	ldd	r24, Z+21	; 0x15
    25c8:	80 7c       	andi	r24, 0xC0	; 192
    25ca:	09 f4       	brne	.+2      	; 0x25ce <udd_ep_run+0x6c>
    25cc:	81 c0       	rjmp	.+258    	; 0x26d0 <udd_ep_run+0x16e>
    25ce:	f7 01       	movw	r30, r14
    25d0:	ee 0f       	add	r30, r30
    25d2:	ff 1f       	adc	r31, r31
    25d4:	ee 0f       	add	r30, r30
    25d6:	ff 1f       	adc	r31, r31
    25d8:	ee 0f       	add	r30, r30
    25da:	ff 1f       	adc	r31, r31
    25dc:	e0 5b       	subi	r30, 0xB0	; 176
    25de:	fc 4d       	sbci	r31, 0xDC	; 220
    25e0:	85 89       	ldd	r24, Z+21	; 0x15
    25e2:	80 7c       	andi	r24, 0xC0	; 192
    25e4:	80 3c       	cpi	r24, 0xC0	; 192
    25e6:	61 f0       	breq	.+24     	; 0x2600 <udd_ep_run+0x9e>
    25e8:	f7 01       	movw	r30, r14
    25ea:	ee 0f       	add	r30, r30
    25ec:	ff 1f       	adc	r31, r31
    25ee:	ee 0f       	add	r30, r30
    25f0:	ff 1f       	adc	r31, r31
    25f2:	ee 0f       	add	r30, r30
    25f4:	ff 1f       	adc	r31, r31
    25f6:	e0 5b       	subi	r30, 0xB0	; 176
    25f8:	fc 4d       	sbci	r31, 0xDC	; 220
    25fa:	85 89       	ldd	r24, Z+21	; 0x15
    25fc:	82 fd       	sbrc	r24, 2
    25fe:	6a c0       	rjmp	.+212    	; 0x26d4 <udd_ep_run+0x172>
    2600:	8f b7       	in	r24, 0x3f	; 63
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	f8 94       	cli
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	f6 01       	movw	r30, r12
    260a:	90 81       	ld	r25, Z
    260c:	90 ff       	sbrs	r25, 0
    260e:	03 c0       	rjmp	.+6      	; 0x2616 <udd_ep_run+0xb4>
    2610:	8f bf       	out	0x3f, r24	; 63
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	60 c0       	rjmp	.+192    	; 0x26d6 <udd_ep_run+0x174>
    2616:	f6 01       	movw	r30, r12
    2618:	90 81       	ld	r25, Z
    261a:	91 60       	ori	r25, 0x01	; 1
    261c:	90 83       	st	Z, r25
    261e:	8f bf       	out	0x3f, r24	; 63
    2620:	81 82       	std	Z+1, r8	; 0x01
    2622:	92 82       	std	Z+2, r9	; 0x02
    2624:	a3 82       	std	Z+3, r10	; 0x03
    2626:	b4 82       	std	Z+4, r11	; 0x04
    2628:	15 82       	std	Z+5, r1	; 0x05
    262a:	16 82       	std	Z+6, r1	; 0x06
    262c:	07 83       	std	Z+7, r16	; 0x07
    262e:	10 87       	std	Z+8, r17	; 0x08
    2630:	61 10       	cpse	r6, r1
    2632:	06 c0       	rjmp	.+12     	; 0x2640 <udd_ep_run+0xde>
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	a1 14       	cp	r10, r1
    2638:	b1 04       	cpc	r11, r1
    263a:	19 f0       	breq	.+6      	; 0x2642 <udd_ep_run+0xe0>
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <udd_ep_run+0xe0>
    2640:	91 e0       	ldi	r25, 0x01	; 1
    2642:	f6 01       	movw	r30, r12
    2644:	80 81       	ld	r24, Z
    2646:	90 fb       	bst	r25, 0
    2648:	81 f9       	bld	r24, 1
    264a:	8b 7f       	andi	r24, 0xFB	; 251
    264c:	80 83       	st	Z, r24
    264e:	22 23       	and	r18, r18
    2650:	64 f4       	brge	.+24     	; 0x266a <udd_ep_run+0x108>
    2652:	f7 01       	movw	r30, r14
    2654:	ee 0f       	add	r30, r30
    2656:	ff 1f       	adc	r31, r31
    2658:	ee 0f       	add	r30, r30
    265a:	ff 1f       	adc	r31, r31
    265c:	ee 0f       	add	r30, r30
    265e:	ff 1f       	adc	r31, r31
    2660:	e0 5b       	subi	r30, 0xB0	; 176
    2662:	fc 4d       	sbci	r31, 0xDC	; 220
    2664:	12 8e       	std	Z+26, r1	; 0x1a
    2666:	13 8e       	std	Z+27, r1	; 0x1b
    2668:	2f c0       	rjmp	.+94     	; 0x26c8 <udd_ep_run+0x166>
    266a:	f7 01       	movw	r30, r14
    266c:	ee 0f       	add	r30, r30
    266e:	ff 1f       	adc	r31, r31
    2670:	ee 0f       	add	r30, r30
    2672:	ff 1f       	adc	r31, r31
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	e0 5b       	subi	r30, 0xB0	; 176
    267a:	fc 4d       	sbci	r31, 0xDC	; 220
    267c:	85 89       	ldd	r24, Z+21	; 0x15
    267e:	80 7c       	andi	r24, 0xC0	; 192
    2680:	80 3c       	cpi	r24, 0xC0	; 192
    2682:	a9 f4       	brne	.+42     	; 0x26ae <udd_ep_run+0x14c>
    2684:	c7 01       	movw	r24, r14
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	88 0f       	add	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	8c 59       	subi	r24, 0x9C	; 156
    2694:	9c 4d       	sbci	r25, 0xDC	; 220
    2696:	94 db       	rcall	.-2264   	; 0x1dc0 <udd_ep_get_size>
    2698:	bc 01       	movw	r22, r24
    269a:	c5 01       	movw	r24, r10
    269c:	ae d2       	rcall	.+1372   	; 0x2bfa <__udivmodhi4>
    269e:	89 2b       	or	r24, r25
    26a0:	31 f0       	breq	.+12     	; 0x26ae <udd_ep_run+0x14c>
    26a2:	f6 01       	movw	r30, r12
    26a4:	80 81       	ld	r24, Z
    26a6:	8e 7f       	andi	r24, 0xFE	; 254
    26a8:	80 83       	st	Z, r24
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	14 c0       	rjmp	.+40     	; 0x26d6 <udd_ep_run+0x174>
    26ae:	f7 01       	movw	r30, r14
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	ee 0f       	add	r30, r30
    26b6:	ff 1f       	adc	r31, r31
    26b8:	ee 0f       	add	r30, r30
    26ba:	ff 1f       	adc	r31, r31
    26bc:	e0 5b       	subi	r30, 0xB0	; 176
    26be:	fc 4d       	sbci	r31, 0xDC	; 220
    26c0:	16 8a       	std	Z+22, r1	; 0x16
    26c2:	17 8a       	std	Z+23, r1	; 0x17
    26c4:	12 8e       	std	Z+26, r1	; 0x1a
    26c6:	13 8e       	std	Z+27, r1	; 0x1b
    26c8:	87 2d       	mov	r24, r7
    26ca:	2e dc       	rcall	.-1956   	; 0x1f28 <udd_ep_trans_complet>
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <udd_ep_run+0x174>
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <udd_ep_run+0x174>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	0f 90       	pop	r0
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	1f 91       	pop	r17
    26de:	0f 91       	pop	r16
    26e0:	ff 90       	pop	r15
    26e2:	ef 90       	pop	r14
    26e4:	df 90       	pop	r13
    26e6:	cf 90       	pop	r12
    26e8:	bf 90       	pop	r11
    26ea:	af 90       	pop	r10
    26ec:	9f 90       	pop	r9
    26ee:	8f 90       	pop	r8
    26f0:	7f 90       	pop	r7
    26f2:	6f 90       	pop	r6
    26f4:	08 95       	ret

000026f6 <udd_ep_abort>:
    26f6:	ff 92       	push	r15
    26f8:	0f 93       	push	r16
    26fa:	1f 93       	push	r17
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	18 2f       	mov	r17, r24
    2702:	c8 2f       	mov	r28, r24
    2704:	cf 70       	andi	r28, 0x0F	; 15
    2706:	d0 e0       	ldi	r29, 0x00	; 0
    2708:	ce 01       	movw	r24, r28
    270a:	88 0f       	add	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	c1 2f       	mov	r28, r17
    2710:	01 2e       	mov	r0, r17
    2712:	00 0c       	add	r0, r0
    2714:	dd 0b       	sbc	r29, r29
    2716:	cc 27       	eor	r28, r28
    2718:	dd 0f       	add	r29, r29
    271a:	cc 1f       	adc	r28, r28
    271c:	dd 27       	eor	r29, r29
    271e:	c8 0f       	add	r28, r24
    2720:	d9 1f       	adc	r29, r25
    2722:	81 2f       	mov	r24, r17
    2724:	75 db       	rcall	.-2326   	; 0x1e10 <udd_ep_get_job>
    2726:	dc 01       	movw	r26, r24
    2728:	fe 01       	movw	r30, r28
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	ee 0f       	add	r30, r30
    2734:	ff 1f       	adc	r31, r31
    2736:	ec 59       	subi	r30, 0x9C	; 156
    2738:	fc 4d       	sbci	r31, 0xDC	; 220
    273a:	02 e0       	ldi	r16, 0x02	; 2
    273c:	05 93       	las	Z, r16
    273e:	8c 91       	ld	r24, X
    2740:	80 ff       	sbrs	r24, 0
    2742:	22 c0       	rjmp	.+68     	; 0x2788 <udd_ep_abort+0x92>
    2744:	8e 7f       	andi	r24, 0xFE	; 254
    2746:	8c 93       	st	X, r24
    2748:	17 96       	adiw	r26, 0x07	; 7
    274a:	ed 91       	ld	r30, X+
    274c:	fc 91       	ld	r31, X
    274e:	18 97       	sbiw	r26, 0x08	; 8
    2750:	30 97       	sbiw	r30, 0x00	; 0
    2752:	d1 f0       	breq	.+52     	; 0x2788 <udd_ep_abort+0x92>
    2754:	11 23       	and	r17, r17
    2756:	5c f4       	brge	.+22     	; 0x276e <udd_ep_abort+0x78>
    2758:	cc 0f       	add	r28, r28
    275a:	dd 1f       	adc	r29, r29
    275c:	cc 0f       	add	r28, r28
    275e:	dd 1f       	adc	r29, r29
    2760:	cc 0f       	add	r28, r28
    2762:	dd 1f       	adc	r29, r29
    2764:	c0 5b       	subi	r28, 0xB0	; 176
    2766:	dc 4d       	sbci	r29, 0xDC	; 220
    2768:	6a 8d       	ldd	r22, Y+26	; 0x1a
    276a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    276c:	0a c0       	rjmp	.+20     	; 0x2782 <udd_ep_abort+0x8c>
    276e:	cc 0f       	add	r28, r28
    2770:	dd 1f       	adc	r29, r29
    2772:	cc 0f       	add	r28, r28
    2774:	dd 1f       	adc	r29, r29
    2776:	cc 0f       	add	r28, r28
    2778:	dd 1f       	adc	r29, r29
    277a:	c0 5b       	subi	r28, 0xB0	; 176
    277c:	dc 4d       	sbci	r29, 0xDC	; 220
    277e:	6e 89       	ldd	r22, Y+22	; 0x16
    2780:	7f 89       	ldd	r23, Y+23	; 0x17
    2782:	41 2f       	mov	r20, r17
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	19 95       	eicall
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	1f 91       	pop	r17
    278e:	0f 91       	pop	r16
    2790:	ff 90       	pop	r15
    2792:	08 95       	ret

00002794 <udd_ep_free>:
    2794:	cf 93       	push	r28
    2796:	c8 2f       	mov	r28, r24
    2798:	ae df       	rcall	.-164    	; 0x26f6 <udd_ep_abort>
    279a:	ec 2f       	mov	r30, r28
    279c:	ef 70       	andi	r30, 0x0F	; 15
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	ee 0f       	add	r30, r30
    27a2:	ff 1f       	adc	r31, r31
    27a4:	8c 2f       	mov	r24, r28
    27a6:	cc 0f       	add	r28, r28
    27a8:	99 0b       	sbc	r25, r25
    27aa:	88 27       	eor	r24, r24
    27ac:	99 0f       	add	r25, r25
    27ae:	88 1f       	adc	r24, r24
    27b0:	99 27       	eor	r25, r25
    27b2:	e8 0f       	add	r30, r24
    27b4:	f9 1f       	adc	r31, r25
    27b6:	ee 0f       	add	r30, r30
    27b8:	ff 1f       	adc	r31, r31
    27ba:	ee 0f       	add	r30, r30
    27bc:	ff 1f       	adc	r31, r31
    27be:	ee 0f       	add	r30, r30
    27c0:	ff 1f       	adc	r31, r31
    27c2:	e0 5b       	subi	r30, 0xB0	; 176
    27c4:	fc 4d       	sbci	r31, 0xDC	; 220
    27c6:	15 8a       	std	Z+21, r1	; 0x15
    27c8:	cf 91       	pop	r28
    27ca:	08 95       	ret

000027cc <udd_ep_set_halt>:
    27cc:	e8 2f       	mov	r30, r24
    27ce:	ef 70       	andi	r30, 0x0F	; 15
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	ee 0f       	add	r30, r30
    27d4:	ff 1f       	adc	r31, r31
    27d6:	28 2f       	mov	r18, r24
    27d8:	08 2e       	mov	r0, r24
    27da:	00 0c       	add	r0, r0
    27dc:	33 0b       	sbc	r19, r19
    27de:	22 27       	eor	r18, r18
    27e0:	33 0f       	add	r19, r19
    27e2:	22 1f       	adc	r18, r18
    27e4:	33 27       	eor	r19, r19
    27e6:	e2 0f       	add	r30, r18
    27e8:	f3 1f       	adc	r31, r19
    27ea:	ee 0f       	add	r30, r30
    27ec:	ff 1f       	adc	r31, r31
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	ee 0f       	add	r30, r30
    27f4:	ff 1f       	adc	r31, r31
    27f6:	e0 5b       	subi	r30, 0xB0	; 176
    27f8:	fc 4d       	sbci	r31, 0xDC	; 220
    27fa:	95 89       	ldd	r25, Z+21	; 0x15
    27fc:	94 60       	ori	r25, 0x04	; 4
    27fe:	95 8b       	std	Z+21, r25	; 0x15
    2800:	7a df       	rcall	.-268    	; 0x26f6 <udd_ep_abort>
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	08 95       	ret

00002806 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2806:	1f 92       	push	r1
    2808:	0f 92       	push	r0
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	0f 92       	push	r0
    280e:	11 24       	eor	r1, r1
    2810:	0b b6       	in	r0, 0x3b	; 59
    2812:	0f 92       	push	r0
    2814:	0f 93       	push	r16
    2816:	2f 93       	push	r18
    2818:	3f 93       	push	r19
    281a:	4f 93       	push	r20
    281c:	5f 93       	push	r21
    281e:	6f 93       	push	r22
    2820:	7f 93       	push	r23
    2822:	8f 93       	push	r24
    2824:	9f 93       	push	r25
    2826:	af 93       	push	r26
    2828:	bf 93       	push	r27
    282a:	cf 93       	push	r28
    282c:	ef 93       	push	r30
    282e:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2830:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2834:	88 23       	and	r24, r24
    2836:	3c f4       	brge	.+14     	; 0x2846 <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    2838:	80 e8       	ldi	r24, 0x80	; 128
    283a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    283e:	0e 94 15 0b 	call	0x162a	; 0x162a <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2842:	b0 d1       	rcall	.+864    	; 0x2ba4 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2844:	89 c0       	rjmp	.+274    	; 0x2958 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2846:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    284a:	82 ff       	sbrs	r24, 2
    284c:	20 c0       	rjmp	.+64     	; 0x288e <__vector_125+0x88>
		udd_ack_underflow_event();
    284e:	84 e0       	ldi	r24, 0x04	; 4
    2850:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    2854:	80 91 6c 23 	lds	r24, 0x236C	; 0x80236c <udd_sram+0x1c>
    2858:	86 ff       	sbrs	r24, 6
    285a:	7e c0       	rjmp	.+252    	; 0x2958 <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    285c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2860:	81 fd       	sbrc	r24, 1
    2862:	7a c0       	rjmp	.+244    	; 0x2958 <__vector_125+0x152>
    2864:	f0 da       	rcall	.-2592   	; 0x1e46 <udd_ctrl_interrupt_tc_setup>
    2866:	81 11       	cpse	r24, r1
    2868:	77 c0       	rjmp	.+238    	; 0x2958 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    286a:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udd_ep_control_state>
    286e:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2870:	11 f4       	brne	.+4      	; 0x2876 <__vector_125+0x70>
    2872:	24 da       	rcall	.-3000   	; 0x1cbc <udd_ctrl_send_zlp_in>
    2874:	71 c0       	rjmp	.+226    	; 0x2958 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2876:	84 30       	cpi	r24, 0x04	; 4
    2878:	09 f0       	breq	.+2      	; 0x287c <__vector_125+0x76>
    287a:	6e c0       	rjmp	.+220    	; 0x2958 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    287c:	ed e6       	ldi	r30, 0x6D	; 109
    287e:	f3 e2       	ldi	r31, 0x23	; 35
    2880:	04 e0       	ldi	r16, 0x04	; 4
    2882:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2884:	e5 e6       	ldi	r30, 0x65	; 101
    2886:	f3 e2       	ldi	r31, 0x23	; 35
    2888:	04 e0       	ldi	r16, 0x04	; 4
    288a:	05 93       	las	Z, r16
    288c:	65 c0       	rjmp	.+202    	; 0x2958 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    288e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2892:	81 ff       	sbrs	r24, 1
    2894:	5c c0       	rjmp	.+184    	; 0x294e <__vector_125+0x148>
		udd_ack_overflow_event();
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    289c:	80 91 64 23 	lds	r24, 0x2364	; 0x802364 <udd_sram+0x14>
    28a0:	86 ff       	sbrs	r24, 6
    28a2:	5a c0       	rjmp	.+180    	; 0x2958 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    28a4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    28a8:	81 fd       	sbrc	r24, 1
    28aa:	56 c0       	rjmp	.+172    	; 0x2958 <__vector_125+0x152>
    28ac:	cc da       	rcall	.-2664   	; 0x1e46 <udd_ctrl_interrupt_tc_setup>
    28ae:	81 11       	cpse	r24, r1
    28b0:	53 c0       	rjmp	.+166    	; 0x2958 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    28b2:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udd_ep_control_state>
    28b6:	82 30       	cpi	r24, 0x02	; 2
    28b8:	41 f4       	brne	.+16     	; 0x28ca <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    28ba:	84 e0       	ldi	r24, 0x04	; 4
    28bc:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    28c0:	e4 e6       	ldi	r30, 0x64	; 100
    28c2:	f3 e2       	ldi	r31, 0x23	; 35
    28c4:	02 e0       	ldi	r16, 0x02	; 2
    28c6:	06 93       	lac	Z, r16
    28c8:	47 c0       	rjmp	.+142    	; 0x2958 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    28ca:	83 30       	cpi	r24, 0x03	; 3
    28cc:	09 f0       	breq	.+2      	; 0x28d0 <__vector_125+0xca>
    28ce:	44 c0       	rjmp	.+136    	; 0x2958 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    28d0:	ed e6       	ldi	r30, 0x6D	; 109
    28d2:	f3 e2       	ldi	r31, 0x23	; 35
    28d4:	04 e0       	ldi	r16, 0x04	; 4
    28d6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    28d8:	e5 e6       	ldi	r30, 0x65	; 101
    28da:	f3 e2       	ldi	r31, 0x23	; 35
    28dc:	04 e0       	ldi	r16, 0x04	; 4
    28de:	05 93       	las	Z, r16
    28e0:	3b c0       	rjmp	.+118    	; 0x2958 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    28e2:	80 e1       	ldi	r24, 0x10	; 16
    28e4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    28e8:	c1 e0       	ldi	r28, 0x01	; 1
    28ea:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    28ec:	04 df       	rcall	.-504    	; 0x26f6 <udd_ep_abort>
    28ee:	8c 2f       	mov	r24, r28
    28f0:	80 68       	ori	r24, 0x80	; 128
    28f2:	01 df       	rcall	.-510    	; 0x26f6 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    28f4:	cf 5f       	subi	r28, 0xFF	; 255
    28f6:	c5 30       	cpi	r28, 0x05	; 5
    28f8:	c1 f7       	brne	.-16     	; 0x28ea <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    28fa:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    28fe:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2902:	e0 e5       	ldi	r30, 0x50	; 80
    2904:	f3 e2       	ldi	r31, 0x23	; 35
    2906:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2908:	96 e0       	ldi	r25, 0x06	; 6
    290a:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    290c:	80 e4       	ldi	r24, 0x40	; 64
    290e:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2910:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2912:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2914:	85 8f       	std	Z+29, r24	; 0x1d
    2916:	81 e4       	ldi	r24, 0x41	; 65
    2918:	93 e2       	ldi	r25, 0x23	; 35
    291a:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    291c:	91 8f       	std	Z+25, r25	; 0x19
    291e:	9b d9       	rcall	.-3274   	; 0x1c56 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2920:	1b c0       	rjmp	.+54     	; 0x2958 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    2922:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    2926:	86 ff       	sbrs	r24, 6
    2928:	07 c0       	rjmp	.+14     	; 0x2938 <__vector_125+0x132>
    292a:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    292c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2930:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2932:	59 d9       	rcall	.-3406   	; 0x1be6 <udd_sleep_mode>
    2934:	35 d1       	rcall	.+618    	; 0x2ba0 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2936:	10 c0       	rjmp	.+32     	; 0x2958 <__vector_125+0x152>
    2938:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    293c:	85 ff       	sbrs	r24, 5
    293e:	0c c0       	rjmp	.+24     	; 0x2958 <__vector_125+0x152>
    2940:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    2942:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2946:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2948:	4e d9       	rcall	.-3428   	; 0x1be6 <udd_sleep_mode>
    294a:	2b d1       	rcall	.+598    	; 0x2ba2 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    294c:	05 c0       	rjmp	.+10     	; 0x2958 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    294e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2952:	84 fd       	sbrc	r24, 4
    2954:	c6 cf       	rjmp	.-116    	; 0x28e2 <__vector_125+0xdc>
    2956:	e5 cf       	rjmp	.-54     	; 0x2922 <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2958:	ff 91       	pop	r31
    295a:	ef 91       	pop	r30
    295c:	cf 91       	pop	r28
    295e:	bf 91       	pop	r27
    2960:	af 91       	pop	r26
    2962:	9f 91       	pop	r25
    2964:	8f 91       	pop	r24
    2966:	7f 91       	pop	r23
    2968:	6f 91       	pop	r22
    296a:	5f 91       	pop	r21
    296c:	4f 91       	pop	r20
    296e:	3f 91       	pop	r19
    2970:	2f 91       	pop	r18
    2972:	0f 91       	pop	r16
    2974:	0f 90       	pop	r0
    2976:	0b be       	out	0x3b, r0	; 59
    2978:	0f 90       	pop	r0
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	0f 90       	pop	r0
    297e:	1f 90       	pop	r1
    2980:	18 95       	reti

00002982 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2982:	1f 92       	push	r1
    2984:	0f 92       	push	r0
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	0f 92       	push	r0
    298a:	11 24       	eor	r1, r1
    298c:	0b b6       	in	r0, 0x3b	; 59
    298e:	0f 92       	push	r0
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	2f 93       	push	r18
    2996:	3f 93       	push	r19
    2998:	4f 93       	push	r20
    299a:	5f 93       	push	r21
    299c:	6f 93       	push	r22
    299e:	7f 93       	push	r23
    29a0:	8f 93       	push	r24
    29a2:	9f 93       	push	r25
    29a4:	af 93       	push	r26
    29a6:	bf 93       	push	r27
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	ef 93       	push	r30
    29ae:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    29b0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    29b4:	81 fd       	sbrc	r24, 1
    29b6:	03 c0       	rjmp	.+6      	; 0x29be <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    29b8:	46 da       	rcall	.-2932   	; 0x1e46 <udd_ctrl_interrupt_tc_setup>
    29ba:	81 11       	cpse	r24, r1
    29bc:	c3 c0       	rjmp	.+390    	; 0x2b44 <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    29be:	82 e0       	ldi	r24, 0x02	; 2
    29c0:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    29c4:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    29c8:	81 95       	neg	r24
    29ca:	88 0f       	add	r24, r24
    29cc:	e4 e6       	ldi	r30, 0x64	; 100
    29ce:	f3 e2       	ldi	r31, 0x23	; 35
    29d0:	e8 1b       	sub	r30, r24
    29d2:	f1 09       	sbc	r31, r1
    29d4:	20 81       	ld	r18, Z
    29d6:	31 81       	ldd	r19, Z+1	; 0x01
    29d8:	24 56       	subi	r18, 0x64	; 100
    29da:	33 42       	sbci	r19, 0x23	; 35
    29dc:	36 95       	lsr	r19
    29de:	27 95       	ror	r18
    29e0:	36 95       	lsr	r19
    29e2:	27 95       	ror	r18
    29e4:	36 95       	lsr	r19
    29e6:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    29e8:	82 2f       	mov	r24, r18
    29ea:	86 95       	lsr	r24
    29ec:	20 fd       	sbrc	r18, 0
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <__vector_126+0x72>
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	01 c0       	rjmp	.+2      	; 0x29f6 <__vector_126+0x74>
    29f4:	90 e8       	ldi	r25, 0x80	; 128
    29f6:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    29f8:	e8 2f       	mov	r30, r24
    29fa:	ef 70       	andi	r30, 0x0F	; 15
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	ee 0f       	add	r30, r30
    2a00:	ff 1f       	adc	r31, r31
    2a02:	28 2f       	mov	r18, r24
    2a04:	08 2e       	mov	r0, r24
    2a06:	00 0c       	add	r0, r0
    2a08:	33 0b       	sbc	r19, r19
    2a0a:	22 27       	eor	r18, r18
    2a0c:	33 0f       	add	r19, r19
    2a0e:	22 1f       	adc	r18, r18
    2a10:	33 27       	eor	r19, r19
    2a12:	e2 0f       	add	r30, r18
    2a14:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2a16:	df 01       	movw	r26, r30
    2a18:	aa 0f       	add	r26, r26
    2a1a:	bb 1f       	adc	r27, r27
    2a1c:	aa 0f       	add	r26, r26
    2a1e:	bb 1f       	adc	r27, r27
    2a20:	aa 0f       	add	r26, r26
    2a22:	bb 1f       	adc	r27, r27
    2a24:	a0 5b       	subi	r26, 0xB0	; 176
    2a26:	bc 4d       	sbci	r27, 0xDC	; 220
    2a28:	54 96       	adiw	r26, 0x14	; 20
    2a2a:	9c 91       	ld	r25, X
    2a2c:	95 ff       	sbrs	r25, 5
    2a2e:	8a c0       	rjmp	.+276    	; 0x2b44 <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2a30:	ee 0f       	add	r30, r30
    2a32:	ff 1f       	adc	r31, r31
    2a34:	ee 0f       	add	r30, r30
    2a36:	ff 1f       	adc	r31, r31
    2a38:	ee 0f       	add	r30, r30
    2a3a:	ff 1f       	adc	r31, r31
    2a3c:	ec 59       	subi	r30, 0x9C	; 156
    2a3e:	fc 4d       	sbci	r31, 0xDC	; 220
    2a40:	00 e2       	ldi	r16, 0x20	; 32
    2a42:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2a44:	81 11       	cpse	r24, r1
    2a46:	79 c0       	rjmp	.+242    	; 0x2b3a <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2a48:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udd_ep_control_state>
    2a4c:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2a4e:	19 f4       	brne	.+6      	; 0x2a56 <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2a50:	43 d9       	rcall	.-3450   	; 0x1cd8 <udd_ctrl_endofrequest>
    2a52:	01 d9       	rcall	.-3582   	; 0x1c56 <udd_ctrl_init>
    2a54:	77 c0       	rjmp	.+238    	; 0x2b44 <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2a56:	00 91 66 23 	lds	r16, 0x2366	; 0x802366 <udd_sram+0x16>
    2a5a:	10 91 67 23 	lds	r17, 0x2367	; 0x802367 <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2a5e:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0xa>
    2a62:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0xb>
    2a66:	c0 91 49 23 	lds	r28, 0x2349	; 0x802349 <udd_ctrl_payload_nb_trans>
    2a6a:	d0 91 4a 23 	lds	r29, 0x234A	; 0x80234a <udd_ctrl_payload_nb_trans+0x1>
    2a6e:	98 01       	movw	r18, r16
    2a70:	2c 0f       	add	r18, r28
    2a72:	3d 1f       	adc	r19, r29
    2a74:	82 17       	cp	r24, r18
    2a76:	93 07       	cpc	r25, r19
    2a78:	18 f4       	brcc	.+6      	; 0x2a80 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2a7a:	8c 01       	movw	r16, r24
    2a7c:	0c 1b       	sub	r16, r28
    2a7e:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2a80:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <udd_g_ctrlreq+0x8>
    2a84:	90 91 ce 23 	lds	r25, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x9>
    2a88:	a8 01       	movw	r20, r16
    2a8a:	61 e4       	ldi	r22, 0x41	; 65
    2a8c:	73 e2       	ldi	r23, 0x23	; 35
    2a8e:	8c 0f       	add	r24, r28
    2a90:	9d 1f       	adc	r25, r29
    2a92:	cf d0       	rcall	.+414    	; 0x2c32 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2a94:	c0 0f       	add	r28, r16
    2a96:	d1 1f       	adc	r29, r17
    2a98:	c0 93 49 23 	sts	0x2349, r28	; 0x802349 <udd_ctrl_payload_nb_trans>
    2a9c:	d0 93 4a 23 	sts	0x234A, r29	; 0x80234a <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2aa0:	08 30       	cpi	r16, 0x08	; 8
    2aa2:	11 05       	cpc	r17, r1
    2aa4:	69 f4       	brne	.+26     	; 0x2ac0 <__vector_126+0x13e>
    2aa6:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <udd_ctrl_prev_payload_nb_trans>
    2aaa:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <udd_ctrl_prev_payload_nb_trans+0x1>
    2aae:	8c 0f       	add	r24, r28
    2ab0:	9d 1f       	adc	r25, r29
    2ab2:	20 91 cb 23 	lds	r18, 0x23CB	; 0x8023cb <udd_g_ctrlreq+0x6>
    2ab6:	30 91 cc 23 	lds	r19, 0x23CC	; 0x8023cc <udd_g_ctrlreq+0x7>
    2aba:	82 17       	cp	r24, r18
    2abc:	93 07       	cpc	r25, r19
    2abe:	80 f0       	brcs	.+32     	; 0x2ae0 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2ac0:	e5 ec       	ldi	r30, 0xC5	; 197
    2ac2:	f3 e2       	ldi	r31, 0x23	; 35
    2ac4:	c2 87       	std	Z+10, r28	; 0x0a
    2ac6:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2ac8:	06 84       	ldd	r0, Z+14	; 0x0e
    2aca:	f7 85       	ldd	r31, Z+15	; 0x0f
    2acc:	e0 2d       	mov	r30, r0
    2ace:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2ad0:	29 f0       	breq	.+10     	; 0x2adc <__vector_126+0x15a>
    2ad2:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2ad4:	81 11       	cpse	r24, r1
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <__vector_126+0x15a>
    2ad8:	e3 d8       	rcall	.-3642   	; 0x1ca0 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2ada:	34 c0       	rjmp	.+104    	; 0x2b44 <__vector_126+0x1c2>
    2adc:	ef d8       	rcall	.-3618   	; 0x1cbc <udd_ctrl_send_zlp_in>
    2ade:	32 c0       	rjmp	.+100    	; 0x2b44 <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2ae0:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0xa>
    2ae4:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0xb>
    2ae8:	c8 17       	cp	r28, r24
    2aea:	d9 07       	cpc	r29, r25
    2aec:	f9 f4       	brne	.+62     	; 0x2b2c <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2aee:	e0 91 d3 23 	lds	r30, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0xe>
    2af2:	f0 91 d4 23 	lds	r31, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0xf>
    2af6:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2af8:	11 f4       	brne	.+4      	; 0x2afe <__vector_126+0x17c>
    2afa:	d2 d8       	rcall	.-3676   	; 0x1ca0 <udd_ctrl_stall_data>
    2afc:	23 c0       	rjmp	.+70     	; 0x2b44 <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2afe:	19 95       	eicall
    2b00:	81 11       	cpse	r24, r1
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2b04:	cd d8       	rcall	.-3686   	; 0x1ca0 <udd_ctrl_stall_data>
    2b06:	1e c0       	rjmp	.+60     	; 0x2b44 <__vector_126+0x1c2>
    2b08:	20 91 4b 23 	lds	r18, 0x234B	; 0x80234b <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2b0c:	30 91 4c 23 	lds	r19, 0x234C	; 0x80234c <udd_ctrl_prev_payload_nb_trans+0x1>
    2b10:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <udd_ctrl_payload_nb_trans>
    2b14:	90 91 4a 23 	lds	r25, 0x234A	; 0x80234a <udd_ctrl_payload_nb_trans+0x1>
    2b18:	82 0f       	add	r24, r18
    2b1a:	93 1f       	adc	r25, r19
    2b1c:	80 93 4b 23 	sts	0x234B, r24	; 0x80234b <udd_ctrl_prev_payload_nb_trans>
    2b20:	90 93 4c 23 	sts	0x234C, r25	; 0x80234c <udd_ctrl_prev_payload_nb_trans+0x1>
    2b24:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2b28:	10 92 4a 23 	sts	0x234A, r1	; 0x80234a <udd_ctrl_payload_nb_trans+0x1>
    2b2c:	e4 e6       	ldi	r30, 0x64	; 100
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2b2e:	f3 e2       	ldi	r31, 0x23	; 35
    2b30:	02 e0       	ldi	r16, 0x02	; 2
    2b32:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2b34:	00 e2       	ldi	r16, 0x20	; 32
    2b36:	06 93       	lac	Z, r16
    2b38:	05 c0       	rjmp	.+10     	; 0x2b44 <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2b3a:	80 38       	cpi	r24, 0x80	; 128
		udd_ctrl_in_sent();
    2b3c:	11 f4       	brne	.+4      	; 0x2b42 <__vector_126+0x1c0>
    2b3e:	d4 d8       	rcall	.-3672   	; 0x1ce8 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2b40:	01 c0       	rjmp	.+2      	; 0x2b44 <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2b42:	f2 d9       	rcall	.-3100   	; 0x1f28 <udd_ep_trans_complet>
    2b44:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2b46:	ef 91       	pop	r30
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	bf 91       	pop	r27
    2b4e:	af 91       	pop	r26
    2b50:	9f 91       	pop	r25
    2b52:	8f 91       	pop	r24
    2b54:	7f 91       	pop	r23
    2b56:	6f 91       	pop	r22
    2b58:	5f 91       	pop	r21
    2b5a:	4f 91       	pop	r20
    2b5c:	3f 91       	pop	r19
    2b5e:	2f 91       	pop	r18
    2b60:	1f 91       	pop	r17
    2b62:	0f 91       	pop	r16
    2b64:	0f 90       	pop	r0
    2b66:	0b be       	out	0x3b, r0	; 59
    2b68:	0f 90       	pop	r0
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	0f 90       	pop	r0
    2b6e:	1f 90       	pop	r1
    2b70:	18 95       	reti

00002b72 <main>:

static const uint8_t sequence = 1;

int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    2b72:	87 e0       	ldi	r24, 0x07	; 7
    2b74:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    2b78:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2b7a:	ef eb       	ldi	r30, 0xBF	; 191
    2b7c:	f3 e2       	ldi	r31, 0x23	; 35
    2b7e:	10 82       	st	Z, r1
    2b80:	11 82       	std	Z+1, r1	; 0x01
    2b82:	12 82       	std	Z+2, r1	; 0x02
    2b84:	13 82       	std	Z+3, r1	; 0x03
    2b86:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    2b8c:	0e 94 57 07 	call	0xeae	; 0xeae <sysclk_init>

	io_ui_process(); // initializes board i/o pins
    2b90:	0e 94 4b 07 	call	0xe96	; 0xe96 <io_ui_process>

	udc_start();               // starts USB device controller
    2b94:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <udc_start>

	startup_ui_process(sequence); // pick preferred sequence (1-5)
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	0e 94 4d 07 	call	0xe9a	; 0xe9a <startup_ui_process>
    2b9e:	ff cf       	rjmp	.-2      	; 0x2b9e <main+0x2c>

00002ba0 <main_suspend_action>:

	while (true) { }
}

/* -------------------------------- USB -------------------------------- */
void main_suspend_action(void) { }
    2ba0:	08 95       	ret

00002ba2 <main_resume_action>:
void main_resume_action(void) { }
    2ba2:	08 95       	ret

00002ba4 <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    2ba4:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <main_b_kbd_enable>
    2ba8:	88 23       	and	r24, r24
    2baa:	51 f0       	breq	.+20     	; 0x2bc0 <main_sof_action+0x1c>
	return;
	kbd_ui_process();
    2bac:	0e 94 51 07 	call	0xea2	; 0xea2 <kbd_ui_process>

	if (!main_b_generic_enable)
    2bb0:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <main_b_generic_enable>
    2bb4:	88 23       	and	r24, r24
    2bb6:	21 f0       	breq	.+8      	; 0x2bc0 <main_sof_action+0x1c>
		return;
	jstk_ui_process();
    2bb8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <jstk_ui_process>

	status_ui_process();
    2bbc:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <status_ui_process>
    2bc0:	08 95       	ret

00002bc2 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2bc2:	08 95       	ret

00002bc4 <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2bc4:	08 95       	ret

00002bc6 <main_kbd_enable>:

/* ----------------------------- keyboard ------------------------------ */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	80 93 bb 23 	sts	0x23BB, r24	; 0x8023bb <main_b_kbd_enable>
	return true;
}
    2bcc:	08 95       	ret

00002bce <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2bce:	10 92 bb 23 	sts	0x23BB, r1	; 0x8023bb <main_b_kbd_enable>
    2bd2:	08 95       	ret

00002bd4 <main_generic_enable>:
}

/* ----------------------------- joystick ------------------------------ */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	80 93 ba 23 	sts	0x23BA, r24	; 0x8023ba <main_b_generic_enable>
	return true;
}
    2bda:	08 95       	ret

00002bdc <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2bdc:	10 92 ba 23 	sts	0x23BA, r1	; 0x8023ba <main_b_generic_enable>
    2be0:	08 95       	ret

00002be2 <main_led_enable>:
}

/* ------------------------------- LEDs -------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	80 93 b9 23 	sts	0x23B9, r24	; 0x8023b9 <main_b_led_enable>
	return true;
}
    2be8:	08 95       	ret

00002bea <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2bea:	10 92 b9 23 	sts	0x23B9, r1	; 0x8023b9 <main_b_led_enable>
    2bee:	08 95       	ret

00002bf0 <main_led_report_out>:
}

void main_led_report_out(uint8_t const *report) {
	led_ui_process(report[0]);
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	80 81       	ld	r24, Z
    2bf4:	0c 94 53 07 	jmp	0xea6	; 0xea6 <led_ui_process>
    2bf8:	08 95       	ret

00002bfa <__udivmodhi4>:
    2bfa:	aa 1b       	sub	r26, r26
    2bfc:	bb 1b       	sub	r27, r27
    2bfe:	51 e1       	ldi	r21, 0x11	; 17
    2c00:	07 c0       	rjmp	.+14     	; 0x2c10 <__udivmodhi4_ep>

00002c02 <__udivmodhi4_loop>:
    2c02:	aa 1f       	adc	r26, r26
    2c04:	bb 1f       	adc	r27, r27
    2c06:	a6 17       	cp	r26, r22
    2c08:	b7 07       	cpc	r27, r23
    2c0a:	10 f0       	brcs	.+4      	; 0x2c10 <__udivmodhi4_ep>
    2c0c:	a6 1b       	sub	r26, r22
    2c0e:	b7 0b       	sbc	r27, r23

00002c10 <__udivmodhi4_ep>:
    2c10:	88 1f       	adc	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	5a 95       	dec	r21
    2c16:	a9 f7       	brne	.-22     	; 0x2c02 <__udivmodhi4_loop>
    2c18:	80 95       	com	r24
    2c1a:	90 95       	com	r25
    2c1c:	bc 01       	movw	r22, r24
    2c1e:	cd 01       	movw	r24, r26
    2c20:	08 95       	ret

00002c22 <__tablejump2__>:
    2c22:	ee 0f       	add	r30, r30
    2c24:	ff 1f       	adc	r31, r31
    2c26:	88 1f       	adc	r24, r24
    2c28:	8b bf       	out	0x3b, r24	; 59
    2c2a:	07 90       	elpm	r0, Z+
    2c2c:	f6 91       	elpm	r31, Z
    2c2e:	e0 2d       	mov	r30, r0
    2c30:	19 94       	eijmp

00002c32 <memcpy>:
    2c32:	fb 01       	movw	r30, r22
    2c34:	dc 01       	movw	r26, r24
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <memcpy+0xa>
    2c38:	01 90       	ld	r0, Z+
    2c3a:	0d 92       	st	X+, r0
    2c3c:	41 50       	subi	r20, 0x01	; 1
    2c3e:	50 40       	sbci	r21, 0x00	; 0
    2c40:	d8 f7       	brcc	.-10     	; 0x2c38 <memcpy+0x6>
    2c42:	08 95       	ret

00002c44 <_exit>:
    2c44:	f8 94       	cli

00002c46 <__stop_program>:
    2c46:	ff cf       	rjmp	.-2      	; 0x2c46 <__stop_program>
