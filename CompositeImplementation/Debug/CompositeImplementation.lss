
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000198  00802000  00002c3e  00002cd2  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000026a  00802198  00802198  00002e6c  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005e0  00000000  00000000  00002ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b6e3  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005446  00000000  00000000  0000eba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009bba  00000000  00000000  00013fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d80  00000000  00000000  0001dba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036f1f  00000000  00000000  0001e924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000321f  00000000  00000000  00055843  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  00058a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cda7  00000000  00000000  00059118  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3b c1       	rjmp	.+630    	; 0x278 <__ctors_end>
       2:	00 00       	nop
       4:	5a c1       	rjmp	.+692    	; 0x2ba <__bad_interrupt>
       6:	00 00       	nop
       8:	58 c1       	rjmp	.+688    	; 0x2ba <__bad_interrupt>
       a:	00 00       	nop
       c:	56 c1       	rjmp	.+684    	; 0x2ba <__bad_interrupt>
       e:	00 00       	nop
      10:	54 c1       	rjmp	.+680    	; 0x2ba <__bad_interrupt>
      12:	00 00       	nop
      14:	52 c1       	rjmp	.+676    	; 0x2ba <__bad_interrupt>
      16:	00 00       	nop
      18:	50 c1       	rjmp	.+672    	; 0x2ba <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4e c1       	rjmp	.+668    	; 0x2ba <__bad_interrupt>
      1e:	00 00       	nop
      20:	4c c1       	rjmp	.+664    	; 0x2ba <__bad_interrupt>
      22:	00 00       	nop
      24:	4a c1       	rjmp	.+660    	; 0x2ba <__bad_interrupt>
      26:	00 00       	nop
      28:	48 c1       	rjmp	.+656    	; 0x2ba <__bad_interrupt>
      2a:	00 00       	nop
      2c:	46 c1       	rjmp	.+652    	; 0x2ba <__bad_interrupt>
      2e:	00 00       	nop
      30:	44 c1       	rjmp	.+648    	; 0x2ba <__bad_interrupt>
      32:	00 00       	nop
      34:	42 c1       	rjmp	.+644    	; 0x2ba <__bad_interrupt>
      36:	00 00       	nop
      38:	40 c1       	rjmp	.+640    	; 0x2ba <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3e c1       	rjmp	.+636    	; 0x2ba <__bad_interrupt>
      3e:	00 00       	nop
      40:	3c c1       	rjmp	.+632    	; 0x2ba <__bad_interrupt>
      42:	00 00       	nop
      44:	3a c1       	rjmp	.+628    	; 0x2ba <__bad_interrupt>
      46:	00 00       	nop
      48:	38 c1       	rjmp	.+624    	; 0x2ba <__bad_interrupt>
      4a:	00 00       	nop
      4c:	36 c1       	rjmp	.+620    	; 0x2ba <__bad_interrupt>
      4e:	00 00       	nop
      50:	34 c1       	rjmp	.+616    	; 0x2ba <__bad_interrupt>
      52:	00 00       	nop
      54:	32 c1       	rjmp	.+612    	; 0x2ba <__bad_interrupt>
      56:	00 00       	nop
      58:	30 c1       	rjmp	.+608    	; 0x2ba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2e c1       	rjmp	.+604    	; 0x2ba <__bad_interrupt>
      5e:	00 00       	nop
      60:	2c c1       	rjmp	.+600    	; 0x2ba <__bad_interrupt>
      62:	00 00       	nop
      64:	2a c1       	rjmp	.+596    	; 0x2ba <__bad_interrupt>
      66:	00 00       	nop
      68:	28 c1       	rjmp	.+592    	; 0x2ba <__bad_interrupt>
      6a:	00 00       	nop
      6c:	26 c1       	rjmp	.+588    	; 0x2ba <__bad_interrupt>
      6e:	00 00       	nop
      70:	24 c1       	rjmp	.+584    	; 0x2ba <__bad_interrupt>
      72:	00 00       	nop
      74:	22 c1       	rjmp	.+580    	; 0x2ba <__bad_interrupt>
      76:	00 00       	nop
      78:	20 c1       	rjmp	.+576    	; 0x2ba <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1e c1       	rjmp	.+572    	; 0x2ba <__bad_interrupt>
      7e:	00 00       	nop
      80:	1c c1       	rjmp	.+568    	; 0x2ba <__bad_interrupt>
      82:	00 00       	nop
      84:	1a c1       	rjmp	.+564    	; 0x2ba <__bad_interrupt>
      86:	00 00       	nop
      88:	18 c1       	rjmp	.+560    	; 0x2ba <__bad_interrupt>
      8a:	00 00       	nop
      8c:	16 c1       	rjmp	.+556    	; 0x2ba <__bad_interrupt>
      8e:	00 00       	nop
      90:	14 c1       	rjmp	.+552    	; 0x2ba <__bad_interrupt>
      92:	00 00       	nop
      94:	12 c1       	rjmp	.+548    	; 0x2ba <__bad_interrupt>
      96:	00 00       	nop
      98:	10 c1       	rjmp	.+544    	; 0x2ba <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0e c1       	rjmp	.+540    	; 0x2ba <__bad_interrupt>
      9e:	00 00       	nop
      a0:	0c c1       	rjmp	.+536    	; 0x2ba <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0a c1       	rjmp	.+532    	; 0x2ba <__bad_interrupt>
      a6:	00 00       	nop
      a8:	08 c1       	rjmp	.+528    	; 0x2ba <__bad_interrupt>
      aa:	00 00       	nop
      ac:	06 c1       	rjmp	.+524    	; 0x2ba <__bad_interrupt>
      ae:	00 00       	nop
      b0:	04 c1       	rjmp	.+520    	; 0x2ba <__bad_interrupt>
      b2:	00 00       	nop
      b4:	02 c1       	rjmp	.+516    	; 0x2ba <__bad_interrupt>
      b6:	00 00       	nop
      b8:	00 c1       	rjmp	.+512    	; 0x2ba <__bad_interrupt>
      ba:	00 00       	nop
      bc:	fe c0       	rjmp	.+508    	; 0x2ba <__bad_interrupt>
      be:	00 00       	nop
      c0:	fc c0       	rjmp	.+504    	; 0x2ba <__bad_interrupt>
      c2:	00 00       	nop
      c4:	fa c0       	rjmp	.+500    	; 0x2ba <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f8 c0       	rjmp	.+496    	; 0x2ba <__bad_interrupt>
      ca:	00 00       	nop
      cc:	f6 c0       	rjmp	.+492    	; 0x2ba <__bad_interrupt>
      ce:	00 00       	nop
      d0:	f4 c0       	rjmp	.+488    	; 0x2ba <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f2 c0       	rjmp	.+484    	; 0x2ba <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f0 c0       	rjmp	.+480    	; 0x2ba <__bad_interrupt>
      da:	00 00       	nop
      dc:	ee c0       	rjmp	.+476    	; 0x2ba <__bad_interrupt>
      de:	00 00       	nop
      e0:	ec c0       	rjmp	.+472    	; 0x2ba <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ea c0       	rjmp	.+468    	; 0x2ba <__bad_interrupt>
      e6:	00 00       	nop
      e8:	e8 c0       	rjmp	.+464    	; 0x2ba <__bad_interrupt>
      ea:	00 00       	nop
      ec:	e6 c0       	rjmp	.+460    	; 0x2ba <__bad_interrupt>
      ee:	00 00       	nop
      f0:	e4 c0       	rjmp	.+456    	; 0x2ba <__bad_interrupt>
      f2:	00 00       	nop
      f4:	e2 c0       	rjmp	.+452    	; 0x2ba <__bad_interrupt>
      f6:	00 00       	nop
      f8:	e0 c0       	rjmp	.+448    	; 0x2ba <__bad_interrupt>
      fa:	00 00       	nop
      fc:	de c0       	rjmp	.+444    	; 0x2ba <__bad_interrupt>
      fe:	00 00       	nop
     100:	dc c0       	rjmp	.+440    	; 0x2ba <__bad_interrupt>
     102:	00 00       	nop
     104:	da c0       	rjmp	.+436    	; 0x2ba <__bad_interrupt>
     106:	00 00       	nop
     108:	d8 c0       	rjmp	.+432    	; 0x2ba <__bad_interrupt>
     10a:	00 00       	nop
     10c:	d6 c0       	rjmp	.+428    	; 0x2ba <__bad_interrupt>
     10e:	00 00       	nop
     110:	d4 c0       	rjmp	.+424    	; 0x2ba <__bad_interrupt>
     112:	00 00       	nop
     114:	d2 c0       	rjmp	.+420    	; 0x2ba <__bad_interrupt>
     116:	00 00       	nop
     118:	d0 c0       	rjmp	.+416    	; 0x2ba <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ce c0       	rjmp	.+412    	; 0x2ba <__bad_interrupt>
     11e:	00 00       	nop
     120:	cc c0       	rjmp	.+408    	; 0x2ba <__bad_interrupt>
     122:	00 00       	nop
     124:	ca c0       	rjmp	.+404    	; 0x2ba <__bad_interrupt>
     126:	00 00       	nop
     128:	c8 c0       	rjmp	.+400    	; 0x2ba <__bad_interrupt>
     12a:	00 00       	nop
     12c:	c6 c0       	rjmp	.+396    	; 0x2ba <__bad_interrupt>
     12e:	00 00       	nop
     130:	c4 c0       	rjmp	.+392    	; 0x2ba <__bad_interrupt>
     132:	00 00       	nop
     134:	c2 c0       	rjmp	.+388    	; 0x2ba <__bad_interrupt>
     136:	00 00       	nop
     138:	c0 c0       	rjmp	.+384    	; 0x2ba <__bad_interrupt>
     13a:	00 00       	nop
     13c:	be c0       	rjmp	.+380    	; 0x2ba <__bad_interrupt>
     13e:	00 00       	nop
     140:	bc c0       	rjmp	.+376    	; 0x2ba <__bad_interrupt>
     142:	00 00       	nop
     144:	ba c0       	rjmp	.+372    	; 0x2ba <__bad_interrupt>
     146:	00 00       	nop
     148:	b8 c0       	rjmp	.+368    	; 0x2ba <__bad_interrupt>
     14a:	00 00       	nop
     14c:	b6 c0       	rjmp	.+364    	; 0x2ba <__bad_interrupt>
     14e:	00 00       	nop
     150:	b4 c0       	rjmp	.+360    	; 0x2ba <__bad_interrupt>
     152:	00 00       	nop
     154:	b2 c0       	rjmp	.+356    	; 0x2ba <__bad_interrupt>
     156:	00 00       	nop
     158:	b0 c0       	rjmp	.+352    	; 0x2ba <__bad_interrupt>
     15a:	00 00       	nop
     15c:	ae c0       	rjmp	.+348    	; 0x2ba <__bad_interrupt>
     15e:	00 00       	nop
     160:	ac c0       	rjmp	.+344    	; 0x2ba <__bad_interrupt>
     162:	00 00       	nop
     164:	aa c0       	rjmp	.+340    	; 0x2ba <__bad_interrupt>
     166:	00 00       	nop
     168:	a8 c0       	rjmp	.+336    	; 0x2ba <__bad_interrupt>
     16a:	00 00       	nop
     16c:	a6 c0       	rjmp	.+332    	; 0x2ba <__bad_interrupt>
     16e:	00 00       	nop
     170:	a4 c0       	rjmp	.+328    	; 0x2ba <__bad_interrupt>
     172:	00 00       	nop
     174:	a2 c0       	rjmp	.+324    	; 0x2ba <__bad_interrupt>
     176:	00 00       	nop
     178:	a0 c0       	rjmp	.+320    	; 0x2ba <__bad_interrupt>
     17a:	00 00       	nop
     17c:	9e c0       	rjmp	.+316    	; 0x2ba <__bad_interrupt>
     17e:	00 00       	nop
     180:	9c c0       	rjmp	.+312    	; 0x2ba <__bad_interrupt>
     182:	00 00       	nop
     184:	9a c0       	rjmp	.+308    	; 0x2ba <__bad_interrupt>
     186:	00 00       	nop
     188:	98 c0       	rjmp	.+304    	; 0x2ba <__bad_interrupt>
     18a:	00 00       	nop
     18c:	96 c0       	rjmp	.+300    	; 0x2ba <__bad_interrupt>
     18e:	00 00       	nop
     190:	94 c0       	rjmp	.+296    	; 0x2ba <__bad_interrupt>
     192:	00 00       	nop
     194:	92 c0       	rjmp	.+292    	; 0x2ba <__bad_interrupt>
     196:	00 00       	nop
     198:	90 c0       	rjmp	.+288    	; 0x2ba <__bad_interrupt>
     19a:	00 00       	nop
     19c:	8e c0       	rjmp	.+284    	; 0x2ba <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	8c c0       	rjmp	.+280    	; 0x2ba <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	8a c0       	rjmp	.+276    	; 0x2ba <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	88 c0       	rjmp	.+272    	; 0x2ba <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	86 c0       	rjmp	.+268    	; 0x2ba <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	84 c0       	rjmp	.+264    	; 0x2ba <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	82 c0       	rjmp	.+260    	; 0x2ba <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	80 c0       	rjmp	.+256    	; 0x2ba <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	7e c0       	rjmp	.+252    	; 0x2ba <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	7c c0       	rjmp	.+248    	; 0x2ba <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	7a c0       	rjmp	.+244    	; 0x2ba <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	78 c0       	rjmp	.+240    	; 0x2ba <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	76 c0       	rjmp	.+236    	; 0x2ba <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	74 c0       	rjmp	.+232    	; 0x2ba <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	72 c0       	rjmp	.+228    	; 0x2ba <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	70 c0       	rjmp	.+224    	; 0x2ba <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	6e c0       	rjmp	.+220    	; 0x2ba <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	6c c0       	rjmp	.+216    	; 0x2ba <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	6a c0       	rjmp	.+212    	; 0x2ba <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	68 c0       	rjmp	.+208    	; 0x2ba <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	66 c0       	rjmp	.+204    	; 0x2ba <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	64 c0       	rjmp	.+200    	; 0x2ba <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <__vector_125>
     1f8:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__vector_126>
     1fc:	cf 04       	cpc	r12, r15
     1fe:	d9 04       	cpc	r13, r9
     200:	d9 04       	cpc	r13, r9
     202:	d9 04       	cpc	r13, r9
     204:	d9 04       	cpc	r13, r9
     206:	d9 04       	cpc	r13, r9
     208:	d9 04       	cpc	r13, r9
     20a:	d9 04       	cpc	r13, r9
     20c:	d9 04       	cpc	r13, r9
     20e:	d9 04       	cpc	r13, r9
     210:	d7 04       	cpc	r13, r7
     212:	d9 04       	cpc	r13, r9
     214:	d9 04       	cpc	r13, r9
     216:	d9 04       	cpc	r13, r9
     218:	d9 04       	cpc	r13, r9
     21a:	d9 04       	cpc	r13, r9
     21c:	d9 04       	cpc	r13, r9
     21e:	d9 04       	cpc	r13, r9
     220:	d9 04       	cpc	r13, r9
     222:	d9 04       	cpc	r13, r9
     224:	d9 04       	cpc	r13, r9
     226:	d9 04       	cpc	r13, r9
     228:	d9 04       	cpc	r13, r9
     22a:	d9 04       	cpc	r13, r9
     22c:	d9 04       	cpc	r13, r9
     22e:	d9 04       	cpc	r13, r9
     230:	d9 04       	cpc	r13, r9
     232:	d9 04       	cpc	r13, r9
     234:	d9 04       	cpc	r13, r9
     236:	d9 04       	cpc	r13, r9
     238:	d9 04       	cpc	r13, r9
     23a:	d9 04       	cpc	r13, r9
     23c:	d9 04       	cpc	r13, r9
     23e:	d3 04       	cpc	r13, r3
     240:	d1 04       	cpc	r13, r1
     242:	d5 04       	cpc	r13, r5
     244:	d9 04       	cpc	r13, r9
     246:	d9 04       	cpc	r13, r9
     248:	d9 04       	cpc	r13, r9
     24a:	d9 04       	cpc	r13, r9
     24c:	d9 04       	cpc	r13, r9
     24e:	d9 04       	cpc	r13, r9
     250:	d9 04       	cpc	r13, r9
     252:	d9 04       	cpc	r13, r9
     254:	d9 04       	cpc	r13, r9
     256:	d9 04       	cpc	r13, r9
     258:	d9 04       	cpc	r13, r9
     25a:	d9 04       	cpc	r13, r9
     25c:	d9 04       	cpc	r13, r9
     25e:	d9 04       	cpc	r13, r9
     260:	d9 04       	cpc	r13, r9
     262:	d7 04       	cpc	r13, r7
     264:	16 05       	cpc	r17, r6
     266:	cd 04       	cpc	r12, r13
     268:	18 05       	cpc	r17, r8
     26a:	a9 0e       	add	r10, r25
     26c:	ac 0e       	add	r10, r28
     26e:	af 0e       	add	r10, r31
     270:	b2 0e       	add	r11, r18
     272:	b5 0e       	add	r11, r21
     274:	b8 0e       	add	r11, r24
     276:	bb 0e       	add	r11, r27

00000278 <__ctors_end>:
     278:	11 24       	eor	r1, r1
     27a:	1f be       	out	0x3f, r1	; 63
     27c:	cf ef       	ldi	r28, 0xFF	; 255
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	df e5       	ldi	r29, 0x5F	; 95
     282:	de bf       	out	0x3e, r29	; 62
     284:	00 e0       	ldi	r16, 0x00	; 0
     286:	0c bf       	out	0x3c, r16	; 60

00000288 <__do_copy_data>:
     288:	11 e2       	ldi	r17, 0x21	; 33
     28a:	a0 e0       	ldi	r26, 0x00	; 0
     28c:	b0 e2       	ldi	r27, 0x20	; 32
     28e:	ee e3       	ldi	r30, 0x3E	; 62
     290:	fc e2       	ldi	r31, 0x2C	; 44
     292:	00 e0       	ldi	r16, 0x00	; 0
     294:	0b bf       	out	0x3b, r16	; 59
     296:	02 c0       	rjmp	.+4      	; 0x29c <__do_copy_data+0x14>
     298:	07 90       	elpm	r0, Z+
     29a:	0d 92       	st	X+, r0
     29c:	a8 39       	cpi	r26, 0x98	; 152
     29e:	b1 07       	cpc	r27, r17
     2a0:	d9 f7       	brne	.-10     	; 0x298 <__do_copy_data+0x10>

000002a2 <__do_clear_bss>:
     2a2:	24 e2       	ldi	r18, 0x24	; 36
     2a4:	a8 e9       	ldi	r26, 0x98	; 152
     2a6:	b1 e2       	ldi	r27, 0x21	; 33
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <.do_clear_bss_start>

000002aa <.do_clear_bss_loop>:
     2aa:	1d 92       	st	X+, r1

000002ac <.do_clear_bss_start>:
     2ac:	a2 30       	cpi	r26, 0x02	; 2
     2ae:	b2 07       	cpc	r27, r18
     2b0:	e1 f7       	brne	.-8      	; 0x2aa <.do_clear_bss_loop>
     2b2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <main>
     2b6:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <_exit>

000002ba <__bad_interrupt>:
     2ba:	a2 ce       	rjmp	.-700    	; 0x0 <__vectors>

000002bc <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	08 95       	ret

000002c0 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     2c0:	30 91 f4 23 	lds	r19, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0x2>
     2c4:	20 91 f5 23 	lds	r18, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0x3>
     2c8:	82 2f       	mov	r24, r18
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	02 97       	sbiw	r24, 0x02	; 2
     2ce:	c1 f4       	brne	.+48     	; 0x300 <udi_hid_led_setreport+0x40>
     2d0:	31 11       	cpse	r19, r1
     2d2:	18 c0       	rjmp	.+48     	; 0x304 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     2d4:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
     2d8:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
     2dc:	02 97       	sbiw	r24, 0x02	; 2
     2de:	a1 f4       	brne	.+40     	; 0x308 <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     2e0:	e2 ef       	ldi	r30, 0xF2	; 242
     2e2:	f3 e2       	ldi	r31, 0x23	; 35
     2e4:	88 e9       	ldi	r24, 0x98	; 152
     2e6:	91 e2       	ldi	r25, 0x21	; 33
     2e8:	80 87       	std	Z+8, r24	; 0x08
     2ea:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	82 87       	std	Z+10, r24	; 0x0a
     2f2:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     2f4:	89 ea       	ldi	r24, 0xA9	; 169
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	84 87       	std	Z+12, r24	; 0x0c
     2fa:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	08 95       	ret
	}
	return false;
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	08 95       	ret
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	08 95       	ret
     308:	80 e0       	ldi	r24, 0x00	; 0
}
     30a:	08 95       	ret

0000030c <udi_hid_led_report_in_sent>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep) {
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_led_b_report_in_free = true;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <udi_hid_led_b_report_in_free>
     312:	08 95       	ret

00000314 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     318:	09 ea       	ldi	r16, 0xA9	; 169
     31a:	11 e0       	ldi	r17, 0x01	; 1
     31c:	22 e0       	ldi	r18, 0x02	; 2
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	48 e9       	ldi	r20, 0x98	; 152
     322:	51 e2       	ldi	r21, 0x21	; 33
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
}
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	08 95       	ret

00000332 <udi_hid_led_enable>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep);

/* --------------------------------------------------------------------- */

bool udi_hid_led_enable(void) {
     332:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     334:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     338:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <udi_hid_led_protocol>
	udi_hid_led_b_report_in_free = true;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <udi_hid_led_b_report_in_free>

	if(!udi_hid_led_report_out_enable())
     342:	e8 df       	rcall	.-48     	; 0x314 <udi_hid_led_report_out_enable>
     344:	c8 2f       	mov	r28, r24
     346:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     348:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <main_led_enable>
	return true;
}
     34c:	8c 2f       	mov	r24, r28
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     352:	81 11       	cpse	r24, r1
     354:	06 c0       	rjmp	.+12     	; 0x362 <udi_hid_led_report_out_received+0x10>
     356:	62 30       	cpi	r22, 0x02	; 2
     358:	71 05       	cpc	r23, r1
     35a:	19 f4       	brne	.+6      	; 0x362 <udi_hid_led_report_out_received+0x10>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     35c:	88 e9       	ldi	r24, 0x98	; 152
     35e:	91 e2       	ldi	r25, 0x21	; 33
     360:	f4 d4       	rcall	.+2536   	; 0xd4a <led_ui_report>
	}
	udi_hid_led_report_out_enable();
     362:	d8 cf       	rjmp	.-80     	; 0x314 <udi_hid_led_report_out_enable>
     364:	08 95       	ret

00000366 <udi_hid_led_disable>:
     366:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <main_led_disable>
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     36a:	08 95       	ret

0000036c <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     36c:	20 e6       	ldi	r18, 0x60	; 96
     36e:	31 e0       	ldi	r19, 0x01	; 1
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e2       	ldi	r21, 0x20	; 32
     374:	64 ea       	ldi	r22, 0xA4	; 164
     376:	71 e2       	ldi	r23, 0x21	; 33
     378:	86 ea       	ldi	r24, 0xA6	; 166
     37a:	91 e2       	ldi	r25, 0x21	; 33
     37c:	4f c7       	rjmp	.+3742   	; 0x121c <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     37e:	08 95       	ret

00000380 <udi_hid_led_send_report_in>:
		              udi_hid_led_report_out_received);
}


bool udi_hid_led_send_report_in(uint8_t *data)
{
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	1f 92       	push	r1
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	fc 01       	movw	r30, r24
	if (!udi_hid_led_b_report_in_free)
     392:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <udi_hid_led_b_report_in_free>
     396:	88 23       	and	r24, r24
     398:	19 f1       	breq	.+70     	; 0x3e0 <udi_hid_led_send_report_in+0x60>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     39a:	8f b7       	in	r24, 0x3f	; 63
     39c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     39e:	f8 94       	cli
	return flags;
     3a0:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();

	memset(&udi_hid_led_report_in,
     3a2:	87 e0       	ldi	r24, 0x07	; 7
     3a4:	2a e9       	ldi	r18, 0x9A	; 154
     3a6:	31 e2       	ldi	r19, 0x21	; 33
     3a8:	d9 01       	movw	r26, r18
     3aa:	1d 92       	st	X+, r1
     3ac:	8a 95       	dec	r24
     3ae:	e9 f7       	brne	.-6      	; 0x3aa <udi_hid_led_send_report_in+0x2a>
		   0,
		   sizeof(udi_hid_led_report_in));
	memcpy(&udi_hid_led_report_in,
     3b0:	87 e0       	ldi	r24, 0x07	; 7
     3b2:	d9 01       	movw	r26, r18
     3b4:	01 90       	ld	r0, Z+
     3b6:	0d 92       	st	X+, r0
     3b8:	8a 95       	dec	r24
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <udi_hid_led_send_report_in+0x34>
		   data,
		   sizeof(udi_hid_led_report_in));
	udi_hid_led_b_report_in_free = !udd_ep_run(UDI_HID_LED_EP_IN,
     3bc:	06 e8       	ldi	r16, 0x86	; 134
     3be:	11 e0       	ldi	r17, 0x01	; 1
     3c0:	27 e0       	ldi	r18, 0x07	; 7
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	4a e9       	ldi	r20, 0x9A	; 154
     3c6:	51 e2       	ldi	r21, 0x21	; 33
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	84 e8       	ldi	r24, 0x84	; 132
     3cc:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <udd_ep_run>
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	89 27       	eor	r24, r25
     3d4:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <udi_hid_led_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3d8:	ff be       	out	0x3f, r15	; 63
		                                       false,
		                                       (uint8_t *) & udi_hid_led_report_in,
		                                       sizeof(udi_hid_led_report_in),
		                                       udi_hid_led_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_led_b_report_in_free;
     3da:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <udi_hid_led_b_report_in_free>
     3de:	89 27       	eor	r24, r25
}
     3e0:	0f 90       	pop	r0
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	ff 90       	pop	r15
     3ec:	08 95       	ret

000003ee <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     3ee:	e0 e0       	ldi	r30, 0x00	; 0
     3f0:	f6 e0       	ldi	r31, 0x06	; 6
     3f2:	9f ef       	ldi	r25, 0xFF	; 255
     3f4:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     3f6:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     3f8:	e0 e2       	ldi	r30, 0x20	; 32
     3fa:	f6 e0       	ldi	r31, 0x06	; 6
     3fc:	3f e3       	ldi	r19, 0x3F	; 63
     3fe:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     400:	88 e1       	ldi	r24, 0x18	; 24
     402:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     404:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     406:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     408:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     40a:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     40c:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     40e:	20 ec       	ldi	r18, 0xC0	; 192
     410:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     412:	40 e4       	ldi	r20, 0x40	; 64
     414:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     416:	40 e8       	ldi	r20, 0x80	; 128
     418:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     41a:	e0 e4       	ldi	r30, 0x40	; 64
     41c:	f6 e0       	ldi	r31, 0x06	; 6
     41e:	4c ef       	ldi	r20, 0xFC	; 252
     420:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     422:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     424:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     426:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     428:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     42a:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     42c:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     42e:	43 e0       	ldi	r20, 0x03	; 3
     430:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     432:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     434:	e0 e6       	ldi	r30, 0x60	; 96
     436:	f6 e0       	ldi	r31, 0x06	; 6
     438:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     43a:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     43c:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     43e:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     440:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     442:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     444:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     446:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     448:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     44a:	e0 e8       	ldi	r30, 0x80	; 128
     44c:	f6 e0       	ldi	r31, 0x06	; 6
     44e:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     450:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     452:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     454:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     456:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     458:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     45a:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     45c:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     45e:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     460:	e0 ea       	ldi	r30, 0xA0	; 160
     462:	f6 e0       	ldi	r31, 0x06	; 6
     464:	90 ef       	ldi	r25, 0xF0	; 240
     466:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     468:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     46a:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     46c:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     46e:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     470:	8f e0       	ldi	r24, 0x0F	; 15
     472:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     474:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     476:	f8 d2       	rcall	.+1520   	; 0xa68 <led_init>
	keypad_init();
     478:	2a d1       	rcall	.+596    	; 0x6ce <keypad_init>
	idleStart();
     47a:	9e c3       	rjmp	.+1852   	; 0xbb8 <idleStart>
     47c:	08 95       	ret

0000047e <jstk_readVertIndex>:
     47e:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     482:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	92 2b       	or	r25, r18
     48a:	96 95       	lsr	r25
     48c:	87 95       	ror	r24
     48e:	96 95       	lsr	r25
     490:	87 95       	ror	r24
     492:	bc 01       	movw	r22, r24
     494:	7f 70       	andi	r23, 0x0F	; 15
     496:	80 ff       	sbrs	r24, 0
     498:	17 c0       	rjmp	.+46     	; 0x4c8 <jstk_readVertIndex+0x4a>
     49a:	21 e0       	ldi	r18, 0x01	; 1
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	e1 e0       	ldi	r30, 0x01	; 1
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	82 2f       	mov	r24, r18
     4a4:	af 01       	movw	r20, r30
     4a6:	02 2e       	mov	r0, r18
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <jstk_readVertIndex+0x30>
     4aa:	44 0f       	add	r20, r20
     4ac:	55 1f       	adc	r21, r21
     4ae:	0a 94       	dec	r0
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <jstk_readVertIndex+0x2c>
     4b2:	46 23       	and	r20, r22
     4b4:	57 23       	and	r21, r23
     4b6:	45 2b       	or	r20, r21
     4b8:	41 f0       	breq	.+16     	; 0x4ca <jstk_readVertIndex+0x4c>
     4ba:	2f 5f       	subi	r18, 0xFF	; 255
     4bc:	3f 4f       	sbci	r19, 0xFF	; 255
     4be:	2c 30       	cpi	r18, 0x0C	; 12
     4c0:	31 05       	cpc	r19, r1
     4c2:	79 f7       	brne	.-34     	; 0x4a2 <jstk_readVertIndex+0x24>
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	08 95       	ret
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	08 95       	ret

000004cc <jstk_readHoriIndex>:
     4cc:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     4d0:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	92 2b       	or	r25, r18
     4d8:	bc 01       	movw	r22, r24
     4da:	7f 70       	andi	r23, 0x0F	; 15
     4dc:	80 ff       	sbrs	r24, 0
     4de:	17 c0       	rjmp	.+46     	; 0x50e <jstk_readHoriIndex+0x42>
     4e0:	21 e0       	ldi	r18, 0x01	; 1
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	e1 e0       	ldi	r30, 0x01	; 1
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	82 2f       	mov	r24, r18
     4ea:	af 01       	movw	r20, r30
     4ec:	02 2e       	mov	r0, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <jstk_readHoriIndex+0x28>
     4f0:	44 0f       	add	r20, r20
     4f2:	55 1f       	adc	r21, r21
     4f4:	0a 94       	dec	r0
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <jstk_readHoriIndex+0x24>
     4f8:	46 23       	and	r20, r22
     4fa:	57 23       	and	r21, r23
     4fc:	45 2b       	or	r20, r21
     4fe:	41 f0       	breq	.+16     	; 0x510 <jstk_readHoriIndex+0x44>
     500:	2f 5f       	subi	r18, 0xFF	; 255
     502:	3f 4f       	sbci	r19, 0xFF	; 255
     504:	2c 30       	cpi	r18, 0x0C	; 12
     506:	31 05       	cpc	r19, r1
     508:	79 f7       	brne	.-34     	; 0x4e8 <jstk_readHoriIndex+0x1c>
     50a:	8f ef       	ldi	r24, 0xFF	; 255
     50c:	08 95       	ret
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	08 95       	ret

00000512 <jstk_ledMask>:


uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     512:	88 23       	and	r24, r24
     514:	f4 f1       	brlt	.+124    	; 0x592 <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     516:	9b ef       	ldi	r25, 0xFB	; 251
     518:	98 0f       	add	r25, r24
     51a:	92 30       	cpi	r25, 0x02	; 2
     51c:	e0 f1       	brcs	.+120    	; 0x596 <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     51e:	85 30       	cpi	r24, 0x05	; 5
     520:	34 f4       	brge	.+12     	; 0x52e <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     522:	95 e0       	ldi	r25, 0x05	; 5
     524:	98 1b       	sub	r25, r24
     526:	92 30       	cpi	r25, 0x02	; 2
     528:	08 f0       	brcs	.+2      	; 0x52c <jstk_ledMask+0x1a>
     52a:	42 c0       	rjmp	.+132    	; 0x5b0 <jstk_ledMask+0x9e>
     52c:	36 c0       	rjmp	.+108    	; 0x59a <jstk_ledMask+0x88>
     52e:	9a ef       	ldi	r25, 0xFA	; 250
     530:	98 0f       	add	r25, r24
     532:	92 30       	cpi	r25, 0x02	; 2
     534:	b0 f5       	brcc	.+108    	; 0x5a2 <jstk_ledMask+0x90>
     536:	31 c0       	rjmp	.+98     	; 0x59a <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     538:	62 e0       	ldi	r22, 0x02	; 2
     53a:	23 e0       	ldi	r18, 0x03	; 3
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     542:	e1 e0       	ldi	r30, 0x01	; 1
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	af 01       	movw	r20, r30
     548:	02 2e       	mov	r0, r18
     54a:	02 c0       	rjmp	.+4      	; 0x550 <jstk_ledMask+0x3e>
     54c:	44 0f       	add	r20, r20
     54e:	55 1f       	adc	r21, r21
     550:	0a 94       	dec	r0
     552:	e2 f7       	brpl	.-8      	; 0x54c <jstk_ledMask+0x3a>
     554:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     556:	9f 5f       	subi	r25, 0xFF	; 255
     558:	21 50       	subi	r18, 0x01	; 1
     55a:	31 09       	sbc	r19, r1
     55c:	96 17       	cp	r25, r22
     55e:	98 f3       	brcs	.-26     	; 0x546 <jstk_ledMask+0x34>
     560:	08 95       	ret
     562:	81 50       	subi	r24, 0x01	; 1
     564:	48 2f       	mov	r20, r24
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	4b 5f       	subi	r20, 0xFB	; 251
     56a:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     56c:	24 e0       	ldi	r18, 0x04	; 4
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     572:	e1 e0       	ldi	r30, 0x01	; 1
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	bf 01       	movw	r22, r30
     578:	02 2e       	mov	r0, r18
     57a:	02 c0       	rjmp	.+4      	; 0x580 <jstk_ledMask+0x6e>
     57c:	66 0f       	add	r22, r22
     57e:	77 1f       	adc	r23, r23
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <jstk_ledMask+0x6a>
     584:	86 2b       	or	r24, r22
     586:	2f 5f       	subi	r18, 0xFF	; 255
     588:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     58a:	24 17       	cp	r18, r20
     58c:	35 07       	cpc	r19, r21
     58e:	99 f7       	brne	.-26     	; 0x576 <jstk_ledMask+0x64>
     590:	08 95       	ret


uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     596:	88 e1       	ldi	r24, 0x18	; 24
     598:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     59a:	85 30       	cpi	r24, 0x05	; 5
     59c:	6c f2       	brlt	.-102    	; 0x538 <jstk_ledMask+0x26>
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	e0 cf       	rjmp	.-64     	; 0x562 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     5a2:	85 50       	subi	r24, 0x05	; 5
     5a4:	85 30       	cpi	r24, 0x05	; 5
     5a6:	08 f0       	brcs	.+2      	; 0x5aa <jstk_ledMask+0x98>
     5a8:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     5aa:	81 11       	cpse	r24, r1
     5ac:	da cf       	rjmp	.-76     	; 0x562 <jstk_ledMask+0x50>
     5ae:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     5b0:	66 e0       	ldi	r22, 0x06	; 6
     5b2:	68 1b       	sub	r22, r24
     5b4:	65 30       	cpi	r22, 0x05	; 5
     5b6:	08 f0       	brcs	.+2      	; 0x5ba <jstk_ledMask+0xa8>
     5b8:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     5ba:	61 11       	cpse	r22, r1
     5bc:	be cf       	rjmp	.-132    	; 0x53a <jstk_ledMask+0x28>
     5be:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     5c0:	08 95       	ret

000005c2 <jstk_readMask>:


uint8_t jstk_readMask(void)
{
     5c2:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     5c4:	5c df       	rcall	.-328    	; 0x47e <jstk_readVertIndex>
     5c6:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     5c8:	81 df       	rcall	.-254    	; 0x4cc <jstk_readHoriIndex>
     5ca:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     5cc:	24 f4       	brge	.+8      	; 0x5d6 <jstk_readMask+0x14>
     5ce:	88 23       	and	r24, r24
     5d0:	c4 f0       	brlt	.+48     	; 0x602 <jstk_readMask+0x40>
     5d2:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <jstk_readMask+0x26>
     5d6:	c6 30       	cpi	r28, 0x06	; 6
     5d8:	1c f0       	brlt	.+6      	; 0x5e0 <jstk_readMask+0x1e>
     5da:	9b ef       	ldi	r25, 0xFB	; 251
     5dc:	9c 0f       	add	r25, r28
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <jstk_readMask+0x22>
     5e0:	95 e0       	ldi	r25, 0x05	; 5
     5e2:	9c 1b       	sub	r25, r28
     5e4:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     5e6:	54 f0       	brlt	.+20     	; 0x5fc <jstk_readMask+0x3a>
     5e8:	86 30       	cpi	r24, 0x06	; 6
     5ea:	1c f0       	brlt	.+6      	; 0x5f2 <jstk_readMask+0x30>
     5ec:	2b ef       	ldi	r18, 0xFB	; 251
     5ee:	28 0f       	add	r18, r24
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <jstk_readMask+0x34>
     5f2:	25 e0       	ldi	r18, 0x05	; 5
     5f4:	28 1b       	sub	r18, r24
     5f6:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     5f8:	08 f4       	brcc	.+2      	; 0x5fc <jstk_readMask+0x3a>
     5fa:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     5fc:	8c 2f       	mov	r24, r28
     5fe:	89 df       	rcall	.-238    	; 0x512 <jstk_ledMask>
     600:	01 c0       	rjmp	.+2      	; 0x604 <jstk_readMask+0x42>
     602:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     604:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     606:	08 95       	ret

00000608 <jstk_usbTask>:
     608:	61 df       	rcall	.-318    	; 0x4cc <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     60a:	88 23       	and	r24, r24
     60c:	3c f0       	brlt	.+14     	; 0x61c <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     60e:	e8 2f       	mov	r30, r24
     610:	88 0f       	add	r24, r24
     612:	ff 0b       	sbc	r31, r31
     614:	e8 58       	subi	r30, 0x88	; 136
     616:	fe 4d       	sbci	r31, 0xDE	; 222
     618:	80 81       	ld	r24, Z
     61a:	01 c0       	rjmp	.+2      	; 0x61e <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     61c:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());    // x
     61e:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());    // y
     622:	2d df       	rcall	.-422    	; 0x47e <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     624:	88 23       	and	r24, r24
     626:	3c f0       	brlt	.+14     	; 0x636 <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     628:	e8 2f       	mov	r30, r24
     62a:	88 0f       	add	r24, r24
     62c:	ff 0b       	sbc	r31, r31
     62e:	e8 58       	subi	r30, 0x88	; 136
     630:	fe 4d       	sbci	r31, 0xDE	; 222
     632:	80 81       	ld	r24, Z
     634:	01 c0       	rjmp	.+2      	; 0x638 <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     636:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());    // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());    // y
     638:	e8 ea       	ldi	r30, 0xA8	; 168
     63a:	f1 e2       	ldi	r31, 0x21	; 33
     63c:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) ||
     63e:	20 81       	ld	r18, Z
     640:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     644:	29 13       	cpse	r18, r25
     646:	04 c0       	rjmp	.+8      	; 0x650 <jstk_usbTask+0x48>
     648:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     64c:	98 17       	cp	r25, r24
     64e:	71 f0       	breq	.+28     	; 0x66c <jstk_usbTask+0x64>
        (jstk_usbReport[1] != jstk_prevReport[1])) {             // value changed?
        if (udi_hid_joystick_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     650:	88 ea       	ldi	r24, 0xA8	; 168
     652:	91 e2       	ldi	r25, 0x21	; 33
     654:	f2 d4       	rcall	.+2532   	; 0x103a <udi_hid_joystick_send_report_in>
     656:	88 23       	and	r24, r24
     658:	49 f0       	breq	.+18     	; 0x66c <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     65a:	e6 e2       	ldi	r30, 0x26	; 38
     65c:	f0 e2       	ldi	r31, 0x20	; 32
     65e:	a8 ea       	ldi	r26, 0xA8	; 168
     660:	b1 e2       	ldi	r27, 0x21	; 33
     662:	8c 91       	ld	r24, X
     664:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     666:	11 96       	adiw	r26, 0x01	; 1
     668:	8c 91       	ld	r24, X
     66a:	81 83       	std	Z+1, r24	; 0x01
     66c:	08 95       	ret

0000066e <jstk_getMap>:
        }
    }
}

uint32_t jstk_getMap(void) {
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
 * Similar to sweeping your fingers across the keys of a piano.
 */

// vertical slider
static uint16_t jstk_readVertRaw(void) {
    uint8_t jstk_c = PORTC.IN;
     672:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>
    uint8_t jstk_d = PORTD.IN;
     676:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
    uint16_t jstk_w = ((uint16_t)jstk_d << 8) | jstk_c; // build 16 bit word
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	92 2b       	or	r25, r18
    return idx;
}

// horizontal slider
static uint16_t jstk_readHoriRaw(void) {
    uint8_t jstk_e = PORTE.IN;
     67e:	40 91 88 06 	lds	r20, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
    uint8_t jstk_b = PORTB.IN;
     682:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
    // invert & mask (1 = pressed, 0 = released)
    uint16_t mapV = (~rawV) & SLIDER_MASK;
    uint16_t mapH = (~rawH) & SLIDER_MASK;

    // pack vertical into 0-11 bits, horizontal in 12-23 bits
    return ((uint32_t)mapH << SLIDER_COUNT) | mapV; // 24-31 bits unused
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	52 2b       	or	r21, r18
     68a:	40 95       	com	r20
     68c:	50 95       	com	r21
     68e:	5f 70       	andi	r21, 0x0F	; 15
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	03 2e       	mov	r0, r19
     696:	3c e0       	ldi	r19, 0x0C	; 12
     698:	44 0f       	add	r20, r20
     69a:	55 1f       	adc	r21, r21
     69c:	66 1f       	adc	r22, r22
     69e:	77 1f       	adc	r23, r23
     6a0:	3a 95       	dec	r19
     6a2:	d1 f7       	brne	.-12     	; 0x698 <jstk_getMap+0x2a>
     6a4:	30 2d       	mov	r19, r0
     6a6:	96 95       	lsr	r25
     6a8:	87 95       	ror	r24
     6aa:	96 95       	lsr	r25
     6ac:	87 95       	ror	r24
     6ae:	80 95       	com	r24
     6b0:	90 95       	com	r25
     6b2:	9f 70       	andi	r25, 0x0F	; 15
     6b4:	a0 e0       	ldi	r26, 0x00	; 0
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	8a 01       	movw	r16, r20
     6ba:	9b 01       	movw	r18, r22
     6bc:	08 2b       	or	r16, r24
     6be:	19 2b       	or	r17, r25
     6c0:	2a 2b       	or	r18, r26
     6c2:	3b 2b       	or	r19, r27
     6c4:	c9 01       	movw	r24, r18
     6c6:	b8 01       	movw	r22, r16
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	08 95       	ret

000006ce <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     6ce:	10 92 c5 21 	sts	0x21C5, r1	; 0x8021c5 <kpd_keyPressed>
     6d2:	10 92 c2 21 	sts	0x21C2, r1	; 0x8021c2 <kpd_currState>
     6d6:	10 92 c3 21 	sts	0x21C3, r1	; 0x8021c3 <kpd_prevState>
     6da:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <kpd_exitTestMode>
     6de:	10 92 c6 21 	sts	0x21C6, r1	; 0x8021c6 <kpd_rowVal>
     6e2:	10 92 c4 21 	sts	0x21C4, r1	; 0x8021c4 <kpd_code>
     6e6:	ec ec       	ldi	r30, 0xCC	; 204
     6e8:	f1 e2       	ldi	r31, 0x21	; 33
     6ea:	81 e1       	ldi	r24, 0x11	; 17
     6ec:	80 83       	st	Z, r24
     6ee:	8a e2       	ldi	r24, 0x2A	; 42
     6f0:	81 83       	std	Z+1, r24	; 0x01
     6f2:	12 82       	std	Z+2, r1	; 0x02
     6f4:	13 82       	std	Z+3, r1	; 0x03
     6f6:	88 e2       	ldi	r24, 0x28	; 40
     6f8:	84 83       	std	Z+4, r24	; 0x04
     6fa:	89 e2       	ldi	r24, 0x29	; 41
     6fc:	85 83       	std	Z+5, r24	; 0x05
     6fe:	16 82       	std	Z+6, r1	; 0x06
     700:	17 82       	std	Z+7, r1	; 0x07
     702:	87 e0       	ldi	r24, 0x07	; 7
     704:	80 87       	std	Z+8, r24	; 0x08
     706:	11 86       	std	Z+9, r1	; 0x09
     708:	12 86       	std	Z+10, r1	; 0x0a
     70a:	13 86       	std	Z+11, r1	; 0x0b
     70c:	14 86       	std	Z+12, r1	; 0x0c
     70e:	15 86       	std	Z+13, r1	; 0x0d
     710:	9a e3       	ldi	r25, 0x3A	; 58
     712:	96 87       	std	Z+14, r25	; 0x0e
     714:	9c e3       	ldi	r25, 0x3C	; 60
     716:	97 87       	std	Z+15, r25	; 0x0f
     718:	10 8a       	std	Z+16, r1	; 0x10
     71a:	11 8a       	std	Z+17, r1	; 0x11
     71c:	9b e3       	ldi	r25, 0x3B	; 59
     71e:	92 8b       	std	Z+18, r25	; 0x12
     720:	9d e3       	ldi	r25, 0x3D	; 61
     722:	93 8b       	std	Z+19, r25	; 0x13
     724:	e7 ec       	ldi	r30, 0xC7	; 199
     726:	f1 e2       	ldi	r31, 0x21	; 33
     728:	9e e0       	ldi	r25, 0x0E	; 14
     72a:	90 83       	st	Z, r25
     72c:	9d e0       	ldi	r25, 0x0D	; 13
     72e:	91 83       	std	Z+1, r25	; 0x01
     730:	9b e0       	ldi	r25, 0x0B	; 11
     732:	92 83       	std	Z+2, r25	; 0x02
     734:	83 83       	std	Z+3, r24	; 0x03
     736:	8f ef       	ldi	r24, 0xFF	; 255
     738:	84 83       	std	Z+4, r24	; 0x04
     73a:	08 95       	ret

0000073c <keypad_poll>:
     73c:	4f 92       	push	r4
     73e:	5f 92       	push	r5
     740:	6f 92       	push	r6
     742:	7f 92       	push	r7
     744:	8f 92       	push	r8
     746:	9f 92       	push	r9
     748:	af 92       	push	r10
     74a:	bf 92       	push	r11
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	ee ea       	ldi	r30, 0xAE	; 174
     75e:	f1 e2       	ldi	r31, 0x21	; 33
     760:	87 eb       	ldi	r24, 0xB7	; 183
     762:	91 e2       	ldi	r25, 0x21	; 33
     764:	11 92       	st	Z+, r1
     766:	8e 17       	cp	r24, r30
     768:	9f 07       	cpc	r25, r31
     76a:	e1 f7       	brne	.-8      	; 0x764 <keypad_poll+0x28>
     76c:	40 90 ad 21 	lds	r4, 0x21AD	; 0x8021ad <prevRowMask.5350>
     770:	04 e8       	ldi	r16, 0x84	; 132
     772:	11 e2       	ldi	r17, 0x21	; 33
     774:	c0 e0       	ldi	r28, 0x00	; 0
     776:	d0 e0       	ldi	r29, 0x00	; 0
     778:	b1 2c       	mov	r11, r1
     77a:	0f 2e       	mov	r0, r31
     77c:	f5 e0       	ldi	r31, 0x05	; 5
     77e:	6f 2e       	mov	r6, r31
     780:	f0 2d       	mov	r31, r0
     782:	68 94       	set
     784:	77 24       	eor	r7, r7
     786:	72 f8       	bld	r7, 2
     788:	0f 2e       	mov	r0, r31
     78a:	f0 ea       	ldi	r31, 0xA0	; 160
     78c:	ef 2e       	mov	r14, r31
     78e:	f6 e0       	ldi	r31, 0x06	; 6
     790:	ff 2e       	mov	r15, r31
     792:	f0 2d       	mov	r31, r0
     794:	0f 2e       	mov	r0, r31
     796:	f0 e2       	ldi	r31, 0x20	; 32
     798:	cf 2e       	mov	r12, r31
     79a:	f6 e0       	ldi	r31, 0x06	; 6
     79c:	df 2e       	mov	r13, r31
     79e:	f0 2d       	mov	r31, r0
     7a0:	68 94       	set
     7a2:	88 24       	eor	r8, r8
     7a4:	87 f8       	bld	r8, 7
     7a6:	99 24       	eor	r9, r9
     7a8:	93 94       	inc	r9
     7aa:	ac 2e       	mov	r10, r28
     7ac:	fe 01       	movw	r30, r28
     7ae:	e9 53       	subi	r30, 0x39	; 57
     7b0:	fe 4d       	sbci	r31, 0xDE	; 222
     7b2:	80 81       	ld	r24, Z
     7b4:	d7 01       	movw	r26, r14
     7b6:	14 96       	adiw	r26, 0x04	; 4
     7b8:	8c 93       	st	X, r24
     7ba:	b4 e0       	ldi	r27, 0x04	; 4
     7bc:	cb 13       	cpse	r28, r27
     7be:	03 c0       	rjmp	.+6      	; 0x7c6 <keypad_poll+0x8a>
     7c0:	f6 01       	movw	r30, r12
     7c2:	86 82       	std	Z+6, r8	; 0x06
     7c4:	03 c0       	rjmp	.+6      	; 0x7cc <keypad_poll+0x90>
     7c6:	d6 01       	movw	r26, r12
     7c8:	15 96       	adiw	r26, 0x05	; 5
     7ca:	8c 92       	st	X, r8
     7cc:	f7 01       	movw	r30, r14
     7ce:	80 85       	ldd	r24, Z+8	; 0x08
     7d0:	80 7f       	andi	r24, 0xF0	; 240
     7d2:	80 95       	com	r24
     7d4:	f8 2f       	mov	r31, r24
     7d6:	f0 7f       	andi	r31, 0xF0	; 240
     7d8:	5f 2e       	mov	r5, r31
     7da:	84 fd       	sbrc	r24, 4
     7dc:	b3 94       	inc	r11
     7de:	85 fd       	sbrc	r24, 5
     7e0:	b3 94       	inc	r11
     7e2:	86 fd       	sbrc	r24, 6
     7e4:	b3 94       	inc	r11
     7e6:	55 20       	and	r5, r5
     7e8:	0c f4       	brge	.+2      	; 0x7ec <keypad_poll+0xb0>
     7ea:	b3 94       	inc	r11
     7ec:	f8 01       	movw	r30, r16
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	25 2d       	mov	r18, r5
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	a9 01       	movw	r20, r18
     7f8:	b9 01       	movw	r22, r18
     7fa:	08 2e       	mov	r0, r24
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <keypad_poll+0xc6>
     7fe:	75 95       	asr	r23
     800:	67 95       	ror	r22
     802:	0a 94       	dec	r0
     804:	e2 f7       	brpl	.-8      	; 0x7fe <keypad_poll+0xc2>
     806:	60 ff       	sbrs	r22, 0
     808:	0a c0       	rjmp	.+20     	; 0x81e <keypad_poll+0xe2>
     80a:	60 81       	ld	r22, Z
     80c:	69 30       	cpi	r22, 0x09	; 9
     80e:	38 f4       	brcc	.+14     	; 0x81e <keypad_poll+0xe2>
     810:	06 2e       	mov	r0, r22
     812:	00 0c       	add	r0, r0
     814:	77 0b       	sbc	r23, r23
     816:	62 55       	subi	r22, 0x52	; 82
     818:	7e 4d       	sbci	r23, 0xDE	; 222
     81a:	db 01       	movw	r26, r22
     81c:	9c 92       	st	X, r9
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	31 96       	adiw	r30, 0x01	; 1
     822:	88 30       	cpi	r24, 0x08	; 8
     824:	91 05       	cpc	r25, r1
     826:	39 f7       	brne	.-50     	; 0x7f6 <keypad_poll+0xba>
     828:	ca 01       	movw	r24, r20
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	48 23       	and	r20, r24
     82e:	59 23       	and	r21, r25
     830:	45 2b       	or	r20, r21
     832:	49 f0       	breq	.+18     	; 0x846 <keypad_poll+0x10a>
     834:	b4 2d       	mov	r27, r4
     836:	b0 95       	com	r27
     838:	b5 21       	and	r27, r5
     83a:	09 f4       	brne	.+2      	; 0x83e <keypad_poll+0x102>
     83c:	b5 2d       	mov	r27, r5
     83e:	8b 2f       	mov	r24, r27
     840:	81 95       	neg	r24
     842:	b8 23       	and	r27, r24
     844:	01 c0       	rjmp	.+2      	; 0x848 <keypad_poll+0x10c>
     846:	b5 2d       	mov	r27, r5
     848:	b0 32       	cpi	r27, 0x20	; 32
     84a:	79 f0       	breq	.+30     	; 0x86a <keypad_poll+0x12e>
     84c:	20 f4       	brcc	.+8      	; 0x856 <keypad_poll+0x11a>
     84e:	b0 31       	cpi	r27, 0x10	; 16
     850:	09 f4       	brne	.+2      	; 0x854 <keypad_poll+0x118>
     852:	48 c0       	rjmp	.+144    	; 0x8e4 <keypad_poll+0x1a8>
     854:	0e c0       	rjmp	.+28     	; 0x872 <keypad_poll+0x136>
     856:	b0 34       	cpi	r27, 0x40	; 64
     858:	09 f4       	brne	.+2      	; 0x85c <keypad_poll+0x120>
     85a:	46 c0       	rjmp	.+140    	; 0x8e8 <keypad_poll+0x1ac>
     85c:	b0 38       	cpi	r27, 0x80	; 128
     85e:	49 f4       	brne	.+18     	; 0x872 <keypad_poll+0x136>
     860:	0f 2e       	mov	r0, r31
     862:	f3 e0       	ldi	r31, 0x03	; 3
     864:	7f 2e       	mov	r7, r31
     866:	f0 2d       	mov	r31, r0
     868:	42 c0       	rjmp	.+132    	; 0x8ee <keypad_poll+0x1b2>
     86a:	bb 23       	and	r27, r27
     86c:	11 f0       	breq	.+4      	; 0x872 <keypad_poll+0x136>
     86e:	6a 2c       	mov	r6, r10
     870:	79 2c       	mov	r7, r9
     872:	21 96       	adiw	r28, 0x01	; 1
     874:	0c 5f       	subi	r16, 0xFC	; 252
     876:	1f 4f       	sbci	r17, 0xFF	; 255
     878:	45 2c       	mov	r4, r5
     87a:	c5 30       	cpi	r28, 0x05	; 5
     87c:	d1 05       	cpc	r29, r1
     87e:	09 f0       	breq	.+2      	; 0x882 <keypad_poll+0x146>
     880:	94 cf       	rjmp	.-216    	; 0x7aa <keypad_poll+0x6e>
     882:	50 92 ad 21 	sts	0x21AD, r5	; 0x8021ad <prevRowMask.5350>
     886:	80 e8       	ldi	r24, 0x80	; 128
     888:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     88c:	b3 e0       	ldi	r27, 0x03	; 3
     88e:	b7 15       	cp	r27, r7
     890:	e0 f0       	brcs	.+56     	; 0x8ca <keypad_poll+0x18e>
     892:	e6 2d       	mov	r30, r6
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	ee 0f       	add	r30, r30
     898:	ff 1f       	adc	r31, r31
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	e4 53       	subi	r30, 0x34	; 52
     8a0:	fe 4d       	sbci	r31, 0xDE	; 222
     8a2:	e7 0d       	add	r30, r7
     8a4:	f1 1d       	adc	r31, r1
     8a6:	80 81       	ld	r24, Z
     8a8:	90 91 c5 21 	lds	r25, 0x21C5	; 0x8021c5 <kpd_keyPressed>
     8ac:	91 11       	cpse	r25, r1
     8ae:	06 c0       	rjmp	.+12     	; 0x8bc <keypad_poll+0x180>
     8b0:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <kpd_code>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	80 93 c5 21 	sts	0x21C5, r24	; 0x8021c5 <kpd_keyPressed>
     8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <keypad_poll+0x19a>
     8bc:	90 91 c4 21 	lds	r25, 0x21C4	; 0x8021c4 <kpd_code>
     8c0:	89 17       	cp	r24, r25
     8c2:	49 f0       	breq	.+18     	; 0x8d6 <keypad_poll+0x19a>
     8c4:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <kpd_code>
     8c8:	06 c0       	rjmp	.+12     	; 0x8d6 <keypad_poll+0x19a>
     8ca:	80 91 c5 21 	lds	r24, 0x21C5	; 0x8021c5 <kpd_keyPressed>
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	11 f4       	brne	.+4      	; 0x8d6 <keypad_poll+0x19a>
     8d2:	10 92 c5 21 	sts	0x21C5, r1	; 0x8021c5 <kpd_keyPressed>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	8b 15       	cp	r24, r11
     8da:	08 f0       	brcs	.+2      	; 0x8de <keypad_poll+0x1a2>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <kpd_multiPress>
     8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <keypad_poll+0x1b6>
     8e4:	71 2c       	mov	r7, r1
     8e6:	03 c0       	rjmp	.+6      	; 0x8ee <keypad_poll+0x1b2>
     8e8:	68 94       	set
     8ea:	77 24       	eor	r7, r7
     8ec:	71 f8       	bld	r7, 1
     8ee:	6a 2c       	mov	r6, r10
     8f0:	c0 cf       	rjmp	.-128    	; 0x872 <keypad_poll+0x136>
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	af 90       	pop	r10
     906:	9f 90       	pop	r9
     908:	8f 90       	pop	r8
     90a:	7f 90       	pop	r7
     90c:	6f 90       	pop	r6
     90e:	5f 90       	pop	r5
     910:	4f 90       	pop	r4
     912:	08 95       	ret

00000914 <kbd_getMap>:

uint16_t kbd_getMap(void) {
     914:	ee ea       	ldi	r30, 0xAE	; 174
     916:	f1 e2       	ldi	r31, 0x21	; 33
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t bits = 0;
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	50 e0       	ldi	r21, 0x00	; 0

	for (uint8_t i = 0; i < 9; ++i) {
		if (keyMap[i]) {
			bits |= (1 << i);
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	70 e0       	ldi	r23, 0x00	; 0

uint16_t kbd_getMap(void) {
	uint16_t bits = 0;

	for (uint8_t i = 0; i < 9; ++i) {
		if (keyMap[i]) {
     924:	91 91       	ld	r25, Z+
     926:	99 23       	and	r25, r25
     928:	49 f0       	breq	.+18     	; 0x93c <kbd_getMap+0x28>
			bits |= (1 << i);
     92a:	cb 01       	movw	r24, r22
     92c:	02 2e       	mov	r0, r18
     92e:	02 c0       	rjmp	.+4      	; 0x934 <kbd_getMap+0x20>
     930:	88 0f       	add	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	0a 94       	dec	r0
     936:	e2 f7       	brpl	.-8      	; 0x930 <kbd_getMap+0x1c>
     938:	48 2b       	or	r20, r24
     93a:	59 2b       	or	r21, r25
     93c:	2f 5f       	subi	r18, 0xFF	; 255
     93e:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint16_t kbd_getMap(void) {
	uint16_t bits = 0;

	for (uint8_t i = 0; i < 9; ++i) {
     940:	29 30       	cpi	r18, 0x09	; 9
     942:	31 05       	cpc	r19, r1
     944:	79 f7       	brne	.-34     	; 0x924 <kbd_getMap+0x10>
			bits |= (1 << i);
		}
	}

	return bits;
}
     946:	ca 01       	movw	r24, r20
     948:	08 95       	ret

0000094a <keypad_report>:


// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     94a:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     94e:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <kpd_testMode>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     952:	80 91 c5 21 	lds	r24, 0x21C5	; 0x8021c5 <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     956:	80 93 c2 21 	sts	0x21C2, r24	; 0x8021c2 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     95a:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_currentCode = keypad_getCode();    // current code to be outputed
     95e:	80 93 c1 21 	sts	0x21C1, r24	; 0x8021c1 <kpd_currentCode>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     962:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <kpd_testMode>
     966:	84 fd       	sbrc	r24, 4
     968:	28 c0       	rjmp	.+80     	; 0x9ba <keypad_report+0x70>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     96a:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <kpd_currState>
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	09 f0       	breq	.+2      	; 0x974 <keypad_report+0x2a>
     972:	4c c0       	rjmp	.+152    	; 0xa0c <keypad_report+0xc2>
     974:	80 91 c3 21 	lds	r24, 0x21C3	; 0x8021c3 <kpd_prevState>
     978:	81 11       	cpse	r24, r1
     97a:	48 c0       	rjmp	.+144    	; 0xa0c <keypad_report+0xc2>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
     97c:	e0 91 c1 21 	lds	r30, 0x21C1	; 0x8021c1 <kpd_currentCode>
     980:	8e 2f       	mov	r24, r30
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	fc 01       	movw	r30, r24
     986:	37 97       	sbiw	r30, 0x07	; 7
     988:	e7 33       	cpi	r30, 0x37	; 55
     98a:	f1 05       	cpc	r31, r1
     98c:	90 f4       	brcc	.+36     	; 0x9b2 <keypad_report+0x68>
     98e:	88 27       	eor	r24, r24
     990:	e2 50       	subi	r30, 0x02	; 2
     992:	ff 4f       	sbci	r31, 0xFF	; 255
     994:	8f 4f       	sbci	r24, 0xFF	; 255
     996:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__tablejump2__>
			{
				case HID_F1:        kpd_testMask = LED1_PIN;  break;  // F1
				case HID_F2:        kpd_testMask = LED2_PIN;  break;  // F2
				case HID_F3:        kpd_testMask = LED3_PIN;  break;  // F3
     99a:	84 e0       	ldi	r24, 0x04	; 4
     99c:	09 c0       	rjmp	.+18     	; 0x9b0 <keypad_report+0x66>
				case HID_F4:        kpd_testMask = LED4_PIN;  break;  // F4
				case HID_D:         kpd_testMask = LED5_PIN;  break;  // Display
     99e:	80 e1       	ldi	r24, 0x10	; 16
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <keypad_report+0x66>
				case HID_ESCAPE:    kpd_testMask = LED6_PIN;  break;  // Cancel
     9a2:	80 e2       	ldi	r24, 0x20	; 32
     9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <keypad_report+0x66>
				case HID_ENTER:     kpd_testMask = LED7_PIN;  break;  // Enter
     9a6:	80 e4       	ldi	r24, 0x40	; 64
     9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <keypad_report+0x66>
				case HID_BACKSPACE:	kpd_testMask = LED8_PIN;  break;  // Clear
     9aa:	80 e8       	ldi	r24, 0x80	; 128
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <keypad_report+0x66>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_F1:        kpd_testMask = LED1_PIN;  break;  // F1
     9ae:	81 e0       	ldi	r24, 0x01	; 1
				case HID_ENTER:     kpd_testMask = LED7_PIN;  break;  // Enter
				case HID_BACKSPACE:	kpd_testMask = LED8_PIN;  break;  // Clear
				case HID_N:         kpd_testMask = LED1_PIN;  break;  // Null
				default:            kpd_testMask = 0;         break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     9b0:	73 d0       	rcall	.+230    	; 0xa98 <led_toggle>

			// activityEnable();
			kpd_exitTestMode = 1;	// flag for exiting test mode
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <kpd_exitTestMode>
     9b8:	29 c0       	rjmp	.+82     	; 0xa0c <keypad_report+0xc2>
	kpd_multiPress = (pressedCount > 1);
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     9ba:	80 91 c5 21 	lds	r24, 0x21C5	; 0x8021c5 <kpd_keyPressed>

		static bool    kpd_firstKey  = false;
		static uint8_t kpd_firstCode = 0;
		static bool    kpd_block     = false;

		if (!kpd_firstKey) {
     9be:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <kpd_firstKey.5406>
     9c2:	91 11       	cpse	r25, r1
     9c4:	0b c0       	rjmp	.+22     	; 0x9dc <keypad_report+0x92>
			if (kpd_anyPressed) {
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	09 f5       	brne	.+66     	; 0xa0c <keypad_report+0xc2>
				kpd_firstKey = true;
     9ca:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <kpd_firstKey.5406>
				kpd_firstCode = kpd_currentCode;
     9ce:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <kpd_currentCode>
     9d2:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <kpd_firstCode.5407>
				kpd_block = false;
     9d6:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <kpd_block.5408>
     9da:	18 c0       	rjmp	.+48     	; 0xa0c <keypad_report+0xc2>
			}
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
     9dc:	81 30       	cpi	r24, 0x01	; 1
     9de:	51 f5       	brne	.+84     	; 0xa34 <keypad_report+0xea>
     9e0:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <kpd_block.5408>
     9e4:	81 11       	cpse	r24, r1
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <keypad_report+0xc2>
     9e8:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <kpd_multiPress>
     9ec:	88 23       	and	r24, r24
     9ee:	71 f0       	breq	.+28     	; 0xa0c <keypad_report+0xc2>
				kpd_block = true;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <kpd_block.5408>
     9f6:	0a c0       	rjmp	.+20     	; 0xa0c <keypad_report+0xc2>
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
					udi_hid_kbd_down(kpd_firstCode);
     9f8:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <kpd_firstCode.5407>
     9fc:	db d3       	rcall	.+1974   	; 0x11b4 <udi_hid_kbd_down>
					udi_hid_kbd_up(kpd_firstCode);
     9fe:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <kpd_firstCode.5407>
     a02:	9c d3       	rcall	.+1848   	; 0x113c <udi_hid_kbd_up>
				}
				kpd_firstKey = false;
     a04:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <kpd_firstKey.5406>
				kpd_block = false;
     a08:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <kpd_block.5408>
			}
		}
	}

	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     a0c:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <kpd_testMode>
     a10:	84 ff       	sbrs	r24, 4
     a12:	07 c0       	rjmp	.+14     	; 0xa22 <keypad_report+0xd8>
     a14:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <kpd_exitTestMode>
     a18:	81 30       	cpi	r24, 0x01	; 1
		led_quiet_allOff();
     a1a:	19 f4       	brne	.+6      	; 0xa22 <keypad_report+0xd8>
     a1c:	74 d0       	rcall	.+232    	; 0xb06 <led_quiet_allOff>
		kpd_exitTestMode = 0;
     a1e:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <kpd_exitTestMode>
	}
	kpd_prevState = kpd_currState;
     a22:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <kpd_currState>
     a26:	80 93 c3 21 	sts	0x21C3, r24	; 0x8021c3 <kpd_prevState>
     a2a:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_currentCode) 
			{
				case HID_F1:        kpd_testMask = LED1_PIN;  break;  // F1
				case HID_F2:        kpd_testMask = LED2_PIN;  break;  // F2
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	c0 cf       	rjmp	.-128    	; 0x9b0 <keypad_report+0x66>
				case HID_F3:        kpd_testMask = LED3_PIN;  break;  // F3
				case HID_F4:        kpd_testMask = LED4_PIN;  break;  // F4
     a30:	88 e0       	ldi	r24, 0x08	; 8
     a32:	be cf       	rjmp	.-132    	; 0x9b0 <keypad_report+0x66>
		} else {
			if (kpd_anyPressed && !kpd_block && kpd_multiPress) {
				kpd_block = true;
			}
			if (!kpd_anyPressed) {
				if (!kpd_block) {
     a34:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <kpd_block.5408>
     a38:	81 11       	cpse	r24, r1
     a3a:	e4 cf       	rjmp	.-56     	; 0xa04 <keypad_report+0xba>
     a3c:	dd cf       	rjmp	.-70     	; 0x9f8 <keypad_report+0xae>

00000a3e <led_updateState>:

void led_off(uint8_t mask) {      // LED off
    LED_PORT.OUTSET = mask;       // drive high (off)

    led_updateState(mask, false);
    activityEnable();
     a3e:	e8 ee       	ldi	r30, 0xE8	; 232
     a40:	f1 e2       	ldi	r31, 0x21	; 33
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	ac 01       	movw	r20, r24
     a4a:	02 2e       	mov	r0, r18
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <led_updateState+0x14>
     a4e:	55 95       	asr	r21
     a50:	47 95       	ror	r20
     a52:	0a 94       	dec	r0
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <led_updateState+0x10>
     a56:	40 fd       	sbrc	r20, 0
     a58:	60 83       	st	Z, r22
     a5a:	2f 5f       	subi	r18, 0xFF	; 255
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
     a5e:	31 96       	adiw	r30, 0x01	; 1
     a60:	28 30       	cpi	r18, 0x08	; 8
     a62:	31 05       	cpc	r19, r1
     a64:	89 f7       	brne	.-30     	; 0xa48 <led_updateState+0xa>
     a66:	08 95       	ret

00000a68 <led_init>:
     a68:	e0 e0       	ldi	r30, 0x00	; 0
     a6a:	f6 e0       	ldi	r31, 0x06	; 6
     a6c:	8f ef       	ldi	r24, 0xFF	; 255
     a6e:	81 83       	std	Z+1, r24	; 0x01
     a70:	85 83       	std	Z+5, r24	; 0x05
     a72:	e0 e2       	ldi	r30, 0x20	; 32
     a74:	f6 e0       	ldi	r31, 0x06	; 6
     a76:	80 e4       	ldi	r24, 0x40	; 64
     a78:	81 83       	std	Z+1, r24	; 0x01
     a7a:	85 83       	std	Z+5, r24	; 0x05
     a7c:	08 95       	ret

00000a7e <led_allOff>:
     a7e:	8f ef       	ldi	r24, 0xFF	; 255
     a80:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	db df       	rcall	.-74     	; 0xa3e <led_updateState>
     a88:	bd c1       	rjmp	.+890    	; 0xe04 <activityEnable>
     a8a:	08 95       	ret

00000a8c <led_on>:
     a8c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     a90:	61 e0       	ldi	r22, 0x01	; 1
     a92:	d5 df       	rcall	.-86     	; 0xa3e <led_updateState>
     a94:	b7 c1       	rjmp	.+878    	; 0xe04 <activityEnable>
     a96:	08 95       	ret

00000a98 <led_toggle>:
}

void led_toggle(uint8_t mask) {   // toggle LED
    LED_PORT.OUTTGL = mask;
     a98:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     a9c:	e8 ee       	ldi	r30, 0xE8	; 232
     a9e:	f1 e2       	ldi	r31, 0x21	; 33

    for (int i = 0; i < 8; i++) {
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
        if (mask & (1 << i)) {
     aa4:	68 2f       	mov	r22, r24
     aa6:	70 e0       	ldi	r23, 0x00	; 0
            ledMap[i] = !ledMap[i];
     aa8:	81 e0       	ldi	r24, 0x01	; 1

void led_toggle(uint8_t mask) {   // toggle LED
    LED_PORT.OUTTGL = mask;

    for (int i = 0; i < 8; i++) {
        if (mask & (1 << i)) {
     aaa:	ab 01       	movw	r20, r22
     aac:	02 2e       	mov	r0, r18
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <led_toggle+0x1c>
     ab0:	55 95       	asr	r21
     ab2:	47 95       	ror	r20
     ab4:	0a 94       	dec	r0
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <led_toggle+0x18>
     ab8:	40 ff       	sbrs	r20, 0
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <led_toggle+0x2a>
            ledMap[i] = !ledMap[i];
     abc:	90 81       	ld	r25, Z
     abe:	98 27       	eor	r25, r24
     ac0:	90 83       	st	Z, r25
}

void led_toggle(uint8_t mask) {   // toggle LED
    LED_PORT.OUTTGL = mask;

    for (int i = 0; i < 8; i++) {
     ac2:	2f 5f       	subi	r18, 0xFF	; 255
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	31 96       	adiw	r30, 0x01	; 1
     ac8:	28 30       	cpi	r18, 0x08	; 8
     aca:	31 05       	cpc	r19, r1
     acc:	71 f7       	brne	.-36     	; 0xaaa <led_toggle+0x12>
        if (mask & (1 << i)) {
            ledMap[i] = !ledMap[i];
        }
    }
    activityEnable();
     ace:	9a c1       	rjmp	.+820    	; 0xe04 <activityEnable>
     ad0:	08 95       	ret

00000ad2 <led_setState>:
}

void led_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
     ad2:	e0 e0       	ldi	r30, 0x00	; 0
     ad4:	f6 e0       	ldi	r31, 0x06	; 6
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	95 83       	std	Z+5, r25	; 0x05
    LED_PORT.OUTCLR = mask;
     ada:	86 83       	std	Z+6, r24	; 0x06
     adc:	e8 ee       	ldi	r30, 0xE8	; 232
     ade:	f1 e2       	ldi	r31, 0x21	; 33

    for (int i = 0; i < 8; i++) {
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
        ledMap[i] = (mask & (1 << i)) != 0;
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	ac 01       	movw	r20, r24
     ae8:	02 2e       	mov	r0, r18
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <led_setState+0x1e>
     aec:	55 95       	asr	r21
     aee:	47 95       	ror	r20
     af0:	0a 94       	dec	r0
     af2:	e2 f7       	brpl	.-8      	; 0xaec <led_setState+0x1a>
     af4:	41 70       	andi	r20, 0x01	; 1
     af6:	41 93       	st	Z+, r20

void led_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
    LED_PORT.OUTCLR = mask;

    for (int i = 0; i < 8; i++) {
     af8:	2f 5f       	subi	r18, 0xFF	; 255
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
     afc:	28 30       	cpi	r18, 0x08	; 8
     afe:	31 05       	cpc	r19, r1
     b00:	91 f7       	brne	.-28     	; 0xae6 <led_setState+0x14>
        ledMap[i] = (mask & (1 << i)) != 0;
    }
    activityEnable();
     b02:	80 c1       	rjmp	.+768    	; 0xe04 <activityEnable>
     b04:	08 95       	ret

00000b06 <led_quiet_allOff>:

    led_updateState(LED_MASK, true);
}

void led_quiet_allOff(void) {         // turns all LED's off
    LED_PORT.OUTSET = LED_MASK;
     b06:	8f ef       	ldi	r24, 0xFF	; 255
     b08:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>

    led_updateState(LED_MASK, false);
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	97 cf       	rjmp	.-210    	; 0xa3e <led_updateState>
     b10:	08 95       	ret

00000b12 <led_getMap>:
            ledMap[i] = state;
        }
    }
}

uint16_t led_getMap(void) {
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	a8 ee       	ldi	r26, 0xE8	; 232
     b18:	b1 e2       	ldi	r27, 0x21	; 33
     b1a:	68 ef       	ldi	r22, 0xF8	; 248
     b1c:	71 e2       	ldi	r23, 0x21	; 33
     b1e:	fd 01       	movw	r30, r26
    uint16_t map = 0;
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
    for (uint8_t i = 0; i < 16; i++) {
        if (ledMap[i]) {
            map |= (1 << i);
     b24:	c1 e0       	ldi	r28, 0x01	; 1
     b26:	d0 e0       	ldi	r29, 0x00	; 0
     b28:	9f 01       	movw	r18, r30
     b2a:	2a 1b       	sub	r18, r26
     b2c:	3b 0b       	sbc	r19, r27
}

uint16_t led_getMap(void) {
    uint16_t map = 0;
    for (uint8_t i = 0; i < 16; i++) {
        if (ledMap[i]) {
     b2e:	91 91       	ld	r25, Z+
     b30:	99 23       	and	r25, r25
     b32:	41 f0       	breq	.+16     	; 0xb44 <led_getMap+0x32>
            map |= (1 << i);
     b34:	ce 01       	movw	r24, r28
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <led_getMap+0x2a>
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	2a 95       	dec	r18
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <led_getMap+0x26>
     b40:	48 2b       	or	r20, r24
     b42:	59 2b       	or	r21, r25
    }
}

uint16_t led_getMap(void) {
    uint16_t map = 0;
    for (uint8_t i = 0; i < 16; i++) {
     b44:	e6 17       	cp	r30, r22
     b46:	f7 07       	cpc	r31, r23
     b48:	79 f7       	brne	.-34     	; 0xb28 <led_getMap+0x16>
        if (ledMap[i]) {
            map |= (1 << i);
        }
    }
    return map;
}
     b4a:	ca 01       	movw	r24, r20
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <led_statusOn>:

/* ---------------------------------------------------------------------- */
/* ------------------------- status LED control ------------------------- */
/* ---------------------------------------------------------------------- */
void led_statusOn(void) { // status LED on
    STATUS_LED_PORT.OUTCLR = LEDS_PIN;
     b52:	80 e4       	ldi	r24, 0x40	; 64
     b54:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>

    ledMap[8] = true;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 f0 21 	sts	0x21F0, r24	; 0x8021f0 <ledMap+0x8>
     b5e:	08 95       	ret

00000b60 <led_statusOff>:
}

void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
     b60:	80 e4       	ldi	r24, 0x40	; 64
     b62:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>

    ledMap[8] = false;
     b66:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <ledMap+0x8>
     b6a:	08 95       	ret

00000b6c <led_statusToggle>:
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     b6c:	80 e4       	ldi	r24, 0x40	; 64
     b6e:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>

    ledMap[8] = !ledMap[8];
     b72:	e8 ee       	ldi	r30, 0xE8	; 232
     b74:	f1 e2       	ldi	r31, 0x21	; 33
     b76:	90 85       	ldd	r25, Z+8	; 0x08
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	89 27       	eor	r24, r25
     b7c:	80 87       	std	Z+8, r24	; 0x08
     b7e:	08 95       	ret

00000b80 <startupSequence>:

/* ---------------------------------------------------------------------- */
/* ------------------------- silent LED control ------------------------- */
/* ---------------------------------------------------------------------- */
static void led_quiet_allOn(void) {   // turns all LED's on
    LED_PORT.OUTCLR = LED_MASK;
     b80:	8f ef       	ldi	r24, 0xFF	; 255
     b82:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>

    led_updateState(LED_MASK, true);
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	5a df       	rcall	.-332    	; 0xa3e <led_updateState>
/* ---------------------------------------------------------------------- */
/* --------------------------- startup & idle --------------------------- */
/* ---------------------------------------------------------------------- */
bool startupSequence(void) {
    led_quiet_allOn();
    led_statusOn();
     b8a:	e3 df       	rcall	.-58     	; 0xb52 <led_statusOn>
     b8c:	2f eb       	ldi	r18, 0xBF	; 191
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b8e:	86 ec       	ldi	r24, 0xC6	; 198
     b90:	9d e2       	ldi	r25, 0x2D	; 45
     b92:	21 50       	subi	r18, 0x01	; 1
     b94:	80 40       	sbci	r24, 0x00	; 0
     b96:	90 40       	sbci	r25, 0x00	; 0
     b98:	e1 f7       	brne	.-8      	; 0xb92 <startupSequence+0x12>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <startupSequence+0x1c>
     b9c:	00 00       	nop
    _delay_ms(15000);
    led_quiet_allOff();
     b9e:	b3 df       	rcall	.-154    	; 0xb06 <led_quiet_allOff>
     ba0:	df df       	rcall	.-66     	; 0xb60 <led_statusOff>
    led_statusOff();
     ba2:	2f e1       	ldi	r18, 0x1F	; 31
     ba4:	81 ea       	ldi	r24, 0xA1	; 161
     ba6:	97 e0       	ldi	r25, 0x07	; 7
     ba8:	21 50       	subi	r18, 0x01	; 1
     baa:	80 40       	sbci	r24, 0x00	; 0
     bac:	90 40       	sbci	r25, 0x00	; 0
     bae:	e1 f7       	brne	.-8      	; 0xba8 <startupSequence+0x28>
     bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <startupSequence+0x32>
     bb2:	00 00       	nop
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	08 95       	ret

00000bb8 <idleStart>:
    _delay_ms(2500);

    return 0;
}
     bb8:	e0 ee       	ldi	r30, 0xE0	; 224
     bba:	f1 e2       	ldi	r31, 0x21	; 33

void idleStart(void) {
    idle.running   = true;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	80 83       	st	Z, r24
    idle.stage     = 0;
     bc0:	11 82       	std	Z+1, r1	; 0x01
    idle.pass      = 0;
     bc2:	12 82       	std	Z+2, r1	; 0x02
    idle.step      = 0;
     bc4:	13 82       	std	Z+3, r1	; 0x03
    idle.timer     = 0;
     bc6:	14 82       	std	Z+4, r1	; 0x04
     bc8:	15 82       	std	Z+5, r1	; 0x05
    idle.period    = 250;
     bca:	8a ef       	ldi	r24, 0xFA	; 250
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	86 83       	std	Z+6, r24	; 0x06
     bd0:	97 83       	std	Z+7, r25	; 0x07
     bd2:	08 95       	ret

00000bd4 <idleStop>:
}

void idleStop(void) {
    idle.running = false;
     bd4:	10 92 e0 21 	sts	0x21E0, r1	; 0x8021e0 <idle>
    led_quiet_allOff();
     bd8:	96 cf       	rjmp	.-212    	; 0xb06 <led_quiet_allOff>
     bda:	08 95       	ret

00000bdc <idlePoll>:
}

void idlePoll(void) {
    if (!idle.running)
     bdc:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <idle>
     be0:	88 23       	and	r24, r24
     be2:	09 f4       	brne	.+2      	; 0xbe6 <idlePoll+0xa>
     be4:	5c c0       	rjmp	.+184    	; 0xc9e <idlePoll+0xc2>
        return;
    if (activityCheck()) {
     be6:	12 d1       	rcall	.+548    	; 0xe0c <activityCheck>
     be8:	88 23       	and	r24, r24
     bea:	11 f0       	breq	.+4      	; 0xbf0 <idlePoll+0x14>
        idleStop();
     bec:	f3 cf       	rjmp	.-26     	; 0xbd4 <idleStop>
     bee:	08 95       	ret
        return;
     bf0:	e0 ee       	ldi	r30, 0xE0	; 224
    }

    if (++idle.timer < idle.period)
     bf2:	f1 e2       	ldi	r31, 0x21	; 33
     bf4:	84 81       	ldd	r24, Z+4	; 0x04
     bf6:	95 81       	ldd	r25, Z+5	; 0x05
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	84 83       	std	Z+4, r24	; 0x04
     bfc:	95 83       	std	Z+5, r25	; 0x05
     bfe:	26 81       	ldd	r18, Z+6	; 0x06
     c00:	37 81       	ldd	r19, Z+7	; 0x07
     c02:	82 17       	cp	r24, r18
     c04:	93 07       	cpc	r25, r19
     c06:	08 f4       	brcc	.+2      	; 0xc0a <idlePoll+0x2e>
     c08:	4a c0       	rjmp	.+148    	; 0xc9e <idlePoll+0xc2>
     c0a:	14 82       	std	Z+4, r1	; 0x04
        return;
    idle.timer = 0;
     c0c:	15 82       	std	Z+5, r1	; 0x05
     c0e:	83 81       	ldd	r24, Z+3	; 0x03

    if (idle.step >= 8) {
     c10:	88 30       	cpi	r24, 0x08	; 8
     c12:	08 f1       	brcs	.+66     	; 0xc56 <idlePoll+0x7a>
     c14:	13 82       	std	Z+3, r1	; 0x03
        idle.step = 0;
     c16:	81 81       	ldd	r24, Z+1	; 0x01

        if (idle.stage == 0) {
     c18:	81 11       	cpse	r24, r1
     c1a:	1d c0       	rjmp	.+58     	; 0xc56 <idlePoll+0x7a>
     c1c:	82 81       	ldd	r24, Z+2	; 0x02
            idle.pass++;
     c1e:	8f 5f       	subi	r24, 0xFF	; 255
     c20:	82 83       	std	Z+2, r24	; 0x02
     c22:	25 36       	cpi	r18, 0x65	; 101

            if (idle.period > 100) {
     c24:	31 05       	cpc	r19, r1
     c26:	38 f0       	brcs	.+14     	; 0xc36 <idlePoll+0x5a>
     c28:	2b 54       	subi	r18, 0x4B	; 75
                idle.period -= 75;
     c2a:	31 09       	sbc	r19, r1
     c2c:	20 93 e6 21 	sts	0x21E6, r18	; 0x8021e6 <idle+0x6>
     c30:	30 93 e7 21 	sts	0x21E7, r19	; 0x8021e7 <idle+0x7>
     c34:	06 c0       	rjmp	.+12     	; 0xc42 <idlePoll+0x66>
     c36:	22 e3       	ldi	r18, 0x32	; 50
            } else {
                idle.period = 50;
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	20 93 e6 21 	sts	0x21E6, r18	; 0x8021e6 <idle+0x6>
     c3e:	30 93 e7 21 	sts	0x21E7, r19	; 0x8021e7 <idle+0x7>
     c42:	84 30       	cpi	r24, 0x04	; 4
            }
            if (idle.pass >= 4) {
     c44:	40 f0       	brcs	.+16     	; 0xc56 <idlePoll+0x7a>
     c46:	e0 ee       	ldi	r30, 0xE0	; 224
                idle.stage = 1;
     c48:	f1 e2       	ldi	r31, 0x21	; 33
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	81 83       	std	Z+1, r24	; 0x01
     c4e:	82 e3       	ldi	r24, 0x32	; 50
                idle.period = 50;
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	86 83       	std	Z+6, r24	; 0x06
     c54:	97 83       	std	Z+7, r25	; 0x07
     c56:	60 91 e3 21 	lds	r22, 0x21E3	; 0x8021e3 <idle+0x3>
            }
        }
    }

    led_quiet_setState(1 << idle.step);
     c5a:	41 e0       	ldi	r20, 0x01	; 1
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	06 2e       	mov	r0, r22
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <idlePoll+0x8a>
     c62:	44 0f       	add	r20, r20
     c64:	55 1f       	adc	r21, r21
     c66:	0a 94       	dec	r0
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <idlePoll+0x86>
     c6a:	e0 e0       	ldi	r30, 0x00	; 0
//         }
//     }
// }

static void led_quiet_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
     c6c:	f6 e0       	ldi	r31, 0x06	; 6
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	85 83       	std	Z+5, r24	; 0x05
     c72:	46 83       	std	Z+6, r20	; 0x06
    LED_PORT.OUTCLR = mask;
     c74:	e8 ee       	ldi	r30, 0xE8	; 232
     c76:	f1 e2       	ldi	r31, 0x21	; 33
     c78:	80 e0       	ldi	r24, 0x00	; 0

    for (int i = 0; i < 8; i++) {
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	55 27       	eor	r21, r21
        ledMap[i] = (mask & (1 << i)) != 0;
     c7e:	9a 01       	movw	r18, r20
     c80:	08 2e       	mov	r0, r24
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <idlePoll+0xac>
     c84:	35 95       	asr	r19
     c86:	27 95       	ror	r18
     c88:	0a 94       	dec	r0
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <idlePoll+0xa8>
     c8c:	21 70       	andi	r18, 0x01	; 1
     c8e:	21 93       	st	Z+, r18
     c90:	01 96       	adiw	r24, 0x01	; 1

static void led_quiet_setState(uint8_t mask) { // sets LEDs to on
    LED_PORT.OUTSET = LED_MASK;
    LED_PORT.OUTCLR = mask;

    for (int i = 0; i < 8; i++) {
     c92:	88 30       	cpi	r24, 0x08	; 8
     c94:	91 05       	cpc	r25, r1
     c96:	99 f7       	brne	.-26     	; 0xc7e <idlePoll+0xa2>
     c98:	6f 5f       	subi	r22, 0xFF	; 255
            }
        }
    }

    led_quiet_setState(1 << idle.step);
    idle.step++;
     c9a:	60 93 e3 21 	sts	0x21E3, r22	; 0x8021e3 <idle+0x3>
     c9e:	08 95       	ret

00000ca0 <idleStatus>:
     ca0:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <idle>
}

bool idleStatus(void) {
    return idle.running;
     ca4:	08 95       	ret

00000ca6 <io_ui_process>:
void activityEnable(void) {
	userActive = 1;
}

void activityReset(void) {
	userActive = 0;
     ca6:	a3 cb       	rjmp	.-2234   	; 0x3ee <io_init>
     ca8:	08 95       	ret

00000caa <gui_ui_process>:
     caa:	bf 92       	push	r11
     cac:	cf 92       	push	r12
     cae:	df 92       	push	r13
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	27 97       	sbiw	r28, 0x07	; 7
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	25 df       	rcall	.-438    	; 0xb12 <led_getMap>
     cc8:	b8 2e       	mov	r11, r24
     cca:	19 2f       	mov	r17, r25
     ccc:	23 de       	rcall	.-954    	; 0x914 <kbd_getMap>
     cce:	c8 2e       	mov	r12, r24
     cd0:	d9 2e       	mov	r13, r25
     cd2:	cd dc       	rcall	.-1638   	; 0x66e <jstk_getMap>
     cd4:	e6 2e       	mov	r14, r22
     cd6:	f7 2e       	mov	r15, r23
     cd8:	08 2f       	mov	r16, r24
     cda:	b9 82       	std	Y+1, r11	; 0x01
     cdc:	e1 df       	rcall	.-62     	; 0xca0 <idleStatus>
     cde:	81 11       	cpse	r24, r1
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	18 2b       	or	r17, r24
     ce4:	1a 83       	std	Y+2, r17	; 0x02
     ce6:	cb 82       	std	Y+3, r12	; 0x03
     ce8:	dc 82       	std	Y+4, r13	; 0x04
     cea:	ed 82       	std	Y+5, r14	; 0x05
     cec:	fe 82       	std	Y+6, r15	; 0x06
     cee:	0f 83       	std	Y+7, r16	; 0x07
     cf0:	ce 01       	movw	r24, r28
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	45 db       	rcall	.-2422   	; 0x380 <udi_hid_led_send_report_in>
     cf6:	27 96       	adiw	r28, 0x07	; 7
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	bf 90       	pop	r11
     d0e:	08 95       	ret

00000d10 <kbd_ui_process>:
     d10:	15 dd       	rcall	.-1494   	; 0x73c <keypad_poll>
     d12:	1b ce       	rjmp	.-970    	; 0x94a <keypad_report>
     d14:	08 95       	ret

00000d16 <jstk_ui_process>:
     d16:	cf 93       	push	r28
     d18:	54 dc       	rcall	.-1880   	; 0x5c2 <jstk_readMask>
     d1a:	c8 2f       	mov	r28, r24
     d1c:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     d20:	84 fd       	sbrc	r24, 4
     d22:	09 c0       	rjmp	.+18     	; 0xd36 <jstk_ui_process+0x20>
     d24:	cc 23       	and	r28, r28
     d26:	79 f0       	breq	.+30     	; 0xd46 <jstk_ui_process+0x30>
     d28:	aa de       	rcall	.-684    	; 0xa7e <led_allOff>
     d2a:	8c 2f       	mov	r24, r28
     d2c:	af de       	rcall	.-674    	; 0xa8c <led_on>
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 f9 21 	sts	0x21F9, r24	; 0x8021f9 <jstk_exitTestMode>
     d34:	08 c0       	rjmp	.+16     	; 0xd46 <jstk_ui_process+0x30>
     d36:	68 dc       	rcall	.-1840   	; 0x608 <jstk_usbTask>
     d38:	80 91 f9 21 	lds	r24, 0x21F9	; 0x8021f9 <jstk_exitTestMode>
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	19 f4       	brne	.+6      	; 0xd46 <jstk_ui_process+0x30>
     d40:	e2 de       	rcall	.-572    	; 0xb06 <led_quiet_allOff>
     d42:	10 92 f9 21 	sts	0x21F9, r1	; 0x8021f9 <jstk_exitTestMode>
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <led_ui_report>:
     d4a:	fc 01       	movw	r30, r24
     d4c:	91 81       	ldd	r25, Z+1	; 0x01
     d4e:	92 34       	cpi	r25, 0x42	; 66
     d50:	21 f4       	brne	.+8      	; 0xd5a <led_ui_report+0x10>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <userActive>
     d58:	08 95       	ret
     d5a:	95 34       	cpi	r25, 0x45	; 69
     d5c:	21 f4       	brne	.+8      	; 0xd66 <led_ui_report+0x1c>
     d5e:	10 92 fa 21 	sts	0x21FA, r1	; 0x8021fa <userActive>
     d62:	2a cf       	rjmp	.-428    	; 0xbb8 <idleStart>
     d64:	08 95       	ret
     d66:	98 34       	cpi	r25, 0x48	; 72
     d68:	11 f4       	brne	.+4      	; 0xd6e <led_ui_report+0x24>
     d6a:	f3 ce       	rjmp	.-538    	; 0xb52 <led_statusOn>
     d6c:	08 95       	ret
     d6e:	91 35       	cpi	r25, 0x51	; 81
     d70:	11 f4       	brne	.+4      	; 0xd76 <led_ui_report+0x2c>
     d72:	f6 ce       	rjmp	.-532    	; 0xb60 <led_statusOff>
     d74:	08 95       	ret
     d76:	80 81       	ld	r24, Z
     d78:	ac ce       	rjmp	.-680    	; 0xad2 <led_setState>
     d7a:	08 95       	ret

00000d7c <status_ui_process>:
     d7c:	cf 93       	push	r28
     d7e:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     d82:	c1 e0       	ldi	r28, 0x01	; 1
     d84:	49 2f       	mov	r20, r25
     d86:	40 71       	andi	r20, 0x10	; 16
     d88:	94 fd       	sbrc	r25, 4
     d8a:	c0 e0       	ldi	r28, 0x00	; 0
     d8c:	20 91 fb 21 	lds	r18, 0x21FB	; 0x8021fb <sof_ms>
     d90:	30 91 fc 21 	lds	r19, 0x21FC	; 0x8021fc <sof_ms+0x1>
     d94:	2f 5f       	subi	r18, 0xFF	; 255
     d96:	3f 4f       	sbci	r19, 0xFF	; 255
     d98:	20 93 fb 21 	sts	0x21FB, r18	; 0x8021fb <sof_ms>
     d9c:	30 93 fc 21 	sts	0x21FC, r19	; 0x8021fc <sof_ms+0x1>
     da0:	41 11       	cpse	r20, r1
     da2:	1e c0       	rjmp	.+60     	; 0xde0 <status_ui_process+0x64>
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	69 f4       	brne	.+26     	; 0xdc2 <status_ui_process+0x46>
     da8:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <sof_ms>
     dac:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <sof_ms+0x1>
     db0:	84 3f       	cpi	r24, 0xF4	; 244
     db2:	91 40       	sbci	r25, 0x01	; 1
     db4:	e8 f0       	brcs	.+58     	; 0xdf0 <status_ui_process+0x74>
     db6:	da de       	rcall	.-588    	; 0xb6c <led_statusToggle>
     db8:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <sof_ms>
     dbc:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <sof_ms+0x1>
     dc0:	17 c0       	rjmp	.+46     	; 0xdf0 <status_ui_process+0x74>
     dc2:	81 11       	cpse	r24, r1
     dc4:	15 c0       	rjmp	.+42     	; 0xdf0 <status_ui_process+0x74>
     dc6:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <sof_ms>
     dca:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <sof_ms+0x1>
     dce:	84 3f       	cpi	r24, 0xF4	; 244
     dd0:	91 40       	sbci	r25, 0x01	; 1
     dd2:	70 f0       	brcs	.+28     	; 0xdf0 <status_ui_process+0x74>
     dd4:	cb de       	rcall	.-618    	; 0xb6c <led_statusToggle>
     dd6:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <sof_ms>
     dda:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <sof_ms+0x1>
     dde:	08 c0       	rjmp	.+16     	; 0xdf0 <status_ui_process+0x74>
     de0:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <prev.5372>
     de4:	81 11       	cpse	r24, r1
     de6:	bc de       	rcall	.-648    	; 0xb60 <led_statusOff>
     de8:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <sof_ms>
     dec:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <sof_ms+0x1>
     df0:	c0 93 f8 21 	sts	0x21F8, r28	; 0x8021f8 <prev.5372>
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <startup_ui_process>:
     df8:	c3 de       	rcall	.-634    	; 0xb80 <startupSequence>
     dfa:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <startupCheck>
     dfe:	08 95       	ret

00000e00 <idle_ui_process>:
     e00:	ed ce       	rjmp	.-550    	; 0xbdc <idlePoll>
     e02:	08 95       	ret

00000e04 <activityEnable>:
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <userActive>
     e0a:	08 95       	ret

00000e0c <activityCheck>:
}

bool activityCheck(void) {
	return userActive;
     e0c:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <userActive>
     e10:	08 95       	ret

00000e12 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	27 97       	sbiw	r28, 0x07	; 7
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     e2a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     e2e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     e32:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     e36:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     e3a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     e3e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     e42:	65 e0       	ldi	r22, 0x05	; 5
     e44:	81 e4       	ldi	r24, 0x41	; 65
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	81 d6       	rcall	.+3330   	; 0x1b4c <ccp_write_io>
     e4a:	6c e1       	ldi	r22, 0x1C	; 28
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	73 d6       	rcall	.+3302   	; 0x1b38 <nvm_read_byte>
     e52:	8a 83       	std	Y+2, r24	; 0x02
     e54:	6d e1       	ldi	r22, 0x1D	; 29
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	6e d6       	rcall	.+3292   	; 0x1b38 <nvm_read_byte>
     e5c:	89 83       	std	Y+1, r24	; 0x01
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	21 f4       	brne	.+8      	; 0xe6e <sysclk_init+0x5c>
     e66:	80 e4       	ldi	r24, 0x40	; 64
     e68:	93 e2       	ldi	r25, 0x23	; 35
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	8b 83       	std	Y+3, r24	; 0x03
     e74:	9c 83       	std	Y+4, r25	; 0x04
     e76:	e0 e6       	ldi	r30, 0x60	; 96
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	82 83       	std	Z+2, r24	; 0x02
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	83 83       	std	Z+3, r24	; 0x03
     e80:	8f b7       	in	r24, 0x3f	; 63
     e82:	8e 83       	std	Y+6, r24	; 0x06
     e84:	f8 94       	cli
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	e0 e5       	ldi	r30, 0x50	; 80
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	82 60       	ori	r24, 0x02	; 2
     e90:	80 83       	st	Z, r24
     e92:	9f bf       	out	0x3f, r25	; 63
     e94:	81 81       	ldd	r24, Z+1	; 0x01
     e96:	81 ff       	sbrs	r24, 1
     e98:	fd cf       	rjmp	.-6      	; 0xe94 <sysclk_init+0x82>
     e9a:	8f b7       	in	r24, 0x3f	; 63
     e9c:	8f 83       	std	Y+7, r24	; 0x07
     e9e:	f8 94       	cli
     ea0:	9f 81       	ldd	r25, Y+7	; 0x07
     ea2:	00 e5       	ldi	r16, 0x50	; 80
     ea4:	10 e0       	ldi	r17, 0x00	; 0
     ea6:	d8 01       	movw	r26, r16
     ea8:	16 96       	adiw	r26, 0x06	; 6
     eaa:	8c 91       	ld	r24, X
     eac:	16 97       	sbiw	r26, 0x06	; 6
     eae:	89 7f       	andi	r24, 0xF9	; 249
     eb0:	16 96       	adiw	r26, 0x06	; 6
     eb2:	8c 93       	st	X, r24
     eb4:	16 97       	sbiw	r26, 0x06	; 6
     eb6:	e0 e6       	ldi	r30, 0x60	; 96
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 e8       	ldi	r24, 0x80	; 128
     ebc:	85 83       	std	Z+5, r24	; 0x05
     ebe:	8b eb       	ldi	r24, 0xBB	; 187
     ec0:	86 83       	std	Z+6, r24	; 0x06
     ec2:	16 96       	adiw	r26, 0x06	; 6
     ec4:	8c 91       	ld	r24, X
     ec6:	16 97       	sbiw	r26, 0x06	; 6
     ec8:	84 60       	ori	r24, 0x04	; 4
     eca:	16 96       	adiw	r26, 0x06	; 6
     ecc:	8c 93       	st	X, r24
     ece:	80 81       	ld	r24, Z
     ed0:	81 60       	ori	r24, 0x01	; 1
     ed2:	80 83       	st	Z, r24
     ed4:	9f bf       	out	0x3f, r25	; 63
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	80 e4       	ldi	r24, 0x40	; 64
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	37 d6       	rcall	.+3182   	; 0x1b4c <ccp_write_io>
     ede:	8f b7       	in	r24, 0x3f	; 63
     ee0:	8d 83       	std	Y+5, r24	; 0x05
     ee2:	f8 94       	cli
     ee4:	9d 81       	ldd	r25, Y+5	; 0x05
     ee6:	f8 01       	movw	r30, r16
     ee8:	80 81       	ld	r24, Z
     eea:	8e 7f       	andi	r24, 0xFE	; 254
     eec:	80 83       	st	Z, r24
     eee:	9f bf       	out	0x3f, r25	; 63
     ef0:	27 96       	adiw	r28, 0x07	; 7
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	08 95       	ret

00000f00 <sysclk_enable_module>:
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	1f 92       	push	r1
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9f b7       	in	r25, 0x3f	; 63
     f0c:	99 83       	std	Y+1, r25	; 0x01
     f0e:	f8 94       	cli
     f10:	99 81       	ldd	r25, Y+1	; 0x01
     f12:	e8 2f       	mov	r30, r24
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	e0 59       	subi	r30, 0x90	; 144
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	60 95       	com	r22
     f1c:	80 81       	ld	r24, Z
     f1e:	68 23       	and	r22, r24
     f20:	60 83       	st	Z, r22
     f22:	9f bf       	out	0x3f, r25	; 63
     f24:	0f 90       	pop	r0
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	1f 92       	push	r1
     f32:	1f 92       	push	r1
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     f38:	86 30       	cpi	r24, 0x06	; 6
     f3a:	11 f0       	breq	.+4      	; 0xf40 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     f40:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f42:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     f46:	81 fd       	sbrc	r24, 1
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f4a:	8f b7       	in	r24, 0x3f	; 63
     f4c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f4e:	f8 94       	cli
	return flags;
     f50:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     f52:	e0 e5       	ldi	r30, 0x50	; 80
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	82 60       	ori	r24, 0x02	; 2
     f5a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f5c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f5e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     f60:	81 ff       	sbrs	r24, 1
     f62:	fd cf       	rjmp	.-6      	; 0xf5e <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f64:	8f b7       	in	r24, 0x3f	; 63
     f66:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     f68:	f8 94       	cli
	return flags;
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     f6c:	a0 e5       	ldi	r26, 0x50	; 80
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	16 96       	adiw	r26, 0x06	; 6
     f72:	8c 91       	ld	r24, X
     f74:	16 97       	sbiw	r26, 0x06	; 6
     f76:	89 7f       	andi	r24, 0xF9	; 249
     f78:	16 96       	adiw	r26, 0x06	; 6
     f7a:	8c 93       	st	X, r24
     f7c:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     f7e:	e0 e6       	ldi	r30, 0x60	; 96
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 e8       	ldi	r24, 0x80	; 128
     f84:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     f86:	8b eb       	ldi	r24, 0xBB	; 187
     f88:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     f8a:	16 96       	adiw	r26, 0x06	; 6
     f8c:	8c 91       	ld	r24, X
     f8e:	16 97       	sbiw	r26, 0x06	; 6
     f90:	84 60       	ori	r24, 0x04	; 4
     f92:	16 96       	adiw	r26, 0x06	; 6
     f94:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     f96:	80 81       	ld	r24, Z
     f98:	81 60       	ori	r24, 0x01	; 1
     f9a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f9c:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     f9e:	63 60       	ori	r22, 0x03	; 3
     fa0:	84 e4       	ldi	r24, 0x44	; 68
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	d3 d5       	rcall	.+2982   	; 0x1b4c <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     fa6:	60 e4       	ldi	r22, 0x40	; 64
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	aa df       	rcall	.-172    	; 0xf00 <sysclk_enable_module>
}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <udi_hid_joystick_getsetting>:


uint8_t udi_hid_joystick_getsetting(void)
{
	return 0;
}
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	08 95       	ret

00000fba <udi_hid_joystick_setreport>:


static bool udi_hid_joystick_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     fba:	30 91 f4 23 	lds	r19, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0x2>
     fbe:	20 91 f5 23 	lds	r18, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0x3>
     fc2:	82 2f       	mov	r24, r18
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	03 97       	sbiw	r24, 0x03	; 3
     fc8:	b1 f4       	brne	.+44     	; 0xff6 <udi_hid_joystick_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     fca:	31 11       	cpse	r19, r1
     fcc:	16 c0       	rjmp	.+44     	; 0xffa <udi_hid_joystick_setreport+0x40>
			&& (sizeof(udi_hid_joystick_report_feature) ==
     fce:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
     fd2:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
     fd6:	89 2b       	or	r24, r25
     fd8:	91 f4       	brne	.+36     	; 0xffe <udi_hid_joystick_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     fda:	e2 ef       	ldi	r30, 0xF2	; 242
     fdc:	f3 e2       	ldi	r31, 0x23	; 35
     fde:	8e ef       	ldi	r24, 0xFE	; 254
     fe0:	91 e2       	ldi	r25, 0x21	; 33
     fe2:	80 87       	std	Z+8, r24	; 0x08
     fe4:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_joystick_report_feature;
		udd_g_ctrlreq.callback = udi_hid_joystick_setfeature_valid;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	98 e0       	ldi	r25, 0x08	; 8
     fea:	84 87       	std	Z+12, r24	; 0x0c
     fec:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
     fee:	12 86       	std	Z+10, r1	; 0x0a
     ff0:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_joystick_report_feature);
		return true;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	08 95       	ret
	}
	return false;
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	08 95       	ret
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	08 95       	ret
     ffe:	80 e0       	ldi	r24, 0x00	; 0
}
    1000:	08 95       	ret

00001002 <udi_hid_joystick_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_joystick_setfeature_valid(void)
{
    1002:	08 95       	ret

00001004 <udi_hid_joystick_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_joystick_b_report_in_free = true;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <udi_hid_joystick_b_report_in_free>
    100a:	08 95       	ret

0000100c <udi_hid_joystick_enable>:
//------ Interface for UDI HID level

bool udi_hid_joystick_enable(void)
{
	// Initialize internal values
	udi_hid_joystick_rate = 0;
    100c:	10 92 04 22 	sts	0x2204, r1	; 0x802204 <udi_hid_joystick_rate>
	udi_hid_joystick_protocol = 0;
    1010:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <udi_hid_joystick_protocol>
	udi_hid_joystick_b_report_in_free = true;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <udi_hid_joystick_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_JOYSTICK_ENABLE_EXT();
    101a:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <main_joystick_enable>
}
    101e:	08 95       	ret

00001020 <udi_hid_joystick_disable>:


void udi_hid_joystick_disable(void)
{
	UDI_HID_JOYSTICK_DISABLE_EXT();
    1020:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <main_joystick_disable>
    1024:	08 95       	ret

00001026 <udi_hid_joystick_setup>:
}


bool udi_hid_joystick_setup(void)
{
	return udi_hid_setup(&udi_hid_joystick_rate,
    1026:	2d ed       	ldi	r18, 0xDD	; 221
    1028:	37 e0       	ldi	r19, 0x07	; 7
    102a:	4e ea       	ldi	r20, 0xAE	; 174
    102c:	50 e2       	ldi	r21, 0x20	; 32
    102e:	62 e0       	ldi	r22, 0x02	; 2
    1030:	72 e2       	ldi	r23, 0x22	; 34
    1032:	84 e0       	ldi	r24, 0x04	; 4
    1034:	92 e2       	ldi	r25, 0x22	; 34
    1036:	f2 c0       	rjmp	.+484    	; 0x121c <udi_hid_setup>
								&udi_hid_joystick_protocol,
								(uint8_t *) &udi_hid_joystick_report_desc,
								udi_hid_joystick_setreport);
}
    1038:	08 95       	ret

0000103a <udi_hid_joystick_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_joystick_send_report_in(uint8_t *data)
{
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	1f 92       	push	r1
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	9c 01       	movw	r18, r24
	if (!udi_hid_joystick_b_report_in_free)
    104c:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <udi_hid_joystick_b_report_in_free>
    1050:	88 23       	and	r24, r24
    1052:	09 f1       	breq	.+66     	; 0x1096 <udi_hid_joystick_send_report_in+0x5c>
    1054:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1056:	8f b7       	in	r24, 0x3f	; 63
    1058:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    105a:	f8 94       	cli
	return flags;
    105c:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_joystick_report_in, 0,
    105e:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udi_hid_joystick_report_feature>
    1062:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udi_hid_joystick_report_feature+0x1>
			sizeof(udi_hid_joystick_report_in));
	memcpy(&udi_hid_joystick_report_in, data,
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	80 93 fe 21 	sts	0x21FE, r24	; 0x8021fe <udi_hid_joystick_report_feature>
    106e:	90 93 ff 21 	sts	0x21FF, r25	; 0x8021ff <udi_hid_joystick_report_feature+0x1>
	      		sizeof(udi_hid_joystick_report_in));
	udi_hid_joystick_b_report_in_free =
			!udd_ep_run(UDI_HID_JOYSTICK_EP_IN,
    1072:	02 e0       	ldi	r16, 0x02	; 2
    1074:	18 e0       	ldi	r17, 0x08	; 8
    1076:	22 e0       	ldi	r18, 0x02	; 2
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	4e ef       	ldi	r20, 0xFE	; 254
    107c:	51 e2       	ldi	r21, 0x21	; 33
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	82 e8       	ldi	r24, 0x82	; 130
    1082:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <udd_ep_run>
	// Fill report
	memset(&udi_hid_joystick_report_in, 0,
			sizeof(udi_hid_joystick_report_in));
	memcpy(&udi_hid_joystick_report_in, data,
	      		sizeof(udi_hid_joystick_report_in));
	udi_hid_joystick_b_report_in_free =
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	89 27       	eor	r24, r25
    108a:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <udi_hid_joystick_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    108e:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_joystick_report_in,
							sizeof(udi_hid_joystick_report_in),
							udi_hid_joystick_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_joystick_b_report_in_free;
    1090:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <udi_hid_joystick_b_report_in_free>
    1094:	89 27       	eor	r24, r25

}
    1096:	0f 90       	pop	r0
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	08 95       	ret

000010a4 <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	08 95       	ret

000010a8 <udi_hid_kbd_setreport>:
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	08 95       	ret

000010ac <udi_hid_kbd_enable>:
    10ac:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <udi_hid_kbd_rate>
    10b0:	10 92 18 22 	sts	0x2218, r1	; 0x802218 <udi_hid_kbd_protocol>
    10b4:	10 92 0e 22 	sts	0x220E, r1	; 0x80220e <udi_hid_kbd_b_report_trans_ongoing>
    10b8:	88 e0       	ldi	r24, 0x08	; 8
    10ba:	ef e0       	ldi	r30, 0x0F	; 15
    10bc:	f2 e2       	ldi	r31, 0x22	; 34
    10be:	df 01       	movw	r26, r30
    10c0:	1d 92       	st	X+, r1
    10c2:	8a 95       	dec	r24
    10c4:	e9 f7       	brne	.-6      	; 0x10c0 <udi_hid_kbd_enable+0x14>
    10c6:	10 92 17 22 	sts	0x2217, r1	; 0x802217 <udi_hid_kbd_b_report_valid>
    10ca:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <main_kbd_enable>
    10ce:	08 95       	ret

000010d0 <udi_hid_kbd_disable>:
    10d0:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <main_kbd_disable>
    10d4:	08 95       	ret

000010d6 <udi_hid_kbd_setup>:
    10d6:	24 e5       	ldi	r18, 0x54	; 84
    10d8:	38 e0       	ldi	r19, 0x08	; 8
    10da:	40 ed       	ldi	r20, 0xD0	; 208
    10dc:	50 e2       	ldi	r21, 0x20	; 32
    10de:	68 e1       	ldi	r22, 0x18	; 24
    10e0:	72 e2       	ldi	r23, 0x22	; 34
    10e2:	8a e1       	ldi	r24, 0x1A	; 26
    10e4:	92 e2       	ldi	r25, 0x22	; 34
    10e6:	9a c0       	rjmp	.+308    	; 0x121c <udi_hid_setup>
    10e8:	08 95       	ret

000010ea <udi_hid_kbd_send_report>:
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <udi_hid_kbd_b_report_trans_ongoing>
    10f2:	81 11       	cpse	r24, r1
    10f4:	18 c0       	rjmp	.+48     	; 0x1126 <udi_hid_kbd_send_report+0x3c>
    10f6:	88 e0       	ldi	r24, 0x08	; 8
    10f8:	ef e0       	ldi	r30, 0x0F	; 15
    10fa:	f2 e2       	ldi	r31, 0x22	; 34
    10fc:	a6 e0       	ldi	r26, 0x06	; 6
    10fe:	b2 e2       	ldi	r27, 0x22	; 34
    1100:	01 90       	ld	r0, Z+
    1102:	0d 92       	st	X+, r0
    1104:	8a 95       	dec	r24
    1106:	e1 f7       	brne	.-8      	; 0x1100 <udi_hid_kbd_send_report+0x16>
    1108:	10 92 17 22 	sts	0x2217, r1	; 0x802217 <udi_hid_kbd_b_report_valid>
    110c:	07 e9       	ldi	r16, 0x97	; 151
    110e:	18 e0       	ldi	r17, 0x08	; 8
    1110:	28 e0       	ldi	r18, 0x08	; 8
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	46 e0       	ldi	r20, 0x06	; 6
    1116:	52 e2       	ldi	r21, 0x22	; 34
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	81 e8       	ldi	r24, 0x81	; 129
    111c:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <udd_ep_run>
    1120:	80 93 0e 22 	sts	0x220E, r24	; 0x80220e <udi_hid_kbd_b_report_trans_ongoing>
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <udi_hid_kbd_send_report+0x3e>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <udi_hid_kbd_report_sent>:
    112e:	10 92 0e 22 	sts	0x220E, r1	; 0x80220e <udi_hid_kbd_b_report_trans_ongoing>
    1132:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <udi_hid_kbd_b_report_valid>
    1136:	81 11       	cpse	r24, r1
    1138:	d8 cf       	rjmp	.-80     	; 0x10ea <udi_hid_kbd_send_report>
    113a:	08 95       	ret

0000113c <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	1f 92       	push	r1
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1148:	9f b7       	in	r25, 0x3f	; 63
    114a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    114c:	f8 94       	cli
	return flags;
    114e:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    1150:	90 91 11 22 	lds	r25, 0x2211	; 0x802211 <udi_hid_kbd_report+0x2>
    1154:	99 23       	and	r25, r25
    1156:	41 f0       	breq	.+16     	; 0x1168 <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    1158:	89 17       	cp	r24, r25
    115a:	a9 f0       	breq	.+42     	; 0x1186 <udi_hid_kbd_up+0x4a>
    115c:	e2 e1       	ldi	r30, 0x12	; 18
    115e:	f2 e2       	ldi	r31, 0x22	; 34
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1160:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    1162:	21 91       	ld	r18, Z+
    1164:	21 11       	cpse	r18, r1
    1166:	02 c0       	rjmp	.+4      	; 0x116c <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1168:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    116a:	1e c0       	rjmp	.+60     	; 0x11a8 <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    116c:	28 17       	cp	r18, r24
    116e:	21 f0       	breq	.+8      	; 0x1178 <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1170:	9f 5f       	subi	r25, 0xFF	; 255
    1172:	98 30       	cpi	r25, 0x08	; 8
    1174:	b1 f7       	brne	.-20     	; 0x1162 <udi_hid_kbd_up+0x26>
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    1178:	98 30       	cpi	r25, 0x08	; 8
    117a:	19 f0       	breq	.+6      	; 0x1182 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    117c:	97 30       	cpi	r25, 0x07	; 7
    117e:	20 f0       	brcs	.+8      	; 0x1188 <udi_hid_kbd_up+0x4c>
    1180:	0c c0       	rjmp	.+24     	; 0x119a <udi_hid_kbd_up+0x5e>
    1182:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    1184:	11 c0       	rjmp	.+34     	; 0x11a8 <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1186:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    1188:	e9 2f       	mov	r30, r25
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	e1 5f       	subi	r30, 0xF1	; 241
    118e:	fd 4d       	sbci	r31, 0xDD	; 221
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	80 83       	st	Z, r24
		i++;
    1194:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    1196:	97 30       	cpi	r25, 0x07	; 7
    1198:	b9 f7       	brne	.-18     	; 0x1188 <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    119a:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 17 22 	sts	0x2217, r24	; 0x802217 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    11a4:	a2 df       	rcall	.-188    	; 0x10ea <udi_hid_kbd_send_report>
    11a6:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0f 90       	pop	r0
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	08 95       	ret

000011b4 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	1f 92       	push	r1
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11c0:	9f b7       	in	r25, 0x3f	; 63
    11c2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    11c4:	f8 94       	cli
	return flags;
    11c6:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    11c8:	90 91 11 22 	lds	r25, 0x2211	; 0x802211 <udi_hid_kbd_report+0x2>
    11cc:	99 23       	and	r25, r25
    11ce:	b1 f0       	breq	.+44     	; 0x11fc <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    11d0:	89 17       	cp	r24, r25
    11d2:	41 f0       	breq	.+16     	; 0x11e4 <udi_hid_kbd_down+0x30>
    11d4:	a2 e1       	ldi	r26, 0x12	; 18
    11d6:	b2 e2       	ldi	r27, 0x22	; 34
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    11d8:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    11da:	9d 91       	ld	r25, X+
    11dc:	99 23       	and	r25, r25
    11de:	49 f0       	breq	.+18     	; 0x11f2 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    11e0:	98 13       	cpse	r25, r24
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11e4:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	14 c0       	rjmp	.+40     	; 0x1212 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    11ea:	ef 5f       	subi	r30, 0xFF	; 255
    11ec:	e8 30       	cpi	r30, 0x08	; 8
    11ee:	a9 f7       	brne	.-22     	; 0x11da <udi_hid_kbd_down+0x26>
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    11f2:	e8 30       	cpi	r30, 0x08	; 8
    11f4:	21 f4       	brne	.+8      	; 0x11fe <udi_hid_kbd_down+0x4a>
    11f6:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	0b c0       	rjmp	.+22     	; 0x1212 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    11fc:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	e1 5f       	subi	r30, 0xF1	; 241
    1202:	fd 4d       	sbci	r31, 0xDD	; 221
    1204:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	80 93 17 22 	sts	0x2217, r24	; 0x802217 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    120c:	6e df       	rcall	.-292    	; 0x10ea <udi_hid_kbd_send_report>
    120e:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    1210:	81 e0       	ldi	r24, 0x01	; 1
}
    1212:	0f 90       	pop	r0
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	08 95       	ret

0000121c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	dc 01       	movw	r26, r24
    1222:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    1224:	90 91 f2 23 	lds	r25, 0x23F2	; 0x8023f2 <udd_g_ctrlreq>
    1228:	99 23       	and	r25, r25
    122a:	0c f0       	brlt	.+2      	; 0x122e <udi_hid_setup+0x12>
    122c:	68 c0       	rjmp	.+208    	; 0x12fe <udi_hid_setup+0xe2>
    122e:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1230:	09 f0       	breq	.+2      	; 0x1234 <udi_hid_setup+0x18>
    1232:	45 c0       	rjmp	.+138    	; 0x12be <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1234:	80 91 f3 23 	lds	r24, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0x1>
    1238:	86 30       	cpi	r24, 0x06	; 6
    123a:	09 f0       	breq	.+2      	; 0x123e <udi_hid_setup+0x22>
    123c:	40 c0       	rjmp	.+128    	; 0x12be <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    123e:	76 d1       	rcall	.+748    	; 0x152c <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1240:	dc 01       	movw	r26, r24
    1242:	1a 96       	adiw	r26, 0x0a	; 10
    1244:	2c 91       	ld	r18, X
    1246:	1a 97       	sbiw	r26, 0x0a	; 10
    1248:	21 32       	cpi	r18, 0x21	; 33
    124a:	09 f0       	breq	.+2      	; 0x124e <udi_hid_setup+0x32>
    124c:	77 c0       	rjmp	.+238    	; 0x133c <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    124e:	20 91 f5 23 	lds	r18, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0x3>
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	21 32       	cpi	r18, 0x21	; 33
    1256:	31 05       	cpc	r19, r1
    1258:	b1 f4       	brne	.+44     	; 0x1286 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    125a:	9c 01       	movw	r18, r24
    125c:	27 5f       	subi	r18, 0xF7	; 247
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	20 93 fa 23 	sts	0x23FA, r18	; 0x8023fa <udd_g_ctrlreq+0x8>
    1264:	30 93 fb 23 	sts	0x23FB, r19	; 0x8023fb <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    1268:	e2 ef       	ldi	r30, 0xF2	; 242
    126a:	f3 e2       	ldi	r31, 0x23	; 35
    126c:	19 96       	adiw	r26, 0x09	; 9
    126e:	8c 91       	ld	r24, X
    1270:	26 81       	ldd	r18, Z+6	; 0x06
    1272:	37 81       	ldd	r19, Z+7	; 0x07
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	28 17       	cp	r18, r24
    1278:	39 07       	cpc	r19, r25
    127a:	08 f4       	brcc	.+2      	; 0x127e <udi_hid_setup+0x62>
    127c:	c9 01       	movw	r24, r18
    127e:	82 87       	std	Z+10, r24	; 0x0a
    1280:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	68 c0       	rjmp	.+208    	; 0x1356 <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1286:	fc 01       	movw	r30, r24
    1288:	47 85       	ldd	r20, Z+15	; 0x0f
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	42 17       	cp	r20, r18
    128e:	53 07       	cpc	r21, r19
    1290:	09 f0       	breq	.+2      	; 0x1294 <udi_hid_setup+0x78>
    1292:	56 c0       	rjmp	.+172    	; 0x1340 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    1294:	c0 93 fa 23 	sts	0x23FA, r28	; 0x8023fa <udd_g_ctrlreq+0x8>
    1298:	d0 93 fb 23 	sts	0x23FB, r29	; 0x8023fb <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    129c:	e2 ef       	ldi	r30, 0xF2	; 242
    129e:	f3 e2       	ldi	r31, 0x23	; 35
    12a0:	26 81       	ldd	r18, Z+6	; 0x06
    12a2:	37 81       	ldd	r19, Z+7	; 0x07
    12a4:	dc 01       	movw	r26, r24
    12a6:	50 96       	adiw	r26, 0x10	; 16
    12a8:	8d 91       	ld	r24, X+
    12aa:	9c 91       	ld	r25, X
    12ac:	51 97       	sbiw	r26, 0x11	; 17
    12ae:	28 17       	cp	r18, r24
    12b0:	39 07       	cpc	r19, r25
    12b2:	08 f4       	brcc	.+2      	; 0x12b6 <udi_hid_setup+0x9a>
    12b4:	c9 01       	movw	r24, r18
    12b6:	82 87       	std	Z+10, r24	; 0x0a
    12b8:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	4c c0       	rjmp	.+152    	; 0x1356 <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    12be:	90 32       	cpi	r25, 0x20	; 32
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <udi_hid_setup+0xa8>
    12c2:	40 c0       	rjmp	.+128    	; 0x1344 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    12c4:	80 91 f3 23 	lds	r24, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0x1>
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	39 f0       	breq	.+14     	; 0x12da <udi_hid_setup+0xbe>
    12cc:	83 30       	cpi	r24, 0x03	; 3
    12ce:	71 f0       	breq	.+28     	; 0x12ec <udi_hid_setup+0xd0>
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	d1 f5       	brne	.+116    	; 0x1348 <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    12d4:	f9 01       	movw	r30, r18
    12d6:	19 95       	eicall
    12d8:	3e c0       	rjmp	.+124    	; 0x1356 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    12da:	e2 ef       	ldi	r30, 0xF2	; 242
    12dc:	f3 e2       	ldi	r31, 0x23	; 35
    12de:	a0 87       	std	Z+8, r26	; 0x08
    12e0:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	82 87       	std	Z+10, r24	; 0x0a
    12e8:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    12ea:	35 c0       	rjmp	.+106    	; 0x1356 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    12ec:	e2 ef       	ldi	r30, 0xF2	; 242
    12ee:	f3 e2       	ldi	r31, 0x23	; 35
    12f0:	60 87       	std	Z+8, r22	; 0x08
    12f2:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	82 87       	std	Z+10, r24	; 0x0a
    12fa:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    12fc:	2c c0       	rjmp	.+88     	; 0x1356 <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    12fe:	90 76       	andi	r25, 0x60	; 96
    1300:	90 32       	cpi	r25, 0x20	; 32
    1302:	21 f5       	brne	.+72     	; 0x134c <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1304:	80 91 f3 23 	lds	r24, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0x1>
    1308:	8a 30       	cpi	r24, 0x0A	; 10
    130a:	39 f0       	breq	.+14     	; 0x131a <udi_hid_setup+0xfe>
    130c:	8b 30       	cpi	r24, 0x0B	; 11
    130e:	51 f0       	breq	.+20     	; 0x1324 <udi_hid_setup+0x108>
    1310:	89 30       	cpi	r24, 0x09	; 9
    1312:	f1 f4       	brne	.+60     	; 0x1350 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    1314:	f9 01       	movw	r30, r18
    1316:	19 95       	eicall
    1318:	1e c0       	rjmp	.+60     	; 0x1356 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    131a:	80 91 f5 23 	lds	r24, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0x3>
    131e:	8c 93       	st	X, r24
				return true;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	19 c0       	rjmp	.+50     	; 0x1356 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    1324:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
    1328:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
    132c:	89 2b       	or	r24, r25
    132e:	91 f4       	brne	.+36     	; 0x1354 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    1330:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0x2>
    1334:	db 01       	movw	r26, r22
    1336:	8c 93       	st	X, r24
				return true;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	0d c0       	rjmp	.+26     	; 0x1356 <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	0b c0       	rjmp	.+22     	; 0x1356 <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	09 c0       	rjmp	.+18     	; 0x1356 <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <udi_hid_setup+0x13a>
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	05 c0       	rjmp	.+10     	; 0x1356 <udi_hid_setup+0x13a>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	03 c0       	rjmp	.+6      	; 0x1356 <udi_hid_setup+0x13a>
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    1354:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	08 95       	ret

0000135c <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    135c:	e0 91 20 22 	lds	r30, 0x2220	; 0x802220 <udc_ptr_conf>
    1360:	f0 91 21 22 	lds	r31, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    1364:	01 90       	ld	r0, Z+
    1366:	f0 81       	ld	r31, Z
    1368:	e0 2d       	mov	r30, r0
    136a:	22 81       	ldd	r18, Z+2	; 0x02
    136c:	33 81       	ldd	r19, Z+3	; 0x03
    136e:	2e 0f       	add	r18, r30
    1370:	3f 1f       	adc	r19, r31
    1372:	fc 01       	movw	r30, r24
    1374:	40 81       	ld	r20, Z
    1376:	e4 0f       	add	r30, r20
    1378:	f1 1d       	adc	r31, r1
    137a:	e2 17       	cp	r30, r18
    137c:	f3 07       	cpc	r31, r19
    137e:	a0 f4       	brcc	.+40     	; 0x13a8 <udc_next_desc_in_iface+0x4c>
    1380:	81 81       	ldd	r24, Z+1	; 0x01
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	a1 f0       	breq	.+40     	; 0x13ae <udc_next_desc_in_iface+0x52>
    1386:	86 13       	cpse	r24, r22
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <udc_next_desc_in_iface+0x3a>
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <udc_next_desc_in_iface+0x58>
    138c:	81 81       	ldd	r24, Z+1	; 0x01
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	a1 f0       	breq	.+40     	; 0x13ba <udc_next_desc_in_iface+0x5e>
    1392:	86 17       	cp	r24, r22
    1394:	a9 f0       	breq	.+42     	; 0x13c0 <udc_next_desc_in_iface+0x64>
    1396:	80 81       	ld	r24, Z
    1398:	e8 0f       	add	r30, r24
    139a:	f1 1d       	adc	r31, r1
    139c:	e2 17       	cp	r30, r18
    139e:	f3 07       	cpc	r31, r19
    13a0:	a8 f3       	brcs	.-22     	; 0x138c <udc_next_desc_in_iface+0x30>
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	08 95       	ret
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	08 95       	ret
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	08 95       	ret
    13b4:	8e 2f       	mov	r24, r30
    13b6:	9f 2f       	mov	r25, r31
    13b8:	08 95       	ret
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	08 95       	ret
    13c0:	8e 2f       	mov	r24, r30
    13c2:	9f 2f       	mov	r25, r31
    13c4:	08 95       	ret

000013c6 <udc_valid_address>:
    13c6:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0x2>
    13ca:	8f 77       	andi	r24, 0x7F	; 127
    13cc:	9c c7       	rjmp	.+3896   	; 0x2306 <udd_set_address>
    13ce:	08 95       	ret

000013d0 <udc_update_iface_desc>:
    13d0:	90 91 22 22 	lds	r25, 0x2222	; 0x802222 <udc_num_configuration>
    13d4:	99 23       	and	r25, r25
    13d6:	81 f1       	breq	.+96     	; 0x1438 <udc_update_iface_desc+0x68>
    13d8:	e0 91 20 22 	lds	r30, 0x2220	; 0x802220 <udc_ptr_conf>
    13dc:	f0 91 21 22 	lds	r31, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    13e0:	01 90       	ld	r0, Z+
    13e2:	f0 81       	ld	r31, Z
    13e4:	e0 2d       	mov	r30, r0
    13e6:	94 81       	ldd	r25, Z+4	; 0x04
    13e8:	89 17       	cp	r24, r25
    13ea:	40 f5       	brcc	.+80     	; 0x143c <udc_update_iface_desc+0x6c>
    13ec:	e0 93 1e 22 	sts	0x221E, r30	; 0x80221e <udc_ptr_iface>
    13f0:	f0 93 1f 22 	sts	0x221F, r31	; 0x80221f <udc_ptr_iface+0x1>
    13f4:	22 81       	ldd	r18, Z+2	; 0x02
    13f6:	33 81       	ldd	r19, Z+3	; 0x03
    13f8:	2e 0f       	add	r18, r30
    13fa:	3f 1f       	adc	r19, r31
    13fc:	e2 17       	cp	r30, r18
    13fe:	f3 07       	cpc	r31, r19
    1400:	f8 f4       	brcc	.+62     	; 0x1440 <udc_update_iface_desc+0x70>
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	94 30       	cpi	r25, 0x04	; 4
    1406:	61 f4       	brne	.+24     	; 0x1420 <udc_update_iface_desc+0x50>
    1408:	92 81       	ldd	r25, Z+2	; 0x02
    140a:	89 13       	cpse	r24, r25
    140c:	09 c0       	rjmp	.+18     	; 0x1420 <udc_update_iface_desc+0x50>
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	96 13       	cpse	r25, r22
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <udc_update_iface_desc+0x50>
    1414:	e0 93 1e 22 	sts	0x221E, r30	; 0x80221e <udc_ptr_iface>
    1418:	f0 93 1f 22 	sts	0x221F, r31	; 0x80221f <udc_ptr_iface+0x1>
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	08 95       	ret
    1420:	90 81       	ld	r25, Z
    1422:	e9 0f       	add	r30, r25
    1424:	f1 1d       	adc	r31, r1
    1426:	e2 17       	cp	r30, r18
    1428:	f3 07       	cpc	r31, r19
    142a:	58 f3       	brcs	.-42     	; 0x1402 <udc_update_iface_desc+0x32>
    142c:	e0 93 1e 22 	sts	0x221E, r30	; 0x80221e <udc_ptr_iface>
    1430:	f0 93 1f 22 	sts	0x221F, r31	; 0x80221f <udc_ptr_iface+0x1>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	08 95       	ret
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	08 95       	ret
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	08 95       	ret
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	08 95       	ret

00001444 <udc_iface_disable>:
    1444:	ef 92       	push	r14
    1446:	ff 92       	push	r15
    1448:	1f 93       	push	r17
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	c8 2f       	mov	r28, r24
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	be df       	rcall	.-132    	; 0x13d0 <udc_update_iface_desc>
    1454:	18 2f       	mov	r17, r24
    1456:	88 23       	and	r24, r24
    1458:	81 f1       	breq	.+96     	; 0x14ba <udc_iface_disable+0x76>
    145a:	a0 91 20 22 	lds	r26, 0x2220	; 0x802220 <udc_ptr_conf>
    145e:	b0 91 21 22 	lds	r27, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    1462:	ec 2f       	mov	r30, r28
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	12 96       	adiw	r26, 0x02	; 2
    146c:	8d 91       	ld	r24, X+
    146e:	9c 91       	ld	r25, X
    1470:	13 97       	sbiw	r26, 0x03	; 3
    1472:	e8 0f       	add	r30, r24
    1474:	f9 1f       	adc	r31, r25
    1476:	e0 80       	ld	r14, Z
    1478:	f1 80       	ldd	r15, Z+1	; 0x01
    147a:	d7 01       	movw	r26, r14
    147c:	16 96       	adiw	r26, 0x06	; 6
    147e:	ed 91       	ld	r30, X+
    1480:	fc 91       	ld	r31, X
    1482:	17 97       	sbiw	r26, 0x07	; 7
    1484:	19 95       	eicall
    1486:	68 2f       	mov	r22, r24
    1488:	8c 2f       	mov	r24, r28
    148a:	a2 df       	rcall	.-188    	; 0x13d0 <udc_update_iface_desc>
    148c:	18 2f       	mov	r17, r24
    148e:	88 23       	and	r24, r24
    1490:	a1 f0       	breq	.+40     	; 0x14ba <udc_iface_disable+0x76>
    1492:	c0 91 1e 22 	lds	r28, 0x221E	; 0x80221e <udc_ptr_iface>
    1496:	d0 91 1f 22 	lds	r29, 0x221F	; 0x80221f <udc_ptr_iface+0x1>
    149a:	65 e0       	ldi	r22, 0x05	; 5
    149c:	ce 01       	movw	r24, r28
    149e:	5e df       	rcall	.-324    	; 0x135c <udc_next_desc_in_iface>
    14a0:	ec 01       	movw	r28, r24
    14a2:	89 2b       	or	r24, r25
    14a4:	21 f0       	breq	.+8      	; 0x14ae <udc_iface_disable+0x6a>
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	0e 94 83 13 	call	0x2706	; 0x2706 <udd_ep_free>
    14ac:	f6 cf       	rjmp	.-20     	; 0x149a <udc_iface_disable+0x56>
    14ae:	d7 01       	movw	r26, r14
    14b0:	12 96       	adiw	r26, 0x02	; 2
    14b2:	ed 91       	ld	r30, X+
    14b4:	fc 91       	ld	r31, X
    14b6:	13 97       	sbiw	r26, 0x03	; 3
    14b8:	19 95       	eicall
    14ba:	81 2f       	mov	r24, r17
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	08 95       	ret

000014c8 <udc_iface_enable>:
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	18 2f       	mov	r17, r24
    14d0:	7f df       	rcall	.-258    	; 0x13d0 <udc_update_iface_desc>
    14d2:	88 23       	and	r24, r24
    14d4:	39 f1       	breq	.+78     	; 0x1524 <udc_iface_enable+0x5c>
    14d6:	c0 91 1e 22 	lds	r28, 0x221E	; 0x80221e <udc_ptr_iface>
    14da:	d0 91 1f 22 	lds	r29, 0x221F	; 0x80221f <udc_ptr_iface+0x1>
    14de:	65 e0       	ldi	r22, 0x05	; 5
    14e0:	ce 01       	movw	r24, r28
    14e2:	3c df       	rcall	.-392    	; 0x135c <udc_next_desc_in_iface>
    14e4:	ec 01       	movw	r28, r24
    14e6:	89 2b       	or	r24, r25
    14e8:	41 f0       	breq	.+16     	; 0x14fa <udc_iface_enable+0x32>
    14ea:	4c 81       	ldd	r20, Y+4	; 0x04
    14ec:	5d 81       	ldd	r21, Y+5	; 0x05
    14ee:	6b 81       	ldd	r22, Y+3	; 0x03
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	16 d7       	rcall	.+3628   	; 0x2320 <udd_ep_alloc>
    14f4:	81 11       	cpse	r24, r1
    14f6:	f3 cf       	rjmp	.-26     	; 0x14de <udc_iface_enable+0x16>
    14f8:	15 c0       	rjmp	.+42     	; 0x1524 <udc_iface_enable+0x5c>
    14fa:	a0 91 20 22 	lds	r26, 0x2220	; 0x802220 <udc_ptr_conf>
    14fe:	b0 91 21 22 	lds	r27, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    1502:	e1 2f       	mov	r30, r17
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	12 96       	adiw	r26, 0x02	; 2
    150c:	8d 91       	ld	r24, X+
    150e:	9c 91       	ld	r25, X
    1510:	13 97       	sbiw	r26, 0x03	; 3
    1512:	e8 0f       	add	r30, r24
    1514:	f9 1f       	adc	r31, r25
    1516:	01 90       	ld	r0, Z+
    1518:	f0 81       	ld	r31, Z
    151a:	e0 2d       	mov	r30, r0
    151c:	01 90       	ld	r0, Z+
    151e:	f0 81       	ld	r31, Z
    1520:	e0 2d       	mov	r30, r0
    1522:	19 95       	eicall
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	08 95       	ret

0000152c <udc_get_interface_desc>:
    152c:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <udc_ptr_iface>
    1530:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <udc_ptr_iface+0x1>
    1534:	08 95       	ret

00001536 <udc_start>:
    1536:	5c c6       	rjmp	.+3256   	; 0x21f0 <udd_enable>
    1538:	08 95       	ret

0000153a <udc_reset>:
    153a:	cf 93       	push	r28
    153c:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <udc_num_configuration>
    1540:	88 23       	and	r24, r24
    1542:	c1 f0       	breq	.+48     	; 0x1574 <udc_reset+0x3a>
    1544:	e0 91 20 22 	lds	r30, 0x2220	; 0x802220 <udc_ptr_conf>
    1548:	f0 91 21 22 	lds	r31, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    154c:	01 90       	ld	r0, Z+
    154e:	f0 81       	ld	r31, Z
    1550:	e0 2d       	mov	r30, r0
    1552:	84 81       	ldd	r24, Z+4	; 0x04
    1554:	88 23       	and	r24, r24
    1556:	71 f0       	breq	.+28     	; 0x1574 <udc_reset+0x3a>
    1558:	c0 e0       	ldi	r28, 0x00	; 0
    155a:	8c 2f       	mov	r24, r28
    155c:	73 df       	rcall	.-282    	; 0x1444 <udc_iface_disable>
    155e:	cf 5f       	subi	r28, 0xFF	; 255
    1560:	e0 91 20 22 	lds	r30, 0x2220	; 0x802220 <udc_ptr_conf>
    1564:	f0 91 21 22 	lds	r31, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    1568:	01 90       	ld	r0, Z+
    156a:	f0 81       	ld	r31, Z
    156c:	e0 2d       	mov	r30, r0
    156e:	84 81       	ldd	r24, Z+4	; 0x04
    1570:	c8 17       	cp	r28, r24
    1572:	98 f3       	brcs	.-26     	; 0x155a <udc_reset+0x20>
    1574:	10 92 22 22 	sts	0x2222, r1	; 0x802222 <udc_num_configuration>
    1578:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <udc_device_status>
    157c:	81 fd       	sbrc	r24, 1
    157e:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <main_remotewakeup_disable>
    1582:	10 92 26 22 	sts	0x2226, r1	; 0x802226 <udc_device_status>
    1586:	10 92 27 22 	sts	0x2227, r1	; 0x802227 <udc_device_status+0x1>
    158a:	cf 91       	pop	r28
    158c:	08 95       	ret

0000158e <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    158e:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1590:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <udc_num_configuration>
    1594:	88 23       	and	r24, r24
    1596:	49 f1       	breq	.+82     	; 0x15ea <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1598:	a0 91 20 22 	lds	r26, 0x2220	; 0x802220 <udc_ptr_conf>
    159c:	b0 91 21 22 	lds	r27, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    15a0:	ed 91       	ld	r30, X+
    15a2:	fc 91       	ld	r31, X
    15a4:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    15a6:	84 81       	ldd	r24, Z+4	; 0x04
    15a8:	88 23       	and	r24, r24
    15aa:	f9 f0       	breq	.+62     	; 0x15ea <udc_sof_notify+0x5c>
    15ac:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    15ae:	ec 2f       	mov	r30, r28
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	ee 0f       	add	r30, r30
    15b4:	ff 1f       	adc	r31, r31
    15b6:	12 96       	adiw	r26, 0x02	; 2
    15b8:	8d 91       	ld	r24, X+
    15ba:	9c 91       	ld	r25, X
    15bc:	13 97       	sbiw	r26, 0x03	; 3
    15be:	e8 0f       	add	r30, r24
    15c0:	f9 1f       	adc	r31, r25
    15c2:	01 90       	ld	r0, Z+
    15c4:	f0 81       	ld	r31, Z
    15c6:	e0 2d       	mov	r30, r0
    15c8:	00 84       	ldd	r0, Z+8	; 0x08
    15ca:	f1 85       	ldd	r31, Z+9	; 0x09
    15cc:	e0 2d       	mov	r30, r0
    15ce:	30 97       	sbiw	r30, 0x00	; 0
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    15d2:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    15d4:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    15d6:	a0 91 20 22 	lds	r26, 0x2220	; 0x802220 <udc_ptr_conf>
    15da:	b0 91 21 22 	lds	r27, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    15de:	ed 91       	ld	r30, X+
    15e0:	fc 91       	ld	r31, X
    15e2:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    15e4:	84 81       	ldd	r24, Z+4	; 0x04
    15e6:	c8 17       	cp	r28, r24
    15e8:	10 f3       	brcs	.-60     	; 0x15ae <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    15f6:	e2 ef       	ldi	r30, 0xF2	; 242
    15f8:	f3 e2       	ldi	r31, 0x23	; 35
    15fa:	12 86       	std	Z+10, r1	; 0x0a
    15fc:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    15fe:	14 86       	std	Z+12, r1	; 0x0c
    1600:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1602:	16 86       	std	Z+14, r1	; 0x0e
    1604:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1606:	80 81       	ld	r24, Z
    1608:	88 23       	and	r24, r24
    160a:	0c f0       	brlt	.+2      	; 0x160e <udc_process_setup+0x20>
    160c:	7e c2       	rjmp	.+1276   	; 0x1b0a <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    160e:	20 91 f8 23 	lds	r18, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
    1612:	30 91 f9 23 	lds	r19, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
    1616:	21 15       	cp	r18, r1
    1618:	31 05       	cpc	r19, r1
    161a:	09 f0       	breq	.+2      	; 0x161e <udc_process_setup+0x30>
    161c:	7b c2       	rjmp	.+1270   	; 0x1b14 <udc_process_setup+0x526>
    161e:	6d c2       	rjmp	.+1242   	; 0x1afa <udc_process_setup+0x50c>
    1620:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1622:	09 f0       	breq	.+2      	; 0x1626 <udc_process_setup+0x38>
    1624:	a0 c0       	rjmp	.+320    	; 0x1766 <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1626:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0x1>
    162a:	96 30       	cpi	r25, 0x06	; 6
    162c:	79 f0       	breq	.+30     	; 0x164c <udc_process_setup+0x5e>
    162e:	98 30       	cpi	r25, 0x08	; 8
    1630:	09 f4       	brne	.+2      	; 0x1634 <udc_process_setup+0x46>
    1632:	8f c0       	rjmp	.+286    	; 0x1752 <udc_process_setup+0x164>
    1634:	91 11       	cpse	r25, r1
    1636:	97 c0       	rjmp	.+302    	; 0x1766 <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	09 f0       	breq	.+2      	; 0x1640 <udc_process_setup+0x52>
    163e:	19 c2       	rjmp	.+1074   	; 0x1a72 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1640:	62 e0       	ldi	r22, 0x02	; 2
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	86 e2       	ldi	r24, 0x26	; 38
    1646:	92 e2       	ldi	r25, 0x22	; 34
    1648:	64 d6       	rcall	.+3272   	; 0x2312 <udd_set_setup_payload>
    164a:	69 c2       	rjmp	.+1234   	; 0x1b1e <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    164c:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0x2>
    1650:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1654:	29 2f       	mov	r18, r25
    1656:	33 27       	eor	r19, r19
    1658:	22 30       	cpi	r18, 0x02	; 2
    165a:	31 05       	cpc	r19, r1
    165c:	a9 f0       	breq	.+42     	; 0x1688 <udc_process_setup+0x9a>
    165e:	20 f4       	brcc	.+8      	; 0x1668 <udc_process_setup+0x7a>
    1660:	21 30       	cpi	r18, 0x01	; 1
    1662:	31 05       	cpc	r19, r1
    1664:	41 f0       	breq	.+16     	; 0x1676 <udc_process_setup+0x88>
    1666:	c7 c1       	rjmp	.+910    	; 0x19f6 <udc_process_setup+0x408>
    1668:	23 30       	cpi	r18, 0x03	; 3
    166a:	31 05       	cpc	r19, r1
    166c:	d9 f1       	breq	.+118    	; 0x16e4 <udc_process_setup+0xf6>
    166e:	2f 30       	cpi	r18, 0x0F	; 15
    1670:	31 05       	cpc	r19, r1
    1672:	51 f1       	breq	.+84     	; 0x16c8 <udc_process_setup+0xda>
    1674:	c0 c1       	rjmp	.+896    	; 0x19f6 <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1676:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <udc_config>
    167a:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    167e:	dc 01       	movw	r26, r24
    1680:	6c 91       	ld	r22, X
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	46 d6       	rcall	.+3212   	; 0x2312 <udd_set_setup_payload>
    1686:	56 c0       	rjmp	.+172    	; 0x1734 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1688:	e0 91 2f 20 	lds	r30, 0x202F	; 0x80202f <udc_config>
    168c:	f0 91 30 20 	lds	r31, 0x2030	; 0x802030 <udc_config+0x1>
    1690:	21 89       	ldd	r18, Z+17	; 0x11
    1692:	82 17       	cp	r24, r18
    1694:	08 f0       	brcs	.+2      	; 0x1698 <udc_process_setup+0xaa>
    1696:	ed c1       	rjmp	.+986    	; 0x1a72 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1698:	99 27       	eor	r25, r25
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	e0 91 31 20 	lds	r30, 0x2031	; 0x802031 <udc_config+0x2>
    16a6:	f0 91 32 20 	lds	r31, 0x2032	; 0x802032 <udc_config+0x3>
    16aa:	e8 0f       	add	r30, r24
    16ac:	f9 1f       	adc	r31, r25
    16ae:	80 81       	ld	r24, Z
    16b0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    16b2:	fc 01       	movw	r30, r24
    16b4:	62 81       	ldd	r22, Z+2	; 0x02
    16b6:	73 81       	ldd	r23, Z+3	; 0x03
    16b8:	2c d6       	rcall	.+3160   	; 0x2312 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    16ba:	e0 91 fa 23 	lds	r30, 0x23FA	; 0x8023fa <udd_g_ctrlreq+0x8>
    16be:	f0 91 fb 23 	lds	r31, 0x23FB	; 0x8023fb <udd_g_ctrlreq+0x9>
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	81 83       	std	Z+1, r24	; 0x01
    16c6:	36 c0       	rjmp	.+108    	; 0x1734 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    16c8:	80 91 33 20 	lds	r24, 0x2033	; 0x802033 <udc_config+0x4>
    16cc:	90 91 34 20 	lds	r25, 0x2034	; 0x802034 <udc_config+0x5>
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <udc_process_setup+0xe8>
    16d4:	ce c1       	rjmp	.+924    	; 0x1a72 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    16d6:	dc 01       	movw	r26, r24
    16d8:	12 96       	adiw	r26, 0x02	; 2
    16da:	6d 91       	ld	r22, X+
    16dc:	7c 91       	ld	r23, X
    16de:	13 97       	sbiw	r26, 0x03	; 3
    16e0:	18 d6       	rcall	.+3120   	; 0x2312 <udd_set_setup_payload>
    16e2:	28 c0       	rjmp	.+80     	; 0x1734 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    16e4:	99 27       	eor	r25, r25
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	71 f0       	breq	.+28     	; 0x1708 <udc_process_setup+0x11a>
    16ec:	38 f0       	brcs	.+14     	; 0x16fc <udc_process_setup+0x10e>
    16ee:	02 97       	sbiw	r24, 0x02	; 2
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <udc_process_setup+0x106>
    16f2:	8a c1       	rjmp	.+788    	; 0x1a08 <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    16f4:	ee e4       	ldi	r30, 0x4E	; 78
    16f6:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    16f8:	3b e1       	ldi	r19, 0x1B	; 27
    16fa:	09 c0       	rjmp	.+18     	; 0x170e <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    16fc:	64 e0       	ldi	r22, 0x04	; 4
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	84 e7       	ldi	r24, 0x74	; 116
    1702:	91 e2       	ldi	r25, 0x21	; 33
    1704:	06 d6       	rcall	.+3084   	; 0x2312 <udd_set_setup_payload>
    1706:	16 c0       	rjmp	.+44     	; 0x1734 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1708:	ea e6       	ldi	r30, 0x6A	; 106
    170a:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    170c:	39 e0       	ldi	r19, 0x09	; 9
    170e:	a8 e1       	ldi	r26, 0x18	; 24
    1710:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1712:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1714:	81 91       	ld	r24, Z+
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	8d 93       	st	X+, r24
    171a:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    171c:	2f 5f       	subi	r18, 0xFF	; 255
    171e:	23 17       	cp	r18, r19
    1720:	c8 f3       	brcs	.-14     	; 0x1714 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1722:	63 2f       	mov	r22, r19
    1724:	66 0f       	add	r22, r22
    1726:	6e 5f       	subi	r22, 0xFE	; 254
    1728:	60 93 16 21 	sts	0x2116, r22	; 0x802116 <udc_string_desc>
		udd_set_setup_payload(
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	86 e1       	ldi	r24, 0x16	; 22
    1730:	91 e2       	ldi	r25, 0x21	; 33
    1732:	ef d5       	rcall	.+3038   	; 0x2312 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1734:	e2 ef       	ldi	r30, 0xF2	; 242
    1736:	f3 e2       	ldi	r31, 0x23	; 35
    1738:	86 81       	ldd	r24, Z+6	; 0x06
    173a:	97 81       	ldd	r25, Z+7	; 0x07
    173c:	22 85       	ldd	r18, Z+10	; 0x0a
    173e:	33 85       	ldd	r19, Z+11	; 0x0b
    1740:	82 17       	cp	r24, r18
    1742:	93 07       	cpc	r25, r19
    1744:	08 f0       	brcs	.+2      	; 0x1748 <udc_process_setup+0x15a>
    1746:	eb c1       	rjmp	.+982    	; 0x1b1e <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1748:	80 93 fc 23 	sts	0x23FC, r24	; 0x8023fc <udd_g_ctrlreq+0xa>
    174c:	90 93 fd 23 	sts	0x23FD, r25	; 0x8023fd <udd_g_ctrlreq+0xb>
    1750:	e6 c1       	rjmp	.+972    	; 0x1b1e <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1752:	21 30       	cpi	r18, 0x01	; 1
    1754:	31 05       	cpc	r19, r1
    1756:	09 f0       	breq	.+2      	; 0x175a <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1758:	8c c1       	rjmp	.+792    	; 0x1a72 <udc_process_setup+0x484>
    175a:	61 e0       	ldi	r22, 0x01	; 1
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	82 e2       	ldi	r24, 0x22	; 34
    1760:	92 e2       	ldi	r25, 0x22	; 34
    1762:	d7 d5       	rcall	.+2990   	; 0x2312 <udd_set_setup_payload>
    1764:	dc c1       	rjmp	.+952    	; 0x1b1e <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	e1 f5       	brne	.+120    	; 0x17e2 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    176a:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0x1>
    176e:	9a 30       	cpi	r25, 0x0A	; 10
    1770:	c1 f5       	brne	.+112    	; 0x17e2 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1772:	21 30       	cpi	r18, 0x01	; 1
    1774:	31 05       	cpc	r19, r1
    1776:	09 f0       	breq	.+2      	; 0x177a <udc_process_setup+0x18c>
    1778:	4c c1       	rjmp	.+664    	; 0x1a12 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    177a:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <udc_num_configuration>
    177e:	88 23       	and	r24, r24
    1780:	09 f4       	brne	.+2      	; 0x1784 <udc_process_setup+0x196>
    1782:	47 c1       	rjmp	.+654    	; 0x1a12 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1784:	c0 91 f6 23 	lds	r28, 0x23F6	; 0x8023f6 <udd_g_ctrlreq+0x4>
    1788:	d0 91 f7 23 	lds	r29, 0x23F7	; 0x8023f7 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    178c:	00 91 20 22 	lds	r16, 0x2220	; 0x802220 <udc_ptr_conf>
    1790:	10 91 21 22 	lds	r17, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    1794:	d8 01       	movw	r26, r16
    1796:	ed 91       	ld	r30, X+
    1798:	fc 91       	ld	r31, X
    179a:	84 81       	ldd	r24, Z+4	; 0x04
    179c:	c8 17       	cp	r28, r24
    179e:	08 f0       	brcs	.+2      	; 0x17a2 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    17a0:	38 c1       	rjmp	.+624    	; 0x1a12 <udc_process_setup+0x424>
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	8c 2f       	mov	r24, r28
    17a6:	14 de       	rcall	.-984    	; 0x13d0 <udc_update_iface_desc>
    17a8:	88 23       	and	r24, r24
    17aa:	09 f4       	brne	.+2      	; 0x17ae <udc_process_setup+0x1c0>
    17ac:	2d c1       	rjmp	.+602    	; 0x1a08 <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    17ae:	ce 01       	movw	r24, r28
    17b0:	99 27       	eor	r25, r25
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	d8 01       	movw	r26, r16
    17b8:	12 96       	adiw	r26, 0x02	; 2
    17ba:	ed 91       	ld	r30, X+
    17bc:	fc 91       	ld	r31, X
    17be:	13 97       	sbiw	r26, 0x03	; 3
    17c0:	e8 0f       	add	r30, r24
    17c2:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    17c4:	01 90       	ld	r0, Z+
    17c6:	f0 81       	ld	r31, Z
    17c8:	e0 2d       	mov	r30, r0
    17ca:	86 81       	ldd	r24, Z+6	; 0x06
    17cc:	97 81       	ldd	r25, Z+7	; 0x07
    17ce:	fc 01       	movw	r30, r24
    17d0:	19 95       	eicall
    17d2:	80 93 24 22 	sts	0x2224, r24	; 0x802224 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    17d6:	61 e0       	ldi	r22, 0x01	; 1
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	84 e2       	ldi	r24, 0x24	; 36
    17dc:	92 e2       	ldi	r25, 0x22	; 34
    17de:	99 d5       	rcall	.+2866   	; 0x2312 <udd_set_setup_payload>
    17e0:	9e c1       	rjmp	.+828    	; 0x1b1e <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <udc_process_setup+0x1fa>
    17e6:	10 c1       	rjmp	.+544    	; 0x1a08 <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    17e8:	80 91 f3 23 	lds	r24, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0x1>
    17ec:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    17ee:	05 c1       	rjmp	.+522    	; 0x19fa <udc_process_setup+0x40c>
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    17f6:	3d c1       	rjmp	.+634    	; 0x1a72 <udc_process_setup+0x484>
    17f8:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <udd_g_ctrlreq+0x4>
    17fc:	19 d6       	rcall	.+3122   	; 0x2430 <udd_ep_is_halted>
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	80 93 1c 22 	sts	0x221C, r24	; 0x80221c <udc_ep_status.4587>
    1804:	90 93 1d 22 	sts	0x221D, r25	; 0x80221d <udc_ep_status.4587+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1808:	62 e0       	ldi	r22, 0x02	; 2
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	8c e1       	ldi	r24, 0x1C	; 28
    180e:	92 e2       	ldi	r25, 0x22	; 34
    1810:	80 d5       	rcall	.+2816   	; 0x2312 <udd_set_setup_payload>
    1812:	85 c1       	rjmp	.+778    	; 0x1b1e <udc_process_setup+0x530>
    1814:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1816:	09 f0       	breq	.+2      	; 0x181a <udc_process_setup+0x22c>
    1818:	9f c0       	rjmp	.+318    	; 0x1958 <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    181a:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0x1>
    181e:	93 30       	cpi	r25, 0x03	; 3
    1820:	91 f1       	breq	.+100    	; 0x1886 <udc_process_setup+0x298>
    1822:	18 f4       	brcc	.+6      	; 0x182a <udc_process_setup+0x23c>
    1824:	91 30       	cpi	r25, 0x01	; 1
    1826:	a9 f0       	breq	.+42     	; 0x1852 <udc_process_setup+0x264>
    1828:	97 c0       	rjmp	.+302    	; 0x1958 <udc_process_setup+0x36a>
    182a:	95 30       	cpi	r25, 0x05	; 5
    182c:	21 f0       	breq	.+8      	; 0x1836 <udc_process_setup+0x248>
    182e:	99 30       	cpi	r25, 0x09	; 9
    1830:	09 f4       	brne	.+2      	; 0x1834 <udc_process_setup+0x246>
    1832:	43 c0       	rjmp	.+134    	; 0x18ba <udc_process_setup+0x2cc>
    1834:	91 c0       	rjmp	.+290    	; 0x1958 <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1836:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
    183a:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
    183e:	89 2b       	or	r24, r25
    1840:	09 f0       	breq	.+2      	; 0x1844 <udc_process_setup+0x256>
    1842:	17 c1       	rjmp	.+558    	; 0x1a72 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1844:	83 ee       	ldi	r24, 0xE3	; 227
    1846:	99 e0       	ldi	r25, 0x09	; 9
    1848:	80 93 fe 23 	sts	0x23FE, r24	; 0x8023fe <udd_g_ctrlreq+0xc>
    184c:	90 93 ff 23 	sts	0x23FF, r25	; 0x8023ff <udd_g_ctrlreq+0xd>
    1850:	66 c1       	rjmp	.+716    	; 0x1b1e <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1852:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
    1856:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
    185a:	89 2b       	or	r24, r25
    185c:	09 f0       	breq	.+2      	; 0x1860 <udc_process_setup+0x272>
    185e:	09 c1       	rjmp	.+530    	; 0x1a72 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1860:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0x2>
    1864:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0x3>
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	09 f0       	breq	.+2      	; 0x186e <udc_process_setup+0x280>
    186c:	02 c1       	rjmp	.+516    	; 0x1a72 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    186e:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <udc_device_status>
    1872:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <udc_device_status+0x1>
    1876:	8d 7f       	andi	r24, 0xFD	; 253
    1878:	80 93 26 22 	sts	0x2226, r24	; 0x802226 <udc_device_status>
    187c:	90 93 27 22 	sts	0x2227, r25	; 0x802227 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1880:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <main_remotewakeup_disable>
    1884:	4c c1       	rjmp	.+664    	; 0x1b1e <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1886:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
    188a:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
    188e:	89 2b       	or	r24, r25
    1890:	09 f0       	breq	.+2      	; 0x1894 <udc_process_setup+0x2a6>
    1892:	ef c0       	rjmp	.+478    	; 0x1a72 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1894:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0x2>
    1898:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0x3>
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	09 f0       	breq	.+2      	; 0x18a2 <udc_process_setup+0x2b4>
    18a0:	ae c0       	rjmp	.+348    	; 0x19fe <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    18a2:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <udc_device_status>
    18a6:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <udc_device_status+0x1>
    18aa:	82 60       	ori	r24, 0x02	; 2
    18ac:	80 93 26 22 	sts	0x2226, r24	; 0x802226 <udc_device_status>
    18b0:	90 93 27 22 	sts	0x2227, r25	; 0x802227 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    18b4:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    18b8:	32 c1       	rjmp	.+612    	; 0x1b1e <udc_process_setup+0x530>
    18ba:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
    18be:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
    18c2:	89 2b       	or	r24, r25
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    18c6:	d5 c0       	rjmp	.+426    	; 0x1a72 <udc_process_setup+0x484>
    18c8:	21 d5       	rcall	.+2626   	; 0x230c <udd_getaddress>
    18ca:	88 23       	and	r24, r24
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <udc_process_setup+0x2e2>
    18ce:	9c c0       	rjmp	.+312    	; 0x1a08 <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    18d0:	20 91 f4 23 	lds	r18, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0x2>
    18d4:	30 91 f5 23 	lds	r19, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    18d8:	33 27       	eor	r19, r19
    18da:	e0 91 2f 20 	lds	r30, 0x202F	; 0x80202f <udc_config>
    18de:	f0 91 30 20 	lds	r31, 0x2030	; 0x802030 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    18e2:	81 89       	ldd	r24, Z+17	; 0x11
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	82 17       	cp	r24, r18
    18e8:	93 07       	cpc	r25, r19
    18ea:	08 f4       	brcc	.+2      	; 0x18ee <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    18ec:	8d c0       	rjmp	.+282    	; 0x1a08 <udc_process_setup+0x41a>
    18ee:	25 de       	rcall	.-950    	; 0x153a <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    18f0:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0x2>
    18f4:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0x3>
    18f8:	80 93 22 22 	sts	0x2222, r24	; 0x802222 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    18fc:	88 23       	and	r24, r24
    18fe:	09 f4       	brne	.+2      	; 0x1902 <udc_process_setup+0x314>
    1900:	0e c1       	rjmp	.+540    	; 0x1b1e <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1902:	99 27       	eor	r25, r25
    1904:	81 50       	subi	r24, 0x01	; 1
    1906:	90 4c       	sbci	r25, 0xC0	; 192
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	e0 91 31 20 	lds	r30, 0x2031	; 0x802031 <udc_config+0x2>
    1914:	f0 91 32 20 	lds	r31, 0x2032	; 0x802032 <udc_config+0x3>
    1918:	e8 0f       	add	r30, r24
    191a:	f9 1f       	adc	r31, r25
    191c:	e0 93 20 22 	sts	0x2220, r30	; 0x802220 <udc_ptr_conf>
    1920:	f0 93 21 22 	sts	0x2221, r31	; 0x802221 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1924:	01 90       	ld	r0, Z+
    1926:	f0 81       	ld	r31, Z
    1928:	e0 2d       	mov	r30, r0
    192a:	84 81       	ldd	r24, Z+4	; 0x04
    192c:	88 23       	and	r24, r24
    192e:	09 f4       	brne	.+2      	; 0x1932 <udc_process_setup+0x344>
    1930:	f6 c0       	rjmp	.+492    	; 0x1b1e <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1932:	c0 e0       	ldi	r28, 0x00	; 0
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	8c 2f       	mov	r24, r28
    1938:	c7 dd       	rcall	.-1138   	; 0x14c8 <udc_iface_enable>
    193a:	88 23       	and	r24, r24
    193c:	09 f4       	brne	.+2      	; 0x1940 <udc_process_setup+0x352>
    193e:	64 c0       	rjmp	.+200    	; 0x1a08 <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1940:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1942:	e0 91 20 22 	lds	r30, 0x2220	; 0x802220 <udc_ptr_conf>
    1946:	f0 91 21 22 	lds	r31, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    194a:	01 90       	ld	r0, Z+
    194c:	f0 81       	ld	r31, Z
    194e:	e0 2d       	mov	r30, r0
    1950:	84 81       	ldd	r24, Z+4	; 0x04
    1952:	c8 17       	cp	r28, r24
    1954:	78 f3       	brcs	.-34     	; 0x1934 <udc_process_setup+0x346>
    1956:	e3 c0       	rjmp	.+454    	; 0x1b1e <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	e9 f4       	brne	.+58     	; 0x1996 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    195c:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0x1>
    1960:	9b 30       	cpi	r25, 0x0B	; 11
    1962:	c9 f4       	brne	.+50     	; 0x1996 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1964:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
    1968:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
    196c:	89 2b       	or	r24, r25
    196e:	09 f0       	breq	.+2      	; 0x1972 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1970:	50 c0       	rjmp	.+160    	; 0x1a12 <udc_process_setup+0x424>
    1972:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <udc_num_configuration>
    1976:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1978:	09 f4       	brne	.+2      	; 0x197c <udc_process_setup+0x38e>
    197a:	4b c0       	rjmp	.+150    	; 0x1a12 <udc_process_setup+0x424>
    197c:	e2 ef       	ldi	r30, 0xF2	; 242
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    197e:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1980:	c4 81       	ldd	r28, Z+4	; 0x04
    1982:	d2 81       	ldd	r29, Z+2	; 0x02
    1984:	8c 2f       	mov	r24, r28
    1986:	5e dd       	rcall	.-1348   	; 0x1444 <udc_iface_disable>
    1988:	88 23       	and	r24, r24
    198a:	09 f4       	brne	.+2      	; 0x198e <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    198c:	3d c0       	rjmp	.+122    	; 0x1a08 <udc_process_setup+0x41a>
    198e:	6d 2f       	mov	r22, r29
    1990:	8c 2f       	mov	r24, r28
    1992:	9a dd       	rcall	.-1228   	; 0x14c8 <udc_iface_enable>
    1994:	37 c0       	rjmp	.+110    	; 0x1a04 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1996:	82 30       	cpi	r24, 0x02	; 2
    1998:	b9 f5       	brne	.+110    	; 0x1a08 <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    199a:	80 91 f3 23 	lds	r24, 0x23F3	; 0x8023f3 <udd_g_ctrlreq+0x1>
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	19 f0       	breq	.+6      	; 0x19a8 <udc_process_setup+0x3ba>
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	99 f0       	breq	.+38     	; 0x19cc <udc_process_setup+0x3de>
    19a6:	2d c0       	rjmp	.+90     	; 0x1a02 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19a8:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
    19ac:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
    19b0:	89 2b       	or	r24, r25
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    19b4:	5e c0       	rjmp	.+188    	; 0x1a72 <udc_process_setup+0x484>
    19b6:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0x2>
    19ba:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0x3>
    19be:	89 2b       	or	r24, r25
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    19c2:	57 c0       	rjmp	.+174    	; 0x1a72 <udc_process_setup+0x484>
    19c4:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <udd_g_ctrlreq+0x4>
    19c8:	4e d5       	rcall	.+2716   	; 0x2466 <udd_ep_clear_halt>
    19ca:	1c c0       	rjmp	.+56     	; 0x1a04 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19cc:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
    19d0:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
    19d4:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    19d6:	09 f0       	breq	.+2      	; 0x19da <udc_process_setup+0x3ec>
    19d8:	4c c0       	rjmp	.+152    	; 0x1a72 <udc_process_setup+0x484>
    19da:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udd_g_ctrlreq+0x2>
    19de:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udd_g_ctrlreq+0x3>
    19e2:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <udc_process_setup+0x3fa>
    19e6:	45 c0       	rjmp	.+138    	; 0x1a72 <udc_process_setup+0x484>
    19e8:	c2 ef       	ldi	r28, 0xF2	; 242
    19ea:	d3 e2       	ldi	r29, 0x23	; 35
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    19ee:	3c d6       	rcall	.+3192   	; 0x2668 <udd_ep_abort>
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	a5 d6       	rcall	.+3402   	; 0x273e <udd_ep_set_halt>
    19f4:	07 c0       	rjmp	.+14     	; 0x1a04 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	05 c0       	rjmp	.+10     	; 0x1a04 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	03 c0       	rjmp	.+6      	; 0x1a04 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	01 c0       	rjmp	.+2      	; 0x1a04 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1a02:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1a04:	81 11       	cpse	r24, r1
    1a06:	8c c0       	rjmp	.+280    	; 0x1b20 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1a08:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <udd_g_ctrlreq>
    1a0c:	8f 71       	andi	r24, 0x1F	; 31
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	81 f5       	brne	.+96     	; 0x1a72 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1a12:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <udc_num_configuration>
    1a16:	88 23       	and	r24, r24
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a1a:	71 c0       	rjmp	.+226    	; 0x1afe <udc_process_setup+0x510>
    1a1c:	00 91 f6 23 	lds	r16, 0x23F6	; 0x8023f6 <udd_g_ctrlreq+0x4>
    1a20:	10 91 f7 23 	lds	r17, 0x23F7	; 0x8023f7 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1a24:	c0 91 20 22 	lds	r28, 0x2220	; 0x802220 <udc_ptr_conf>
    1a28:	d0 91 21 22 	lds	r29, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    1a2c:	e8 81       	ld	r30, Y
    1a2e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a30:	84 81       	ldd	r24, Z+4	; 0x04
    1a32:	08 17       	cp	r16, r24
    1a34:	08 f0       	brcs	.+2      	; 0x1a38 <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1a36:	65 c0       	rjmp	.+202    	; 0x1b02 <udc_process_setup+0x514>
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	80 2f       	mov	r24, r16
    1a3c:	c9 dc       	rcall	.-1646   	; 0x13d0 <udc_update_iface_desc>
    1a3e:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a40:	c1 f0       	breq	.+48     	; 0x1a72 <udc_process_setup+0x484>
    1a42:	f8 01       	movw	r30, r16
    1a44:	ff 27       	eor	r31, r31
    1a46:	cf 01       	movw	r24, r30
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a50:	e8 0f       	add	r30, r24
    1a52:	f9 1f       	adc	r31, r25
    1a54:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1a56:	d1 81       	ldd	r29, Z+1	; 0x01
    1a58:	ee 81       	ldd	r30, Y+6	; 0x06
    1a5a:	ff 81       	ldd	r31, Y+7	; 0x07
    1a5c:	19 95       	eicall
    1a5e:	68 2f       	mov	r22, r24
    1a60:	80 2f       	mov	r24, r16
    1a62:	b6 dc       	rcall	.-1684   	; 0x13d0 <udc_update_iface_desc>
    1a64:	88 23       	and	r24, r24
    1a66:	29 f0       	breq	.+10     	; 0x1a72 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1a68:	ec 81       	ldd	r30, Y+4	; 0x04
    1a6a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a6c:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1a6e:	81 11       	cpse	r24, r1
    1a70:	57 c0       	rjmp	.+174    	; 0x1b20 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1a72:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <udd_g_ctrlreq>
    1a76:	8f 71       	andi	r24, 0x1F	; 31
    1a78:	82 30       	cpi	r24, 0x02	; 2
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <udc_process_setup+0x490>
    1a7c:	44 c0       	rjmp	.+136    	; 0x1b06 <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1a7e:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <udc_num_configuration>
    1a82:	88 23       	and	r24, r24
    1a84:	b1 f1       	breq	.+108    	; 0x1af2 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a86:	a0 91 20 22 	lds	r26, 0x2220	; 0x802220 <udc_ptr_conf>
    1a8a:	b0 91 21 22 	lds	r27, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    1a8e:	ed 91       	ld	r30, X+
    1a90:	fc 91       	ld	r31, X
    1a92:	11 97       	sbiw	r26, 0x01	; 1
    1a94:	84 81       	ldd	r24, Z+4	; 0x04
    1a96:	88 23       	and	r24, r24
    1a98:	71 f1       	breq	.+92     	; 0x1af6 <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a9a:	c0 e0       	ldi	r28, 0x00	; 0
    1a9c:	ec 2f       	mov	r30, r28
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	ee 0f       	add	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	12 96       	adiw	r26, 0x02	; 2
    1aa6:	8d 91       	ld	r24, X+
    1aa8:	9c 91       	ld	r25, X
    1aaa:	13 97       	sbiw	r26, 0x03	; 3
    1aac:	e8 0f       	add	r30, r24
    1aae:	f9 1f       	adc	r31, r25
    1ab0:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1ab2:	11 81       	ldd	r17, Z+1	; 0x01
    1ab4:	d8 01       	movw	r26, r16
    1ab6:	16 96       	adiw	r26, 0x06	; 6
    1ab8:	ed 91       	ld	r30, X+
    1aba:	fc 91       	ld	r31, X
    1abc:	17 97       	sbiw	r26, 0x07	; 7
    1abe:	19 95       	eicall
    1ac0:	68 2f       	mov	r22, r24
    1ac2:	8c 2f       	mov	r24, r28
    1ac4:	85 dc       	rcall	.-1782   	; 0x13d0 <udc_update_iface_desc>
    1ac6:	88 23       	and	r24, r24
    1ac8:	59 f1       	breq	.+86     	; 0x1b20 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1aca:	d8 01       	movw	r26, r16
    1acc:	14 96       	adiw	r26, 0x04	; 4
    1ace:	ed 91       	ld	r30, X+
    1ad0:	fc 91       	ld	r31, X
    1ad2:	15 97       	sbiw	r26, 0x05	; 5
    1ad4:	19 95       	eicall
    1ad6:	81 11       	cpse	r24, r1
    1ad8:	23 c0       	rjmp	.+70     	; 0x1b20 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1ada:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1adc:	a0 91 20 22 	lds	r26, 0x2220	; 0x802220 <udc_ptr_conf>
    1ae0:	b0 91 21 22 	lds	r27, 0x2221	; 0x802221 <udc_ptr_conf+0x1>
    1ae4:	ed 91       	ld	r30, X+
    1ae6:	fc 91       	ld	r31, X
    1ae8:	11 97       	sbiw	r26, 0x01	; 1
    1aea:	94 81       	ldd	r25, Z+4	; 0x04
    1aec:	c9 17       	cp	r28, r25
    1aee:	b0 f2       	brcs	.-84     	; 0x1a9c <udc_process_setup+0x4ae>
    1af0:	17 c0       	rjmp	.+46     	; 0x1b20 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	15 c0       	rjmp	.+42     	; 0x1b20 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	13 c0       	rjmp	.+38     	; 0x1b20 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	11 c0       	rjmp	.+34     	; 0x1b20 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <udc_process_setup+0x532>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	0d c0       	rjmp	.+26     	; 0x1b20 <udc_process_setup+0x532>
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	0b c0       	rjmp	.+22     	; 0x1b20 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1b0a:	98 2f       	mov	r25, r24
    1b0c:	90 76       	andi	r25, 0x60	; 96
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <udc_process_setup+0x524>
    1b10:	7b cf       	rjmp	.-266    	; 0x1a08 <udc_process_setup+0x41a>
    1b12:	80 ce       	rjmp	.-768    	; 0x1814 <udc_process_setup+0x226>
    1b14:	98 2f       	mov	r25, r24
    1b16:	90 76       	andi	r25, 0x60	; 96
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <udc_process_setup+0x52e>
    1b1a:	76 cf       	rjmp	.-276    	; 0x1a08 <udc_process_setup+0x41a>
    1b1c:	81 cd       	rjmp	.-1278   	; 0x1620 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	08 95       	ret

00001b2a <udc_is_configured>:

// added by UniWest, allows checking of USB connection
bool udc_is_configured(void) {
	extern uint8_t udc_num_configuration;
	return (udc_num_configuration != 0);
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 91 22 22 	lds	r25, 0x2222	; 0x802222 <udc_num_configuration>
    1b30:	91 11       	cpse	r25, r1
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <udc_is_configured+0xc>
    1b34:	80 e0       	ldi	r24, 0x00	; 0
}
    1b36:	08 95       	ret

00001b38 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1b38:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1b3c:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1b3e:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1b40:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1b44:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1b46:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1b4a:	08 95       	ret

00001b4c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1b4c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1b4e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1b50:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1b52:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1b54:	60 83       	st	Z, r22
	ret                             // Return to caller
    1b56:	08 95       	ret

00001b58 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	1f 92       	push	r1
    1b5e:	1f 92       	push	r1
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	81 11       	cpse	r24, r1
    1b66:	26 c0       	rjmp	.+76     	; 0x1bb4 <udd_sleep_mode+0x5c>
    1b68:	90 91 e8 23 	lds	r25, 0x23E8	; 0x8023e8 <udd_b_idle>
    1b6c:	99 23       	and	r25, r25
    1b6e:	f9 f0       	breq	.+62     	; 0x1bae <udd_sleep_mode+0x56>
    1b70:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <sleepmgr_locks+0x1>
    1b74:	91 11       	cpse	r25, r1
    1b76:	01 c0       	rjmp	.+2      	; 0x1b7a <udd_sleep_mode+0x22>
    1b78:	ff cf       	rjmp	.-2      	; 0x1b78 <udd_sleep_mode+0x20>
    1b7a:	9f b7       	in	r25, 0x3f	; 63
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	f8 94       	cli
    1b80:	2a 81       	ldd	r18, Y+2	; 0x02
    1b82:	ec ee       	ldi	r30, 0xEC	; 236
    1b84:	f3 e2       	ldi	r31, 0x23	; 35
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	91 50       	subi	r25, 0x01	; 1
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	2f bf       	out	0x3f, r18	; 63
    1b8e:	0f c0       	rjmp	.+30     	; 0x1bae <udd_sleep_mode+0x56>
    1b90:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <sleepmgr_locks+0x1>
    1b94:	9f 3f       	cpi	r25, 0xFF	; 255
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <udd_sleep_mode+0x42>
    1b98:	ff cf       	rjmp	.-2      	; 0x1b98 <udd_sleep_mode+0x40>
    1b9a:	9f b7       	in	r25, 0x3f	; 63
    1b9c:	99 83       	std	Y+1, r25	; 0x01
    1b9e:	f8 94       	cli
    1ba0:	29 81       	ldd	r18, Y+1	; 0x01
    1ba2:	ec ee       	ldi	r30, 0xEC	; 236
    1ba4:	f3 e2       	ldi	r31, 0x23	; 35
    1ba6:	91 81       	ldd	r25, Z+1	; 0x01
    1ba8:	9f 5f       	subi	r25, 0xFF	; 255
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	2f bf       	out	0x3f, r18	; 63
    1bae:	80 93 e8 23 	sts	0x23E8, r24	; 0x8023e8 <udd_b_idle>
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <udd_sleep_mode+0x66>
    1bb4:	90 91 e8 23 	lds	r25, 0x23E8	; 0x8023e8 <udd_b_idle>
    1bb8:	99 23       	and	r25, r25
    1bba:	51 f3       	breq	.-44     	; 0x1b90 <udd_sleep_mode+0x38>
    1bbc:	f8 cf       	rjmp	.-16     	; 0x1bae <udd_sleep_mode+0x56>
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <udd_ctrl_init>:
    1bc8:	0f 93       	push	r16
    1bca:	e8 ec       	ldi	r30, 0xC8	; 200
    1bcc:	f4 e0       	ldi	r31, 0x04	; 4
    1bce:	80 81       	ld	r24, Z
    1bd0:	8f 7d       	andi	r24, 0xDF	; 223
    1bd2:	80 83       	st	Z, r24
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8f 7d       	andi	r24, 0xDF	; 223
    1bd8:	80 83       	st	Z, r24
    1bda:	ec e9       	ldi	r30, 0x9C	; 156
    1bdc:	f3 e2       	ldi	r31, 0x23	; 35
    1bde:	02 e0       	ldi	r16, 0x02	; 2
    1be0:	05 93       	las	Z, r16
    1be2:	10 92 9e 23 	sts	0x239E, r1	; 0x80239e <udd_sram+0x1e>
    1be6:	10 92 9f 23 	sts	0x239F, r1	; 0x80239f <udd_sram+0x1f>
    1bea:	00 e2       	ldi	r16, 0x20	; 32
    1bec:	06 93       	lac	Z, r16
    1bee:	00 e4       	ldi	r16, 0x40	; 64
    1bf0:	06 93       	lac	Z, r16
    1bf2:	e4 e9       	ldi	r30, 0x94	; 148
    1bf4:	f3 e2       	ldi	r31, 0x23	; 35
    1bf6:	00 e4       	ldi	r16, 0x40	; 64
    1bf8:	06 93       	lac	Z, r16
    1bfa:	e2 ef       	ldi	r30, 0xF2	; 242
    1bfc:	f3 e2       	ldi	r31, 0x23	; 35
    1bfe:	14 86       	std	Z+12, r1	; 0x0c
    1c00:	15 86       	std	Z+13, r1	; 0x0d
    1c02:	16 86       	std	Z+14, r1	; 0x0e
    1c04:	17 86       	std	Z+15, r1	; 0x0f
    1c06:	12 86       	std	Z+10, r1	; 0x0a
    1c08:	13 86       	std	Z+11, r1	; 0x0b
    1c0a:	10 92 7d 23 	sts	0x237D, r1	; 0x80237d <udd_ep_control_state>
    1c0e:	0f 91       	pop	r16
    1c10:	08 95       	ret

00001c12 <udd_ctrl_stall_data>:
    1c12:	0f 93       	push	r16
    1c14:	85 e0       	ldi	r24, 0x05	; 5
    1c16:	80 93 7d 23 	sts	0x237D, r24	; 0x80237d <udd_ep_control_state>
    1c1a:	ed e9       	ldi	r30, 0x9D	; 157
    1c1c:	f3 e2       	ldi	r31, 0x23	; 35
    1c1e:	04 e0       	ldi	r16, 0x04	; 4
    1c20:	05 93       	las	Z, r16
    1c22:	e5 e9       	ldi	r30, 0x95	; 149
    1c24:	f3 e2       	ldi	r31, 0x23	; 35
    1c26:	04 e0       	ldi	r16, 0x04	; 4
    1c28:	05 93       	las	Z, r16
    1c2a:	0f 91       	pop	r16
    1c2c:	08 95       	ret

00001c2e <udd_ctrl_send_zlp_in>:
    1c2e:	0f 93       	push	r16
    1c30:	83 e0       	ldi	r24, 0x03	; 3
    1c32:	80 93 7d 23 	sts	0x237D, r24	; 0x80237d <udd_ep_control_state>
    1c36:	10 92 9e 23 	sts	0x239E, r1	; 0x80239e <udd_sram+0x1e>
    1c3a:	10 92 9f 23 	sts	0x239F, r1	; 0x80239f <udd_sram+0x1f>
    1c3e:	ec e9       	ldi	r30, 0x9C	; 156
    1c40:	f3 e2       	ldi	r31, 0x23	; 35
    1c42:	02 e0       	ldi	r16, 0x02	; 2
    1c44:	06 93       	lac	Z, r16
    1c46:	0f 91       	pop	r16
    1c48:	08 95       	ret

00001c4a <udd_ctrl_endofrequest>:
    1c4a:	e0 91 fe 23 	lds	r30, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0xc>
    1c4e:	f0 91 ff 23 	lds	r31, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0xd>
    1c52:	30 97       	sbiw	r30, 0x00	; 0
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <udd_ctrl_endofrequest+0xe>
    1c56:	19 95       	eicall
    1c58:	08 95       	ret

00001c5a <udd_ctrl_in_sent>:
    1c5a:	0f 93       	push	r16
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	80 91 7d 23 	lds	r24, 0x237D	; 0x80237d <udd_ep_control_state>
    1c64:	83 30       	cpi	r24, 0x03	; 3
    1c66:	19 f4       	brne	.+6      	; 0x1c6e <udd_ctrl_in_sent+0x14>
    1c68:	f0 df       	rcall	.-32     	; 0x1c4a <udd_ctrl_endofrequest>
    1c6a:	ae df       	rcall	.-164    	; 0x1bc8 <udd_ctrl_init>
    1c6c:	5e c0       	rjmp	.+188    	; 0x1d2a <udd_ctrl_in_sent+0xd0>
    1c6e:	80 91 79 23 	lds	r24, 0x2379	; 0x802379 <udd_ctrl_payload_nb_trans>
    1c72:	90 91 7a 23 	lds	r25, 0x237A	; 0x80237a <udd_ctrl_payload_nb_trans+0x1>
    1c76:	c0 91 fc 23 	lds	r28, 0x23FC	; 0x8023fc <udd_g_ctrlreq+0xa>
    1c7a:	d0 91 fd 23 	lds	r29, 0x23FD	; 0x8023fd <udd_g_ctrlreq+0xb>
    1c7e:	c8 1b       	sub	r28, r24
    1c80:	d9 0b       	sbc	r29, r25
    1c82:	71 f5       	brne	.+92     	; 0x1ce0 <udd_ctrl_in_sent+0x86>
    1c84:	20 91 7b 23 	lds	r18, 0x237B	; 0x80237b <udd_ctrl_prev_payload_nb_trans>
    1c88:	30 91 7c 23 	lds	r19, 0x237C	; 0x80237c <udd_ctrl_prev_payload_nb_trans+0x1>
    1c8c:	82 0f       	add	r24, r18
    1c8e:	93 1f       	adc	r25, r19
    1c90:	80 93 7b 23 	sts	0x237B, r24	; 0x80237b <udd_ctrl_prev_payload_nb_trans>
    1c94:	90 93 7c 23 	sts	0x237C, r25	; 0x80237c <udd_ctrl_prev_payload_nb_trans+0x1>
    1c98:	20 91 f8 23 	lds	r18, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
    1c9c:	30 91 f9 23 	lds	r19, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
    1ca0:	82 17       	cp	r24, r18
    1ca2:	93 07       	cpc	r25, r19
    1ca4:	21 f0       	breq	.+8      	; 0x1cae <udd_ctrl_in_sent+0x54>
    1ca6:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <b_shortpacket.5301>
    1caa:	88 23       	and	r24, r24
    1cac:	41 f0       	breq	.+16     	; 0x1cbe <udd_ctrl_in_sent+0x64>
    1cae:	84 e0       	ldi	r24, 0x04	; 4
    1cb0:	80 93 7d 23 	sts	0x237D, r24	; 0x80237d <udd_ep_control_state>
    1cb4:	e4 e9       	ldi	r30, 0x94	; 148
    1cb6:	f3 e2       	ldi	r31, 0x23	; 35
    1cb8:	02 e0       	ldi	r16, 0x02	; 2
    1cba:	06 93       	lac	Z, r16
    1cbc:	36 c0       	rjmp	.+108    	; 0x1d2a <udd_ctrl_in_sent+0xd0>
    1cbe:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <udd_g_ctrlreq+0xe>
    1cc2:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <udd_g_ctrlreq+0xf>
    1cc6:	30 97       	sbiw	r30, 0x00	; 0
    1cc8:	99 f0       	breq	.+38     	; 0x1cf0 <udd_ctrl_in_sent+0x96>
    1cca:	19 95       	eicall
    1ccc:	88 23       	and	r24, r24
    1cce:	81 f0       	breq	.+32     	; 0x1cf0 <udd_ctrl_in_sent+0x96>
    1cd0:	10 92 79 23 	sts	0x2379, r1	; 0x802379 <udd_ctrl_payload_nb_trans>
    1cd4:	10 92 7a 23 	sts	0x237A, r1	; 0x80237a <udd_ctrl_payload_nb_trans+0x1>
    1cd8:	c0 91 fc 23 	lds	r28, 0x23FC	; 0x8023fc <udd_g_ctrlreq+0xa>
    1cdc:	d0 91 fd 23 	lds	r29, 0x23FD	; 0x8023fd <udd_g_ctrlreq+0xb>
    1ce0:	c8 30       	cpi	r28, 0x08	; 8
    1ce2:	d1 05       	cpc	r29, r1
    1ce4:	28 f0       	brcs	.+10     	; 0x1cf0 <udd_ctrl_in_sent+0x96>
    1ce6:	10 92 28 22 	sts	0x2228, r1	; 0x802228 <b_shortpacket.5301>
    1cea:	c8 e0       	ldi	r28, 0x08	; 8
    1cec:	d0 e0       	ldi	r29, 0x00	; 0
    1cee:	03 c0       	rjmp	.+6      	; 0x1cf6 <udd_ctrl_in_sent+0x9c>
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	80 93 28 22 	sts	0x2228, r24	; 0x802228 <b_shortpacket.5301>
    1cf6:	e0 e8       	ldi	r30, 0x80	; 128
    1cf8:	f3 e2       	ldi	r31, 0x23	; 35
    1cfa:	c6 8f       	std	Z+30, r28	; 0x1e
    1cfc:	d7 8f       	std	Z+31, r29	; 0x1f
    1cfe:	80 91 79 23 	lds	r24, 0x2379	; 0x802379 <udd_ctrl_payload_nb_trans>
    1d02:	90 91 7a 23 	lds	r25, 0x237A	; 0x80237a <udd_ctrl_payload_nb_trans+0x1>
    1d06:	20 91 fa 23 	lds	r18, 0x23FA	; 0x8023fa <udd_g_ctrlreq+0x8>
    1d0a:	30 91 fb 23 	lds	r19, 0x23FB	; 0x8023fb <udd_g_ctrlreq+0x9>
    1d0e:	28 0f       	add	r18, r24
    1d10:	39 1f       	adc	r19, r25
    1d12:	20 a3       	std	Z+32, r18	; 0x20
    1d14:	31 a3       	std	Z+33, r19	; 0x21
    1d16:	c8 0f       	add	r28, r24
    1d18:	d9 1f       	adc	r29, r25
    1d1a:	c0 93 79 23 	sts	0x2379, r28	; 0x802379 <udd_ctrl_payload_nb_trans>
    1d1e:	d0 93 7a 23 	sts	0x237A, r29	; 0x80237a <udd_ctrl_payload_nb_trans+0x1>
    1d22:	ec e9       	ldi	r30, 0x9C	; 156
    1d24:	f3 e2       	ldi	r31, 0x23	; 35
    1d26:	02 e0       	ldi	r16, 0x02	; 2
    1d28:	06 93       	lac	Z, r16
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	0f 91       	pop	r16
    1d30:	08 95       	ret

00001d32 <udd_ep_get_size>:
    1d32:	fc 01       	movw	r30, r24
    1d34:	81 81       	ldd	r24, Z+1	; 0x01
    1d36:	e8 2f       	mov	r30, r24
    1d38:	e7 70       	andi	r30, 0x07	; 7
    1d3a:	8e 2f       	mov	r24, r30
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	fc 01       	movw	r30, r24
    1d40:	31 97       	sbiw	r30, 0x01	; 1
    1d42:	e7 30       	cpi	r30, 0x07	; 7
    1d44:	f1 05       	cpc	r31, r1
    1d46:	d0 f4       	brcc	.+52     	; 0x1d7c <udd_ep_get_size+0x4a>
    1d48:	88 27       	eor	r24, r24
    1d4a:	eb 5c       	subi	r30, 0xCB	; 203
    1d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d50:	63 c7       	rjmp	.+3782   	; 0x2c18 <__tablejump2__>
    1d52:	80 e1       	ldi	r24, 0x10	; 16
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	08 95       	ret
    1d58:	80 e2       	ldi	r24, 0x20	; 32
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	08 95       	ret
    1d5e:	80 e4       	ldi	r24, 0x40	; 64
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	08 95       	ret
    1d64:	80 e8       	ldi	r24, 0x80	; 128
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	08 95       	ret
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	91 e0       	ldi	r25, 0x01	; 1
    1d6e:	08 95       	ret
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	92 e0       	ldi	r25, 0x02	; 2
    1d74:	08 95       	ret
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    1d78:	93 e0       	ldi	r25, 0x03	; 3
    1d7a:	08 95       	ret
    1d7c:	88 e0       	ldi	r24, 0x08	; 8
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	08 95       	ret

00001d82 <udd_ep_get_job>:
    1d82:	28 2f       	mov	r18, r24
    1d84:	2f 70       	andi	r18, 0x0F	; 15
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	22 0f       	add	r18, r18
    1d8a:	33 1f       	adc	r19, r19
    1d8c:	08 2e       	mov	r0, r24
    1d8e:	00 0c       	add	r0, r0
    1d90:	99 0b       	sbc	r25, r25
    1d92:	88 27       	eor	r24, r24
    1d94:	99 0f       	add	r25, r25
    1d96:	88 1f       	adc	r24, r24
    1d98:	99 27       	eor	r25, r25
    1d9a:	82 0f       	add	r24, r18
    1d9c:	93 1f       	adc	r25, r19
    1d9e:	02 97       	sbiw	r24, 0x02	; 2
    1da0:	9c 01       	movw	r18, r24
    1da2:	22 0f       	add	r18, r18
    1da4:	33 1f       	adc	r19, r19
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	22 0f       	add	r18, r18
    1dac:	33 1f       	adc	r19, r19
    1dae:	82 0f       	add	r24, r18
    1db0:	93 1f       	adc	r25, r19
    1db2:	87 5d       	subi	r24, 0xD7	; 215
    1db4:	9c 4d       	sbci	r25, 0xDC	; 220
    1db6:	08 95       	ret

00001db8 <udd_ctrl_interrupt_tc_setup>:
    1db8:	0f 93       	push	r16
    1dba:	cf 93       	push	r28
    1dbc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1dc0:	80 ff       	sbrs	r24, 0
    1dc2:	64 c0       	rjmp	.+200    	; 0x1e8c <udd_ctrl_interrupt_tc_setup+0xd4>
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1dca:	e4 e9       	ldi	r30, 0x94	; 148
    1dcc:	f3 e2       	ldi	r31, 0x23	; 35
    1dce:	00 e8       	ldi	r16, 0x80	; 128
    1dd0:	06 93       	lac	Z, r16
    1dd2:	ec e9       	ldi	r30, 0x9C	; 156
    1dd4:	f3 e2       	ldi	r31, 0x23	; 35
    1dd6:	00 e8       	ldi	r16, 0x80	; 128
    1dd8:	06 93       	lac	Z, r16
    1dda:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1dde:	e4 e9       	ldi	r30, 0x94	; 148
    1de0:	f3 e2       	ldi	r31, 0x23	; 35
    1de2:	00 e1       	ldi	r16, 0x10	; 16
    1de4:	06 93       	lac	Z, r16
    1de6:	80 91 7d 23 	lds	r24, 0x237D	; 0x80237d <udd_ep_control_state>
    1dea:	88 23       	and	r24, r24
    1dec:	29 f0       	breq	.+10     	; 0x1df8 <udd_ctrl_interrupt_tc_setup+0x40>
    1dee:	83 50       	subi	r24, 0x03	; 3
    1df0:	82 30       	cpi	r24, 0x02	; 2
    1df2:	08 f4       	brcc	.+2      	; 0x1df6 <udd_ctrl_interrupt_tc_setup+0x3e>
    1df4:	2a df       	rcall	.-428    	; 0x1c4a <udd_ctrl_endofrequest>
    1df6:	e8 de       	rcall	.-560    	; 0x1bc8 <udd_ctrl_init>
    1df8:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_sram+0x16>
    1dfc:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_sram+0x17>
    1e00:	08 97       	sbiw	r24, 0x08	; 8
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <udd_ctrl_interrupt_tc_setup+0x4e>
    1e04:	45 c0       	rjmp	.+138    	; 0x1e90 <udd_ctrl_interrupt_tc_setup+0xd8>
    1e06:	88 e0       	ldi	r24, 0x08	; 8
    1e08:	e1 e7       	ldi	r30, 0x71	; 113
    1e0a:	f3 e2       	ldi	r31, 0x23	; 35
    1e0c:	a2 ef       	ldi	r26, 0xF2	; 242
    1e0e:	b3 e2       	ldi	r27, 0x23	; 35
    1e10:	01 90       	ld	r0, Z+
    1e12:	0d 92       	st	X+, r0
    1e14:	8a 95       	dec	r24
    1e16:	e1 f7       	brne	.-8      	; 0x1e10 <udd_ctrl_interrupt_tc_setup+0x58>
    1e18:	e8 ec       	ldi	r30, 0xC8	; 200
    1e1a:	f4 e0       	ldi	r31, 0x04	; 4
    1e1c:	80 81       	ld	r24, Z
    1e1e:	80 62       	ori	r24, 0x20	; 32
    1e20:	80 83       	st	Z, r24
    1e22:	80 81       	ld	r24, Z
    1e24:	80 62       	ori	r24, 0x20	; 32
    1e26:	80 83       	st	Z, r24
    1e28:	e2 db       	rcall	.-2108   	; 0x15ee <udc_process_setup>
    1e2a:	c8 2f       	mov	r28, r24
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	03 c0       	rjmp	.+6      	; 0x1e36 <udd_ctrl_interrupt_tc_setup+0x7e>
    1e30:	f0 de       	rcall	.-544    	; 0x1c12 <udd_ctrl_stall_data>
    1e32:	c1 e0       	ldi	r28, 0x01	; 1
    1e34:	2e c0       	rjmp	.+92     	; 0x1e92 <udd_ctrl_interrupt_tc_setup+0xda>
    1e36:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <udd_g_ctrlreq>
    1e3a:	88 23       	and	r24, r24
    1e3c:	6c f4       	brge	.+26     	; 0x1e58 <udd_ctrl_interrupt_tc_setup+0xa0>
    1e3e:	10 92 7b 23 	sts	0x237B, r1	; 0x80237b <udd_ctrl_prev_payload_nb_trans>
    1e42:	10 92 7c 23 	sts	0x237C, r1	; 0x80237c <udd_ctrl_prev_payload_nb_trans+0x1>
    1e46:	10 92 79 23 	sts	0x2379, r1	; 0x802379 <udd_ctrl_payload_nb_trans>
    1e4a:	10 92 7a 23 	sts	0x237A, r1	; 0x80237a <udd_ctrl_payload_nb_trans+0x1>
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	80 93 7d 23 	sts	0x237D, r24	; 0x80237d <udd_ep_control_state>
    1e54:	02 df       	rcall	.-508    	; 0x1c5a <udd_ctrl_in_sent>
    1e56:	1d c0       	rjmp	.+58     	; 0x1e92 <udd_ctrl_interrupt_tc_setup+0xda>
    1e58:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
    1e5c:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
    1e60:	89 2b       	or	r24, r25
    1e62:	11 f4       	brne	.+4      	; 0x1e68 <udd_ctrl_interrupt_tc_setup+0xb0>
    1e64:	e4 de       	rcall	.-568    	; 0x1c2e <udd_ctrl_send_zlp_in>
    1e66:	15 c0       	rjmp	.+42     	; 0x1e92 <udd_ctrl_interrupt_tc_setup+0xda>
    1e68:	10 92 7b 23 	sts	0x237B, r1	; 0x80237b <udd_ctrl_prev_payload_nb_trans>
    1e6c:	10 92 7c 23 	sts	0x237C, r1	; 0x80237c <udd_ctrl_prev_payload_nb_trans+0x1>
    1e70:	10 92 79 23 	sts	0x2379, r1	; 0x802379 <udd_ctrl_payload_nb_trans>
    1e74:	10 92 7a 23 	sts	0x237A, r1	; 0x80237a <udd_ctrl_payload_nb_trans+0x1>
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	80 93 7d 23 	sts	0x237D, r24	; 0x80237d <udd_ep_control_state>
    1e7e:	e4 e9       	ldi	r30, 0x94	; 148
    1e80:	f3 e2       	ldi	r31, 0x23	; 35
    1e82:	02 e0       	ldi	r16, 0x02	; 2
    1e84:	06 93       	lac	Z, r16
    1e86:	00 e2       	ldi	r16, 0x20	; 32
    1e88:	06 93       	lac	Z, r16
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <udd_ctrl_interrupt_tc_setup+0xda>
    1e8c:	c0 e0       	ldi	r28, 0x00	; 0
    1e8e:	01 c0       	rjmp	.+2      	; 0x1e92 <udd_ctrl_interrupt_tc_setup+0xda>
    1e90:	c1 e0       	ldi	r28, 0x01	; 1
    1e92:	8c 2f       	mov	r24, r28
    1e94:	cf 91       	pop	r28
    1e96:	0f 91       	pop	r16
    1e98:	08 95       	ret

00001e9a <udd_ep_trans_complet>:
    1e9a:	8f 92       	push	r8
    1e9c:	9f 92       	push	r9
    1e9e:	af 92       	push	r10
    1ea0:	bf 92       	push	r11
    1ea2:	df 92       	push	r13
    1ea4:	ef 92       	push	r14
    1ea6:	ff 92       	push	r15
    1ea8:	0f 93       	push	r16
    1eaa:	1f 93       	push	r17
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	d8 2e       	mov	r13, r24
    1eb2:	67 df       	rcall	.-306    	; 0x1d82 <udd_ep_get_job>
    1eb4:	8c 01       	movw	r16, r24
    1eb6:	cd 2d       	mov	r28, r13
    1eb8:	cf 70       	andi	r28, 0x0F	; 15
    1eba:	d0 e0       	ldi	r29, 0x00	; 0
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	cd 2d       	mov	r28, r13
    1ec4:	0d 2c       	mov	r0, r13
    1ec6:	00 0c       	add	r0, r0
    1ec8:	dd 0b       	sbc	r29, r29
    1eca:	cc 27       	eor	r28, r28
    1ecc:	dd 0f       	add	r29, r29
    1ece:	cc 1f       	adc	r28, r28
    1ed0:	dd 27       	eor	r29, r29
    1ed2:	c8 0f       	add	r28, r24
    1ed4:	d9 1f       	adc	r29, r25
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	9c 01       	movw	r18, r24
    1ee6:	2c 56       	subi	r18, 0x6C	; 108
    1ee8:	3c 4d       	sbci	r19, 0xDC	; 220
    1eea:	79 01       	movw	r14, r18
    1eec:	c9 01       	movw	r24, r18
    1eee:	21 df       	rcall	.-446    	; 0x1d32 <udd_ep_get_size>
    1ef0:	4c 01       	movw	r8, r24
    1ef2:	dd 20       	and	r13, r13
    1ef4:	0c f0       	brlt	.+2      	; 0x1ef8 <udd_ep_trans_complet+0x5e>
    1ef6:	79 c0       	rjmp	.+242    	; 0x1fea <udd_ep_trans_complet+0x150>
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ee 0f       	add	r30, r30
    1efc:	ff 1f       	adc	r31, r31
    1efe:	ee 0f       	add	r30, r30
    1f00:	ff 1f       	adc	r31, r31
    1f02:	ee 0f       	add	r30, r30
    1f04:	ff 1f       	adc	r31, r31
    1f06:	e0 58       	subi	r30, 0x80	; 128
    1f08:	fc 4d       	sbci	r31, 0xDC	; 220
    1f0a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f0c:	33 8d       	ldd	r19, Z+27	; 0x1b
    1f0e:	d8 01       	movw	r26, r16
    1f10:	15 96       	adiw	r26, 0x05	; 5
    1f12:	8d 91       	ld	r24, X+
    1f14:	9c 91       	ld	r25, X
    1f16:	16 97       	sbiw	r26, 0x06	; 6
    1f18:	82 0f       	add	r24, r18
    1f1a:	93 1f       	adc	r25, r19
    1f1c:	15 96       	adiw	r26, 0x05	; 5
    1f1e:	8d 93       	st	X+, r24
    1f20:	9c 93       	st	X, r25
    1f22:	16 97       	sbiw	r26, 0x06	; 6
    1f24:	13 96       	adiw	r26, 0x03	; 3
    1f26:	2d 91       	ld	r18, X+
    1f28:	3c 91       	ld	r19, X
    1f2a:	14 97       	sbiw	r26, 0x04	; 4
    1f2c:	82 17       	cp	r24, r18
    1f2e:	93 07       	cpc	r25, r19
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <udd_ep_trans_complet+0x9a>
    1f32:	45 c0       	rjmp	.+138    	; 0x1fbe <udd_ep_trans_complet+0x124>
    1f34:	28 1b       	sub	r18, r24
    1f36:	39 0b       	sbc	r19, r25
    1f38:	21 15       	cp	r18, r1
    1f3a:	b4 e0       	ldi	r27, 0x04	; 4
    1f3c:	3b 07       	cpc	r19, r27
    1f3e:	38 f0       	brcs	.+14     	; 0x1f4e <udd_ep_trans_complet+0xb4>
    1f40:	2f ef       	ldi	r18, 0xFF	; 255
    1f42:	33 e0       	ldi	r19, 0x03	; 3
    1f44:	c9 01       	movw	r24, r18
    1f46:	b4 01       	movw	r22, r8
    1f48:	53 d6       	rcall	.+3238   	; 0x2bf0 <__udivmodhi4>
    1f4a:	28 1b       	sub	r18, r24
    1f4c:	39 0b       	sbc	r19, r25
    1f4e:	f8 01       	movw	r30, r16
    1f50:	80 81       	ld	r24, Z
    1f52:	81 ff       	sbrs	r24, 1
    1f54:	09 c0       	rjmp	.+18     	; 0x1f68 <udd_ep_trans_complet+0xce>
    1f56:	c9 01       	movw	r24, r18
    1f58:	b4 01       	movw	r22, r8
    1f5a:	4a d6       	rcall	.+3220   	; 0x2bf0 <__udivmodhi4>
    1f5c:	41 e0       	ldi	r20, 0x01	; 1
    1f5e:	89 2b       	or	r24, r25
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <udd_ep_trans_complet+0xca>
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	84 2f       	mov	r24, r20
    1f66:	01 c0       	rjmp	.+2      	; 0x1f6a <udd_ep_trans_complet+0xd0>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	d8 01       	movw	r26, r16
    1f6c:	9c 91       	ld	r25, X
    1f6e:	80 fb       	bst	r24, 0
    1f70:	91 f9       	bld	r25, 1
    1f72:	9c 93       	st	X, r25
    1f74:	fe 01       	movw	r30, r28
    1f76:	ee 0f       	add	r30, r30
    1f78:	ff 1f       	adc	r31, r31
    1f7a:	ee 0f       	add	r30, r30
    1f7c:	ff 1f       	adc	r31, r31
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	e0 58       	subi	r30, 0x80	; 128
    1f84:	fc 4d       	sbci	r31, 0xDC	; 220
    1f86:	12 8e       	std	Z+26, r1	; 0x1a
    1f88:	13 8e       	std	Z+27, r1	; 0x1b
    1f8a:	26 8b       	std	Z+22, r18	; 0x16
    1f8c:	37 8b       	std	Z+23, r19	; 0x17
    1f8e:	11 96       	adiw	r26, 0x01	; 1
    1f90:	2d 91       	ld	r18, X+
    1f92:	3c 91       	ld	r19, X
    1f94:	12 97       	sbiw	r26, 0x02	; 2
    1f96:	15 96       	adiw	r26, 0x05	; 5
    1f98:	8d 91       	ld	r24, X+
    1f9a:	9c 91       	ld	r25, X
    1f9c:	16 97       	sbiw	r26, 0x06	; 6
    1f9e:	82 0f       	add	r24, r18
    1fa0:	93 1f       	adc	r25, r19
    1fa2:	cc 0f       	add	r28, r28
    1fa4:	dd 1f       	adc	r29, r29
    1fa6:	cc 0f       	add	r28, r28
    1fa8:	dd 1f       	adc	r29, r29
    1faa:	cc 0f       	add	r28, r28
    1fac:	dd 1f       	adc	r29, r29
    1fae:	c8 56       	subi	r28, 0x68	; 104
    1fb0:	dc 4d       	sbci	r29, 0xDC	; 220
    1fb2:	88 83       	st	Y, r24
    1fb4:	99 83       	std	Y+1, r25	; 0x01
    1fb6:	f7 01       	movw	r30, r14
    1fb8:	02 e0       	ldi	r16, 0x02	; 2
    1fba:	06 93       	lac	Z, r16
    1fbc:	e0 c0       	rjmp	.+448    	; 0x217e <udd_ep_trans_complet+0x2e4>
    1fbe:	d8 01       	movw	r26, r16
    1fc0:	8c 91       	ld	r24, X
    1fc2:	81 ff       	sbrs	r24, 1
    1fc4:	c9 c0       	rjmp	.+402    	; 0x2158 <udd_ep_trans_complet+0x2be>
    1fc6:	8d 7f       	andi	r24, 0xFD	; 253
    1fc8:	8c 93       	st	X, r24
    1fca:	cc 0f       	add	r28, r28
    1fcc:	dd 1f       	adc	r29, r29
    1fce:	cc 0f       	add	r28, r28
    1fd0:	dd 1f       	adc	r29, r29
    1fd2:	cc 0f       	add	r28, r28
    1fd4:	dd 1f       	adc	r29, r29
    1fd6:	c0 58       	subi	r28, 0x80	; 128
    1fd8:	dc 4d       	sbci	r29, 0xDC	; 220
    1fda:	1a 8e       	std	Y+26, r1	; 0x1a
    1fdc:	1b 8e       	std	Y+27, r1	; 0x1b
    1fde:	1e 8a       	std	Y+22, r1	; 0x16
    1fe0:	1f 8a       	std	Y+23, r1	; 0x17
    1fe2:	f7 01       	movw	r30, r14
    1fe4:	02 e0       	ldi	r16, 0x02	; 2
    1fe6:	06 93       	lac	Z, r16
    1fe8:	ca c0       	rjmp	.+404    	; 0x217e <udd_ep_trans_complet+0x2e4>
    1fea:	fe 01       	movw	r30, r28
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	ee 0f       	add	r30, r30
    1ff6:	ff 1f       	adc	r31, r31
    1ff8:	e0 58       	subi	r30, 0x80	; 128
    1ffa:	fc 4d       	sbci	r31, 0xDC	; 220
    1ffc:	a6 88       	ldd	r10, Z+22	; 0x16
    1ffe:	b7 88       	ldd	r11, Z+23	; 0x17
    2000:	d8 01       	movw	r26, r16
    2002:	8c 91       	ld	r24, X
    2004:	82 ff       	sbrs	r24, 2
    2006:	19 c0       	rjmp	.+50     	; 0x203a <udd_ep_trans_complet+0x1a0>
    2008:	11 96       	adiw	r26, 0x01	; 1
    200a:	ed 91       	ld	r30, X+
    200c:	fc 91       	ld	r31, X
    200e:	12 97       	sbiw	r26, 0x02	; 2
    2010:	15 96       	adiw	r26, 0x05	; 5
    2012:	2d 91       	ld	r18, X+
    2014:	3c 91       	ld	r19, X
    2016:	16 97       	sbiw	r26, 0x06	; 6
    2018:	13 96       	adiw	r26, 0x03	; 3
    201a:	8d 91       	ld	r24, X+
    201c:	9c 91       	ld	r25, X
    201e:	14 97       	sbiw	r26, 0x04	; 4
    2020:	b4 01       	movw	r22, r8
    2022:	e6 d5       	rcall	.+3020   	; 0x2bf0 <__udivmodhi4>
    2024:	b0 e4       	ldi	r27, 0x40	; 64
    2026:	db 9e       	mul	r13, r27
    2028:	b0 01       	movw	r22, r0
    202a:	11 24       	eor	r1, r1
    202c:	67 51       	subi	r22, 0x17	; 23
    202e:	7e 4d       	sbci	r23, 0xDE	; 222
    2030:	ac 01       	movw	r20, r24
    2032:	cf 01       	movw	r24, r30
    2034:	82 0f       	add	r24, r18
    2036:	93 1f       	adc	r25, r19
    2038:	f7 d5       	rcall	.+3054   	; 0x2c28 <memcpy>
    203a:	f8 01       	movw	r30, r16
    203c:	25 81       	ldd	r18, Z+5	; 0x05
    203e:	36 81       	ldd	r19, Z+6	; 0x06
    2040:	2a 0d       	add	r18, r10
    2042:	3b 1d       	adc	r19, r11
    2044:	25 83       	std	Z+5, r18	; 0x05
    2046:	36 83       	std	Z+6, r19	; 0x06
    2048:	83 81       	ldd	r24, Z+3	; 0x03
    204a:	94 81       	ldd	r25, Z+4	; 0x04
    204c:	82 17       	cp	r24, r18
    204e:	93 07       	cpc	r25, r19
    2050:	68 f4       	brcc	.+26     	; 0x206c <udd_ep_trans_complet+0x1d2>
    2052:	85 83       	std	Z+5, r24	; 0x05
    2054:	96 83       	std	Z+6, r25	; 0x06
    2056:	cc 0f       	add	r28, r28
    2058:	dd 1f       	adc	r29, r29
    205a:	cc 0f       	add	r28, r28
    205c:	dd 1f       	adc	r29, r29
    205e:	cc 0f       	add	r28, r28
    2060:	dd 1f       	adc	r29, r29
    2062:	c0 58       	subi	r28, 0x80	; 128
    2064:	dc 4d       	sbci	r29, 0xDC	; 220
    2066:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2068:	9b 8d       	ldd	r25, Y+27	; 0x1b
    206a:	76 c0       	rjmp	.+236    	; 0x2158 <udd_ep_trans_complet+0x2be>
    206c:	fe 01       	movw	r30, r28
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	e0 58       	subi	r30, 0x80	; 128
    207c:	fc 4d       	sbci	r31, 0xDC	; 220
    207e:	42 8d       	ldd	r20, Z+26	; 0x1a
    2080:	53 8d       	ldd	r21, Z+27	; 0x1b
    2082:	a4 16       	cp	r10, r20
    2084:	b5 06       	cpc	r11, r21
    2086:	09 f0       	breq	.+2      	; 0x208a <udd_ep_trans_complet+0x1f0>
    2088:	67 c0       	rjmp	.+206    	; 0x2158 <udd_ep_trans_complet+0x2be>
    208a:	28 17       	cp	r18, r24
    208c:	39 07       	cpc	r19, r25
    208e:	09 f4       	brne	.+2      	; 0x2092 <udd_ep_trans_complet+0x1f8>
    2090:	63 c0       	rjmp	.+198    	; 0x2158 <udd_ep_trans_complet+0x2be>
    2092:	ac 01       	movw	r20, r24
    2094:	42 1b       	sub	r20, r18
    2096:	53 0b       	sbc	r21, r19
    2098:	9a 01       	movw	r18, r20
    209a:	21 15       	cp	r18, r1
    209c:	54 e0       	ldi	r21, 0x04	; 4
    209e:	35 07       	cpc	r19, r21
    20a0:	40 f0       	brcs	.+16     	; 0x20b2 <udd_ep_trans_complet+0x218>
    20a2:	2f ef       	ldi	r18, 0xFF	; 255
    20a4:	33 e0       	ldi	r19, 0x03	; 3
    20a6:	c9 01       	movw	r24, r18
    20a8:	b4 01       	movw	r22, r8
    20aa:	a2 d5       	rcall	.+2884   	; 0x2bf0 <__udivmodhi4>
    20ac:	28 1b       	sub	r18, r24
    20ae:	39 0b       	sbc	r19, r25
    20b0:	05 c0       	rjmp	.+10     	; 0x20bc <udd_ep_trans_complet+0x222>
    20b2:	c9 01       	movw	r24, r18
    20b4:	b4 01       	movw	r22, r8
    20b6:	9c d5       	rcall	.+2872   	; 0x2bf0 <__udivmodhi4>
    20b8:	28 1b       	sub	r18, r24
    20ba:	39 0b       	sbc	r19, r25
    20bc:	fe 01       	movw	r30, r28
    20be:	ee 0f       	add	r30, r30
    20c0:	ff 1f       	adc	r31, r31
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	e0 58       	subi	r30, 0x80	; 128
    20cc:	fc 4d       	sbci	r31, 0xDC	; 220
    20ce:	16 8a       	std	Z+22, r1	; 0x16
    20d0:	17 8a       	std	Z+23, r1	; 0x17
    20d2:	28 15       	cp	r18, r8
    20d4:	39 05       	cpc	r19, r9
    20d6:	00 f5       	brcc	.+64     	; 0x2118 <udd_ep_trans_complet+0x27e>
    20d8:	d8 01       	movw	r26, r16
    20da:	8c 91       	ld	r24, X
    20dc:	84 60       	ori	r24, 0x04	; 4
    20de:	8c 93       	st	X, r24
    20e0:	b0 e4       	ldi	r27, 0x40	; 64
    20e2:	db 9e       	mul	r13, r27
    20e4:	c0 01       	movw	r24, r0
    20e6:	11 24       	eor	r1, r1
    20e8:	87 51       	subi	r24, 0x17	; 23
    20ea:	9e 4d       	sbci	r25, 0xDE	; 222
    20ec:	fe 01       	movw	r30, r28
    20ee:	ee 0f       	add	r30, r30
    20f0:	ff 1f       	adc	r31, r31
    20f2:	ee 0f       	add	r30, r30
    20f4:	ff 1f       	adc	r31, r31
    20f6:	ee 0f       	add	r30, r30
    20f8:	ff 1f       	adc	r31, r31
    20fa:	e8 56       	subi	r30, 0x68	; 104
    20fc:	fc 4d       	sbci	r31, 0xDC	; 220
    20fe:	80 83       	st	Z, r24
    2100:	91 83       	std	Z+1, r25	; 0x01
    2102:	cc 0f       	add	r28, r28
    2104:	dd 1f       	adc	r29, r29
    2106:	cc 0f       	add	r28, r28
    2108:	dd 1f       	adc	r29, r29
    210a:	cc 0f       	add	r28, r28
    210c:	dd 1f       	adc	r29, r29
    210e:	c0 58       	subi	r28, 0x80	; 128
    2110:	dc 4d       	sbci	r29, 0xDC	; 220
    2112:	8a 8e       	std	Y+26, r8	; 0x1a
    2114:	9b 8e       	std	Y+27, r9	; 0x1b
    2116:	1c c0       	rjmp	.+56     	; 0x2150 <udd_ep_trans_complet+0x2b6>
    2118:	f8 01       	movw	r30, r16
    211a:	41 81       	ldd	r20, Z+1	; 0x01
    211c:	52 81       	ldd	r21, Z+2	; 0x02
    211e:	85 81       	ldd	r24, Z+5	; 0x05
    2120:	96 81       	ldd	r25, Z+6	; 0x06
    2122:	84 0f       	add	r24, r20
    2124:	95 1f       	adc	r25, r21
    2126:	fe 01       	movw	r30, r28
    2128:	ee 0f       	add	r30, r30
    212a:	ff 1f       	adc	r31, r31
    212c:	ee 0f       	add	r30, r30
    212e:	ff 1f       	adc	r31, r31
    2130:	ee 0f       	add	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	e8 56       	subi	r30, 0x68	; 104
    2136:	fc 4d       	sbci	r31, 0xDC	; 220
    2138:	80 83       	st	Z, r24
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	cc 0f       	add	r28, r28
    213e:	dd 1f       	adc	r29, r29
    2140:	cc 0f       	add	r28, r28
    2142:	dd 1f       	adc	r29, r29
    2144:	cc 0f       	add	r28, r28
    2146:	dd 1f       	adc	r29, r29
    2148:	c0 58       	subi	r28, 0x80	; 128
    214a:	dc 4d       	sbci	r29, 0xDC	; 220
    214c:	2a 8f       	std	Y+26, r18	; 0x1a
    214e:	3b 8f       	std	Y+27, r19	; 0x1b
    2150:	f7 01       	movw	r30, r14
    2152:	02 e0       	ldi	r16, 0x02	; 2
    2154:	06 93       	lac	Z, r16
    2156:	13 c0       	rjmp	.+38     	; 0x217e <udd_ep_trans_complet+0x2e4>
    2158:	d8 01       	movw	r26, r16
    215a:	8c 91       	ld	r24, X
    215c:	80 ff       	sbrs	r24, 0
    215e:	0f c0       	rjmp	.+30     	; 0x217e <udd_ep_trans_complet+0x2e4>
    2160:	8e 7f       	andi	r24, 0xFE	; 254
    2162:	8c 93       	st	X, r24
    2164:	17 96       	adiw	r26, 0x07	; 7
    2166:	ed 91       	ld	r30, X+
    2168:	fc 91       	ld	r31, X
    216a:	18 97       	sbiw	r26, 0x08	; 8
    216c:	30 97       	sbiw	r30, 0x00	; 0
    216e:	39 f0       	breq	.+14     	; 0x217e <udd_ep_trans_complet+0x2e4>
    2170:	15 96       	adiw	r26, 0x05	; 5
    2172:	6d 91       	ld	r22, X+
    2174:	7c 91       	ld	r23, X
    2176:	16 97       	sbiw	r26, 0x06	; 6
    2178:	4d 2d       	mov	r20, r13
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	19 95       	eicall
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	ff 90       	pop	r15
    2188:	ef 90       	pop	r14
    218a:	df 90       	pop	r13
    218c:	bf 90       	pop	r11
    218e:	af 90       	pop	r10
    2190:	9f 90       	pop	r9
    2192:	8f 90       	pop	r8
    2194:	08 95       	ret

00002196 <udd_attach>:
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	1f 92       	push	r1
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	8f b7       	in	r24, 0x3f	; 63
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	f8 94       	cli
    21a8:	19 81       	ldd	r17, Y+1	; 0x01
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	d5 dc       	rcall	.-1622   	; 0x1b58 <udd_sleep_mode>
    21ae:	ea ec       	ldi	r30, 0xCA	; 202
    21b0:	f4 e0       	ldi	r31, 0x04	; 4
    21b2:	80 e4       	ldi	r24, 0x40	; 64
    21b4:	80 83       	st	Z, r24
    21b6:	80 e2       	ldi	r24, 0x20	; 32
    21b8:	80 83       	st	Z, r24
    21ba:	e1 ec       	ldi	r30, 0xC1	; 193
    21bc:	f4 e0       	ldi	r31, 0x04	; 4
    21be:	80 81       	ld	r24, Z
    21c0:	81 60       	ori	r24, 0x01	; 1
    21c2:	80 83       	st	Z, r24
    21c4:	a9 ec       	ldi	r26, 0xC9	; 201
    21c6:	b4 e0       	ldi	r27, 0x04	; 4
    21c8:	8c 91       	ld	r24, X
    21ca:	82 60       	ori	r24, 0x02	; 2
    21cc:	8c 93       	st	X, r24
    21ce:	e8 ec       	ldi	r30, 0xC8	; 200
    21d0:	f4 e0       	ldi	r31, 0x04	; 4
    21d2:	80 81       	ld	r24, Z
    21d4:	80 64       	ori	r24, 0x40	; 64
    21d6:	80 83       	st	Z, r24
    21d8:	8c 91       	ld	r24, X
    21da:	81 60       	ori	r24, 0x01	; 1
    21dc:	8c 93       	st	X, r24
    21de:	80 81       	ld	r24, Z
    21e0:	80 68       	ori	r24, 0x80	; 128
    21e2:	80 83       	st	Z, r24
    21e4:	1f bf       	out	0x3f, r17	; 63
    21e6:	0f 90       	pop	r0
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	1f 91       	pop	r17
    21ee:	08 95       	ret

000021f0 <udd_enable>:
    21f0:	0f 93       	push	r16
    21f2:	1f 93       	push	r17
    21f4:	cf 93       	push	r28
    21f6:	df 93       	push	r29
    21f8:	1f 92       	push	r1
    21fa:	1f 92       	push	r1
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	00 e6       	ldi	r16, 0x60	; 96
    2202:	10 e0       	ldi	r17, 0x00	; 0
    2204:	f8 01       	movw	r30, r16
    2206:	10 82       	st	Z, r1
    2208:	80 e3       	ldi	r24, 0x30	; 48
    220a:	0e 94 96 07 	call	0xf2c	; 0xf2c <sysclk_enable_usb>
    220e:	e0 ec       	ldi	r30, 0xC0	; 192
    2210:	f4 e0       	ldi	r31, 0x04	; 4
    2212:	80 81       	ld	r24, Z
    2214:	80 64       	ori	r24, 0x40	; 64
    2216:	80 83       	st	Z, r24
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	f8 01       	movw	r30, r16
    221c:	80 83       	st	Z, r24
    221e:	8f b7       	in	r24, 0x3f	; 63
    2220:	8a 83       	std	Y+2, r24	; 0x02
    2222:	f8 94       	cli
    2224:	1a 81       	ldd	r17, Y+2	; 0x02
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	fc 01       	movw	r30, r24
    222c:	ee 0f       	add	r30, r30
    222e:	ff 1f       	adc	r31, r31
    2230:	ee 0f       	add	r30, r30
    2232:	ff 1f       	adc	r31, r31
    2234:	ee 0f       	add	r30, r30
    2236:	ff 1f       	adc	r31, r31
    2238:	e0 58       	subi	r30, 0x80	; 128
    223a:	fc 4d       	sbci	r31, 0xDC	; 220
    223c:	15 8a       	std	Z+21, r1	; 0x15
    223e:	01 96       	adiw	r24, 0x01	; 1
    2240:	8a 30       	cpi	r24, 0x0A	; 10
    2242:	91 05       	cpc	r25, r1
    2244:	91 f7       	brne	.-28     	; 0x222a <udd_enable+0x3a>
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	fc 01       	movw	r30, r24
    224c:	ee 0f       	add	r30, r30
    224e:	ff 1f       	adc	r31, r31
    2250:	ee 0f       	add	r30, r30
    2252:	ff 1f       	adc	r31, r31
    2254:	ee 0f       	add	r30, r30
    2256:	ff 1f       	adc	r31, r31
    2258:	e8 0f       	add	r30, r24
    225a:	f9 1f       	adc	r31, r25
    225c:	e7 5d       	subi	r30, 0xD7	; 215
    225e:	fc 4d       	sbci	r31, 0xDC	; 220
    2260:	20 81       	ld	r18, Z
    2262:	2e 7f       	andi	r18, 0xFE	; 254
    2264:	20 83       	st	Z, r18
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	88 30       	cpi	r24, 0x08	; 8
    226a:	91 05       	cpc	r25, r1
    226c:	71 f7       	brne	.-36     	; 0x224a <udd_enable+0x5a>
    226e:	6a e1       	ldi	r22, 0x1A	; 26
    2270:	70 e0       	ldi	r23, 0x00	; 0
    2272:	82 e0       	ldi	r24, 0x02	; 2
    2274:	61 dc       	rcall	.-1854   	; 0x1b38 <nvm_read_byte>
    2276:	8f 3f       	cpi	r24, 0xFF	; 255
    2278:	19 f0       	breq	.+6      	; 0x2280 <udd_enable+0x90>
    227a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    227e:	03 c0       	rjmp	.+6      	; 0x2286 <udd_enable+0x96>
    2280:	8f e1       	ldi	r24, 0x1F	; 31
    2282:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    2286:	6b e1       	ldi	r22, 0x1B	; 27
    2288:	70 e0       	ldi	r23, 0x00	; 0
    228a:	82 e0       	ldi	r24, 0x02	; 2
    228c:	55 dc       	rcall	.-1878   	; 0x1b38 <nvm_read_byte>
    228e:	8f 3f       	cpi	r24, 0xFF	; 255
    2290:	19 f0       	breq	.+6      	; 0x2298 <udd_enable+0xa8>
    2292:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    2296:	03 c0       	rjmp	.+6      	; 0x229e <udd_enable+0xae>
    2298:	8f e1       	ldi	r24, 0x1F	; 31
    229a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    229e:	e0 ec       	ldi	r30, 0xC0	; 192
    22a0:	f4 e0       	ldi	r31, 0x04	; 4
    22a2:	80 81       	ld	r24, Z
    22a4:	84 60       	ori	r24, 0x04	; 4
    22a6:	80 83       	st	Z, r24
    22a8:	80 81       	ld	r24, Z
    22aa:	80 68       	ori	r24, 0x80	; 128
    22ac:	80 83       	st	Z, r24
    22ae:	80 81       	ld	r24, Z
    22b0:	80 61       	ori	r24, 0x10	; 16
    22b2:	80 83       	st	Z, r24
    22b4:	84 e9       	ldi	r24, 0x94	; 148
    22b6:	93 e2       	ldi	r25, 0x23	; 35
    22b8:	86 83       	std	Z+6, r24	; 0x06
    22ba:	97 83       	std	Z+7, r25	; 0x07
    22bc:	80 81       	ld	r24, Z
    22be:	80 62       	ori	r24, 0x20	; 32
    22c0:	80 83       	st	Z, r24
    22c2:	8f ef       	ldi	r24, 0xFF	; 255
    22c4:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    22c8:	e8 ec       	ldi	r30, 0xC8	; 200
    22ca:	f4 e0       	ldi	r31, 0x04	; 4
    22cc:	80 81       	ld	r24, Z
    22ce:	81 60       	ori	r24, 0x01	; 1
    22d0:	80 83       	st	Z, r24
    22d2:	10 92 e8 23 	sts	0x23E8, r1	; 0x8023e8 <udd_b_idle>
    22d6:	80 91 f1 23 	lds	r24, 0x23F1	; 0x8023f1 <sleepmgr_locks+0x5>
    22da:	8f 3f       	cpi	r24, 0xFF	; 255
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <udd_enable+0xf0>
    22de:	ff cf       	rjmp	.-2      	; 0x22de <udd_enable+0xee>
    22e0:	8f b7       	in	r24, 0x3f	; 63
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	f8 94       	cli
    22e6:	99 81       	ldd	r25, Y+1	; 0x01
    22e8:	ec ee       	ldi	r30, 0xEC	; 236
    22ea:	f3 e2       	ldi	r31, 0x23	; 35
    22ec:	85 81       	ldd	r24, Z+5	; 0x05
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	85 83       	std	Z+5, r24	; 0x05
    22f2:	9f bf       	out	0x3f, r25	; 63
    22f4:	50 df       	rcall	.-352    	; 0x2196 <udd_attach>
    22f6:	1f bf       	out	0x3f, r17	; 63
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	df 91       	pop	r29
    22fe:	cf 91       	pop	r28
    2300:	1f 91       	pop	r17
    2302:	0f 91       	pop	r16
    2304:	08 95       	ret

00002306 <udd_set_address>:
    2306:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    230a:	08 95       	ret

0000230c <udd_getaddress>:
    230c:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2310:	08 95       	ret

00002312 <udd_set_setup_payload>:
    2312:	e2 ef       	ldi	r30, 0xF2	; 242
    2314:	f3 e2       	ldi	r31, 0x23	; 35
    2316:	80 87       	std	Z+8, r24	; 0x08
    2318:	91 87       	std	Z+9, r25	; 0x09
    231a:	62 87       	std	Z+10, r22	; 0x0a
    231c:	73 87       	std	Z+11, r23	; 0x0b
    231e:	08 95       	ret

00002320 <udd_ep_alloc>:
    2320:	28 2f       	mov	r18, r24
    2322:	2f 70       	andi	r18, 0x0F	; 15
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	22 0f       	add	r18, r18
    2328:	33 1f       	adc	r19, r19
    232a:	08 2e       	mov	r0, r24
    232c:	00 0c       	add	r0, r0
    232e:	99 0b       	sbc	r25, r25
    2330:	88 27       	eor	r24, r24
    2332:	99 0f       	add	r25, r25
    2334:	88 1f       	adc	r24, r24
    2336:	99 27       	eor	r25, r25
    2338:	82 0f       	add	r24, r18
    233a:	93 1f       	adc	r25, r19
    233c:	fc 01       	movw	r30, r24
    233e:	ee 0f       	add	r30, r30
    2340:	ff 1f       	adc	r31, r31
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	e0 58       	subi	r30, 0x80	; 128
    234c:	fc 4d       	sbci	r31, 0xDC	; 220
    234e:	25 89       	ldd	r18, Z+21	; 0x15
    2350:	20 7c       	andi	r18, 0xC0	; 192
    2352:	09 f0       	breq	.+2      	; 0x2356 <udd_ep_alloc+0x36>
    2354:	69 c0       	rjmp	.+210    	; 0x2428 <udd_ep_alloc+0x108>
    2356:	63 70       	andi	r22, 0x03	; 3
    2358:	61 30       	cpi	r22, 0x01	; 1
    235a:	11 f0       	breq	.+4      	; 0x2360 <udd_ep_alloc+0x40>
    235c:	18 f4       	brcc	.+6      	; 0x2364 <udd_ep_alloc+0x44>
    235e:	04 c0       	rjmp	.+8      	; 0x2368 <udd_ep_alloc+0x48>
    2360:	60 ec       	ldi	r22, 0xC0	; 192
    2362:	03 c0       	rjmp	.+6      	; 0x236a <udd_ep_alloc+0x4a>
    2364:	60 e8       	ldi	r22, 0x80	; 128
    2366:	01 c0       	rjmp	.+2      	; 0x236a <udd_ep_alloc+0x4a>
    2368:	60 e4       	ldi	r22, 0x40	; 64
    236a:	40 38       	cpi	r20, 0x80	; 128
    236c:	51 05       	cpc	r21, r1
    236e:	e9 f0       	breq	.+58     	; 0x23aa <udd_ep_alloc+0x8a>
    2370:	50 f4       	brcc	.+20     	; 0x2386 <udd_ep_alloc+0x66>
    2372:	40 32       	cpi	r20, 0x20	; 32
    2374:	51 05       	cpc	r21, r1
    2376:	a9 f0       	breq	.+42     	; 0x23a2 <udd_ep_alloc+0x82>
    2378:	40 34       	cpi	r20, 0x40	; 64
    237a:	51 05       	cpc	r21, r1
    237c:	a1 f0       	breq	.+40     	; 0x23a6 <udd_ep_alloc+0x86>
    237e:	40 31       	cpi	r20, 0x10	; 16
    2380:	51 05       	cpc	r21, r1
    2382:	d9 f4       	brne	.+54     	; 0x23ba <udd_ep_alloc+0x9a>
    2384:	0c c0       	rjmp	.+24     	; 0x239e <udd_ep_alloc+0x7e>
    2386:	41 15       	cp	r20, r1
    2388:	22 e0       	ldi	r18, 0x02	; 2
    238a:	52 07       	cpc	r21, r18
    238c:	91 f0       	breq	.+36     	; 0x23b2 <udd_ep_alloc+0x92>
    238e:	4f 3f       	cpi	r20, 0xFF	; 255
    2390:	23 e0       	ldi	r18, 0x03	; 3
    2392:	52 07       	cpc	r21, r18
    2394:	81 f0       	breq	.+32     	; 0x23b6 <udd_ep_alloc+0x96>
    2396:	41 15       	cp	r20, r1
    2398:	51 40       	sbci	r21, 0x01	; 1
    239a:	79 f4       	brne	.+30     	; 0x23ba <udd_ep_alloc+0x9a>
    239c:	08 c0       	rjmp	.+16     	; 0x23ae <udd_ep_alloc+0x8e>
    239e:	21 e0       	ldi	r18, 0x01	; 1
    23a0:	0d c0       	rjmp	.+26     	; 0x23bc <udd_ep_alloc+0x9c>
    23a2:	22 e0       	ldi	r18, 0x02	; 2
    23a4:	0b c0       	rjmp	.+22     	; 0x23bc <udd_ep_alloc+0x9c>
    23a6:	23 e0       	ldi	r18, 0x03	; 3
    23a8:	09 c0       	rjmp	.+18     	; 0x23bc <udd_ep_alloc+0x9c>
    23aa:	24 e0       	ldi	r18, 0x04	; 4
    23ac:	07 c0       	rjmp	.+14     	; 0x23bc <udd_ep_alloc+0x9c>
    23ae:	25 e0       	ldi	r18, 0x05	; 5
    23b0:	05 c0       	rjmp	.+10     	; 0x23bc <udd_ep_alloc+0x9c>
    23b2:	26 e0       	ldi	r18, 0x06	; 6
    23b4:	03 c0       	rjmp	.+6      	; 0x23bc <udd_ep_alloc+0x9c>
    23b6:	27 e0       	ldi	r18, 0x07	; 7
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <udd_ep_alloc+0x9c>
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	fc 01       	movw	r30, r24
    23be:	ee 0f       	add	r30, r30
    23c0:	ff 1f       	adc	r31, r31
    23c2:	ee 0f       	add	r30, r30
    23c4:	ff 1f       	adc	r31, r31
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	e0 58       	subi	r30, 0x80	; 128
    23cc:	fc 4d       	sbci	r31, 0xDC	; 220
    23ce:	15 8a       	std	Z+21, r1	; 0x15
    23d0:	36 e0       	ldi	r19, 0x06	; 6
    23d2:	34 8b       	std	Z+20, r19	; 0x14
    23d4:	26 2b       	or	r18, r22
    23d6:	25 8b       	std	Z+21, r18	; 0x15
    23d8:	fc 01       	movw	r30, r24
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	e0 58       	subi	r30, 0x80	; 128
    23e8:	fc 4d       	sbci	r31, 0xDC	; 220
    23ea:	25 89       	ldd	r18, Z+21	; 0x15
    23ec:	20 7c       	andi	r18, 0xC0	; 192
    23ee:	20 3c       	cpi	r18, 0xC0	; 192
    23f0:	69 f4       	brne	.+26     	; 0x240c <udd_ep_alloc+0xec>
    23f2:	fc 01       	movw	r30, r24
    23f4:	ee 0f       	add	r30, r30
    23f6:	ff 1f       	adc	r31, r31
    23f8:	ee 0f       	add	r30, r30
    23fa:	ff 1f       	adc	r31, r31
    23fc:	ee 0f       	add	r30, r30
    23fe:	ff 1f       	adc	r31, r31
    2400:	e0 58       	subi	r30, 0x80	; 128
    2402:	fc 4d       	sbci	r31, 0xDC	; 220
    2404:	25 89       	ldd	r18, Z+21	; 0x15
    2406:	27 70       	andi	r18, 0x07	; 7
    2408:	27 30       	cpi	r18, 0x07	; 7
    240a:	81 f0       	breq	.+32     	; 0x242c <udd_ep_alloc+0x10c>
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	fc 01       	movw	r30, r24
    241a:	e0 58       	subi	r30, 0x80	; 128
    241c:	fc 4d       	sbci	r31, 0xDC	; 220
    241e:	85 89       	ldd	r24, Z+21	; 0x15
    2420:	80 62       	ori	r24, 0x20	; 32
    2422:	85 8b       	std	Z+21, r24	; 0x15
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	08 95       	ret
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	08 95       	ret
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	08 95       	ret

00002430 <udd_ep_is_halted>:
    2430:	e8 2f       	mov	r30, r24
    2432:	ef 70       	andi	r30, 0x0F	; 15
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	08 2e       	mov	r0, r24
    243c:	00 0c       	add	r0, r0
    243e:	99 0b       	sbc	r25, r25
    2440:	88 27       	eor	r24, r24
    2442:	99 0f       	add	r25, r25
    2444:	88 1f       	adc	r24, r24
    2446:	99 27       	eor	r25, r25
    2448:	e8 0f       	add	r30, r24
    244a:	f9 1f       	adc	r31, r25
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	ee 0f       	add	r30, r30
    2452:	ff 1f       	adc	r31, r31
    2454:	ee 0f       	add	r30, r30
    2456:	ff 1f       	adc	r31, r31
    2458:	e0 58       	subi	r30, 0x80	; 128
    245a:	fc 4d       	sbci	r31, 0xDC	; 220
    245c:	85 89       	ldd	r24, Z+21	; 0x15
    245e:	82 fb       	bst	r24, 2
    2460:	88 27       	eor	r24, r24
    2462:	80 f9       	bld	r24, 0
    2464:	08 95       	ret

00002466 <udd_ep_clear_halt>:
    2466:	0f 93       	push	r16
    2468:	28 2f       	mov	r18, r24
    246a:	2f 70       	andi	r18, 0x0F	; 15
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	a9 01       	movw	r20, r18
    2470:	44 0f       	add	r20, r20
    2472:	55 1f       	adc	r21, r21
    2474:	28 2f       	mov	r18, r24
    2476:	08 2e       	mov	r0, r24
    2478:	00 0c       	add	r0, r0
    247a:	33 0b       	sbc	r19, r19
    247c:	22 27       	eor	r18, r18
    247e:	33 0f       	add	r19, r19
    2480:	22 1f       	adc	r18, r18
    2482:	33 27       	eor	r19, r19
    2484:	24 0f       	add	r18, r20
    2486:	35 1f       	adc	r19, r21
    2488:	a9 01       	movw	r20, r18
    248a:	44 0f       	add	r20, r20
    248c:	55 1f       	adc	r21, r21
    248e:	44 0f       	add	r20, r20
    2490:	55 1f       	adc	r21, r21
    2492:	44 0f       	add	r20, r20
    2494:	55 1f       	adc	r21, r21
    2496:	fa 01       	movw	r30, r20
    2498:	ec 56       	subi	r30, 0x6C	; 108
    249a:	fc 4d       	sbci	r31, 0xDC	; 220
    249c:	01 e0       	ldi	r16, 0x01	; 1
    249e:	06 93       	lac	Z, r16
    24a0:	fa 01       	movw	r30, r20
    24a2:	e0 58       	subi	r30, 0x80	; 128
    24a4:	fc 4d       	sbci	r31, 0xDC	; 220
    24a6:	95 89       	ldd	r25, Z+21	; 0x15
    24a8:	92 ff       	sbrs	r25, 2
    24aa:	11 c0       	rjmp	.+34     	; 0x24ce <udd_ep_clear_halt+0x68>
    24ac:	fa 01       	movw	r30, r20
    24ae:	e0 58       	subi	r30, 0x80	; 128
    24b0:	fc 4d       	sbci	r31, 0xDC	; 220
    24b2:	95 89       	ldd	r25, Z+21	; 0x15
    24b4:	9b 7f       	andi	r25, 0xFB	; 251
    24b6:	95 8b       	std	Z+21, r25	; 0x15
    24b8:	64 dc       	rcall	.-1848   	; 0x1d82 <udd_ep_get_job>
    24ba:	fc 01       	movw	r30, r24
    24bc:	80 81       	ld	r24, Z
    24be:	80 ff       	sbrs	r24, 0
    24c0:	06 c0       	rjmp	.+12     	; 0x24ce <udd_ep_clear_halt+0x68>
    24c2:	8e 7f       	andi	r24, 0xFE	; 254
    24c4:	80 83       	st	Z, r24
    24c6:	07 80       	ldd	r0, Z+7	; 0x07
    24c8:	f0 85       	ldd	r31, Z+8	; 0x08
    24ca:	e0 2d       	mov	r30, r0
    24cc:	19 95       	eicall
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	0f 91       	pop	r16
    24d2:	08 95       	ret

000024d4 <udd_ep_run>:
    24d4:	6f 92       	push	r6
    24d6:	7f 92       	push	r7
    24d8:	8f 92       	push	r8
    24da:	9f 92       	push	r9
    24dc:	af 92       	push	r10
    24de:	bf 92       	push	r11
    24e0:	cf 92       	push	r12
    24e2:	df 92       	push	r13
    24e4:	ef 92       	push	r14
    24e6:	ff 92       	push	r15
    24e8:	0f 93       	push	r16
    24ea:	1f 93       	push	r17
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	1f 92       	push	r1
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	78 2e       	mov	r7, r24
    24f8:	66 2e       	mov	r6, r22
    24fa:	4a 01       	movw	r8, r20
    24fc:	59 01       	movw	r10, r18
    24fe:	41 dc       	rcall	.-1918   	; 0x1d82 <udd_ep_get_job>
    2500:	6c 01       	movw	r12, r24
    2502:	27 2d       	mov	r18, r7
    2504:	87 2d       	mov	r24, r7
    2506:	8f 70       	andi	r24, 0x0F	; 15
    2508:	e8 2e       	mov	r14, r24
    250a:	f1 2c       	mov	r15, r1
    250c:	c7 01       	movw	r24, r14
    250e:	88 0f       	add	r24, r24
    2510:	99 1f       	adc	r25, r25
    2512:	e7 2c       	mov	r14, r7
    2514:	07 2c       	mov	r0, r7
    2516:	00 0c       	add	r0, r0
    2518:	ff 08       	sbc	r15, r15
    251a:	ee 24       	eor	r14, r14
    251c:	ff 0c       	add	r15, r15
    251e:	ee 1c       	adc	r14, r14
    2520:	ff 24       	eor	r15, r15
    2522:	e8 0e       	add	r14, r24
    2524:	f9 1e       	adc	r15, r25
    2526:	f7 01       	movw	r30, r14
    2528:	ee 0f       	add	r30, r30
    252a:	ff 1f       	adc	r31, r31
    252c:	ee 0f       	add	r30, r30
    252e:	ff 1f       	adc	r31, r31
    2530:	ee 0f       	add	r30, r30
    2532:	ff 1f       	adc	r31, r31
    2534:	e0 58       	subi	r30, 0x80	; 128
    2536:	fc 4d       	sbci	r31, 0xDC	; 220
    2538:	85 89       	ldd	r24, Z+21	; 0x15
    253a:	80 7c       	andi	r24, 0xC0	; 192
    253c:	09 f4       	brne	.+2      	; 0x2540 <udd_ep_run+0x6c>
    253e:	81 c0       	rjmp	.+258    	; 0x2642 <udd_ep_run+0x16e>
    2540:	f7 01       	movw	r30, r14
    2542:	ee 0f       	add	r30, r30
    2544:	ff 1f       	adc	r31, r31
    2546:	ee 0f       	add	r30, r30
    2548:	ff 1f       	adc	r31, r31
    254a:	ee 0f       	add	r30, r30
    254c:	ff 1f       	adc	r31, r31
    254e:	e0 58       	subi	r30, 0x80	; 128
    2550:	fc 4d       	sbci	r31, 0xDC	; 220
    2552:	85 89       	ldd	r24, Z+21	; 0x15
    2554:	80 7c       	andi	r24, 0xC0	; 192
    2556:	80 3c       	cpi	r24, 0xC0	; 192
    2558:	61 f0       	breq	.+24     	; 0x2572 <udd_ep_run+0x9e>
    255a:	f7 01       	movw	r30, r14
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	ee 0f       	add	r30, r30
    2562:	ff 1f       	adc	r31, r31
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	e0 58       	subi	r30, 0x80	; 128
    256a:	fc 4d       	sbci	r31, 0xDC	; 220
    256c:	85 89       	ldd	r24, Z+21	; 0x15
    256e:	82 fd       	sbrc	r24, 2
    2570:	6a c0       	rjmp	.+212    	; 0x2646 <udd_ep_run+0x172>
    2572:	8f b7       	in	r24, 0x3f	; 63
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	f8 94       	cli
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	f6 01       	movw	r30, r12
    257c:	90 81       	ld	r25, Z
    257e:	90 ff       	sbrs	r25, 0
    2580:	03 c0       	rjmp	.+6      	; 0x2588 <udd_ep_run+0xb4>
    2582:	8f bf       	out	0x3f, r24	; 63
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	60 c0       	rjmp	.+192    	; 0x2648 <udd_ep_run+0x174>
    2588:	f6 01       	movw	r30, r12
    258a:	90 81       	ld	r25, Z
    258c:	91 60       	ori	r25, 0x01	; 1
    258e:	90 83       	st	Z, r25
    2590:	8f bf       	out	0x3f, r24	; 63
    2592:	81 82       	std	Z+1, r8	; 0x01
    2594:	92 82       	std	Z+2, r9	; 0x02
    2596:	a3 82       	std	Z+3, r10	; 0x03
    2598:	b4 82       	std	Z+4, r11	; 0x04
    259a:	15 82       	std	Z+5, r1	; 0x05
    259c:	16 82       	std	Z+6, r1	; 0x06
    259e:	07 83       	std	Z+7, r16	; 0x07
    25a0:	10 87       	std	Z+8, r17	; 0x08
    25a2:	61 10       	cpse	r6, r1
    25a4:	06 c0       	rjmp	.+12     	; 0x25b2 <udd_ep_run+0xde>
    25a6:	91 e0       	ldi	r25, 0x01	; 1
    25a8:	a1 14       	cp	r10, r1
    25aa:	b1 04       	cpc	r11, r1
    25ac:	19 f0       	breq	.+6      	; 0x25b4 <udd_ep_run+0xe0>
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	01 c0       	rjmp	.+2      	; 0x25b4 <udd_ep_run+0xe0>
    25b2:	91 e0       	ldi	r25, 0x01	; 1
    25b4:	f6 01       	movw	r30, r12
    25b6:	80 81       	ld	r24, Z
    25b8:	90 fb       	bst	r25, 0
    25ba:	81 f9       	bld	r24, 1
    25bc:	8b 7f       	andi	r24, 0xFB	; 251
    25be:	80 83       	st	Z, r24
    25c0:	22 23       	and	r18, r18
    25c2:	64 f4       	brge	.+24     	; 0x25dc <udd_ep_run+0x108>
    25c4:	f7 01       	movw	r30, r14
    25c6:	ee 0f       	add	r30, r30
    25c8:	ff 1f       	adc	r31, r31
    25ca:	ee 0f       	add	r30, r30
    25cc:	ff 1f       	adc	r31, r31
    25ce:	ee 0f       	add	r30, r30
    25d0:	ff 1f       	adc	r31, r31
    25d2:	e0 58       	subi	r30, 0x80	; 128
    25d4:	fc 4d       	sbci	r31, 0xDC	; 220
    25d6:	12 8e       	std	Z+26, r1	; 0x1a
    25d8:	13 8e       	std	Z+27, r1	; 0x1b
    25da:	2f c0       	rjmp	.+94     	; 0x263a <udd_ep_run+0x166>
    25dc:	f7 01       	movw	r30, r14
    25de:	ee 0f       	add	r30, r30
    25e0:	ff 1f       	adc	r31, r31
    25e2:	ee 0f       	add	r30, r30
    25e4:	ff 1f       	adc	r31, r31
    25e6:	ee 0f       	add	r30, r30
    25e8:	ff 1f       	adc	r31, r31
    25ea:	e0 58       	subi	r30, 0x80	; 128
    25ec:	fc 4d       	sbci	r31, 0xDC	; 220
    25ee:	85 89       	ldd	r24, Z+21	; 0x15
    25f0:	80 7c       	andi	r24, 0xC0	; 192
    25f2:	80 3c       	cpi	r24, 0xC0	; 192
    25f4:	a9 f4       	brne	.+42     	; 0x2620 <udd_ep_run+0x14c>
    25f6:	c7 01       	movw	r24, r14
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	88 0f       	add	r24, r24
    2602:	99 1f       	adc	r25, r25
    2604:	8c 56       	subi	r24, 0x6C	; 108
    2606:	9c 4d       	sbci	r25, 0xDC	; 220
    2608:	94 db       	rcall	.-2264   	; 0x1d32 <udd_ep_get_size>
    260a:	bc 01       	movw	r22, r24
    260c:	c5 01       	movw	r24, r10
    260e:	f0 d2       	rcall	.+1504   	; 0x2bf0 <__udivmodhi4>
    2610:	89 2b       	or	r24, r25
    2612:	31 f0       	breq	.+12     	; 0x2620 <udd_ep_run+0x14c>
    2614:	f6 01       	movw	r30, r12
    2616:	80 81       	ld	r24, Z
    2618:	8e 7f       	andi	r24, 0xFE	; 254
    261a:	80 83       	st	Z, r24
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	14 c0       	rjmp	.+40     	; 0x2648 <udd_ep_run+0x174>
    2620:	f7 01       	movw	r30, r14
    2622:	ee 0f       	add	r30, r30
    2624:	ff 1f       	adc	r31, r31
    2626:	ee 0f       	add	r30, r30
    2628:	ff 1f       	adc	r31, r31
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	e0 58       	subi	r30, 0x80	; 128
    2630:	fc 4d       	sbci	r31, 0xDC	; 220
    2632:	16 8a       	std	Z+22, r1	; 0x16
    2634:	17 8a       	std	Z+23, r1	; 0x17
    2636:	12 8e       	std	Z+26, r1	; 0x1a
    2638:	13 8e       	std	Z+27, r1	; 0x1b
    263a:	87 2d       	mov	r24, r7
    263c:	2e dc       	rcall	.-1956   	; 0x1e9a <udd_ep_trans_complet>
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	03 c0       	rjmp	.+6      	; 0x2648 <udd_ep_run+0x174>
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	01 c0       	rjmp	.+2      	; 0x2648 <udd_ep_run+0x174>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	0f 90       	pop	r0
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	1f 91       	pop	r17
    2650:	0f 91       	pop	r16
    2652:	ff 90       	pop	r15
    2654:	ef 90       	pop	r14
    2656:	df 90       	pop	r13
    2658:	cf 90       	pop	r12
    265a:	bf 90       	pop	r11
    265c:	af 90       	pop	r10
    265e:	9f 90       	pop	r9
    2660:	8f 90       	pop	r8
    2662:	7f 90       	pop	r7
    2664:	6f 90       	pop	r6
    2666:	08 95       	ret

00002668 <udd_ep_abort>:
    2668:	ff 92       	push	r15
    266a:	0f 93       	push	r16
    266c:	1f 93       	push	r17
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	18 2f       	mov	r17, r24
    2674:	c8 2f       	mov	r28, r24
    2676:	cf 70       	andi	r28, 0x0F	; 15
    2678:	d0 e0       	ldi	r29, 0x00	; 0
    267a:	ce 01       	movw	r24, r28
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	c1 2f       	mov	r28, r17
    2682:	01 2e       	mov	r0, r17
    2684:	00 0c       	add	r0, r0
    2686:	dd 0b       	sbc	r29, r29
    2688:	cc 27       	eor	r28, r28
    268a:	dd 0f       	add	r29, r29
    268c:	cc 1f       	adc	r28, r28
    268e:	dd 27       	eor	r29, r29
    2690:	c8 0f       	add	r28, r24
    2692:	d9 1f       	adc	r29, r25
    2694:	81 2f       	mov	r24, r17
    2696:	75 db       	rcall	.-2326   	; 0x1d82 <udd_ep_get_job>
    2698:	dc 01       	movw	r26, r24
    269a:	fe 01       	movw	r30, r28
    269c:	ee 0f       	add	r30, r30
    269e:	ff 1f       	adc	r31, r31
    26a0:	ee 0f       	add	r30, r30
    26a2:	ff 1f       	adc	r31, r31
    26a4:	ee 0f       	add	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	ec 56       	subi	r30, 0x6C	; 108
    26aa:	fc 4d       	sbci	r31, 0xDC	; 220
    26ac:	02 e0       	ldi	r16, 0x02	; 2
    26ae:	05 93       	las	Z, r16
    26b0:	8c 91       	ld	r24, X
    26b2:	80 ff       	sbrs	r24, 0
    26b4:	22 c0       	rjmp	.+68     	; 0x26fa <udd_ep_abort+0x92>
    26b6:	8e 7f       	andi	r24, 0xFE	; 254
    26b8:	8c 93       	st	X, r24
    26ba:	17 96       	adiw	r26, 0x07	; 7
    26bc:	ed 91       	ld	r30, X+
    26be:	fc 91       	ld	r31, X
    26c0:	18 97       	sbiw	r26, 0x08	; 8
    26c2:	30 97       	sbiw	r30, 0x00	; 0
    26c4:	d1 f0       	breq	.+52     	; 0x26fa <udd_ep_abort+0x92>
    26c6:	11 23       	and	r17, r17
    26c8:	5c f4       	brge	.+22     	; 0x26e0 <udd_ep_abort+0x78>
    26ca:	cc 0f       	add	r28, r28
    26cc:	dd 1f       	adc	r29, r29
    26ce:	cc 0f       	add	r28, r28
    26d0:	dd 1f       	adc	r29, r29
    26d2:	cc 0f       	add	r28, r28
    26d4:	dd 1f       	adc	r29, r29
    26d6:	c0 58       	subi	r28, 0x80	; 128
    26d8:	dc 4d       	sbci	r29, 0xDC	; 220
    26da:	6a 8d       	ldd	r22, Y+26	; 0x1a
    26dc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    26de:	0a c0       	rjmp	.+20     	; 0x26f4 <udd_ep_abort+0x8c>
    26e0:	cc 0f       	add	r28, r28
    26e2:	dd 1f       	adc	r29, r29
    26e4:	cc 0f       	add	r28, r28
    26e6:	dd 1f       	adc	r29, r29
    26e8:	cc 0f       	add	r28, r28
    26ea:	dd 1f       	adc	r29, r29
    26ec:	c0 58       	subi	r28, 0x80	; 128
    26ee:	dc 4d       	sbci	r29, 0xDC	; 220
    26f0:	6e 89       	ldd	r22, Y+22	; 0x16
    26f2:	7f 89       	ldd	r23, Y+23	; 0x17
    26f4:	41 2f       	mov	r20, r17
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	19 95       	eicall
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	ff 90       	pop	r15
    2704:	08 95       	ret

00002706 <udd_ep_free>:
    2706:	cf 93       	push	r28
    2708:	c8 2f       	mov	r28, r24
    270a:	ae df       	rcall	.-164    	; 0x2668 <udd_ep_abort>
    270c:	ec 2f       	mov	r30, r28
    270e:	ef 70       	andi	r30, 0x0F	; 15
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	8c 2f       	mov	r24, r28
    2718:	cc 0f       	add	r28, r28
    271a:	99 0b       	sbc	r25, r25
    271c:	88 27       	eor	r24, r24
    271e:	99 0f       	add	r25, r25
    2720:	88 1f       	adc	r24, r24
    2722:	99 27       	eor	r25, r25
    2724:	e8 0f       	add	r30, r24
    2726:	f9 1f       	adc	r31, r25
    2728:	ee 0f       	add	r30, r30
    272a:	ff 1f       	adc	r31, r31
    272c:	ee 0f       	add	r30, r30
    272e:	ff 1f       	adc	r31, r31
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	e0 58       	subi	r30, 0x80	; 128
    2736:	fc 4d       	sbci	r31, 0xDC	; 220
    2738:	15 8a       	std	Z+21, r1	; 0x15
    273a:	cf 91       	pop	r28
    273c:	08 95       	ret

0000273e <udd_ep_set_halt>:
    273e:	e8 2f       	mov	r30, r24
    2740:	ef 70       	andi	r30, 0x0F	; 15
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	ee 0f       	add	r30, r30
    2746:	ff 1f       	adc	r31, r31
    2748:	28 2f       	mov	r18, r24
    274a:	08 2e       	mov	r0, r24
    274c:	00 0c       	add	r0, r0
    274e:	33 0b       	sbc	r19, r19
    2750:	22 27       	eor	r18, r18
    2752:	33 0f       	add	r19, r19
    2754:	22 1f       	adc	r18, r18
    2756:	33 27       	eor	r19, r19
    2758:	e2 0f       	add	r30, r18
    275a:	f3 1f       	adc	r31, r19
    275c:	ee 0f       	add	r30, r30
    275e:	ff 1f       	adc	r31, r31
    2760:	ee 0f       	add	r30, r30
    2762:	ff 1f       	adc	r31, r31
    2764:	ee 0f       	add	r30, r30
    2766:	ff 1f       	adc	r31, r31
    2768:	e0 58       	subi	r30, 0x80	; 128
    276a:	fc 4d       	sbci	r31, 0xDC	; 220
    276c:	95 89       	ldd	r25, Z+21	; 0x15
    276e:	94 60       	ori	r25, 0x04	; 4
    2770:	95 8b       	std	Z+21, r25	; 0x15
    2772:	7a df       	rcall	.-268    	; 0x2668 <udd_ep_abort>
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	08 95       	ret

00002778 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2778:	1f 92       	push	r1
    277a:	0f 92       	push	r0
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	0f 92       	push	r0
    2780:	11 24       	eor	r1, r1
    2782:	0b b6       	in	r0, 0x3b	; 59
    2784:	0f 92       	push	r0
    2786:	0f 93       	push	r16
    2788:	2f 93       	push	r18
    278a:	3f 93       	push	r19
    278c:	4f 93       	push	r20
    278e:	5f 93       	push	r21
    2790:	6f 93       	push	r22
    2792:	7f 93       	push	r23
    2794:	8f 93       	push	r24
    2796:	9f 93       	push	r25
    2798:	af 93       	push	r26
    279a:	bf 93       	push	r27
    279c:	cf 93       	push	r28
    279e:	ef 93       	push	r30
    27a0:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    27a2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    27a6:	88 23       	and	r24, r24
    27a8:	3c f4       	brge	.+14     	; 0x27b8 <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    27aa:	80 e8       	ldi	r24, 0x80	; 128
    27ac:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    27b0:	0e 94 c7 0a 	call	0x158e	; 0x158e <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    27b4:	ee d1       	rcall	.+988    	; 0x2b92 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    27b6:	89 c0       	rjmp	.+274    	; 0x28ca <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    27b8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    27bc:	82 ff       	sbrs	r24, 2
    27be:	20 c0       	rjmp	.+64     	; 0x2800 <__vector_125+0x88>
		udd_ack_underflow_event();
    27c0:	84 e0       	ldi	r24, 0x04	; 4
    27c2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    27c6:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_sram+0x1c>
    27ca:	86 ff       	sbrs	r24, 6
    27cc:	7e c0       	rjmp	.+252    	; 0x28ca <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    27ce:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    27d2:	81 fd       	sbrc	r24, 1
    27d4:	7a c0       	rjmp	.+244    	; 0x28ca <__vector_125+0x152>
    27d6:	f0 da       	rcall	.-2592   	; 0x1db8 <udd_ctrl_interrupt_tc_setup>
    27d8:	81 11       	cpse	r24, r1
    27da:	77 c0       	rjmp	.+238    	; 0x28ca <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    27dc:	80 91 7d 23 	lds	r24, 0x237D	; 0x80237d <udd_ep_control_state>
    27e0:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    27e2:	11 f4       	brne	.+4      	; 0x27e8 <__vector_125+0x70>
    27e4:	24 da       	rcall	.-3000   	; 0x1c2e <udd_ctrl_send_zlp_in>
    27e6:	71 c0       	rjmp	.+226    	; 0x28ca <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    27e8:	84 30       	cpi	r24, 0x04	; 4
    27ea:	09 f0       	breq	.+2      	; 0x27ee <__vector_125+0x76>
    27ec:	6e c0       	rjmp	.+220    	; 0x28ca <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    27ee:	ed e9       	ldi	r30, 0x9D	; 157
    27f0:	f3 e2       	ldi	r31, 0x23	; 35
    27f2:	04 e0       	ldi	r16, 0x04	; 4
    27f4:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    27f6:	e5 e9       	ldi	r30, 0x95	; 149
    27f8:	f3 e2       	ldi	r31, 0x23	; 35
    27fa:	04 e0       	ldi	r16, 0x04	; 4
    27fc:	05 93       	las	Z, r16
    27fe:	65 c0       	rjmp	.+202    	; 0x28ca <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2800:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2804:	81 ff       	sbrs	r24, 1
    2806:	5c c0       	rjmp	.+184    	; 0x28c0 <__vector_125+0x148>
		udd_ack_overflow_event();
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    280e:	80 91 94 23 	lds	r24, 0x2394	; 0x802394 <udd_sram+0x14>
    2812:	86 ff       	sbrs	r24, 6
    2814:	5a c0       	rjmp	.+180    	; 0x28ca <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2816:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    281a:	81 fd       	sbrc	r24, 1
    281c:	56 c0       	rjmp	.+172    	; 0x28ca <__vector_125+0x152>
    281e:	cc da       	rcall	.-2664   	; 0x1db8 <udd_ctrl_interrupt_tc_setup>
    2820:	81 11       	cpse	r24, r1
    2822:	53 c0       	rjmp	.+166    	; 0x28ca <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2824:	80 91 7d 23 	lds	r24, 0x237D	; 0x80237d <udd_ep_control_state>
    2828:	82 30       	cpi	r24, 0x02	; 2
    282a:	41 f4       	brne	.+16     	; 0x283c <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    282c:	84 e0       	ldi	r24, 0x04	; 4
    282e:	80 93 7d 23 	sts	0x237D, r24	; 0x80237d <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2832:	e4 e9       	ldi	r30, 0x94	; 148
    2834:	f3 e2       	ldi	r31, 0x23	; 35
    2836:	02 e0       	ldi	r16, 0x02	; 2
    2838:	06 93       	lac	Z, r16
    283a:	47 c0       	rjmp	.+142    	; 0x28ca <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    283c:	83 30       	cpi	r24, 0x03	; 3
    283e:	09 f0       	breq	.+2      	; 0x2842 <__vector_125+0xca>
    2840:	44 c0       	rjmp	.+136    	; 0x28ca <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2842:	ed e9       	ldi	r30, 0x9D	; 157
    2844:	f3 e2       	ldi	r31, 0x23	; 35
    2846:	04 e0       	ldi	r16, 0x04	; 4
    2848:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    284a:	e5 e9       	ldi	r30, 0x95	; 149
    284c:	f3 e2       	ldi	r31, 0x23	; 35
    284e:	04 e0       	ldi	r16, 0x04	; 4
    2850:	05 93       	las	Z, r16
    2852:	3b c0       	rjmp	.+118    	; 0x28ca <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2854:	80 e1       	ldi	r24, 0x10	; 16
    2856:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    285a:	c1 e0       	ldi	r28, 0x01	; 1
    285c:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    285e:	04 df       	rcall	.-504    	; 0x2668 <udd_ep_abort>
    2860:	8c 2f       	mov	r24, r28
    2862:	80 68       	ori	r24, 0x80	; 128
    2864:	01 df       	rcall	.-510    	; 0x2668 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    2866:	cf 5f       	subi	r28, 0xFF	; 255
    2868:	c5 30       	cpi	r28, 0x05	; 5
    286a:	c1 f7       	brne	.-16     	; 0x285c <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    286c:	0e 94 9d 0a 	call	0x153a	; 0x153a <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2870:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2874:	e0 e8       	ldi	r30, 0x80	; 128
    2876:	f3 e2       	ldi	r31, 0x23	; 35
    2878:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    287a:	96 e0       	ldi	r25, 0x06	; 6
    287c:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    287e:	80 e4       	ldi	r24, 0x40	; 64
    2880:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2882:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2884:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2886:	85 8f       	std	Z+29, r24	; 0x1d
    2888:	81 e7       	ldi	r24, 0x71	; 113
    288a:	93 e2       	ldi	r25, 0x23	; 35
    288c:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    288e:	91 8f       	std	Z+25, r25	; 0x19
    2890:	9b d9       	rcall	.-3274   	; 0x1bc8 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2892:	1b c0       	rjmp	.+54     	; 0x28ca <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    2894:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    2898:	86 ff       	sbrs	r24, 6
    289a:	07 c0       	rjmp	.+14     	; 0x28aa <__vector_125+0x132>
    289c:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    289e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    28a2:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    28a4:	59 d9       	rcall	.-3406   	; 0x1b58 <udd_sleep_mode>
    28a6:	73 d1       	rcall	.+742    	; 0x2b8e <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    28a8:	10 c0       	rjmp	.+32     	; 0x28ca <__vector_125+0x152>
    28aa:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    28ae:	85 ff       	sbrs	r24, 5
    28b0:	0c c0       	rjmp	.+24     	; 0x28ca <__vector_125+0x152>
    28b2:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    28b4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    28b8:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    28ba:	4e d9       	rcall	.-3428   	; 0x1b58 <udd_sleep_mode>
    28bc:	69 d1       	rcall	.+722    	; 0x2b90 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    28be:	05 c0       	rjmp	.+10     	; 0x28ca <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    28c0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    28c4:	84 fd       	sbrc	r24, 4
    28c6:	c6 cf       	rjmp	.-116    	; 0x2854 <__vector_125+0xdc>
    28c8:	e5 cf       	rjmp	.-54     	; 0x2894 <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    28ca:	ff 91       	pop	r31
    28cc:	ef 91       	pop	r30
    28ce:	cf 91       	pop	r28
    28d0:	bf 91       	pop	r27
    28d2:	af 91       	pop	r26
    28d4:	9f 91       	pop	r25
    28d6:	8f 91       	pop	r24
    28d8:	7f 91       	pop	r23
    28da:	6f 91       	pop	r22
    28dc:	5f 91       	pop	r21
    28de:	4f 91       	pop	r20
    28e0:	3f 91       	pop	r19
    28e2:	2f 91       	pop	r18
    28e4:	0f 91       	pop	r16
    28e6:	0f 90       	pop	r0
    28e8:	0b be       	out	0x3b, r0	; 59
    28ea:	0f 90       	pop	r0
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	0f 90       	pop	r0
    28f0:	1f 90       	pop	r1
    28f2:	18 95       	reti

000028f4 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    28f4:	1f 92       	push	r1
    28f6:	0f 92       	push	r0
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	0f 92       	push	r0
    28fc:	11 24       	eor	r1, r1
    28fe:	0b b6       	in	r0, 0x3b	; 59
    2900:	0f 92       	push	r0
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	2f 93       	push	r18
    2908:	3f 93       	push	r19
    290a:	4f 93       	push	r20
    290c:	5f 93       	push	r21
    290e:	6f 93       	push	r22
    2910:	7f 93       	push	r23
    2912:	8f 93       	push	r24
    2914:	9f 93       	push	r25
    2916:	af 93       	push	r26
    2918:	bf 93       	push	r27
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	ef 93       	push	r30
    2920:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2922:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2926:	81 fd       	sbrc	r24, 1
    2928:	03 c0       	rjmp	.+6      	; 0x2930 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    292a:	46 da       	rcall	.-2932   	; 0x1db8 <udd_ctrl_interrupt_tc_setup>
    292c:	81 11       	cpse	r24, r1
    292e:	c3 c0       	rjmp	.+390    	; 0x2ab6 <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2930:	82 e0       	ldi	r24, 0x02	; 2
    2932:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2936:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    293a:	81 95       	neg	r24
    293c:	88 0f       	add	r24, r24
    293e:	e4 e9       	ldi	r30, 0x94	; 148
    2940:	f3 e2       	ldi	r31, 0x23	; 35
    2942:	e8 1b       	sub	r30, r24
    2944:	f1 09       	sbc	r31, r1
    2946:	20 81       	ld	r18, Z
    2948:	31 81       	ldd	r19, Z+1	; 0x01
    294a:	24 59       	subi	r18, 0x94	; 148
    294c:	33 42       	sbci	r19, 0x23	; 35
    294e:	36 95       	lsr	r19
    2950:	27 95       	ror	r18
    2952:	36 95       	lsr	r19
    2954:	27 95       	ror	r18
    2956:	36 95       	lsr	r19
    2958:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    295a:	82 2f       	mov	r24, r18
    295c:	86 95       	lsr	r24
    295e:	20 fd       	sbrc	r18, 0
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <__vector_126+0x72>
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	01 c0       	rjmp	.+2      	; 0x2968 <__vector_126+0x74>
    2966:	90 e8       	ldi	r25, 0x80	; 128
    2968:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    296a:	e8 2f       	mov	r30, r24
    296c:	ef 70       	andi	r30, 0x0F	; 15
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	28 2f       	mov	r18, r24
    2976:	08 2e       	mov	r0, r24
    2978:	00 0c       	add	r0, r0
    297a:	33 0b       	sbc	r19, r19
    297c:	22 27       	eor	r18, r18
    297e:	33 0f       	add	r19, r19
    2980:	22 1f       	adc	r18, r18
    2982:	33 27       	eor	r19, r19
    2984:	e2 0f       	add	r30, r18
    2986:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2988:	df 01       	movw	r26, r30
    298a:	aa 0f       	add	r26, r26
    298c:	bb 1f       	adc	r27, r27
    298e:	aa 0f       	add	r26, r26
    2990:	bb 1f       	adc	r27, r27
    2992:	aa 0f       	add	r26, r26
    2994:	bb 1f       	adc	r27, r27
    2996:	a0 58       	subi	r26, 0x80	; 128
    2998:	bc 4d       	sbci	r27, 0xDC	; 220
    299a:	54 96       	adiw	r26, 0x14	; 20
    299c:	9c 91       	ld	r25, X
    299e:	95 ff       	sbrs	r25, 5
    29a0:	8a c0       	rjmp	.+276    	; 0x2ab6 <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    29a2:	ee 0f       	add	r30, r30
    29a4:	ff 1f       	adc	r31, r31
    29a6:	ee 0f       	add	r30, r30
    29a8:	ff 1f       	adc	r31, r31
    29aa:	ee 0f       	add	r30, r30
    29ac:	ff 1f       	adc	r31, r31
    29ae:	ec 56       	subi	r30, 0x6C	; 108
    29b0:	fc 4d       	sbci	r31, 0xDC	; 220
    29b2:	00 e2       	ldi	r16, 0x20	; 32
    29b4:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    29b6:	81 11       	cpse	r24, r1
    29b8:	79 c0       	rjmp	.+242    	; 0x2aac <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    29ba:	80 91 7d 23 	lds	r24, 0x237D	; 0x80237d <udd_ep_control_state>
    29be:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    29c0:	19 f4       	brne	.+6      	; 0x29c8 <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    29c2:	43 d9       	rcall	.-3450   	; 0x1c4a <udd_ctrl_endofrequest>
    29c4:	01 d9       	rcall	.-3582   	; 0x1bc8 <udd_ctrl_init>
    29c6:	77 c0       	rjmp	.+238    	; 0x2ab6 <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    29c8:	00 91 96 23 	lds	r16, 0x2396	; 0x802396 <udd_sram+0x16>
    29cc:	10 91 97 23 	lds	r17, 0x2397	; 0x802397 <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    29d0:	80 91 fc 23 	lds	r24, 0x23FC	; 0x8023fc <udd_g_ctrlreq+0xa>
    29d4:	90 91 fd 23 	lds	r25, 0x23FD	; 0x8023fd <udd_g_ctrlreq+0xb>
    29d8:	c0 91 79 23 	lds	r28, 0x2379	; 0x802379 <udd_ctrl_payload_nb_trans>
    29dc:	d0 91 7a 23 	lds	r29, 0x237A	; 0x80237a <udd_ctrl_payload_nb_trans+0x1>
    29e0:	98 01       	movw	r18, r16
    29e2:	2c 0f       	add	r18, r28
    29e4:	3d 1f       	adc	r19, r29
    29e6:	82 17       	cp	r24, r18
    29e8:	93 07       	cpc	r25, r19
    29ea:	18 f4       	brcc	.+6      	; 0x29f2 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    29ec:	8c 01       	movw	r16, r24
    29ee:	0c 1b       	sub	r16, r28
    29f0:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    29f2:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udd_g_ctrlreq+0x8>
    29f6:	90 91 fb 23 	lds	r25, 0x23FB	; 0x8023fb <udd_g_ctrlreq+0x9>
    29fa:	a8 01       	movw	r20, r16
    29fc:	61 e7       	ldi	r22, 0x71	; 113
    29fe:	73 e2       	ldi	r23, 0x23	; 35
    2a00:	8c 0f       	add	r24, r28
    2a02:	9d 1f       	adc	r25, r29
    2a04:	11 d1       	rcall	.+546    	; 0x2c28 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2a06:	c0 0f       	add	r28, r16
    2a08:	d1 1f       	adc	r29, r17
    2a0a:	c0 93 79 23 	sts	0x2379, r28	; 0x802379 <udd_ctrl_payload_nb_trans>
    2a0e:	d0 93 7a 23 	sts	0x237A, r29	; 0x80237a <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2a12:	08 30       	cpi	r16, 0x08	; 8
    2a14:	11 05       	cpc	r17, r1
    2a16:	69 f4       	brne	.+26     	; 0x2a32 <__vector_126+0x13e>
    2a18:	80 91 7b 23 	lds	r24, 0x237B	; 0x80237b <udd_ctrl_prev_payload_nb_trans>
    2a1c:	90 91 7c 23 	lds	r25, 0x237C	; 0x80237c <udd_ctrl_prev_payload_nb_trans+0x1>
    2a20:	8c 0f       	add	r24, r28
    2a22:	9d 1f       	adc	r25, r29
    2a24:	20 91 f8 23 	lds	r18, 0x23F8	; 0x8023f8 <udd_g_ctrlreq+0x6>
    2a28:	30 91 f9 23 	lds	r19, 0x23F9	; 0x8023f9 <udd_g_ctrlreq+0x7>
    2a2c:	82 17       	cp	r24, r18
    2a2e:	93 07       	cpc	r25, r19
    2a30:	80 f0       	brcs	.+32     	; 0x2a52 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2a32:	e2 ef       	ldi	r30, 0xF2	; 242
    2a34:	f3 e2       	ldi	r31, 0x23	; 35
    2a36:	c2 87       	std	Z+10, r28	; 0x0a
    2a38:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2a3a:	06 84       	ldd	r0, Z+14	; 0x0e
    2a3c:	f7 85       	ldd	r31, Z+15	; 0x0f
    2a3e:	e0 2d       	mov	r30, r0
    2a40:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2a42:	29 f0       	breq	.+10     	; 0x2a4e <__vector_126+0x15a>
    2a44:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2a46:	81 11       	cpse	r24, r1
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <__vector_126+0x15a>
    2a4a:	e3 d8       	rcall	.-3642   	; 0x1c12 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2a4c:	34 c0       	rjmp	.+104    	; 0x2ab6 <__vector_126+0x1c2>
    2a4e:	ef d8       	rcall	.-3618   	; 0x1c2e <udd_ctrl_send_zlp_in>
    2a50:	32 c0       	rjmp	.+100    	; 0x2ab6 <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2a52:	80 91 fc 23 	lds	r24, 0x23FC	; 0x8023fc <udd_g_ctrlreq+0xa>
    2a56:	90 91 fd 23 	lds	r25, 0x23FD	; 0x8023fd <udd_g_ctrlreq+0xb>
    2a5a:	c8 17       	cp	r28, r24
    2a5c:	d9 07       	cpc	r29, r25
    2a5e:	f9 f4       	brne	.+62     	; 0x2a9e <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2a60:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <udd_g_ctrlreq+0xe>
    2a64:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <udd_g_ctrlreq+0xf>
    2a68:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2a6a:	11 f4       	brne	.+4      	; 0x2a70 <__vector_126+0x17c>
    2a6c:	d2 d8       	rcall	.-3676   	; 0x1c12 <udd_ctrl_stall_data>
    2a6e:	23 c0       	rjmp	.+70     	; 0x2ab6 <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2a70:	19 95       	eicall
    2a72:	81 11       	cpse	r24, r1
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2a76:	cd d8       	rcall	.-3686   	; 0x1c12 <udd_ctrl_stall_data>
    2a78:	1e c0       	rjmp	.+60     	; 0x2ab6 <__vector_126+0x1c2>
    2a7a:	20 91 7b 23 	lds	r18, 0x237B	; 0x80237b <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2a7e:	30 91 7c 23 	lds	r19, 0x237C	; 0x80237c <udd_ctrl_prev_payload_nb_trans+0x1>
    2a82:	80 91 79 23 	lds	r24, 0x2379	; 0x802379 <udd_ctrl_payload_nb_trans>
    2a86:	90 91 7a 23 	lds	r25, 0x237A	; 0x80237a <udd_ctrl_payload_nb_trans+0x1>
    2a8a:	82 0f       	add	r24, r18
    2a8c:	93 1f       	adc	r25, r19
    2a8e:	80 93 7b 23 	sts	0x237B, r24	; 0x80237b <udd_ctrl_prev_payload_nb_trans>
    2a92:	90 93 7c 23 	sts	0x237C, r25	; 0x80237c <udd_ctrl_prev_payload_nb_trans+0x1>
    2a96:	10 92 79 23 	sts	0x2379, r1	; 0x802379 <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2a9a:	10 92 7a 23 	sts	0x237A, r1	; 0x80237a <udd_ctrl_payload_nb_trans+0x1>
    2a9e:	e4 e9       	ldi	r30, 0x94	; 148
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2aa0:	f3 e2       	ldi	r31, 0x23	; 35
    2aa2:	02 e0       	ldi	r16, 0x02	; 2
    2aa4:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2aa6:	00 e2       	ldi	r16, 0x20	; 32
    2aa8:	06 93       	lac	Z, r16
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2aaa:	05 c0       	rjmp	.+10     	; 0x2ab6 <__vector_126+0x1c2>
    2aac:	80 38       	cpi	r24, 0x80	; 128
		udd_ctrl_in_sent();
    2aae:	11 f4       	brne	.+4      	; 0x2ab4 <__vector_126+0x1c0>
    2ab0:	d4 d8       	rcall	.-3672   	; 0x1c5a <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2ab2:	01 c0       	rjmp	.+2      	; 0x2ab6 <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2ab4:	f2 d9       	rcall	.-3100   	; 0x1e9a <udd_ep_trans_complet>
    2ab6:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2ab8:	ef 91       	pop	r30
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	bf 91       	pop	r27
    2ac0:	af 91       	pop	r26
    2ac2:	9f 91       	pop	r25
    2ac4:	8f 91       	pop	r24
    2ac6:	7f 91       	pop	r23
    2ac8:	6f 91       	pop	r22
    2aca:	5f 91       	pop	r21
    2acc:	4f 91       	pop	r20
    2ace:	3f 91       	pop	r19
    2ad0:	2f 91       	pop	r18
    2ad2:	1f 91       	pop	r17
    2ad4:	0f 91       	pop	r16
    2ad6:	0f 90       	pop	r0
    2ad8:	0b be       	out	0x3b, r0	; 59
    2ada:	0f 90       	pop	r0
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	0f 90       	pop	r0
    2ae0:	1f 90       	pop	r1
    2ae2:	18 95       	reti

00002ae4 <main>:
static volatile bool main_b_led_enable  = false;

int main (void)
{
	// initializes vector table
	irq_initialize_vectors();
    2ae4:	87 e0       	ldi	r24, 0x07	; 7
    2ae6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	// enables CPU interrupts
	cpu_irq_enable();
    2aea:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2aec:	ec ee       	ldi	r30, 0xEC	; 236
    2aee:	f3 e2       	ldi	r31, 0x23	; 35
    2af0:	10 82       	st	Z, r1
    2af2:	11 82       	std	Z+1, r1	; 0x01
    2af4:	12 82       	std	Z+2, r1	; 0x02
    2af6:	13 82       	std	Z+3, r1	; 0x03
    2af8:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	85 83       	std	Z+5, r24	; 0x05
	// initialize sleep manager
	sleepmgr_init();
	// initialize clock
	sysclk_init();
    2afe:	0e 94 09 07 	call	0xe12	; 0xe12 <sysclk_init>

	// initializes i/o pins & sub-devices
	io_ui_process();
    2b02:	0e 94 53 06 	call	0xca6	; 0xca6 <io_ui_process>

	// starts USB device controller
	udc_start();
    2b06:	0e 94 9b 0a 	call	0x1536	; 0x1536 <udc_start>

	// startup sequence (blocking)
	startup_ui_process();
    2b0a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <startup_ui_process>
	// while-loop driven operation
	// (for testing w/o a USB connection)
	while (true) {
		if (udc_is_configured()) {
			sleepmgr_enter_sleep();
		} else if ((PORTB.IN & PIN4_bm) == 0) {
    2b0e:	00 e2       	ldi	r16, 0x20	; 32
    2b10:	16 e0       	ldi	r17, 0x06	; 6

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2b12:	0f 2e       	mov	r0, r31
    2b14:	fc ee       	ldi	r31, 0xEC	; 236
    2b16:	ef 2e       	mov	r14, r31
    2b18:	f3 e2       	ldi	r31, 0x23	; 35
    2b1a:	ff 2e       	mov	r15, r31
    2b1c:	f0 2d       	mov	r31, r0
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    2b1e:	c8 e4       	ldi	r28, 0x48	; 72
    2b20:	d0 e0       	ldi	r29, 0x00	; 0
	startup_ui_process();

	// while-loop driven operation
	// (for testing w/o a USB connection)
	while (true) {
		if (udc_is_configured()) {
    2b22:	03 d8       	rcall	.-4090   	; 0x1b2a <udc_is_configured>
    2b24:	88 23       	and	r24, r24
    2b26:	09 f1       	breq	.+66     	; 0x2b6a <main+0x86>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    2b28:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2b2a:	f7 01       	movw	r30, r14
    2b2c:	80 81       	ld	r24, Z
    2b2e:	81 11       	cpse	r24, r1
    2b30:	09 c0       	rjmp	.+18     	; 0x2b44 <main+0x60>
    2b32:	ad ee       	ldi	r26, 0xED	; 237
    2b34:	b3 e2       	ldi	r27, 0x23	; 35
    2b36:	e0 e0       	ldi	r30, 0x00	; 0
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    2b38:	ef 5f       	subi	r30, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2b3a:	8d 91       	ld	r24, X+
    2b3c:	88 23       	and	r24, r24
    2b3e:	e1 f3       	breq	.-8      	; 0x2b38 <main+0x54>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    2b40:	e1 11       	cpse	r30, r1
    2b42:	02 c0       	rjmp	.+4      	; 0x2b48 <main+0x64>
		cpu_irq_enable();
    2b44:	78 94       	sei
    2b46:	ed cf       	rjmp	.-38     	; 0x2b22 <main+0x3e>
    2b48:	88 81       	ld	r24, Y

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	e8 5d       	subi	r30, 0xD8	; 216
    2b4e:	ff 4d       	sbci	r31, 0xDF	; 223
    2b50:	81 7f       	andi	r24, 0xF1	; 241
    2b52:	90 81       	ld	r25, Z
    2b54:	89 2b       	or	r24, r25
    2b56:	88 83       	st	Y, r24
	sleep_enable();
    2b58:	88 81       	ld	r24, Y
    2b5a:	81 60       	ori	r24, 0x01	; 1
    2b5c:	88 83       	st	Y, r24

	cpu_irq_enable();
    2b5e:	78 94       	sei
	sleep_enter();
    2b60:	88 95       	sleep

	sleep_disable();
    2b62:	88 81       	ld	r24, Y
    2b64:	8e 7f       	andi	r24, 0xFE	; 254
    2b66:	88 83       	st	Y, r24
    2b68:	dc cf       	rjmp	.-72     	; 0x2b22 <main+0x3e>
			sleepmgr_enter_sleep();
		} else if ((PORTB.IN & PIN4_bm) == 0) {
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	80 85       	ldd	r24, Z+8	; 0x08
    2b6e:	84 fd       	sbrc	r24, 4
    2b70:	d8 cf       	rjmp	.-80     	; 0x2b22 <main+0x3e>
			kbd_ui_process();
    2b72:	0e 94 88 06 	call	0xd10	; 0xd10 <kbd_ui_process>
			jstk_ui_process();
    2b76:	0e 94 8b 06 	call	0xd16	; 0xd16 <jstk_ui_process>
			status_ui_process(0);
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	0e 94 be 06 	call	0xd7c	; 0xd7c <status_ui_process>
    2b80:	89 ef       	ldi	r24, 0xF9	; 249
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <main+0xa0>
    2b88:	00 c0       	rjmp	.+0      	; 0x2b8a <main+0xa6>
    2b8a:	00 00       	nop
    2b8c:	ca cf       	rjmp	.-108    	; 0x2b22 <main+0x3e>

00002b8e <main_suspend_action>:


/* ------------------------------------------ */
/* ------------------- USB ------------------ */
/* ------------------------------------------ */
void main_suspend_action(void) { }
    2b8e:	08 95       	ret

00002b90 <main_resume_action>:
void main_resume_action(void) { }
    2b90:	08 95       	ret

00002b92 <main_sof_action>:

// SoF driven operation
// (for normal use)
void main_sof_action(void) {
	if (!main_b_kbd_enable)
    2b92:	80 91 eb 23 	lds	r24, 0x23EB	; 0x8023eb <main_b_kbd_enable>
    2b96:	88 23       	and	r24, r24
    2b98:	99 f0       	breq	.+38     	; 0x2bc0 <main_sof_action+0x2e>
		return;
	kbd_ui_process   ( ); // keypad logic
    2b9a:	0e 94 88 06 	call	0xd10	; 0xd10 <kbd_ui_process>

	if (!main_b_jstk_enable)
    2b9e:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <main_b_jstk_enable>
    2ba2:	88 23       	and	r24, r24
    2ba4:	69 f0       	breq	.+26     	; 0x2bc0 <main_sof_action+0x2e>
		return;
	jstk_ui_process  ( ); // joystick logic
    2ba6:	0e 94 8b 06 	call	0xd16	; 0xd16 <jstk_ui_process>

	if (!main_b_led_enable)
    2baa:	80 91 e9 23 	lds	r24, 0x23E9	; 0x8023e9 <main_b_led_enable>
    2bae:	88 23       	and	r24, r24
    2bb0:	39 f0       	breq	.+14     	; 0x2bc0 <main_sof_action+0x2e>
		return;

	gui_ui_process   ( ); // sends USB IN report
    2bb2:	0e 94 55 06 	call	0xcaa	; 0xcaa <gui_ui_process>
	status_ui_process(1); // status LED behavior
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	0e 94 be 06 	call	0xd7c	; 0xd7c <status_ui_process>
	idle_ui_process  ( ); // idle LED sequence
    2bbc:	0c 94 00 07 	jmp	0xe00	; 0xe00 <idle_ui_process>
    2bc0:	08 95       	ret

00002bc2 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2bc2:	08 95       	ret

00002bc4 <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2bc4:	08 95       	ret

00002bc6 <main_kbd_enable>:

/* ------------------------------------------ */
/* ---------------- Keyboard ---------------- */
/* ------------------------------------------ */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	80 93 eb 23 	sts	0x23EB, r24	; 0x8023eb <main_b_kbd_enable>
	return true;
}
    2bcc:	08 95       	ret

00002bce <main_kbd_disable>:
void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2bce:	10 92 eb 23 	sts	0x23EB, r1	; 0x8023eb <main_b_kbd_enable>
    2bd2:	08 95       	ret

00002bd4 <main_joystick_enable>:

/* ------------------------------------------ */
/* ---------------- Joystick ---------------- */
/* ------------------------------------------ */
bool main_joystick_enable(void) {
	main_b_jstk_enable = true;
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	80 93 ea 23 	sts	0x23EA, r24	; 0x8023ea <main_b_jstk_enable>
	return true;
}
    2bda:	08 95       	ret

00002bdc <main_joystick_disable>:
void main_joystick_disable(void) {
	main_b_jstk_enable = false;
    2bdc:	10 92 ea 23 	sts	0x23EA, r1	; 0x8023ea <main_b_jstk_enable>
    2be0:	08 95       	ret

00002be2 <main_led_enable>:

/* ------------------------------------------ */
/* ------------------ LEDs ------------------ */
/* ------------------------------------------ */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	80 93 e9 23 	sts	0x23E9, r24	; 0x8023e9 <main_b_led_enable>
	return true;
}
    2be8:	08 95       	ret

00002bea <main_led_disable>:
void main_led_disable(void) {
	main_b_led_enable = false;
    2bea:	10 92 e9 23 	sts	0x23E9, r1	; 0x8023e9 <main_b_led_enable>
    2bee:	08 95       	ret

00002bf0 <__udivmodhi4>:
    2bf0:	aa 1b       	sub	r26, r26
    2bf2:	bb 1b       	sub	r27, r27
    2bf4:	51 e1       	ldi	r21, 0x11	; 17
    2bf6:	07 c0       	rjmp	.+14     	; 0x2c06 <__udivmodhi4_ep>

00002bf8 <__udivmodhi4_loop>:
    2bf8:	aa 1f       	adc	r26, r26
    2bfa:	bb 1f       	adc	r27, r27
    2bfc:	a6 17       	cp	r26, r22
    2bfe:	b7 07       	cpc	r27, r23
    2c00:	10 f0       	brcs	.+4      	; 0x2c06 <__udivmodhi4_ep>
    2c02:	a6 1b       	sub	r26, r22
    2c04:	b7 0b       	sbc	r27, r23

00002c06 <__udivmodhi4_ep>:
    2c06:	88 1f       	adc	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	5a 95       	dec	r21
    2c0c:	a9 f7       	brne	.-22     	; 0x2bf8 <__udivmodhi4_loop>
    2c0e:	80 95       	com	r24
    2c10:	90 95       	com	r25
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	08 95       	ret

00002c18 <__tablejump2__>:
    2c18:	ee 0f       	add	r30, r30
    2c1a:	ff 1f       	adc	r31, r31
    2c1c:	88 1f       	adc	r24, r24
    2c1e:	8b bf       	out	0x3b, r24	; 59
    2c20:	07 90       	elpm	r0, Z+
    2c22:	f6 91       	elpm	r31, Z
    2c24:	e0 2d       	mov	r30, r0
    2c26:	19 94       	eijmp

00002c28 <memcpy>:
    2c28:	fb 01       	movw	r30, r22
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <memcpy+0xa>
    2c2e:	01 90       	ld	r0, Z+
    2c30:	0d 92       	st	X+, r0
    2c32:	41 50       	subi	r20, 0x01	; 1
    2c34:	50 40       	sbci	r21, 0x00	; 0
    2c36:	d8 f7       	brcc	.-10     	; 0x2c2e <memcpy+0x6>
    2c38:	08 95       	ret

00002c3a <_exit>:
    2c3a:	f8 94       	cli

00002c3c <__stop_program>:
    2c3c:	ff cf       	rjmp	.-2      	; 0x2c3c <__stop_program>
